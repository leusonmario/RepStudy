/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 02 07:10:46 GMT 2021
 */

package retrofit;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Method;
import java.util.LinkedList;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import retrofit.RequestBuilder;
import retrofit.RestMethodInfo;
import retrofit.SerializedObjectSupporter;
import retrofit.client.Header;
import retrofit.converter.Converter;
import retrofit.converter.GsonConverter;
import retrofit.mime.FormUrlEncodedTypedOutput;
import retrofit.mime.TypedByteArray;
import retrofit.mime.TypedOutput;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RequestBuilder_ESTest extends RequestBuilder_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      GsonConverter gsonConverter0 = serializedObjectSupporter0.deserializeObjectConverter3();
      assertNotNull(gsonConverter0);
      
      RequestBuilder requestBuilder0 = new RequestBuilder(gsonConverter0);
      assertNotNull(requestBuilder0);
      assertNull(requestBuilder0.getapiUrl());
      
      String string0 = requestBuilder0.getapiUrl();
      assertNull(string0);
      assertNull(requestBuilder0.getapiUrl());
      
      RequestBuilder requestBuilder1 = requestBuilder0.args(requestBuilder0.args);
      assertNotNull(requestBuilder1);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      
      requestBuilder0.setmethodInfo(requestBuilder1.methodInfo);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      
      requestBuilder1.setheaders(requestBuilder0.headers);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      
      List<Header> list0 = requestBuilder0.getheaders();
      assertNull(list0);
      assertNull(requestBuilder0.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      
      RequestBuilder requestBuilder2 = requestBuilder1.headers(list0);
      assertNotNull(requestBuilder2);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertNull(requestBuilder2.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder1);
      
      RequestBuilder requestBuilder3 = requestBuilder2.methodInfo(requestBuilder1.methodInfo);
      assertNotNull(requestBuilder3);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertNull(requestBuilder2.getapiUrl());
      assertNull(requestBuilder3.getapiUrl());
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder3);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder3);
      assertSame(requestBuilder3, requestBuilder0);
      assertSame(requestBuilder3, requestBuilder2);
      assertSame(requestBuilder3, requestBuilder1);
      
      Object[] objectArray0 = requestBuilder0.getargs();
      assertNull(objectArray0);
      assertNull(requestBuilder0.getapiUrl());
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder2);
      
      Converter converter0 = requestBuilder2.getconverter();
      assertNotNull(converter0);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertNull(requestBuilder2.getapiUrl());
      assertSame(gsonConverter0, converter0);
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder3);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder3);
      assertSame(converter0, gsonConverter0);
      
      // Undeclared exception!
      try { 
        requestBuilder2.buildBody();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RequestBuilder", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      GsonConverter gsonConverter0 = serializedObjectSupporter0.deserializeObjectConverter3();
      assertNotNull(gsonConverter0);
      
      RequestBuilder requestBuilder0 = new RequestBuilder(gsonConverter0);
      assertNotNull(requestBuilder0);
      assertNull(requestBuilder0.getapiUrl());
      
      String string0 = "O|J@;1e(+A8/";
      RequestBuilder requestBuilder1 = requestBuilder0.apiUrl(string0);
      assertNotNull(requestBuilder1);
      assertEquals("O|J@;1e(+A8/", requestBuilder0.getapiUrl());
      assertEquals("O|J@;1e(+A8/", requestBuilder1.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      
      requestBuilder0.setargs(requestBuilder0.args);
      assertEquals("O|J@;1e(+A8/", requestBuilder0.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      
      RestMethodInfo restMethodInfo0 = requestBuilder0.getmethodInfo();
      assertNull(restMethodInfo0);
      assertEquals("O|J@;1e(+A8/", requestBuilder0.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      
      // Undeclared exception!
      try { 
        requestBuilder1.build();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RequestBuilder", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      GsonConverter gsonConverter0 = serializedObjectSupporter0.deserializeObjectConverter10();
      assertNotNull(gsonConverter0);
      
      RequestBuilder requestBuilder0 = new RequestBuilder(gsonConverter0);
      assertNotNull(requestBuilder0);
      assertNull(requestBuilder0.getapiUrl());
      
      String string0 = "x~ufFxr'U\\Em'?-";
      requestBuilder0.setapiUrl(string0);
      assertEquals("x~ufFxr'U\\Em'?-", requestBuilder0.getapiUrl());
      
      // Undeclared exception!
      try { 
        requestBuilder0.build();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RequestBuilder", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      GsonConverter gsonConverter0 = serializedObjectSupporter0.deserializeObjectConverter1();
      assertNotNull(gsonConverter0);
      
      RequestBuilder requestBuilder0 = new RequestBuilder(gsonConverter0);
      assertNotNull(requestBuilder0);
      assertNull(requestBuilder0.getapiUrl());
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      GsonConverter gsonConverter0 = serializedObjectSupporter0.deserializeObjectConverter4();
      assertNotNull(gsonConverter0);
      
      RequestBuilder requestBuilder0 = new RequestBuilder(gsonConverter0);
      assertNotNull(requestBuilder0);
      assertNull(requestBuilder0.getapiUrl());
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) gsonConverter0;
      objectArray0[1] = (Object) serializedObjectSupporter0;
      objectArray0[2] = (Object) serializedObjectSupporter0;
      objectArray0[3] = (Object) serializedObjectSupporter0;
      objectArray0[4] = (Object) requestBuilder0;
      objectArray0[5] = (Object) requestBuilder0;
      requestBuilder0.args = objectArray0;
      assertNull(requestBuilder0.getapiUrl());
      
      // Undeclared exception!
      try { 
        requestBuilder0.buildRelativeUrl();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RequestBuilder", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      GsonConverter gsonConverter0 = serializedObjectSupporter0.deserializeObjectConverter3();
      assertNotNull(gsonConverter0);
      
      RequestBuilder requestBuilder0 = new RequestBuilder(gsonConverter0);
      assertNotNull(requestBuilder0);
      assertNull(requestBuilder0.getapiUrl());
      
      String string0 = requestBuilder0.getapiUrl();
      assertNull(string0);
      assertNull(requestBuilder0.getapiUrl());
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) serializedObjectSupporter0;
      objectArray0[1] = (Object) gsonConverter0;
      objectArray0[2] = (Object) requestBuilder0;
      objectArray0[3] = (Object) requestBuilder0;
      objectArray0[4] = (Object) gsonConverter0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[5] = object0;
      objectArray0[6] = (Object) requestBuilder0;
      requestBuilder0.setargs(objectArray0);
      assertEquals(7, objectArray0.length);
      assertNull(requestBuilder0.getapiUrl());
      
      requestBuilder0.setapiUrl(string0);
      assertNull(requestBuilder0.getapiUrl());
      
      // Undeclared exception!
      try { 
        requestBuilder0.build();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
          assertNotNull(serializedObjectSupporter0);
          
          GsonConverter gsonConverter0 = serializedObjectSupporter0.deserializeObjectConverter4();
          assertNotNull(gsonConverter0);
          
          RequestBuilder requestBuilder0 = new RequestBuilder(gsonConverter0);
          assertNotNull(requestBuilder0);
          assertNull(requestBuilder0.getapiUrl());
          
          String string0 = "";
          RequestBuilder requestBuilder1 = requestBuilder0.apiUrl(string0);
          assertNotNull(requestBuilder1);
          assertEquals("", requestBuilder0.getapiUrl());
          assertEquals("", requestBuilder1.getapiUrl());
          assertSame(requestBuilder0, requestBuilder1);
          assertSame(requestBuilder1, requestBuilder0);
          
          List<Header> list0 = null;
          requestBuilder0.setheaders(list0);
          assertEquals("", requestBuilder0.getapiUrl());
          assertSame(requestBuilder0, requestBuilder1);
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(11000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      Converter converter0 = null;
      RequestBuilder requestBuilder0 = new RequestBuilder(converter0);
      assertNotNull(requestBuilder0);
      assertNull(requestBuilder0.getapiUrl());
      
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) requestBuilder0;
      objectArray0[2] = (Object) converter0;
      objectArray0[3] = (Object) requestBuilder0;
      objectArray0[4] = (Object) requestBuilder0;
      requestBuilder0.args = objectArray0;
      assertNull(requestBuilder0.getapiUrl());
      
      RestMethodInfo restMethodInfo0 = requestBuilder0.getmethodInfo();
      assertNull(restMethodInfo0);
      assertNull(requestBuilder0.getapiUrl());
      
      String string0 = requestBuilder0.getapiUrl();
      assertNull(string0);
      assertNull(requestBuilder0.getapiUrl());
      
      String string1 = "";
      Method method0 = null;
      RestMethodInfo restMethodInfo1 = null;
      try {
        restMethodInfo1 = new RestMethodInfo(method0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RestMethodInfo", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      GsonConverter gsonConverter0 = serializedObjectSupporter0.deserializeObjectConverter8();
      assertNotNull(gsonConverter0);
      
      RequestBuilder requestBuilder0 = new RequestBuilder(gsonConverter0);
      assertNotNull(requestBuilder0);
      assertNull(requestBuilder0.getapiUrl());
      
      LinkedList<Header> linkedList0 = new LinkedList<Header>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      RequestBuilder requestBuilder1 = requestBuilder0.headers(linkedList0);
      assertNotNull(requestBuilder1);
      assertNull(requestBuilder0.getapiUrl());
      assertEquals(0, linkedList0.size());
      assertNull(requestBuilder1.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      
      // Undeclared exception!
      try { 
        requestBuilder0.buildRelativeUrl();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RequestBuilder", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      GsonConverter gsonConverter0 = serializedObjectSupporter0.deserializeObjectConverter3();
      assertNotNull(gsonConverter0);
      
      RequestBuilder requestBuilder0 = new RequestBuilder(gsonConverter0);
      assertNotNull(requestBuilder0);
      assertNull(requestBuilder0.getapiUrl());
      
      String string0 = "N}gmX:h8(bEjy:j,";
      RequestBuilder requestBuilder1 = requestBuilder0.apiUrl(string0);
      assertNotNull(requestBuilder1);
      assertEquals("N}gmX:h8(bEjy:j,", requestBuilder0.getapiUrl());
      assertEquals("N}gmX:h8(bEjy:j,", requestBuilder1.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      
      TypedOutput typedOutput0 = gsonConverter0.toBody(string0);
      assertNotNull(typedOutput0);
      assertEquals(18L, typedOutput0.length());
      assertEquals("application/json; charset=UTF-8", typedOutput0.mimeType());
      assertNull(typedOutput0.fileName());
      
      // Undeclared exception!
      try { 
        requestBuilder1.buildBody();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RequestBuilder", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      Converter converter0 = null;
      RequestBuilder requestBuilder0 = new RequestBuilder(converter0);
      assertNotNull(requestBuilder0);
      assertNull(requestBuilder0.getapiUrl());
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) converter0;
      objectArray0[1] = (Object) converter0;
      objectArray0[2] = (Object) converter0;
      objectArray0[3] = (Object) requestBuilder0;
      objectArray0[4] = (Object) converter0;
      objectArray0[5] = (Object) requestBuilder0;
      requestBuilder0.args = objectArray0;
      assertNull(requestBuilder0.getapiUrl());
      
      SerializedObjectSupporter serializedObjectSupporter0 = requestBuilder0.serializedObjectSupporter;
      assertNull(serializedObjectSupporter0);
      
      requestBuilder0.serializedObjectSupporter = serializedObjectSupporter0;
      assertNull(requestBuilder0.getapiUrl());
      
      // Undeclared exception!
      try { 
        requestBuilder0.buildBody();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RequestBuilder", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      GsonConverter gsonConverter0 = serializedObjectSupporter0.deserializeObjectConverter3();
      assertNotNull(gsonConverter0);
      
      RequestBuilder requestBuilder0 = new RequestBuilder(gsonConverter0);
      assertNotNull(requestBuilder0);
      assertNull(requestBuilder0.getapiUrl());
      
      String string0 = requestBuilder0.getapiUrl();
      assertNull(string0);
      assertNull(requestBuilder0.getapiUrl());
      
      Object[] objectArray0 = new Object[7];
      RequestBuilder requestBuilder1 = requestBuilder0.args(objectArray0);
      assertEquals(7, objectArray0.length);
      assertNotNull(requestBuilder1);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      
      objectArray0[0] = (Object) serializedObjectSupporter0;
      objectArray0[1] = (Object) gsonConverter0;
      objectArray0[2] = (Object) requestBuilder0;
      objectArray0[3] = (Object) requestBuilder0;
      objectArray0[4] = (Object) gsonConverter0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[6] = (Object) requestBuilder0;
      requestBuilder0.setargs(objectArray0);
      assertEquals(7, objectArray0.length);
      assertNull(requestBuilder0.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      
      String string1 = requestBuilder0.getapiUrl();
      assertNull(string1);
      assertNull(requestBuilder0.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      
      List<Header> list0 = requestBuilder0.getheaders();
      assertNull(list0);
      assertNull(requestBuilder0.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      
      RequestBuilder requestBuilder2 = requestBuilder1.headers(list0);
      assertEquals(7, objectArray0.length);
      assertNotNull(requestBuilder2);
      assertNull(requestBuilder2.getapiUrl());
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder2);
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      GsonConverter gsonConverter0 = serializedObjectSupporter0.deserializeObjectConverter3();
      assertNotNull(gsonConverter0);
      
      String string0 = "retrofit.RequestBuilder";
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte) (-114);
      byteArray0[0] = byte0;
      byte byte1 = (byte)120;
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      byteArray0[3] = byte3;
      byte byte4 = (byte)0;
      byteArray0[4] = byte4;
      byte byte5 = (byte)3;
      byteArray0[5] = byte5;
      byte byte6 = (byte)103;
      byteArray0[6] = byte6;
      TypedByteArray typedByteArray0 = new TypedByteArray(string0, byteArray0);
      assertEquals(7, byteArray0.length);
      assertNotNull(typedByteArray0);
      assertEquals("retrofit.RequestBuilder", typedByteArray0.mimeType());
      assertNull(typedByteArray0.fileName());
      assertEquals(7L, typedByteArray0.length());
      assertArrayEquals(new byte[] {(byte) (-114), (byte)120, (byte)0, (byte)0, (byte)0, (byte)3, (byte)103}, byteArray0);
      
      Class<Boolean> class0 = Boolean.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertTrue(class0.isPrimitive());
      assertEquals("boolean", class0.toString());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      
      Object object0 = gsonConverter0.fromBody(typedByteArray0, class0);
      assertEquals(7, byteArray0.length);
      assertEquals(false, object0);
      assertNotNull(object0);
      assertEquals("retrofit.RequestBuilder", typedByteArray0.mimeType());
      assertNull(typedByteArray0.fileName());
      assertEquals(7L, typedByteArray0.length());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertTrue(class0.isPrimitive());
      assertEquals("boolean", class0.toString());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertArrayEquals(new byte[] {(byte) (-114), (byte)120, (byte)0, (byte)0, (byte)0, (byte)3, (byte)103}, byteArray0);
      
      RequestBuilder requestBuilder0 = new RequestBuilder(gsonConverter0);
      assertNotNull(requestBuilder0);
      assertNull(requestBuilder0.getapiUrl());
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) gsonConverter0;
      objectArray0[1] = (Object) serializedObjectSupporter0;
      FormUrlEncodedTypedOutput formUrlEncodedTypedOutput0 = new FormUrlEncodedTypedOutput();
      assertNotNull(formUrlEncodedTypedOutput0);
      assertEquals(0L, formUrlEncodedTypedOutput0.length());
      assertNull(formUrlEncodedTypedOutput0.fileName());
      assertEquals("application/x-www-form-urlencoded; charset=UTF-8", formUrlEncodedTypedOutput0.mimeType());
      
      TypedOutput typedOutput0 = gsonConverter0.toBody(formUrlEncodedTypedOutput0);
      assertNotNull(typedOutput0);
      assertEquals(0L, formUrlEncodedTypedOutput0.length());
      assertNull(formUrlEncodedTypedOutput0.fileName());
      assertEquals("application/x-www-form-urlencoded; charset=UTF-8", formUrlEncodedTypedOutput0.mimeType());
      assertEquals("application/json; charset=UTF-8", typedOutput0.mimeType());
      assertNull(typedOutput0.fileName());
      assertEquals(890L, typedOutput0.length());
      
      Object object1 = new Object();
      assertNotNull(object1);
      
      objectArray0[2] = object1;
      objectArray0[3] = (Object) gsonConverter0;
      objectArray0[4] = (Object) serializedObjectSupporter0;
      objectArray0[5] = (Object) serializedObjectSupporter0;
      objectArray0[6] = (Object) serializedObjectSupporter0;
      requestBuilder0.setargs(objectArray0);
      assertEquals(7, objectArray0.length);
      assertNull(requestBuilder0.getapiUrl());
      
      String string1 = requestBuilder0.getapiUrl();
      assertNull(string1);
      assertNull(requestBuilder0.getapiUrl());
      
      RequestBuilder requestBuilder1 = requestBuilder0.args(objectArray0);
      assertEquals(7, objectArray0.length);
      assertNotNull(requestBuilder1);
      assertNull(requestBuilder1.getapiUrl());
      assertNull(requestBuilder0.getapiUrl());
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder0, requestBuilder1);
      
      String string2 = requestBuilder1.getapiUrl();
      assertEquals(7, objectArray0.length);
      assertNull(string2);
      assertNull(requestBuilder1.getapiUrl());
      assertNull(requestBuilder0.getapiUrl());
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder0, requestBuilder1);
      
      Converter converter0 = requestBuilder0.getconverter();
      assertNotNull(converter0);
      assertNull(requestBuilder0.getapiUrl());
      assertSame(gsonConverter0, converter0);
      assertSame(converter0, gsonConverter0);
      assertSame(requestBuilder0, requestBuilder1);
      
      // Undeclared exception!
      try { 
        requestBuilder1.buildBody();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RequestBuilder", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      GsonConverter gsonConverter0 = serializedObjectSupporter0.deserializeObjectConverter5();
      assertNotNull(gsonConverter0);
      
      RequestBuilder requestBuilder0 = new RequestBuilder(gsonConverter0);
      assertNotNull(requestBuilder0);
      assertNull(requestBuilder0.getapiUrl());
      
      Object[] objectArray0 = null;
      RequestBuilder requestBuilder1 = requestBuilder0.args(objectArray0);
      assertNotNull(requestBuilder1);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      
      RequestBuilder requestBuilder2 = requestBuilder1.args(objectArray0);
      assertNotNull(requestBuilder2);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertNull(requestBuilder2.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder0);
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      GsonConverter gsonConverter0 = serializedObjectSupporter0.deserializeObjectConverter3();
      assertNotNull(gsonConverter0);
      
      RequestBuilder requestBuilder0 = new RequestBuilder(gsonConverter0);
      assertNotNull(requestBuilder0);
      assertNull(requestBuilder0.getapiUrl());
      
      String string0 = requestBuilder0.getapiUrl();
      assertNull(string0);
      assertNull(requestBuilder0.getapiUrl());
      
      Object[] objectArray0 = new Object[7];
      RequestBuilder requestBuilder1 = requestBuilder0.args(objectArray0);
      assertEquals(7, objectArray0.length);
      assertNotNull(requestBuilder1);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      
      objectArray0[0] = (Object) serializedObjectSupporter0;
      objectArray0[1] = (Object) gsonConverter0;
      objectArray0[2] = (Object) requestBuilder0;
      objectArray0[3] = (Object) requestBuilder0;
      objectArray0[4] = (Object) gsonConverter0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[6] = (Object) requestBuilder0;
      requestBuilder0.setargs(objectArray0);
      assertEquals(7, objectArray0.length);
      assertNull(requestBuilder0.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      
      String string1 = requestBuilder0.getapiUrl();
      assertNull(string1);
      assertNull(requestBuilder0.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      
      List<Header> list0 = requestBuilder0.getheaders();
      assertNull(list0);
      assertNull(requestBuilder0.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      
      RequestBuilder requestBuilder2 = requestBuilder1.headers(list0);
      assertEquals(7, objectArray0.length);
      assertNotNull(requestBuilder2);
      assertNull(requestBuilder2.getapiUrl());
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder0);
      
      Object[] objectArray1 = requestBuilder2.getargs();
      assertEquals(7, objectArray1.length);
      assertEquals(7, objectArray0.length);
      assertNotNull(objectArray1);
      assertNull(requestBuilder2.getapiUrl());
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(objectArray1, objectArray0);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(objectArray0, objectArray1);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder0);
      
      RequestBuilder requestBuilder3 = requestBuilder2.headers(list0);
      assertEquals(7, objectArray0.length);
      assertNotNull(requestBuilder3);
      assertNull(requestBuilder2.getapiUrl());
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder3.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertSame(requestBuilder2, requestBuilder3);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder3, requestBuilder0);
      assertSame(requestBuilder3, requestBuilder2);
      assertSame(requestBuilder3, requestBuilder1);
      assertSame(objectArray0, objectArray1);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder3);
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      GsonConverter gsonConverter0 = serializedObjectSupporter0.deserializeObjectConverter3();
      assertNotNull(gsonConverter0);
      
      RequestBuilder requestBuilder0 = new RequestBuilder(gsonConverter0);
      assertNotNull(requestBuilder0);
      assertNull(requestBuilder0.getapiUrl());
      
      String string0 = requestBuilder0.getapiUrl();
      assertNull(string0);
      assertNull(requestBuilder0.getapiUrl());
      
      Object[] objectArray0 = new Object[7];
      RequestBuilder requestBuilder1 = requestBuilder0.args(objectArray0);
      assertEquals(7, objectArray0.length);
      assertNotNull(requestBuilder1);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      
      objectArray0[0] = (Object) serializedObjectSupporter0;
      requestBuilder0.setmethodInfo(requestBuilder1.methodInfo);
      assertEquals(7, objectArray0.length);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      
      objectArray0[1] = (Object) gsonConverter0;
      objectArray0[2] = (Object) requestBuilder0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      requestBuilder1.setheaders(requestBuilder0.headers);
      assertEquals(7, objectArray0.length);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      
      objectArray0[6] = (Object) requestBuilder0;
      requestBuilder0.setargs(objectArray0);
      assertEquals(7, objectArray0.length);
      assertNull(requestBuilder0.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      
      String string1 = requestBuilder0.getapiUrl();
      assertNull(string1);
      assertNull(requestBuilder0.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      
      List<Header> list0 = requestBuilder0.getheaders();
      assertNull(list0);
      assertNull(requestBuilder0.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      
      RequestBuilder requestBuilder2 = requestBuilder1.headers(list0);
      assertEquals(7, objectArray0.length);
      assertNotNull(requestBuilder2);
      assertNull(requestBuilder2.getapiUrl());
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder0);
      
      RequestBuilder requestBuilder3 = requestBuilder2.methodInfo(requestBuilder1.methodInfo);
      assertEquals(7, objectArray0.length);
      assertNotNull(requestBuilder3);
      assertNull(requestBuilder2.getapiUrl());
      assertNull(requestBuilder3.getapiUrl());
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder3);
      assertSame(requestBuilder3, requestBuilder2);
      assertSame(requestBuilder3, requestBuilder0);
      assertSame(requestBuilder3, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder1, requestBuilder3);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder0);
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      GsonConverter gsonConverter0 = serializedObjectSupporter0.deserializeObjectConverter7();
      assertNotNull(gsonConverter0);
      
      String string0 = "com.thoughtworks.xstream.converters.reflection.MissingFieldException";
      Header header0 = new Header(string0, string0);
      assertNotNull(header0);
      assertEquals("com.thoughtworks.xstream.converters.reflection.MissingFieldException", header0.getName());
      assertEquals("com.thoughtworks.xstream.converters.reflection.MissingFieldException", header0.getValue());
      
      String string1 = header0.toString();
      assertEquals("com.thoughtworks.xstream.converters.reflection.MissingFieldException: com.thoughtworks.xstream.converters.reflection.MissingFieldException", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("com.thoughtworks.xstream.converters.reflection.MissingFieldException", header0.getName());
      assertEquals("com.thoughtworks.xstream.converters.reflection.MissingFieldException", header0.getValue());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      String string2 = header0.toString();
      assertEquals("com.thoughtworks.xstream.converters.reflection.MissingFieldException: com.thoughtworks.xstream.converters.reflection.MissingFieldException", string2);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("com.thoughtworks.xstream.converters.reflection.MissingFieldException", header0.getName());
      assertEquals("com.thoughtworks.xstream.converters.reflection.MissingFieldException", header0.getValue());
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      
      String string3 = header0.toString();
      assertEquals("com.thoughtworks.xstream.converters.reflection.MissingFieldException: com.thoughtworks.xstream.converters.reflection.MissingFieldException", string3);
      assertNotNull(string3);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertEquals("com.thoughtworks.xstream.converters.reflection.MissingFieldException", header0.getName());
      assertEquals("com.thoughtworks.xstream.converters.reflection.MissingFieldException", header0.getValue());
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      
      TypedOutput typedOutput0 = gsonConverter0.toBody(header0);
      assertNotNull(typedOutput0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertEquals("com.thoughtworks.xstream.converters.reflection.MissingFieldException", header0.getName());
      assertEquals("com.thoughtworks.xstream.converters.reflection.MissingFieldException", header0.getValue());
      assertEquals(158L, typedOutput0.length());
      assertEquals("application/json; charset=UTF-8", typedOutput0.mimeType());
      assertNull(typedOutput0.fileName());
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      
      RequestBuilder requestBuilder0 = new RequestBuilder(gsonConverter0);
      assertNotNull(requestBuilder0);
      assertNull(requestBuilder0.getapiUrl());
      
      List<Header> list0 = requestBuilder0.getheaders();
      assertNull(list0);
      assertNull(requestBuilder0.getapiUrl());
      
      requestBuilder0.setheaders(list0);
      assertNull(requestBuilder0.getapiUrl());
      
      Object[] objectArray0 = null;
      requestBuilder0.args = objectArray0;
      assertNull(requestBuilder0.getapiUrl());
      
      RequestBuilder requestBuilder1 = serializedObjectSupporter0.deserializeObjectRequestBuilder22();
      assertNull(requestBuilder1);
      
      RequestBuilder requestBuilder2 = requestBuilder0.headers(list0);
      assertNotNull(requestBuilder2);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder2.getapiUrl());
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder2, requestBuilder0);
      
      RequestBuilder requestBuilder3 = requestBuilder0.args(requestBuilder2.args);
      assertNotNull(requestBuilder3);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder2.getapiUrl());
      assertNull(requestBuilder3.getapiUrl());
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder2, requestBuilder3);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder3, requestBuilder2);
      assertSame(requestBuilder3, requestBuilder0);
      
      List<Header> list1 = requestBuilder3.getheaders();
      assertNull(list1);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder2.getapiUrl());
      assertNull(requestBuilder3.getapiUrl());
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder2, requestBuilder3);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder3, requestBuilder2);
      assertSame(requestBuilder3, requestBuilder0);
      
      // Undeclared exception!
      try { 
        requestBuilder2.build();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      GsonConverter gsonConverter0 = serializedObjectSupporter0.deserializeObjectConverter3();
      assertNotNull(gsonConverter0);
      
      RequestBuilder requestBuilder0 = new RequestBuilder(gsonConverter0);
      assertNotNull(requestBuilder0);
      assertNull(requestBuilder0.getapiUrl());
      
      String string0 = requestBuilder0.getapiUrl();
      assertNull(string0);
      assertNull(requestBuilder0.getapiUrl());
      
      Object[] objectArray0 = new Object[7];
      RequestBuilder requestBuilder1 = requestBuilder0.args(objectArray0);
      assertEquals(7, objectArray0.length);
      assertNotNull(requestBuilder1);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      
      objectArray0[0] = (Object) serializedObjectSupporter0;
      objectArray0[1] = (Object) gsonConverter0;
      objectArray0[2] = (Object) requestBuilder0;
      objectArray0[3] = (Object) requestBuilder0;
      objectArray0[4] = (Object) gsonConverter0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[6] = (Object) requestBuilder0;
      requestBuilder0.setargs(objectArray0);
      assertEquals(7, objectArray0.length);
      assertNull(requestBuilder0.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      
      String string1 = requestBuilder0.getapiUrl();
      assertNull(string1);
      assertNull(requestBuilder0.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      
      List<Header> list0 = requestBuilder0.getheaders();
      assertNull(list0);
      assertNull(requestBuilder0.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      
      RequestBuilder requestBuilder2 = requestBuilder1.headers(list0);
      assertEquals(7, objectArray0.length);
      assertNotNull(requestBuilder2);
      assertNull(requestBuilder2.getapiUrl());
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder0);
      
      RestMethodInfo restMethodInfo0 = requestBuilder1.getmethodInfo();
      assertEquals(7, objectArray0.length);
      assertNull(restMethodInfo0);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder0);
      
      Object[] objectArray1 = requestBuilder0.getargs();
      assertEquals(7, objectArray1.length);
      assertNotNull(objectArray1);
      assertNull(requestBuilder0.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(objectArray1, objectArray0);
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      GsonConverter gsonConverter0 = serializedObjectSupporter0.deserializeObjectConverter3();
      assertNotNull(gsonConverter0);
      
      RequestBuilder requestBuilder0 = new RequestBuilder(gsonConverter0);
      assertNotNull(requestBuilder0);
      assertNull(requestBuilder0.getapiUrl());
      
      TypedOutput typedOutput0 = gsonConverter0.toBody(requestBuilder0);
      assertNotNull(typedOutput0);
      assertNull(requestBuilder0.getapiUrl());
      assertEquals("application/json; charset=UTF-8", typedOutput0.mimeType());
      assertEquals(4792L, typedOutput0.length());
      assertNull(typedOutput0.fileName());
      
      String string0 = requestBuilder0.getapiUrl();
      assertNull(string0);
      assertNull(requestBuilder0.getapiUrl());
      
      Object[] objectArray0 = new Object[7];
      objectArray0[1] = (Object) gsonConverter0;
      objectArray0[2] = (Object) requestBuilder0;
      objectArray0[4] = (Object) gsonConverter0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[6] = (Object) requestBuilder0;
      requestBuilder0.setargs(objectArray0);
      assertEquals(7, objectArray0.length);
      assertNull(requestBuilder0.getapiUrl());
      
      long long0 = 0L;
      System.setCurrentTimeMillis(long0);
      String string1 = "Multipart part must not be null: ";
      requestBuilder0.setapiUrl(string1);
      assertEquals("Multipart part must not be null: ", requestBuilder0.getapiUrl());
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      GsonConverter gsonConverter0 = serializedObjectSupporter0.deserializeObjectConverter3();
      assertNotNull(gsonConverter0);
      
      RequestBuilder requestBuilder0 = new RequestBuilder(gsonConverter0);
      assertNotNull(requestBuilder0);
      assertNull(requestBuilder0.getapiUrl());
      
      String string0 = requestBuilder0.getapiUrl();
      assertNull(string0);
      assertNull(requestBuilder0.getapiUrl());
      
      Object[] objectArray0 = new Object[7];
      RequestBuilder requestBuilder1 = requestBuilder0.args(objectArray0);
      assertEquals(7, objectArray0.length);
      assertNotNull(requestBuilder1);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      
      objectArray0[0] = (Object) serializedObjectSupporter0;
      requestBuilder0.setmethodInfo(requestBuilder1.methodInfo);
      assertEquals(7, objectArray0.length);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      
      objectArray0[1] = (Object) gsonConverter0;
      objectArray0[2] = (Object) requestBuilder0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      requestBuilder1.setheaders(requestBuilder0.headers);
      assertEquals(7, objectArray0.length);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      
      String string1 = "iC2x\"w>I#uoI";
      RequestBuilder requestBuilder2 = requestBuilder0.apiUrl(string1);
      assertNotNull(requestBuilder2);
      assertEquals("iC2x\"w>I#uoI", requestBuilder0.getapiUrl());
      assertEquals("iC2x\"w>I#uoI", requestBuilder2.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder0);
      
      objectArray0[6] = (Object) requestBuilder0;
      requestBuilder0.setargs(objectArray0);
      assertEquals(7, objectArray0.length);
      assertEquals("iC2x\"w>I#uoI", requestBuilder0.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder2);
      
      List<Header> list0 = requestBuilder0.getheaders();
      assertNull(list0);
      assertEquals("iC2x\"w>I#uoI", requestBuilder0.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder2);
      
      RequestBuilder requestBuilder3 = requestBuilder1.headers(list0);
      assertEquals(7, objectArray0.length);
      assertNotNull(requestBuilder3);
      assertEquals("iC2x\"w>I#uoI", requestBuilder3.getapiUrl());
      assertEquals("iC2x\"w>I#uoI", requestBuilder0.getapiUrl());
      assertEquals("iC2x\"w>I#uoI", requestBuilder1.getapiUrl());
      assertSame(requestBuilder3, requestBuilder1);
      assertSame(requestBuilder3, requestBuilder0);
      assertSame(requestBuilder3, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder1, requestBuilder3);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder0);
      
      RequestBuilder requestBuilder4 = requestBuilder3.methodInfo(requestBuilder1.methodInfo);
      assertEquals(7, objectArray0.length);
      assertNotNull(requestBuilder4);
      assertEquals("iC2x\"w>I#uoI", requestBuilder3.getapiUrl());
      assertEquals("iC2x\"w>I#uoI", requestBuilder0.getapiUrl());
      assertEquals("iC2x\"w>I#uoI", requestBuilder4.getapiUrl());
      assertEquals("iC2x\"w>I#uoI", requestBuilder1.getapiUrl());
      assertSame(requestBuilder3, requestBuilder4);
      assertSame(requestBuilder3, requestBuilder1);
      assertSame(requestBuilder3, requestBuilder0);
      assertSame(requestBuilder3, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder4);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder4, requestBuilder3);
      assertSame(requestBuilder4, requestBuilder2);
      assertSame(requestBuilder4, requestBuilder0);
      assertSame(requestBuilder4, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder4);
      assertSame(requestBuilder1, requestBuilder3);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder0);
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      GsonConverter gsonConverter0 = serializedObjectSupporter0.deserializeObjectConverter3();
      assertNotNull(gsonConverter0);
      
      RequestBuilder requestBuilder0 = new RequestBuilder(gsonConverter0);
      assertNotNull(requestBuilder0);
      assertNull(requestBuilder0.getapiUrl());
      
      String string0 = requestBuilder0.getapiUrl();
      assertNull(string0);
      assertNull(requestBuilder0.getapiUrl());
      
      Object[] objectArray0 = new Object[7];
      RequestBuilder requestBuilder1 = requestBuilder0.args(objectArray0);
      assertEquals(7, objectArray0.length);
      assertNotNull(requestBuilder1);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      
      objectArray0[0] = (Object) serializedObjectSupporter0;
      objectArray0[1] = (Object) gsonConverter0;
      objectArray0[2] = (Object) requestBuilder0;
      objectArray0[3] = (Object) requestBuilder0;
      objectArray0[4] = (Object) gsonConverter0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string1 = "\\";
      RequestBuilder requestBuilder2 = requestBuilder1.apiUrl(string1);
      assertEquals(7, objectArray0.length);
      assertNotNull(requestBuilder2);
      assertEquals("\\", requestBuilder0.getapiUrl());
      assertEquals("\\", requestBuilder1.getapiUrl());
      assertEquals("\\", requestBuilder2.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder1);
      
      objectArray0[0] = object0;
      objectArray0[6] = (Object) requestBuilder0;
      requestBuilder0.setargs(objectArray0);
      assertEquals(7, objectArray0.length);
      assertEquals("\\", requestBuilder0.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder2);
      
      String string2 = requestBuilder0.getapiUrl();
      assertEquals("\\", string2);
      assertNotNull(string2);
      assertEquals("\\", requestBuilder0.getapiUrl());
      assertSame(string2, string1);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder2);
      
      List<Header> list0 = requestBuilder0.getheaders();
      assertNull(list0);
      assertEquals("\\", requestBuilder0.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder2);
      
      RequestBuilder requestBuilder3 = requestBuilder1.headers(list0);
      assertEquals(7, objectArray0.length);
      assertNotNull(requestBuilder3);
      assertEquals("\\", requestBuilder0.getapiUrl());
      assertEquals("\\", requestBuilder3.getapiUrl());
      assertEquals("\\", requestBuilder1.getapiUrl());
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder3, requestBuilder0);
      assertSame(requestBuilder3, requestBuilder2);
      assertSame(requestBuilder3, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder3);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder0);
      
      requestBuilder3.setargs(requestBuilder1.args);
      assertEquals(7, objectArray0.length);
      assertEquals("\\", requestBuilder0.getapiUrl());
      assertEquals("\\", requestBuilder3.getapiUrl());
      assertEquals("\\", requestBuilder1.getapiUrl());
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder3, requestBuilder0);
      assertSame(requestBuilder3, requestBuilder2);
      assertSame(requestBuilder3, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder3);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder0);
      
      RestMethodInfo restMethodInfo0 = requestBuilder1.getmethodInfo();
      assertEquals(7, objectArray0.length);
      assertNull(restMethodInfo0);
      assertEquals("\\", requestBuilder0.getapiUrl());
      assertEquals("\\", requestBuilder1.getapiUrl());
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder3);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder0);
      
      // Undeclared exception!
      try { 
        requestBuilder3.build();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RequestBuilder", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      GsonConverter gsonConverter0 = serializedObjectSupporter0.deserializeObjectConverter3();
      assertNotNull(gsonConverter0);
      
      RequestBuilder requestBuilder0 = new RequestBuilder(gsonConverter0);
      assertNotNull(requestBuilder0);
      assertNull(requestBuilder0.getapiUrl());
      
      String string0 = requestBuilder0.getapiUrl();
      assertNull(string0);
      assertNull(requestBuilder0.getapiUrl());
      
      Object[] objectArray0 = new Object[7];
      RequestBuilder requestBuilder1 = requestBuilder0.args(objectArray0);
      assertEquals(7, objectArray0.length);
      assertNotNull(requestBuilder1);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      
      objectArray0[0] = (Object) serializedObjectSupporter0;
      objectArray0[1] = (Object) gsonConverter0;
      objectArray0[2] = (Object) requestBuilder0;
      objectArray0[3] = (Object) requestBuilder0;
      objectArray0[4] = (Object) gsonConverter0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string1 = "\\";
      RequestBuilder requestBuilder2 = requestBuilder1.apiUrl(string1);
      assertEquals(7, objectArray0.length);
      assertNotNull(requestBuilder2);
      assertEquals("\\", requestBuilder0.getapiUrl());
      assertEquals("\\", requestBuilder1.getapiUrl());
      assertEquals("\\", requestBuilder2.getapiUrl());
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder0);
      
      objectArray0[0] = object0;
      objectArray0[6] = (Object) requestBuilder0;
      requestBuilder0.setargs(objectArray0);
      assertEquals(7, objectArray0.length);
      assertEquals("\\", requestBuilder0.getapiUrl());
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder1);
      
      String string2 = requestBuilder0.getapiUrl();
      assertEquals("\\", string2);
      assertNotNull(string2);
      assertEquals("\\", requestBuilder0.getapiUrl());
      assertSame(string2, string1);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder1);
      
      List<Header> list0 = requestBuilder0.getheaders();
      assertNull(list0);
      assertEquals("\\", requestBuilder0.getapiUrl());
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder1);
      
      RequestBuilder requestBuilder3 = requestBuilder1.headers(list0);
      assertEquals(7, objectArray0.length);
      assertNotNull(requestBuilder3);
      assertEquals("\\", requestBuilder0.getapiUrl());
      assertEquals("\\", requestBuilder3.getapiUrl());
      assertEquals("\\", requestBuilder1.getapiUrl());
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder3, requestBuilder1);
      assertSame(requestBuilder3, requestBuilder0);
      assertSame(requestBuilder3, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder3);
      
      LinkedList<Header> linkedList0 = new LinkedList<Header>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      requestBuilder3.setheaders(linkedList0);
      assertEquals(7, objectArray0.length);
      assertEquals("\\", requestBuilder0.getapiUrl());
      assertEquals("\\", requestBuilder3.getapiUrl());
      assertEquals(0, linkedList0.size());
      assertEquals("\\", requestBuilder1.getapiUrl());
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder3, requestBuilder1);
      assertSame(requestBuilder3, requestBuilder0);
      assertSame(requestBuilder3, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder3);
      
      requestBuilder3.setargs(requestBuilder1.args);
      assertEquals(7, objectArray0.length);
      assertEquals("\\", requestBuilder0.getapiUrl());
      assertEquals("\\", requestBuilder3.getapiUrl());
      assertEquals("\\", requestBuilder1.getapiUrl());
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder3, requestBuilder1);
      assertSame(requestBuilder3, requestBuilder0);
      assertSame(requestBuilder3, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder3);
      
      RestMethodInfo restMethodInfo0 = requestBuilder1.getmethodInfo();
      assertEquals(7, objectArray0.length);
      assertNull(restMethodInfo0);
      assertEquals("\\", requestBuilder0.getapiUrl());
      assertEquals("\\", requestBuilder1.getapiUrl());
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder3);
      
      // Undeclared exception!
      try { 
        requestBuilder3.build();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RequestBuilder", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      GsonConverter gsonConverter0 = serializedObjectSupporter0.deserializeObjectConverter3();
      assertNotNull(gsonConverter0);
      
      RequestBuilder requestBuilder0 = new RequestBuilder(gsonConverter0);
      assertNotNull(requestBuilder0);
      assertNull(requestBuilder0.getapiUrl());
      
      String string0 = requestBuilder0.getapiUrl();
      assertNull(string0);
      assertNull(requestBuilder0.getapiUrl());
      
      RequestBuilder requestBuilder1 = requestBuilder0.args(requestBuilder0.args);
      assertNotNull(requestBuilder1);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      
      requestBuilder0.setmethodInfo(requestBuilder1.methodInfo);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      requestBuilder1.setheaders(requestBuilder0.headers);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      
      requestBuilder0.setargs(requestBuilder0.args);
      assertNull(requestBuilder0.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      
      String string1 = requestBuilder0.getapiUrl();
      assertNull(string1);
      assertNull(requestBuilder0.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      
      List<Header> list0 = requestBuilder0.getheaders();
      assertNull(list0);
      assertNull(requestBuilder0.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      
      RequestBuilder requestBuilder2 = requestBuilder1.headers(list0);
      assertNotNull(requestBuilder2);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertNull(requestBuilder2.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder1);
      
      RequestBuilder requestBuilder3 = requestBuilder2.methodInfo(requestBuilder1.methodInfo);
      assertNotNull(requestBuilder3);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertNull(requestBuilder2.getapiUrl());
      assertNull(requestBuilder3.getapiUrl());
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder3);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder2, requestBuilder3);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder3, requestBuilder0);
      assertSame(requestBuilder3, requestBuilder1);
      assertSame(requestBuilder3, requestBuilder2);
      
      Object[] objectArray0 = requestBuilder0.getargs();
      assertNull(objectArray0);
      assertNull(requestBuilder0.getapiUrl());
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder2);
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      GsonConverter gsonConverter0 = serializedObjectSupporter0.deserializeObjectConverter3();
      assertNotNull(gsonConverter0);
      
      RequestBuilder requestBuilder0 = new RequestBuilder(gsonConverter0);
      assertNotNull(requestBuilder0);
      assertNull(requestBuilder0.getapiUrl());
      
      String string0 = requestBuilder0.getapiUrl();
      assertNull(string0);
      assertNull(requestBuilder0.getapiUrl());
      
      Object[] objectArray0 = new Object[7];
      RequestBuilder requestBuilder1 = requestBuilder0.args(objectArray0);
      assertEquals(7, objectArray0.length);
      assertNotNull(requestBuilder1);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      
      objectArray0[0] = (Object) serializedObjectSupporter0;
      objectArray0[1] = (Object) gsonConverter0;
      objectArray0[2] = (Object) requestBuilder0;
      objectArray0[3] = (Object) requestBuilder0;
      objectArray0[4] = (Object) gsonConverter0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string1 = "O|J@;1e(+A8/";
      RequestBuilder requestBuilder2 = requestBuilder1.apiUrl(string1);
      assertEquals(7, objectArray0.length);
      assertNotNull(requestBuilder2);
      assertEquals("O|J@;1e(+A8/", requestBuilder0.getapiUrl());
      assertEquals("O|J@;1e(+A8/", requestBuilder1.getapiUrl());
      assertEquals("O|J@;1e(+A8/", requestBuilder2.getapiUrl());
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder1);
      
      objectArray0[0] = object0;
      objectArray0[6] = (Object) requestBuilder0;
      requestBuilder0.setargs(objectArray0);
      assertEquals(7, objectArray0.length);
      assertEquals("O|J@;1e(+A8/", requestBuilder0.getapiUrl());
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder1);
      
      String string2 = requestBuilder0.getapiUrl();
      assertEquals("O|J@;1e(+A8/", string2);
      assertNotNull(string2);
      assertEquals("O|J@;1e(+A8/", requestBuilder0.getapiUrl());
      assertSame(string2, string1);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder1);
      
      List<Header> list0 = requestBuilder0.getheaders();
      assertNull(list0);
      assertEquals("O|J@;1e(+A8/", requestBuilder0.getapiUrl());
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder1);
      
      RequestBuilder requestBuilder3 = requestBuilder1.headers(list0);
      assertEquals(7, objectArray0.length);
      assertNotNull(requestBuilder3);
      assertEquals("O|J@;1e(+A8/", requestBuilder0.getapiUrl());
      assertEquals("O|J@;1e(+A8/", requestBuilder3.getapiUrl());
      assertEquals("O|J@;1e(+A8/", requestBuilder1.getapiUrl());
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder3, requestBuilder2);
      assertSame(requestBuilder3, requestBuilder1);
      assertSame(requestBuilder3, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder3);
      assertSame(requestBuilder1, requestBuilder2);
      
      requestBuilder3.setargs(requestBuilder1.args);
      assertEquals(7, objectArray0.length);
      assertEquals("O|J@;1e(+A8/", requestBuilder0.getapiUrl());
      assertEquals("O|J@;1e(+A8/", requestBuilder3.getapiUrl());
      assertEquals("O|J@;1e(+A8/", requestBuilder1.getapiUrl());
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder3, requestBuilder2);
      assertSame(requestBuilder3, requestBuilder1);
      assertSame(requestBuilder3, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder3);
      assertSame(requestBuilder1, requestBuilder2);
      
      RestMethodInfo restMethodInfo0 = requestBuilder1.getmethodInfo();
      assertEquals(7, objectArray0.length);
      assertNull(restMethodInfo0);
      assertEquals("O|J@;1e(+A8/", requestBuilder0.getapiUrl());
      assertEquals("O|J@;1e(+A8/", requestBuilder1.getapiUrl());
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder3);
      assertSame(requestBuilder1, requestBuilder2);
      
      // Undeclared exception!
      try { 
        requestBuilder3.build();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RequestBuilder", e);
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      GsonConverter gsonConverter0 = serializedObjectSupporter0.deserializeObjectConverter3();
      assertNotNull(gsonConverter0);
      
      GsonConverter gsonConverter1 = null;
      RequestBuilder requestBuilder0 = new RequestBuilder(gsonConverter1);
      assertNotNull(requestBuilder0);
      assertNull(requestBuilder0.getapiUrl());
      
      String string0 = requestBuilder0.getapiUrl();
      assertNull(string0);
      assertNull(requestBuilder0.getapiUrl());
      
      Object[] objectArray0 = new Object[7];
      RequestBuilder requestBuilder1 = requestBuilder0.args(objectArray0);
      assertEquals(7, objectArray0.length);
      assertNotNull(requestBuilder1);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      
      objectArray0[0] = (Object) serializedObjectSupporter0;
      requestBuilder0.setmethodInfo(requestBuilder1.methodInfo);
      assertEquals(7, objectArray0.length);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      
      objectArray0[1] = (Object) requestBuilder0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      requestBuilder1.setheaders(requestBuilder0.headers);
      assertEquals(7, objectArray0.length);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      
      objectArray0[6] = (Object) requestBuilder0;
      requestBuilder0.setargs(objectArray0);
      assertEquals(7, objectArray0.length);
      assertNull(requestBuilder0.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      
      String string1 = requestBuilder0.getapiUrl();
      assertNull(string1);
      assertNull(requestBuilder0.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      
      List<Header> list0 = requestBuilder0.getheaders();
      assertNull(list0);
      assertNull(requestBuilder0.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      
      RequestBuilder requestBuilder2 = requestBuilder1.headers(list0);
      assertEquals(7, objectArray0.length);
      assertNotNull(requestBuilder2);
      assertNull(requestBuilder2.getapiUrl());
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder0);
      
      RequestBuilder requestBuilder3 = requestBuilder2.methodInfo(requestBuilder1.methodInfo);
      assertEquals(7, objectArray0.length);
      assertNotNull(requestBuilder3);
      assertNull(requestBuilder2.getapiUrl());
      assertNull(requestBuilder3.getapiUrl());
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertSame(requestBuilder2, requestBuilder3);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder3, requestBuilder2);
      assertSame(requestBuilder3, requestBuilder1);
      assertSame(requestBuilder3, requestBuilder0);
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder3);
      
      Object[] objectArray1 = requestBuilder0.getargs();
      assertEquals(7, objectArray1.length);
      assertNotNull(objectArray1);
      assertNull(requestBuilder0.getapiUrl());
      assertSame(objectArray1, objectArray0);
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder1);
      
      Converter converter0 = requestBuilder3.getconverter();
      assertEquals(7, objectArray0.length);
      assertNull(converter0);
      assertNull(requestBuilder2.getapiUrl());
      assertNull(requestBuilder3.getapiUrl());
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertSame(requestBuilder2, requestBuilder3);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder3, requestBuilder2);
      assertSame(requestBuilder3, requestBuilder1);
      assertSame(requestBuilder3, requestBuilder0);
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(objectArray0, objectArray1);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder3);
      
      // Undeclared exception!
      try { 
        requestBuilder1.build();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      GsonConverter gsonConverter0 = serializedObjectSupporter0.deserializeObjectConverter3();
      assertNotNull(gsonConverter0);
      
      RequestBuilder requestBuilder0 = new RequestBuilder(gsonConverter0);
      assertNotNull(requestBuilder0);
      assertNull(requestBuilder0.getapiUrl());
      
      RequestBuilder requestBuilder1 = requestBuilder0.args(requestBuilder0.args);
      assertNotNull(requestBuilder1);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      LinkedList<Header> linkedList0 = new LinkedList<Header>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      requestBuilder1.setheaders(linkedList0);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertEquals(0, linkedList0.size());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      
      String string0 = "O|J@;1e(+A8/";
      RequestBuilder requestBuilder2 = requestBuilder1.apiUrl(string0);
      assertNotNull(requestBuilder2);
      assertEquals("O|J@;1e(+A8/", requestBuilder0.getapiUrl());
      assertEquals("O|J@;1e(+A8/", requestBuilder1.getapiUrl());
      assertEquals("O|J@;1e(+A8/", requestBuilder2.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder1);
      
      List<Header> list0 = requestBuilder0.getheaders();
      assertNotNull(list0);
      assertEquals("O|J@;1e(+A8/", requestBuilder0.getapiUrl());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder2);
      
      RequestBuilder requestBuilder3 = requestBuilder1.headers(list0);
      assertNotNull(requestBuilder3);
      assertEquals("O|J@;1e(+A8/", requestBuilder0.getapiUrl());
      assertEquals("O|J@;1e(+A8/", requestBuilder1.getapiUrl());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals("O|J@;1e(+A8/", requestBuilder3.getapiUrl());
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder3);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder3, requestBuilder0);
      assertSame(requestBuilder3, requestBuilder1);
      assertSame(requestBuilder3, requestBuilder2);
      
      requestBuilder3.setargs(requestBuilder1.args);
      assertEquals("O|J@;1e(+A8/", requestBuilder0.getapiUrl());
      assertEquals("O|J@;1e(+A8/", requestBuilder1.getapiUrl());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals("O|J@;1e(+A8/", requestBuilder3.getapiUrl());
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder3);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder3, requestBuilder0);
      assertSame(requestBuilder3, requestBuilder1);
      assertSame(requestBuilder3, requestBuilder2);
      
      RestMethodInfo restMethodInfo0 = requestBuilder1.getmethodInfo();
      assertNull(restMethodInfo0);
      assertEquals("O|J@;1e(+A8/", requestBuilder0.getapiUrl());
      assertEquals("O|J@;1e(+A8/", requestBuilder1.getapiUrl());
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder3);
      assertSame(requestBuilder1, requestBuilder0);
      
      // Undeclared exception!
      try { 
        requestBuilder3.build();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RequestBuilder", e);
      }
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      GsonConverter gsonConverter0 = serializedObjectSupporter0.deserializeObjectConverter3();
      assertNotNull(gsonConverter0);
      
      RequestBuilder requestBuilder0 = new RequestBuilder(gsonConverter0);
      assertNotNull(requestBuilder0);
      assertNull(requestBuilder0.getapiUrl());
      
      String string0 = requestBuilder0.getapiUrl();
      assertNull(string0);
      assertNull(requestBuilder0.getapiUrl());
      
      RequestBuilder requestBuilder1 = requestBuilder0.args(requestBuilder0.args);
      assertNotNull(requestBuilder1);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      
      Object[] objectArray0 = new Object[0];
      requestBuilder0.args = objectArray0;
      assertNull(requestBuilder0.getapiUrl());
      
      requestBuilder0.setmethodInfo(requestBuilder1.methodInfo);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      requestBuilder1.setheaders(requestBuilder0.headers);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      requestBuilder0.setargs(requestBuilder0.args);
      assertNull(requestBuilder0.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      
      String string1 = requestBuilder0.getapiUrl();
      assertNull(string1);
      assertNull(requestBuilder0.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      
      List<Header> list0 = requestBuilder0.getheaders();
      assertNull(list0);
      assertNull(requestBuilder0.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      
      RequestBuilder requestBuilder2 = requestBuilder1.headers(list0);
      assertNotNull(requestBuilder2);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertNull(requestBuilder2.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder0);
      
      RequestBuilder requestBuilder3 = requestBuilder2.methodInfo(requestBuilder1.methodInfo);
      assertNotNull(requestBuilder3);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertNull(requestBuilder2.getapiUrl());
      assertNull(requestBuilder3.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder3);
      assertSame(requestBuilder2, requestBuilder3);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder3, requestBuilder0);
      assertSame(requestBuilder3, requestBuilder2);
      assertSame(requestBuilder3, requestBuilder1);
      
      Object[] objectArray1 = requestBuilder0.getargs();
      assertEquals(0, objectArray1.length);
      assertNotNull(objectArray1);
      assertNull(requestBuilder0.getapiUrl());
      assertSame(objectArray1, objectArray0);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder0, requestBuilder2);
      
      Converter converter0 = requestBuilder3.getconverter();
      assertNotNull(converter0);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertNull(requestBuilder2.getapiUrl());
      assertNull(requestBuilder3.getapiUrl());
      assertSame(converter0, gsonConverter0);
      assertSame(gsonConverter0, converter0);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder3);
      assertSame(requestBuilder2, requestBuilder3);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder3, requestBuilder0);
      assertSame(requestBuilder3, requestBuilder2);
      assertSame(requestBuilder3, requestBuilder1);
      
      // Undeclared exception!
      try { 
        requestBuilder2.buildBody();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RequestBuilder", e);
      }
  }
}
