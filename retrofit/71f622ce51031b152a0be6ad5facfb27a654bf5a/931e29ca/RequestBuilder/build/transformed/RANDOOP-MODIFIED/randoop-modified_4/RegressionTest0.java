import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest0 {

    public static boolean debug = false;

    @Test
    public void test0001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0001");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request2 = requestBuilder1.build();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0002");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        // The following exception was thrown during execution in test generation
        try {
            retrofit.mime.TypedOutput typedOutput2 = requestBuilder1.buildBody();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0003");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        java.util.List<retrofit.client.Header> headerList3 = requestBuilder1.headers;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request4 = requestBuilder1.build();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNull(headerList3);
    }

    @Test
    public void test0004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0004");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.converter.Converter converter3 = requestBuilder1.getconverter();
        java.lang.Object[] objArray6 = new java.lang.Object[] { 0.0f, 100.0d };
        retrofit.RequestBuilder requestBuilder7 = requestBuilder1.args(objArray6);
        requestBuilder7.setapiUrl("hi!");
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request10 = requestBuilder7.build();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[0.0, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[0.0, 100.0]");
        org.junit.Assert.assertNotNull(requestBuilder7);
    }

    @Test
    public void test0005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0005");
        retrofit.client.Header[] headerArray6 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList7 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList7, headerArray6);
        retrofit.mime.TypedOutput typedOutput9 = null;
        retrofit.client.Request request10 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList7, typedOutput9);
        retrofit.mime.TypedOutput typedOutput11 = null;
        retrofit.client.Request request12 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList7, typedOutput11);
        retrofit.mime.TypedOutput typedOutput13 = null;
        retrofit.client.Request request14 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList7, typedOutput13);
        java.lang.Class<?> wildcardClass15 = request14.getClass();
        org.junit.Assert.assertNotNull(headerArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0006");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        java.util.List<retrofit.client.Header> headerList12 = request11.headers;
        java.lang.Object[] objArray14 = new java.lang.Object[] { true, (short) 1, request11, 0 };
        requestBuilder1.args = objArray14;
        retrofit.converter.Converter converter16 = requestBuilder1.converter;
        java.lang.Object[] objArray17 = requestBuilder1.args;
        java.lang.Class<?> wildcardClass18 = requestBuilder1.getClass();
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0007");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        java.util.List<retrofit.client.Header> headerList12 = request11.headers;
        java.lang.Object[] objArray14 = new java.lang.Object[] { true, (short) 1, request11, 0 };
        requestBuilder1.args = objArray14;
        retrofit.client.Header[] headerArray18 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList19 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList19, headerArray18);
        retrofit.mime.TypedOutput typedOutput21 = null;
        retrofit.client.Request request22 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList19, typedOutput21);
        java.util.List<retrofit.client.Header> headerList23 = request22.headers;
        requestBuilder1.setheaders(headerList23);
        java.lang.Object[] objArray25 = requestBuilder1.getargs();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request26 = requestBuilder1.build();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNotNull(headerArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(headerList23);
        org.junit.Assert.assertNotNull(objArray25);
    }

    @Test
    public void test0008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0008");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        java.util.List<retrofit.client.Header> headerList12 = request11.headers;
        java.lang.Object[] objArray14 = new java.lang.Object[] { true, (short) 1, request11, 0 };
        requestBuilder1.args = objArray14;
        retrofit.client.Header[] headerArray18 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList19 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList19, headerArray18);
        retrofit.mime.TypedOutput typedOutput21 = null;
        retrofit.client.Request request22 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList19, typedOutput21);
        java.util.List<retrofit.client.Header> headerList23 = request22.headers;
        requestBuilder1.setheaders(headerList23);
        java.lang.Class<?> wildcardClass25 = headerList23.getClass();
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNotNull(headerArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(headerList23);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test0009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0009");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.converter.Converter converter3 = requestBuilder1.getconverter();
        java.lang.Object[] objArray6 = new java.lang.Object[] { 0.0f, 100.0d };
        retrofit.RequestBuilder requestBuilder7 = requestBuilder1.args(objArray6);
        java.lang.Class<?> wildcardClass8 = requestBuilder7.getClass();
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[0.0, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[0.0, 100.0]");
        org.junit.Assert.assertNotNull(requestBuilder7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0010");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.converter.Converter converter3 = requestBuilder1.getconverter();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request4 = requestBuilder1.build();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNull(converter3);
    }

    @Test
    public void test0011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0011");
        retrofit.client.Header[] headerArray6 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList7 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList7, headerArray6);
        retrofit.mime.TypedOutput typedOutput9 = null;
        retrofit.client.Request request10 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList7, typedOutput9);
        retrofit.mime.TypedOutput typedOutput11 = null;
        retrofit.client.Request request12 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList7, typedOutput11);
        retrofit.mime.TypedOutput typedOutput13 = null;
        retrofit.client.Request request14 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList7, typedOutput13);
        java.lang.Class<?> wildcardClass15 = request14.getClass();
        org.junit.Assert.assertNotNull(headerArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0012");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        requestBuilder1.setapiUrl("");
        java.lang.String str4 = requestBuilder1.getapiUrl();
        java.util.List<retrofit.client.Header> headerList5 = requestBuilder1.getheaders();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request6 = requestBuilder1.build();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(headerList5);
    }

    @Test
    public void test0013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0013");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        java.util.List<retrofit.client.Header> headerList12 = request11.headers;
        java.lang.Object[] objArray14 = new java.lang.Object[] { true, (short) 1, request11, 0 };
        requestBuilder1.args = objArray14;
        retrofit.client.Header[] headerArray18 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList19 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList19, headerArray18);
        retrofit.mime.TypedOutput typedOutput21 = null;
        retrofit.client.Request request22 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList19, typedOutput21);
        java.util.List<retrofit.client.Header> headerList23 = request22.headers;
        requestBuilder1.setheaders(headerList23);
        java.lang.Object[] objArray25 = requestBuilder1.getargs();
        java.lang.Class<?> wildcardClass26 = objArray25.getClass();
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNotNull(headerArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(headerList23);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test0014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0014");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        java.util.List<retrofit.client.Header> headerList12 = request11.headers;
        java.lang.Object[] objArray14 = new java.lang.Object[] { true, (short) 1, request11, 0 };
        requestBuilder1.args = objArray14;
        retrofit.converter.Converter converter16 = requestBuilder1.converter;
        java.lang.Object[] objArray17 = requestBuilder1.args;
        retrofit.client.Header[] headerArray20 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList21 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList21, headerArray20);
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList21, typedOutput23);
        java.lang.String str25 = request24.url;
        java.util.List<retrofit.client.Header> headerList26 = request24.headers;
        retrofit.mime.TypedOutput typedOutput27 = request24.body;
        retrofit.mime.TypedOutput typedOutput28 = request24.body;
        java.util.List<retrofit.client.Header> headerList29 = request24.headers;
        requestBuilder1.setheaders(headerList29);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str31 = requestBuilder1.buildRelativeUrl();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertNotNull(headerArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(headerList26);
        org.junit.Assert.assertNull(typedOutput27);
        org.junit.Assert.assertNull(typedOutput28);
        org.junit.Assert.assertNotNull(headerList29);
    }

    @Test
    public void test0015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0015");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.mime.TypedOutput typedOutput3 = requestBuilder1.buildBody();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(headerList2);
    }

    @Test
    public void test0016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0016");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.converter.Converter converter3 = null;
        retrofit.RequestBuilder requestBuilder4 = new retrofit.RequestBuilder(converter3);
        java.util.List<retrofit.client.Header> headerList5 = requestBuilder4.headers;
        retrofit.client.Header[] headerArray10 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList11 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList11, headerArray10);
        retrofit.mime.TypedOutput typedOutput13 = null;
        retrofit.client.Request request14 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList11, typedOutput13);
        java.util.List<retrofit.client.Header> headerList15 = request14.headers;
        java.lang.Object[] objArray17 = new java.lang.Object[] { true, (short) 1, request14, 0 };
        requestBuilder4.args = objArray17;
        requestBuilder1.setargs(objArray17);
        retrofit.converter.Converter converter20 = requestBuilder1.getconverter();
        java.util.List<retrofit.client.Header> headerList21 = requestBuilder1.headers;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request22 = requestBuilder1.build();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNull(headerList5);
        org.junit.Assert.assertNotNull(headerArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(headerList15);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertNull(converter20);
        org.junit.Assert.assertNull(headerList21);
    }

    @Test
    public void test0017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0017");
        retrofit.client.Header[] headerArray2 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList3 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList3, headerArray2);
        retrofit.mime.TypedOutput typedOutput5 = null;
        retrofit.client.Request request6 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList3, typedOutput5);
        java.lang.Class<?> wildcardClass7 = request6.getClass();
        org.junit.Assert.assertNotNull(headerArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0018");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        java.util.List<retrofit.client.Header> headerList12 = request11.headers;
        java.lang.Object[] objArray14 = new java.lang.Object[] { true, (short) 1, request11, 0 };
        requestBuilder1.args = objArray14;
        retrofit.converter.Converter converter16 = requestBuilder1.converter;
        java.util.List<retrofit.client.Header> headerList17 = requestBuilder1.headers;
        requestBuilder1.apiUrl = "hi!";
        java.lang.Object[] objArray20 = requestBuilder1.args;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request21 = requestBuilder1.build();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNull(headerList17);
        org.junit.Assert.assertNotNull(objArray20);
    }

    @Test
    public void test0019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0019");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        requestBuilder1.setapiUrl("");
        java.lang.String str4 = requestBuilder1.getapiUrl();
        java.util.List<retrofit.client.Header> headerList5 = requestBuilder1.getheaders();
        java.lang.String str6 = requestBuilder1.getapiUrl();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.mime.TypedOutput typedOutput7 = requestBuilder1.buildBody();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(headerList5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
    }

    @Test
    public void test0020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0020");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        java.util.List<retrofit.client.Header> headerList12 = request11.headers;
        java.lang.Object[] objArray14 = new java.lang.Object[] { true, (short) 1, request11, 0 };
        requestBuilder1.args = objArray14;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request16 = requestBuilder1.build();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNotNull(objArray14);
    }

    @Test
    public void test0021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0021");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        java.util.List<retrofit.client.Header> headerList12 = request11.headers;
        java.lang.Object[] objArray14 = new java.lang.Object[] { true, (short) 1, request11, 0 };
        requestBuilder1.args = objArray14;
        retrofit.converter.Converter converter16 = requestBuilder1.converter;
        java.util.List<retrofit.client.Header> headerList17 = requestBuilder1.headers;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request18 = requestBuilder1.build();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNull(headerList17);
    }

    @Test
    public void test0022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0022");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        retrofit.converter.Converter converter2 = requestBuilder1.converter;
        java.lang.Object[] objArray3 = requestBuilder1.args;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request4 = requestBuilder1.build();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(converter2);
        org.junit.Assert.assertNull(objArray3);
    }

    @Test
    public void test0023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0023");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        java.util.List<retrofit.client.Header> headerList12 = request11.headers;
        java.lang.Object[] objArray14 = new java.lang.Object[] { true, (short) 1, request11, 0 };
        requestBuilder1.args = objArray14;
        retrofit.converter.Converter converter16 = requestBuilder1.converter;
        java.lang.Object[] objArray17 = requestBuilder1.args;
        java.lang.Object[] objArray18 = null;
        retrofit.RequestBuilder requestBuilder19 = requestBuilder1.args(objArray18);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str20 = requestBuilder19.buildRelativeUrl();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertNotNull(requestBuilder19);
    }

    @Test
    public void test0024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0024");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.converter.Converter converter3 = requestBuilder1.getconverter();
        java.lang.Object[] objArray6 = new java.lang.Object[] { 0.0f, 100.0d };
        retrofit.RequestBuilder requestBuilder7 = requestBuilder1.args(objArray6);
        java.lang.Class<?> wildcardClass8 = requestBuilder1.getClass();
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[0.0, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[0.0, 100.0]");
        org.junit.Assert.assertNotNull(requestBuilder7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0025");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.converter.Converter converter3 = requestBuilder1.getconverter();
        retrofit.RequestBuilder requestBuilder5 = requestBuilder1.apiUrl("hi!");
        java.lang.Object[] objArray6 = requestBuilder1.args;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass7 = objArray6.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNotNull(requestBuilder5);
        org.junit.Assert.assertNull(objArray6);
    }

    @Test
    public void test0026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0026");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        java.util.List<retrofit.client.Header> headerList12 = request11.headers;
        java.lang.Object[] objArray14 = new java.lang.Object[] { true, (short) 1, request11, 0 };
        requestBuilder1.args = objArray14;
        retrofit.converter.Converter converter16 = requestBuilder1.converter;
        java.lang.Object[] objArray17 = requestBuilder1.args;
        java.lang.Object[] objArray18 = null;
        retrofit.RequestBuilder requestBuilder19 = requestBuilder1.args(objArray18);
        java.lang.Object[] objArray20 = requestBuilder1.getargs();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str21 = requestBuilder1.buildRelativeUrl();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertNotNull(requestBuilder19);
        org.junit.Assert.assertNull(objArray20);
    }

    @Test
    public void test0027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0027");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        requestBuilder1.setapiUrl("");
        java.lang.String str4 = requestBuilder1.getapiUrl();
        java.lang.String str5 = requestBuilder1.apiUrl;
        retrofit.RequestBuilder requestBuilder7 = requestBuilder1.apiUrl("hi!");
        // The following exception was thrown during execution in test generation
        try {
            retrofit.mime.TypedOutput typedOutput8 = requestBuilder7.buildBody();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(requestBuilder7);
    }

    @Test
    public void test0028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0028");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        java.util.List<retrofit.client.Header> headerList12 = request11.headers;
        java.lang.Object[] objArray14 = new java.lang.Object[] { true, (short) 1, request11, 0 };
        requestBuilder1.args = objArray14;
        retrofit.converter.Converter converter16 = requestBuilder1.converter;
        java.lang.Object[] objArray17 = requestBuilder1.args;
        java.lang.Object[] objArray18 = null;
        retrofit.RequestBuilder requestBuilder19 = requestBuilder1.args(objArray18);
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request20 = requestBuilder1.build();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertNotNull(requestBuilder19);
    }

    @Test
    public void test0029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0029");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.converter.Converter converter3 = null;
        retrofit.RequestBuilder requestBuilder4 = new retrofit.RequestBuilder(converter3);
        java.util.List<retrofit.client.Header> headerList5 = requestBuilder4.headers;
        retrofit.client.Header[] headerArray10 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList11 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList11, headerArray10);
        retrofit.mime.TypedOutput typedOutput13 = null;
        retrofit.client.Request request14 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList11, typedOutput13);
        java.util.List<retrofit.client.Header> headerList15 = request14.headers;
        java.lang.Object[] objArray17 = new java.lang.Object[] { true, (short) 1, request14, 0 };
        requestBuilder4.args = objArray17;
        requestBuilder1.setargs(objArray17);
        retrofit.converter.Converter converter20 = requestBuilder1.getconverter();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str21 = requestBuilder1.buildRelativeUrl();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNull(headerList5);
        org.junit.Assert.assertNotNull(headerArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(headerList15);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertNull(converter20);
    }

    @Test
    public void test0030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0030");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        java.util.List<retrofit.client.Header> headerList12 = request11.headers;
        java.lang.Object[] objArray14 = new java.lang.Object[] { true, (short) 1, request11, 0 };
        requestBuilder1.args = objArray14;
        retrofit.converter.Converter converter16 = requestBuilder1.converter;
        java.lang.Object[] objArray17 = requestBuilder1.args;
        retrofit.converter.Converter converter18 = null;
        retrofit.RequestBuilder requestBuilder19 = new retrofit.RequestBuilder(converter18);
        java.util.List<retrofit.client.Header> headerList20 = requestBuilder19.headers;
        retrofit.client.Header[] headerArray25 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList26 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList26, headerArray25);
        retrofit.mime.TypedOutput typedOutput28 = null;
        retrofit.client.Request request29 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList26, typedOutput28);
        java.util.List<retrofit.client.Header> headerList30 = request29.headers;
        java.lang.Object[] objArray32 = new java.lang.Object[] { true, (short) 1, request29, 0 };
        requestBuilder19.args = objArray32;
        retrofit.converter.Converter converter34 = requestBuilder19.converter;
        java.lang.Object[] objArray35 = requestBuilder19.args;
        requestBuilder1.setargs(objArray35);
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request37 = requestBuilder1.build();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertNull(headerList20);
        org.junit.Assert.assertNotNull(headerArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(headerList30);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertNull(converter34);
        org.junit.Assert.assertNotNull(objArray35);
    }

    @Test
    public void test0031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0031");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        java.util.List<retrofit.client.Header> headerList12 = request11.headers;
        java.lang.Object[] objArray14 = new java.lang.Object[] { true, (short) 1, request11, 0 };
        requestBuilder1.args = objArray14;
        retrofit.converter.Converter converter16 = requestBuilder1.converter;
        java.lang.Object[] objArray17 = requestBuilder1.args;
        retrofit.RequestBuilder requestBuilder19 = requestBuilder1.apiUrl("");
        // The following exception was thrown during execution in test generation
        try {
            retrofit.mime.TypedOutput typedOutput20 = requestBuilder1.buildBody();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertNotNull(requestBuilder19);
    }

    @Test
    public void test0032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0032");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        java.util.List<retrofit.client.Header> headerList12 = request11.headers;
        java.lang.Object[] objArray14 = new java.lang.Object[] { true, (short) 1, request11, 0 };
        requestBuilder1.args = objArray14;
        retrofit.converter.Converter converter16 = requestBuilder1.converter;
        java.util.List<retrofit.client.Header> headerList17 = requestBuilder1.headers;
        java.util.List<retrofit.client.Header> headerList18 = requestBuilder1.headers;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass19 = headerList18.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNull(headerList17);
        org.junit.Assert.assertNull(headerList18);
    }

    @Test
    public void test0033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0033");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        requestBuilder1.setapiUrl("");
        java.lang.String str4 = requestBuilder1.getapiUrl();
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        requestBuilder1.setheaders((java.util.List<retrofit.client.Header>) headerList8);
        java.lang.String str13 = requestBuilder1.getapiUrl();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str14 = requestBuilder1.buildRelativeUrl();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test0034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0034");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        java.util.List<retrofit.client.Header> headerList12 = request11.headers;
        java.lang.Object[] objArray14 = new java.lang.Object[] { true, (short) 1, request11, 0 };
        requestBuilder1.args = objArray14;
        retrofit.client.Header[] headerArray18 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList19 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList19, headerArray18);
        retrofit.mime.TypedOutput typedOutput21 = null;
        retrofit.client.Request request22 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList19, typedOutput21);
        java.util.List<retrofit.client.Header> headerList23 = request22.headers;
        requestBuilder1.setheaders(headerList23);
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request25 = requestBuilder1.build();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNotNull(headerArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(headerList23);
    }

    @Test
    public void test0035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0035");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        requestBuilder1.setapiUrl("");
        java.lang.String str4 = requestBuilder1.getapiUrl();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request5 = requestBuilder1.build();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    }

    @Test
    public void test0036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0036");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        java.util.List<retrofit.client.Header> headerList12 = request11.headers;
        java.lang.Object[] objArray14 = new java.lang.Object[] { true, (short) 1, request11, 0 };
        requestBuilder1.args = objArray14;
        retrofit.converter.Converter converter16 = requestBuilder1.converter;
        java.lang.Object[] objArray17 = requestBuilder1.args;
        java.lang.Object[] objArray18 = requestBuilder1.args;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.mime.TypedOutput typedOutput19 = requestBuilder1.buildBody();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertNotNull(objArray18);
    }

    @Test
    public void test0037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0037");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        java.util.List<retrofit.client.Header> headerList12 = request11.headers;
        java.lang.Object[] objArray14 = new java.lang.Object[] { true, (short) 1, request11, 0 };
        requestBuilder1.args = objArray14;
        retrofit.converter.Converter converter16 = requestBuilder1.converter;
        java.util.List<retrofit.client.Header> headerList17 = requestBuilder1.headers;
        requestBuilder1.apiUrl = "hi!";
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request20 = requestBuilder1.build();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNull(headerList17);
    }

    @Test
    public void test0038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0038");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        java.util.List<retrofit.client.Header> headerList12 = request11.headers;
        java.lang.Object[] objArray14 = new java.lang.Object[] { true, (short) 1, request11, 0 };
        requestBuilder1.args = objArray14;
        retrofit.converter.Converter converter16 = requestBuilder1.converter;
        java.util.List<retrofit.client.Header> headerList17 = requestBuilder1.headers;
        requestBuilder1.apiUrl = "hi!";
        java.lang.Object[] objArray20 = requestBuilder1.getargs();
        java.lang.Class<?> wildcardClass21 = objArray20.getClass();
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNull(headerList17);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0039");
        retrofit.client.Header[] headerArray2 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList3 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList3, headerArray2);
        retrofit.mime.TypedOutput typedOutput5 = null;
        retrofit.client.Request request6 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList3, typedOutput5);
        java.lang.String str7 = request6.url;
        java.util.List<retrofit.client.Header> headerList8 = request6.getHeaders();
        java.lang.Class<?> wildcardClass9 = headerList8.getClass();
        org.junit.Assert.assertNotNull(headerArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(headerList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0040");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        requestBuilder1.setapiUrl("");
        java.lang.String str4 = requestBuilder1.getapiUrl();
        requestBuilder1.setapiUrl("hi!");
        retrofit.RequestBuilder requestBuilder8 = requestBuilder1.apiUrl("");
        // The following exception was thrown during execution in test generation
        try {
            retrofit.mime.TypedOutput typedOutput9 = requestBuilder8.buildBody();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(requestBuilder8);
    }

    @Test
    public void test0041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0041");
        retrofit.client.Header[] headerArray6 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList7 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList7, headerArray6);
        retrofit.mime.TypedOutput typedOutput9 = null;
        retrofit.client.Request request10 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList7, typedOutput9);
        java.lang.String str11 = request10.url;
        java.util.List<retrofit.client.Header> headerList12 = request10.headers;
        retrofit.mime.TypedOutput typedOutput13 = request10.body;
        retrofit.mime.TypedOutput typedOutput14 = request10.body;
        java.util.List<retrofit.client.Header> headerList15 = request10.headers;
        retrofit.mime.TypedOutput typedOutput16 = null;
        retrofit.client.Request request17 = new retrofit.client.Request("hi!", "hi!", headerList15, typedOutput16);
        retrofit.mime.TypedOutput typedOutput18 = request17.body;
        java.util.List<retrofit.client.Header> headerList19 = request17.getHeaders();
        retrofit.mime.TypedOutput typedOutput20 = null;
        retrofit.client.Request request21 = new retrofit.client.Request("", "hi!", headerList19, typedOutput20);
        java.util.List<retrofit.client.Header> headerList22 = request21.headers;
        retrofit.mime.TypedOutput typedOutput23 = request21.body;
        java.util.List<retrofit.client.Header> headerList24 = request21.headers;
        java.lang.Class<?> wildcardClass25 = request21.getClass();
        org.junit.Assert.assertNotNull(headerArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNull(typedOutput13);
        org.junit.Assert.assertNull(typedOutput14);
        org.junit.Assert.assertNotNull(headerList15);
        org.junit.Assert.assertNull(typedOutput18);
        org.junit.Assert.assertNotNull(headerList19);
        org.junit.Assert.assertNotNull(headerList22);
        org.junit.Assert.assertNull(typedOutput23);
        org.junit.Assert.assertNotNull(headerList24);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test0042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0042");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        retrofit.converter.Converter converter2 = requestBuilder1.converter;
        java.lang.Object[] objArray3 = requestBuilder1.args;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str4 = requestBuilder1.buildRelativeUrl();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(converter2);
        org.junit.Assert.assertNull(objArray3);
    }

    @Test
    public void test0043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0043");
        retrofit.client.Header[] headerArray2 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList3 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList3, headerArray2);
        retrofit.mime.TypedOutput typedOutput5 = null;
        retrofit.client.Request request6 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList3, typedOutput5);
        java.lang.String str7 = request6.url;
        retrofit.mime.TypedOutput typedOutput8 = request6.getBody();
        retrofit.mime.TypedOutput typedOutput9 = request6.getBody();
        org.junit.Assert.assertNotNull(headerArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(typedOutput8);
        org.junit.Assert.assertNull(typedOutput9);
    }

    @Test
    public void test0044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0044");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        java.util.List<retrofit.client.Header> headerList12 = request11.headers;
        java.lang.Object[] objArray14 = new java.lang.Object[] { true, (short) 1, request11, 0 };
        requestBuilder1.args = objArray14;
        retrofit.converter.Converter converter16 = requestBuilder1.converter;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str17 = requestBuilder1.buildRelativeUrl();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNull(converter16);
    }

    @Test
    public void test0045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0045");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.converter.Converter converter3 = requestBuilder1.getconverter();
        java.lang.Object[] objArray6 = new java.lang.Object[] { 0.0f, 100.0d };
        retrofit.RequestBuilder requestBuilder7 = requestBuilder1.args(objArray6);
        requestBuilder7.setapiUrl("hi!");
        java.util.List<retrofit.client.Header> headerList10 = requestBuilder7.getheaders();
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[0.0, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[0.0, 100.0]");
        org.junit.Assert.assertNotNull(requestBuilder7);
        org.junit.Assert.assertNull(headerList10);
    }

    @Test
    public void test0046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0046");
        retrofit.client.Header[] headerArray2 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList3 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList3, headerArray2);
        retrofit.mime.TypedOutput typedOutput5 = null;
        retrofit.client.Request request6 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList3, typedOutput5);
        java.lang.String str7 = request6.url;
        java.util.List<retrofit.client.Header> headerList8 = request6.headers;
        retrofit.mime.TypedOutput typedOutput9 = request6.body;
        retrofit.mime.TypedOutput typedOutput10 = request6.body;
        retrofit.mime.TypedOutput typedOutput11 = request6.getBody();
        java.util.List<retrofit.client.Header> headerList12 = request6.getHeaders();
        java.lang.Class<?> wildcardClass13 = request6.getClass();
        org.junit.Assert.assertNotNull(headerArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(headerList8);
        org.junit.Assert.assertNull(typedOutput9);
        org.junit.Assert.assertNull(typedOutput10);
        org.junit.Assert.assertNull(typedOutput11);
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0047");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        java.util.List<retrofit.client.Header> headerList12 = request11.headers;
        java.lang.Object[] objArray14 = new java.lang.Object[] { true, (short) 1, request11, 0 };
        requestBuilder1.args = objArray14;
        retrofit.converter.Converter converter16 = requestBuilder1.converter;
        java.lang.Object[] objArray17 = requestBuilder1.args;
        java.lang.Object[] objArray18 = null;
        retrofit.RequestBuilder requestBuilder19 = requestBuilder1.args(objArray18);
        java.lang.Object[] objArray20 = requestBuilder1.getargs();
        java.lang.String str21 = requestBuilder1.getapiUrl();
        retrofit.client.Header[] headerArray26 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList27 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList27, headerArray26);
        retrofit.mime.TypedOutput typedOutput29 = null;
        retrofit.client.Request request30 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList27, typedOutput29);
        java.util.List<retrofit.client.Header> headerList31 = request30.headers;
        retrofit.mime.TypedOutput typedOutput32 = request30.body;
        java.util.List<retrofit.client.Header> headerList33 = request30.headers;
        retrofit.mime.TypedOutput typedOutput34 = null;
        retrofit.client.Request request35 = new retrofit.client.Request("", "hi!", headerList33, typedOutput34);
        requestBuilder1.setheaders(headerList33);
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request37 = requestBuilder1.build();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertNotNull(requestBuilder19);
        org.junit.Assert.assertNull(objArray20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(headerArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(headerList31);
        org.junit.Assert.assertNull(typedOutput32);
        org.junit.Assert.assertNotNull(headerList33);
    }

    @Test
    public void test0048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0048");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        requestBuilder1.setapiUrl("");
        java.lang.String str4 = requestBuilder1.getapiUrl();
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        requestBuilder1.setheaders((java.util.List<retrofit.client.Header>) headerList8);
        java.util.List<retrofit.client.Header> headerList13 = requestBuilder1.headers;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str14 = requestBuilder1.buildRelativeUrl();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(headerList13);
    }

    @Test
    public void test0049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0049");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        java.util.List<retrofit.client.Header> headerList12 = request11.headers;
        java.lang.Object[] objArray14 = new java.lang.Object[] { true, (short) 1, request11, 0 };
        requestBuilder1.args = objArray14;
        retrofit.converter.Converter converter16 = requestBuilder1.converter;
        requestBuilder1.setapiUrl("hi!");
        retrofit.converter.Converter converter19 = null;
        retrofit.RequestBuilder requestBuilder20 = new retrofit.RequestBuilder(converter19);
        java.util.List<retrofit.client.Header> headerList21 = requestBuilder20.headers;
        retrofit.client.Header[] headerArray26 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList27 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList27, headerArray26);
        retrofit.mime.TypedOutput typedOutput29 = null;
        retrofit.client.Request request30 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList27, typedOutput29);
        java.util.List<retrofit.client.Header> headerList31 = request30.headers;
        java.lang.Object[] objArray33 = new java.lang.Object[] { true, (short) 1, request30, 0 };
        requestBuilder20.args = objArray33;
        requestBuilder1.args = objArray33;
        java.util.List<retrofit.client.Header> headerList36 = requestBuilder1.getheaders();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request37 = requestBuilder1.build();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNull(headerList21);
        org.junit.Assert.assertNotNull(headerArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(headerList31);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertNull(headerList36);
    }

    @Test
    public void test0050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0050");
        retrofit.client.Header[] headerArray4 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList5 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList5, headerArray4);
        retrofit.mime.TypedOutput typedOutput7 = null;
        retrofit.client.Request request8 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList5, typedOutput7);
        retrofit.mime.TypedOutput typedOutput9 = null;
        retrofit.client.Request request10 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList5, typedOutput9);
        java.lang.String str11 = request10.getUrl();
        java.lang.String str12 = request10.method;
        java.util.List<retrofit.client.Header> headerList13 = request10.headers;
        java.lang.Class<?> wildcardClass14 = headerList13.getClass();
        org.junit.Assert.assertNotNull(headerArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(headerList13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0051");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        requestBuilder1.setapiUrl("");
        java.lang.String str4 = requestBuilder1.getapiUrl();
        requestBuilder1.setapiUrl("hi!");
        retrofit.RequestBuilder requestBuilder8 = requestBuilder1.apiUrl("");
        retrofit.converter.Converter converter9 = null;
        retrofit.RequestBuilder requestBuilder10 = new retrofit.RequestBuilder(converter9);
        java.lang.Object[] objArray11 = requestBuilder10.getargs();
        retrofit.converter.Converter converter12 = requestBuilder10.getconverter();
        retrofit.converter.Converter converter13 = null;
        retrofit.RequestBuilder requestBuilder14 = new retrofit.RequestBuilder(converter13);
        java.util.List<retrofit.client.Header> headerList15 = requestBuilder14.headers;
        retrofit.converter.Converter converter16 = null;
        retrofit.RequestBuilder requestBuilder17 = new retrofit.RequestBuilder(converter16);
        java.util.List<retrofit.client.Header> headerList18 = requestBuilder17.headers;
        retrofit.client.Header[] headerArray23 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList24 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList24, headerArray23);
        retrofit.mime.TypedOutput typedOutput26 = null;
        retrofit.client.Request request27 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList24, typedOutput26);
        java.util.List<retrofit.client.Header> headerList28 = request27.headers;
        java.lang.Object[] objArray30 = new java.lang.Object[] { true, (short) 1, request27, 0 };
        requestBuilder17.args = objArray30;
        requestBuilder14.setargs(objArray30);
        retrofit.RequestBuilder requestBuilder33 = requestBuilder10.args(objArray30);
        java.lang.Object[] objArray34 = requestBuilder10.args;
        requestBuilder1.args = objArray34;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.mime.TypedOutput typedOutput36 = requestBuilder1.buildBody();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(requestBuilder8);
        org.junit.Assert.assertNull(objArray11);
        org.junit.Assert.assertNull(converter12);
        org.junit.Assert.assertNull(headerList15);
        org.junit.Assert.assertNull(headerList18);
        org.junit.Assert.assertNotNull(headerArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(headerList28);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertNotNull(requestBuilder33);
        org.junit.Assert.assertNotNull(objArray34);
    }

    @Test
    public void test0052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0052");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        java.util.List<retrofit.client.Header> headerList12 = request11.headers;
        java.lang.Object[] objArray14 = new java.lang.Object[] { true, (short) 1, request11, 0 };
        requestBuilder1.args = objArray14;
        retrofit.converter.Converter converter16 = requestBuilder1.converter;
        java.lang.Object[] objArray17 = requestBuilder1.args;
        retrofit.converter.Converter converter18 = null;
        retrofit.RequestBuilder requestBuilder19 = new retrofit.RequestBuilder(converter18);
        java.util.List<retrofit.client.Header> headerList20 = requestBuilder19.headers;
        retrofit.client.Header[] headerArray25 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList26 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList26, headerArray25);
        retrofit.mime.TypedOutput typedOutput28 = null;
        retrofit.client.Request request29 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList26, typedOutput28);
        java.util.List<retrofit.client.Header> headerList30 = request29.headers;
        java.lang.Object[] objArray32 = new java.lang.Object[] { true, (short) 1, request29, 0 };
        requestBuilder19.args = objArray32;
        retrofit.converter.Converter converter34 = requestBuilder19.converter;
        java.lang.Object[] objArray35 = requestBuilder19.args;
        requestBuilder1.setargs(objArray35);
        java.lang.Class<?> wildcardClass37 = requestBuilder1.getClass();
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertNull(headerList20);
        org.junit.Assert.assertNotNull(headerArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(headerList30);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertNull(converter34);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test0053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0053");
        retrofit.client.Header[] headerArray4 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList5 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList5, headerArray4);
        retrofit.mime.TypedOutput typedOutput7 = null;
        retrofit.client.Request request8 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList5, typedOutput7);
        retrofit.mime.TypedOutput typedOutput9 = null;
        retrofit.client.Request request10 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList5, typedOutput9);
        java.lang.String str11 = request10.getMethod();
        retrofit.mime.TypedOutput typedOutput12 = request10.getBody();
        org.junit.Assert.assertNotNull(headerArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(typedOutput12);
    }

    @Test
    public void test0054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0054");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        java.util.List<retrofit.client.Header> headerList12 = request11.headers;
        java.lang.Object[] objArray14 = new java.lang.Object[] { true, (short) 1, request11, 0 };
        requestBuilder1.args = objArray14;
        retrofit.converter.Converter converter16 = requestBuilder1.converter;
        java.lang.Object[] objArray17 = requestBuilder1.args;
        java.lang.Object[] objArray18 = null;
        retrofit.RequestBuilder requestBuilder19 = requestBuilder1.args(objArray18);
        java.lang.Object[] objArray20 = requestBuilder1.getargs();
        retrofit.converter.Converter converter21 = null;
        retrofit.RequestBuilder requestBuilder22 = new retrofit.RequestBuilder(converter21);
        java.lang.Object[] objArray23 = requestBuilder22.getargs();
        retrofit.converter.Converter converter24 = requestBuilder22.getconverter();
        retrofit.converter.Converter converter25 = null;
        retrofit.RequestBuilder requestBuilder26 = new retrofit.RequestBuilder(converter25);
        java.util.List<retrofit.client.Header> headerList27 = requestBuilder26.headers;
        retrofit.converter.Converter converter28 = null;
        retrofit.RequestBuilder requestBuilder29 = new retrofit.RequestBuilder(converter28);
        java.util.List<retrofit.client.Header> headerList30 = requestBuilder29.headers;
        retrofit.client.Header[] headerArray35 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList36 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList36, headerArray35);
        retrofit.mime.TypedOutput typedOutput38 = null;
        retrofit.client.Request request39 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList36, typedOutput38);
        java.util.List<retrofit.client.Header> headerList40 = request39.headers;
        java.lang.Object[] objArray42 = new java.lang.Object[] { true, (short) 1, request39, 0 };
        requestBuilder29.args = objArray42;
        requestBuilder26.setargs(objArray42);
        retrofit.RequestBuilder requestBuilder45 = requestBuilder22.args(objArray42);
        requestBuilder1.setargs(objArray42);
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request47 = requestBuilder1.build();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertNotNull(requestBuilder19);
        org.junit.Assert.assertNull(objArray20);
        org.junit.Assert.assertNull(objArray23);
        org.junit.Assert.assertNull(converter24);
        org.junit.Assert.assertNull(headerList27);
        org.junit.Assert.assertNull(headerList30);
        org.junit.Assert.assertNotNull(headerArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(headerList40);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertNotNull(requestBuilder45);
    }

    @Test
    public void test0055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0055");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        java.util.List<retrofit.client.Header> headerList12 = request11.headers;
        java.lang.Object[] objArray14 = new java.lang.Object[] { true, (short) 1, request11, 0 };
        requestBuilder1.args = objArray14;
        retrofit.converter.Converter converter16 = requestBuilder1.converter;
        java.util.List<retrofit.client.Header> headerList17 = requestBuilder1.headers;
        requestBuilder1.apiUrl = "hi!";
        retrofit.converter.Converter converter20 = requestBuilder1.converter;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str21 = requestBuilder1.buildRelativeUrl();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNull(headerList17);
        org.junit.Assert.assertNull(converter20);
    }

    @Test
    public void test0056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0056");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        java.util.List<retrofit.client.Header> headerList12 = request11.headers;
        java.lang.Object[] objArray14 = new java.lang.Object[] { true, (short) 1, request11, 0 };
        requestBuilder1.args = objArray14;
        retrofit.converter.Converter converter16 = requestBuilder1.converter;
        java.lang.Object[] objArray17 = requestBuilder1.args;
        java.lang.Object[] objArray18 = null;
        retrofit.RequestBuilder requestBuilder19 = requestBuilder1.args(objArray18);
        java.lang.Object[] objArray20 = requestBuilder1.getargs();
        retrofit.client.Header[] headerArray25 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList26 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList26, headerArray25);
        retrofit.mime.TypedOutput typedOutput28 = null;
        retrofit.client.Request request29 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList26, typedOutput28);
        java.lang.String str30 = request29.url;
        java.util.List<retrofit.client.Header> headerList31 = request29.headers;
        retrofit.mime.TypedOutput typedOutput32 = request29.body;
        retrofit.mime.TypedOutput typedOutput33 = request29.body;
        java.util.List<retrofit.client.Header> headerList34 = request29.headers;
        retrofit.mime.TypedOutput typedOutput35 = null;
        retrofit.client.Request request36 = new retrofit.client.Request("", "hi!", headerList34, typedOutput35);
        java.util.List<retrofit.client.Header> headerList37 = request36.getHeaders();
        retrofit.RequestBuilder requestBuilder38 = requestBuilder1.headers(headerList37);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str39 = requestBuilder38.buildRelativeUrl();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertNotNull(requestBuilder19);
        org.junit.Assert.assertNull(objArray20);
        org.junit.Assert.assertNotNull(headerArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(headerList31);
        org.junit.Assert.assertNull(typedOutput32);
        org.junit.Assert.assertNull(typedOutput33);
        org.junit.Assert.assertNotNull(headerList34);
        org.junit.Assert.assertNotNull(headerList37);
        org.junit.Assert.assertNotNull(requestBuilder38);
    }

    @Test
    public void test0057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0057");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.converter.Converter converter3 = requestBuilder1.getconverter();
        java.lang.Object[] objArray6 = new java.lang.Object[] { 0.0f, 100.0d };
        retrofit.RequestBuilder requestBuilder7 = requestBuilder1.args(objArray6);
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request8 = requestBuilder1.build();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[0.0, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[0.0, 100.0]");
        org.junit.Assert.assertNotNull(requestBuilder7);
    }

    @Test
    public void test0058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0058");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        java.util.List<retrofit.client.Header> headerList12 = request11.headers;
        java.lang.Object[] objArray14 = new java.lang.Object[] { true, (short) 1, request11, 0 };
        requestBuilder1.args = objArray14;
        retrofit.converter.Converter converter16 = requestBuilder1.converter;
        java.util.List<retrofit.client.Header> headerList17 = requestBuilder1.headers;
        requestBuilder1.apiUrl = "hi!";
        retrofit.client.Header[] headerArray24 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList25 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList25, headerArray24);
        retrofit.mime.TypedOutput typedOutput27 = null;
        retrofit.client.Request request28 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList25, typedOutput27);
        java.lang.String str29 = request28.url;
        java.util.List<retrofit.client.Header> headerList30 = request28.headers;
        retrofit.mime.TypedOutput typedOutput31 = null;
        retrofit.client.Request request32 = new retrofit.client.Request("", "", headerList30, typedOutput31);
        retrofit.RequestBuilder requestBuilder33 = requestBuilder1.headers(headerList30);
        java.util.List<retrofit.client.Header> headerList34 = requestBuilder1.headers;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str35 = requestBuilder1.buildRelativeUrl();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNull(headerList17);
        org.junit.Assert.assertNotNull(headerArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(headerList30);
        org.junit.Assert.assertNotNull(requestBuilder33);
        org.junit.Assert.assertNotNull(headerList34);
    }

    @Test
    public void test0059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0059");
        retrofit.client.Header[] headerArray2 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList3 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList3, headerArray2);
        retrofit.mime.TypedOutput typedOutput5 = null;
        retrofit.client.Request request6 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList3, typedOutput5);
        java.lang.String str7 = request6.url;
        java.util.List<retrofit.client.Header> headerList8 = request6.headers;
        retrofit.mime.TypedOutput typedOutput9 = request6.body;
        retrofit.mime.TypedOutput typedOutput10 = request6.body;
        java.lang.String str11 = request6.getUrl();
        org.junit.Assert.assertNotNull(headerArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(headerList8);
        org.junit.Assert.assertNull(typedOutput9);
        org.junit.Assert.assertNull(typedOutput10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test0060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0060");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        java.util.List<retrofit.client.Header> headerList12 = request11.headers;
        java.lang.Object[] objArray14 = new java.lang.Object[] { true, (short) 1, request11, 0 };
        requestBuilder1.args = objArray14;
        retrofit.converter.Converter converter16 = requestBuilder1.converter;
        java.util.List<retrofit.client.Header> headerList17 = requestBuilder1.headers;
        requestBuilder1.apiUrl = "hi!";
        retrofit.client.Header[] headerArray24 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList25 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList25, headerArray24);
        retrofit.mime.TypedOutput typedOutput27 = null;
        retrofit.client.Request request28 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList25, typedOutput27);
        java.lang.String str29 = request28.url;
        java.util.List<retrofit.client.Header> headerList30 = request28.headers;
        retrofit.mime.TypedOutput typedOutput31 = null;
        retrofit.client.Request request32 = new retrofit.client.Request("", "", headerList30, typedOutput31);
        retrofit.RequestBuilder requestBuilder33 = requestBuilder1.headers(headerList30);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str34 = requestBuilder1.buildRelativeUrl();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNull(headerList17);
        org.junit.Assert.assertNotNull(headerArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(headerList30);
        org.junit.Assert.assertNotNull(requestBuilder33);
    }

    @Test
    public void test0061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0061");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.converter.Converter converter3 = requestBuilder1.getconverter();
        java.lang.Object[] objArray6 = new java.lang.Object[] { 0.0f, 100.0d };
        retrofit.RequestBuilder requestBuilder7 = requestBuilder1.args(objArray6);
        requestBuilder7.setapiUrl("hi!");
        java.util.List<retrofit.client.Header> headerList10 = requestBuilder7.getheaders();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request11 = requestBuilder7.build();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[0.0, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[0.0, 100.0]");
        org.junit.Assert.assertNotNull(requestBuilder7);
        org.junit.Assert.assertNull(headerList10);
    }

    @Test
    public void test0062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0062");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        requestBuilder1.setapiUrl("");
        java.lang.String str4 = requestBuilder1.getapiUrl();
        java.util.List<retrofit.client.Header> headerList5 = requestBuilder1.getheaders();
        java.lang.Object[] objArray6 = requestBuilder1.getargs();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request7 = requestBuilder1.build();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(headerList5);
        org.junit.Assert.assertNull(objArray6);
    }

    @Test
    public void test0063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0063");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        requestBuilder1.setapiUrl("");
        java.lang.String str4 = requestBuilder1.getapiUrl();
        requestBuilder1.setapiUrl("hi!");
        retrofit.RequestBuilder requestBuilder8 = requestBuilder1.apiUrl("");
        requestBuilder1.apiUrl = "";
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str11 = requestBuilder1.buildRelativeUrl();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(requestBuilder8);
    }

    @Test
    public void test0064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0064");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        requestBuilder1.setapiUrl("");
        java.lang.String str4 = requestBuilder1.getapiUrl();
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        requestBuilder1.setheaders((java.util.List<retrofit.client.Header>) headerList8);
        retrofit.converter.Converter converter13 = null;
        retrofit.RequestBuilder requestBuilder14 = new retrofit.RequestBuilder(converter13);
        java.lang.Object[] objArray15 = requestBuilder14.getargs();
        retrofit.converter.Converter converter16 = requestBuilder14.getconverter();
        retrofit.client.Header[] headerArray23 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList24 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList24, headerArray23);
        retrofit.mime.TypedOutput typedOutput26 = null;
        retrofit.client.Request request27 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList24, typedOutput26);
        retrofit.mime.TypedOutput typedOutput28 = null;
        retrofit.client.Request request29 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList24, typedOutput28);
        retrofit.mime.TypedOutput typedOutput30 = null;
        retrofit.client.Request request31 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList24, typedOutput30);
        java.util.List<retrofit.client.Header> headerList32 = request31.getHeaders();
        requestBuilder14.setheaders(headerList32);
        requestBuilder1.headers = headerList32;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request35 = requestBuilder1.build();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(objArray15);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNotNull(headerArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(headerList32);
    }

    @Test
    public void test0065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0065");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.lang.Object[] objArray2 = requestBuilder1.getargs();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request3 = requestBuilder1.build();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(objArray2);
    }

    @Test
    public void test0066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0066");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        java.util.List<retrofit.client.Header> headerList12 = request11.headers;
        java.lang.Object[] objArray14 = new java.lang.Object[] { true, (short) 1, request11, 0 };
        requestBuilder1.args = objArray14;
        retrofit.converter.Converter converter16 = requestBuilder1.converter;
        java.lang.Object[] objArray17 = requestBuilder1.args;
        retrofit.client.Header[] headerArray20 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList21 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList21, headerArray20);
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList21, typedOutput23);
        java.lang.String str25 = request24.url;
        java.util.List<retrofit.client.Header> headerList26 = request24.headers;
        retrofit.mime.TypedOutput typedOutput27 = request24.body;
        retrofit.mime.TypedOutput typedOutput28 = request24.body;
        java.util.List<retrofit.client.Header> headerList29 = request24.headers;
        requestBuilder1.setheaders(headerList29);
        requestBuilder1.setapiUrl("hi!");
        retrofit.converter.Converter converter33 = null;
        retrofit.RequestBuilder requestBuilder34 = new retrofit.RequestBuilder(converter33);
        java.lang.Object[] objArray35 = requestBuilder34.getargs();
        retrofit.converter.Converter converter36 = requestBuilder34.getconverter();
        retrofit.client.Header[] headerArray43 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList44 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList44, headerArray43);
        retrofit.mime.TypedOutput typedOutput46 = null;
        retrofit.client.Request request47 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList44, typedOutput46);
        retrofit.mime.TypedOutput typedOutput48 = null;
        retrofit.client.Request request49 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList44, typedOutput48);
        retrofit.mime.TypedOutput typedOutput50 = null;
        retrofit.client.Request request51 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList44, typedOutput50);
        java.util.List<retrofit.client.Header> headerList52 = request51.getHeaders();
        requestBuilder34.setheaders(headerList52);
        retrofit.RequestBuilder requestBuilder54 = requestBuilder1.headers(headerList52);
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request55 = requestBuilder1.build();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertNotNull(headerArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(headerList26);
        org.junit.Assert.assertNull(typedOutput27);
        org.junit.Assert.assertNull(typedOutput28);
        org.junit.Assert.assertNotNull(headerList29);
        org.junit.Assert.assertNull(objArray35);
        org.junit.Assert.assertNull(converter36);
        org.junit.Assert.assertNotNull(headerArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(headerList52);
        org.junit.Assert.assertNotNull(requestBuilder54);
    }

    @Test
    public void test0067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0067");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        java.util.List<retrofit.client.Header> headerList12 = request11.headers;
        java.lang.Object[] objArray14 = new java.lang.Object[] { true, (short) 1, request11, 0 };
        requestBuilder1.args = objArray14;
        retrofit.converter.Converter converter16 = requestBuilder1.converter;
        java.util.List<retrofit.client.Header> headerList17 = requestBuilder1.headers;
        requestBuilder1.apiUrl = "hi!";
        retrofit.client.Header[] headerArray24 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList25 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList25, headerArray24);
        retrofit.mime.TypedOutput typedOutput27 = null;
        retrofit.client.Request request28 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList25, typedOutput27);
        java.lang.String str29 = request28.url;
        java.util.List<retrofit.client.Header> headerList30 = request28.headers;
        retrofit.mime.TypedOutput typedOutput31 = null;
        retrofit.client.Request request32 = new retrofit.client.Request("", "", headerList30, typedOutput31);
        retrofit.RequestBuilder requestBuilder33 = requestBuilder1.headers(headerList30);
        java.util.List<retrofit.client.Header> headerList34 = requestBuilder1.headers;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.mime.TypedOutput typedOutput35 = requestBuilder1.buildBody();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNull(headerList17);
        org.junit.Assert.assertNotNull(headerArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(headerList30);
        org.junit.Assert.assertNotNull(requestBuilder33);
        org.junit.Assert.assertNotNull(headerList34);
    }

    @Test
    public void test0068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0068");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        requestBuilder1.setapiUrl("");
        java.lang.String str4 = requestBuilder1.getapiUrl();
        requestBuilder1.setapiUrl("hi!");
        retrofit.RequestBuilder requestBuilder8 = requestBuilder1.apiUrl("");
        retrofit.converter.Converter converter9 = null;
        retrofit.RequestBuilder requestBuilder10 = new retrofit.RequestBuilder(converter9);
        java.lang.Object[] objArray11 = requestBuilder10.getargs();
        retrofit.converter.Converter converter12 = requestBuilder10.getconverter();
        retrofit.converter.Converter converter13 = null;
        retrofit.RequestBuilder requestBuilder14 = new retrofit.RequestBuilder(converter13);
        java.util.List<retrofit.client.Header> headerList15 = requestBuilder14.headers;
        retrofit.converter.Converter converter16 = null;
        retrofit.RequestBuilder requestBuilder17 = new retrofit.RequestBuilder(converter16);
        java.util.List<retrofit.client.Header> headerList18 = requestBuilder17.headers;
        retrofit.client.Header[] headerArray23 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList24 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList24, headerArray23);
        retrofit.mime.TypedOutput typedOutput26 = null;
        retrofit.client.Request request27 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList24, typedOutput26);
        java.util.List<retrofit.client.Header> headerList28 = request27.headers;
        java.lang.Object[] objArray30 = new java.lang.Object[] { true, (short) 1, request27, 0 };
        requestBuilder17.args = objArray30;
        requestBuilder14.setargs(objArray30);
        retrofit.RequestBuilder requestBuilder33 = requestBuilder10.args(objArray30);
        java.lang.Object[] objArray34 = requestBuilder10.args;
        requestBuilder1.args = objArray34;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request36 = requestBuilder1.build();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(requestBuilder8);
        org.junit.Assert.assertNull(objArray11);
        org.junit.Assert.assertNull(converter12);
        org.junit.Assert.assertNull(headerList15);
        org.junit.Assert.assertNull(headerList18);
        org.junit.Assert.assertNotNull(headerArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(headerList28);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertNotNull(requestBuilder33);
        org.junit.Assert.assertNotNull(objArray34);
    }

    @Test
    public void test0069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0069");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        java.util.List<retrofit.client.Header> headerList12 = request11.headers;
        java.lang.Object[] objArray14 = new java.lang.Object[] { true, (short) 1, request11, 0 };
        requestBuilder1.args = objArray14;
        retrofit.converter.Converter converter16 = requestBuilder1.converter;
        java.lang.Object[] objArray17 = requestBuilder1.args;
        java.lang.Object[] objArray18 = null;
        retrofit.RequestBuilder requestBuilder19 = requestBuilder1.args(objArray18);
        retrofit.converter.Converter converter20 = null;
        retrofit.RequestBuilder requestBuilder21 = new retrofit.RequestBuilder(converter20);
        java.util.List<retrofit.client.Header> headerList22 = requestBuilder21.headers;
        retrofit.converter.Converter converter23 = requestBuilder21.getconverter();
        java.lang.Object[] objArray26 = new java.lang.Object[] { 0.0f, 100.0d };
        retrofit.RequestBuilder requestBuilder27 = requestBuilder21.args(objArray26);
        requestBuilder19.args = objArray26;
        java.lang.Object[] objArray29 = null;
        requestBuilder19.setargs(objArray29);
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request31 = requestBuilder19.build();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertNotNull(requestBuilder19);
        org.junit.Assert.assertNull(headerList22);
        org.junit.Assert.assertNull(converter23);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[0.0, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[0.0, 100.0]");
        org.junit.Assert.assertNotNull(requestBuilder27);
    }

    @Test
    public void test0070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0070");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        requestBuilder1.apiUrl = "hi!";
        org.junit.Assert.assertNull(headerList2);
    }

    @Test
    public void test0071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0071");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        retrofit.client.Header[] headerArray8 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList9 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList9, headerArray8);
        retrofit.mime.TypedOutput typedOutput11 = null;
        retrofit.client.Request request12 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList9, typedOutput11);
        java.lang.String str13 = request12.url;
        java.util.List<retrofit.client.Header> headerList14 = request12.headers;
        retrofit.mime.TypedOutput typedOutput15 = null;
        retrofit.client.Request request16 = new retrofit.client.Request("", "", headerList14, typedOutput15);
        retrofit.mime.TypedOutput typedOutput17 = request16.body;
        java.util.List<retrofit.client.Header> headerList18 = request16.headers;
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("hi!", "", headerList18, typedOutput19);
        requestBuilder1.headers = headerList18;
        retrofit.client.Header[] headerArray28 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList29 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList29, headerArray28);
        retrofit.mime.TypedOutput typedOutput31 = null;
        retrofit.client.Request request32 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList29, typedOutput31);
        java.lang.String str33 = request32.url;
        java.util.List<retrofit.client.Header> headerList34 = request32.headers;
        retrofit.mime.TypedOutput typedOutput35 = null;
        retrofit.client.Request request36 = new retrofit.client.Request("", "", headerList34, typedOutput35);
        retrofit.mime.TypedOutput typedOutput37 = request36.body;
        retrofit.mime.TypedOutput typedOutput38 = request36.getBody();
        java.util.List<retrofit.client.Header> headerList39 = request36.getHeaders();
        retrofit.mime.TypedOutput typedOutput40 = null;
        retrofit.client.Request request41 = new retrofit.client.Request("", "", headerList39, typedOutput40);
        requestBuilder1.headers = headerList39;
        java.lang.Class<?> wildcardClass43 = requestBuilder1.getClass();
        org.junit.Assert.assertNotNull(headerArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(headerList14);
        org.junit.Assert.assertNull(typedOutput17);
        org.junit.Assert.assertNotNull(headerList18);
        org.junit.Assert.assertNotNull(headerArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(headerList34);
        org.junit.Assert.assertNull(typedOutput37);
        org.junit.Assert.assertNull(typedOutput38);
        org.junit.Assert.assertNotNull(headerList39);
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test0072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0072");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        java.util.List<retrofit.client.Header> headerList12 = request11.headers;
        java.lang.Object[] objArray14 = new java.lang.Object[] { true, (short) 1, request11, 0 };
        requestBuilder1.args = objArray14;
        retrofit.converter.Converter converter16 = requestBuilder1.converter;
        java.lang.Object[] objArray17 = requestBuilder1.args;
        java.lang.Object[] objArray18 = null;
        retrofit.RequestBuilder requestBuilder19 = requestBuilder1.args(objArray18);
        java.lang.Object[] objArray20 = requestBuilder1.getargs();
        retrofit.converter.Converter converter21 = null;
        retrofit.RequestBuilder requestBuilder22 = new retrofit.RequestBuilder(converter21);
        java.lang.Object[] objArray23 = requestBuilder22.getargs();
        retrofit.converter.Converter converter24 = requestBuilder22.getconverter();
        retrofit.converter.Converter converter25 = null;
        retrofit.RequestBuilder requestBuilder26 = new retrofit.RequestBuilder(converter25);
        java.util.List<retrofit.client.Header> headerList27 = requestBuilder26.headers;
        retrofit.converter.Converter converter28 = null;
        retrofit.RequestBuilder requestBuilder29 = new retrofit.RequestBuilder(converter28);
        java.util.List<retrofit.client.Header> headerList30 = requestBuilder29.headers;
        retrofit.client.Header[] headerArray35 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList36 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList36, headerArray35);
        retrofit.mime.TypedOutput typedOutput38 = null;
        retrofit.client.Request request39 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList36, typedOutput38);
        java.util.List<retrofit.client.Header> headerList40 = request39.headers;
        java.lang.Object[] objArray42 = new java.lang.Object[] { true, (short) 1, request39, 0 };
        requestBuilder29.args = objArray42;
        requestBuilder26.setargs(objArray42);
        retrofit.RequestBuilder requestBuilder45 = requestBuilder22.args(objArray42);
        requestBuilder1.setargs(objArray42);
        retrofit.converter.Converter converter47 = null;
        retrofit.RequestBuilder requestBuilder48 = new retrofit.RequestBuilder(converter47);
        java.util.List<retrofit.client.Header> headerList49 = requestBuilder48.headers;
        retrofit.client.Header[] headerArray54 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList55 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList55, headerArray54);
        retrofit.mime.TypedOutput typedOutput57 = null;
        retrofit.client.Request request58 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList55, typedOutput57);
        java.util.List<retrofit.client.Header> headerList59 = request58.headers;
        java.lang.Object[] objArray61 = new java.lang.Object[] { true, (short) 1, request58, 0 };
        requestBuilder48.args = objArray61;
        retrofit.converter.Converter converter63 = requestBuilder48.converter;
        java.lang.Object[] objArray64 = requestBuilder48.args;
        java.lang.Object[] objArray65 = null;
        retrofit.RequestBuilder requestBuilder66 = requestBuilder48.args(objArray65);
        retrofit.client.Header[] headerArray67 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList68 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList68, headerArray67);
        requestBuilder66.headers = headerList68;
        requestBuilder1.headers = headerList68;
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertNotNull(requestBuilder19);
        org.junit.Assert.assertNull(objArray20);
        org.junit.Assert.assertNull(objArray23);
        org.junit.Assert.assertNull(converter24);
        org.junit.Assert.assertNull(headerList27);
        org.junit.Assert.assertNull(headerList30);
        org.junit.Assert.assertNotNull(headerArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(headerList40);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertNotNull(requestBuilder45);
        org.junit.Assert.assertNull(headerList49);
        org.junit.Assert.assertNotNull(headerArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(headerList59);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertNull(converter63);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertNotNull(requestBuilder66);
        org.junit.Assert.assertNotNull(headerArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test0073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0073");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        requestBuilder1.setapiUrl("");
        java.lang.String str4 = requestBuilder1.getapiUrl();
        java.lang.String str5 = requestBuilder1.apiUrl;
        retrofit.RequestBuilder requestBuilder7 = requestBuilder1.apiUrl("hi!");
        java.util.List<retrofit.client.Header> headerList8 = requestBuilder7.getheaders();
        java.util.List<retrofit.client.Header> headerList9 = requestBuilder7.getheaders();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.mime.TypedOutput typedOutput10 = requestBuilder7.buildBody();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(requestBuilder7);
        org.junit.Assert.assertNull(headerList8);
        org.junit.Assert.assertNull(headerList9);
    }

    @Test
    public void test0074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0074");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.lang.Object[] objArray2 = requestBuilder1.getargs();
        java.lang.Object[] objArray3 = requestBuilder1.getargs();
        requestBuilder1.apiUrl = "";
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str6 = requestBuilder1.buildRelativeUrl();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(objArray2);
        org.junit.Assert.assertNull(objArray3);
    }

    @Test
    public void test0075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0075");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        retrofit.client.Header[] headerArray8 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList9 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList9, headerArray8);
        retrofit.mime.TypedOutput typedOutput11 = null;
        retrofit.client.Request request12 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList9, typedOutput11);
        java.lang.String str13 = request12.url;
        java.util.List<retrofit.client.Header> headerList14 = request12.headers;
        retrofit.mime.TypedOutput typedOutput15 = null;
        retrofit.client.Request request16 = new retrofit.client.Request("", "", headerList14, typedOutput15);
        retrofit.mime.TypedOutput typedOutput17 = request16.body;
        java.util.List<retrofit.client.Header> headerList18 = request16.headers;
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("hi!", "", headerList18, typedOutput19);
        requestBuilder1.headers = headerList18;
        retrofit.client.Header[] headerArray28 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList29 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList29, headerArray28);
        retrofit.mime.TypedOutput typedOutput31 = null;
        retrofit.client.Request request32 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList29, typedOutput31);
        java.lang.String str33 = request32.url;
        java.util.List<retrofit.client.Header> headerList34 = request32.headers;
        retrofit.mime.TypedOutput typedOutput35 = null;
        retrofit.client.Request request36 = new retrofit.client.Request("", "", headerList34, typedOutput35);
        retrofit.mime.TypedOutput typedOutput37 = request36.body;
        retrofit.mime.TypedOutput typedOutput38 = request36.getBody();
        java.util.List<retrofit.client.Header> headerList39 = request36.getHeaders();
        retrofit.mime.TypedOutput typedOutput40 = null;
        retrofit.client.Request request41 = new retrofit.client.Request("", "", headerList39, typedOutput40);
        requestBuilder1.headers = headerList39;
        java.util.List<retrofit.client.Header> headerList43 = requestBuilder1.getheaders();
        retrofit.client.Header[] headerArray50 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList51 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList51, headerArray50);
        retrofit.mime.TypedOutput typedOutput53 = null;
        retrofit.client.Request request54 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList51, typedOutput53);
        java.lang.String str55 = request54.url;
        java.util.List<retrofit.client.Header> headerList56 = request54.headers;
        retrofit.mime.TypedOutput typedOutput57 = request54.body;
        retrofit.mime.TypedOutput typedOutput58 = request54.body;
        java.util.List<retrofit.client.Header> headerList59 = request54.headers;
        retrofit.mime.TypedOutput typedOutput60 = null;
        retrofit.client.Request request61 = new retrofit.client.Request("", "hi!", headerList59, typedOutput60);
        java.util.List<retrofit.client.Header> headerList62 = request61.getHeaders();
        retrofit.mime.TypedOutput typedOutput63 = null;
        retrofit.client.Request request64 = new retrofit.client.Request("", "hi!", headerList62, typedOutput63);
        requestBuilder1.headers = headerList62;
        java.lang.Class<?> wildcardClass66 = requestBuilder1.getClass();
        org.junit.Assert.assertNotNull(headerArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(headerList14);
        org.junit.Assert.assertNull(typedOutput17);
        org.junit.Assert.assertNotNull(headerList18);
        org.junit.Assert.assertNotNull(headerArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(headerList34);
        org.junit.Assert.assertNull(typedOutput37);
        org.junit.Assert.assertNull(typedOutput38);
        org.junit.Assert.assertNotNull(headerList39);
        org.junit.Assert.assertNotNull(headerList43);
        org.junit.Assert.assertNotNull(headerArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(headerList56);
        org.junit.Assert.assertNull(typedOutput57);
        org.junit.Assert.assertNull(typedOutput58);
        org.junit.Assert.assertNotNull(headerList59);
        org.junit.Assert.assertNotNull(headerList62);
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test0076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0076");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        java.util.List<retrofit.client.Header> headerList12 = request11.headers;
        java.lang.Object[] objArray14 = new java.lang.Object[] { true, (short) 1, request11, 0 };
        requestBuilder1.args = objArray14;
        retrofit.converter.Converter converter16 = requestBuilder1.converter;
        java.util.List<retrofit.client.Header> headerList17 = requestBuilder1.headers;
        requestBuilder1.apiUrl = "hi!";
        java.lang.Object[] objArray20 = requestBuilder1.args;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str21 = requestBuilder1.buildRelativeUrl();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNull(headerList17);
        org.junit.Assert.assertNotNull(objArray20);
    }

    @Test
    public void test0077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0077");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        requestBuilder1.setapiUrl("");
        java.lang.String str4 = requestBuilder1.getapiUrl();
        java.lang.String str5 = requestBuilder1.apiUrl;
        java.lang.String str6 = requestBuilder1.getapiUrl();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str7 = requestBuilder1.buildRelativeUrl();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
    }

    @Test
    public void test0078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0078");
        retrofit.converter.Converter converter2 = null;
        retrofit.RequestBuilder requestBuilder3 = new retrofit.RequestBuilder(converter2);
        java.util.List<retrofit.client.Header> headerList4 = requestBuilder3.headers;
        retrofit.client.Header[] headerArray9 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList10 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList10, headerArray9);
        retrofit.mime.TypedOutput typedOutput12 = null;
        retrofit.client.Request request13 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList10, typedOutput12);
        java.util.List<retrofit.client.Header> headerList14 = request13.headers;
        java.lang.Object[] objArray16 = new java.lang.Object[] { true, (short) 1, request13, 0 };
        requestBuilder3.args = objArray16;
        retrofit.converter.Converter converter18 = requestBuilder3.converter;
        java.lang.Object[] objArray19 = requestBuilder3.args;
        java.lang.Object[] objArray20 = null;
        retrofit.RequestBuilder requestBuilder21 = requestBuilder3.args(objArray20);
        java.lang.Object[] objArray22 = requestBuilder3.getargs();
        retrofit.client.Header[] headerArray27 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList28 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList28, headerArray27);
        retrofit.mime.TypedOutput typedOutput30 = null;
        retrofit.client.Request request31 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList28, typedOutput30);
        java.lang.String str32 = request31.url;
        java.util.List<retrofit.client.Header> headerList33 = request31.headers;
        retrofit.mime.TypedOutput typedOutput34 = request31.body;
        retrofit.mime.TypedOutput typedOutput35 = request31.body;
        java.util.List<retrofit.client.Header> headerList36 = request31.headers;
        retrofit.mime.TypedOutput typedOutput37 = null;
        retrofit.client.Request request38 = new retrofit.client.Request("", "hi!", headerList36, typedOutput37);
        java.util.List<retrofit.client.Header> headerList39 = request38.getHeaders();
        retrofit.RequestBuilder requestBuilder40 = requestBuilder3.headers(headerList39);
        retrofit.mime.TypedOutput typedOutput41 = null;
        retrofit.client.Request request42 = new retrofit.client.Request("", "", headerList39, typedOutput41);
        java.lang.String str43 = request42.getUrl();
        java.lang.Class<?> wildcardClass44 = request42.getClass();
        org.junit.Assert.assertNull(headerList4);
        org.junit.Assert.assertNotNull(headerArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(headerList14);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertNull(converter18);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(requestBuilder21);
        org.junit.Assert.assertNull(objArray22);
        org.junit.Assert.assertNotNull(headerArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(headerList33);
        org.junit.Assert.assertNull(typedOutput34);
        org.junit.Assert.assertNull(typedOutput35);
        org.junit.Assert.assertNotNull(headerList36);
        org.junit.Assert.assertNotNull(headerList39);
        org.junit.Assert.assertNotNull(requestBuilder40);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test0079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0079");
        retrofit.client.Header[] headerArray2 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList3 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList3, headerArray2);
        retrofit.mime.TypedOutput typedOutput5 = null;
        retrofit.client.Request request6 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList3, typedOutput5);
        java.lang.String str7 = request6.url;
        java.util.List<retrofit.client.Header> headerList8 = request6.headers;
        retrofit.mime.TypedOutput typedOutput9 = request6.body;
        retrofit.mime.TypedOutput typedOutput10 = request6.body;
        retrofit.mime.TypedOutput typedOutput11 = request6.getBody();
        retrofit.mime.TypedOutput typedOutput12 = request6.body;
        java.util.List<retrofit.client.Header> headerList13 = request6.getHeaders();
        java.util.List<retrofit.client.Header> headerList14 = request6.getHeaders();
        java.lang.String str15 = request6.getUrl();
        org.junit.Assert.assertNotNull(headerArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(headerList8);
        org.junit.Assert.assertNull(typedOutput9);
        org.junit.Assert.assertNull(typedOutput10);
        org.junit.Assert.assertNull(typedOutput11);
        org.junit.Assert.assertNull(typedOutput12);
        org.junit.Assert.assertNotNull(headerList13);
        org.junit.Assert.assertNotNull(headerList14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test0080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0080");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        java.util.List<retrofit.client.Header> headerList12 = request11.headers;
        java.lang.Object[] objArray14 = new java.lang.Object[] { true, (short) 1, request11, 0 };
        requestBuilder1.args = objArray14;
        retrofit.converter.Converter converter16 = requestBuilder1.converter;
        java.util.List<retrofit.client.Header> headerList17 = requestBuilder1.headers;
        java.util.List<retrofit.client.Header> headerList18 = requestBuilder1.headers;
        java.util.List<retrofit.client.Header> headerList19 = requestBuilder1.getheaders();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request20 = requestBuilder1.build();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNull(headerList17);
        org.junit.Assert.assertNull(headerList18);
        org.junit.Assert.assertNull(headerList19);
    }

    @Test
    public void test0081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0081");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        retrofit.converter.Converter converter2 = requestBuilder1.converter;
        retrofit.converter.Converter converter3 = requestBuilder1.converter;
        java.lang.Object[] objArray4 = requestBuilder1.args;
        org.junit.Assert.assertNull(converter2);
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(objArray4);
    }

    @Test
    public void test0082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0082");
        retrofit.client.Header[] headerArray2 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList3 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList3, headerArray2);
        retrofit.mime.TypedOutput typedOutput5 = null;
        retrofit.client.Request request6 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList3, typedOutput5);
        java.util.List<retrofit.client.Header> headerList7 = request6.headers;
        java.lang.String str8 = request6.getMethod();
        retrofit.mime.TypedOutput typedOutput9 = request6.getBody();
        java.lang.String str10 = request6.method;
        org.junit.Assert.assertNotNull(headerArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(headerList7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNull(typedOutput9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test0083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0083");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        java.util.List<retrofit.client.Header> headerList12 = request11.headers;
        java.lang.Object[] objArray14 = new java.lang.Object[] { true, (short) 1, request11, 0 };
        requestBuilder1.args = objArray14;
        retrofit.converter.Converter converter16 = requestBuilder1.converter;
        java.lang.Object[] objArray17 = requestBuilder1.args;
        java.lang.Object[] objArray18 = null;
        retrofit.RequestBuilder requestBuilder19 = requestBuilder1.args(objArray18);
        retrofit.converter.Converter converter20 = null;
        retrofit.RequestBuilder requestBuilder21 = new retrofit.RequestBuilder(converter20);
        java.util.List<retrofit.client.Header> headerList22 = requestBuilder21.headers;
        retrofit.converter.Converter converter23 = requestBuilder21.getconverter();
        java.lang.Object[] objArray26 = new java.lang.Object[] { 0.0f, 100.0d };
        retrofit.RequestBuilder requestBuilder27 = requestBuilder21.args(objArray26);
        requestBuilder19.args = objArray26;
        java.lang.Object[] objArray29 = null;
        requestBuilder19.setargs(objArray29);
        java.lang.Class<?> wildcardClass31 = requestBuilder19.getClass();
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertNotNull(requestBuilder19);
        org.junit.Assert.assertNull(headerList22);
        org.junit.Assert.assertNull(converter23);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[0.0, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[0.0, 100.0]");
        org.junit.Assert.assertNotNull(requestBuilder27);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0084");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        java.util.List<retrofit.client.Header> headerList12 = request11.headers;
        java.lang.Object[] objArray14 = new java.lang.Object[] { true, (short) 1, request11, 0 };
        requestBuilder1.args = objArray14;
        retrofit.converter.Converter converter16 = requestBuilder1.converter;
        java.lang.Object[] objArray17 = requestBuilder1.args;
        retrofit.converter.Converter converter18 = null;
        retrofit.RequestBuilder requestBuilder19 = new retrofit.RequestBuilder(converter18);
        java.util.List<retrofit.client.Header> headerList20 = requestBuilder19.headers;
        retrofit.client.Header[] headerArray25 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList26 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList26, headerArray25);
        retrofit.mime.TypedOutput typedOutput28 = null;
        retrofit.client.Request request29 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList26, typedOutput28);
        java.util.List<retrofit.client.Header> headerList30 = request29.headers;
        java.lang.Object[] objArray32 = new java.lang.Object[] { true, (short) 1, request29, 0 };
        requestBuilder19.args = objArray32;
        retrofit.converter.Converter converter34 = requestBuilder19.converter;
        java.lang.Object[] objArray35 = requestBuilder19.args;
        requestBuilder1.setargs(objArray35);
        java.util.List<retrofit.client.Header> headerList37 = requestBuilder1.headers;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str38 = requestBuilder1.buildRelativeUrl();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertNull(headerList20);
        org.junit.Assert.assertNotNull(headerArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(headerList30);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertNull(converter34);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertNull(headerList37);
    }

    @Test
    public void test0085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0085");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.lang.Object[] objArray2 = requestBuilder1.getargs();
        java.lang.Object[] objArray3 = requestBuilder1.getargs();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request4 = requestBuilder1.build();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(objArray2);
        org.junit.Assert.assertNull(objArray3);
    }

    @Test
    public void test0086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0086");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        retrofit.client.Header[] headerArray8 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList9 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList9, headerArray8);
        retrofit.mime.TypedOutput typedOutput11 = null;
        retrofit.client.Request request12 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList9, typedOutput11);
        java.lang.String str13 = request12.url;
        java.util.List<retrofit.client.Header> headerList14 = request12.headers;
        retrofit.mime.TypedOutput typedOutput15 = null;
        retrofit.client.Request request16 = new retrofit.client.Request("", "", headerList14, typedOutput15);
        retrofit.mime.TypedOutput typedOutput17 = request16.body;
        java.util.List<retrofit.client.Header> headerList18 = request16.headers;
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("hi!", "", headerList18, typedOutput19);
        requestBuilder1.headers = headerList18;
        retrofit.client.Header[] headerArray28 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList29 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList29, headerArray28);
        retrofit.mime.TypedOutput typedOutput31 = null;
        retrofit.client.Request request32 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList29, typedOutput31);
        java.lang.String str33 = request32.url;
        java.util.List<retrofit.client.Header> headerList34 = request32.headers;
        retrofit.mime.TypedOutput typedOutput35 = null;
        retrofit.client.Request request36 = new retrofit.client.Request("", "", headerList34, typedOutput35);
        retrofit.mime.TypedOutput typedOutput37 = request36.body;
        retrofit.mime.TypedOutput typedOutput38 = request36.getBody();
        java.util.List<retrofit.client.Header> headerList39 = request36.getHeaders();
        retrofit.mime.TypedOutput typedOutput40 = null;
        retrofit.client.Request request41 = new retrofit.client.Request("", "", headerList39, typedOutput40);
        requestBuilder1.headers = headerList39;
        java.util.List<retrofit.client.Header> headerList43 = requestBuilder1.headers;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.mime.TypedOutput typedOutput44 = requestBuilder1.buildBody();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(headerArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(headerList14);
        org.junit.Assert.assertNull(typedOutput17);
        org.junit.Assert.assertNotNull(headerList18);
        org.junit.Assert.assertNotNull(headerArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(headerList34);
        org.junit.Assert.assertNull(typedOutput37);
        org.junit.Assert.assertNull(typedOutput38);
        org.junit.Assert.assertNotNull(headerList39);
        org.junit.Assert.assertNotNull(headerList43);
    }

    @Test
    public void test0087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0087");
        retrofit.client.Header[] headerArray6 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList7 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList7, headerArray6);
        retrofit.mime.TypedOutput typedOutput9 = null;
        retrofit.client.Request request10 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList7, typedOutput9);
        java.lang.String str11 = request10.url;
        java.util.List<retrofit.client.Header> headerList12 = request10.headers;
        retrofit.mime.TypedOutput typedOutput13 = request10.body;
        retrofit.mime.TypedOutput typedOutput14 = request10.body;
        java.util.List<retrofit.client.Header> headerList15 = request10.headers;
        retrofit.mime.TypedOutput typedOutput16 = null;
        retrofit.client.Request request17 = new retrofit.client.Request("hi!", "hi!", headerList15, typedOutput16);
        retrofit.mime.TypedOutput typedOutput18 = request17.body;
        java.util.List<retrofit.client.Header> headerList19 = request17.getHeaders();
        retrofit.mime.TypedOutput typedOutput20 = null;
        retrofit.client.Request request21 = new retrofit.client.Request("", "hi!", headerList19, typedOutput20);
        java.util.List<retrofit.client.Header> headerList22 = request21.headers;
        retrofit.mime.TypedOutput typedOutput23 = request21.body;
        java.lang.String str24 = request21.getUrl();
        org.junit.Assert.assertNotNull(headerArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNull(typedOutput13);
        org.junit.Assert.assertNull(typedOutput14);
        org.junit.Assert.assertNotNull(headerList15);
        org.junit.Assert.assertNull(typedOutput18);
        org.junit.Assert.assertNotNull(headerList19);
        org.junit.Assert.assertNotNull(headerList22);
        org.junit.Assert.assertNull(typedOutput23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
    }

    @Test
    public void test0088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0088");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.lang.Object[] objArray2 = requestBuilder1.getargs();
        java.lang.Object[] objArray3 = requestBuilder1.getargs();
        requestBuilder1.apiUrl = "";
        java.lang.String str6 = requestBuilder1.getapiUrl();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str7 = requestBuilder1.buildRelativeUrl();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(objArray2);
        org.junit.Assert.assertNull(objArray3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
    }

    @Test
    public void test0089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0089");
        retrofit.client.Header[] headerArray8 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList9 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList9, headerArray8);
        retrofit.mime.TypedOutput typedOutput11 = null;
        retrofit.client.Request request12 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList9, typedOutput11);
        java.lang.String str13 = request12.url;
        java.util.List<retrofit.client.Header> headerList14 = request12.headers;
        retrofit.mime.TypedOutput typedOutput15 = request12.body;
        retrofit.mime.TypedOutput typedOutput16 = request12.body;
        java.util.List<retrofit.client.Header> headerList17 = request12.headers;
        retrofit.mime.TypedOutput typedOutput18 = null;
        retrofit.client.Request request19 = new retrofit.client.Request("hi!", "hi!", headerList17, typedOutput18);
        retrofit.mime.TypedOutput typedOutput20 = request19.body;
        java.util.List<retrofit.client.Header> headerList21 = request19.getHeaders();
        retrofit.mime.TypedOutput typedOutput22 = null;
        retrofit.client.Request request23 = new retrofit.client.Request("", "hi!", headerList21, typedOutput22);
        retrofit.mime.TypedOutput typedOutput24 = null;
        retrofit.client.Request request25 = new retrofit.client.Request("hi!", "hi!", headerList21, typedOutput24);
        java.util.List<retrofit.client.Header> headerList26 = request25.headers;
        java.lang.String str27 = request25.url;
        org.junit.Assert.assertNotNull(headerArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(headerList14);
        org.junit.Assert.assertNull(typedOutput15);
        org.junit.Assert.assertNull(typedOutput16);
        org.junit.Assert.assertNotNull(headerList17);
        org.junit.Assert.assertNull(typedOutput20);
        org.junit.Assert.assertNotNull(headerList21);
        org.junit.Assert.assertNotNull(headerList26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
    }

    @Test
    public void test0090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0090");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.lang.Object[] objArray2 = requestBuilder1.getargs();
        retrofit.converter.Converter converter3 = requestBuilder1.getconverter();
        retrofit.client.Header[] headerArray10 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList11 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList11, headerArray10);
        retrofit.mime.TypedOutput typedOutput13 = null;
        retrofit.client.Request request14 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList11, typedOutput13);
        retrofit.mime.TypedOutput typedOutput15 = null;
        retrofit.client.Request request16 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList11, typedOutput15);
        retrofit.mime.TypedOutput typedOutput17 = null;
        retrofit.client.Request request18 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList11, typedOutput17);
        java.util.List<retrofit.client.Header> headerList19 = request18.getHeaders();
        requestBuilder1.setheaders(headerList19);
        java.lang.String str21 = requestBuilder1.apiUrl;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.mime.TypedOutput typedOutput22 = requestBuilder1.buildBody();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(objArray2);
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNotNull(headerArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(headerList19);
        org.junit.Assert.assertNull(str21);
    }

    @Test
    public void test0091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0091");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        requestBuilder1.setapiUrl("");
        java.lang.String str4 = requestBuilder1.getapiUrl();
        java.util.List<retrofit.client.Header> headerList5 = requestBuilder1.getheaders();
        retrofit.client.Header[] headerArray16 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList17 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList17, headerArray16);
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList17, typedOutput19);
        retrofit.mime.TypedOutput typedOutput21 = null;
        retrofit.client.Request request22 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList17, typedOutput21);
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList17, typedOutput23);
        retrofit.mime.TypedOutput typedOutput25 = null;
        retrofit.client.Request request26 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList17, typedOutput25);
        retrofit.mime.TypedOutput typedOutput27 = null;
        retrofit.client.Request request28 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList17, typedOutput27);
        requestBuilder1.headers = headerList17;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str30 = requestBuilder1.buildRelativeUrl();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(headerList5);
        org.junit.Assert.assertNotNull(headerArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0092");
        retrofit.client.Header[] headerArray4 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList5 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList5, headerArray4);
        retrofit.mime.TypedOutput typedOutput7 = null;
        retrofit.client.Request request8 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList5, typedOutput7);
        java.lang.String str9 = request8.url;
        java.util.List<retrofit.client.Header> headerList10 = request8.headers;
        retrofit.mime.TypedOutput typedOutput11 = request8.body;
        retrofit.mime.TypedOutput typedOutput12 = request8.body;
        retrofit.mime.TypedOutput typedOutput13 = request8.getBody();
        java.util.List<retrofit.client.Header> headerList14 = request8.getHeaders();
        retrofit.mime.TypedOutput typedOutput15 = null;
        retrofit.client.Request request16 = new retrofit.client.Request("", "", headerList14, typedOutput15);
        retrofit.mime.TypedOutput typedOutput17 = request16.body;
        org.junit.Assert.assertNotNull(headerArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(headerList10);
        org.junit.Assert.assertNull(typedOutput11);
        org.junit.Assert.assertNull(typedOutput12);
        org.junit.Assert.assertNull(typedOutput13);
        org.junit.Assert.assertNotNull(headerList14);
        org.junit.Assert.assertNull(typedOutput17);
    }

    @Test
    public void test0093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0093");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        requestBuilder1.setapiUrl("");
        java.lang.String str4 = requestBuilder1.getapiUrl();
        java.lang.String str5 = requestBuilder1.apiUrl;
        retrofit.RequestBuilder requestBuilder7 = requestBuilder1.apiUrl("hi!");
        // The following exception was thrown during execution in test generation
        try {
            retrofit.mime.TypedOutput typedOutput8 = requestBuilder1.buildBody();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(requestBuilder7);
    }

    @Test
    public void test0094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0094");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.lang.Object[] objArray2 = requestBuilder1.getargs();
        retrofit.converter.Converter converter3 = requestBuilder1.getconverter();
        retrofit.converter.Converter converter4 = requestBuilder1.converter;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.mime.TypedOutput typedOutput5 = requestBuilder1.buildBody();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(objArray2);
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(converter4);
    }

    @Test
    public void test0095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0095");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.lang.Object[] objArray2 = requestBuilder1.getargs();
        retrofit.converter.Converter converter3 = requestBuilder1.getconverter();
        retrofit.converter.Converter converter4 = null;
        retrofit.RequestBuilder requestBuilder5 = new retrofit.RequestBuilder(converter4);
        java.util.List<retrofit.client.Header> headerList6 = requestBuilder5.headers;
        retrofit.converter.Converter converter7 = null;
        retrofit.RequestBuilder requestBuilder8 = new retrofit.RequestBuilder(converter7);
        java.util.List<retrofit.client.Header> headerList9 = requestBuilder8.headers;
        retrofit.client.Header[] headerArray14 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList15 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList15, headerArray14);
        retrofit.mime.TypedOutput typedOutput17 = null;
        retrofit.client.Request request18 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList15, typedOutput17);
        java.util.List<retrofit.client.Header> headerList19 = request18.headers;
        java.lang.Object[] objArray21 = new java.lang.Object[] { true, (short) 1, request18, 0 };
        requestBuilder8.args = objArray21;
        requestBuilder5.setargs(objArray21);
        retrofit.RequestBuilder requestBuilder24 = requestBuilder1.args(objArray21);
        requestBuilder1.apiUrl = "";
        org.junit.Assert.assertNull(objArray2);
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(headerList6);
        org.junit.Assert.assertNull(headerList9);
        org.junit.Assert.assertNotNull(headerArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(headerList19);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertNotNull(requestBuilder24);
    }

    @Test
    public void test0096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0096");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        retrofit.client.Header[] headerArray8 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList9 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList9, headerArray8);
        retrofit.mime.TypedOutput typedOutput11 = null;
        retrofit.client.Request request12 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList9, typedOutput11);
        java.lang.String str13 = request12.url;
        java.util.List<retrofit.client.Header> headerList14 = request12.headers;
        retrofit.mime.TypedOutput typedOutput15 = null;
        retrofit.client.Request request16 = new retrofit.client.Request("", "", headerList14, typedOutput15);
        retrofit.mime.TypedOutput typedOutput17 = request16.body;
        java.util.List<retrofit.client.Header> headerList18 = request16.headers;
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("hi!", "", headerList18, typedOutput19);
        requestBuilder1.headers = headerList18;
        requestBuilder1.setapiUrl("");
        requestBuilder1.apiUrl = "";
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request26 = requestBuilder1.build();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(headerArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(headerList14);
        org.junit.Assert.assertNull(typedOutput17);
        org.junit.Assert.assertNotNull(headerList18);
    }

    @Test
    public void test0097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0097");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        java.util.List<retrofit.client.Header> headerList12 = request11.headers;
        java.lang.Object[] objArray14 = new java.lang.Object[] { true, (short) 1, request11, 0 };
        requestBuilder1.args = objArray14;
        retrofit.converter.Converter converter16 = requestBuilder1.converter;
        java.util.List<retrofit.client.Header> headerList17 = requestBuilder1.headers;
        java.util.List<retrofit.client.Header> headerList18 = requestBuilder1.headers;
        java.util.List<retrofit.client.Header> headerList19 = requestBuilder1.getheaders();
        java.util.List<retrofit.client.Header> headerList20 = requestBuilder1.headers;
        java.lang.Class<?> wildcardClass21 = requestBuilder1.getClass();
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNull(headerList17);
        org.junit.Assert.assertNull(headerList18);
        org.junit.Assert.assertNull(headerList19);
        org.junit.Assert.assertNull(headerList20);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0098");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        java.util.List<retrofit.client.Header> headerList12 = request11.headers;
        java.lang.Object[] objArray14 = new java.lang.Object[] { true, (short) 1, request11, 0 };
        requestBuilder1.args = objArray14;
        retrofit.client.Header[] headerArray22 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList23 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList23, headerArray22);
        retrofit.mime.TypedOutput typedOutput25 = null;
        retrofit.client.Request request26 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList23, typedOutput25);
        java.lang.String str27 = request26.url;
        java.util.List<retrofit.client.Header> headerList28 = request26.headers;
        retrofit.mime.TypedOutput typedOutput29 = null;
        retrofit.client.Request request30 = new retrofit.client.Request("", "", headerList28, typedOutput29);
        retrofit.mime.TypedOutput typedOutput31 = request30.body;
        java.util.List<retrofit.client.Header> headerList32 = request30.headers;
        retrofit.mime.TypedOutput typedOutput33 = null;
        retrofit.client.Request request34 = new retrofit.client.Request("hi!", "", headerList32, typedOutput33);
        requestBuilder1.headers = headerList32;
        retrofit.converter.Converter converter36 = requestBuilder1.getconverter();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.mime.TypedOutput typedOutput37 = requestBuilder1.buildBody();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNotNull(headerArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(headerList28);
        org.junit.Assert.assertNull(typedOutput31);
        org.junit.Assert.assertNotNull(headerList32);
        org.junit.Assert.assertNull(converter36);
    }

    @Test
    public void test0099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0099");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        requestBuilder1.setapiUrl("hi!");
        java.lang.Object[] objArray4 = requestBuilder1.args;
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        java.lang.String str12 = request11.getUrl();
        java.util.List<retrofit.client.Header> headerList13 = request11.getHeaders();
        retrofit.RequestBuilder requestBuilder14 = requestBuilder1.headers(headerList13);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str15 = requestBuilder1.buildRelativeUrl();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(objArray4);
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(headerList13);
        org.junit.Assert.assertNotNull(requestBuilder14);
    }

    @Test
    public void test0100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0100");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        java.util.List<retrofit.client.Header> headerList12 = request11.headers;
        java.lang.Object[] objArray14 = new java.lang.Object[] { true, (short) 1, request11, 0 };
        requestBuilder1.args = objArray14;
        retrofit.client.Header[] headerArray18 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList19 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList19, headerArray18);
        retrofit.mime.TypedOutput typedOutput21 = null;
        retrofit.client.Request request22 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList19, typedOutput21);
        java.util.List<retrofit.client.Header> headerList23 = request22.headers;
        requestBuilder1.setheaders(headerList23);
        java.lang.Object[] objArray25 = requestBuilder1.getargs();
        java.lang.Class<?> wildcardClass26 = requestBuilder1.getClass();
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNotNull(headerArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(headerList23);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test0101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0101");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.converter.Converter converter3 = requestBuilder1.getconverter();
        java.lang.Object[] objArray6 = new java.lang.Object[] { 0.0f, 100.0d };
        retrofit.RequestBuilder requestBuilder7 = requestBuilder1.args(objArray6);
        java.util.List<retrofit.client.Header> headerList8 = null;
        requestBuilder1.headers = headerList8;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.mime.TypedOutput typedOutput10 = requestBuilder1.buildBody();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[0.0, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[0.0, 100.0]");
        org.junit.Assert.assertNotNull(requestBuilder7);
    }

    @Test
    public void test0102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0102");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        java.util.List<retrofit.client.Header> headerList12 = request11.headers;
        java.lang.Object[] objArray14 = new java.lang.Object[] { true, (short) 1, request11, 0 };
        requestBuilder1.args = objArray14;
        retrofit.client.Header[] headerArray18 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList19 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList19, headerArray18);
        retrofit.mime.TypedOutput typedOutput21 = null;
        retrofit.client.Request request22 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList19, typedOutput21);
        java.util.List<retrofit.client.Header> headerList23 = request22.headers;
        requestBuilder1.setheaders(headerList23);
        java.lang.Object[] objArray25 = requestBuilder1.getargs();
        requestBuilder1.apiUrl = "";
        // The following exception was thrown during execution in test generation
        try {
            retrofit.mime.TypedOutput typedOutput28 = requestBuilder1.buildBody();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNotNull(headerArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(headerList23);
        org.junit.Assert.assertNotNull(objArray25);
    }

    @Test
    public void test0103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0103");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        requestBuilder1.setapiUrl("");
        java.lang.String str4 = requestBuilder1.getapiUrl();
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        requestBuilder1.setheaders((java.util.List<retrofit.client.Header>) headerList8);
        java.lang.String str13 = requestBuilder1.getapiUrl();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request14 = requestBuilder1.build();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test0104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0104");
        retrofit.client.Header[] headerArray2 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList3 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList3, headerArray2);
        retrofit.mime.TypedOutput typedOutput5 = null;
        retrofit.client.Request request6 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList3, typedOutput5);
        java.lang.String str7 = request6.url;
        java.util.List<retrofit.client.Header> headerList8 = request6.headers;
        retrofit.mime.TypedOutput typedOutput9 = request6.body;
        retrofit.mime.TypedOutput typedOutput10 = request6.body;
        retrofit.mime.TypedOutput typedOutput11 = request6.getBody();
        retrofit.mime.TypedOutput typedOutput12 = request6.body;
        java.util.List<retrofit.client.Header> headerList13 = request6.getHeaders();
        java.util.List<retrofit.client.Header> headerList14 = request6.getHeaders();
        java.lang.String str15 = request6.getMethod();
        org.junit.Assert.assertNotNull(headerArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(headerList8);
        org.junit.Assert.assertNull(typedOutput9);
        org.junit.Assert.assertNull(typedOutput10);
        org.junit.Assert.assertNull(typedOutput11);
        org.junit.Assert.assertNull(typedOutput12);
        org.junit.Assert.assertNotNull(headerList13);
        org.junit.Assert.assertNotNull(headerList14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test0105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0105");
        retrofit.client.Header[] headerArray2 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList3 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList3, headerArray2);
        retrofit.mime.TypedOutput typedOutput5 = null;
        retrofit.client.Request request6 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList3, typedOutput5);
        java.lang.String str7 = request6.url;
        java.util.List<retrofit.client.Header> headerList8 = request6.headers;
        retrofit.mime.TypedOutput typedOutput9 = request6.body;
        retrofit.mime.TypedOutput typedOutput10 = request6.body;
        java.util.List<retrofit.client.Header> headerList11 = request6.headers;
        java.util.List<retrofit.client.Header> headerList12 = request6.headers;
        retrofit.mime.TypedOutput typedOutput13 = request6.body;
        org.junit.Assert.assertNotNull(headerArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(headerList8);
        org.junit.Assert.assertNull(typedOutput9);
        org.junit.Assert.assertNull(typedOutput10);
        org.junit.Assert.assertNotNull(headerList11);
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNull(typedOutput13);
    }

    @Test
    public void test0106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0106");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.lang.Object[] objArray2 = requestBuilder1.getargs();
        java.lang.Object[] objArray3 = requestBuilder1.getargs();
        requestBuilder1.apiUrl = "";
        java.lang.Object[] objArray6 = requestBuilder1.getargs();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request7 = requestBuilder1.build();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(objArray2);
        org.junit.Assert.assertNull(objArray3);
        org.junit.Assert.assertNull(objArray6);
    }

    @Test
    public void test0107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0107");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        requestBuilder1.setapiUrl("");
        java.lang.String str4 = requestBuilder1.getapiUrl();
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        requestBuilder1.setheaders((java.util.List<retrofit.client.Header>) headerList8);
        java.util.List<retrofit.client.Header> headerList13 = requestBuilder1.headers;
        retrofit.converter.Converter converter14 = requestBuilder1.getconverter();
        java.util.List<retrofit.client.Header> headerList15 = requestBuilder1.getheaders();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request16 = requestBuilder1.build();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(headerList13);
        org.junit.Assert.assertNull(converter14);
        org.junit.Assert.assertNotNull(headerList15);
    }

    @Test
    public void test0108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0108");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        retrofit.client.Header[] headerArray8 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList9 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList9, headerArray8);
        retrofit.mime.TypedOutput typedOutput11 = null;
        retrofit.client.Request request12 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList9, typedOutput11);
        java.lang.String str13 = request12.url;
        java.util.List<retrofit.client.Header> headerList14 = request12.headers;
        retrofit.mime.TypedOutput typedOutput15 = null;
        retrofit.client.Request request16 = new retrofit.client.Request("", "", headerList14, typedOutput15);
        retrofit.mime.TypedOutput typedOutput17 = request16.body;
        java.util.List<retrofit.client.Header> headerList18 = request16.headers;
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("hi!", "", headerList18, typedOutput19);
        requestBuilder1.headers = headerList18;
        retrofit.client.Header[] headerArray28 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList29 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList29, headerArray28);
        retrofit.mime.TypedOutput typedOutput31 = null;
        retrofit.client.Request request32 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList29, typedOutput31);
        java.lang.String str33 = request32.url;
        java.util.List<retrofit.client.Header> headerList34 = request32.headers;
        retrofit.mime.TypedOutput typedOutput35 = null;
        retrofit.client.Request request36 = new retrofit.client.Request("", "", headerList34, typedOutput35);
        retrofit.mime.TypedOutput typedOutput37 = request36.body;
        retrofit.mime.TypedOutput typedOutput38 = request36.getBody();
        java.util.List<retrofit.client.Header> headerList39 = request36.getHeaders();
        retrofit.mime.TypedOutput typedOutput40 = null;
        retrofit.client.Request request41 = new retrofit.client.Request("", "", headerList39, typedOutput40);
        requestBuilder1.headers = headerList39;
        retrofit.RequestBuilder requestBuilder44 = requestBuilder1.apiUrl("");
        requestBuilder1.apiUrl = "hi!";
        org.junit.Assert.assertNotNull(headerArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(headerList14);
        org.junit.Assert.assertNull(typedOutput17);
        org.junit.Assert.assertNotNull(headerList18);
        org.junit.Assert.assertNotNull(headerArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(headerList34);
        org.junit.Assert.assertNull(typedOutput37);
        org.junit.Assert.assertNull(typedOutput38);
        org.junit.Assert.assertNotNull(headerList39);
        org.junit.Assert.assertNotNull(requestBuilder44);
    }

    @Test
    public void test0109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0109");
        retrofit.client.Header[] headerArray4 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList5 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList5, headerArray4);
        retrofit.mime.TypedOutput typedOutput7 = null;
        retrofit.client.Request request8 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList5, typedOutput7);
        java.util.List<retrofit.client.Header> headerList9 = request8.headers;
        retrofit.mime.TypedOutput typedOutput10 = request8.body;
        java.util.List<retrofit.client.Header> headerList11 = request8.headers;
        retrofit.mime.TypedOutput typedOutput12 = null;
        retrofit.client.Request request13 = new retrofit.client.Request("", "hi!", headerList11, typedOutput12);
        java.lang.String str14 = request13.url;
        retrofit.mime.TypedOutput typedOutput15 = request13.getBody();
        java.lang.Class<?> wildcardClass16 = request13.getClass();
        org.junit.Assert.assertNotNull(headerArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(headerList9);
        org.junit.Assert.assertNull(typedOutput10);
        org.junit.Assert.assertNotNull(headerList11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertNull(typedOutput15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0110");
        retrofit.client.Header[] headerArray6 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList7 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList7, headerArray6);
        retrofit.mime.TypedOutput typedOutput9 = null;
        retrofit.client.Request request10 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList7, typedOutput9);
        retrofit.mime.TypedOutput typedOutput11 = null;
        retrofit.client.Request request12 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList7, typedOutput11);
        retrofit.mime.TypedOutput typedOutput13 = null;
        retrofit.client.Request request14 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList7, typedOutput13);
        java.lang.String str15 = request14.getUrl();
        retrofit.mime.TypedOutput typedOutput16 = request14.getBody();
        java.lang.String str17 = request14.url;
        org.junit.Assert.assertNotNull(headerArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNull(typedOutput16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
    }

    @Test
    public void test0111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0111");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        java.util.List<retrofit.client.Header> headerList12 = request11.headers;
        java.lang.Object[] objArray14 = new java.lang.Object[] { true, (short) 1, request11, 0 };
        requestBuilder1.args = objArray14;
        retrofit.converter.Converter converter16 = requestBuilder1.converter;
        java.lang.Object[] objArray17 = requestBuilder1.args;
        java.lang.Object[] objArray18 = null;
        retrofit.RequestBuilder requestBuilder19 = requestBuilder1.args(objArray18);
        java.lang.Object[] objArray20 = requestBuilder1.getargs();
        java.lang.String str21 = requestBuilder1.getapiUrl();
        retrofit.converter.Converter converter24 = null;
        retrofit.RequestBuilder requestBuilder25 = new retrofit.RequestBuilder(converter24);
        retrofit.client.Header[] headerArray32 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList33 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList33, headerArray32);
        retrofit.mime.TypedOutput typedOutput35 = null;
        retrofit.client.Request request36 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList33, typedOutput35);
        java.lang.String str37 = request36.url;
        java.util.List<retrofit.client.Header> headerList38 = request36.headers;
        retrofit.mime.TypedOutput typedOutput39 = null;
        retrofit.client.Request request40 = new retrofit.client.Request("", "", headerList38, typedOutput39);
        retrofit.mime.TypedOutput typedOutput41 = request40.body;
        java.util.List<retrofit.client.Header> headerList42 = request40.headers;
        retrofit.mime.TypedOutput typedOutput43 = null;
        retrofit.client.Request request44 = new retrofit.client.Request("hi!", "", headerList42, typedOutput43);
        requestBuilder25.headers = headerList42;
        retrofit.mime.TypedOutput typedOutput46 = null;
        retrofit.client.Request request47 = new retrofit.client.Request("", "", headerList42, typedOutput46);
        requestBuilder1.headers = headerList42;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request49 = requestBuilder1.build();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertNotNull(requestBuilder19);
        org.junit.Assert.assertNull(objArray20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(headerArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(headerList38);
        org.junit.Assert.assertNull(typedOutput41);
        org.junit.Assert.assertNotNull(headerList42);
    }

    @Test
    public void test0112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0112");
        retrofit.converter.Converter converter2 = null;
        retrofit.RequestBuilder requestBuilder3 = new retrofit.RequestBuilder(converter2);
        java.util.List<retrofit.client.Header> headerList4 = requestBuilder3.headers;
        retrofit.client.Header[] headerArray9 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList10 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList10, headerArray9);
        retrofit.mime.TypedOutput typedOutput12 = null;
        retrofit.client.Request request13 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList10, typedOutput12);
        java.util.List<retrofit.client.Header> headerList14 = request13.headers;
        java.lang.Object[] objArray16 = new java.lang.Object[] { true, (short) 1, request13, 0 };
        requestBuilder3.args = objArray16;
        retrofit.converter.Converter converter18 = requestBuilder3.converter;
        java.util.List<retrofit.client.Header> headerList19 = requestBuilder3.headers;
        requestBuilder3.apiUrl = "hi!";
        retrofit.client.Header[] headerArray26 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList27 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList27, headerArray26);
        retrofit.mime.TypedOutput typedOutput29 = null;
        retrofit.client.Request request30 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList27, typedOutput29);
        java.lang.String str31 = request30.url;
        java.util.List<retrofit.client.Header> headerList32 = request30.headers;
        retrofit.mime.TypedOutput typedOutput33 = null;
        retrofit.client.Request request34 = new retrofit.client.Request("", "", headerList32, typedOutput33);
        retrofit.RequestBuilder requestBuilder35 = requestBuilder3.headers(headerList32);
        java.util.List<retrofit.client.Header> headerList36 = requestBuilder3.headers;
        java.util.List<retrofit.client.Header> headerList37 = requestBuilder3.headers;
        retrofit.mime.TypedOutput typedOutput38 = null;
        retrofit.client.Request request39 = new retrofit.client.Request("", "", headerList37, typedOutput38);
        java.lang.String str40 = request39.getUrl();
        java.util.List<retrofit.client.Header> headerList41 = request39.headers;
        java.lang.String str42 = request39.url;
        org.junit.Assert.assertNull(headerList4);
        org.junit.Assert.assertNotNull(headerArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(headerList14);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertNull(converter18);
        org.junit.Assert.assertNull(headerList19);
        org.junit.Assert.assertNotNull(headerArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(headerList32);
        org.junit.Assert.assertNotNull(requestBuilder35);
        org.junit.Assert.assertNotNull(headerList36);
        org.junit.Assert.assertNotNull(headerList37);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(headerList41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
    }

    @Test
    public void test0113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0113");
        retrofit.client.Header[] headerArray2 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList3 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList3, headerArray2);
        retrofit.mime.TypedOutput typedOutput5 = null;
        retrofit.client.Request request6 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList3, typedOutput5);
        java.lang.String str7 = request6.url;
        java.util.List<retrofit.client.Header> headerList8 = request6.headers;
        retrofit.mime.TypedOutput typedOutput9 = request6.body;
        retrofit.mime.TypedOutput typedOutput10 = request6.body;
        retrofit.mime.TypedOutput typedOutput11 = request6.getBody();
        java.lang.String str12 = request6.getUrl();
        java.lang.String str13 = request6.getMethod();
        org.junit.Assert.assertNotNull(headerArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(headerList8);
        org.junit.Assert.assertNull(typedOutput9);
        org.junit.Assert.assertNull(typedOutput10);
        org.junit.Assert.assertNull(typedOutput11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test0114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0114");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        requestBuilder1.setapiUrl("");
        java.lang.String str4 = requestBuilder1.getapiUrl();
        java.util.List<retrofit.client.Header> headerList5 = requestBuilder1.getheaders();
        java.lang.String str6 = requestBuilder1.getapiUrl();
        java.lang.Class<?> wildcardClass7 = requestBuilder1.getClass();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(headerList5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0115");
        retrofit.converter.Converter converter4 = null;
        retrofit.RequestBuilder requestBuilder5 = new retrofit.RequestBuilder(converter4);
        retrofit.client.Header[] headerArray12 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList13 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList13, headerArray12);
        retrofit.mime.TypedOutput typedOutput15 = null;
        retrofit.client.Request request16 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList13, typedOutput15);
        java.lang.String str17 = request16.url;
        java.util.List<retrofit.client.Header> headerList18 = request16.headers;
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("", "", headerList18, typedOutput19);
        retrofit.mime.TypedOutput typedOutput21 = request20.body;
        java.util.List<retrofit.client.Header> headerList22 = request20.headers;
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("hi!", "", headerList22, typedOutput23);
        requestBuilder5.headers = headerList22;
        retrofit.mime.TypedOutput typedOutput26 = null;
        retrofit.client.Request request27 = new retrofit.client.Request("", "", headerList22, typedOutput26);
        retrofit.mime.TypedOutput typedOutput28 = null;
        retrofit.client.Request request29 = new retrofit.client.Request("hi!", "hi!", headerList22, typedOutput28);
        java.lang.String str30 = request29.getUrl();
        java.lang.Class<?> wildcardClass31 = request29.getClass();
        org.junit.Assert.assertNotNull(headerArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(headerList18);
        org.junit.Assert.assertNull(typedOutput21);
        org.junit.Assert.assertNotNull(headerList22);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0116");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        java.util.List<retrofit.client.Header> headerList12 = request11.headers;
        java.lang.Object[] objArray14 = new java.lang.Object[] { true, (short) 1, request11, 0 };
        requestBuilder1.args = objArray14;
        retrofit.converter.Converter converter16 = requestBuilder1.converter;
        java.lang.Object[] objArray17 = requestBuilder1.args;
        java.lang.Object[] objArray18 = null;
        retrofit.RequestBuilder requestBuilder19 = requestBuilder1.args(objArray18);
        retrofit.converter.Converter converter20 = requestBuilder19.getconverter();
        retrofit.RequestBuilder requestBuilder22 = requestBuilder19.apiUrl("");
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request23 = requestBuilder22.build();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertNotNull(requestBuilder19);
        org.junit.Assert.assertNull(converter20);
        org.junit.Assert.assertNotNull(requestBuilder22);
    }

    @Test
    public void test0117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0117");
        retrofit.client.Header[] headerArray10 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList11 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList11, headerArray10);
        retrofit.mime.TypedOutput typedOutput13 = null;
        retrofit.client.Request request14 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList11, typedOutput13);
        java.lang.String str15 = request14.url;
        java.util.List<retrofit.client.Header> headerList16 = request14.headers;
        retrofit.mime.TypedOutput typedOutput17 = null;
        retrofit.client.Request request18 = new retrofit.client.Request("", "", headerList16, typedOutput17);
        retrofit.mime.TypedOutput typedOutput19 = request18.body;
        java.util.List<retrofit.client.Header> headerList20 = request18.headers;
        retrofit.mime.TypedOutput typedOutput21 = null;
        retrofit.client.Request request22 = new retrofit.client.Request("", "hi!", headerList20, typedOutput21);
        java.lang.String str23 = request22.getUrl();
        java.util.List<retrofit.client.Header> headerList24 = request22.getHeaders();
        retrofit.mime.TypedOutput typedOutput25 = null;
        retrofit.client.Request request26 = new retrofit.client.Request("hi!", "hi!", headerList24, typedOutput25);
        retrofit.mime.TypedOutput typedOutput27 = null;
        retrofit.client.Request request28 = new retrofit.client.Request("hi!", "hi!", headerList24, typedOutput27);
        org.junit.Assert.assertNotNull(headerArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(headerList16);
        org.junit.Assert.assertNull(typedOutput19);
        org.junit.Assert.assertNotNull(headerList20);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertNotNull(headerList24);
    }

    @Test
    public void test0118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0118");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        java.util.List<retrofit.client.Header> headerList12 = request11.headers;
        java.lang.Object[] objArray14 = new java.lang.Object[] { true, (short) 1, request11, 0 };
        requestBuilder1.args = objArray14;
        retrofit.converter.Converter converter16 = requestBuilder1.converter;
        java.util.List<retrofit.client.Header> headerList17 = requestBuilder1.headers;
        java.util.List<retrofit.client.Header> headerList18 = requestBuilder1.headers;
        retrofit.RequestBuilder requestBuilder20 = requestBuilder1.apiUrl("");
        retrofit.client.Header[] headerArray25 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList26 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList26, headerArray25);
        retrofit.mime.TypedOutput typedOutput28 = null;
        retrofit.client.Request request29 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList26, typedOutput28);
        java.lang.String str30 = request29.url;
        java.util.List<retrofit.client.Header> headerList31 = request29.headers;
        retrofit.mime.TypedOutput typedOutput32 = request29.body;
        retrofit.mime.TypedOutput typedOutput33 = request29.body;
        java.util.List<retrofit.client.Header> headerList34 = request29.headers;
        retrofit.mime.TypedOutput typedOutput35 = null;
        retrofit.client.Request request36 = new retrofit.client.Request("hi!", "hi!", headerList34, typedOutput35);
        java.util.List<retrofit.client.Header> headerList37 = request36.getHeaders();
        retrofit.RequestBuilder requestBuilder38 = requestBuilder1.headers(headerList37);
        retrofit.client.Header[] headerArray43 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList44 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList44, headerArray43);
        retrofit.mime.TypedOutput typedOutput46 = null;
        retrofit.client.Request request47 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList44, typedOutput46);
        java.lang.String str48 = request47.url;
        java.util.List<retrofit.client.Header> headerList49 = request47.headers;
        retrofit.mime.TypedOutput typedOutput50 = request47.body;
        retrofit.mime.TypedOutput typedOutput51 = request47.body;
        java.util.List<retrofit.client.Header> headerList52 = request47.headers;
        retrofit.mime.TypedOutput typedOutput53 = null;
        retrofit.client.Request request54 = new retrofit.client.Request("hi!", "hi!", headerList52, typedOutput53);
        requestBuilder1.setheaders(headerList52);
        requestBuilder1.apiUrl = "hi!";
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request58 = requestBuilder1.build();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNull(headerList17);
        org.junit.Assert.assertNull(headerList18);
        org.junit.Assert.assertNotNull(requestBuilder20);
        org.junit.Assert.assertNotNull(headerArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(headerList31);
        org.junit.Assert.assertNull(typedOutput32);
        org.junit.Assert.assertNull(typedOutput33);
        org.junit.Assert.assertNotNull(headerList34);
        org.junit.Assert.assertNotNull(headerList37);
        org.junit.Assert.assertNotNull(requestBuilder38);
        org.junit.Assert.assertNotNull(headerArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(headerList49);
        org.junit.Assert.assertNull(typedOutput50);
        org.junit.Assert.assertNull(typedOutput51);
        org.junit.Assert.assertNotNull(headerList52);
    }

    @Test
    public void test0119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0119");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request3 = requestBuilder1.build();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(headerList2);
    }

    @Test
    public void test0120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0120");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        requestBuilder1.setapiUrl("");
        java.lang.String str4 = requestBuilder1.getapiUrl();
        requestBuilder1.setapiUrl("hi!");
        retrofit.RequestBuilder requestBuilder8 = requestBuilder1.apiUrl("");
        requestBuilder1.apiUrl = "";
        java.util.List<retrofit.client.Header> headerList11 = requestBuilder1.headers;
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(requestBuilder8);
        org.junit.Assert.assertNull(headerList11);
    }

    @Test
    public void test0121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0121");
        retrofit.client.Header[] headerArray4 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList5 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList5, headerArray4);
        retrofit.mime.TypedOutput typedOutput7 = null;
        retrofit.client.Request request8 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList5, typedOutput7);
        java.lang.String str9 = request8.url;
        java.util.List<retrofit.client.Header> headerList10 = request8.headers;
        retrofit.mime.TypedOutput typedOutput11 = request8.body;
        retrofit.mime.TypedOutput typedOutput12 = request8.body;
        java.util.List<retrofit.client.Header> headerList13 = request8.headers;
        retrofit.mime.TypedOutput typedOutput14 = null;
        retrofit.client.Request request15 = new retrofit.client.Request("hi!", "hi!", headerList13, typedOutput14);
        java.util.List<retrofit.client.Header> headerList16 = request15.getHeaders();
        java.lang.String str17 = request15.url;
        java.lang.String str18 = request15.url;
        retrofit.mime.TypedOutput typedOutput19 = request15.body;
        org.junit.Assert.assertNotNull(headerArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(headerList10);
        org.junit.Assert.assertNull(typedOutput11);
        org.junit.Assert.assertNull(typedOutput12);
        org.junit.Assert.assertNotNull(headerList13);
        org.junit.Assert.assertNotNull(headerList16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertNull(typedOutput19);
    }

    @Test
    public void test0122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0122");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        requestBuilder1.setapiUrl("hi!");
        // The following exception was thrown during execution in test generation
        try {
            retrofit.mime.TypedOutput typedOutput4 = requestBuilder1.buildBody();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0123");
        retrofit.client.Header[] headerArray6 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList7 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList7, headerArray6);
        retrofit.mime.TypedOutput typedOutput9 = null;
        retrofit.client.Request request10 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList7, typedOutput9);
        retrofit.mime.TypedOutput typedOutput11 = null;
        retrofit.client.Request request12 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList7, typedOutput11);
        retrofit.mime.TypedOutput typedOutput13 = null;
        retrofit.client.Request request14 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList7, typedOutput13);
        java.lang.String str15 = request14.getUrl();
        retrofit.mime.TypedOutput typedOutput16 = request14.getBody();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass17 = typedOutput16.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(headerArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNull(typedOutput16);
    }

    @Test
    public void test0124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0124");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        java.util.List<retrofit.client.Header> headerList12 = request11.headers;
        java.lang.Object[] objArray14 = new java.lang.Object[] { true, (short) 1, request11, 0 };
        requestBuilder1.args = objArray14;
        retrofit.converter.Converter converter16 = requestBuilder1.converter;
        java.util.List<retrofit.client.Header> headerList17 = requestBuilder1.headers;
        requestBuilder1.apiUrl = "hi!";
        retrofit.client.Header[] headerArray24 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList25 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList25, headerArray24);
        retrofit.mime.TypedOutput typedOutput27 = null;
        retrofit.client.Request request28 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList25, typedOutput27);
        java.lang.String str29 = request28.url;
        java.util.List<retrofit.client.Header> headerList30 = request28.headers;
        retrofit.mime.TypedOutput typedOutput31 = null;
        retrofit.client.Request request32 = new retrofit.client.Request("", "", headerList30, typedOutput31);
        retrofit.RequestBuilder requestBuilder33 = requestBuilder1.headers(headerList30);
        java.lang.Object[] objArray34 = requestBuilder1.getargs();
        java.lang.Class<?> wildcardClass35 = requestBuilder1.getClass();
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNull(headerList17);
        org.junit.Assert.assertNotNull(headerArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(headerList30);
        org.junit.Assert.assertNotNull(requestBuilder33);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test0125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0125");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        java.util.List<retrofit.client.Header> headerList12 = request11.headers;
        java.lang.Object[] objArray14 = new java.lang.Object[] { true, (short) 1, request11, 0 };
        requestBuilder1.args = objArray14;
        retrofit.client.Header[] headerArray22 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList23 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList23, headerArray22);
        retrofit.mime.TypedOutput typedOutput25 = null;
        retrofit.client.Request request26 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList23, typedOutput25);
        java.lang.String str27 = request26.url;
        java.util.List<retrofit.client.Header> headerList28 = request26.headers;
        retrofit.mime.TypedOutput typedOutput29 = null;
        retrofit.client.Request request30 = new retrofit.client.Request("", "", headerList28, typedOutput29);
        retrofit.mime.TypedOutput typedOutput31 = request30.body;
        java.util.List<retrofit.client.Header> headerList32 = request30.headers;
        retrofit.mime.TypedOutput typedOutput33 = null;
        retrofit.client.Request request34 = new retrofit.client.Request("hi!", "", headerList32, typedOutput33);
        requestBuilder1.headers = headerList32;
        retrofit.converter.Converter converter36 = requestBuilder1.getconverter();
        requestBuilder1.setapiUrl("");
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNotNull(headerArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(headerList28);
        org.junit.Assert.assertNull(typedOutput31);
        org.junit.Assert.assertNotNull(headerList32);
        org.junit.Assert.assertNull(converter36);
    }

    @Test
    public void test0126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0126");
        retrofit.client.Header[] headerArray8 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList9 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList9, headerArray8);
        retrofit.mime.TypedOutput typedOutput11 = null;
        retrofit.client.Request request12 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList9, typedOutput11);
        retrofit.mime.TypedOutput typedOutput13 = null;
        retrofit.client.Request request14 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList9, typedOutput13);
        retrofit.mime.TypedOutput typedOutput15 = null;
        retrofit.client.Request request16 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList9, typedOutput15);
        retrofit.mime.TypedOutput typedOutput17 = null;
        retrofit.client.Request request18 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList9, typedOutput17);
        java.util.List<retrofit.client.Header> headerList19 = request18.getHeaders();
        org.junit.Assert.assertNotNull(headerArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(headerList19);
    }

    @Test
    public void test0127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0127");
        retrofit.client.Header[] headerArray6 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList7 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList7, headerArray6);
        retrofit.mime.TypedOutput typedOutput9 = null;
        retrofit.client.Request request10 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList7, typedOutput9);
        java.lang.String str11 = request10.url;
        java.util.List<retrofit.client.Header> headerList12 = request10.headers;
        retrofit.mime.TypedOutput typedOutput13 = request10.body;
        retrofit.mime.TypedOutput typedOutput14 = request10.body;
        java.util.List<retrofit.client.Header> headerList15 = request10.headers;
        retrofit.mime.TypedOutput typedOutput16 = null;
        retrofit.client.Request request17 = new retrofit.client.Request("hi!", "hi!", headerList15, typedOutput16);
        java.util.List<retrofit.client.Header> headerList18 = request17.getHeaders();
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("hi!", "hi!", headerList18, typedOutput19);
        retrofit.mime.TypedOutput typedOutput21 = request20.getBody();
        java.util.List<retrofit.client.Header> headerList22 = request20.headers;
        retrofit.mime.TypedOutput typedOutput23 = request20.body;
        org.junit.Assert.assertNotNull(headerArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNull(typedOutput13);
        org.junit.Assert.assertNull(typedOutput14);
        org.junit.Assert.assertNotNull(headerList15);
        org.junit.Assert.assertNotNull(headerList18);
        org.junit.Assert.assertNull(typedOutput21);
        org.junit.Assert.assertNotNull(headerList22);
        org.junit.Assert.assertNull(typedOutput23);
    }

    @Test
    public void test0128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0128");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        java.util.List<retrofit.client.Header> headerList3 = requestBuilder1.headers;
        requestBuilder1.setapiUrl("");
        // The following exception was thrown during execution in test generation
        try {
            retrofit.mime.TypedOutput typedOutput6 = requestBuilder1.buildBody();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNull(headerList3);
    }

    @Test
    public void test0129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0129");
        retrofit.client.Header[] headerArray2 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList3 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList3, headerArray2);
        retrofit.mime.TypedOutput typedOutput5 = null;
        retrofit.client.Request request6 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList3, typedOutput5);
        java.lang.String str7 = request6.url;
        retrofit.mime.TypedOutput typedOutput8 = request6.body;
        java.lang.String str9 = request6.getUrl();
        org.junit.Assert.assertNotNull(headerArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNull(typedOutput8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
    }

    @Test
    public void test0130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0130");
        retrofit.client.Header[] headerArray6 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList7 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList7, headerArray6);
        retrofit.mime.TypedOutput typedOutput9 = null;
        retrofit.client.Request request10 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList7, typedOutput9);
        retrofit.mime.TypedOutput typedOutput11 = null;
        retrofit.client.Request request12 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList7, typedOutput11);
        retrofit.mime.TypedOutput typedOutput13 = null;
        retrofit.client.Request request14 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList7, typedOutput13);
        java.util.List<retrofit.client.Header> headerList15 = request14.getHeaders();
        java.lang.String str16 = request14.getMethod();
        java.lang.String str17 = request14.method;
        org.junit.Assert.assertNotNull(headerArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(headerList15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
    }

    @Test
    public void test0131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0131");
        retrofit.client.Header[] headerArray8 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList9 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList9, headerArray8);
        retrofit.mime.TypedOutput typedOutput11 = null;
        retrofit.client.Request request12 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList9, typedOutput11);
        retrofit.mime.TypedOutput typedOutput13 = null;
        retrofit.client.Request request14 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList9, typedOutput13);
        retrofit.mime.TypedOutput typedOutput15 = null;
        retrofit.client.Request request16 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList9, typedOutput15);
        retrofit.mime.TypedOutput typedOutput17 = null;
        retrofit.client.Request request18 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList9, typedOutput17);
        retrofit.mime.TypedOutput typedOutput19 = request18.getBody();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass20 = typedOutput19.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(headerArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(typedOutput19);
    }

    @Test
    public void test0132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0132");
        retrofit.client.Header[] headerArray2 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList3 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList3, headerArray2);
        retrofit.mime.TypedOutput typedOutput5 = null;
        retrofit.client.Request request6 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList3, typedOutput5);
        java.util.List<retrofit.client.Header> headerList7 = request6.headers;
        java.lang.String str8 = request6.getMethod();
        java.util.List<retrofit.client.Header> headerList9 = request6.getHeaders();
        retrofit.mime.TypedOutput typedOutput10 = request6.getBody();
        org.junit.Assert.assertNotNull(headerArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(headerList7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(headerList9);
        org.junit.Assert.assertNull(typedOutput10);
    }

    @Test
    public void test0133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0133");
        retrofit.client.Header[] headerArray4 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList5 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList5, headerArray4);
        retrofit.mime.TypedOutput typedOutput7 = null;
        retrofit.client.Request request8 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList5, typedOutput7);
        java.lang.String str9 = request8.method;
        java.lang.String str10 = request8.getMethod();
        java.util.List<retrofit.client.Header> headerList11 = request8.headers;
        retrofit.mime.TypedOutput typedOutput12 = null;
        retrofit.client.Request request13 = new retrofit.client.Request("", "", headerList11, typedOutput12);
        java.lang.Class<?> wildcardClass14 = headerList11.getClass();
        org.junit.Assert.assertNotNull(headerArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(headerList11);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0134");
        retrofit.client.Header[] headerArray8 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList9 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList9, headerArray8);
        retrofit.mime.TypedOutput typedOutput11 = null;
        retrofit.client.Request request12 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList9, typedOutput11);
        retrofit.mime.TypedOutput typedOutput13 = null;
        retrofit.client.Request request14 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList9, typedOutput13);
        retrofit.mime.TypedOutput typedOutput15 = null;
        retrofit.client.Request request16 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList9, typedOutput15);
        retrofit.mime.TypedOutput typedOutput17 = null;
        retrofit.client.Request request18 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList9, typedOutput17);
        retrofit.mime.TypedOutput typedOutput19 = request18.getBody();
        java.lang.String str20 = request18.method;
        java.lang.String str21 = request18.getUrl();
        java.lang.Class<?> wildcardClass22 = request18.getClass();
        org.junit.Assert.assertNotNull(headerArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(typedOutput19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test0135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0135");
        retrofit.client.Header[] headerArray8 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList9 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList9, headerArray8);
        retrofit.mime.TypedOutput typedOutput11 = null;
        retrofit.client.Request request12 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList9, typedOutput11);
        retrofit.mime.TypedOutput typedOutput13 = null;
        retrofit.client.Request request14 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList9, typedOutput13);
        retrofit.mime.TypedOutput typedOutput15 = null;
        retrofit.client.Request request16 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList9, typedOutput15);
        retrofit.mime.TypedOutput typedOutput17 = null;
        retrofit.client.Request request18 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList9, typedOutput17);
        retrofit.mime.TypedOutput typedOutput19 = request18.getBody();
        java.lang.String str20 = request18.method;
        java.lang.String str21 = request18.getUrl();
        java.lang.String str22 = request18.getUrl();
        java.lang.Class<?> wildcardClass23 = request18.getClass();
        org.junit.Assert.assertNotNull(headerArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(typedOutput19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0136");
        retrofit.converter.Converter converter2 = null;
        retrofit.RequestBuilder requestBuilder3 = new retrofit.RequestBuilder(converter2);
        java.util.List<retrofit.client.Header> headerList4 = requestBuilder3.headers;
        retrofit.client.Header[] headerArray9 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList10 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList10, headerArray9);
        retrofit.mime.TypedOutput typedOutput12 = null;
        retrofit.client.Request request13 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList10, typedOutput12);
        java.util.List<retrofit.client.Header> headerList14 = request13.headers;
        java.lang.Object[] objArray16 = new java.lang.Object[] { true, (short) 1, request13, 0 };
        requestBuilder3.args = objArray16;
        retrofit.client.Header[] headerArray20 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList21 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList21, headerArray20);
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList21, typedOutput23);
        java.util.List<retrofit.client.Header> headerList25 = request24.headers;
        requestBuilder3.setheaders(headerList25);
        retrofit.mime.TypedOutput typedOutput27 = null;
        retrofit.client.Request request28 = new retrofit.client.Request("hi!", "hi!", headerList25, typedOutput27);
        java.lang.String str29 = request28.getUrl();
        retrofit.mime.TypedOutput typedOutput30 = request28.getBody();
        retrofit.mime.TypedOutput typedOutput31 = request28.body;
        retrofit.mime.TypedOutput typedOutput32 = request28.body;
        java.lang.String str33 = request28.getUrl();
        java.lang.String str34 = request28.url;
        org.junit.Assert.assertNull(headerList4);
        org.junit.Assert.assertNotNull(headerArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(headerList14);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertNotNull(headerArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(headerList25);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertNull(typedOutput30);
        org.junit.Assert.assertNull(typedOutput31);
        org.junit.Assert.assertNull(typedOutput32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
    }

    @Test
    public void test0137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0137");
        retrofit.client.Header[] headerArray2 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList3 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList3, headerArray2);
        retrofit.mime.TypedOutput typedOutput5 = null;
        retrofit.client.Request request6 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList3, typedOutput5);
        java.util.List<retrofit.client.Header> headerList7 = request6.headers;
        java.util.List<retrofit.client.Header> headerList8 = request6.headers;
        java.util.List<retrofit.client.Header> headerList9 = request6.getHeaders();
        java.lang.String str10 = request6.method;
        org.junit.Assert.assertNotNull(headerArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(headerList7);
        org.junit.Assert.assertNotNull(headerList8);
        org.junit.Assert.assertNotNull(headerList9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test0138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0138");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        retrofit.client.Header[] headerArray8 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList9 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList9, headerArray8);
        retrofit.mime.TypedOutput typedOutput11 = null;
        retrofit.client.Request request12 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList9, typedOutput11);
        java.lang.String str13 = request12.url;
        java.util.List<retrofit.client.Header> headerList14 = request12.headers;
        retrofit.mime.TypedOutput typedOutput15 = null;
        retrofit.client.Request request16 = new retrofit.client.Request("", "", headerList14, typedOutput15);
        retrofit.mime.TypedOutput typedOutput17 = request16.body;
        java.util.List<retrofit.client.Header> headerList18 = request16.headers;
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("hi!", "", headerList18, typedOutput19);
        requestBuilder1.headers = headerList18;
        retrofit.client.Header[] headerArray28 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList29 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList29, headerArray28);
        retrofit.mime.TypedOutput typedOutput31 = null;
        retrofit.client.Request request32 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList29, typedOutput31);
        java.lang.String str33 = request32.url;
        java.util.List<retrofit.client.Header> headerList34 = request32.headers;
        retrofit.mime.TypedOutput typedOutput35 = null;
        retrofit.client.Request request36 = new retrofit.client.Request("", "", headerList34, typedOutput35);
        retrofit.mime.TypedOutput typedOutput37 = request36.body;
        retrofit.mime.TypedOutput typedOutput38 = request36.getBody();
        java.util.List<retrofit.client.Header> headerList39 = request36.getHeaders();
        retrofit.mime.TypedOutput typedOutput40 = null;
        retrofit.client.Request request41 = new retrofit.client.Request("", "", headerList39, typedOutput40);
        requestBuilder1.headers = headerList39;
        retrofit.RequestBuilder requestBuilder44 = requestBuilder1.apiUrl("");
        // The following exception was thrown during execution in test generation
        try {
            retrofit.mime.TypedOutput typedOutput45 = requestBuilder44.buildBody();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(headerArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(headerList14);
        org.junit.Assert.assertNull(typedOutput17);
        org.junit.Assert.assertNotNull(headerList18);
        org.junit.Assert.assertNotNull(headerArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(headerList34);
        org.junit.Assert.assertNull(typedOutput37);
        org.junit.Assert.assertNull(typedOutput38);
        org.junit.Assert.assertNotNull(headerList39);
        org.junit.Assert.assertNotNull(requestBuilder44);
    }

    @Test
    public void test0139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0139");
        retrofit.converter.Converter converter2 = null;
        retrofit.RequestBuilder requestBuilder3 = new retrofit.RequestBuilder(converter2);
        requestBuilder3.setapiUrl("");
        java.lang.String str6 = requestBuilder3.getapiUrl();
        java.util.List<retrofit.client.Header> headerList7 = requestBuilder3.getheaders();
        retrofit.client.Header[] headerArray18 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList19 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList19, headerArray18);
        retrofit.mime.TypedOutput typedOutput21 = null;
        retrofit.client.Request request22 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList19, typedOutput21);
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList19, typedOutput23);
        retrofit.mime.TypedOutput typedOutput25 = null;
        retrofit.client.Request request26 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList19, typedOutput25);
        retrofit.mime.TypedOutput typedOutput27 = null;
        retrofit.client.Request request28 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList19, typedOutput27);
        retrofit.mime.TypedOutput typedOutput29 = null;
        retrofit.client.Request request30 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList19, typedOutput29);
        requestBuilder3.headers = headerList19;
        retrofit.mime.TypedOutput typedOutput32 = null;
        retrofit.client.Request request33 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList19, typedOutput32);
        java.lang.String str34 = request33.method;
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNull(headerList7);
        org.junit.Assert.assertNotNull(headerArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
    }

    @Test
    public void test0140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0140");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.converter.Converter converter3 = requestBuilder1.getconverter();
        java.lang.Object[] objArray6 = new java.lang.Object[] { 0.0f, 100.0d };
        retrofit.RequestBuilder requestBuilder7 = requestBuilder1.args(objArray6);
        retrofit.converter.Converter converter8 = requestBuilder7.converter;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.mime.TypedOutput typedOutput9 = requestBuilder7.buildBody();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[0.0, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[0.0, 100.0]");
        org.junit.Assert.assertNotNull(requestBuilder7);
        org.junit.Assert.assertNull(converter8);
    }

    @Test
    public void test0141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0141");
        retrofit.client.Header[] headerArray2 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList3 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList3, headerArray2);
        retrofit.mime.TypedOutput typedOutput5 = null;
        retrofit.client.Request request6 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList3, typedOutput5);
        java.lang.String str7 = request6.url;
        java.util.List<retrofit.client.Header> headerList8 = request6.headers;
        retrofit.mime.TypedOutput typedOutput9 = request6.body;
        retrofit.mime.TypedOutput typedOutput10 = request6.body;
        java.util.List<retrofit.client.Header> headerList11 = request6.headers;
        retrofit.mime.TypedOutput typedOutput12 = request6.body;
        java.lang.String str13 = request6.getMethod();
        org.junit.Assert.assertNotNull(headerArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(headerList8);
        org.junit.Assert.assertNull(typedOutput9);
        org.junit.Assert.assertNull(typedOutput10);
        org.junit.Assert.assertNotNull(headerList11);
        org.junit.Assert.assertNull(typedOutput12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test0142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0142");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.lang.Object[] objArray2 = requestBuilder1.getargs();
        java.util.List<retrofit.client.Header> headerList3 = null;
        retrofit.RequestBuilder requestBuilder4 = requestBuilder1.headers(headerList3);
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request5 = requestBuilder1.build();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(objArray2);
        org.junit.Assert.assertNotNull(requestBuilder4);
    }

    @Test
    public void test0143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0143");
        retrofit.client.Header[] headerArray6 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList7 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList7, headerArray6);
        retrofit.mime.TypedOutput typedOutput9 = null;
        retrofit.client.Request request10 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList7, typedOutput9);
        java.lang.String str11 = request10.url;
        java.util.List<retrofit.client.Header> headerList12 = request10.headers;
        retrofit.mime.TypedOutput typedOutput13 = null;
        retrofit.client.Request request14 = new retrofit.client.Request("", "", headerList12, typedOutput13);
        retrofit.mime.TypedOutput typedOutput15 = request14.body;
        java.util.List<retrofit.client.Header> headerList16 = request14.headers;
        retrofit.mime.TypedOutput typedOutput17 = null;
        retrofit.client.Request request18 = new retrofit.client.Request("", "hi!", headerList16, typedOutput17);
        retrofit.mime.TypedOutput typedOutput19 = request18.getBody();
        org.junit.Assert.assertNotNull(headerArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNull(typedOutput15);
        org.junit.Assert.assertNotNull(headerList16);
        org.junit.Assert.assertNull(typedOutput19);
    }

    @Test
    public void test0144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0144");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        requestBuilder1.setapiUrl("");
        java.lang.String str4 = requestBuilder1.getapiUrl();
        java.lang.String str5 = requestBuilder1.apiUrl;
        retrofit.RequestBuilder requestBuilder7 = requestBuilder1.apiUrl("hi!");
        java.util.List<retrofit.client.Header> headerList8 = requestBuilder7.getheaders();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.mime.TypedOutput typedOutput9 = requestBuilder7.buildBody();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(requestBuilder7);
        org.junit.Assert.assertNull(headerList8);
    }

    @Test
    public void test0145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0145");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        requestBuilder1.setapiUrl("hi!");
        requestBuilder1.setapiUrl("hi!");
    }

    @Test
    public void test0146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0146");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.lang.Object[] objArray2 = requestBuilder1.getargs();
        retrofit.converter.Converter converter3 = requestBuilder1.getconverter();
        retrofit.converter.Converter converter4 = null;
        retrofit.RequestBuilder requestBuilder5 = new retrofit.RequestBuilder(converter4);
        java.util.List<retrofit.client.Header> headerList6 = requestBuilder5.headers;
        retrofit.converter.Converter converter7 = null;
        retrofit.RequestBuilder requestBuilder8 = new retrofit.RequestBuilder(converter7);
        java.util.List<retrofit.client.Header> headerList9 = requestBuilder8.headers;
        retrofit.client.Header[] headerArray14 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList15 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList15, headerArray14);
        retrofit.mime.TypedOutput typedOutput17 = null;
        retrofit.client.Request request18 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList15, typedOutput17);
        java.util.List<retrofit.client.Header> headerList19 = request18.headers;
        java.lang.Object[] objArray21 = new java.lang.Object[] { true, (short) 1, request18, 0 };
        requestBuilder8.args = objArray21;
        requestBuilder5.setargs(objArray21);
        retrofit.RequestBuilder requestBuilder24 = requestBuilder1.args(objArray21);
        retrofit.converter.Converter converter25 = requestBuilder1.converter;
        java.lang.Object[] objArray26 = null;
        requestBuilder1.setargs(objArray26);
        java.lang.String str28 = requestBuilder1.getapiUrl();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str29 = requestBuilder1.buildRelativeUrl();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(objArray2);
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(headerList6);
        org.junit.Assert.assertNull(headerList9);
        org.junit.Assert.assertNotNull(headerArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(headerList19);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertNotNull(requestBuilder24);
        org.junit.Assert.assertNull(converter25);
        org.junit.Assert.assertNull(str28);
    }

    @Test
    public void test0147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0147");
        retrofit.converter.Converter converter2 = null;
        retrofit.RequestBuilder requestBuilder3 = new retrofit.RequestBuilder(converter2);
        java.util.List<retrofit.client.Header> headerList4 = requestBuilder3.headers;
        retrofit.client.Header[] headerArray9 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList10 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList10, headerArray9);
        retrofit.mime.TypedOutput typedOutput12 = null;
        retrofit.client.Request request13 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList10, typedOutput12);
        java.util.List<retrofit.client.Header> headerList14 = request13.headers;
        java.lang.Object[] objArray16 = new java.lang.Object[] { true, (short) 1, request13, 0 };
        requestBuilder3.args = objArray16;
        retrofit.converter.Converter converter18 = requestBuilder3.converter;
        java.lang.Object[] objArray19 = requestBuilder3.args;
        java.lang.Object[] objArray20 = null;
        retrofit.RequestBuilder requestBuilder21 = requestBuilder3.args(objArray20);
        java.lang.Object[] objArray22 = requestBuilder3.getargs();
        retrofit.client.Header[] headerArray27 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList28 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList28, headerArray27);
        retrofit.mime.TypedOutput typedOutput30 = null;
        retrofit.client.Request request31 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList28, typedOutput30);
        java.lang.String str32 = request31.url;
        java.util.List<retrofit.client.Header> headerList33 = request31.headers;
        retrofit.mime.TypedOutput typedOutput34 = request31.body;
        retrofit.mime.TypedOutput typedOutput35 = request31.body;
        java.util.List<retrofit.client.Header> headerList36 = request31.headers;
        retrofit.mime.TypedOutput typedOutput37 = null;
        retrofit.client.Request request38 = new retrofit.client.Request("", "hi!", headerList36, typedOutput37);
        java.util.List<retrofit.client.Header> headerList39 = request38.getHeaders();
        retrofit.RequestBuilder requestBuilder40 = requestBuilder3.headers(headerList39);
        retrofit.mime.TypedOutput typedOutput41 = null;
        retrofit.client.Request request42 = new retrofit.client.Request("", "", headerList39, typedOutput41);
        retrofit.mime.TypedOutput typedOutput43 = request42.getBody();
        org.junit.Assert.assertNull(headerList4);
        org.junit.Assert.assertNotNull(headerArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(headerList14);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertNull(converter18);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(requestBuilder21);
        org.junit.Assert.assertNull(objArray22);
        org.junit.Assert.assertNotNull(headerArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(headerList33);
        org.junit.Assert.assertNull(typedOutput34);
        org.junit.Assert.assertNull(typedOutput35);
        org.junit.Assert.assertNotNull(headerList36);
        org.junit.Assert.assertNotNull(headerList39);
        org.junit.Assert.assertNotNull(requestBuilder40);
        org.junit.Assert.assertNull(typedOutput43);
    }

    @Test
    public void test0148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0148");
        retrofit.converter.Converter converter4 = null;
        retrofit.RequestBuilder requestBuilder5 = new retrofit.RequestBuilder(converter4);
        java.util.List<retrofit.client.Header> headerList6 = requestBuilder5.headers;
        retrofit.client.Header[] headerArray11 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList12 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList12, headerArray11);
        retrofit.mime.TypedOutput typedOutput14 = null;
        retrofit.client.Request request15 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList12, typedOutput14);
        java.util.List<retrofit.client.Header> headerList16 = request15.headers;
        java.lang.Object[] objArray18 = new java.lang.Object[] { true, (short) 1, request15, 0 };
        requestBuilder5.args = objArray18;
        retrofit.converter.Converter converter20 = requestBuilder5.converter;
        java.lang.Object[] objArray21 = requestBuilder5.args;
        java.lang.Object[] objArray22 = null;
        retrofit.RequestBuilder requestBuilder23 = requestBuilder5.args(objArray22);
        java.lang.Object[] objArray24 = requestBuilder5.getargs();
        retrofit.client.Header[] headerArray29 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList30 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList30, headerArray29);
        retrofit.mime.TypedOutput typedOutput32 = null;
        retrofit.client.Request request33 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList30, typedOutput32);
        java.lang.String str34 = request33.url;
        java.util.List<retrofit.client.Header> headerList35 = request33.headers;
        retrofit.mime.TypedOutput typedOutput36 = request33.body;
        retrofit.mime.TypedOutput typedOutput37 = request33.body;
        java.util.List<retrofit.client.Header> headerList38 = request33.headers;
        retrofit.mime.TypedOutput typedOutput39 = null;
        retrofit.client.Request request40 = new retrofit.client.Request("", "hi!", headerList38, typedOutput39);
        java.util.List<retrofit.client.Header> headerList41 = request40.getHeaders();
        retrofit.RequestBuilder requestBuilder42 = requestBuilder5.headers(headerList41);
        retrofit.mime.TypedOutput typedOutput43 = null;
        retrofit.client.Request request44 = new retrofit.client.Request("", "", headerList41, typedOutput43);
        retrofit.mime.TypedOutput typedOutput45 = null;
        retrofit.client.Request request46 = new retrofit.client.Request("hi!", "hi!", headerList41, typedOutput45);
        java.lang.String str47 = request46.getMethod();
        org.junit.Assert.assertNull(headerList6);
        org.junit.Assert.assertNotNull(headerArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(headerList16);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertNull(converter20);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertNotNull(requestBuilder23);
        org.junit.Assert.assertNull(objArray24);
        org.junit.Assert.assertNotNull(headerArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(headerList35);
        org.junit.Assert.assertNull(typedOutput36);
        org.junit.Assert.assertNull(typedOutput37);
        org.junit.Assert.assertNotNull(headerList38);
        org.junit.Assert.assertNotNull(headerList41);
        org.junit.Assert.assertNotNull(requestBuilder42);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hi!" + "'", str47, "hi!");
    }

    @Test
    public void test0149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0149");
        retrofit.converter.Converter converter4 = null;
        retrofit.RequestBuilder requestBuilder5 = new retrofit.RequestBuilder(converter4);
        java.util.List<retrofit.client.Header> headerList6 = requestBuilder5.headers;
        retrofit.client.Header[] headerArray11 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList12 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList12, headerArray11);
        retrofit.mime.TypedOutput typedOutput14 = null;
        retrofit.client.Request request15 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList12, typedOutput14);
        java.util.List<retrofit.client.Header> headerList16 = request15.headers;
        java.lang.Object[] objArray18 = new java.lang.Object[] { true, (short) 1, request15, 0 };
        requestBuilder5.args = objArray18;
        retrofit.client.Header[] headerArray26 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList27 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList27, headerArray26);
        retrofit.mime.TypedOutput typedOutput29 = null;
        retrofit.client.Request request30 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList27, typedOutput29);
        java.lang.String str31 = request30.url;
        java.util.List<retrofit.client.Header> headerList32 = request30.headers;
        retrofit.mime.TypedOutput typedOutput33 = null;
        retrofit.client.Request request34 = new retrofit.client.Request("", "", headerList32, typedOutput33);
        retrofit.mime.TypedOutput typedOutput35 = request34.body;
        java.util.List<retrofit.client.Header> headerList36 = request34.headers;
        retrofit.mime.TypedOutput typedOutput37 = null;
        retrofit.client.Request request38 = new retrofit.client.Request("hi!", "", headerList36, typedOutput37);
        requestBuilder5.headers = headerList36;
        retrofit.mime.TypedOutput typedOutput40 = null;
        retrofit.client.Request request41 = new retrofit.client.Request("", "hi!", headerList36, typedOutput40);
        retrofit.mime.TypedOutput typedOutput42 = null;
        retrofit.client.Request request43 = new retrofit.client.Request("", "hi!", headerList36, typedOutput42);
        java.lang.Class<?> wildcardClass44 = request43.getClass();
        org.junit.Assert.assertNull(headerList6);
        org.junit.Assert.assertNotNull(headerArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(headerList16);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertNotNull(headerArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(headerList32);
        org.junit.Assert.assertNull(typedOutput35);
        org.junit.Assert.assertNotNull(headerList36);
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test0150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0150");
        retrofit.client.Header[] headerArray2 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList3 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList3, headerArray2);
        retrofit.mime.TypedOutput typedOutput5 = null;
        retrofit.client.Request request6 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList3, typedOutput5);
        java.util.List<retrofit.client.Header> headerList7 = request6.headers;
        retrofit.mime.TypedOutput typedOutput8 = request6.body;
        java.lang.String str9 = request6.method;
        java.lang.String str10 = request6.url;
        retrofit.mime.TypedOutput typedOutput11 = request6.body;
        java.lang.String str12 = request6.method;
        retrofit.mime.TypedOutput typedOutput13 = request6.body;
        org.junit.Assert.assertNotNull(headerArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(headerList7);
        org.junit.Assert.assertNull(typedOutput8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(typedOutput11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(typedOutput13);
    }

    @Test
    public void test0151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0151");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        java.util.List<retrofit.client.Header> headerList12 = request11.headers;
        java.lang.Object[] objArray14 = new java.lang.Object[] { true, (short) 1, request11, 0 };
        requestBuilder1.args = objArray14;
        retrofit.client.Header[] headerArray22 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList23 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList23, headerArray22);
        retrofit.mime.TypedOutput typedOutput25 = null;
        retrofit.client.Request request26 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList23, typedOutput25);
        java.lang.String str27 = request26.url;
        java.util.List<retrofit.client.Header> headerList28 = request26.headers;
        retrofit.mime.TypedOutput typedOutput29 = null;
        retrofit.client.Request request30 = new retrofit.client.Request("", "", headerList28, typedOutput29);
        retrofit.mime.TypedOutput typedOutput31 = request30.body;
        java.util.List<retrofit.client.Header> headerList32 = request30.headers;
        retrofit.mime.TypedOutput typedOutput33 = null;
        retrofit.client.Request request34 = new retrofit.client.Request("hi!", "", headerList32, typedOutput33);
        requestBuilder1.headers = headerList32;
        requestBuilder1.setapiUrl("hi!");
        java.lang.Class<?> wildcardClass38 = requestBuilder1.getClass();
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNotNull(headerArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(headerList28);
        org.junit.Assert.assertNull(typedOutput31);
        org.junit.Assert.assertNotNull(headerList32);
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test0152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0152");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        requestBuilder1.setapiUrl("");
        java.lang.String str4 = requestBuilder1.getapiUrl();
        java.lang.String str5 = requestBuilder1.apiUrl;
        java.lang.String str6 = requestBuilder1.apiUrl;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request7 = requestBuilder1.build();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
    }

    @Test
    public void test0153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0153");
        retrofit.client.Header[] headerArray2 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList3 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList3, headerArray2);
        retrofit.mime.TypedOutput typedOutput5 = null;
        retrofit.client.Request request6 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList3, typedOutput5);
        java.lang.String str7 = request6.url;
        java.util.List<retrofit.client.Header> headerList8 = request6.headers;
        retrofit.mime.TypedOutput typedOutput9 = request6.body;
        retrofit.mime.TypedOutput typedOutput10 = request6.body;
        retrofit.mime.TypedOutput typedOutput11 = request6.getBody();
        retrofit.mime.TypedOutput typedOutput12 = request6.body;
        java.util.List<retrofit.client.Header> headerList13 = request6.getHeaders();
        java.util.List<retrofit.client.Header> headerList14 = request6.getHeaders();
        java.util.List<retrofit.client.Header> headerList15 = request6.headers;
        java.lang.Class<?> wildcardClass16 = request6.getClass();
        org.junit.Assert.assertNotNull(headerArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(headerList8);
        org.junit.Assert.assertNull(typedOutput9);
        org.junit.Assert.assertNull(typedOutput10);
        org.junit.Assert.assertNull(typedOutput11);
        org.junit.Assert.assertNull(typedOutput12);
        org.junit.Assert.assertNotNull(headerList13);
        org.junit.Assert.assertNotNull(headerList14);
        org.junit.Assert.assertNotNull(headerList15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0154");
        retrofit.client.Header[] headerArray10 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList11 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList11, headerArray10);
        retrofit.mime.TypedOutput typedOutput13 = null;
        retrofit.client.Request request14 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList11, typedOutput13);
        java.lang.String str15 = request14.url;
        java.util.List<retrofit.client.Header> headerList16 = request14.headers;
        retrofit.mime.TypedOutput typedOutput17 = null;
        retrofit.client.Request request18 = new retrofit.client.Request("", "", headerList16, typedOutput17);
        retrofit.mime.TypedOutput typedOutput19 = request18.body;
        java.util.List<retrofit.client.Header> headerList20 = request18.headers;
        retrofit.mime.TypedOutput typedOutput21 = null;
        retrofit.client.Request request22 = new retrofit.client.Request("hi!", "", headerList20, typedOutput21);
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("", "hi!", headerList20, typedOutput23);
        retrofit.mime.TypedOutput typedOutput25 = null;
        retrofit.client.Request request26 = new retrofit.client.Request("", "hi!", headerList20, typedOutput25);
        java.util.List<retrofit.client.Header> headerList27 = request26.headers;
        java.lang.Class<?> wildcardClass28 = headerList27.getClass();
        org.junit.Assert.assertNotNull(headerArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(headerList16);
        org.junit.Assert.assertNull(typedOutput19);
        org.junit.Assert.assertNotNull(headerList20);
        org.junit.Assert.assertNotNull(headerList27);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test0155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0155");
        retrofit.converter.Converter converter2 = null;
        retrofit.RequestBuilder requestBuilder3 = new retrofit.RequestBuilder(converter2);
        retrofit.client.Header[] headerArray10 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList11 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList11, headerArray10);
        retrofit.mime.TypedOutput typedOutput13 = null;
        retrofit.client.Request request14 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList11, typedOutput13);
        java.lang.String str15 = request14.url;
        java.util.List<retrofit.client.Header> headerList16 = request14.headers;
        retrofit.mime.TypedOutput typedOutput17 = null;
        retrofit.client.Request request18 = new retrofit.client.Request("", "", headerList16, typedOutput17);
        retrofit.mime.TypedOutput typedOutput19 = request18.body;
        java.util.List<retrofit.client.Header> headerList20 = request18.headers;
        retrofit.mime.TypedOutput typedOutput21 = null;
        retrofit.client.Request request22 = new retrofit.client.Request("hi!", "", headerList20, typedOutput21);
        requestBuilder3.headers = headerList20;
        retrofit.mime.TypedOutput typedOutput24 = null;
        retrofit.client.Request request25 = new retrofit.client.Request("", "hi!", headerList20, typedOutput24);
        java.lang.String str26 = request25.getUrl();
        java.lang.String str27 = request25.url;
        org.junit.Assert.assertNotNull(headerArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(headerList16);
        org.junit.Assert.assertNull(typedOutput19);
        org.junit.Assert.assertNotNull(headerList20);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
    }

    @Test
    public void test0156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0156");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        java.util.List<retrofit.client.Header> headerList12 = request11.headers;
        java.lang.Object[] objArray14 = new java.lang.Object[] { true, (short) 1, request11, 0 };
        requestBuilder1.args = objArray14;
        retrofit.converter.Converter converter16 = requestBuilder1.converter;
        java.util.List<retrofit.client.Header> headerList17 = requestBuilder1.headers;
        java.util.List<retrofit.client.Header> headerList18 = requestBuilder1.headers;
        retrofit.RequestBuilder requestBuilder20 = requestBuilder1.apiUrl("");
        retrofit.client.Header[] headerArray25 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList26 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList26, headerArray25);
        retrofit.mime.TypedOutput typedOutput28 = null;
        retrofit.client.Request request29 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList26, typedOutput28);
        java.lang.String str30 = request29.url;
        java.util.List<retrofit.client.Header> headerList31 = request29.headers;
        retrofit.mime.TypedOutput typedOutput32 = request29.body;
        retrofit.mime.TypedOutput typedOutput33 = request29.body;
        java.util.List<retrofit.client.Header> headerList34 = request29.headers;
        retrofit.mime.TypedOutput typedOutput35 = null;
        retrofit.client.Request request36 = new retrofit.client.Request("hi!", "hi!", headerList34, typedOutput35);
        java.util.List<retrofit.client.Header> headerList37 = request36.getHeaders();
        retrofit.RequestBuilder requestBuilder38 = requestBuilder1.headers(headerList37);
        java.lang.String str39 = requestBuilder1.getapiUrl();
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNull(headerList17);
        org.junit.Assert.assertNull(headerList18);
        org.junit.Assert.assertNotNull(requestBuilder20);
        org.junit.Assert.assertNotNull(headerArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(headerList31);
        org.junit.Assert.assertNull(typedOutput32);
        org.junit.Assert.assertNull(typedOutput33);
        org.junit.Assert.assertNotNull(headerList34);
        org.junit.Assert.assertNotNull(headerList37);
        org.junit.Assert.assertNotNull(requestBuilder38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
    }

    @Test
    public void test0157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0157");
        retrofit.client.Header[] headerArray4 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList5 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList5, headerArray4);
        retrofit.mime.TypedOutput typedOutput7 = null;
        retrofit.client.Request request8 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList5, typedOutput7);
        retrofit.mime.TypedOutput typedOutput9 = null;
        retrofit.client.Request request10 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList5, typedOutput9);
        java.lang.String str11 = request10.method;
        java.util.List<retrofit.client.Header> headerList12 = request10.headers;
        org.junit.Assert.assertNotNull(headerArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(headerList12);
    }

    @Test
    public void test0158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0158");
        retrofit.converter.Converter converter2 = null;
        retrofit.RequestBuilder requestBuilder3 = new retrofit.RequestBuilder(converter2);
        requestBuilder3.setapiUrl("");
        java.lang.String str6 = requestBuilder3.getapiUrl();
        java.util.List<retrofit.client.Header> headerList7 = requestBuilder3.getheaders();
        retrofit.client.Header[] headerArray18 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList19 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList19, headerArray18);
        retrofit.mime.TypedOutput typedOutput21 = null;
        retrofit.client.Request request22 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList19, typedOutput21);
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList19, typedOutput23);
        retrofit.mime.TypedOutput typedOutput25 = null;
        retrofit.client.Request request26 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList19, typedOutput25);
        retrofit.mime.TypedOutput typedOutput27 = null;
        retrofit.client.Request request28 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList19, typedOutput27);
        retrofit.mime.TypedOutput typedOutput29 = null;
        retrofit.client.Request request30 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList19, typedOutput29);
        requestBuilder3.headers = headerList19;
        retrofit.mime.TypedOutput typedOutput32 = null;
        retrofit.client.Request request33 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList19, typedOutput32);
        java.lang.Class<?> wildcardClass34 = request33.getClass();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNull(headerList7);
        org.junit.Assert.assertNotNull(headerArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test0159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0159");
        retrofit.client.Header[] headerArray4 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList5 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList5, headerArray4);
        retrofit.mime.TypedOutput typedOutput7 = null;
        retrofit.client.Request request8 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList5, typedOutput7);
        java.lang.String str9 = request8.url;
        java.util.List<retrofit.client.Header> headerList10 = request8.headers;
        retrofit.mime.TypedOutput typedOutput11 = null;
        retrofit.client.Request request12 = new retrofit.client.Request("", "", headerList10, typedOutput11);
        java.lang.String str13 = request12.method;
        java.lang.String str14 = request12.url;
        java.lang.String str15 = request12.getUrl();
        java.lang.String str16 = request12.url;
        org.junit.Assert.assertNotNull(headerArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(headerList10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test0160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0160");
        retrofit.client.Header[] headerArray4 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList5 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList5, headerArray4);
        retrofit.mime.TypedOutput typedOutput7 = null;
        retrofit.client.Request request8 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList5, typedOutput7);
        java.lang.String str9 = request8.url;
        java.util.List<retrofit.client.Header> headerList10 = request8.headers;
        retrofit.mime.TypedOutput typedOutput11 = request8.body;
        retrofit.mime.TypedOutput typedOutput12 = request8.body;
        java.util.List<retrofit.client.Header> headerList13 = request8.headers;
        retrofit.mime.TypedOutput typedOutput14 = null;
        retrofit.client.Request request15 = new retrofit.client.Request("", "hi!", headerList13, typedOutput14);
        java.lang.String str16 = request15.method;
        java.lang.String str17 = request15.getMethod();
        java.lang.String str18 = request15.getMethod();
        org.junit.Assert.assertNotNull(headerArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(headerList10);
        org.junit.Assert.assertNull(typedOutput11);
        org.junit.Assert.assertNull(typedOutput12);
        org.junit.Assert.assertNotNull(headerList13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
    }

    @Test
    public void test0161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0161");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        requestBuilder1.setapiUrl("hi!");
        java.lang.Object[] objArray4 = requestBuilder1.args;
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        java.lang.String str12 = request11.getUrl();
        java.util.List<retrofit.client.Header> headerList13 = request11.getHeaders();
        retrofit.RequestBuilder requestBuilder14 = requestBuilder1.headers(headerList13);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str15 = requestBuilder14.buildRelativeUrl();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(objArray4);
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(headerList13);
        org.junit.Assert.assertNotNull(requestBuilder14);
    }

    @Test
    public void test0162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0162");
        retrofit.client.Header[] headerArray4 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList5 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList5, headerArray4);
        retrofit.mime.TypedOutput typedOutput7 = null;
        retrofit.client.Request request8 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList5, typedOutput7);
        java.lang.String str9 = request8.url;
        java.util.List<retrofit.client.Header> headerList10 = request8.headers;
        retrofit.mime.TypedOutput typedOutput11 = request8.body;
        retrofit.mime.TypedOutput typedOutput12 = request8.body;
        java.util.List<retrofit.client.Header> headerList13 = request8.headers;
        retrofit.mime.TypedOutput typedOutput14 = null;
        retrofit.client.Request request15 = new retrofit.client.Request("", "hi!", headerList13, typedOutput14);
        retrofit.mime.TypedOutput typedOutput16 = request15.getBody();
        java.util.List<retrofit.client.Header> headerList17 = request15.getHeaders();
        org.junit.Assert.assertNotNull(headerArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(headerList10);
        org.junit.Assert.assertNull(typedOutput11);
        org.junit.Assert.assertNull(typedOutput12);
        org.junit.Assert.assertNotNull(headerList13);
        org.junit.Assert.assertNull(typedOutput16);
        org.junit.Assert.assertNotNull(headerList17);
    }

    @Test
    public void test0163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0163");
        retrofit.client.Header[] headerArray4 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList5 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList5, headerArray4);
        retrofit.mime.TypedOutput typedOutput7 = null;
        retrofit.client.Request request8 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList5, typedOutput7);
        retrofit.mime.TypedOutput typedOutput9 = null;
        retrofit.client.Request request10 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList5, typedOutput9);
        java.lang.String str11 = request10.getUrl();
        java.lang.String str12 = request10.method;
        java.util.List<retrofit.client.Header> headerList13 = request10.headers;
        java.util.List<retrofit.client.Header> headerList14 = request10.getHeaders();
        org.junit.Assert.assertNotNull(headerArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(headerList13);
        org.junit.Assert.assertNotNull(headerList14);
    }

    @Test
    public void test0164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0164");
        retrofit.client.Header[] headerArray8 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList9 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList9, headerArray8);
        retrofit.mime.TypedOutput typedOutput11 = null;
        retrofit.client.Request request12 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList9, typedOutput11);
        java.lang.String str13 = request12.url;
        java.util.List<retrofit.client.Header> headerList14 = request12.headers;
        retrofit.mime.TypedOutput typedOutput15 = request12.body;
        retrofit.mime.TypedOutput typedOutput16 = request12.body;
        java.util.List<retrofit.client.Header> headerList17 = request12.headers;
        retrofit.mime.TypedOutput typedOutput18 = null;
        retrofit.client.Request request19 = new retrofit.client.Request("hi!", "hi!", headerList17, typedOutput18);
        java.lang.String str20 = request19.url;
        java.lang.String str21 = request19.getMethod();
        retrofit.mime.TypedOutput typedOutput22 = request19.body;
        java.util.List<retrofit.client.Header> headerList23 = request19.headers;
        retrofit.mime.TypedOutput typedOutput24 = null;
        retrofit.client.Request request25 = new retrofit.client.Request("", "", headerList23, typedOutput24);
        retrofit.mime.TypedOutput typedOutput26 = null;
        retrofit.client.Request request27 = new retrofit.client.Request("", "", headerList23, typedOutput26);
        java.util.List<retrofit.client.Header> headerList28 = request27.getHeaders();
        org.junit.Assert.assertNotNull(headerArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(headerList14);
        org.junit.Assert.assertNull(typedOutput15);
        org.junit.Assert.assertNull(typedOutput16);
        org.junit.Assert.assertNotNull(headerList17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertNull(typedOutput22);
        org.junit.Assert.assertNotNull(headerList23);
        org.junit.Assert.assertNotNull(headerList28);
    }

    @Test
    public void test0165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0165");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        java.util.List<retrofit.client.Header> headerList12 = request11.headers;
        java.lang.Object[] objArray14 = new java.lang.Object[] { true, (short) 1, request11, 0 };
        requestBuilder1.args = objArray14;
        retrofit.client.Header[] headerArray22 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList23 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList23, headerArray22);
        retrofit.mime.TypedOutput typedOutput25 = null;
        retrofit.client.Request request26 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList23, typedOutput25);
        java.lang.String str27 = request26.url;
        java.util.List<retrofit.client.Header> headerList28 = request26.headers;
        retrofit.mime.TypedOutput typedOutput29 = null;
        retrofit.client.Request request30 = new retrofit.client.Request("", "", headerList28, typedOutput29);
        retrofit.mime.TypedOutput typedOutput31 = request30.body;
        java.util.List<retrofit.client.Header> headerList32 = request30.headers;
        retrofit.mime.TypedOutput typedOutput33 = null;
        retrofit.client.Request request34 = new retrofit.client.Request("hi!", "", headerList32, typedOutput33);
        requestBuilder1.headers = headerList32;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request36 = requestBuilder1.build();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNotNull(headerArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(headerList28);
        org.junit.Assert.assertNull(typedOutput31);
        org.junit.Assert.assertNotNull(headerList32);
    }

    @Test
    public void test0166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0166");
        retrofit.converter.Converter converter2 = null;
        retrofit.RequestBuilder requestBuilder3 = new retrofit.RequestBuilder(converter2);
        java.util.List<retrofit.client.Header> headerList4 = requestBuilder3.headers;
        retrofit.client.Header[] headerArray9 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList10 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList10, headerArray9);
        retrofit.mime.TypedOutput typedOutput12 = null;
        retrofit.client.Request request13 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList10, typedOutput12);
        java.util.List<retrofit.client.Header> headerList14 = request13.headers;
        java.lang.Object[] objArray16 = new java.lang.Object[] { true, (short) 1, request13, 0 };
        requestBuilder3.args = objArray16;
        retrofit.client.Header[] headerArray20 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList21 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList21, headerArray20);
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList21, typedOutput23);
        java.util.List<retrofit.client.Header> headerList25 = request24.headers;
        requestBuilder3.setheaders(headerList25);
        retrofit.mime.TypedOutput typedOutput27 = null;
        retrofit.client.Request request28 = new retrofit.client.Request("hi!", "hi!", headerList25, typedOutput27);
        java.util.List<retrofit.client.Header> headerList29 = request28.headers;
        java.util.List<retrofit.client.Header> headerList30 = request28.headers;
        retrofit.mime.TypedOutput typedOutput31 = request28.getBody();
        retrofit.mime.TypedOutput typedOutput32 = request28.body;
        org.junit.Assert.assertNull(headerList4);
        org.junit.Assert.assertNotNull(headerArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(headerList14);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertNotNull(headerArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(headerList25);
        org.junit.Assert.assertNotNull(headerList29);
        org.junit.Assert.assertNotNull(headerList30);
        org.junit.Assert.assertNull(typedOutput31);
        org.junit.Assert.assertNull(typedOutput32);
    }

    @Test
    public void test0167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0167");
        retrofit.client.Header[] headerArray4 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList5 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList5, headerArray4);
        retrofit.mime.TypedOutput typedOutput7 = null;
        retrofit.client.Request request8 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList5, typedOutput7);
        retrofit.mime.TypedOutput typedOutput9 = null;
        retrofit.client.Request request10 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList5, typedOutput9);
        retrofit.mime.TypedOutput typedOutput11 = request10.body;
        java.lang.String str12 = request10.getUrl();
        org.junit.Assert.assertNotNull(headerArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(typedOutput11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
    }

    @Test
    public void test0168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0168");
        retrofit.converter.Converter converter4 = null;
        retrofit.RequestBuilder requestBuilder5 = new retrofit.RequestBuilder(converter4);
        java.util.List<retrofit.client.Header> headerList6 = requestBuilder5.headers;
        retrofit.client.Header[] headerArray11 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList12 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList12, headerArray11);
        retrofit.mime.TypedOutput typedOutput14 = null;
        retrofit.client.Request request15 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList12, typedOutput14);
        java.util.List<retrofit.client.Header> headerList16 = request15.headers;
        java.lang.Object[] objArray18 = new java.lang.Object[] { true, (short) 1, request15, 0 };
        requestBuilder5.args = objArray18;
        retrofit.converter.Converter converter20 = requestBuilder5.converter;
        java.util.List<retrofit.client.Header> headerList21 = requestBuilder5.headers;
        java.util.List<retrofit.client.Header> headerList22 = requestBuilder5.headers;
        retrofit.RequestBuilder requestBuilder24 = requestBuilder5.apiUrl("");
        retrofit.client.Header[] headerArray29 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList30 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList30, headerArray29);
        retrofit.mime.TypedOutput typedOutput32 = null;
        retrofit.client.Request request33 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList30, typedOutput32);
        java.lang.String str34 = request33.url;
        java.util.List<retrofit.client.Header> headerList35 = request33.headers;
        retrofit.mime.TypedOutput typedOutput36 = request33.body;
        retrofit.mime.TypedOutput typedOutput37 = request33.body;
        java.util.List<retrofit.client.Header> headerList38 = request33.headers;
        retrofit.mime.TypedOutput typedOutput39 = null;
        retrofit.client.Request request40 = new retrofit.client.Request("hi!", "hi!", headerList38, typedOutput39);
        java.util.List<retrofit.client.Header> headerList41 = request40.getHeaders();
        retrofit.RequestBuilder requestBuilder42 = requestBuilder5.headers(headerList41);
        retrofit.mime.TypedOutput typedOutput43 = null;
        retrofit.client.Request request44 = new retrofit.client.Request("", "hi!", headerList41, typedOutput43);
        retrofit.mime.TypedOutput typedOutput45 = null;
        retrofit.client.Request request46 = new retrofit.client.Request("", "hi!", headerList41, typedOutput45);
        java.lang.Class<?> wildcardClass47 = request46.getClass();
        org.junit.Assert.assertNull(headerList6);
        org.junit.Assert.assertNotNull(headerArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(headerList16);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertNull(converter20);
        org.junit.Assert.assertNull(headerList21);
        org.junit.Assert.assertNull(headerList22);
        org.junit.Assert.assertNotNull(requestBuilder24);
        org.junit.Assert.assertNotNull(headerArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(headerList35);
        org.junit.Assert.assertNull(typedOutput36);
        org.junit.Assert.assertNull(typedOutput37);
        org.junit.Assert.assertNotNull(headerList38);
        org.junit.Assert.assertNotNull(headerList41);
        org.junit.Assert.assertNotNull(requestBuilder42);
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test0169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0169");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        retrofit.client.Header[] headerArray8 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList9 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList9, headerArray8);
        retrofit.mime.TypedOutput typedOutput11 = null;
        retrofit.client.Request request12 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList9, typedOutput11);
        java.lang.String str13 = request12.url;
        java.util.List<retrofit.client.Header> headerList14 = request12.headers;
        retrofit.mime.TypedOutput typedOutput15 = null;
        retrofit.client.Request request16 = new retrofit.client.Request("", "", headerList14, typedOutput15);
        retrofit.mime.TypedOutput typedOutput17 = request16.body;
        java.util.List<retrofit.client.Header> headerList18 = request16.headers;
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("hi!", "", headerList18, typedOutput19);
        requestBuilder1.headers = headerList18;
        retrofit.client.Header[] headerArray28 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList29 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList29, headerArray28);
        retrofit.mime.TypedOutput typedOutput31 = null;
        retrofit.client.Request request32 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList29, typedOutput31);
        java.lang.String str33 = request32.url;
        java.util.List<retrofit.client.Header> headerList34 = request32.headers;
        retrofit.mime.TypedOutput typedOutput35 = null;
        retrofit.client.Request request36 = new retrofit.client.Request("", "", headerList34, typedOutput35);
        retrofit.mime.TypedOutput typedOutput37 = request36.body;
        retrofit.mime.TypedOutput typedOutput38 = request36.getBody();
        java.util.List<retrofit.client.Header> headerList39 = request36.getHeaders();
        retrofit.mime.TypedOutput typedOutput40 = null;
        retrofit.client.Request request41 = new retrofit.client.Request("", "", headerList39, typedOutput40);
        requestBuilder1.headers = headerList39;
        java.util.List<retrofit.client.Header> headerList43 = requestBuilder1.getheaders();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str44 = requestBuilder1.buildRelativeUrl();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(headerArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(headerList14);
        org.junit.Assert.assertNull(typedOutput17);
        org.junit.Assert.assertNotNull(headerList18);
        org.junit.Assert.assertNotNull(headerArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(headerList34);
        org.junit.Assert.assertNull(typedOutput37);
        org.junit.Assert.assertNull(typedOutput38);
        org.junit.Assert.assertNotNull(headerList39);
        org.junit.Assert.assertNotNull(headerList43);
    }

    @Test
    public void test0170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0170");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        retrofit.client.Header[] headerArray8 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList9 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList9, headerArray8);
        retrofit.mime.TypedOutput typedOutput11 = null;
        retrofit.client.Request request12 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList9, typedOutput11);
        java.lang.String str13 = request12.url;
        java.util.List<retrofit.client.Header> headerList14 = request12.headers;
        retrofit.mime.TypedOutput typedOutput15 = null;
        retrofit.client.Request request16 = new retrofit.client.Request("", "", headerList14, typedOutput15);
        retrofit.mime.TypedOutput typedOutput17 = request16.body;
        java.util.List<retrofit.client.Header> headerList18 = request16.headers;
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("hi!", "", headerList18, typedOutput19);
        requestBuilder1.headers = headerList18;
        retrofit.client.Header[] headerArray28 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList29 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList29, headerArray28);
        retrofit.mime.TypedOutput typedOutput31 = null;
        retrofit.client.Request request32 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList29, typedOutput31);
        java.lang.String str33 = request32.url;
        java.util.List<retrofit.client.Header> headerList34 = request32.headers;
        retrofit.mime.TypedOutput typedOutput35 = null;
        retrofit.client.Request request36 = new retrofit.client.Request("", "", headerList34, typedOutput35);
        retrofit.mime.TypedOutput typedOutput37 = request36.body;
        retrofit.mime.TypedOutput typedOutput38 = request36.getBody();
        java.util.List<retrofit.client.Header> headerList39 = request36.getHeaders();
        retrofit.mime.TypedOutput typedOutput40 = null;
        retrofit.client.Request request41 = new retrofit.client.Request("", "", headerList39, typedOutput40);
        requestBuilder1.headers = headerList39;
        java.lang.Object[] objArray43 = requestBuilder1.getargs();
        requestBuilder1.setapiUrl("");
        org.junit.Assert.assertNotNull(headerArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(headerList14);
        org.junit.Assert.assertNull(typedOutput17);
        org.junit.Assert.assertNotNull(headerList18);
        org.junit.Assert.assertNotNull(headerArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(headerList34);
        org.junit.Assert.assertNull(typedOutput37);
        org.junit.Assert.assertNull(typedOutput38);
        org.junit.Assert.assertNotNull(headerList39);
        org.junit.Assert.assertNull(objArray43);
    }

    @Test
    public void test0171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0171");
        retrofit.client.Header[] headerArray8 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList9 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList9, headerArray8);
        retrofit.mime.TypedOutput typedOutput11 = null;
        retrofit.client.Request request12 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList9, typedOutput11);
        java.lang.String str13 = request12.url;
        java.util.List<retrofit.client.Header> headerList14 = request12.headers;
        retrofit.mime.TypedOutput typedOutput15 = request12.body;
        retrofit.mime.TypedOutput typedOutput16 = request12.body;
        java.util.List<retrofit.client.Header> headerList17 = request12.headers;
        retrofit.mime.TypedOutput typedOutput18 = null;
        retrofit.client.Request request19 = new retrofit.client.Request("hi!", "hi!", headerList17, typedOutput18);
        retrofit.mime.TypedOutput typedOutput20 = request19.body;
        java.util.List<retrofit.client.Header> headerList21 = request19.getHeaders();
        retrofit.mime.TypedOutput typedOutput22 = null;
        retrofit.client.Request request23 = new retrofit.client.Request("", "hi!", headerList21, typedOutput22);
        java.util.List<retrofit.client.Header> headerList24 = request23.headers;
        java.lang.String str25 = request23.getUrl();
        java.util.List<retrofit.client.Header> headerList26 = request23.headers;
        retrofit.mime.TypedOutput typedOutput27 = null;
        retrofit.client.Request request28 = new retrofit.client.Request("hi!", "hi!", headerList26, typedOutput27);
        java.lang.String str29 = request28.url;
        org.junit.Assert.assertNotNull(headerArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(headerList14);
        org.junit.Assert.assertNull(typedOutput15);
        org.junit.Assert.assertNull(typedOutput16);
        org.junit.Assert.assertNotNull(headerList17);
        org.junit.Assert.assertNull(typedOutput20);
        org.junit.Assert.assertNotNull(headerList21);
        org.junit.Assert.assertNotNull(headerList24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertNotNull(headerList26);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
    }

    @Test
    public void test0172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0172");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        java.util.List<retrofit.client.Header> headerList12 = request11.headers;
        java.lang.Object[] objArray14 = new java.lang.Object[] { true, (short) 1, request11, 0 };
        requestBuilder1.args = objArray14;
        retrofit.converter.Converter converter16 = requestBuilder1.converter;
        java.util.List<retrofit.client.Header> headerList17 = requestBuilder1.headers;
        java.lang.String str18 = requestBuilder1.apiUrl;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request19 = requestBuilder1.build();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNull(headerList17);
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test0173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0173");
        retrofit.client.Header[] headerArray6 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList7 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList7, headerArray6);
        retrofit.mime.TypedOutput typedOutput9 = null;
        retrofit.client.Request request10 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList7, typedOutput9);
        java.lang.String str11 = request10.url;
        retrofit.mime.TypedOutput typedOutput12 = request10.getBody();
        java.util.List<retrofit.client.Header> headerList13 = request10.getHeaders();
        retrofit.mime.TypedOutput typedOutput14 = null;
        retrofit.client.Request request15 = new retrofit.client.Request("", "", headerList13, typedOutput14);
        retrofit.mime.TypedOutput typedOutput16 = null;
        retrofit.client.Request request17 = new retrofit.client.Request("", "hi!", headerList13, typedOutput16);
        org.junit.Assert.assertNotNull(headerArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(typedOutput12);
        org.junit.Assert.assertNotNull(headerList13);
    }

    @Test
    public void test0174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0174");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        java.util.List<retrofit.client.Header> headerList12 = request11.headers;
        java.lang.Object[] objArray14 = new java.lang.Object[] { true, (short) 1, request11, 0 };
        requestBuilder1.args = objArray14;
        retrofit.converter.Converter converter16 = requestBuilder1.converter;
        java.util.List<retrofit.client.Header> headerList17 = requestBuilder1.headers;
        requestBuilder1.apiUrl = "hi!";
        retrofit.client.Header[] headerArray24 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList25 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList25, headerArray24);
        retrofit.mime.TypedOutput typedOutput27 = null;
        retrofit.client.Request request28 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList25, typedOutput27);
        java.lang.String str29 = request28.url;
        java.util.List<retrofit.client.Header> headerList30 = request28.headers;
        retrofit.mime.TypedOutput typedOutput31 = null;
        retrofit.client.Request request32 = new retrofit.client.Request("", "", headerList30, typedOutput31);
        retrofit.RequestBuilder requestBuilder33 = requestBuilder1.headers(headerList30);
        java.lang.Object[] objArray34 = requestBuilder1.getargs();
        java.lang.Object[] objArray35 = requestBuilder1.getargs();
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNull(headerList17);
        org.junit.Assert.assertNotNull(headerArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(headerList30);
        org.junit.Assert.assertNotNull(requestBuilder33);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertNotNull(objArray35);
    }

    @Test
    public void test0175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0175");
        retrofit.converter.Converter converter2 = null;
        retrofit.RequestBuilder requestBuilder3 = new retrofit.RequestBuilder(converter2);
        retrofit.client.Header[] headerArray10 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList11 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList11, headerArray10);
        retrofit.mime.TypedOutput typedOutput13 = null;
        retrofit.client.Request request14 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList11, typedOutput13);
        java.lang.String str15 = request14.url;
        java.util.List<retrofit.client.Header> headerList16 = request14.headers;
        retrofit.mime.TypedOutput typedOutput17 = null;
        retrofit.client.Request request18 = new retrofit.client.Request("", "", headerList16, typedOutput17);
        retrofit.mime.TypedOutput typedOutput19 = request18.body;
        java.util.List<retrofit.client.Header> headerList20 = request18.headers;
        retrofit.mime.TypedOutput typedOutput21 = null;
        retrofit.client.Request request22 = new retrofit.client.Request("hi!", "", headerList20, typedOutput21);
        requestBuilder3.headers = headerList20;
        retrofit.mime.TypedOutput typedOutput24 = null;
        retrofit.client.Request request25 = new retrofit.client.Request("", "", headerList20, typedOutput24);
        java.lang.Class<?> wildcardClass26 = headerList20.getClass();
        org.junit.Assert.assertNotNull(headerArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(headerList16);
        org.junit.Assert.assertNull(typedOutput19);
        org.junit.Assert.assertNotNull(headerList20);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test0176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0176");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        java.util.List<retrofit.client.Header> headerList12 = request11.headers;
        java.lang.Object[] objArray14 = new java.lang.Object[] { true, (short) 1, request11, 0 };
        requestBuilder1.args = objArray14;
        retrofit.converter.Converter converter16 = requestBuilder1.converter;
        java.util.List<retrofit.client.Header> headerList17 = requestBuilder1.headers;
        requestBuilder1.apiUrl = "hi!";
        retrofit.client.Header[] headerArray24 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList25 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList25, headerArray24);
        retrofit.mime.TypedOutput typedOutput27 = null;
        retrofit.client.Request request28 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList25, typedOutput27);
        java.lang.String str29 = request28.url;
        java.util.List<retrofit.client.Header> headerList30 = request28.headers;
        retrofit.mime.TypedOutput typedOutput31 = null;
        retrofit.client.Request request32 = new retrofit.client.Request("", "", headerList30, typedOutput31);
        retrofit.RequestBuilder requestBuilder33 = requestBuilder1.headers(headerList30);
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request34 = requestBuilder33.build();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNull(headerList17);
        org.junit.Assert.assertNotNull(headerArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(headerList30);
        org.junit.Assert.assertNotNull(requestBuilder33);
    }

    @Test
    public void test0177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0177");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        java.util.List<retrofit.client.Header> headerList12 = request11.headers;
        java.lang.Object[] objArray14 = new java.lang.Object[] { true, (short) 1, request11, 0 };
        requestBuilder1.args = objArray14;
        retrofit.converter.Converter converter16 = requestBuilder1.converter;
        java.lang.Object[] objArray17 = requestBuilder1.args;
        retrofit.client.Header[] headerArray20 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList21 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList21, headerArray20);
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList21, typedOutput23);
        java.lang.String str25 = request24.url;
        java.util.List<retrofit.client.Header> headerList26 = request24.headers;
        retrofit.mime.TypedOutput typedOutput27 = request24.body;
        retrofit.mime.TypedOutput typedOutput28 = request24.body;
        java.util.List<retrofit.client.Header> headerList29 = request24.headers;
        requestBuilder1.setheaders(headerList29);
        requestBuilder1.setapiUrl("hi!");
        retrofit.converter.Converter converter33 = null;
        retrofit.RequestBuilder requestBuilder34 = new retrofit.RequestBuilder(converter33);
        java.lang.Object[] objArray35 = requestBuilder34.getargs();
        retrofit.converter.Converter converter36 = requestBuilder34.getconverter();
        retrofit.client.Header[] headerArray43 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList44 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList44, headerArray43);
        retrofit.mime.TypedOutput typedOutput46 = null;
        retrofit.client.Request request47 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList44, typedOutput46);
        retrofit.mime.TypedOutput typedOutput48 = null;
        retrofit.client.Request request49 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList44, typedOutput48);
        retrofit.mime.TypedOutput typedOutput50 = null;
        retrofit.client.Request request51 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList44, typedOutput50);
        java.util.List<retrofit.client.Header> headerList52 = request51.getHeaders();
        requestBuilder34.setheaders(headerList52);
        retrofit.RequestBuilder requestBuilder54 = requestBuilder1.headers(headerList52);
        retrofit.RequestBuilder requestBuilder56 = requestBuilder1.apiUrl("");
        retrofit.client.Header[] headerArray63 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList64 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList64, headerArray63);
        retrofit.mime.TypedOutput typedOutput66 = null;
        retrofit.client.Request request67 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList64, typedOutput66);
        retrofit.mime.TypedOutput typedOutput68 = null;
        retrofit.client.Request request69 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList64, typedOutput68);
        retrofit.mime.TypedOutput typedOutput70 = null;
        retrofit.client.Request request71 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList64, typedOutput70);
        requestBuilder1.setheaders((java.util.List<retrofit.client.Header>) headerList64);
        retrofit.converter.Converter converter73 = null;
        retrofit.RequestBuilder requestBuilder74 = new retrofit.RequestBuilder(converter73);
        java.lang.Object[] objArray75 = requestBuilder74.getargs();
        retrofit.converter.Converter converter76 = requestBuilder74.getconverter();
        retrofit.converter.Converter converter77 = null;
        retrofit.RequestBuilder requestBuilder78 = new retrofit.RequestBuilder(converter77);
        java.util.List<retrofit.client.Header> headerList79 = requestBuilder78.headers;
        retrofit.converter.Converter converter80 = null;
        retrofit.RequestBuilder requestBuilder81 = new retrofit.RequestBuilder(converter80);
        java.util.List<retrofit.client.Header> headerList82 = requestBuilder81.headers;
        retrofit.client.Header[] headerArray87 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList88 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean89 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList88, headerArray87);
        retrofit.mime.TypedOutput typedOutput90 = null;
        retrofit.client.Request request91 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList88, typedOutput90);
        java.util.List<retrofit.client.Header> headerList92 = request91.headers;
        java.lang.Object[] objArray94 = new java.lang.Object[] { true, (short) 1, request91, 0 };
        requestBuilder81.args = objArray94;
        requestBuilder78.setargs(objArray94);
        retrofit.RequestBuilder requestBuilder97 = requestBuilder74.args(objArray94);
        java.lang.Object[] objArray98 = requestBuilder74.args;
        requestBuilder1.args = objArray98;
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertNotNull(headerArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(headerList26);
        org.junit.Assert.assertNull(typedOutput27);
        org.junit.Assert.assertNull(typedOutput28);
        org.junit.Assert.assertNotNull(headerList29);
        org.junit.Assert.assertNull(objArray35);
        org.junit.Assert.assertNull(converter36);
        org.junit.Assert.assertNotNull(headerArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(headerList52);
        org.junit.Assert.assertNotNull(requestBuilder54);
        org.junit.Assert.assertNotNull(requestBuilder56);
        org.junit.Assert.assertNotNull(headerArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(objArray75);
        org.junit.Assert.assertNull(converter76);
        org.junit.Assert.assertNull(headerList79);
        org.junit.Assert.assertNull(headerList82);
        org.junit.Assert.assertNotNull(headerArray87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(headerList92);
        org.junit.Assert.assertNotNull(objArray94);
        org.junit.Assert.assertNotNull(requestBuilder97);
        org.junit.Assert.assertNotNull(objArray98);
    }

    @Test
    public void test0178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0178");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        java.util.List<retrofit.client.Header> headerList12 = request11.headers;
        java.lang.Object[] objArray14 = new java.lang.Object[] { true, (short) 1, request11, 0 };
        requestBuilder1.args = objArray14;
        retrofit.converter.Converter converter16 = requestBuilder1.converter;
        java.util.List<retrofit.client.Header> headerList17 = requestBuilder1.headers;
        requestBuilder1.apiUrl = "hi!";
        retrofit.client.Header[] headerArray24 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList25 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList25, headerArray24);
        retrofit.mime.TypedOutput typedOutput27 = null;
        retrofit.client.Request request28 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList25, typedOutput27);
        java.lang.String str29 = request28.url;
        java.util.List<retrofit.client.Header> headerList30 = request28.headers;
        retrofit.mime.TypedOutput typedOutput31 = null;
        retrofit.client.Request request32 = new retrofit.client.Request("", "", headerList30, typedOutput31);
        retrofit.RequestBuilder requestBuilder33 = requestBuilder1.headers(headerList30);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str34 = requestBuilder33.buildRelativeUrl();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNull(headerList17);
        org.junit.Assert.assertNotNull(headerArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(headerList30);
        org.junit.Assert.assertNotNull(requestBuilder33);
    }

    @Test
    public void test0179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0179");
        retrofit.client.Header[] headerArray4 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList5 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList5, headerArray4);
        retrofit.mime.TypedOutput typedOutput7 = null;
        retrofit.client.Request request8 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList5, typedOutput7);
        java.lang.String str9 = request8.url;
        java.util.List<retrofit.client.Header> headerList10 = request8.headers;
        retrofit.mime.TypedOutput typedOutput11 = request8.body;
        retrofit.mime.TypedOutput typedOutput12 = request8.body;
        java.util.List<retrofit.client.Header> headerList13 = request8.headers;
        retrofit.mime.TypedOutput typedOutput14 = null;
        retrofit.client.Request request15 = new retrofit.client.Request("hi!", "hi!", headerList13, typedOutput14);
        retrofit.mime.TypedOutput typedOutput16 = request15.body;
        java.util.List<retrofit.client.Header> headerList17 = request15.getHeaders();
        java.lang.Class<?> wildcardClass18 = request15.getClass();
        org.junit.Assert.assertNotNull(headerArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(headerList10);
        org.junit.Assert.assertNull(typedOutput11);
        org.junit.Assert.assertNull(typedOutput12);
        org.junit.Assert.assertNotNull(headerList13);
        org.junit.Assert.assertNull(typedOutput16);
        org.junit.Assert.assertNotNull(headerList17);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0180");
        retrofit.client.Header[] headerArray6 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList7 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList7, headerArray6);
        retrofit.mime.TypedOutput typedOutput9 = null;
        retrofit.client.Request request10 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList7, typedOutput9);
        java.lang.String str11 = request10.url;
        java.util.List<retrofit.client.Header> headerList12 = request10.headers;
        retrofit.mime.TypedOutput typedOutput13 = null;
        retrofit.client.Request request14 = new retrofit.client.Request("", "", headerList12, typedOutput13);
        retrofit.mime.TypedOutput typedOutput15 = request14.body;
        retrofit.mime.TypedOutput typedOutput16 = request14.getBody();
        java.util.List<retrofit.client.Header> headerList17 = request14.getHeaders();
        retrofit.mime.TypedOutput typedOutput18 = null;
        retrofit.client.Request request19 = new retrofit.client.Request("", "", headerList17, typedOutput18);
        java.lang.Class<?> wildcardClass20 = headerList17.getClass();
        org.junit.Assert.assertNotNull(headerArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNull(typedOutput15);
        org.junit.Assert.assertNull(typedOutput16);
        org.junit.Assert.assertNotNull(headerList17);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0181");
        retrofit.client.Header[] headerArray4 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList5 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList5, headerArray4);
        retrofit.mime.TypedOutput typedOutput7 = null;
        retrofit.client.Request request8 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList5, typedOutput7);
        java.lang.String str9 = request8.url;
        java.util.List<retrofit.client.Header> headerList10 = request8.headers;
        retrofit.mime.TypedOutput typedOutput11 = request8.body;
        retrofit.mime.TypedOutput typedOutput12 = request8.body;
        java.util.List<retrofit.client.Header> headerList13 = request8.headers;
        retrofit.mime.TypedOutput typedOutput14 = null;
        retrofit.client.Request request15 = new retrofit.client.Request("hi!", "hi!", headerList13, typedOutput14);
        java.lang.String str16 = request15.url;
        java.lang.String str17 = request15.getMethod();
        retrofit.mime.TypedOutput typedOutput18 = request15.body;
        retrofit.mime.TypedOutput typedOutput19 = request15.getBody();
        java.lang.String str20 = request15.getMethod();
        retrofit.mime.TypedOutput typedOutput21 = request15.getBody();
        org.junit.Assert.assertNotNull(headerArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(headerList10);
        org.junit.Assert.assertNull(typedOutput11);
        org.junit.Assert.assertNull(typedOutput12);
        org.junit.Assert.assertNotNull(headerList13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNull(typedOutput18);
        org.junit.Assert.assertNull(typedOutput19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertNull(typedOutput21);
    }

    @Test
    public void test0182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0182");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        requestBuilder1.setapiUrl("");
        java.lang.String str4 = requestBuilder1.getapiUrl();
        java.lang.String str5 = requestBuilder1.apiUrl;
        retrofit.RequestBuilder requestBuilder7 = requestBuilder1.apiUrl("hi!");
        java.util.List<retrofit.client.Header> headerList8 = requestBuilder7.getheaders();
        requestBuilder7.setapiUrl("");
        // The following exception was thrown during execution in test generation
        try {
            retrofit.mime.TypedOutput typedOutput11 = requestBuilder7.buildBody();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(requestBuilder7);
        org.junit.Assert.assertNull(headerList8);
    }

    @Test
    public void test0183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0183");
        retrofit.converter.Converter converter2 = null;
        retrofit.RequestBuilder requestBuilder3 = new retrofit.RequestBuilder(converter2);
        java.util.List<retrofit.client.Header> headerList4 = requestBuilder3.headers;
        retrofit.client.Header[] headerArray9 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList10 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList10, headerArray9);
        retrofit.mime.TypedOutput typedOutput12 = null;
        retrofit.client.Request request13 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList10, typedOutput12);
        java.util.List<retrofit.client.Header> headerList14 = request13.headers;
        java.lang.Object[] objArray16 = new java.lang.Object[] { true, (short) 1, request13, 0 };
        requestBuilder3.args = objArray16;
        retrofit.converter.Converter converter18 = requestBuilder3.converter;
        java.lang.Object[] objArray19 = requestBuilder3.args;
        java.lang.Object[] objArray20 = null;
        retrofit.RequestBuilder requestBuilder21 = requestBuilder3.args(objArray20);
        java.lang.Object[] objArray22 = requestBuilder3.getargs();
        retrofit.client.Header[] headerArray27 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList28 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList28, headerArray27);
        retrofit.mime.TypedOutput typedOutput30 = null;
        retrofit.client.Request request31 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList28, typedOutput30);
        java.lang.String str32 = request31.url;
        java.util.List<retrofit.client.Header> headerList33 = request31.headers;
        retrofit.mime.TypedOutput typedOutput34 = request31.body;
        retrofit.mime.TypedOutput typedOutput35 = request31.body;
        java.util.List<retrofit.client.Header> headerList36 = request31.headers;
        retrofit.mime.TypedOutput typedOutput37 = null;
        retrofit.client.Request request38 = new retrofit.client.Request("", "hi!", headerList36, typedOutput37);
        java.util.List<retrofit.client.Header> headerList39 = request38.getHeaders();
        retrofit.RequestBuilder requestBuilder40 = requestBuilder3.headers(headerList39);
        retrofit.mime.TypedOutput typedOutput41 = null;
        retrofit.client.Request request42 = new retrofit.client.Request("", "", headerList39, typedOutput41);
        java.lang.String str43 = request42.getUrl();
        java.lang.String str44 = request42.method;
        org.junit.Assert.assertNull(headerList4);
        org.junit.Assert.assertNotNull(headerArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(headerList14);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertNull(converter18);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(requestBuilder21);
        org.junit.Assert.assertNull(objArray22);
        org.junit.Assert.assertNotNull(headerArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(headerList33);
        org.junit.Assert.assertNull(typedOutput34);
        org.junit.Assert.assertNull(typedOutput35);
        org.junit.Assert.assertNotNull(headerList36);
        org.junit.Assert.assertNotNull(headerList39);
        org.junit.Assert.assertNotNull(requestBuilder40);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
    }

    @Test
    public void test0184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0184");
        retrofit.client.Header[] headerArray2 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList3 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList3, headerArray2);
        retrofit.mime.TypedOutput typedOutput5 = null;
        retrofit.client.Request request6 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList3, typedOutput5);
        java.util.List<retrofit.client.Header> headerList7 = request6.headers;
        retrofit.mime.TypedOutput typedOutput8 = request6.body;
        java.lang.String str9 = request6.getUrl();
        retrofit.mime.TypedOutput typedOutput10 = request6.body;
        org.junit.Assert.assertNotNull(headerArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(headerList7);
        org.junit.Assert.assertNull(typedOutput8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNull(typedOutput10);
    }

    @Test
    public void test0185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0185");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        retrofit.client.Header[] headerArray8 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList9 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList9, headerArray8);
        retrofit.mime.TypedOutput typedOutput11 = null;
        retrofit.client.Request request12 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList9, typedOutput11);
        java.lang.String str13 = request12.url;
        java.util.List<retrofit.client.Header> headerList14 = request12.headers;
        retrofit.mime.TypedOutput typedOutput15 = null;
        retrofit.client.Request request16 = new retrofit.client.Request("", "", headerList14, typedOutput15);
        retrofit.mime.TypedOutput typedOutput17 = request16.body;
        java.util.List<retrofit.client.Header> headerList18 = request16.headers;
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("hi!", "", headerList18, typedOutput19);
        requestBuilder1.headers = headerList18;
        java.lang.String str22 = requestBuilder1.apiUrl;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request23 = requestBuilder1.build();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(headerArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(headerList14);
        org.junit.Assert.assertNull(typedOutput17);
        org.junit.Assert.assertNotNull(headerList18);
        org.junit.Assert.assertNull(str22);
    }

    @Test
    public void test0186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0186");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.converter.Converter converter3 = null;
        retrofit.RequestBuilder requestBuilder4 = new retrofit.RequestBuilder(converter3);
        java.util.List<retrofit.client.Header> headerList5 = requestBuilder4.headers;
        retrofit.client.Header[] headerArray10 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList11 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList11, headerArray10);
        retrofit.mime.TypedOutput typedOutput13 = null;
        retrofit.client.Request request14 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList11, typedOutput13);
        java.util.List<retrofit.client.Header> headerList15 = request14.headers;
        java.lang.Object[] objArray17 = new java.lang.Object[] { true, (short) 1, request14, 0 };
        requestBuilder4.args = objArray17;
        requestBuilder1.setargs(objArray17);
        retrofit.converter.Converter converter20 = requestBuilder1.getconverter();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.mime.TypedOutput typedOutput21 = requestBuilder1.buildBody();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNull(headerList5);
        org.junit.Assert.assertNotNull(headerArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(headerList15);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertNull(converter20);
    }

    @Test
    public void test0187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0187");
        retrofit.client.Header[] headerArray8 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList9 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList9, headerArray8);
        retrofit.mime.TypedOutput typedOutput11 = null;
        retrofit.client.Request request12 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList9, typedOutput11);
        retrofit.mime.TypedOutput typedOutput13 = null;
        retrofit.client.Request request14 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList9, typedOutput13);
        retrofit.mime.TypedOutput typedOutput15 = null;
        retrofit.client.Request request16 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList9, typedOutput15);
        java.util.List<retrofit.client.Header> headerList17 = request16.getHeaders();
        java.util.List<retrofit.client.Header> headerList18 = request16.getHeaders();
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("hi!", "hi!", headerList18, typedOutput19);
        org.junit.Assert.assertNotNull(headerArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(headerList17);
        org.junit.Assert.assertNotNull(headerList18);
    }

    @Test
    public void test0188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0188");
        retrofit.client.Header[] headerArray2 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList3 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList3, headerArray2);
        retrofit.mime.TypedOutput typedOutput5 = null;
        retrofit.client.Request request6 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList3, typedOutput5);
        java.util.List<retrofit.client.Header> headerList7 = request6.headers;
        java.lang.String str8 = request6.getMethod();
        java.util.List<retrofit.client.Header> headerList9 = request6.getHeaders();
        java.util.List<retrofit.client.Header> headerList10 = request6.getHeaders();
        org.junit.Assert.assertNotNull(headerArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(headerList7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(headerList9);
        org.junit.Assert.assertNotNull(headerList10);
    }

    @Test
    public void test0189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0189");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        requestBuilder1.setapiUrl("");
        java.lang.String str4 = requestBuilder1.getapiUrl();
        requestBuilder1.setapiUrl("hi!");
        retrofit.RequestBuilder requestBuilder8 = requestBuilder1.apiUrl("");
        java.lang.String str9 = requestBuilder8.getapiUrl();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.mime.TypedOutput typedOutput10 = requestBuilder8.buildBody();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(requestBuilder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test0190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0190");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        java.util.List<retrofit.client.Header> headerList12 = request11.headers;
        java.lang.Object[] objArray14 = new java.lang.Object[] { true, (short) 1, request11, 0 };
        requestBuilder1.args = objArray14;
        retrofit.converter.Converter converter16 = requestBuilder1.converter;
        java.lang.Object[] objArray17 = requestBuilder1.args;
        java.lang.Object[] objArray18 = null;
        retrofit.RequestBuilder requestBuilder19 = requestBuilder1.args(objArray18);
        java.lang.Object[] objArray20 = requestBuilder1.getargs();
        java.lang.String str21 = requestBuilder1.getapiUrl();
        retrofit.client.Header[] headerArray26 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList27 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList27, headerArray26);
        retrofit.mime.TypedOutput typedOutput29 = null;
        retrofit.client.Request request30 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList27, typedOutput29);
        java.util.List<retrofit.client.Header> headerList31 = request30.headers;
        retrofit.mime.TypedOutput typedOutput32 = request30.body;
        java.util.List<retrofit.client.Header> headerList33 = request30.headers;
        retrofit.mime.TypedOutput typedOutput34 = null;
        retrofit.client.Request request35 = new retrofit.client.Request("", "hi!", headerList33, typedOutput34);
        requestBuilder1.setheaders(headerList33);
        retrofit.converter.Converter converter37 = requestBuilder1.converter;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request38 = requestBuilder1.build();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertNotNull(requestBuilder19);
        org.junit.Assert.assertNull(objArray20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(headerArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(headerList31);
        org.junit.Assert.assertNull(typedOutput32);
        org.junit.Assert.assertNotNull(headerList33);
        org.junit.Assert.assertNull(converter37);
    }

    @Test
    public void test0191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0191");
        retrofit.client.Header[] headerArray6 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList7 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList7, headerArray6);
        retrofit.mime.TypedOutput typedOutput9 = null;
        retrofit.client.Request request10 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList7, typedOutput9);
        retrofit.mime.TypedOutput typedOutput11 = null;
        retrofit.client.Request request12 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList7, typedOutput11);
        retrofit.mime.TypedOutput typedOutput13 = null;
        retrofit.client.Request request14 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList7, typedOutput13);
        java.lang.String str15 = request14.getMethod();
        java.lang.String str16 = request14.getUrl();
        java.lang.String str17 = request14.getMethod();
        java.lang.String str18 = request14.getUrl();
        org.junit.Assert.assertNotNull(headerArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
    }

    @Test
    public void test0192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0192");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        java.util.List<retrofit.client.Header> headerList12 = request11.headers;
        java.lang.Object[] objArray14 = new java.lang.Object[] { true, (short) 1, request11, 0 };
        requestBuilder1.args = objArray14;
        retrofit.converter.Converter converter16 = requestBuilder1.converter;
        java.lang.Object[] objArray17 = requestBuilder1.args;
        retrofit.client.Header[] headerArray20 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList21 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList21, headerArray20);
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList21, typedOutput23);
        java.lang.String str25 = request24.url;
        java.util.List<retrofit.client.Header> headerList26 = request24.headers;
        retrofit.mime.TypedOutput typedOutput27 = request24.body;
        retrofit.mime.TypedOutput typedOutput28 = request24.body;
        java.util.List<retrofit.client.Header> headerList29 = request24.headers;
        requestBuilder1.setheaders(headerList29);
        requestBuilder1.setapiUrl("hi!");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str33 = requestBuilder1.buildRelativeUrl();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertNotNull(headerArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(headerList26);
        org.junit.Assert.assertNull(typedOutput27);
        org.junit.Assert.assertNull(typedOutput28);
        org.junit.Assert.assertNotNull(headerList29);
    }

    @Test
    public void test0193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0193");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        requestBuilder1.setapiUrl("");
        java.lang.String str4 = requestBuilder1.getapiUrl();
        requestBuilder1.setapiUrl("hi!");
        retrofit.RequestBuilder requestBuilder8 = requestBuilder1.apiUrl("");
        retrofit.converter.Converter converter9 = null;
        retrofit.RequestBuilder requestBuilder10 = new retrofit.RequestBuilder(converter9);
        java.util.List<retrofit.client.Header> headerList11 = requestBuilder10.headers;
        retrofit.converter.Converter converter12 = null;
        retrofit.RequestBuilder requestBuilder13 = new retrofit.RequestBuilder(converter12);
        java.util.List<retrofit.client.Header> headerList14 = requestBuilder13.headers;
        retrofit.client.Header[] headerArray19 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList20 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList20, headerArray19);
        retrofit.mime.TypedOutput typedOutput22 = null;
        retrofit.client.Request request23 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList20, typedOutput22);
        java.util.List<retrofit.client.Header> headerList24 = request23.headers;
        java.lang.Object[] objArray26 = new java.lang.Object[] { true, (short) 1, request23, 0 };
        requestBuilder13.args = objArray26;
        requestBuilder10.setargs(objArray26);
        retrofit.RequestBuilder requestBuilder29 = requestBuilder1.args(objArray26);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str30 = requestBuilder1.buildRelativeUrl();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(requestBuilder8);
        org.junit.Assert.assertNull(headerList11);
        org.junit.Assert.assertNull(headerList14);
        org.junit.Assert.assertNotNull(headerArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(headerList24);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertNotNull(requestBuilder29);
    }

    @Test
    public void test0194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0194");
        retrofit.client.Header[] headerArray2 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList3 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList3, headerArray2);
        retrofit.mime.TypedOutput typedOutput5 = null;
        retrofit.client.Request request6 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList3, typedOutput5);
        java.lang.String str7 = request6.url;
        java.util.List<retrofit.client.Header> headerList8 = request6.headers;
        retrofit.mime.TypedOutput typedOutput9 = request6.body;
        retrofit.mime.TypedOutput typedOutput10 = request6.body;
        retrofit.mime.TypedOutput typedOutput11 = request6.getBody();
        java.lang.String str12 = request6.getUrl();
        java.lang.String str13 = request6.url;
        org.junit.Assert.assertNotNull(headerArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(headerList8);
        org.junit.Assert.assertNull(typedOutput9);
        org.junit.Assert.assertNull(typedOutput10);
        org.junit.Assert.assertNull(typedOutput11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test0195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0195");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        java.util.List<retrofit.client.Header> headerList12 = request11.headers;
        java.lang.Object[] objArray14 = new java.lang.Object[] { true, (short) 1, request11, 0 };
        requestBuilder1.args = objArray14;
        retrofit.converter.Converter converter16 = requestBuilder1.converter;
        requestBuilder1.setapiUrl("hi!");
        retrofit.converter.Converter converter19 = null;
        retrofit.RequestBuilder requestBuilder20 = new retrofit.RequestBuilder(converter19);
        java.util.List<retrofit.client.Header> headerList21 = requestBuilder20.headers;
        retrofit.client.Header[] headerArray26 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList27 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList27, headerArray26);
        retrofit.mime.TypedOutput typedOutput29 = null;
        retrofit.client.Request request30 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList27, typedOutput29);
        java.util.List<retrofit.client.Header> headerList31 = request30.headers;
        java.lang.Object[] objArray33 = new java.lang.Object[] { true, (short) 1, request30, 0 };
        requestBuilder20.args = objArray33;
        requestBuilder1.args = objArray33;
        java.util.List<retrofit.client.Header> headerList36 = requestBuilder1.getheaders();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.mime.TypedOutput typedOutput37 = requestBuilder1.buildBody();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNull(headerList21);
        org.junit.Assert.assertNotNull(headerArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(headerList31);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertNull(headerList36);
    }

    @Test
    public void test0196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0196");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        java.util.List<retrofit.client.Header> headerList12 = request11.headers;
        java.lang.Object[] objArray14 = new java.lang.Object[] { true, (short) 1, request11, 0 };
        requestBuilder1.args = objArray14;
        retrofit.converter.Converter converter16 = requestBuilder1.converter;
        java.lang.Object[] objArray17 = requestBuilder1.args;
        retrofit.client.Header[] headerArray20 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList21 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList21, headerArray20);
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList21, typedOutput23);
        java.lang.String str25 = request24.url;
        java.util.List<retrofit.client.Header> headerList26 = request24.headers;
        retrofit.mime.TypedOutput typedOutput27 = request24.body;
        retrofit.mime.TypedOutput typedOutput28 = request24.body;
        java.util.List<retrofit.client.Header> headerList29 = request24.headers;
        requestBuilder1.setheaders(headerList29);
        requestBuilder1.setapiUrl("hi!");
        retrofit.converter.Converter converter33 = null;
        retrofit.RequestBuilder requestBuilder34 = new retrofit.RequestBuilder(converter33);
        java.lang.Object[] objArray35 = requestBuilder34.getargs();
        retrofit.converter.Converter converter36 = requestBuilder34.getconverter();
        retrofit.client.Header[] headerArray43 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList44 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList44, headerArray43);
        retrofit.mime.TypedOutput typedOutput46 = null;
        retrofit.client.Request request47 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList44, typedOutput46);
        retrofit.mime.TypedOutput typedOutput48 = null;
        retrofit.client.Request request49 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList44, typedOutput48);
        retrofit.mime.TypedOutput typedOutput50 = null;
        retrofit.client.Request request51 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList44, typedOutput50);
        java.util.List<retrofit.client.Header> headerList52 = request51.getHeaders();
        requestBuilder34.setheaders(headerList52);
        retrofit.RequestBuilder requestBuilder54 = requestBuilder1.headers(headerList52);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str55 = requestBuilder1.buildRelativeUrl();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertNotNull(headerArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(headerList26);
        org.junit.Assert.assertNull(typedOutput27);
        org.junit.Assert.assertNull(typedOutput28);
        org.junit.Assert.assertNotNull(headerList29);
        org.junit.Assert.assertNull(objArray35);
        org.junit.Assert.assertNull(converter36);
        org.junit.Assert.assertNotNull(headerArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(headerList52);
        org.junit.Assert.assertNotNull(requestBuilder54);
    }

    @Test
    public void test0197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0197");
        retrofit.client.Header[] headerArray6 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList7 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList7, headerArray6);
        retrofit.mime.TypedOutput typedOutput9 = null;
        retrofit.client.Request request10 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList7, typedOutput9);
        retrofit.mime.TypedOutput typedOutput11 = null;
        retrofit.client.Request request12 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList7, typedOutput11);
        java.lang.String str13 = request12.getUrl();
        java.lang.String str14 = request12.method;
        java.util.List<retrofit.client.Header> headerList15 = request12.headers;
        retrofit.mime.TypedOutput typedOutput16 = null;
        retrofit.client.Request request17 = new retrofit.client.Request("hi!", "", headerList15, typedOutput16);
        java.lang.Class<?> wildcardClass18 = headerList15.getClass();
        org.junit.Assert.assertNotNull(headerArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(headerList15);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0198");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        java.util.List<retrofit.client.Header> headerList12 = request11.headers;
        java.lang.Object[] objArray14 = new java.lang.Object[] { true, (short) 1, request11, 0 };
        requestBuilder1.args = objArray14;
        retrofit.converter.Converter converter16 = requestBuilder1.converter;
        java.lang.Object[] objArray17 = requestBuilder1.args;
        retrofit.converter.Converter converter18 = null;
        retrofit.RequestBuilder requestBuilder19 = new retrofit.RequestBuilder(converter18);
        java.util.List<retrofit.client.Header> headerList20 = requestBuilder19.headers;
        retrofit.client.Header[] headerArray25 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList26 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList26, headerArray25);
        retrofit.mime.TypedOutput typedOutput28 = null;
        retrofit.client.Request request29 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList26, typedOutput28);
        java.util.List<retrofit.client.Header> headerList30 = request29.headers;
        java.lang.Object[] objArray32 = new java.lang.Object[] { true, (short) 1, request29, 0 };
        requestBuilder19.args = objArray32;
        retrofit.converter.Converter converter34 = requestBuilder19.converter;
        java.lang.Object[] objArray35 = requestBuilder19.args;
        requestBuilder1.setargs(objArray35);
        retrofit.client.Header[] headerArray41 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList42 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList42, headerArray41);
        retrofit.mime.TypedOutput typedOutput44 = null;
        retrofit.client.Request request45 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList42, typedOutput44);
        java.lang.String str46 = request45.url;
        java.util.List<retrofit.client.Header> headerList47 = request45.headers;
        retrofit.mime.TypedOutput typedOutput48 = null;
        retrofit.client.Request request49 = new retrofit.client.Request("", "", headerList47, typedOutput48);
        retrofit.mime.TypedOutput typedOutput50 = request49.body;
        java.util.List<retrofit.client.Header> headerList51 = request49.headers;
        java.util.List<retrofit.client.Header> headerList52 = request49.getHeaders();
        retrofit.RequestBuilder requestBuilder53 = requestBuilder1.headers(headerList52);
        requestBuilder1.setapiUrl("hi!");
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertNull(headerList20);
        org.junit.Assert.assertNotNull(headerArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(headerList30);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertNull(converter34);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertNotNull(headerArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(headerList47);
        org.junit.Assert.assertNull(typedOutput50);
        org.junit.Assert.assertNotNull(headerList51);
        org.junit.Assert.assertNotNull(headerList52);
        org.junit.Assert.assertNotNull(requestBuilder53);
    }

    @Test
    public void test0199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0199");
        retrofit.client.Header[] headerArray2 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList3 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList3, headerArray2);
        retrofit.mime.TypedOutput typedOutput5 = null;
        retrofit.client.Request request6 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList3, typedOutput5);
        java.util.List<retrofit.client.Header> headerList7 = request6.headers;
        retrofit.mime.TypedOutput typedOutput8 = request6.body;
        java.lang.String str9 = request6.method;
        java.util.List<retrofit.client.Header> headerList10 = request6.getHeaders();
        java.lang.String str11 = request6.getUrl();
        org.junit.Assert.assertNotNull(headerArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(headerList7);
        org.junit.Assert.assertNull(typedOutput8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(headerList10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test0200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0200");
        retrofit.client.Header[] headerArray6 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList7 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList7, headerArray6);
        retrofit.mime.TypedOutput typedOutput9 = null;
        retrofit.client.Request request10 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList7, typedOutput9);
        java.lang.String str11 = request10.url;
        java.util.List<retrofit.client.Header> headerList12 = request10.headers;
        retrofit.mime.TypedOutput typedOutput13 = request10.body;
        retrofit.mime.TypedOutput typedOutput14 = request10.body;
        java.util.List<retrofit.client.Header> headerList15 = request10.headers;
        retrofit.mime.TypedOutput typedOutput16 = null;
        retrofit.client.Request request17 = new retrofit.client.Request("hi!", "hi!", headerList15, typedOutput16);
        retrofit.mime.TypedOutput typedOutput18 = request17.body;
        java.util.List<retrofit.client.Header> headerList19 = request17.getHeaders();
        retrofit.mime.TypedOutput typedOutput20 = null;
        retrofit.client.Request request21 = new retrofit.client.Request("", "hi!", headerList19, typedOutput20);
        java.util.List<retrofit.client.Header> headerList22 = request21.headers;
        java.lang.String str23 = request21.method;
        java.lang.String str24 = request21.method;
        org.junit.Assert.assertNotNull(headerArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNull(typedOutput13);
        org.junit.Assert.assertNull(typedOutput14);
        org.junit.Assert.assertNotNull(headerList15);
        org.junit.Assert.assertNull(typedOutput18);
        org.junit.Assert.assertNotNull(headerList19);
        org.junit.Assert.assertNotNull(headerList22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
    }

    @Test
    public void test0201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0201");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        java.util.List<retrofit.client.Header> headerList12 = request11.headers;
        java.lang.Object[] objArray14 = new java.lang.Object[] { true, (short) 1, request11, 0 };
        requestBuilder1.args = objArray14;
        retrofit.converter.Converter converter16 = requestBuilder1.converter;
        java.lang.Object[] objArray17 = requestBuilder1.args;
        java.lang.Object[] objArray18 = null;
        retrofit.RequestBuilder requestBuilder19 = requestBuilder1.args(objArray18);
        retrofit.converter.Converter converter20 = requestBuilder19.getconverter();
        java.lang.Object[] objArray21 = requestBuilder19.getargs();
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertNotNull(requestBuilder19);
        org.junit.Assert.assertNull(converter20);
        org.junit.Assert.assertNull(objArray21);
    }

    @Test
    public void test0202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0202");
        retrofit.client.Header[] headerArray4 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList5 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList5, headerArray4);
        retrofit.mime.TypedOutput typedOutput7 = null;
        retrofit.client.Request request8 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList5, typedOutput7);
        java.lang.String str9 = request8.url;
        java.util.List<retrofit.client.Header> headerList10 = request8.headers;
        retrofit.mime.TypedOutput typedOutput11 = request8.body;
        retrofit.mime.TypedOutput typedOutput12 = request8.body;
        java.util.List<retrofit.client.Header> headerList13 = request8.headers;
        retrofit.mime.TypedOutput typedOutput14 = null;
        retrofit.client.Request request15 = new retrofit.client.Request("hi!", "hi!", headerList13, typedOutput14);
        java.lang.String str16 = request15.url;
        java.lang.String str17 = request15.getMethod();
        retrofit.mime.TypedOutput typedOutput18 = request15.body;
        retrofit.mime.TypedOutput typedOutput19 = request15.getBody();
        java.lang.String str20 = request15.getMethod();
        retrofit.mime.TypedOutput typedOutput21 = request15.body;
        java.lang.String str22 = request15.getMethod();
        org.junit.Assert.assertNotNull(headerArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(headerList10);
        org.junit.Assert.assertNull(typedOutput11);
        org.junit.Assert.assertNull(typedOutput12);
        org.junit.Assert.assertNotNull(headerList13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNull(typedOutput18);
        org.junit.Assert.assertNull(typedOutput19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertNull(typedOutput21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
    }

    @Test
    public void test0203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0203");
        retrofit.client.Header[] headerArray4 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList5 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList5, headerArray4);
        retrofit.mime.TypedOutput typedOutput7 = null;
        retrofit.client.Request request8 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList5, typedOutput7);
        java.lang.String str9 = request8.url;
        java.util.List<retrofit.client.Header> headerList10 = request8.getHeaders();
        java.util.List<retrofit.client.Header> headerList11 = request8.headers;
        retrofit.mime.TypedOutput typedOutput12 = null;
        retrofit.client.Request request13 = new retrofit.client.Request("", "", headerList11, typedOutput12);
        org.junit.Assert.assertNotNull(headerArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(headerList10);
        org.junit.Assert.assertNotNull(headerList11);
    }

    @Test
    public void test0204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0204");
        retrofit.client.Header[] headerArray4 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList5 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList5, headerArray4);
        retrofit.mime.TypedOutput typedOutput7 = null;
        retrofit.client.Request request8 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList5, typedOutput7);
        java.lang.String str9 = request8.getUrl();
        java.util.List<retrofit.client.Header> headerList10 = request8.getHeaders();
        java.util.List<retrofit.client.Header> headerList11 = request8.getHeaders();
        retrofit.mime.TypedOutput typedOutput12 = null;
        retrofit.client.Request request13 = new retrofit.client.Request("", "", headerList11, typedOutput12);
        retrofit.mime.TypedOutput typedOutput14 = request13.body;
        org.junit.Assert.assertNotNull(headerArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(headerList10);
        org.junit.Assert.assertNotNull(headerList11);
        org.junit.Assert.assertNull(typedOutput14);
    }

    @Test
    public void test0205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0205");
        retrofit.client.Header[] headerArray8 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList9 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList9, headerArray8);
        retrofit.mime.TypedOutput typedOutput11 = null;
        retrofit.client.Request request12 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList9, typedOutput11);
        retrofit.mime.TypedOutput typedOutput13 = null;
        retrofit.client.Request request14 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList9, typedOutput13);
        retrofit.mime.TypedOutput typedOutput15 = null;
        retrofit.client.Request request16 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList9, typedOutput15);
        retrofit.mime.TypedOutput typedOutput17 = null;
        retrofit.client.Request request18 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList9, typedOutput17);
        java.lang.String str19 = request18.getUrl();
        java.lang.String str20 = request18.url;
        java.lang.Class<?> wildcardClass21 = request18.getClass();
        org.junit.Assert.assertNotNull(headerArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0206");
        retrofit.client.Header[] headerArray2 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList3 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList3, headerArray2);
        retrofit.mime.TypedOutput typedOutput5 = null;
        retrofit.client.Request request6 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList3, typedOutput5);
        java.lang.String str7 = request6.url;
        java.util.List<retrofit.client.Header> headerList8 = request6.headers;
        retrofit.mime.TypedOutput typedOutput9 = request6.body;
        retrofit.mime.TypedOutput typedOutput10 = request6.body;
        retrofit.mime.TypedOutput typedOutput11 = request6.getBody();
        java.lang.String str12 = request6.getMethod();
        java.lang.String str13 = request6.method;
        org.junit.Assert.assertNotNull(headerArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(headerList8);
        org.junit.Assert.assertNull(typedOutput9);
        org.junit.Assert.assertNull(typedOutput10);
        org.junit.Assert.assertNull(typedOutput11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test0207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0207");
        retrofit.client.Header[] headerArray2 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList3 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList3, headerArray2);
        retrofit.mime.TypedOutput typedOutput5 = null;
        retrofit.client.Request request6 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList3, typedOutput5);
        java.lang.String str7 = request6.url;
        java.util.List<retrofit.client.Header> headerList8 = request6.headers;
        retrofit.mime.TypedOutput typedOutput9 = request6.body;
        java.lang.String str10 = request6.method;
        retrofit.mime.TypedOutput typedOutput11 = request6.body;
        java.lang.String str12 = request6.url;
        java.lang.String str13 = request6.url;
        org.junit.Assert.assertNotNull(headerArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(headerList8);
        org.junit.Assert.assertNull(typedOutput9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(typedOutput11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test0208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0208");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        java.util.List<retrofit.client.Header> headerList12 = request11.headers;
        java.lang.Object[] objArray14 = new java.lang.Object[] { true, (short) 1, request11, 0 };
        requestBuilder1.args = objArray14;
        retrofit.converter.Converter converter16 = requestBuilder1.converter;
        java.util.List<retrofit.client.Header> headerList17 = requestBuilder1.headers;
        requestBuilder1.apiUrl = "hi!";
        java.lang.Object[] objArray20 = requestBuilder1.getargs();
        requestBuilder1.setapiUrl("");
        java.util.List<retrofit.client.Header> headerList23 = requestBuilder1.getheaders();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request24 = requestBuilder1.build();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNull(headerList17);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertNull(headerList23);
    }

    @Test
    public void test0209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0209");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.lang.Object[] objArray2 = requestBuilder1.getargs();
        retrofit.converter.Converter converter3 = requestBuilder1.getconverter();
        retrofit.converter.Converter converter4 = null;
        retrofit.RequestBuilder requestBuilder5 = new retrofit.RequestBuilder(converter4);
        java.util.List<retrofit.client.Header> headerList6 = requestBuilder5.headers;
        retrofit.converter.Converter converter7 = null;
        retrofit.RequestBuilder requestBuilder8 = new retrofit.RequestBuilder(converter7);
        java.util.List<retrofit.client.Header> headerList9 = requestBuilder8.headers;
        retrofit.client.Header[] headerArray14 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList15 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList15, headerArray14);
        retrofit.mime.TypedOutput typedOutput17 = null;
        retrofit.client.Request request18 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList15, typedOutput17);
        java.util.List<retrofit.client.Header> headerList19 = request18.headers;
        java.lang.Object[] objArray21 = new java.lang.Object[] { true, (short) 1, request18, 0 };
        requestBuilder8.args = objArray21;
        requestBuilder5.setargs(objArray21);
        retrofit.RequestBuilder requestBuilder24 = requestBuilder1.args(objArray21);
        retrofit.converter.Converter converter25 = requestBuilder1.getconverter();
        org.junit.Assert.assertNull(objArray2);
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(headerList6);
        org.junit.Assert.assertNull(headerList9);
        org.junit.Assert.assertNotNull(headerArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(headerList19);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertNotNull(requestBuilder24);
        org.junit.Assert.assertNull(converter25);
    }

    @Test
    public void test0210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0210");
        retrofit.converter.Converter converter6 = null;
        retrofit.RequestBuilder requestBuilder7 = new retrofit.RequestBuilder(converter6);
        java.util.List<retrofit.client.Header> headerList8 = requestBuilder7.headers;
        retrofit.client.Header[] headerArray13 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList14 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList14, headerArray13);
        retrofit.mime.TypedOutput typedOutput16 = null;
        retrofit.client.Request request17 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList14, typedOutput16);
        java.util.List<retrofit.client.Header> headerList18 = request17.headers;
        java.lang.Object[] objArray20 = new java.lang.Object[] { true, (short) 1, request17, 0 };
        requestBuilder7.args = objArray20;
        retrofit.converter.Converter converter22 = requestBuilder7.converter;
        java.util.List<retrofit.client.Header> headerList23 = requestBuilder7.headers;
        requestBuilder7.apiUrl = "hi!";
        retrofit.client.Header[] headerArray30 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList31 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList31, headerArray30);
        retrofit.mime.TypedOutput typedOutput33 = null;
        retrofit.client.Request request34 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList31, typedOutput33);
        java.lang.String str35 = request34.url;
        java.util.List<retrofit.client.Header> headerList36 = request34.headers;
        retrofit.mime.TypedOutput typedOutput37 = null;
        retrofit.client.Request request38 = new retrofit.client.Request("", "", headerList36, typedOutput37);
        retrofit.RequestBuilder requestBuilder39 = requestBuilder7.headers(headerList36);
        retrofit.mime.TypedOutput typedOutput40 = null;
        retrofit.client.Request request41 = new retrofit.client.Request("", "hi!", headerList36, typedOutput40);
        retrofit.mime.TypedOutput typedOutput42 = null;
        retrofit.client.Request request43 = new retrofit.client.Request("hi!", "hi!", headerList36, typedOutput42);
        java.util.List<retrofit.client.Header> headerList44 = request43.getHeaders();
        retrofit.mime.TypedOutput typedOutput45 = null;
        retrofit.client.Request request46 = new retrofit.client.Request("", "hi!", headerList44, typedOutput45);
        org.junit.Assert.assertNull(headerList8);
        org.junit.Assert.assertNotNull(headerArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(headerList18);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertNull(converter22);
        org.junit.Assert.assertNull(headerList23);
        org.junit.Assert.assertNotNull(headerArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(headerList36);
        org.junit.Assert.assertNotNull(requestBuilder39);
        org.junit.Assert.assertNotNull(headerList44);
    }

    @Test
    public void test0211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0211");
        retrofit.client.Header[] headerArray2 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList3 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList3, headerArray2);
        retrofit.mime.TypedOutput typedOutput5 = null;
        retrofit.client.Request request6 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList3, typedOutput5);
        java.util.List<retrofit.client.Header> headerList7 = request6.headers;
        java.util.List<retrofit.client.Header> headerList8 = request6.headers;
        java.util.List<retrofit.client.Header> headerList9 = request6.getHeaders();
        java.util.List<retrofit.client.Header> headerList10 = request6.headers;
        retrofit.mime.TypedOutput typedOutput11 = request6.body;
        retrofit.mime.TypedOutput typedOutput12 = request6.getBody();
        org.junit.Assert.assertNotNull(headerArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(headerList7);
        org.junit.Assert.assertNotNull(headerList8);
        org.junit.Assert.assertNotNull(headerList9);
        org.junit.Assert.assertNotNull(headerList10);
        org.junit.Assert.assertNull(typedOutput11);
        org.junit.Assert.assertNull(typedOutput12);
    }

    @Test
    public void test0212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0212");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        requestBuilder1.setapiUrl("");
        java.lang.String str4 = requestBuilder1.getapiUrl();
        java.lang.String str5 = requestBuilder1.apiUrl;
        retrofit.RequestBuilder requestBuilder7 = requestBuilder1.apiUrl("hi!");
        java.util.List<retrofit.client.Header> headerList8 = requestBuilder7.getheaders();
        java.util.List<retrofit.client.Header> headerList9 = requestBuilder7.getheaders();
        retrofit.client.Header[] headerArray12 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList13 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList13, headerArray12);
        retrofit.mime.TypedOutput typedOutput15 = null;
        retrofit.client.Request request16 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList13, typedOutput15);
        java.util.List<retrofit.client.Header> headerList17 = request16.headers;
        retrofit.mime.TypedOutput typedOutput18 = request16.body;
        java.util.List<retrofit.client.Header> headerList19 = request16.headers;
        java.util.List<retrofit.client.Header> headerList20 = request16.getHeaders();
        java.util.List<retrofit.client.Header> headerList21 = request16.headers;
        retrofit.RequestBuilder requestBuilder22 = requestBuilder7.headers(headerList21);
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request23 = requestBuilder22.build();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(requestBuilder7);
        org.junit.Assert.assertNull(headerList8);
        org.junit.Assert.assertNull(headerList9);
        org.junit.Assert.assertNotNull(headerArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(headerList17);
        org.junit.Assert.assertNull(typedOutput18);
        org.junit.Assert.assertNotNull(headerList19);
        org.junit.Assert.assertNotNull(headerList20);
        org.junit.Assert.assertNotNull(headerList21);
        org.junit.Assert.assertNotNull(requestBuilder22);
    }

    @Test
    public void test0213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0213");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        requestBuilder1.setapiUrl("");
        java.lang.String str4 = requestBuilder1.getapiUrl();
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        requestBuilder1.setheaders((java.util.List<retrofit.client.Header>) headerList8);
        // The following exception was thrown during execution in test generation
        try {
            retrofit.mime.TypedOutput typedOutput13 = requestBuilder1.buildBody();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0214");
        retrofit.client.Header[] headerArray4 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList5 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList5, headerArray4);
        retrofit.mime.TypedOutput typedOutput7 = null;
        retrofit.client.Request request8 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList5, typedOutput7);
        java.lang.String str9 = request8.url;
        java.util.List<retrofit.client.Header> headerList10 = request8.headers;
        retrofit.mime.TypedOutput typedOutput11 = request8.body;
        retrofit.mime.TypedOutput typedOutput12 = request8.body;
        java.util.List<retrofit.client.Header> headerList13 = request8.headers;
        java.util.List<retrofit.client.Header> headerList14 = request8.headers;
        retrofit.mime.TypedOutput typedOutput15 = null;
        retrofit.client.Request request16 = new retrofit.client.Request("hi!", "", headerList14, typedOutput15);
        java.lang.String str17 = request16.getUrl();
        java.lang.String str18 = request16.getMethod();
        java.lang.String str19 = request16.method;
        retrofit.mime.TypedOutput typedOutput20 = request16.getBody();
        org.junit.Assert.assertNotNull(headerArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(headerList10);
        org.junit.Assert.assertNull(typedOutput11);
        org.junit.Assert.assertNull(typedOutput12);
        org.junit.Assert.assertNotNull(headerList13);
        org.junit.Assert.assertNotNull(headerList14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNull(typedOutput20);
    }

    @Test
    public void test0215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0215");
        retrofit.converter.Converter converter4 = null;
        retrofit.RequestBuilder requestBuilder5 = new retrofit.RequestBuilder(converter4);
        java.util.List<retrofit.client.Header> headerList6 = requestBuilder5.headers;
        retrofit.client.Header[] headerArray11 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList12 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList12, headerArray11);
        retrofit.mime.TypedOutput typedOutput14 = null;
        retrofit.client.Request request15 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList12, typedOutput14);
        java.util.List<retrofit.client.Header> headerList16 = request15.headers;
        java.lang.Object[] objArray18 = new java.lang.Object[] { true, (short) 1, request15, 0 };
        requestBuilder5.args = objArray18;
        retrofit.converter.Converter converter20 = requestBuilder5.converter;
        java.lang.Object[] objArray21 = requestBuilder5.args;
        retrofit.client.Header[] headerArray24 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList25 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList25, headerArray24);
        retrofit.mime.TypedOutput typedOutput27 = null;
        retrofit.client.Request request28 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList25, typedOutput27);
        java.lang.String str29 = request28.url;
        java.util.List<retrofit.client.Header> headerList30 = request28.headers;
        retrofit.mime.TypedOutput typedOutput31 = request28.body;
        retrofit.mime.TypedOutput typedOutput32 = request28.body;
        java.util.List<retrofit.client.Header> headerList33 = request28.headers;
        requestBuilder5.setheaders(headerList33);
        retrofit.mime.TypedOutput typedOutput35 = null;
        retrofit.client.Request request36 = new retrofit.client.Request("hi!", "hi!", headerList33, typedOutput35);
        retrofit.mime.TypedOutput typedOutput37 = null;
        retrofit.client.Request request38 = new retrofit.client.Request("hi!", "", headerList33, typedOutput37);
        org.junit.Assert.assertNull(headerList6);
        org.junit.Assert.assertNotNull(headerArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(headerList16);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertNull(converter20);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertNotNull(headerArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(headerList30);
        org.junit.Assert.assertNull(typedOutput31);
        org.junit.Assert.assertNull(typedOutput32);
        org.junit.Assert.assertNotNull(headerList33);
    }

    @Test
    public void test0216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0216");
        retrofit.client.Header[] headerArray6 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList7 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList7, headerArray6);
        retrofit.mime.TypedOutput typedOutput9 = null;
        retrofit.client.Request request10 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList7, typedOutput9);
        java.lang.String str11 = request10.url;
        java.util.List<retrofit.client.Header> headerList12 = request10.headers;
        retrofit.mime.TypedOutput typedOutput13 = request10.body;
        retrofit.mime.TypedOutput typedOutput14 = request10.body;
        java.util.List<retrofit.client.Header> headerList15 = request10.headers;
        retrofit.mime.TypedOutput typedOutput16 = null;
        retrofit.client.Request request17 = new retrofit.client.Request("hi!", "hi!", headerList15, typedOutput16);
        java.util.List<retrofit.client.Header> headerList18 = request17.getHeaders();
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("hi!", "hi!", headerList18, typedOutput19);
        retrofit.mime.TypedOutput typedOutput21 = request20.getBody();
        java.util.List<retrofit.client.Header> headerList22 = request20.headers;
        java.lang.String str23 = request20.getMethod();
        org.junit.Assert.assertNotNull(headerArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNull(typedOutput13);
        org.junit.Assert.assertNull(typedOutput14);
        org.junit.Assert.assertNotNull(headerList15);
        org.junit.Assert.assertNotNull(headerList18);
        org.junit.Assert.assertNull(typedOutput21);
        org.junit.Assert.assertNotNull(headerList22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
    }

    @Test
    public void test0217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0217");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.lang.Object[] objArray2 = requestBuilder1.getargs();
        retrofit.converter.Converter converter3 = requestBuilder1.getconverter();
        retrofit.converter.Converter converter4 = null;
        retrofit.RequestBuilder requestBuilder5 = new retrofit.RequestBuilder(converter4);
        java.util.List<retrofit.client.Header> headerList6 = requestBuilder5.headers;
        retrofit.converter.Converter converter7 = null;
        retrofit.RequestBuilder requestBuilder8 = new retrofit.RequestBuilder(converter7);
        java.util.List<retrofit.client.Header> headerList9 = requestBuilder8.headers;
        retrofit.client.Header[] headerArray14 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList15 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList15, headerArray14);
        retrofit.mime.TypedOutput typedOutput17 = null;
        retrofit.client.Request request18 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList15, typedOutput17);
        java.util.List<retrofit.client.Header> headerList19 = request18.headers;
        java.lang.Object[] objArray21 = new java.lang.Object[] { true, (short) 1, request18, 0 };
        requestBuilder8.args = objArray21;
        requestBuilder5.setargs(objArray21);
        retrofit.RequestBuilder requestBuilder24 = requestBuilder1.args(objArray21);
        retrofit.converter.Converter converter25 = requestBuilder1.converter;
        java.lang.Object[] objArray26 = null;
        requestBuilder1.setargs(objArray26);
        java.lang.String str28 = requestBuilder1.getapiUrl();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request29 = requestBuilder1.build();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(objArray2);
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(headerList6);
        org.junit.Assert.assertNull(headerList9);
        org.junit.Assert.assertNotNull(headerArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(headerList19);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertNotNull(requestBuilder24);
        org.junit.Assert.assertNull(converter25);
        org.junit.Assert.assertNull(str28);
    }

    @Test
    public void test0218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0218");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        requestBuilder1.setapiUrl("");
        java.lang.String str4 = requestBuilder1.getapiUrl();
        java.util.List<retrofit.client.Header> headerList5 = requestBuilder1.getheaders();
        java.lang.String str6 = requestBuilder1.getapiUrl();
        java.util.List<retrofit.client.Header> headerList7 = requestBuilder1.headers;
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(headerList5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNull(headerList7);
    }

    @Test
    public void test0219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0219");
        retrofit.client.Header[] headerArray10 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList11 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList11, headerArray10);
        retrofit.mime.TypedOutput typedOutput13 = null;
        retrofit.client.Request request14 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList11, typedOutput13);
        java.lang.String str15 = request14.url;
        java.util.List<retrofit.client.Header> headerList16 = request14.headers;
        retrofit.mime.TypedOutput typedOutput17 = null;
        retrofit.client.Request request18 = new retrofit.client.Request("", "", headerList16, typedOutput17);
        retrofit.mime.TypedOutput typedOutput19 = request18.body;
        java.util.List<retrofit.client.Header> headerList20 = request18.headers;
        retrofit.mime.TypedOutput typedOutput21 = null;
        retrofit.client.Request request22 = new retrofit.client.Request("", "hi!", headerList20, typedOutput21);
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("", "hi!", headerList20, typedOutput23);
        java.util.List<retrofit.client.Header> headerList25 = request24.getHeaders();
        retrofit.mime.TypedOutput typedOutput26 = null;
        retrofit.client.Request request27 = new retrofit.client.Request("hi!", "hi!", headerList25, typedOutput26);
        java.lang.String str28 = request27.url;
        org.junit.Assert.assertNotNull(headerArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(headerList16);
        org.junit.Assert.assertNull(typedOutput19);
        org.junit.Assert.assertNotNull(headerList20);
        org.junit.Assert.assertNotNull(headerList25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
    }

    @Test
    public void test0220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0220");
        retrofit.client.Header[] headerArray2 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList3 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList3, headerArray2);
        retrofit.mime.TypedOutput typedOutput5 = null;
        retrofit.client.Request request6 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList3, typedOutput5);
        java.util.List<retrofit.client.Header> headerList7 = request6.headers;
        java.lang.String str8 = request6.getMethod();
        java.lang.Class<?> wildcardClass9 = request6.getClass();
        org.junit.Assert.assertNotNull(headerArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(headerList7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0221");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.converter.Converter converter3 = requestBuilder1.getconverter();
        java.lang.Object[] objArray6 = new java.lang.Object[] { 0.0f, 100.0d };
        retrofit.RequestBuilder requestBuilder7 = requestBuilder1.args(objArray6);
        requestBuilder7.setapiUrl("hi!");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str10 = requestBuilder7.buildRelativeUrl();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[0.0, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[0.0, 100.0]");
        org.junit.Assert.assertNotNull(requestBuilder7);
    }

    @Test
    public void test0222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0222");
        retrofit.converter.Converter converter2 = null;
        retrofit.RequestBuilder requestBuilder3 = new retrofit.RequestBuilder(converter2);
        java.util.List<retrofit.client.Header> headerList4 = requestBuilder3.headers;
        retrofit.client.Header[] headerArray9 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList10 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList10, headerArray9);
        retrofit.mime.TypedOutput typedOutput12 = null;
        retrofit.client.Request request13 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList10, typedOutput12);
        java.util.List<retrofit.client.Header> headerList14 = request13.headers;
        java.lang.Object[] objArray16 = new java.lang.Object[] { true, (short) 1, request13, 0 };
        requestBuilder3.args = objArray16;
        retrofit.converter.Converter converter18 = requestBuilder3.converter;
        java.lang.Object[] objArray19 = requestBuilder3.args;
        retrofit.converter.Converter converter20 = null;
        retrofit.RequestBuilder requestBuilder21 = new retrofit.RequestBuilder(converter20);
        java.util.List<retrofit.client.Header> headerList22 = requestBuilder21.headers;
        retrofit.client.Header[] headerArray27 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList28 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList28, headerArray27);
        retrofit.mime.TypedOutput typedOutput30 = null;
        retrofit.client.Request request31 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList28, typedOutput30);
        java.util.List<retrofit.client.Header> headerList32 = request31.headers;
        java.lang.Object[] objArray34 = new java.lang.Object[] { true, (short) 1, request31, 0 };
        requestBuilder21.args = objArray34;
        retrofit.converter.Converter converter36 = requestBuilder21.converter;
        java.lang.Object[] objArray37 = requestBuilder21.args;
        requestBuilder3.setargs(objArray37);
        retrofit.client.Header[] headerArray43 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList44 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList44, headerArray43);
        retrofit.mime.TypedOutput typedOutput46 = null;
        retrofit.client.Request request47 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList44, typedOutput46);
        java.lang.String str48 = request47.url;
        java.util.List<retrofit.client.Header> headerList49 = request47.headers;
        retrofit.mime.TypedOutput typedOutput50 = null;
        retrofit.client.Request request51 = new retrofit.client.Request("", "", headerList49, typedOutput50);
        retrofit.mime.TypedOutput typedOutput52 = request51.body;
        java.util.List<retrofit.client.Header> headerList53 = request51.headers;
        java.util.List<retrofit.client.Header> headerList54 = request51.getHeaders();
        retrofit.RequestBuilder requestBuilder55 = requestBuilder3.headers(headerList54);
        retrofit.mime.TypedOutput typedOutput56 = null;
        retrofit.client.Request request57 = new retrofit.client.Request("", "hi!", headerList54, typedOutput56);
        java.lang.String str58 = request57.getMethod();
        java.util.List<retrofit.client.Header> headerList59 = request57.getHeaders();
        java.lang.String str60 = request57.getMethod();
        org.junit.Assert.assertNull(headerList4);
        org.junit.Assert.assertNotNull(headerArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(headerList14);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertNull(converter18);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNull(headerList22);
        org.junit.Assert.assertNotNull(headerArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(headerList32);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertNull(converter36);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertNotNull(headerArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(headerList49);
        org.junit.Assert.assertNull(typedOutput52);
        org.junit.Assert.assertNotNull(headerList53);
        org.junit.Assert.assertNotNull(headerList54);
        org.junit.Assert.assertNotNull(requestBuilder55);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(headerList59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
    }

    @Test
    public void test0223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0223");
        retrofit.converter.Converter converter2 = null;
        retrofit.RequestBuilder requestBuilder3 = new retrofit.RequestBuilder(converter2);
        java.util.List<retrofit.client.Header> headerList4 = requestBuilder3.headers;
        retrofit.client.Header[] headerArray9 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList10 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList10, headerArray9);
        retrofit.mime.TypedOutput typedOutput12 = null;
        retrofit.client.Request request13 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList10, typedOutput12);
        java.util.List<retrofit.client.Header> headerList14 = request13.headers;
        java.lang.Object[] objArray16 = new java.lang.Object[] { true, (short) 1, request13, 0 };
        requestBuilder3.args = objArray16;
        retrofit.client.Header[] headerArray20 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList21 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList21, headerArray20);
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList21, typedOutput23);
        java.util.List<retrofit.client.Header> headerList25 = request24.headers;
        requestBuilder3.setheaders(headerList25);
        retrofit.mime.TypedOutput typedOutput27 = null;
        retrofit.client.Request request28 = new retrofit.client.Request("hi!", "hi!", headerList25, typedOutput27);
        java.util.List<retrofit.client.Header> headerList29 = request28.headers;
        java.util.List<retrofit.client.Header> headerList30 = request28.headers;
        java.lang.String str31 = request28.url;
        java.lang.String str32 = request28.getMethod();
        retrofit.mime.TypedOutput typedOutput33 = request28.body;
        org.junit.Assert.assertNull(headerList4);
        org.junit.Assert.assertNotNull(headerArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(headerList14);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertNotNull(headerArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(headerList25);
        org.junit.Assert.assertNotNull(headerList29);
        org.junit.Assert.assertNotNull(headerList30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
        org.junit.Assert.assertNull(typedOutput33);
    }

    @Test
    public void test0224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0224");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        java.util.List<retrofit.client.Header> headerList12 = request11.headers;
        java.lang.Object[] objArray14 = new java.lang.Object[] { true, (short) 1, request11, 0 };
        requestBuilder1.args = objArray14;
        retrofit.converter.Converter converter16 = requestBuilder1.converter;
        java.util.List<retrofit.client.Header> headerList17 = requestBuilder1.headers;
        requestBuilder1.apiUrl = "hi!";
        retrofit.converter.Converter converter20 = requestBuilder1.converter;
        requestBuilder1.setapiUrl("hi!");
        requestBuilder1.apiUrl = "hi!";
        java.lang.Class<?> wildcardClass25 = requestBuilder1.getClass();
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNull(headerList17);
        org.junit.Assert.assertNull(converter20);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test0225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0225");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        java.util.List<retrofit.client.Header> headerList12 = request11.headers;
        java.lang.Object[] objArray14 = new java.lang.Object[] { true, (short) 1, request11, 0 };
        requestBuilder1.args = objArray14;
        retrofit.converter.Converter converter16 = requestBuilder1.converter;
        java.util.List<retrofit.client.Header> headerList17 = requestBuilder1.headers;
        requestBuilder1.apiUrl = "hi!";
        java.lang.Object[] objArray20 = requestBuilder1.args;
        java.util.List<retrofit.client.Header> headerList21 = requestBuilder1.getheaders();
        java.util.List<retrofit.client.Header> headerList22 = requestBuilder1.getheaders();
        retrofit.RequestBuilder requestBuilder24 = requestBuilder1.apiUrl("");
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request25 = requestBuilder24.build();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNull(headerList17);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertNull(headerList21);
        org.junit.Assert.assertNull(headerList22);
        org.junit.Assert.assertNotNull(requestBuilder24);
    }

    @Test
    public void test0226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0226");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.lang.Object[] objArray2 = requestBuilder1.getargs();
        retrofit.converter.Converter converter3 = requestBuilder1.getconverter();
        retrofit.converter.Converter converter4 = null;
        retrofit.RequestBuilder requestBuilder5 = new retrofit.RequestBuilder(converter4);
        java.util.List<retrofit.client.Header> headerList6 = requestBuilder5.headers;
        retrofit.converter.Converter converter7 = null;
        retrofit.RequestBuilder requestBuilder8 = new retrofit.RequestBuilder(converter7);
        java.util.List<retrofit.client.Header> headerList9 = requestBuilder8.headers;
        retrofit.client.Header[] headerArray14 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList15 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList15, headerArray14);
        retrofit.mime.TypedOutput typedOutput17 = null;
        retrofit.client.Request request18 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList15, typedOutput17);
        java.util.List<retrofit.client.Header> headerList19 = request18.headers;
        java.lang.Object[] objArray21 = new java.lang.Object[] { true, (short) 1, request18, 0 };
        requestBuilder8.args = objArray21;
        requestBuilder5.setargs(objArray21);
        retrofit.RequestBuilder requestBuilder24 = requestBuilder1.args(objArray21);
        java.lang.Object[] objArray25 = requestBuilder1.args;
        java.util.List<retrofit.client.Header> headerList26 = requestBuilder1.headers;
        java.lang.String str27 = requestBuilder1.getapiUrl();
        java.util.List<retrofit.client.Header> headerList28 = requestBuilder1.headers;
        java.lang.String str29 = requestBuilder1.getapiUrl();
        org.junit.Assert.assertNull(objArray2);
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(headerList6);
        org.junit.Assert.assertNull(headerList9);
        org.junit.Assert.assertNotNull(headerArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(headerList19);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertNotNull(requestBuilder24);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertNull(headerList26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(headerList28);
        org.junit.Assert.assertNull(str29);
    }

    @Test
    public void test0227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0227");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        retrofit.converter.Converter converter2 = requestBuilder1.converter;
        java.lang.Object[] objArray3 = requestBuilder1.args;
        requestBuilder1.setapiUrl("");
        java.util.List<retrofit.client.Header> headerList6 = requestBuilder1.getheaders();
        org.junit.Assert.assertNull(converter2);
        org.junit.Assert.assertNull(objArray3);
        org.junit.Assert.assertNull(headerList6);
    }

    @Test
    public void test0228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0228");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        java.util.List<retrofit.client.Header> headerList12 = request11.headers;
        java.lang.Object[] objArray14 = new java.lang.Object[] { true, (short) 1, request11, 0 };
        requestBuilder1.args = objArray14;
        retrofit.converter.Converter converter16 = requestBuilder1.converter;
        requestBuilder1.setapiUrl("hi!");
        // The following exception was thrown during execution in test generation
        try {
            retrofit.mime.TypedOutput typedOutput19 = requestBuilder1.buildBody();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNull(converter16);
    }

    @Test
    public void test0229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0229");
        retrofit.client.Header[] headerArray4 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList5 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList5, headerArray4);
        retrofit.mime.TypedOutput typedOutput7 = null;
        retrofit.client.Request request8 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList5, typedOutput7);
        java.lang.String str9 = request8.url;
        java.util.List<retrofit.client.Header> headerList10 = request8.headers;
        retrofit.mime.TypedOutput typedOutput11 = null;
        retrofit.client.Request request12 = new retrofit.client.Request("", "", headerList10, typedOutput11);
        retrofit.mime.TypedOutput typedOutput13 = request12.body;
        java.lang.String str14 = request12.getUrl();
        java.lang.String str15 = request12.url;
        java.util.List<retrofit.client.Header> headerList16 = request12.headers;
        retrofit.mime.TypedOutput typedOutput17 = request12.getBody();
        java.lang.String str18 = request12.getUrl();
        java.lang.String str19 = request12.getMethod();
        org.junit.Assert.assertNotNull(headerArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(headerList10);
        org.junit.Assert.assertNull(typedOutput13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(headerList16);
        org.junit.Assert.assertNull(typedOutput17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
    }

    @Test
    public void test0230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0230");
        retrofit.client.Header[] headerArray6 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList7 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList7, headerArray6);
        retrofit.mime.TypedOutput typedOutput9 = null;
        retrofit.client.Request request10 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList7, typedOutput9);
        java.lang.String str11 = request10.url;
        java.util.List<retrofit.client.Header> headerList12 = request10.headers;
        retrofit.mime.TypedOutput typedOutput13 = request10.body;
        retrofit.mime.TypedOutput typedOutput14 = request10.body;
        java.util.List<retrofit.client.Header> headerList15 = request10.headers;
        retrofit.mime.TypedOutput typedOutput16 = null;
        retrofit.client.Request request17 = new retrofit.client.Request("", "hi!", headerList15, typedOutput16);
        java.util.List<retrofit.client.Header> headerList18 = request17.headers;
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("", "", headerList18, typedOutput19);
        retrofit.mime.TypedOutput typedOutput21 = request20.body;
        java.lang.String str22 = request20.url;
        org.junit.Assert.assertNotNull(headerArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNull(typedOutput13);
        org.junit.Assert.assertNull(typedOutput14);
        org.junit.Assert.assertNotNull(headerList15);
        org.junit.Assert.assertNotNull(headerList18);
        org.junit.Assert.assertNull(typedOutput21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
    }

    @Test
    public void test0231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0231");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        java.util.List<retrofit.client.Header> headerList12 = request11.headers;
        java.lang.Object[] objArray14 = new java.lang.Object[] { true, (short) 1, request11, 0 };
        requestBuilder1.args = objArray14;
        retrofit.converter.Converter converter16 = requestBuilder1.converter;
        java.util.List<retrofit.client.Header> headerList17 = requestBuilder1.headers;
        java.lang.String str18 = requestBuilder1.getapiUrl();
        java.util.List<retrofit.client.Header> headerList19 = requestBuilder1.headers;
        java.util.List<retrofit.client.Header> headerList20 = null;
        requestBuilder1.headers = headerList20;
        java.lang.String str22 = requestBuilder1.apiUrl;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str23 = requestBuilder1.buildRelativeUrl();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNull(headerList17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(headerList19);
        org.junit.Assert.assertNull(str22);
    }

    @Test
    public void test0232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0232");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.lang.Object[] objArray2 = requestBuilder1.getargs();
        retrofit.converter.Converter converter3 = requestBuilder1.getconverter();
        requestBuilder1.apiUrl = "";
        java.lang.Object[] objArray6 = requestBuilder1.getargs();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request7 = requestBuilder1.build();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(objArray2);
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(objArray6);
    }

    @Test
    public void test0233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0233");
        retrofit.client.Header[] headerArray4 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList5 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList5, headerArray4);
        retrofit.mime.TypedOutput typedOutput7 = null;
        retrofit.client.Request request8 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList5, typedOutput7);
        java.lang.String str9 = request8.url;
        java.util.List<retrofit.client.Header> headerList10 = request8.headers;
        retrofit.mime.TypedOutput typedOutput11 = null;
        retrofit.client.Request request12 = new retrofit.client.Request("", "", headerList10, typedOutput11);
        retrofit.mime.TypedOutput typedOutput13 = request12.body;
        java.util.List<retrofit.client.Header> headerList14 = request12.headers;
        java.util.List<retrofit.client.Header> headerList15 = request12.getHeaders();
        java.lang.Class<?> wildcardClass16 = request12.getClass();
        org.junit.Assert.assertNotNull(headerArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(headerList10);
        org.junit.Assert.assertNull(typedOutput13);
        org.junit.Assert.assertNotNull(headerList14);
        org.junit.Assert.assertNotNull(headerList15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0234");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        java.util.List<retrofit.client.Header> headerList12 = request11.headers;
        java.lang.Object[] objArray14 = new java.lang.Object[] { true, (short) 1, request11, 0 };
        requestBuilder1.args = objArray14;
        retrofit.converter.Converter converter16 = requestBuilder1.converter;
        java.util.List<retrofit.client.Header> headerList17 = requestBuilder1.headers;
        requestBuilder1.apiUrl = "hi!";
        retrofit.client.Header[] headerArray24 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList25 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList25, headerArray24);
        retrofit.mime.TypedOutput typedOutput27 = null;
        retrofit.client.Request request28 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList25, typedOutput27);
        java.lang.String str29 = request28.url;
        java.util.List<retrofit.client.Header> headerList30 = request28.headers;
        retrofit.mime.TypedOutput typedOutput31 = null;
        retrofit.client.Request request32 = new retrofit.client.Request("", "", headerList30, typedOutput31);
        retrofit.RequestBuilder requestBuilder33 = requestBuilder1.headers(headerList30);
        java.util.List<retrofit.client.Header> headerList34 = requestBuilder1.headers;
        java.util.List<retrofit.client.Header> headerList35 = requestBuilder1.headers;
        java.lang.String str36 = requestBuilder1.apiUrl;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.mime.TypedOutput typedOutput37 = requestBuilder1.buildBody();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNull(headerList17);
        org.junit.Assert.assertNotNull(headerArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(headerList30);
        org.junit.Assert.assertNotNull(requestBuilder33);
        org.junit.Assert.assertNotNull(headerList34);
        org.junit.Assert.assertNotNull(headerList35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
    }

    @Test
    public void test0235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0235");
        retrofit.client.Header[] headerArray10 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList11 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList11, headerArray10);
        retrofit.mime.TypedOutput typedOutput13 = null;
        retrofit.client.Request request14 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList11, typedOutput13);
        java.lang.String str15 = request14.url;
        java.util.List<retrofit.client.Header> headerList16 = request14.headers;
        retrofit.mime.TypedOutput typedOutput17 = null;
        retrofit.client.Request request18 = new retrofit.client.Request("", "", headerList16, typedOutput17);
        retrofit.mime.TypedOutput typedOutput19 = request18.body;
        java.util.List<retrofit.client.Header> headerList20 = request18.headers;
        retrofit.mime.TypedOutput typedOutput21 = null;
        retrofit.client.Request request22 = new retrofit.client.Request("hi!", "", headerList20, typedOutput21);
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("", "hi!", headerList20, typedOutput23);
        retrofit.mime.TypedOutput typedOutput25 = null;
        retrofit.client.Request request26 = new retrofit.client.Request("hi!", "", headerList20, typedOutput25);
        java.util.List<retrofit.client.Header> headerList27 = request26.getHeaders();
        retrofit.mime.TypedOutput typedOutput28 = request26.getBody();
        org.junit.Assert.assertNotNull(headerArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(headerList16);
        org.junit.Assert.assertNull(typedOutput19);
        org.junit.Assert.assertNotNull(headerList20);
        org.junit.Assert.assertNotNull(headerList27);
        org.junit.Assert.assertNull(typedOutput28);
    }

    @Test
    public void test0236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0236");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        requestBuilder1.setapiUrl("");
        java.lang.String str4 = requestBuilder1.getapiUrl();
        requestBuilder1.setapiUrl("hi!");
        retrofit.RequestBuilder requestBuilder8 = requestBuilder1.apiUrl("");
        retrofit.converter.Converter converter9 = null;
        retrofit.RequestBuilder requestBuilder10 = new retrofit.RequestBuilder(converter9);
        java.util.List<retrofit.client.Header> headerList11 = requestBuilder10.headers;
        retrofit.converter.Converter converter12 = null;
        retrofit.RequestBuilder requestBuilder13 = new retrofit.RequestBuilder(converter12);
        java.util.List<retrofit.client.Header> headerList14 = requestBuilder13.headers;
        retrofit.client.Header[] headerArray19 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList20 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList20, headerArray19);
        retrofit.mime.TypedOutput typedOutput22 = null;
        retrofit.client.Request request23 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList20, typedOutput22);
        java.util.List<retrofit.client.Header> headerList24 = request23.headers;
        java.lang.Object[] objArray26 = new java.lang.Object[] { true, (short) 1, request23, 0 };
        requestBuilder13.args = objArray26;
        requestBuilder10.setargs(objArray26);
        retrofit.RequestBuilder requestBuilder29 = requestBuilder1.args(objArray26);
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request30 = requestBuilder29.build();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(requestBuilder8);
        org.junit.Assert.assertNull(headerList11);
        org.junit.Assert.assertNull(headerList14);
        org.junit.Assert.assertNotNull(headerArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(headerList24);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertNotNull(requestBuilder29);
    }

    @Test
    public void test0237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0237");
        retrofit.client.Header[] headerArray4 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList5 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList5, headerArray4);
        retrofit.mime.TypedOutput typedOutput7 = null;
        retrofit.client.Request request8 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList5, typedOutput7);
        java.lang.String str9 = request8.url;
        java.util.List<retrofit.client.Header> headerList10 = request8.headers;
        retrofit.mime.TypedOutput typedOutput11 = request8.body;
        retrofit.mime.TypedOutput typedOutput12 = request8.body;
        java.util.List<retrofit.client.Header> headerList13 = request8.headers;
        retrofit.mime.TypedOutput typedOutput14 = null;
        retrofit.client.Request request15 = new retrofit.client.Request("hi!", "hi!", headerList13, typedOutput14);
        java.lang.String str16 = request15.url;
        java.lang.String str17 = request15.getMethod();
        retrofit.mime.TypedOutput typedOutput18 = request15.body;
        retrofit.mime.TypedOutput typedOutput19 = request15.getBody();
        java.lang.String str20 = request15.getMethod();
        java.lang.Class<?> wildcardClass21 = request15.getClass();
        org.junit.Assert.assertNotNull(headerArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(headerList10);
        org.junit.Assert.assertNull(typedOutput11);
        org.junit.Assert.assertNull(typedOutput12);
        org.junit.Assert.assertNotNull(headerList13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNull(typedOutput18);
        org.junit.Assert.assertNull(typedOutput19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0238");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        java.util.List<retrofit.client.Header> headerList12 = request11.headers;
        java.lang.Object[] objArray14 = new java.lang.Object[] { true, (short) 1, request11, 0 };
        requestBuilder1.args = objArray14;
        retrofit.converter.Converter converter16 = requestBuilder1.converter;
        java.lang.Object[] objArray17 = requestBuilder1.args;
        java.lang.Object[] objArray18 = null;
        retrofit.RequestBuilder requestBuilder19 = requestBuilder1.args(objArray18);
        java.lang.Object[] objArray20 = requestBuilder1.getargs();
        retrofit.converter.Converter converter21 = null;
        retrofit.RequestBuilder requestBuilder22 = new retrofit.RequestBuilder(converter21);
        java.lang.Object[] objArray23 = requestBuilder22.getargs();
        retrofit.converter.Converter converter24 = requestBuilder22.getconverter();
        retrofit.converter.Converter converter25 = null;
        retrofit.RequestBuilder requestBuilder26 = new retrofit.RequestBuilder(converter25);
        java.util.List<retrofit.client.Header> headerList27 = requestBuilder26.headers;
        retrofit.converter.Converter converter28 = null;
        retrofit.RequestBuilder requestBuilder29 = new retrofit.RequestBuilder(converter28);
        java.util.List<retrofit.client.Header> headerList30 = requestBuilder29.headers;
        retrofit.client.Header[] headerArray35 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList36 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList36, headerArray35);
        retrofit.mime.TypedOutput typedOutput38 = null;
        retrofit.client.Request request39 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList36, typedOutput38);
        java.util.List<retrofit.client.Header> headerList40 = request39.headers;
        java.lang.Object[] objArray42 = new java.lang.Object[] { true, (short) 1, request39, 0 };
        requestBuilder29.args = objArray42;
        requestBuilder26.setargs(objArray42);
        retrofit.RequestBuilder requestBuilder45 = requestBuilder22.args(objArray42);
        requestBuilder1.setargs(objArray42);
        retrofit.client.Header[] headerArray51 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList52 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList52, headerArray51);
        retrofit.mime.TypedOutput typedOutput54 = null;
        retrofit.client.Request request55 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList52, typedOutput54);
        java.lang.String str56 = request55.url;
        java.util.List<retrofit.client.Header> headerList57 = request55.headers;
        retrofit.mime.TypedOutput typedOutput58 = null;
        retrofit.client.Request request59 = new retrofit.client.Request("", "hi!", headerList57, typedOutput58);
        requestBuilder1.setheaders(headerList57);
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertNotNull(requestBuilder19);
        org.junit.Assert.assertNull(objArray20);
        org.junit.Assert.assertNull(objArray23);
        org.junit.Assert.assertNull(converter24);
        org.junit.Assert.assertNull(headerList27);
        org.junit.Assert.assertNull(headerList30);
        org.junit.Assert.assertNotNull(headerArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(headerList40);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertNotNull(requestBuilder45);
        org.junit.Assert.assertNotNull(headerArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(headerList57);
    }

    @Test
    public void test0239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0239");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        requestBuilder1.setapiUrl("");
        java.lang.String str4 = requestBuilder1.getapiUrl();
        java.lang.String str5 = requestBuilder1.apiUrl;
        retrofit.RequestBuilder requestBuilder7 = requestBuilder1.apiUrl("hi!");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str8 = requestBuilder7.buildRelativeUrl();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(requestBuilder7);
    }

    @Test
    public void test0240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0240");
        retrofit.client.Header[] headerArray8 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList9 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList9, headerArray8);
        retrofit.mime.TypedOutput typedOutput11 = null;
        retrofit.client.Request request12 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList9, typedOutput11);
        retrofit.mime.TypedOutput typedOutput13 = null;
        retrofit.client.Request request14 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList9, typedOutput13);
        retrofit.mime.TypedOutput typedOutput15 = null;
        retrofit.client.Request request16 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList9, typedOutput15);
        retrofit.mime.TypedOutput typedOutput17 = null;
        retrofit.client.Request request18 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList9, typedOutput17);
        retrofit.mime.TypedOutput typedOutput19 = request18.getBody();
        java.lang.String str20 = request18.method;
        java.lang.String str21 = request18.getUrl();
        java.util.List<retrofit.client.Header> headerList22 = request18.headers;
        java.lang.Class<?> wildcardClass23 = request18.getClass();
        org.junit.Assert.assertNotNull(headerArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(typedOutput19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(headerList22);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0241");
        retrofit.client.Header[] headerArray2 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList3 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList3, headerArray2);
        retrofit.mime.TypedOutput typedOutput5 = null;
        retrofit.client.Request request6 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList3, typedOutput5);
        java.util.List<retrofit.client.Header> headerList7 = request6.headers;
        java.lang.String str8 = request6.getMethod();
        java.lang.String str9 = request6.method;
        org.junit.Assert.assertNotNull(headerArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(headerList7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test0242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0242");
        retrofit.client.Header[] headerArray4 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList5 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList5, headerArray4);
        retrofit.mime.TypedOutput typedOutput7 = null;
        retrofit.client.Request request8 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList5, typedOutput7);
        java.lang.String str9 = request8.getUrl();
        java.util.List<retrofit.client.Header> headerList10 = request8.getHeaders();
        retrofit.mime.TypedOutput typedOutput11 = null;
        retrofit.client.Request request12 = new retrofit.client.Request("hi!", "", headerList10, typedOutput11);
        java.lang.String str13 = request12.getUrl();
        java.lang.String str14 = request12.method;
        org.junit.Assert.assertNotNull(headerArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(headerList10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
    }

    @Test
    public void test0243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0243");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        retrofit.converter.Converter converter2 = requestBuilder1.converter;
        requestBuilder1.setapiUrl("");
        // The following exception was thrown during execution in test generation
        try {
            retrofit.mime.TypedOutput typedOutput5 = requestBuilder1.buildBody();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(converter2);
    }

    @Test
    public void test0244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0244");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        retrofit.converter.Converter converter2 = requestBuilder1.converter;
        retrofit.converter.Converter converter3 = null;
        retrofit.RequestBuilder requestBuilder4 = new retrofit.RequestBuilder(converter3);
        java.util.List<retrofit.client.Header> headerList5 = requestBuilder4.headers;
        retrofit.client.Header[] headerArray10 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList11 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList11, headerArray10);
        retrofit.mime.TypedOutput typedOutput13 = null;
        retrofit.client.Request request14 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList11, typedOutput13);
        java.util.List<retrofit.client.Header> headerList15 = request14.headers;
        java.lang.Object[] objArray17 = new java.lang.Object[] { true, (short) 1, request14, 0 };
        requestBuilder4.args = objArray17;
        retrofit.converter.Converter converter19 = requestBuilder4.converter;
        java.util.List<retrofit.client.Header> headerList20 = requestBuilder4.headers;
        java.util.List<retrofit.client.Header> headerList21 = requestBuilder4.headers;
        java.lang.Object[] objArray22 = requestBuilder4.getargs();
        requestBuilder1.args = objArray22;
        org.junit.Assert.assertNull(converter2);
        org.junit.Assert.assertNull(headerList5);
        org.junit.Assert.assertNotNull(headerArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(headerList15);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertNull(converter19);
        org.junit.Assert.assertNull(headerList20);
        org.junit.Assert.assertNull(headerList21);
        org.junit.Assert.assertNotNull(objArray22);
    }

    @Test
    public void test0245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0245");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        java.util.List<retrofit.client.Header> headerList12 = request11.headers;
        java.lang.Object[] objArray14 = new java.lang.Object[] { true, (short) 1, request11, 0 };
        requestBuilder1.args = objArray14;
        retrofit.converter.Converter converter16 = requestBuilder1.converter;
        java.util.List<retrofit.client.Header> headerList17 = requestBuilder1.headers;
        java.lang.String str18 = requestBuilder1.getapiUrl();
        retrofit.client.Header[] headerArray21 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList22 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList22, headerArray21);
        retrofit.mime.TypedOutput typedOutput24 = null;
        retrofit.client.Request request25 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList22, typedOutput24);
        java.util.List<retrofit.client.Header> headerList26 = request25.headers;
        requestBuilder1.setheaders(headerList26);
        retrofit.converter.Converter converter28 = requestBuilder1.converter;
        java.util.List<retrofit.client.Header> headerList29 = requestBuilder1.getheaders();
        java.lang.Object[] objArray30 = requestBuilder1.args;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str31 = requestBuilder1.buildRelativeUrl();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNull(headerList17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(headerArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(headerList26);
        org.junit.Assert.assertNull(converter28);
        org.junit.Assert.assertNotNull(headerList29);
        org.junit.Assert.assertNotNull(objArray30);
    }

    @Test
    public void test0246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0246");
        retrofit.client.Header[] headerArray4 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList5 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList5, headerArray4);
        retrofit.mime.TypedOutput typedOutput7 = null;
        retrofit.client.Request request8 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList5, typedOutput7);
        retrofit.mime.TypedOutput typedOutput9 = null;
        retrofit.client.Request request10 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList5, typedOutput9);
        java.lang.String str11 = request10.getUrl();
        java.lang.String str12 = request10.url;
        retrofit.mime.TypedOutput typedOutput13 = request10.getBody();
        org.junit.Assert.assertNotNull(headerArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNull(typedOutput13);
    }

    @Test
    public void test0247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0247");
        retrofit.client.Header[] headerArray8 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList9 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList9, headerArray8);
        retrofit.mime.TypedOutput typedOutput11 = null;
        retrofit.client.Request request12 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList9, typedOutput11);
        java.lang.String str13 = request12.url;
        java.util.List<retrofit.client.Header> headerList14 = request12.headers;
        retrofit.mime.TypedOutput typedOutput15 = null;
        retrofit.client.Request request16 = new retrofit.client.Request("", "hi!", headerList14, typedOutput15);
        retrofit.mime.TypedOutput typedOutput17 = null;
        retrofit.client.Request request18 = new retrofit.client.Request("hi!", "hi!", headerList14, typedOutput17);
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("hi!", "hi!", headerList14, typedOutput19);
        org.junit.Assert.assertNotNull(headerArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(headerList14);
    }

    @Test
    public void test0248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0248");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        java.util.List<retrofit.client.Header> headerList12 = request11.headers;
        java.lang.Object[] objArray14 = new java.lang.Object[] { true, (short) 1, request11, 0 };
        requestBuilder1.args = objArray14;
        retrofit.converter.Converter converter16 = requestBuilder1.converter;
        java.util.List<retrofit.client.Header> headerList17 = requestBuilder1.headers;
        requestBuilder1.apiUrl = "hi!";
        java.lang.Object[] objArray20 = requestBuilder1.getargs();
        requestBuilder1.apiUrl = "";
        java.util.List<retrofit.client.Header> headerList23 = requestBuilder1.getheaders();
        retrofit.converter.Converter converter26 = null;
        retrofit.RequestBuilder requestBuilder27 = new retrofit.RequestBuilder(converter26);
        java.util.List<retrofit.client.Header> headerList28 = requestBuilder27.headers;
        retrofit.client.Header[] headerArray33 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList34 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList34, headerArray33);
        retrofit.mime.TypedOutput typedOutput36 = null;
        retrofit.client.Request request37 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList34, typedOutput36);
        java.util.List<retrofit.client.Header> headerList38 = request37.headers;
        java.lang.Object[] objArray40 = new java.lang.Object[] { true, (short) 1, request37, 0 };
        requestBuilder27.args = objArray40;
        retrofit.converter.Converter converter42 = requestBuilder27.converter;
        java.lang.Object[] objArray43 = requestBuilder27.args;
        retrofit.converter.Converter converter44 = null;
        retrofit.RequestBuilder requestBuilder45 = new retrofit.RequestBuilder(converter44);
        java.util.List<retrofit.client.Header> headerList46 = requestBuilder45.headers;
        retrofit.client.Header[] headerArray51 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList52 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList52, headerArray51);
        retrofit.mime.TypedOutput typedOutput54 = null;
        retrofit.client.Request request55 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList52, typedOutput54);
        java.util.List<retrofit.client.Header> headerList56 = request55.headers;
        java.lang.Object[] objArray58 = new java.lang.Object[] { true, (short) 1, request55, 0 };
        requestBuilder45.args = objArray58;
        retrofit.converter.Converter converter60 = requestBuilder45.converter;
        java.lang.Object[] objArray61 = requestBuilder45.args;
        requestBuilder27.setargs(objArray61);
        retrofit.client.Header[] headerArray67 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList68 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList68, headerArray67);
        retrofit.mime.TypedOutput typedOutput70 = null;
        retrofit.client.Request request71 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList68, typedOutput70);
        java.lang.String str72 = request71.url;
        java.util.List<retrofit.client.Header> headerList73 = request71.headers;
        retrofit.mime.TypedOutput typedOutput74 = null;
        retrofit.client.Request request75 = new retrofit.client.Request("", "", headerList73, typedOutput74);
        retrofit.mime.TypedOutput typedOutput76 = request75.body;
        java.util.List<retrofit.client.Header> headerList77 = request75.headers;
        java.util.List<retrofit.client.Header> headerList78 = request75.getHeaders();
        retrofit.RequestBuilder requestBuilder79 = requestBuilder27.headers(headerList78);
        retrofit.mime.TypedOutput typedOutput80 = null;
        retrofit.client.Request request81 = new retrofit.client.Request("", "hi!", headerList78, typedOutput80);
        java.lang.String str82 = request81.getMethod();
        java.util.List<retrofit.client.Header> headerList83 = request81.getHeaders();
        requestBuilder1.setheaders(headerList83);
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request85 = requestBuilder1.build();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNull(headerList17);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertNull(headerList23);
        org.junit.Assert.assertNull(headerList28);
        org.junit.Assert.assertNotNull(headerArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(headerList38);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertNull(converter42);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertNull(headerList46);
        org.junit.Assert.assertNotNull(headerArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(headerList56);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertNull(converter60);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertNotNull(headerArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(headerList73);
        org.junit.Assert.assertNull(typedOutput76);
        org.junit.Assert.assertNotNull(headerList77);
        org.junit.Assert.assertNotNull(headerList78);
        org.junit.Assert.assertNotNull(requestBuilder79);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertNotNull(headerList83);
    }

    @Test
    public void test0249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0249");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        requestBuilder1.setapiUrl("");
        java.lang.String str4 = requestBuilder1.getapiUrl();
        requestBuilder1.setapiUrl("hi!");
        retrofit.RequestBuilder requestBuilder8 = requestBuilder1.apiUrl("");
        requestBuilder1.apiUrl = "";
        java.util.List<retrofit.client.Header> headerList11 = requestBuilder1.headers;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request12 = requestBuilder1.build();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(requestBuilder8);
        org.junit.Assert.assertNull(headerList11);
    }

    @Test
    public void test0250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0250");
        retrofit.client.Header[] headerArray6 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList7 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList7, headerArray6);
        retrofit.mime.TypedOutput typedOutput9 = null;
        retrofit.client.Request request10 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList7, typedOutput9);
        java.lang.String str11 = request10.url;
        java.util.List<retrofit.client.Header> headerList12 = request10.headers;
        retrofit.mime.TypedOutput typedOutput13 = request10.body;
        retrofit.mime.TypedOutput typedOutput14 = request10.body;
        java.util.List<retrofit.client.Header> headerList15 = request10.headers;
        retrofit.mime.TypedOutput typedOutput16 = null;
        retrofit.client.Request request17 = new retrofit.client.Request("hi!", "hi!", headerList15, typedOutput16);
        java.util.List<retrofit.client.Header> headerList18 = request17.getHeaders();
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("hi!", "hi!", headerList18, typedOutput19);
        retrofit.mime.TypedOutput typedOutput21 = request20.body;
        java.lang.String str22 = request20.getMethod();
        org.junit.Assert.assertNotNull(headerArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNull(typedOutput13);
        org.junit.Assert.assertNull(typedOutput14);
        org.junit.Assert.assertNotNull(headerList15);
        org.junit.Assert.assertNotNull(headerList18);
        org.junit.Assert.assertNull(typedOutput21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
    }

    @Test
    public void test0251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0251");
        retrofit.client.Header[] headerArray4 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList5 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList5, headerArray4);
        retrofit.mime.TypedOutput typedOutput7 = null;
        retrofit.client.Request request8 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList5, typedOutput7);
        retrofit.mime.TypedOutput typedOutput9 = null;
        retrofit.client.Request request10 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList5, typedOutput9);
        java.lang.String str11 = request10.getUrl();
        java.lang.String str12 = request10.getMethod();
        org.junit.Assert.assertNotNull(headerArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test0252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0252");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        java.util.List<retrofit.client.Header> headerList12 = request11.headers;
        java.lang.Object[] objArray14 = new java.lang.Object[] { true, (short) 1, request11, 0 };
        requestBuilder1.args = objArray14;
        retrofit.converter.Converter converter16 = requestBuilder1.converter;
        requestBuilder1.setapiUrl("hi!");
        retrofit.converter.Converter converter19 = null;
        retrofit.RequestBuilder requestBuilder20 = new retrofit.RequestBuilder(converter19);
        java.util.List<retrofit.client.Header> headerList21 = requestBuilder20.headers;
        retrofit.client.Header[] headerArray26 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList27 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList27, headerArray26);
        retrofit.mime.TypedOutput typedOutput29 = null;
        retrofit.client.Request request30 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList27, typedOutput29);
        java.util.List<retrofit.client.Header> headerList31 = request30.headers;
        java.lang.Object[] objArray33 = new java.lang.Object[] { true, (short) 1, request30, 0 };
        requestBuilder20.args = objArray33;
        requestBuilder1.args = objArray33;
        java.util.List<retrofit.client.Header> headerList36 = requestBuilder1.getheaders();
        retrofit.converter.Converter converter37 = requestBuilder1.getconverter();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.mime.TypedOutput typedOutput38 = requestBuilder1.buildBody();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNull(headerList21);
        org.junit.Assert.assertNotNull(headerArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(headerList31);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertNull(headerList36);
        org.junit.Assert.assertNull(converter37);
    }

    @Test
    public void test0253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0253");
        retrofit.client.Header[] headerArray2 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList3 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList3, headerArray2);
        retrofit.mime.TypedOutput typedOutput5 = null;
        retrofit.client.Request request6 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList3, typedOutput5);
        java.util.List<retrofit.client.Header> headerList7 = request6.headers;
        java.util.List<retrofit.client.Header> headerList8 = request6.getHeaders();
        java.util.List<retrofit.client.Header> headerList9 = request6.getHeaders();
        org.junit.Assert.assertNotNull(headerArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(headerList7);
        org.junit.Assert.assertNotNull(headerList8);
        org.junit.Assert.assertNotNull(headerList9);
    }

    @Test
    public void test0254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0254");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        requestBuilder1.setapiUrl("");
        java.lang.String str4 = requestBuilder1.getapiUrl();
        requestBuilder1.setapiUrl("hi!");
        retrofit.RequestBuilder requestBuilder8 = requestBuilder1.apiUrl("");
        retrofit.converter.Converter converter9 = null;
        retrofit.RequestBuilder requestBuilder10 = new retrofit.RequestBuilder(converter9);
        java.lang.Object[] objArray11 = requestBuilder10.getargs();
        retrofit.converter.Converter converter12 = requestBuilder10.getconverter();
        retrofit.converter.Converter converter13 = null;
        retrofit.RequestBuilder requestBuilder14 = new retrofit.RequestBuilder(converter13);
        java.util.List<retrofit.client.Header> headerList15 = requestBuilder14.headers;
        retrofit.converter.Converter converter16 = null;
        retrofit.RequestBuilder requestBuilder17 = new retrofit.RequestBuilder(converter16);
        java.util.List<retrofit.client.Header> headerList18 = requestBuilder17.headers;
        retrofit.client.Header[] headerArray23 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList24 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList24, headerArray23);
        retrofit.mime.TypedOutput typedOutput26 = null;
        retrofit.client.Request request27 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList24, typedOutput26);
        java.util.List<retrofit.client.Header> headerList28 = request27.headers;
        java.lang.Object[] objArray30 = new java.lang.Object[] { true, (short) 1, request27, 0 };
        requestBuilder17.args = objArray30;
        requestBuilder14.setargs(objArray30);
        retrofit.RequestBuilder requestBuilder33 = requestBuilder10.args(objArray30);
        java.lang.Object[] objArray34 = requestBuilder10.args;
        requestBuilder1.args = objArray34;
        retrofit.RequestBuilder requestBuilder37 = requestBuilder1.apiUrl("");
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request38 = requestBuilder37.build();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(requestBuilder8);
        org.junit.Assert.assertNull(objArray11);
        org.junit.Assert.assertNull(converter12);
        org.junit.Assert.assertNull(headerList15);
        org.junit.Assert.assertNull(headerList18);
        org.junit.Assert.assertNotNull(headerArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(headerList28);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertNotNull(requestBuilder33);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertNotNull(requestBuilder37);
    }

    @Test
    public void test0255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0255");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        java.util.List<retrofit.client.Header> headerList12 = request11.headers;
        java.lang.Object[] objArray14 = new java.lang.Object[] { true, (short) 1, request11, 0 };
        requestBuilder1.args = objArray14;
        retrofit.converter.Converter converter16 = requestBuilder1.converter;
        java.util.List<retrofit.client.Header> headerList17 = requestBuilder1.headers;
        java.util.List<retrofit.client.Header> headerList18 = requestBuilder1.headers;
        retrofit.RequestBuilder requestBuilder20 = requestBuilder1.apiUrl("");
        retrofit.client.Header[] headerArray25 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList26 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList26, headerArray25);
        retrofit.mime.TypedOutput typedOutput28 = null;
        retrofit.client.Request request29 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList26, typedOutput28);
        java.lang.String str30 = request29.url;
        java.util.List<retrofit.client.Header> headerList31 = request29.headers;
        retrofit.mime.TypedOutput typedOutput32 = request29.body;
        retrofit.mime.TypedOutput typedOutput33 = request29.body;
        java.util.List<retrofit.client.Header> headerList34 = request29.headers;
        retrofit.mime.TypedOutput typedOutput35 = null;
        retrofit.client.Request request36 = new retrofit.client.Request("hi!", "hi!", headerList34, typedOutput35);
        java.util.List<retrofit.client.Header> headerList37 = request36.getHeaders();
        retrofit.RequestBuilder requestBuilder38 = requestBuilder1.headers(headerList37);
        java.lang.Class<?> wildcardClass39 = requestBuilder1.getClass();
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNull(headerList17);
        org.junit.Assert.assertNull(headerList18);
        org.junit.Assert.assertNotNull(requestBuilder20);
        org.junit.Assert.assertNotNull(headerArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(headerList31);
        org.junit.Assert.assertNull(typedOutput32);
        org.junit.Assert.assertNull(typedOutput33);
        org.junit.Assert.assertNotNull(headerList34);
        org.junit.Assert.assertNotNull(headerList37);
        org.junit.Assert.assertNotNull(requestBuilder38);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test0256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0256");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.converter.Converter converter3 = null;
        retrofit.RequestBuilder requestBuilder4 = new retrofit.RequestBuilder(converter3);
        java.util.List<retrofit.client.Header> headerList5 = requestBuilder4.headers;
        retrofit.client.Header[] headerArray10 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList11 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList11, headerArray10);
        retrofit.mime.TypedOutput typedOutput13 = null;
        retrofit.client.Request request14 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList11, typedOutput13);
        java.util.List<retrofit.client.Header> headerList15 = request14.headers;
        java.lang.Object[] objArray17 = new java.lang.Object[] { true, (short) 1, request14, 0 };
        requestBuilder4.args = objArray17;
        requestBuilder1.setargs(objArray17);
        retrofit.converter.Converter converter20 = requestBuilder1.getconverter();
        retrofit.converter.Converter converter21 = requestBuilder1.converter;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request22 = requestBuilder1.build();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNull(headerList5);
        org.junit.Assert.assertNotNull(headerArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(headerList15);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertNull(converter20);
        org.junit.Assert.assertNull(converter21);
    }

    @Test
    public void test0257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0257");
        retrofit.converter.Converter converter4 = null;
        retrofit.RequestBuilder requestBuilder5 = new retrofit.RequestBuilder(converter4);
        java.util.List<retrofit.client.Header> headerList6 = requestBuilder5.headers;
        retrofit.client.Header[] headerArray11 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList12 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList12, headerArray11);
        retrofit.mime.TypedOutput typedOutput14 = null;
        retrofit.client.Request request15 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList12, typedOutput14);
        java.util.List<retrofit.client.Header> headerList16 = request15.headers;
        java.lang.Object[] objArray18 = new java.lang.Object[] { true, (short) 1, request15, 0 };
        requestBuilder5.args = objArray18;
        retrofit.client.Header[] headerArray22 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList23 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList23, headerArray22);
        retrofit.mime.TypedOutput typedOutput25 = null;
        retrofit.client.Request request26 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList23, typedOutput25);
        java.util.List<retrofit.client.Header> headerList27 = request26.headers;
        requestBuilder5.setheaders(headerList27);
        retrofit.mime.TypedOutput typedOutput29 = null;
        retrofit.client.Request request30 = new retrofit.client.Request("hi!", "hi!", headerList27, typedOutput29);
        java.util.List<retrofit.client.Header> headerList31 = request30.headers;
        java.util.List<retrofit.client.Header> headerList32 = request30.headers;
        retrofit.mime.TypedOutput typedOutput33 = null;
        retrofit.client.Request request34 = new retrofit.client.Request("", "", headerList32, typedOutput33);
        org.junit.Assert.assertNull(headerList6);
        org.junit.Assert.assertNotNull(headerArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(headerList16);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertNotNull(headerArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(headerList27);
        org.junit.Assert.assertNotNull(headerList31);
        org.junit.Assert.assertNotNull(headerList32);
    }

    @Test
    public void test0258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0258");
        retrofit.client.Header[] headerArray2 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList3 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList3, headerArray2);
        retrofit.mime.TypedOutput typedOutput5 = null;
        retrofit.client.Request request6 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList3, typedOutput5);
        java.lang.String str7 = request6.url;
        java.util.List<retrofit.client.Header> headerList8 = request6.getHeaders();
        java.util.List<retrofit.client.Header> headerList9 = request6.getHeaders();
        retrofit.mime.TypedOutput typedOutput10 = request6.getBody();
        retrofit.mime.TypedOutput typedOutput11 = request6.body;
        java.lang.String str12 = request6.getUrl();
        org.junit.Assert.assertNotNull(headerArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(headerList8);
        org.junit.Assert.assertNotNull(headerList9);
        org.junit.Assert.assertNull(typedOutput10);
        org.junit.Assert.assertNull(typedOutput11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test0259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0259");
        retrofit.client.Header[] headerArray2 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList3 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList3, headerArray2);
        retrofit.mime.TypedOutput typedOutput5 = null;
        retrofit.client.Request request6 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList3, typedOutput5);
        java.lang.String str7 = request6.url;
        java.util.List<retrofit.client.Header> headerList8 = request6.headers;
        retrofit.mime.TypedOutput typedOutput9 = request6.body;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass10 = typedOutput9.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(headerArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(headerList8);
        org.junit.Assert.assertNull(typedOutput9);
    }

    @Test
    public void test0260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0260");
        retrofit.client.Header[] headerArray4 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList5 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList5, headerArray4);
        retrofit.mime.TypedOutput typedOutput7 = null;
        retrofit.client.Request request8 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList5, typedOutput7);
        java.lang.String str9 = request8.method;
        java.lang.String str10 = request8.getMethod();
        java.util.List<retrofit.client.Header> headerList11 = request8.headers;
        java.lang.String str12 = request8.url;
        java.util.List<retrofit.client.Header> headerList13 = request8.getHeaders();
        retrofit.mime.TypedOutput typedOutput14 = null;
        retrofit.client.Request request15 = new retrofit.client.Request("hi!", "hi!", headerList13, typedOutput14);
        java.lang.String str16 = request15.url;
        org.junit.Assert.assertNotNull(headerArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(headerList11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNotNull(headerList13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
    }

    @Test
    public void test0261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0261");
        retrofit.client.Header[] headerArray2 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList3 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList3, headerArray2);
        retrofit.mime.TypedOutput typedOutput5 = null;
        retrofit.client.Request request6 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList3, typedOutput5);
        java.util.List<retrofit.client.Header> headerList7 = request6.headers;
        java.util.List<retrofit.client.Header> headerList8 = request6.headers;
        java.util.List<retrofit.client.Header> headerList9 = request6.getHeaders();
        java.util.List<retrofit.client.Header> headerList10 = request6.headers;
        java.lang.String str11 = request6.method;
        org.junit.Assert.assertNotNull(headerArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(headerList7);
        org.junit.Assert.assertNotNull(headerList8);
        org.junit.Assert.assertNotNull(headerList9);
        org.junit.Assert.assertNotNull(headerList10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test0262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0262");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        java.util.List<retrofit.client.Header> headerList12 = request11.headers;
        java.lang.Object[] objArray14 = new java.lang.Object[] { true, (short) 1, request11, 0 };
        requestBuilder1.args = objArray14;
        retrofit.converter.Converter converter16 = requestBuilder1.converter;
        java.lang.Object[] objArray17 = requestBuilder1.args;
        java.lang.Object[] objArray18 = null;
        retrofit.RequestBuilder requestBuilder19 = requestBuilder1.args(objArray18);
        retrofit.converter.Converter converter20 = null;
        retrofit.RequestBuilder requestBuilder21 = new retrofit.RequestBuilder(converter20);
        java.util.List<retrofit.client.Header> headerList22 = requestBuilder21.headers;
        retrofit.converter.Converter converter23 = requestBuilder21.getconverter();
        java.lang.Object[] objArray26 = new java.lang.Object[] { 0.0f, 100.0d };
        retrofit.RequestBuilder requestBuilder27 = requestBuilder21.args(objArray26);
        requestBuilder19.args = objArray26;
        java.lang.Object[] objArray29 = null;
        requestBuilder19.setargs(objArray29);
        retrofit.converter.Converter converter31 = requestBuilder19.getconverter();
        java.util.List<retrofit.client.Header> headerList32 = requestBuilder19.getheaders();
        java.util.List<retrofit.client.Header> headerList33 = null;
        requestBuilder19.headers = headerList33;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str35 = requestBuilder19.buildRelativeUrl();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertNotNull(requestBuilder19);
        org.junit.Assert.assertNull(headerList22);
        org.junit.Assert.assertNull(converter23);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[0.0, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[0.0, 100.0]");
        org.junit.Assert.assertNotNull(requestBuilder27);
        org.junit.Assert.assertNull(converter31);
        org.junit.Assert.assertNull(headerList32);
    }

    @Test
    public void test0263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0263");
        retrofit.client.Header[] headerArray2 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList3 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList3, headerArray2);
        retrofit.mime.TypedOutput typedOutput5 = null;
        retrofit.client.Request request6 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList3, typedOutput5);
        java.util.List<retrofit.client.Header> headerList7 = request6.headers;
        retrofit.mime.TypedOutput typedOutput8 = request6.body;
        java.lang.String str9 = request6.getUrl();
        java.lang.String str10 = request6.method;
        java.util.List<retrofit.client.Header> headerList11 = request6.getHeaders();
        java.util.List<retrofit.client.Header> headerList12 = request6.headers;
        java.util.List<retrofit.client.Header> headerList13 = request6.getHeaders();
        org.junit.Assert.assertNotNull(headerArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(headerList7);
        org.junit.Assert.assertNull(typedOutput8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(headerList11);
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNotNull(headerList13);
    }

    @Test
    public void test0264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0264");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        java.util.List<retrofit.client.Header> headerList12 = request11.headers;
        java.lang.Object[] objArray14 = new java.lang.Object[] { true, (short) 1, request11, 0 };
        requestBuilder1.args = objArray14;
        retrofit.client.Header[] headerArray22 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList23 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList23, headerArray22);
        retrofit.mime.TypedOutput typedOutput25 = null;
        retrofit.client.Request request26 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList23, typedOutput25);
        java.lang.String str27 = request26.url;
        java.util.List<retrofit.client.Header> headerList28 = request26.headers;
        retrofit.mime.TypedOutput typedOutput29 = null;
        retrofit.client.Request request30 = new retrofit.client.Request("", "", headerList28, typedOutput29);
        retrofit.mime.TypedOutput typedOutput31 = request30.body;
        java.util.List<retrofit.client.Header> headerList32 = request30.headers;
        retrofit.mime.TypedOutput typedOutput33 = null;
        retrofit.client.Request request34 = new retrofit.client.Request("hi!", "", headerList32, typedOutput33);
        requestBuilder1.headers = headerList32;
        java.util.List<retrofit.client.Header> headerList36 = requestBuilder1.getheaders();
        retrofit.converter.Converter converter37 = requestBuilder1.getconverter();
        java.util.List<retrofit.client.Header> headerList38 = null;
        requestBuilder1.setheaders(headerList38);
        retrofit.converter.Converter converter40 = requestBuilder1.converter;
        java.lang.Object[] objArray41 = requestBuilder1.args;
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNotNull(headerArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(headerList28);
        org.junit.Assert.assertNull(typedOutput31);
        org.junit.Assert.assertNotNull(headerList32);
        org.junit.Assert.assertNotNull(headerList36);
        org.junit.Assert.assertNull(converter37);
        org.junit.Assert.assertNull(converter40);
        org.junit.Assert.assertNotNull(objArray41);
    }

    @Test
    public void test0265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0265");
        retrofit.client.Header[] headerArray6 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList7 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList7, headerArray6);
        retrofit.mime.TypedOutput typedOutput9 = null;
        retrofit.client.Request request10 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList7, typedOutput9);
        java.lang.String str11 = request10.url;
        java.util.List<retrofit.client.Header> headerList12 = request10.headers;
        retrofit.mime.TypedOutput typedOutput13 = request10.body;
        retrofit.mime.TypedOutput typedOutput14 = request10.body;
        java.util.List<retrofit.client.Header> headerList15 = request10.headers;
        retrofit.mime.TypedOutput typedOutput16 = null;
        retrofit.client.Request request17 = new retrofit.client.Request("hi!", "hi!", headerList15, typedOutput16);
        java.lang.String str18 = request17.url;
        java.lang.String str19 = request17.getMethod();
        retrofit.mime.TypedOutput typedOutput20 = request17.body;
        java.util.List<retrofit.client.Header> headerList21 = request17.headers;
        retrofit.mime.TypedOutput typedOutput22 = null;
        retrofit.client.Request request23 = new retrofit.client.Request("", "", headerList21, typedOutput22);
        java.lang.String str24 = request23.method;
        retrofit.mime.TypedOutput typedOutput25 = request23.body;
        java.lang.String str26 = request23.getUrl();
        java.lang.String str27 = request23.getUrl();
        org.junit.Assert.assertNotNull(headerArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNull(typedOutput13);
        org.junit.Assert.assertNull(typedOutput14);
        org.junit.Assert.assertNotNull(headerList15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNull(typedOutput20);
        org.junit.Assert.assertNotNull(headerList21);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNull(typedOutput25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
    }

    @Test
    public void test0266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0266");
        retrofit.client.Header[] headerArray6 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList7 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList7, headerArray6);
        retrofit.mime.TypedOutput typedOutput9 = null;
        retrofit.client.Request request10 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList7, typedOutput9);
        java.lang.String str11 = request10.url;
        java.util.List<retrofit.client.Header> headerList12 = request10.headers;
        retrofit.mime.TypedOutput typedOutput13 = request10.body;
        retrofit.mime.TypedOutput typedOutput14 = request10.body;
        retrofit.mime.TypedOutput typedOutput15 = request10.getBody();
        retrofit.mime.TypedOutput typedOutput16 = request10.body;
        java.util.List<retrofit.client.Header> headerList17 = request10.getHeaders();
        java.util.List<retrofit.client.Header> headerList18 = request10.getHeaders();
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("hi!", "", headerList18, typedOutput19);
        retrofit.mime.TypedOutput typedOutput21 = null;
        retrofit.client.Request request22 = new retrofit.client.Request("hi!", "hi!", headerList18, typedOutput21);
        java.lang.Class<?> wildcardClass23 = request22.getClass();
        org.junit.Assert.assertNotNull(headerArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNull(typedOutput13);
        org.junit.Assert.assertNull(typedOutput14);
        org.junit.Assert.assertNull(typedOutput15);
        org.junit.Assert.assertNull(typedOutput16);
        org.junit.Assert.assertNotNull(headerList17);
        org.junit.Assert.assertNotNull(headerList18);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0267");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        requestBuilder1.setapiUrl("");
        java.lang.String str4 = requestBuilder1.getapiUrl();
        java.lang.String str5 = requestBuilder1.apiUrl;
        java.lang.String str6 = requestBuilder1.apiUrl;
        java.lang.String str7 = requestBuilder1.getapiUrl();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
    }

    @Test
    public void test0268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0268");
        retrofit.client.Header[] headerArray8 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList9 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList9, headerArray8);
        retrofit.mime.TypedOutput typedOutput11 = null;
        retrofit.client.Request request12 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList9, typedOutput11);
        retrofit.mime.TypedOutput typedOutput13 = null;
        retrofit.client.Request request14 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList9, typedOutput13);
        retrofit.mime.TypedOutput typedOutput15 = null;
        retrofit.client.Request request16 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList9, typedOutput15);
        retrofit.mime.TypedOutput typedOutput17 = null;
        retrofit.client.Request request18 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList9, typedOutput17);
        retrofit.mime.TypedOutput typedOutput19 = request18.getBody();
        java.lang.String str20 = request18.method;
        java.lang.String str21 = request18.getUrl();
        java.util.List<retrofit.client.Header> headerList22 = request18.headers;
        retrofit.mime.TypedOutput typedOutput23 = request18.body;
        org.junit.Assert.assertNotNull(headerArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(typedOutput19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(headerList22);
        org.junit.Assert.assertNull(typedOutput23);
    }

    @Test
    public void test0269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0269");
        retrofit.client.Header[] headerArray2 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList3 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList3, headerArray2);
        retrofit.mime.TypedOutput typedOutput5 = null;
        retrofit.client.Request request6 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList3, typedOutput5);
        java.lang.String str7 = request6.method;
        java.lang.String str8 = request6.getMethod();
        java.util.List<retrofit.client.Header> headerList9 = request6.headers;
        java.lang.String str10 = request6.getMethod();
        java.lang.String str11 = request6.url;
        org.junit.Assert.assertNotNull(headerArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(headerList9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
    }

    @Test
    public void test0270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0270");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        java.util.List<retrofit.client.Header> headerList12 = request11.headers;
        java.lang.Object[] objArray14 = new java.lang.Object[] { true, (short) 1, request11, 0 };
        requestBuilder1.args = objArray14;
        retrofit.converter.Converter converter16 = requestBuilder1.converter;
        java.lang.Object[] objArray17 = requestBuilder1.args;
        java.lang.Object[] objArray18 = null;
        retrofit.RequestBuilder requestBuilder19 = requestBuilder1.args(objArray18);
        java.lang.Class<?> wildcardClass20 = requestBuilder1.getClass();
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertNotNull(requestBuilder19);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0271");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        requestBuilder1.setapiUrl("");
        java.lang.String str4 = requestBuilder1.getapiUrl();
        java.util.List<retrofit.client.Header> headerList5 = requestBuilder1.getheaders();
        java.lang.String str6 = requestBuilder1.getapiUrl();
        java.lang.String str7 = requestBuilder1.apiUrl;
        java.lang.String str8 = requestBuilder1.getapiUrl();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(headerList5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }

    @Test
    public void test0272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0272");
        retrofit.client.Header[] headerArray6 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList7 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList7, headerArray6);
        retrofit.mime.TypedOutput typedOutput9 = null;
        retrofit.client.Request request10 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList7, typedOutput9);
        java.lang.String str11 = request10.url;
        java.util.List<retrofit.client.Header> headerList12 = request10.headers;
        retrofit.mime.TypedOutput typedOutput13 = request10.body;
        retrofit.mime.TypedOutput typedOutput14 = request10.body;
        java.util.List<retrofit.client.Header> headerList15 = request10.headers;
        retrofit.mime.TypedOutput typedOutput16 = null;
        retrofit.client.Request request17 = new retrofit.client.Request("hi!", "hi!", headerList15, typedOutput16);
        retrofit.mime.TypedOutput typedOutput18 = request17.body;
        java.util.List<retrofit.client.Header> headerList19 = request17.getHeaders();
        retrofit.mime.TypedOutput typedOutput20 = null;
        retrofit.client.Request request21 = new retrofit.client.Request("", "hi!", headerList19, typedOutput20);
        java.util.List<retrofit.client.Header> headerList22 = request21.headers;
        java.lang.String str23 = request21.getUrl();
        java.lang.String str24 = request21.getMethod();
        retrofit.mime.TypedOutput typedOutput25 = request21.getBody();
        org.junit.Assert.assertNotNull(headerArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNull(typedOutput13);
        org.junit.Assert.assertNull(typedOutput14);
        org.junit.Assert.assertNotNull(headerList15);
        org.junit.Assert.assertNull(typedOutput18);
        org.junit.Assert.assertNotNull(headerList19);
        org.junit.Assert.assertNotNull(headerList22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNull(typedOutput25);
    }

    @Test
    public void test0273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0273");
        retrofit.client.Header[] headerArray2 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList3 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList3, headerArray2);
        retrofit.mime.TypedOutput typedOutput5 = null;
        retrofit.client.Request request6 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList3, typedOutput5);
        java.lang.String str7 = request6.url;
        java.lang.String str8 = request6.getUrl();
        java.lang.String str9 = request6.getMethod();
        java.lang.String str10 = request6.method;
        org.junit.Assert.assertNotNull(headerArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test0274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0274");
        retrofit.client.Header[] headerArray2 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList3 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList3, headerArray2);
        retrofit.mime.TypedOutput typedOutput5 = null;
        retrofit.client.Request request6 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList3, typedOutput5);
        java.lang.String str7 = request6.url;
        java.util.List<retrofit.client.Header> headerList8 = request6.headers;
        retrofit.mime.TypedOutput typedOutput9 = request6.body;
        retrofit.mime.TypedOutput typedOutput10 = request6.body;
        java.util.List<retrofit.client.Header> headerList11 = request6.headers;
        java.lang.String str12 = request6.url;
        java.lang.String str13 = request6.getUrl();
        java.util.List<retrofit.client.Header> headerList14 = request6.headers;
        java.util.List<retrofit.client.Header> headerList15 = request6.headers;
        retrofit.mime.TypedOutput typedOutput16 = request6.getBody();
        java.lang.String str17 = request6.url;
        org.junit.Assert.assertNotNull(headerArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(headerList8);
        org.junit.Assert.assertNull(typedOutput9);
        org.junit.Assert.assertNull(typedOutput10);
        org.junit.Assert.assertNotNull(headerList11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(headerList14);
        org.junit.Assert.assertNotNull(headerList15);
        org.junit.Assert.assertNull(typedOutput16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test0275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0275");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        requestBuilder1.setapiUrl("");
        java.lang.String str4 = requestBuilder1.getapiUrl();
        java.util.List<retrofit.client.Header> headerList5 = requestBuilder1.getheaders();
        java.lang.Object[] objArray6 = requestBuilder1.getargs();
        retrofit.converter.Converter converter7 = null;
        retrofit.RequestBuilder requestBuilder8 = new retrofit.RequestBuilder(converter7);
        requestBuilder8.setapiUrl("");
        java.lang.String str11 = requestBuilder8.getapiUrl();
        retrofit.client.Header[] headerArray14 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList15 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList15, headerArray14);
        retrofit.mime.TypedOutput typedOutput17 = null;
        retrofit.client.Request request18 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList15, typedOutput17);
        requestBuilder8.setheaders((java.util.List<retrofit.client.Header>) headerList15);
        requestBuilder1.headers = headerList15;
        java.lang.Class<?> wildcardClass21 = requestBuilder1.getClass();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(headerList5);
        org.junit.Assert.assertNull(objArray6);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(headerArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0276");
        retrofit.converter.Converter converter2 = null;
        retrofit.RequestBuilder requestBuilder3 = new retrofit.RequestBuilder(converter2);
        java.util.List<retrofit.client.Header> headerList4 = requestBuilder3.headers;
        retrofit.client.Header[] headerArray9 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList10 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList10, headerArray9);
        retrofit.mime.TypedOutput typedOutput12 = null;
        retrofit.client.Request request13 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList10, typedOutput12);
        java.util.List<retrofit.client.Header> headerList14 = request13.headers;
        java.lang.Object[] objArray16 = new java.lang.Object[] { true, (short) 1, request13, 0 };
        requestBuilder3.args = objArray16;
        retrofit.client.Header[] headerArray20 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList21 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList21, headerArray20);
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList21, typedOutput23);
        java.util.List<retrofit.client.Header> headerList25 = request24.headers;
        requestBuilder3.setheaders(headerList25);
        retrofit.mime.TypedOutput typedOutput27 = null;
        retrofit.client.Request request28 = new retrofit.client.Request("hi!", "hi!", headerList25, typedOutput27);
        java.util.List<retrofit.client.Header> headerList29 = request28.headers;
        java.util.List<retrofit.client.Header> headerList30 = request28.headers;
        java.lang.String str31 = request28.url;
        java.lang.String str32 = request28.getMethod();
        java.lang.String str33 = request28.method;
        java.util.List<retrofit.client.Header> headerList34 = request28.getHeaders();
        org.junit.Assert.assertNull(headerList4);
        org.junit.Assert.assertNotNull(headerArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(headerList14);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertNotNull(headerArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(headerList25);
        org.junit.Assert.assertNotNull(headerList29);
        org.junit.Assert.assertNotNull(headerList30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertNotNull(headerList34);
    }

    @Test
    public void test0277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0277");
        retrofit.client.Header[] headerArray8 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList9 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList9, headerArray8);
        retrofit.mime.TypedOutput typedOutput11 = null;
        retrofit.client.Request request12 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList9, typedOutput11);
        java.lang.String str13 = request12.url;
        java.util.List<retrofit.client.Header> headerList14 = request12.headers;
        retrofit.mime.TypedOutput typedOutput15 = request12.body;
        retrofit.mime.TypedOutput typedOutput16 = request12.body;
        java.util.List<retrofit.client.Header> headerList17 = request12.headers;
        retrofit.mime.TypedOutput typedOutput18 = null;
        retrofit.client.Request request19 = new retrofit.client.Request("hi!", "hi!", headerList17, typedOutput18);
        retrofit.mime.TypedOutput typedOutput20 = request19.body;
        java.util.List<retrofit.client.Header> headerList21 = request19.getHeaders();
        retrofit.mime.TypedOutput typedOutput22 = null;
        retrofit.client.Request request23 = new retrofit.client.Request("", "hi!", headerList21, typedOutput22);
        retrofit.mime.TypedOutput typedOutput24 = null;
        retrofit.client.Request request25 = new retrofit.client.Request("hi!", "hi!", headerList21, typedOutput24);
        java.util.List<retrofit.client.Header> headerList26 = request25.headers;
        java.lang.String str27 = request25.method;
        retrofit.mime.TypedOutput typedOutput28 = request25.getBody();
        java.util.List<retrofit.client.Header> headerList29 = request25.headers;
        java.lang.String str30 = request25.getMethod();
        retrofit.mime.TypedOutput typedOutput31 = request25.getBody();
        org.junit.Assert.assertNotNull(headerArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(headerList14);
        org.junit.Assert.assertNull(typedOutput15);
        org.junit.Assert.assertNull(typedOutput16);
        org.junit.Assert.assertNotNull(headerList17);
        org.junit.Assert.assertNull(typedOutput20);
        org.junit.Assert.assertNotNull(headerList21);
        org.junit.Assert.assertNotNull(headerList26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNull(typedOutput28);
        org.junit.Assert.assertNotNull(headerList29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
        org.junit.Assert.assertNull(typedOutput31);
    }

    @Test
    public void test0278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0278");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.converter.Converter converter3 = requestBuilder1.getconverter();
        retrofit.RequestBuilder requestBuilder5 = requestBuilder1.apiUrl("hi!");
        retrofit.converter.Converter converter6 = null;
        retrofit.RequestBuilder requestBuilder7 = new retrofit.RequestBuilder(converter6);
        java.lang.Object[] objArray8 = requestBuilder7.getargs();
        retrofit.converter.Converter converter9 = requestBuilder7.getconverter();
        retrofit.converter.Converter converter10 = null;
        retrofit.RequestBuilder requestBuilder11 = new retrofit.RequestBuilder(converter10);
        java.util.List<retrofit.client.Header> headerList12 = requestBuilder11.headers;
        retrofit.converter.Converter converter13 = null;
        retrofit.RequestBuilder requestBuilder14 = new retrofit.RequestBuilder(converter13);
        java.util.List<retrofit.client.Header> headerList15 = requestBuilder14.headers;
        retrofit.client.Header[] headerArray20 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList21 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList21, headerArray20);
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList21, typedOutput23);
        java.util.List<retrofit.client.Header> headerList25 = request24.headers;
        java.lang.Object[] objArray27 = new java.lang.Object[] { true, (short) 1, request24, 0 };
        requestBuilder14.args = objArray27;
        requestBuilder11.setargs(objArray27);
        retrofit.RequestBuilder requestBuilder30 = requestBuilder7.args(objArray27);
        retrofit.RequestBuilder requestBuilder31 = requestBuilder5.args(objArray27);
        retrofit.converter.Converter converter32 = requestBuilder31.converter;
        java.lang.Class<?> wildcardClass33 = requestBuilder31.getClass();
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNotNull(requestBuilder5);
        org.junit.Assert.assertNull(objArray8);
        org.junit.Assert.assertNull(converter9);
        org.junit.Assert.assertNull(headerList12);
        org.junit.Assert.assertNull(headerList15);
        org.junit.Assert.assertNotNull(headerArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(headerList25);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertNotNull(requestBuilder30);
        org.junit.Assert.assertNotNull(requestBuilder31);
        org.junit.Assert.assertNull(converter32);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test0279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0279");
        retrofit.client.Header[] headerArray8 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList9 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList9, headerArray8);
        retrofit.mime.TypedOutput typedOutput11 = null;
        retrofit.client.Request request12 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList9, typedOutput11);
        java.util.List<retrofit.client.Header> headerList13 = request12.headers;
        retrofit.mime.TypedOutput typedOutput14 = request12.body;
        java.util.List<retrofit.client.Header> headerList15 = request12.headers;
        retrofit.mime.TypedOutput typedOutput16 = null;
        retrofit.client.Request request17 = new retrofit.client.Request("", "hi!", headerList15, typedOutput16);
        retrofit.mime.TypedOutput typedOutput18 = null;
        retrofit.client.Request request19 = new retrofit.client.Request("", "", headerList15, typedOutput18);
        retrofit.mime.TypedOutput typedOutput20 = null;
        retrofit.client.Request request21 = new retrofit.client.Request("", "", headerList15, typedOutput20);
        java.util.List<retrofit.client.Header> headerList22 = request21.headers;
        java.lang.Class<?> wildcardClass23 = headerList22.getClass();
        org.junit.Assert.assertNotNull(headerArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(headerList13);
        org.junit.Assert.assertNull(typedOutput14);
        org.junit.Assert.assertNotNull(headerList15);
        org.junit.Assert.assertNotNull(headerList22);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0280");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        requestBuilder1.setapiUrl("");
        java.lang.String str4 = requestBuilder1.getapiUrl();
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        requestBuilder1.setheaders((java.util.List<retrofit.client.Header>) headerList8);
        retrofit.converter.Converter converter13 = null;
        retrofit.RequestBuilder requestBuilder14 = new retrofit.RequestBuilder(converter13);
        java.lang.Object[] objArray15 = requestBuilder14.getargs();
        retrofit.converter.Converter converter16 = requestBuilder14.getconverter();
        retrofit.client.Header[] headerArray23 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList24 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList24, headerArray23);
        retrofit.mime.TypedOutput typedOutput26 = null;
        retrofit.client.Request request27 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList24, typedOutput26);
        retrofit.mime.TypedOutput typedOutput28 = null;
        retrofit.client.Request request29 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList24, typedOutput28);
        retrofit.mime.TypedOutput typedOutput30 = null;
        retrofit.client.Request request31 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList24, typedOutput30);
        java.util.List<retrofit.client.Header> headerList32 = request31.getHeaders();
        requestBuilder14.setheaders(headerList32);
        requestBuilder1.headers = headerList32;
        retrofit.RequestBuilder requestBuilder36 = requestBuilder1.apiUrl("");
        requestBuilder36.setapiUrl("");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(objArray15);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNotNull(headerArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(headerList32);
        org.junit.Assert.assertNotNull(requestBuilder36);
    }

    @Test
    public void test0281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0281");
        retrofit.client.Header[] headerArray2 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList3 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList3, headerArray2);
        retrofit.mime.TypedOutput typedOutput5 = null;
        retrofit.client.Request request6 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList3, typedOutput5);
        java.lang.String str7 = request6.url;
        java.util.List<retrofit.client.Header> headerList8 = request6.getHeaders();
        java.util.List<retrofit.client.Header> headerList9 = request6.headers;
        java.lang.Class<?> wildcardClass10 = request6.getClass();
        org.junit.Assert.assertNotNull(headerArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(headerList8);
        org.junit.Assert.assertNotNull(headerList9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0282");
        retrofit.client.Header[] headerArray2 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList3 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList3, headerArray2);
        retrofit.mime.TypedOutput typedOutput5 = null;
        retrofit.client.Request request6 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList3, typedOutput5);
        java.lang.String str7 = request6.method;
        java.lang.String str8 = request6.getMethod();
        java.util.List<retrofit.client.Header> headerList9 = request6.headers;
        java.lang.String str10 = request6.url;
        java.util.List<retrofit.client.Header> headerList11 = request6.getHeaders();
        java.lang.String str12 = request6.getMethod();
        org.junit.Assert.assertNotNull(headerArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(headerList9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNotNull(headerList11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test0283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0283");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        java.util.List<retrofit.client.Header> headerList12 = request11.headers;
        java.lang.Object[] objArray14 = new java.lang.Object[] { true, (short) 1, request11, 0 };
        requestBuilder1.args = objArray14;
        retrofit.converter.Converter converter16 = requestBuilder1.converter;
        java.util.List<retrofit.client.Header> headerList17 = requestBuilder1.headers;
        requestBuilder1.apiUrl = "hi!";
        java.lang.Object[] objArray20 = requestBuilder1.getargs();
        requestBuilder1.setapiUrl("");
        java.util.List<retrofit.client.Header> headerList23 = requestBuilder1.getheaders();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.mime.TypedOutput typedOutput24 = requestBuilder1.buildBody();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNull(headerList17);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertNull(headerList23);
    }

    @Test
    public void test0284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0284");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        java.util.List<retrofit.client.Header> headerList12 = request11.headers;
        java.lang.Object[] objArray14 = new java.lang.Object[] { true, (short) 1, request11, 0 };
        requestBuilder1.args = objArray14;
        retrofit.converter.Converter converter16 = requestBuilder1.converter;
        java.lang.Object[] objArray17 = requestBuilder1.args;
        java.lang.Object[] objArray18 = null;
        retrofit.RequestBuilder requestBuilder19 = requestBuilder1.args(objArray18);
        retrofit.converter.Converter converter20 = null;
        retrofit.RequestBuilder requestBuilder21 = new retrofit.RequestBuilder(converter20);
        java.util.List<retrofit.client.Header> headerList22 = requestBuilder21.headers;
        retrofit.converter.Converter converter23 = requestBuilder21.getconverter();
        java.lang.Object[] objArray26 = new java.lang.Object[] { 0.0f, 100.0d };
        retrofit.RequestBuilder requestBuilder27 = requestBuilder21.args(objArray26);
        requestBuilder19.args = objArray26;
        java.lang.Object[] objArray29 = null;
        requestBuilder19.setargs(objArray29);
        retrofit.converter.Converter converter31 = requestBuilder19.getconverter();
        java.lang.String str32 = requestBuilder19.getapiUrl();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request33 = requestBuilder19.build();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertNotNull(requestBuilder19);
        org.junit.Assert.assertNull(headerList22);
        org.junit.Assert.assertNull(converter23);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[0.0, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[0.0, 100.0]");
        org.junit.Assert.assertNotNull(requestBuilder27);
        org.junit.Assert.assertNull(converter31);
        org.junit.Assert.assertNull(str32);
    }

    @Test
    public void test0285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0285");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        requestBuilder1.setapiUrl("");
        java.lang.String str4 = requestBuilder1.getapiUrl();
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        requestBuilder1.setheaders((java.util.List<retrofit.client.Header>) headerList8);
        java.util.List<retrofit.client.Header> headerList13 = requestBuilder1.headers;
        retrofit.converter.Converter converter14 = requestBuilder1.getconverter();
        requestBuilder1.setapiUrl("hi!");
        java.lang.String str17 = requestBuilder1.apiUrl;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request18 = requestBuilder1.build();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(headerList13);
        org.junit.Assert.assertNull(converter14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
    }

    @Test
    public void test0286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0286");
        retrofit.converter.Converter converter8 = null;
        retrofit.RequestBuilder requestBuilder9 = new retrofit.RequestBuilder(converter8);
        retrofit.client.Header[] headerArray16 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList17 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList17, headerArray16);
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList17, typedOutput19);
        java.lang.String str21 = request20.url;
        java.util.List<retrofit.client.Header> headerList22 = request20.headers;
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("", "", headerList22, typedOutput23);
        retrofit.mime.TypedOutput typedOutput25 = request24.body;
        java.util.List<retrofit.client.Header> headerList26 = request24.headers;
        retrofit.mime.TypedOutput typedOutput27 = null;
        retrofit.client.Request request28 = new retrofit.client.Request("hi!", "", headerList26, typedOutput27);
        requestBuilder9.headers = headerList26;
        retrofit.mime.TypedOutput typedOutput30 = null;
        retrofit.client.Request request31 = new retrofit.client.Request("", "", headerList26, typedOutput30);
        retrofit.mime.TypedOutput typedOutput32 = null;
        retrofit.client.Request request33 = new retrofit.client.Request("hi!", "hi!", headerList26, typedOutput32);
        retrofit.mime.TypedOutput typedOutput34 = null;
        retrofit.client.Request request35 = new retrofit.client.Request("hi!", "hi!", headerList26, typedOutput34);
        retrofit.mime.TypedOutput typedOutput36 = null;
        retrofit.client.Request request37 = new retrofit.client.Request("", "hi!", headerList26, typedOutput36);
        java.util.List<retrofit.client.Header> headerList38 = request37.headers;
        java.lang.String str39 = request37.getMethod();
        org.junit.Assert.assertNotNull(headerArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(headerList22);
        org.junit.Assert.assertNull(typedOutput25);
        org.junit.Assert.assertNotNull(headerList26);
        org.junit.Assert.assertNotNull(headerList38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
    }

    @Test
    public void test0287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0287");
        retrofit.client.Header[] headerArray6 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList7 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList7, headerArray6);
        retrofit.mime.TypedOutput typedOutput9 = null;
        retrofit.client.Request request10 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList7, typedOutput9);
        java.lang.String str11 = request10.url;
        java.util.List<retrofit.client.Header> headerList12 = request10.headers;
        retrofit.mime.TypedOutput typedOutput13 = request10.body;
        retrofit.mime.TypedOutput typedOutput14 = request10.body;
        java.util.List<retrofit.client.Header> headerList15 = request10.headers;
        retrofit.mime.TypedOutput typedOutput16 = null;
        retrofit.client.Request request17 = new retrofit.client.Request("hi!", "hi!", headerList15, typedOutput16);
        java.lang.String str18 = request17.getMethod();
        java.util.List<retrofit.client.Header> headerList19 = request17.getHeaders();
        retrofit.mime.TypedOutput typedOutput20 = null;
        retrofit.client.Request request21 = new retrofit.client.Request("hi!", "hi!", headerList19, typedOutput20);
        java.util.List<retrofit.client.Header> headerList22 = request21.headers;
        org.junit.Assert.assertNotNull(headerArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNull(typedOutput13);
        org.junit.Assert.assertNull(typedOutput14);
        org.junit.Assert.assertNotNull(headerList15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertNotNull(headerList19);
        org.junit.Assert.assertNotNull(headerList22);
    }

    @Test
    public void test0288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0288");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        java.util.List<retrofit.client.Header> headerList12 = request11.headers;
        java.lang.Object[] objArray14 = new java.lang.Object[] { true, (short) 1, request11, 0 };
        requestBuilder1.args = objArray14;
        retrofit.converter.Converter converter16 = requestBuilder1.converter;
        java.util.List<retrofit.client.Header> headerList17 = requestBuilder1.headers;
        requestBuilder1.apiUrl = "hi!";
        java.lang.Object[] objArray20 = requestBuilder1.getargs();
        requestBuilder1.setapiUrl("hi!");
        java.util.List<retrofit.client.Header> headerList23 = requestBuilder1.headers;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str24 = requestBuilder1.buildRelativeUrl();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNull(headerList17);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertNull(headerList23);
    }

    @Test
    public void test0289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0289");
        retrofit.client.Header[] headerArray2 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList3 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList3, headerArray2);
        retrofit.mime.TypedOutput typedOutput5 = null;
        retrofit.client.Request request6 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList3, typedOutput5);
        java.lang.String str7 = request6.url;
        java.util.List<retrofit.client.Header> headerList8 = request6.headers;
        retrofit.mime.TypedOutput typedOutput9 = request6.body;
        retrofit.mime.TypedOutput typedOutput10 = request6.body;
        java.util.List<retrofit.client.Header> headerList11 = request6.headers;
        java.lang.String str12 = request6.url;
        java.lang.String str13 = request6.getUrl();
        java.util.List<retrofit.client.Header> headerList14 = request6.headers;
        java.util.List<retrofit.client.Header> headerList15 = request6.headers;
        java.lang.Class<?> wildcardClass16 = headerList15.getClass();
        org.junit.Assert.assertNotNull(headerArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(headerList8);
        org.junit.Assert.assertNull(typedOutput9);
        org.junit.Assert.assertNull(typedOutput10);
        org.junit.Assert.assertNotNull(headerList11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(headerList14);
        org.junit.Assert.assertNotNull(headerList15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0290");
        retrofit.converter.Converter converter2 = null;
        retrofit.RequestBuilder requestBuilder3 = new retrofit.RequestBuilder(converter2);
        java.util.List<retrofit.client.Header> headerList4 = requestBuilder3.headers;
        retrofit.client.Header[] headerArray9 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList10 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList10, headerArray9);
        retrofit.mime.TypedOutput typedOutput12 = null;
        retrofit.client.Request request13 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList10, typedOutput12);
        java.util.List<retrofit.client.Header> headerList14 = request13.headers;
        java.lang.Object[] objArray16 = new java.lang.Object[] { true, (short) 1, request13, 0 };
        requestBuilder3.args = objArray16;
        retrofit.converter.Converter converter18 = requestBuilder3.converter;
        java.lang.Object[] objArray19 = requestBuilder3.args;
        retrofit.client.Header[] headerArray22 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList23 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList23, headerArray22);
        retrofit.mime.TypedOutput typedOutput25 = null;
        retrofit.client.Request request26 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList23, typedOutput25);
        java.lang.String str27 = request26.url;
        java.util.List<retrofit.client.Header> headerList28 = request26.headers;
        retrofit.mime.TypedOutput typedOutput29 = request26.body;
        retrofit.mime.TypedOutput typedOutput30 = request26.body;
        java.util.List<retrofit.client.Header> headerList31 = request26.headers;
        requestBuilder3.setheaders(headerList31);
        requestBuilder3.setapiUrl("hi!");
        java.util.List<retrofit.client.Header> headerList35 = requestBuilder3.getheaders();
        retrofit.mime.TypedOutput typedOutput36 = null;
        retrofit.client.Request request37 = new retrofit.client.Request("hi!", "hi!", headerList35, typedOutput36);
        org.junit.Assert.assertNull(headerList4);
        org.junit.Assert.assertNotNull(headerArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(headerList14);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertNull(converter18);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(headerArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(headerList28);
        org.junit.Assert.assertNull(typedOutput29);
        org.junit.Assert.assertNull(typedOutput30);
        org.junit.Assert.assertNotNull(headerList31);
        org.junit.Assert.assertNotNull(headerList35);
    }

    @Test
    public void test0291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0291");
        retrofit.client.Header[] headerArray2 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList3 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList3, headerArray2);
        retrofit.mime.TypedOutput typedOutput5 = null;
        retrofit.client.Request request6 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList3, typedOutput5);
        java.util.List<retrofit.client.Header> headerList7 = request6.headers;
        retrofit.mime.TypedOutput typedOutput8 = request6.getBody();
        java.lang.String str9 = request6.getMethod();
        org.junit.Assert.assertNotNull(headerArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(headerList7);
        org.junit.Assert.assertNull(typedOutput8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test0292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0292");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.converter.Converter converter3 = requestBuilder1.getconverter();
        retrofit.RequestBuilder requestBuilder5 = requestBuilder1.apiUrl("hi!");
        java.lang.Object[] objArray6 = requestBuilder1.args;
        requestBuilder1.apiUrl = "";
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNotNull(requestBuilder5);
        org.junit.Assert.assertNull(objArray6);
    }

    @Test
    public void test0293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0293");
        retrofit.converter.Converter converter2 = null;
        retrofit.RequestBuilder requestBuilder3 = new retrofit.RequestBuilder(converter2);
        requestBuilder3.setapiUrl("");
        java.lang.String str6 = requestBuilder3.getapiUrl();
        java.util.List<retrofit.client.Header> headerList7 = requestBuilder3.getheaders();
        retrofit.client.Header[] headerArray18 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList19 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList19, headerArray18);
        retrofit.mime.TypedOutput typedOutput21 = null;
        retrofit.client.Request request22 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList19, typedOutput21);
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList19, typedOutput23);
        retrofit.mime.TypedOutput typedOutput25 = null;
        retrofit.client.Request request26 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList19, typedOutput25);
        retrofit.mime.TypedOutput typedOutput27 = null;
        retrofit.client.Request request28 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList19, typedOutput27);
        retrofit.mime.TypedOutput typedOutput29 = null;
        retrofit.client.Request request30 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList19, typedOutput29);
        requestBuilder3.headers = headerList19;
        retrofit.mime.TypedOutput typedOutput32 = null;
        retrofit.client.Request request33 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList19, typedOutput32);
        java.util.List<retrofit.client.Header> headerList34 = request33.getHeaders();
        java.util.List<retrofit.client.Header> headerList35 = request33.getHeaders();
        java.util.List<retrofit.client.Header> headerList36 = request33.getHeaders();
        java.lang.String str37 = request33.method;
        retrofit.mime.TypedOutput typedOutput38 = request33.body;
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNull(headerList7);
        org.junit.Assert.assertNotNull(headerArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(headerList34);
        org.junit.Assert.assertNotNull(headerList35);
        org.junit.Assert.assertNotNull(headerList36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertNull(typedOutput38);
    }

    @Test
    public void test0294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0294");
        retrofit.client.Header[] headerArray8 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList9 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList9, headerArray8);
        retrofit.mime.TypedOutput typedOutput11 = null;
        retrofit.client.Request request12 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList9, typedOutput11);
        java.lang.String str13 = request12.url;
        java.util.List<retrofit.client.Header> headerList14 = request12.headers;
        retrofit.mime.TypedOutput typedOutput15 = request12.body;
        retrofit.mime.TypedOutput typedOutput16 = request12.body;
        java.util.List<retrofit.client.Header> headerList17 = request12.headers;
        retrofit.mime.TypedOutput typedOutput18 = null;
        retrofit.client.Request request19 = new retrofit.client.Request("hi!", "hi!", headerList17, typedOutput18);
        retrofit.mime.TypedOutput typedOutput20 = request19.body;
        java.util.List<retrofit.client.Header> headerList21 = request19.getHeaders();
        retrofit.mime.TypedOutput typedOutput22 = null;
        retrofit.client.Request request23 = new retrofit.client.Request("", "hi!", headerList21, typedOutput22);
        retrofit.mime.TypedOutput typedOutput24 = null;
        retrofit.client.Request request25 = new retrofit.client.Request("hi!", "hi!", headerList21, typedOutput24);
        java.util.List<retrofit.client.Header> headerList26 = request25.headers;
        java.lang.String str27 = request25.method;
        retrofit.mime.TypedOutput typedOutput28 = request25.getBody();
        java.util.List<retrofit.client.Header> headerList29 = request25.headers;
        java.lang.String str30 = request25.getUrl();
        org.junit.Assert.assertNotNull(headerArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(headerList14);
        org.junit.Assert.assertNull(typedOutput15);
        org.junit.Assert.assertNull(typedOutput16);
        org.junit.Assert.assertNotNull(headerList17);
        org.junit.Assert.assertNull(typedOutput20);
        org.junit.Assert.assertNotNull(headerList21);
        org.junit.Assert.assertNotNull(headerList26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNull(typedOutput28);
        org.junit.Assert.assertNotNull(headerList29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
    }

    @Test
    public void test0295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0295");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        java.util.List<retrofit.client.Header> headerList12 = request11.headers;
        java.lang.Object[] objArray14 = new java.lang.Object[] { true, (short) 1, request11, 0 };
        requestBuilder1.args = objArray14;
        retrofit.converter.Converter converter16 = requestBuilder1.converter;
        java.lang.Object[] objArray17 = requestBuilder1.args;
        retrofit.client.Header[] headerArray20 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList21 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList21, headerArray20);
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList21, typedOutput23);
        java.lang.String str25 = request24.url;
        java.util.List<retrofit.client.Header> headerList26 = request24.headers;
        retrofit.mime.TypedOutput typedOutput27 = request24.body;
        retrofit.mime.TypedOutput typedOutput28 = request24.body;
        java.util.List<retrofit.client.Header> headerList29 = request24.headers;
        requestBuilder1.setheaders(headerList29);
        requestBuilder1.setapiUrl("hi!");
        java.lang.String str33 = requestBuilder1.getapiUrl();
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertNotNull(headerArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(headerList26);
        org.junit.Assert.assertNull(typedOutput27);
        org.junit.Assert.assertNull(typedOutput28);
        org.junit.Assert.assertNotNull(headerList29);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
    }

    @Test
    public void test0296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0296");
        retrofit.client.Header[] headerArray8 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList9 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList9, headerArray8);
        retrofit.mime.TypedOutput typedOutput11 = null;
        retrofit.client.Request request12 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList9, typedOutput11);
        java.lang.String str13 = request12.url;
        java.util.List<retrofit.client.Header> headerList14 = request12.headers;
        retrofit.mime.TypedOutput typedOutput15 = request12.body;
        retrofit.mime.TypedOutput typedOutput16 = request12.body;
        java.util.List<retrofit.client.Header> headerList17 = request12.headers;
        retrofit.mime.TypedOutput typedOutput18 = null;
        retrofit.client.Request request19 = new retrofit.client.Request("hi!", "hi!", headerList17, typedOutput18);
        retrofit.mime.TypedOutput typedOutput20 = null;
        retrofit.client.Request request21 = new retrofit.client.Request("hi!", "", headerList17, typedOutput20);
        retrofit.mime.TypedOutput typedOutput22 = request21.body;
        java.util.List<retrofit.client.Header> headerList23 = request21.getHeaders();
        retrofit.mime.TypedOutput typedOutput24 = null;
        retrofit.client.Request request25 = new retrofit.client.Request("", "hi!", headerList23, typedOutput24);
        java.lang.String str26 = request25.url;
        java.util.List<retrofit.client.Header> headerList27 = request25.headers;
        org.junit.Assert.assertNotNull(headerArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(headerList14);
        org.junit.Assert.assertNull(typedOutput15);
        org.junit.Assert.assertNull(typedOutput16);
        org.junit.Assert.assertNotNull(headerList17);
        org.junit.Assert.assertNull(typedOutput22);
        org.junit.Assert.assertNotNull(headerList23);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
        org.junit.Assert.assertNotNull(headerList27);
    }

    @Test
    public void test0297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0297");
        retrofit.converter.Converter converter2 = null;
        retrofit.RequestBuilder requestBuilder3 = new retrofit.RequestBuilder(converter2);
        java.util.List<retrofit.client.Header> headerList4 = requestBuilder3.headers;
        retrofit.client.Header[] headerArray9 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList10 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList10, headerArray9);
        retrofit.mime.TypedOutput typedOutput12 = null;
        retrofit.client.Request request13 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList10, typedOutput12);
        java.util.List<retrofit.client.Header> headerList14 = request13.headers;
        java.lang.Object[] objArray16 = new java.lang.Object[] { true, (short) 1, request13, 0 };
        requestBuilder3.args = objArray16;
        retrofit.converter.Converter converter18 = requestBuilder3.converter;
        java.lang.Object[] objArray19 = requestBuilder3.args;
        java.lang.Object[] objArray20 = null;
        retrofit.RequestBuilder requestBuilder21 = requestBuilder3.args(objArray20);
        retrofit.converter.Converter converter22 = requestBuilder21.getconverter();
        retrofit.RequestBuilder requestBuilder24 = requestBuilder21.apiUrl("");
        retrofit.client.Header[] headerArray31 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList32 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList32, headerArray31);
        retrofit.mime.TypedOutput typedOutput34 = null;
        retrofit.client.Request request35 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList32, typedOutput34);
        java.lang.String str36 = request35.url;
        java.util.List<retrofit.client.Header> headerList37 = request35.headers;
        retrofit.mime.TypedOutput typedOutput38 = null;
        retrofit.client.Request request39 = new retrofit.client.Request("", "", headerList37, typedOutput38);
        retrofit.mime.TypedOutput typedOutput40 = request39.body;
        java.util.List<retrofit.client.Header> headerList41 = request39.headers;
        retrofit.mime.TypedOutput typedOutput42 = null;
        retrofit.client.Request request43 = new retrofit.client.Request("hi!", "", headerList41, typedOutput42);
        requestBuilder24.setheaders(headerList41);
        retrofit.mime.TypedOutput typedOutput45 = null;
        retrofit.client.Request request46 = new retrofit.client.Request("", "", headerList41, typedOutput45);
        org.junit.Assert.assertNull(headerList4);
        org.junit.Assert.assertNotNull(headerArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(headerList14);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertNull(converter18);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertNotNull(requestBuilder21);
        org.junit.Assert.assertNull(converter22);
        org.junit.Assert.assertNotNull(requestBuilder24);
        org.junit.Assert.assertNotNull(headerArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(headerList37);
        org.junit.Assert.assertNull(typedOutput40);
        org.junit.Assert.assertNotNull(headerList41);
    }

    @Test
    public void test0298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0298");
        retrofit.client.Header[] headerArray8 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList9 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList9, headerArray8);
        retrofit.mime.TypedOutput typedOutput11 = null;
        retrofit.client.Request request12 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList9, typedOutput11);
        retrofit.mime.TypedOutput typedOutput13 = null;
        retrofit.client.Request request14 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList9, typedOutput13);
        retrofit.mime.TypedOutput typedOutput15 = null;
        retrofit.client.Request request16 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList9, typedOutput15);
        java.lang.String str17 = request16.getMethod();
        java.util.List<retrofit.client.Header> headerList18 = request16.getHeaders();
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("", "", headerList18, typedOutput19);
        java.lang.String str21 = request20.getMethod();
        org.junit.Assert.assertNotNull(headerArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(headerList18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
    }

    @Test
    public void test0299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0299");
        retrofit.client.Header[] headerArray4 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList5 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList5, headerArray4);
        retrofit.mime.TypedOutput typedOutput7 = null;
        retrofit.client.Request request8 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList5, typedOutput7);
        java.lang.String str9 = request8.url;
        java.util.List<retrofit.client.Header> headerList10 = request8.headers;
        retrofit.mime.TypedOutput typedOutput11 = null;
        retrofit.client.Request request12 = new retrofit.client.Request("", "", headerList10, typedOutput11);
        retrofit.mime.TypedOutput typedOutput13 = request12.body;
        java.lang.String str14 = request12.getUrl();
        java.lang.String str15 = request12.url;
        java.util.List<retrofit.client.Header> headerList16 = request12.headers;
        retrofit.mime.TypedOutput typedOutput17 = request12.getBody();
        java.lang.String str18 = request12.getUrl();
        java.lang.String str19 = request12.method;
        org.junit.Assert.assertNotNull(headerArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(headerList10);
        org.junit.Assert.assertNull(typedOutput13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(headerList16);
        org.junit.Assert.assertNull(typedOutput17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
    }

    @Test
    public void test0300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0300");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        java.util.List<retrofit.client.Header> headerList12 = request11.headers;
        java.lang.Object[] objArray14 = new java.lang.Object[] { true, (short) 1, request11, 0 };
        requestBuilder1.args = objArray14;
        retrofit.client.Header[] headerArray22 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList23 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList23, headerArray22);
        retrofit.mime.TypedOutput typedOutput25 = null;
        retrofit.client.Request request26 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList23, typedOutput25);
        java.lang.String str27 = request26.url;
        java.util.List<retrofit.client.Header> headerList28 = request26.headers;
        retrofit.mime.TypedOutput typedOutput29 = null;
        retrofit.client.Request request30 = new retrofit.client.Request("", "", headerList28, typedOutput29);
        retrofit.mime.TypedOutput typedOutput31 = request30.body;
        java.util.List<retrofit.client.Header> headerList32 = request30.headers;
        retrofit.mime.TypedOutput typedOutput33 = null;
        retrofit.client.Request request34 = new retrofit.client.Request("hi!", "", headerList32, typedOutput33);
        requestBuilder1.headers = headerList32;
        retrofit.converter.Converter converter36 = null;
        retrofit.RequestBuilder requestBuilder37 = new retrofit.RequestBuilder(converter36);
        java.util.List<retrofit.client.Header> headerList38 = requestBuilder37.headers;
        retrofit.converter.Converter converter39 = requestBuilder37.getconverter();
        java.lang.Object[] objArray42 = new java.lang.Object[] { 0.0f, 100.0d };
        retrofit.RequestBuilder requestBuilder43 = requestBuilder37.args(objArray42);
        requestBuilder43.setapiUrl("hi!");
        requestBuilder43.setapiUrl("hi!");
        java.util.List<retrofit.client.Header> headerList48 = requestBuilder43.headers;
        java.util.List<retrofit.client.Header> headerList49 = requestBuilder43.headers;
        retrofit.converter.Converter converter50 = null;
        retrofit.RequestBuilder requestBuilder51 = new retrofit.RequestBuilder(converter50);
        java.util.List<retrofit.client.Header> headerList52 = requestBuilder51.headers;
        retrofit.client.Header[] headerArray57 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList58 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList58, headerArray57);
        retrofit.mime.TypedOutput typedOutput60 = null;
        retrofit.client.Request request61 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList58, typedOutput60);
        java.util.List<retrofit.client.Header> headerList62 = request61.headers;
        java.lang.Object[] objArray64 = new java.lang.Object[] { true, (short) 1, request61, 0 };
        requestBuilder51.args = objArray64;
        retrofit.converter.Converter converter66 = requestBuilder51.converter;
        java.lang.Object[] objArray67 = requestBuilder51.args;
        retrofit.converter.Converter converter68 = null;
        retrofit.RequestBuilder requestBuilder69 = new retrofit.RequestBuilder(converter68);
        java.util.List<retrofit.client.Header> headerList70 = requestBuilder69.headers;
        retrofit.client.Header[] headerArray75 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList76 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList76, headerArray75);
        retrofit.mime.TypedOutput typedOutput78 = null;
        retrofit.client.Request request79 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList76, typedOutput78);
        java.util.List<retrofit.client.Header> headerList80 = request79.headers;
        java.lang.Object[] objArray82 = new java.lang.Object[] { true, (short) 1, request79, 0 };
        requestBuilder69.args = objArray82;
        retrofit.converter.Converter converter84 = requestBuilder69.converter;
        java.lang.Object[] objArray85 = requestBuilder69.args;
        requestBuilder51.setargs(objArray85);
        requestBuilder43.setargs(objArray85);
        requestBuilder1.setargs(objArray85);
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNotNull(headerArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(headerList28);
        org.junit.Assert.assertNull(typedOutput31);
        org.junit.Assert.assertNotNull(headerList32);
        org.junit.Assert.assertNull(headerList38);
        org.junit.Assert.assertNull(converter39);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[0.0, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[0.0, 100.0]");
        org.junit.Assert.assertNotNull(requestBuilder43);
        org.junit.Assert.assertNull(headerList48);
        org.junit.Assert.assertNull(headerList49);
        org.junit.Assert.assertNull(headerList52);
        org.junit.Assert.assertNotNull(headerArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(headerList62);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertNull(converter66);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertNull(headerList70);
        org.junit.Assert.assertNotNull(headerArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(headerList80);
        org.junit.Assert.assertNotNull(objArray82);
        org.junit.Assert.assertNull(converter84);
        org.junit.Assert.assertNotNull(objArray85);
    }

    @Test
    public void test0301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0301");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        retrofit.client.Header[] headerArray8 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList9 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList9, headerArray8);
        retrofit.mime.TypedOutput typedOutput11 = null;
        retrofit.client.Request request12 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList9, typedOutput11);
        java.lang.String str13 = request12.url;
        java.util.List<retrofit.client.Header> headerList14 = request12.headers;
        retrofit.mime.TypedOutput typedOutput15 = null;
        retrofit.client.Request request16 = new retrofit.client.Request("", "", headerList14, typedOutput15);
        retrofit.mime.TypedOutput typedOutput17 = request16.body;
        java.util.List<retrofit.client.Header> headerList18 = request16.headers;
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("hi!", "", headerList18, typedOutput19);
        requestBuilder1.headers = headerList18;
        retrofit.client.Header[] headerArray28 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList29 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList29, headerArray28);
        retrofit.mime.TypedOutput typedOutput31 = null;
        retrofit.client.Request request32 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList29, typedOutput31);
        java.lang.String str33 = request32.url;
        java.util.List<retrofit.client.Header> headerList34 = request32.headers;
        retrofit.mime.TypedOutput typedOutput35 = null;
        retrofit.client.Request request36 = new retrofit.client.Request("", "", headerList34, typedOutput35);
        retrofit.mime.TypedOutput typedOutput37 = request36.body;
        retrofit.mime.TypedOutput typedOutput38 = request36.getBody();
        java.util.List<retrofit.client.Header> headerList39 = request36.getHeaders();
        retrofit.mime.TypedOutput typedOutput40 = null;
        retrofit.client.Request request41 = new retrofit.client.Request("", "", headerList39, typedOutput40);
        requestBuilder1.headers = headerList39;
        java.lang.Object[] objArray43 = requestBuilder1.args;
        java.lang.String str44 = requestBuilder1.getapiUrl();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.mime.TypedOutput typedOutput45 = requestBuilder1.buildBody();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(headerArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(headerList14);
        org.junit.Assert.assertNull(typedOutput17);
        org.junit.Assert.assertNotNull(headerList18);
        org.junit.Assert.assertNotNull(headerArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(headerList34);
        org.junit.Assert.assertNull(typedOutput37);
        org.junit.Assert.assertNull(typedOutput38);
        org.junit.Assert.assertNotNull(headerList39);
        org.junit.Assert.assertNull(objArray43);
        org.junit.Assert.assertNull(str44);
    }

    @Test
    public void test0302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0302");
        retrofit.client.Header[] headerArray4 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList5 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList5, headerArray4);
        retrofit.mime.TypedOutput typedOutput7 = null;
        retrofit.client.Request request8 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList5, typedOutput7);
        java.lang.String str9 = request8.url;
        java.util.List<retrofit.client.Header> headerList10 = request8.headers;
        retrofit.mime.TypedOutput typedOutput11 = request8.body;
        retrofit.mime.TypedOutput typedOutput12 = request8.body;
        java.util.List<retrofit.client.Header> headerList13 = request8.headers;
        retrofit.mime.TypedOutput typedOutput14 = null;
        retrofit.client.Request request15 = new retrofit.client.Request("hi!", "hi!", headerList13, typedOutput14);
        retrofit.mime.TypedOutput typedOutput16 = request15.body;
        java.util.List<retrofit.client.Header> headerList17 = request15.getHeaders();
        retrofit.mime.TypedOutput typedOutput18 = request15.getBody();
        java.lang.String str19 = request15.url;
        java.lang.String str20 = request15.method;
        java.lang.String str21 = request15.url;
        org.junit.Assert.assertNotNull(headerArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(headerList10);
        org.junit.Assert.assertNull(typedOutput11);
        org.junit.Assert.assertNull(typedOutput12);
        org.junit.Assert.assertNotNull(headerList13);
        org.junit.Assert.assertNull(typedOutput16);
        org.junit.Assert.assertNotNull(headerList17);
        org.junit.Assert.assertNull(typedOutput18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
    }

    @Test
    public void test0303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0303");
        retrofit.converter.Converter converter2 = null;
        retrofit.RequestBuilder requestBuilder3 = new retrofit.RequestBuilder(converter2);
        java.util.List<retrofit.client.Header> headerList4 = requestBuilder3.headers;
        retrofit.client.Header[] headerArray9 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList10 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList10, headerArray9);
        retrofit.mime.TypedOutput typedOutput12 = null;
        retrofit.client.Request request13 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList10, typedOutput12);
        java.util.List<retrofit.client.Header> headerList14 = request13.headers;
        java.lang.Object[] objArray16 = new java.lang.Object[] { true, (short) 1, request13, 0 };
        requestBuilder3.args = objArray16;
        retrofit.converter.Converter converter18 = requestBuilder3.converter;
        java.util.List<retrofit.client.Header> headerList19 = requestBuilder3.headers;
        java.lang.String str20 = requestBuilder3.getapiUrl();
        retrofit.client.Header[] headerArray23 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList24 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList24, headerArray23);
        retrofit.mime.TypedOutput typedOutput26 = null;
        retrofit.client.Request request27 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList24, typedOutput26);
        java.util.List<retrofit.client.Header> headerList28 = request27.headers;
        requestBuilder3.setheaders(headerList28);
        retrofit.mime.TypedOutput typedOutput30 = null;
        retrofit.client.Request request31 = new retrofit.client.Request("hi!", "", headerList28, typedOutput30);
        retrofit.mime.TypedOutput typedOutput32 = request31.body;
        org.junit.Assert.assertNull(headerList4);
        org.junit.Assert.assertNotNull(headerArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(headerList14);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertNull(converter18);
        org.junit.Assert.assertNull(headerList19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(headerArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(headerList28);
        org.junit.Assert.assertNull(typedOutput32);
    }

    @Test
    public void test0304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0304");
        retrofit.client.Header[] headerArray6 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList7 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList7, headerArray6);
        retrofit.mime.TypedOutput typedOutput9 = null;
        retrofit.client.Request request10 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList7, typedOutput9);
        java.lang.String str11 = request10.url;
        java.util.List<retrofit.client.Header> headerList12 = request10.headers;
        retrofit.mime.TypedOutput typedOutput13 = request10.body;
        retrofit.mime.TypedOutput typedOutput14 = request10.body;
        java.util.List<retrofit.client.Header> headerList15 = request10.headers;
        retrofit.mime.TypedOutput typedOutput16 = null;
        retrofit.client.Request request17 = new retrofit.client.Request("hi!", "hi!", headerList15, typedOutput16);
        java.util.List<retrofit.client.Header> headerList18 = request17.getHeaders();
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("hi!", "hi!", headerList18, typedOutput19);
        retrofit.mime.TypedOutput typedOutput21 = request20.getBody();
        java.lang.String str22 = request20.url;
        org.junit.Assert.assertNotNull(headerArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNull(typedOutput13);
        org.junit.Assert.assertNull(typedOutput14);
        org.junit.Assert.assertNotNull(headerList15);
        org.junit.Assert.assertNotNull(headerList18);
        org.junit.Assert.assertNull(typedOutput21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
    }

    @Test
    public void test0305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0305");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        java.util.List<retrofit.client.Header> headerList12 = request11.headers;
        java.lang.Object[] objArray14 = new java.lang.Object[] { true, (short) 1, request11, 0 };
        requestBuilder1.args = objArray14;
        retrofit.converter.Converter converter16 = requestBuilder1.converter;
        java.util.List<retrofit.client.Header> headerList17 = requestBuilder1.headers;
        java.util.List<retrofit.client.Header> headerList18 = requestBuilder1.headers;
        java.lang.String str19 = requestBuilder1.apiUrl;
        java.lang.Object[] objArray20 = requestBuilder1.getargs();
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNull(headerList17);
        org.junit.Assert.assertNull(headerList18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(objArray20);
    }

    @Test
    public void test0306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0306");
        retrofit.converter.Converter converter6 = null;
        retrofit.RequestBuilder requestBuilder7 = new retrofit.RequestBuilder(converter6);
        java.util.List<retrofit.client.Header> headerList8 = requestBuilder7.headers;
        retrofit.client.Header[] headerArray13 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList14 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList14, headerArray13);
        retrofit.mime.TypedOutput typedOutput16 = null;
        retrofit.client.Request request17 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList14, typedOutput16);
        java.util.List<retrofit.client.Header> headerList18 = request17.headers;
        java.lang.Object[] objArray20 = new java.lang.Object[] { true, (short) 1, request17, 0 };
        requestBuilder7.args = objArray20;
        retrofit.converter.Converter converter22 = requestBuilder7.converter;
        java.util.List<retrofit.client.Header> headerList23 = requestBuilder7.headers;
        requestBuilder7.apiUrl = "hi!";
        retrofit.client.Header[] headerArray30 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList31 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList31, headerArray30);
        retrofit.mime.TypedOutput typedOutput33 = null;
        retrofit.client.Request request34 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList31, typedOutput33);
        java.lang.String str35 = request34.url;
        java.util.List<retrofit.client.Header> headerList36 = request34.headers;
        retrofit.mime.TypedOutput typedOutput37 = null;
        retrofit.client.Request request38 = new retrofit.client.Request("", "", headerList36, typedOutput37);
        retrofit.RequestBuilder requestBuilder39 = requestBuilder7.headers(headerList36);
        java.util.List<retrofit.client.Header> headerList40 = requestBuilder7.headers;
        java.util.List<retrofit.client.Header> headerList41 = requestBuilder7.headers;
        retrofit.mime.TypedOutput typedOutput42 = null;
        retrofit.client.Request request43 = new retrofit.client.Request("", "hi!", headerList41, typedOutput42);
        retrofit.mime.TypedOutput typedOutput44 = null;
        retrofit.client.Request request45 = new retrofit.client.Request("", "hi!", headerList41, typedOutput44);
        java.util.List<retrofit.client.Header> headerList46 = request45.getHeaders();
        retrofit.mime.TypedOutput typedOutput47 = null;
        retrofit.client.Request request48 = new retrofit.client.Request("hi!", "hi!", headerList46, typedOutput47);
        java.lang.String str49 = request48.getUrl();
        java.lang.Class<?> wildcardClass50 = request48.getClass();
        org.junit.Assert.assertNull(headerList8);
        org.junit.Assert.assertNotNull(headerArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(headerList18);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertNull(converter22);
        org.junit.Assert.assertNull(headerList23);
        org.junit.Assert.assertNotNull(headerArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(headerList36);
        org.junit.Assert.assertNotNull(requestBuilder39);
        org.junit.Assert.assertNotNull(headerList40);
        org.junit.Assert.assertNotNull(headerList41);
        org.junit.Assert.assertNotNull(headerList46);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hi!" + "'", str49, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test0307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0307");
        retrofit.client.Header[] headerArray4 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList5 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList5, headerArray4);
        retrofit.mime.TypedOutput typedOutput7 = null;
        retrofit.client.Request request8 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList5, typedOutput7);
        java.util.List<retrofit.client.Header> headerList9 = request8.headers;
        retrofit.mime.TypedOutput typedOutput10 = request8.body;
        java.util.List<retrofit.client.Header> headerList11 = request8.headers;
        retrofit.mime.TypedOutput typedOutput12 = null;
        retrofit.client.Request request13 = new retrofit.client.Request("", "hi!", headerList11, typedOutput12);
        java.lang.String str14 = request13.getUrl();
        java.lang.String str15 = request13.getUrl();
        org.junit.Assert.assertNotNull(headerArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(headerList9);
        org.junit.Assert.assertNull(typedOutput10);
        org.junit.Assert.assertNotNull(headerList11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
    }

    @Test
    public void test0308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0308");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        retrofit.client.Header[] headerArray8 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList9 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList9, headerArray8);
        retrofit.mime.TypedOutput typedOutput11 = null;
        retrofit.client.Request request12 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList9, typedOutput11);
        java.lang.String str13 = request12.url;
        java.util.List<retrofit.client.Header> headerList14 = request12.headers;
        retrofit.mime.TypedOutput typedOutput15 = null;
        retrofit.client.Request request16 = new retrofit.client.Request("", "", headerList14, typedOutput15);
        retrofit.mime.TypedOutput typedOutput17 = request16.body;
        java.util.List<retrofit.client.Header> headerList18 = request16.headers;
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("hi!", "", headerList18, typedOutput19);
        requestBuilder1.headers = headerList18;
        retrofit.client.Header[] headerArray28 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList29 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList29, headerArray28);
        retrofit.mime.TypedOutput typedOutput31 = null;
        retrofit.client.Request request32 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList29, typedOutput31);
        java.lang.String str33 = request32.url;
        java.util.List<retrofit.client.Header> headerList34 = request32.headers;
        retrofit.mime.TypedOutput typedOutput35 = null;
        retrofit.client.Request request36 = new retrofit.client.Request("", "", headerList34, typedOutput35);
        retrofit.mime.TypedOutput typedOutput37 = request36.body;
        retrofit.mime.TypedOutput typedOutput38 = request36.getBody();
        java.util.List<retrofit.client.Header> headerList39 = request36.getHeaders();
        retrofit.mime.TypedOutput typedOutput40 = null;
        retrofit.client.Request request41 = new retrofit.client.Request("", "", headerList39, typedOutput40);
        requestBuilder1.headers = headerList39;
        retrofit.converter.Converter converter43 = requestBuilder1.getconverter();
        java.util.List<retrofit.client.Header> headerList44 = null;
        requestBuilder1.headers = headerList44;
        org.junit.Assert.assertNotNull(headerArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(headerList14);
        org.junit.Assert.assertNull(typedOutput17);
        org.junit.Assert.assertNotNull(headerList18);
        org.junit.Assert.assertNotNull(headerArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(headerList34);
        org.junit.Assert.assertNull(typedOutput37);
        org.junit.Assert.assertNull(typedOutput38);
        org.junit.Assert.assertNotNull(headerList39);
        org.junit.Assert.assertNull(converter43);
    }

    @Test
    public void test0309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0309");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        requestBuilder1.setapiUrl("");
        java.lang.String str4 = requestBuilder1.getapiUrl();
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        requestBuilder1.setheaders((java.util.List<retrofit.client.Header>) headerList8);
        retrofit.converter.Converter converter13 = null;
        retrofit.RequestBuilder requestBuilder14 = new retrofit.RequestBuilder(converter13);
        java.lang.Object[] objArray15 = requestBuilder14.getargs();
        retrofit.converter.Converter converter16 = requestBuilder14.getconverter();
        retrofit.client.Header[] headerArray23 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList24 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList24, headerArray23);
        retrofit.mime.TypedOutput typedOutput26 = null;
        retrofit.client.Request request27 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList24, typedOutput26);
        retrofit.mime.TypedOutput typedOutput28 = null;
        retrofit.client.Request request29 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList24, typedOutput28);
        retrofit.mime.TypedOutput typedOutput30 = null;
        retrofit.client.Request request31 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList24, typedOutput30);
        java.util.List<retrofit.client.Header> headerList32 = request31.getHeaders();
        requestBuilder14.setheaders(headerList32);
        requestBuilder1.headers = headerList32;
        retrofit.RequestBuilder requestBuilder36 = requestBuilder1.apiUrl("");
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request37 = requestBuilder36.build();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(objArray15);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNotNull(headerArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(headerList32);
        org.junit.Assert.assertNotNull(requestBuilder36);
    }

    @Test
    public void test0310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0310");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        requestBuilder1.setapiUrl("");
        java.lang.String str4 = requestBuilder1.getapiUrl();
        java.util.List<retrofit.client.Header> headerList5 = requestBuilder1.getheaders();
        retrofit.client.Header[] headerArray16 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList17 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList17, headerArray16);
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList17, typedOutput19);
        retrofit.mime.TypedOutput typedOutput21 = null;
        retrofit.client.Request request22 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList17, typedOutput21);
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList17, typedOutput23);
        retrofit.mime.TypedOutput typedOutput25 = null;
        retrofit.client.Request request26 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList17, typedOutput25);
        retrofit.mime.TypedOutput typedOutput27 = null;
        retrofit.client.Request request28 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList17, typedOutput27);
        requestBuilder1.headers = headerList17;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.mime.TypedOutput typedOutput30 = requestBuilder1.buildBody();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(headerList5);
        org.junit.Assert.assertNotNull(headerArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0311");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.converter.Converter converter3 = requestBuilder1.getconverter();
        retrofit.RequestBuilder requestBuilder5 = requestBuilder1.apiUrl("hi!");
        java.lang.Object[] objArray6 = requestBuilder1.args;
        requestBuilder1.setapiUrl("hi!");
        requestBuilder1.setapiUrl("");
        requestBuilder1.setapiUrl("");
        // The following exception was thrown during execution in test generation
        try {
            retrofit.mime.TypedOutput typedOutput13 = requestBuilder1.buildBody();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNotNull(requestBuilder5);
        org.junit.Assert.assertNull(objArray6);
    }

    @Test
    public void test0312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0312");
        java.util.List<retrofit.client.Header> headerList2 = null;
        retrofit.mime.TypedOutput typedOutput3 = null;
        retrofit.client.Request request4 = new retrofit.client.Request("", "", headerList2, typedOutput3);
        java.lang.String str5 = request4.url;
        java.lang.String str6 = request4.method;
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
    }

    @Test
    public void test0313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0313");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        java.util.List<retrofit.client.Header> headerList12 = request11.headers;
        java.lang.Object[] objArray14 = new java.lang.Object[] { true, (short) 1, request11, 0 };
        requestBuilder1.args = objArray14;
        retrofit.converter.Converter converter16 = requestBuilder1.converter;
        java.lang.Object[] objArray17 = requestBuilder1.args;
        java.lang.Object[] objArray18 = null;
        retrofit.RequestBuilder requestBuilder19 = requestBuilder1.args(objArray18);
        java.lang.Object[] objArray20 = requestBuilder1.getargs();
        retrofit.converter.Converter converter21 = null;
        retrofit.RequestBuilder requestBuilder22 = new retrofit.RequestBuilder(converter21);
        java.lang.Object[] objArray23 = requestBuilder22.getargs();
        retrofit.converter.Converter converter24 = requestBuilder22.getconverter();
        retrofit.converter.Converter converter25 = null;
        retrofit.RequestBuilder requestBuilder26 = new retrofit.RequestBuilder(converter25);
        java.util.List<retrofit.client.Header> headerList27 = requestBuilder26.headers;
        retrofit.converter.Converter converter28 = null;
        retrofit.RequestBuilder requestBuilder29 = new retrofit.RequestBuilder(converter28);
        java.util.List<retrofit.client.Header> headerList30 = requestBuilder29.headers;
        retrofit.client.Header[] headerArray35 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList36 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList36, headerArray35);
        retrofit.mime.TypedOutput typedOutput38 = null;
        retrofit.client.Request request39 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList36, typedOutput38);
        java.util.List<retrofit.client.Header> headerList40 = request39.headers;
        java.lang.Object[] objArray42 = new java.lang.Object[] { true, (short) 1, request39, 0 };
        requestBuilder29.args = objArray42;
        requestBuilder26.setargs(objArray42);
        retrofit.RequestBuilder requestBuilder45 = requestBuilder22.args(objArray42);
        requestBuilder1.setargs(objArray42);
        retrofit.converter.Converter converter47 = requestBuilder1.getconverter();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request48 = requestBuilder1.build();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertNotNull(requestBuilder19);
        org.junit.Assert.assertNull(objArray20);
        org.junit.Assert.assertNull(objArray23);
        org.junit.Assert.assertNull(converter24);
        org.junit.Assert.assertNull(headerList27);
        org.junit.Assert.assertNull(headerList30);
        org.junit.Assert.assertNotNull(headerArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(headerList40);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertNotNull(requestBuilder45);
        org.junit.Assert.assertNull(converter47);
    }

    @Test
    public void test0314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0314");
        retrofit.converter.Converter converter2 = null;
        retrofit.RequestBuilder requestBuilder3 = new retrofit.RequestBuilder(converter2);
        requestBuilder3.setapiUrl("");
        java.lang.String str6 = requestBuilder3.getapiUrl();
        java.util.List<retrofit.client.Header> headerList7 = requestBuilder3.getheaders();
        java.lang.Object[] objArray8 = requestBuilder3.getargs();
        retrofit.converter.Converter converter9 = null;
        retrofit.RequestBuilder requestBuilder10 = new retrofit.RequestBuilder(converter9);
        requestBuilder10.setapiUrl("");
        java.lang.String str13 = requestBuilder10.getapiUrl();
        retrofit.client.Header[] headerArray16 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList17 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList17, headerArray16);
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList17, typedOutput19);
        requestBuilder10.setheaders((java.util.List<retrofit.client.Header>) headerList17);
        requestBuilder3.headers = headerList17;
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList17, typedOutput23);
        java.lang.String str25 = request24.getMethod();
        java.lang.String str26 = request24.method;
        java.lang.String str27 = request24.url;
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNull(headerList7);
        org.junit.Assert.assertNull(objArray8);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(headerArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
    }

    @Test
    public void test0315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0315");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.converter.Converter converter3 = requestBuilder1.getconverter();
        retrofit.converter.Converter converter4 = requestBuilder1.getconverter();
        requestBuilder1.setapiUrl("hi!");
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(converter4);
    }

    @Test
    public void test0316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0316");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        java.util.List<retrofit.client.Header> headerList12 = request11.headers;
        java.lang.Object[] objArray14 = new java.lang.Object[] { true, (short) 1, request11, 0 };
        requestBuilder1.args = objArray14;
        retrofit.converter.Converter converter16 = requestBuilder1.converter;
        java.lang.Object[] objArray17 = requestBuilder1.args;
        java.lang.Object[] objArray18 = null;
        retrofit.RequestBuilder requestBuilder19 = requestBuilder1.args(objArray18);
        java.lang.String str20 = requestBuilder1.getapiUrl();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request21 = requestBuilder1.build();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertNotNull(requestBuilder19);
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test0317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0317");
        retrofit.client.Header[] headerArray4 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList5 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList5, headerArray4);
        retrofit.mime.TypedOutput typedOutput7 = null;
        retrofit.client.Request request8 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList5, typedOutput7);
        java.lang.String str9 = request8.url;
        java.util.List<retrofit.client.Header> headerList10 = request8.headers;
        retrofit.mime.TypedOutput typedOutput11 = request8.body;
        retrofit.mime.TypedOutput typedOutput12 = request8.body;
        java.util.List<retrofit.client.Header> headerList13 = request8.headers;
        retrofit.mime.TypedOutput typedOutput14 = null;
        retrofit.client.Request request15 = new retrofit.client.Request("", "hi!", headerList13, typedOutput14);
        java.lang.String str16 = request15.url;
        retrofit.mime.TypedOutput typedOutput17 = request15.getBody();
        java.util.List<retrofit.client.Header> headerList18 = request15.getHeaders();
        java.util.List<retrofit.client.Header> headerList19 = request15.getHeaders();
        org.junit.Assert.assertNotNull(headerArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(headerList10);
        org.junit.Assert.assertNull(typedOutput11);
        org.junit.Assert.assertNull(typedOutput12);
        org.junit.Assert.assertNotNull(headerList13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNull(typedOutput17);
        org.junit.Assert.assertNotNull(headerList18);
        org.junit.Assert.assertNotNull(headerList19);
    }

    @Test
    public void test0318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0318");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        java.util.List<retrofit.client.Header> headerList12 = request11.headers;
        java.lang.Object[] objArray14 = new java.lang.Object[] { true, (short) 1, request11, 0 };
        requestBuilder1.args = objArray14;
        retrofit.converter.Converter converter16 = requestBuilder1.converter;
        java.util.List<retrofit.client.Header> headerList17 = requestBuilder1.headers;
        java.util.List<retrofit.client.Header> headerList18 = requestBuilder1.headers;
        java.lang.String str19 = requestBuilder1.apiUrl;
        java.lang.Class<?> wildcardClass20 = requestBuilder1.getClass();
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNull(headerList17);
        org.junit.Assert.assertNull(headerList18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0319");
        retrofit.converter.Converter converter4 = null;
        retrofit.RequestBuilder requestBuilder5 = new retrofit.RequestBuilder(converter4);
        java.util.List<retrofit.client.Header> headerList6 = requestBuilder5.headers;
        retrofit.client.Header[] headerArray11 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList12 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList12, headerArray11);
        retrofit.mime.TypedOutput typedOutput14 = null;
        retrofit.client.Request request15 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList12, typedOutput14);
        java.util.List<retrofit.client.Header> headerList16 = request15.headers;
        java.lang.Object[] objArray18 = new java.lang.Object[] { true, (short) 1, request15, 0 };
        requestBuilder5.args = objArray18;
        retrofit.client.Header[] headerArray22 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList23 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList23, headerArray22);
        retrofit.mime.TypedOutput typedOutput25 = null;
        retrofit.client.Request request26 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList23, typedOutput25);
        java.util.List<retrofit.client.Header> headerList27 = request26.headers;
        requestBuilder5.setheaders(headerList27);
        retrofit.mime.TypedOutput typedOutput29 = null;
        retrofit.client.Request request30 = new retrofit.client.Request("hi!", "hi!", headerList27, typedOutput29);
        java.util.List<retrofit.client.Header> headerList31 = request30.headers;
        retrofit.mime.TypedOutput typedOutput32 = null;
        retrofit.client.Request request33 = new retrofit.client.Request("", "", headerList31, typedOutput32);
        org.junit.Assert.assertNull(headerList6);
        org.junit.Assert.assertNotNull(headerArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(headerList16);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertNotNull(headerArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(headerList27);
        org.junit.Assert.assertNotNull(headerList31);
    }

    @Test
    public void test0320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0320");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        java.util.List<retrofit.client.Header> headerList12 = request11.headers;
        java.lang.Object[] objArray14 = new java.lang.Object[] { true, (short) 1, request11, 0 };
        requestBuilder1.args = objArray14;
        retrofit.client.Header[] headerArray22 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList23 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList23, headerArray22);
        retrofit.mime.TypedOutput typedOutput25 = null;
        retrofit.client.Request request26 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList23, typedOutput25);
        java.lang.String str27 = request26.url;
        java.util.List<retrofit.client.Header> headerList28 = request26.headers;
        retrofit.mime.TypedOutput typedOutput29 = null;
        retrofit.client.Request request30 = new retrofit.client.Request("", "", headerList28, typedOutput29);
        retrofit.mime.TypedOutput typedOutput31 = request30.body;
        java.util.List<retrofit.client.Header> headerList32 = request30.headers;
        retrofit.mime.TypedOutput typedOutput33 = null;
        retrofit.client.Request request34 = new retrofit.client.Request("hi!", "", headerList32, typedOutput33);
        requestBuilder1.headers = headerList32;
        requestBuilder1.setapiUrl("hi!");
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request38 = requestBuilder1.build();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNotNull(headerArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(headerList28);
        org.junit.Assert.assertNull(typedOutput31);
        org.junit.Assert.assertNotNull(headerList32);
    }

    @Test
    public void test0321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0321");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        java.util.List<retrofit.client.Header> headerList12 = request11.headers;
        java.lang.Object[] objArray14 = new java.lang.Object[] { true, (short) 1, request11, 0 };
        requestBuilder1.args = objArray14;
        retrofit.converter.Converter converter16 = requestBuilder1.converter;
        java.util.List<retrofit.client.Header> headerList17 = requestBuilder1.headers;
        java.lang.String str18 = requestBuilder1.getapiUrl();
        retrofit.RequestBuilder requestBuilder20 = requestBuilder1.apiUrl("");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str21 = requestBuilder1.buildRelativeUrl();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNull(headerList17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(requestBuilder20);
    }

    @Test
    public void test0322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0322");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.getheaders();
        org.junit.Assert.assertNull(headerList2);
    }

    @Test
    public void test0323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0323");
        retrofit.client.Header[] headerArray4 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList5 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList5, headerArray4);
        retrofit.mime.TypedOutput typedOutput7 = null;
        retrofit.client.Request request8 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList5, typedOutput7);
        java.lang.String str9 = request8.url;
        java.util.List<retrofit.client.Header> headerList10 = request8.headers;
        retrofit.mime.TypedOutput typedOutput11 = request8.body;
        retrofit.mime.TypedOutput typedOutput12 = request8.body;
        java.util.List<retrofit.client.Header> headerList13 = request8.headers;
        retrofit.mime.TypedOutput typedOutput14 = null;
        retrofit.client.Request request15 = new retrofit.client.Request("hi!", "hi!", headerList13, typedOutput14);
        java.util.List<retrofit.client.Header> headerList16 = request15.getHeaders();
        java.lang.String str17 = request15.url;
        java.lang.String str18 = request15.url;
        java.lang.String str19 = request15.method;
        org.junit.Assert.assertNotNull(headerArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(headerList10);
        org.junit.Assert.assertNull(typedOutput11);
        org.junit.Assert.assertNull(typedOutput12);
        org.junit.Assert.assertNotNull(headerList13);
        org.junit.Assert.assertNotNull(headerList16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
    }

    @Test
    public void test0324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0324");
        retrofit.client.Header[] headerArray4 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList5 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList5, headerArray4);
        retrofit.mime.TypedOutput typedOutput7 = null;
        retrofit.client.Request request8 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList5, typedOutput7);
        java.lang.String str9 = request8.url;
        java.util.List<retrofit.client.Header> headerList10 = request8.headers;
        retrofit.mime.TypedOutput typedOutput11 = request8.body;
        retrofit.mime.TypedOutput typedOutput12 = request8.body;
        java.util.List<retrofit.client.Header> headerList13 = request8.headers;
        retrofit.mime.TypedOutput typedOutput14 = null;
        retrofit.client.Request request15 = new retrofit.client.Request("", "hi!", headerList13, typedOutput14);
        java.lang.String str16 = request15.method;
        java.lang.String str17 = request15.getMethod();
        retrofit.mime.TypedOutput typedOutput18 = request15.body;
        java.lang.String str19 = request15.url;
        retrofit.mime.TypedOutput typedOutput20 = request15.getBody();
        org.junit.Assert.assertNotNull(headerArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(headerList10);
        org.junit.Assert.assertNull(typedOutput11);
        org.junit.Assert.assertNull(typedOutput12);
        org.junit.Assert.assertNotNull(headerList13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNull(typedOutput18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNull(typedOutput20);
    }

    @Test
    public void test0325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0325");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        java.util.List<retrofit.client.Header> headerList12 = request11.headers;
        java.lang.Object[] objArray14 = new java.lang.Object[] { true, (short) 1, request11, 0 };
        requestBuilder1.args = objArray14;
        retrofit.converter.Converter converter16 = requestBuilder1.converter;
        java.lang.Object[] objArray17 = requestBuilder1.args;
        java.lang.Object[] objArray18 = null;
        retrofit.RequestBuilder requestBuilder19 = requestBuilder1.args(objArray18);
        retrofit.converter.Converter converter20 = requestBuilder19.getconverter();
        retrofit.RequestBuilder requestBuilder22 = requestBuilder19.apiUrl("");
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request23 = requestBuilder19.build();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertNotNull(requestBuilder19);
        org.junit.Assert.assertNull(converter20);
        org.junit.Assert.assertNotNull(requestBuilder22);
    }

    @Test
    public void test0326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0326");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        java.util.List<retrofit.client.Header> headerList12 = request11.headers;
        java.lang.Object[] objArray14 = new java.lang.Object[] { true, (short) 1, request11, 0 };
        requestBuilder1.args = objArray14;
        retrofit.converter.Converter converter16 = requestBuilder1.converter;
        java.util.List<retrofit.client.Header> headerList17 = requestBuilder1.headers;
        requestBuilder1.apiUrl = "hi!";
        java.lang.Object[] objArray20 = requestBuilder1.args;
        java.util.List<retrofit.client.Header> headerList21 = requestBuilder1.getheaders();
        java.lang.String str22 = requestBuilder1.apiUrl;
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNull(headerList17);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertNull(headerList21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
    }

    @Test
    public void test0327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0327");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        java.util.List<retrofit.client.Header> headerList12 = request11.headers;
        java.lang.Object[] objArray14 = new java.lang.Object[] { true, (short) 1, request11, 0 };
        requestBuilder1.args = objArray14;
        retrofit.converter.Converter converter16 = requestBuilder1.converter;
        java.util.List<retrofit.client.Header> headerList17 = requestBuilder1.headers;
        java.util.List<retrofit.client.Header> headerList18 = requestBuilder1.headers;
        retrofit.RequestBuilder requestBuilder20 = requestBuilder1.apiUrl("");
        retrofit.client.Header[] headerArray25 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList26 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList26, headerArray25);
        retrofit.mime.TypedOutput typedOutput28 = null;
        retrofit.client.Request request29 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList26, typedOutput28);
        java.lang.String str30 = request29.url;
        java.util.List<retrofit.client.Header> headerList31 = request29.headers;
        retrofit.mime.TypedOutput typedOutput32 = request29.body;
        retrofit.mime.TypedOutput typedOutput33 = request29.body;
        java.util.List<retrofit.client.Header> headerList34 = request29.headers;
        retrofit.mime.TypedOutput typedOutput35 = null;
        retrofit.client.Request request36 = new retrofit.client.Request("hi!", "hi!", headerList34, typedOutput35);
        java.util.List<retrofit.client.Header> headerList37 = request36.getHeaders();
        retrofit.RequestBuilder requestBuilder38 = requestBuilder1.headers(headerList37);
        java.util.List<retrofit.client.Header> headerList39 = requestBuilder38.getheaders();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.mime.TypedOutput typedOutput40 = requestBuilder38.buildBody();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNull(headerList17);
        org.junit.Assert.assertNull(headerList18);
        org.junit.Assert.assertNotNull(requestBuilder20);
        org.junit.Assert.assertNotNull(headerArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(headerList31);
        org.junit.Assert.assertNull(typedOutput32);
        org.junit.Assert.assertNull(typedOutput33);
        org.junit.Assert.assertNotNull(headerList34);
        org.junit.Assert.assertNotNull(headerList37);
        org.junit.Assert.assertNotNull(requestBuilder38);
        org.junit.Assert.assertNotNull(headerList39);
    }

    @Test
    public void test0328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0328");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        java.util.List<retrofit.client.Header> headerList12 = request11.headers;
        java.lang.Object[] objArray14 = new java.lang.Object[] { true, (short) 1, request11, 0 };
        requestBuilder1.args = objArray14;
        retrofit.converter.Converter converter16 = requestBuilder1.converter;
        requestBuilder1.setapiUrl("");
        java.util.List<retrofit.client.Header> headerList19 = requestBuilder1.getheaders();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.mime.TypedOutput typedOutput20 = requestBuilder1.buildBody();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNull(headerList19);
    }

    @Test
    public void test0329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0329");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.converter.Converter converter3 = null;
        retrofit.RequestBuilder requestBuilder4 = new retrofit.RequestBuilder(converter3);
        java.util.List<retrofit.client.Header> headerList5 = requestBuilder4.headers;
        retrofit.client.Header[] headerArray10 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList11 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList11, headerArray10);
        retrofit.mime.TypedOutput typedOutput13 = null;
        retrofit.client.Request request14 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList11, typedOutput13);
        java.util.List<retrofit.client.Header> headerList15 = request14.headers;
        java.lang.Object[] objArray17 = new java.lang.Object[] { true, (short) 1, request14, 0 };
        requestBuilder4.args = objArray17;
        requestBuilder1.setargs(objArray17);
        retrofit.converter.Converter converter20 = requestBuilder1.getconverter();
        java.util.List<retrofit.client.Header> headerList21 = requestBuilder1.headers;
        retrofit.converter.Converter converter22 = requestBuilder1.getconverter();
        retrofit.converter.Converter converter25 = null;
        retrofit.RequestBuilder requestBuilder26 = new retrofit.RequestBuilder(converter25);
        java.util.List<retrofit.client.Header> headerList27 = requestBuilder26.headers;
        retrofit.client.Header[] headerArray32 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList33 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList33, headerArray32);
        retrofit.mime.TypedOutput typedOutput35 = null;
        retrofit.client.Request request36 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList33, typedOutput35);
        java.util.List<retrofit.client.Header> headerList37 = request36.headers;
        java.lang.Object[] objArray39 = new java.lang.Object[] { true, (short) 1, request36, 0 };
        requestBuilder26.args = objArray39;
        retrofit.converter.Converter converter41 = requestBuilder26.converter;
        java.lang.Object[] objArray42 = requestBuilder26.args;
        retrofit.client.Header[] headerArray45 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList46 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList46, headerArray45);
        retrofit.mime.TypedOutput typedOutput48 = null;
        retrofit.client.Request request49 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList46, typedOutput48);
        java.lang.String str50 = request49.url;
        java.util.List<retrofit.client.Header> headerList51 = request49.headers;
        retrofit.mime.TypedOutput typedOutput52 = request49.body;
        retrofit.mime.TypedOutput typedOutput53 = request49.body;
        java.util.List<retrofit.client.Header> headerList54 = request49.headers;
        requestBuilder26.setheaders(headerList54);
        retrofit.mime.TypedOutput typedOutput56 = null;
        retrofit.client.Request request57 = new retrofit.client.Request("hi!", "hi!", headerList54, typedOutput56);
        requestBuilder1.headers = headerList54;
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNull(headerList5);
        org.junit.Assert.assertNotNull(headerArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(headerList15);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertNull(converter20);
        org.junit.Assert.assertNull(headerList21);
        org.junit.Assert.assertNull(converter22);
        org.junit.Assert.assertNull(headerList27);
        org.junit.Assert.assertNotNull(headerArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(headerList37);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertNull(converter41);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertNotNull(headerArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(headerList51);
        org.junit.Assert.assertNull(typedOutput52);
        org.junit.Assert.assertNull(typedOutput53);
        org.junit.Assert.assertNotNull(headerList54);
    }

    @Test
    public void test0330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0330");
        retrofit.client.Header[] headerArray4 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList5 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList5, headerArray4);
        retrofit.mime.TypedOutput typedOutput7 = null;
        retrofit.client.Request request8 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList5, typedOutput7);
        java.lang.String str9 = request8.url;
        java.util.List<retrofit.client.Header> headerList10 = request8.headers;
        retrofit.mime.TypedOutput typedOutput11 = request8.body;
        retrofit.mime.TypedOutput typedOutput12 = request8.body;
        java.util.List<retrofit.client.Header> headerList13 = request8.headers;
        retrofit.mime.TypedOutput typedOutput14 = null;
        retrofit.client.Request request15 = new retrofit.client.Request("hi!", "hi!", headerList13, typedOutput14);
        java.lang.String str16 = request15.url;
        java.lang.String str17 = request15.getMethod();
        retrofit.mime.TypedOutput typedOutput18 = request15.body;
        retrofit.mime.TypedOutput typedOutput19 = request15.getBody();
        java.lang.String str20 = request15.getMethod();
        retrofit.mime.TypedOutput typedOutput21 = request15.body;
        java.lang.String str22 = request15.getUrl();
        retrofit.mime.TypedOutput typedOutput23 = request15.getBody();
        retrofit.mime.TypedOutput typedOutput24 = request15.getBody();
        org.junit.Assert.assertNotNull(headerArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(headerList10);
        org.junit.Assert.assertNull(typedOutput11);
        org.junit.Assert.assertNull(typedOutput12);
        org.junit.Assert.assertNotNull(headerList13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNull(typedOutput18);
        org.junit.Assert.assertNull(typedOutput19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertNull(typedOutput21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertNull(typedOutput23);
        org.junit.Assert.assertNull(typedOutput24);
    }

    @Test
    public void test0331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0331");
        retrofit.client.Header[] headerArray4 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList5 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList5, headerArray4);
        retrofit.mime.TypedOutput typedOutput7 = null;
        retrofit.client.Request request8 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList5, typedOutput7);
        java.util.List<retrofit.client.Header> headerList9 = request8.headers;
        retrofit.mime.TypedOutput typedOutput10 = request8.body;
        java.util.List<retrofit.client.Header> headerList11 = request8.headers;
        retrofit.mime.TypedOutput typedOutput12 = null;
        retrofit.client.Request request13 = new retrofit.client.Request("hi!", "", headerList11, typedOutput12);
        retrofit.mime.TypedOutput typedOutput14 = request13.body;
        org.junit.Assert.assertNotNull(headerArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(headerList9);
        org.junit.Assert.assertNull(typedOutput10);
        org.junit.Assert.assertNotNull(headerList11);
        org.junit.Assert.assertNull(typedOutput14);
    }

    @Test
    public void test0332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0332");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        java.util.List<retrofit.client.Header> headerList12 = request11.headers;
        java.lang.Object[] objArray14 = new java.lang.Object[] { true, (short) 1, request11, 0 };
        requestBuilder1.args = objArray14;
        retrofit.converter.Converter converter16 = requestBuilder1.converter;
        java.lang.Object[] objArray17 = requestBuilder1.args;
        retrofit.client.Header[] headerArray20 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList21 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList21, headerArray20);
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList21, typedOutput23);
        java.lang.String str25 = request24.url;
        java.util.List<retrofit.client.Header> headerList26 = request24.headers;
        retrofit.mime.TypedOutput typedOutput27 = request24.body;
        retrofit.mime.TypedOutput typedOutput28 = request24.body;
        java.util.List<retrofit.client.Header> headerList29 = request24.headers;
        requestBuilder1.setheaders(headerList29);
        requestBuilder1.setapiUrl("hi!");
        java.util.List<retrofit.client.Header> headerList33 = requestBuilder1.getheaders();
        java.lang.String str34 = requestBuilder1.apiUrl;
        retrofit.converter.Converter converter35 = requestBuilder1.getconverter();
        retrofit.converter.Converter converter36 = requestBuilder1.converter;
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertNotNull(headerArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(headerList26);
        org.junit.Assert.assertNull(typedOutput27);
        org.junit.Assert.assertNull(typedOutput28);
        org.junit.Assert.assertNotNull(headerList29);
        org.junit.Assert.assertNotNull(headerList33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertNull(converter35);
        org.junit.Assert.assertNull(converter36);
    }

    @Test
    public void test0333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0333");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        retrofit.client.Header[] headerArray8 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList9 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList9, headerArray8);
        retrofit.mime.TypedOutput typedOutput11 = null;
        retrofit.client.Request request12 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList9, typedOutput11);
        java.lang.String str13 = request12.url;
        java.util.List<retrofit.client.Header> headerList14 = request12.headers;
        retrofit.mime.TypedOutput typedOutput15 = null;
        retrofit.client.Request request16 = new retrofit.client.Request("", "", headerList14, typedOutput15);
        retrofit.mime.TypedOutput typedOutput17 = request16.body;
        java.util.List<retrofit.client.Header> headerList18 = request16.headers;
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("hi!", "", headerList18, typedOutput19);
        requestBuilder1.headers = headerList18;
        retrofit.client.Header[] headerArray28 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList29 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList29, headerArray28);
        retrofit.mime.TypedOutput typedOutput31 = null;
        retrofit.client.Request request32 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList29, typedOutput31);
        java.lang.String str33 = request32.url;
        java.util.List<retrofit.client.Header> headerList34 = request32.headers;
        retrofit.mime.TypedOutput typedOutput35 = null;
        retrofit.client.Request request36 = new retrofit.client.Request("", "", headerList34, typedOutput35);
        retrofit.mime.TypedOutput typedOutput37 = request36.body;
        retrofit.mime.TypedOutput typedOutput38 = request36.getBody();
        java.util.List<retrofit.client.Header> headerList39 = request36.getHeaders();
        retrofit.mime.TypedOutput typedOutput40 = null;
        retrofit.client.Request request41 = new retrofit.client.Request("", "", headerList39, typedOutput40);
        requestBuilder1.headers = headerList39;
        java.lang.Object[] objArray43 = requestBuilder1.args;
        java.lang.String str44 = requestBuilder1.getapiUrl();
        java.lang.Object[] objArray45 = requestBuilder1.args;
        org.junit.Assert.assertNotNull(headerArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(headerList14);
        org.junit.Assert.assertNull(typedOutput17);
        org.junit.Assert.assertNotNull(headerList18);
        org.junit.Assert.assertNotNull(headerArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(headerList34);
        org.junit.Assert.assertNull(typedOutput37);
        org.junit.Assert.assertNull(typedOutput38);
        org.junit.Assert.assertNotNull(headerList39);
        org.junit.Assert.assertNull(objArray43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNull(objArray45);
    }

    @Test
    public void test0334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0334");
        retrofit.client.Header[] headerArray10 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList11 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList11, headerArray10);
        retrofit.mime.TypedOutput typedOutput13 = null;
        retrofit.client.Request request14 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList11, typedOutput13);
        java.lang.String str15 = request14.url;
        java.util.List<retrofit.client.Header> headerList16 = request14.headers;
        retrofit.mime.TypedOutput typedOutput17 = null;
        retrofit.client.Request request18 = new retrofit.client.Request("", "", headerList16, typedOutput17);
        retrofit.mime.TypedOutput typedOutput19 = request18.body;
        java.util.List<retrofit.client.Header> headerList20 = request18.headers;
        retrofit.mime.TypedOutput typedOutput21 = null;
        retrofit.client.Request request22 = new retrofit.client.Request("hi!", "", headerList20, typedOutput21);
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("", "hi!", headerList20, typedOutput23);
        retrofit.mime.TypedOutput typedOutput25 = null;
        retrofit.client.Request request26 = new retrofit.client.Request("hi!", "", headerList20, typedOutput25);
        java.util.List<retrofit.client.Header> headerList27 = request26.getHeaders();
        java.lang.String str28 = request26.url;
        org.junit.Assert.assertNotNull(headerArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(headerList16);
        org.junit.Assert.assertNull(typedOutput19);
        org.junit.Assert.assertNotNull(headerList20);
        org.junit.Assert.assertNotNull(headerList27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
    }

    @Test
    public void test0335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0335");
        retrofit.client.Header[] headerArray2 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList3 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList3, headerArray2);
        retrofit.mime.TypedOutput typedOutput5 = null;
        retrofit.client.Request request6 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList3, typedOutput5);
        java.lang.String str7 = request6.url;
        java.util.List<retrofit.client.Header> headerList8 = request6.headers;
        retrofit.mime.TypedOutput typedOutput9 = request6.body;
        retrofit.mime.TypedOutput typedOutput10 = request6.body;
        retrofit.mime.TypedOutput typedOutput11 = request6.getBody();
        retrofit.mime.TypedOutput typedOutput12 = request6.body;
        retrofit.mime.TypedOutput typedOutput13 = request6.getBody();
        java.lang.String str14 = request6.getMethod();
        java.lang.String str15 = request6.getMethod();
        org.junit.Assert.assertNotNull(headerArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(headerList8);
        org.junit.Assert.assertNull(typedOutput9);
        org.junit.Assert.assertNull(typedOutput10);
        org.junit.Assert.assertNull(typedOutput11);
        org.junit.Assert.assertNull(typedOutput12);
        org.junit.Assert.assertNull(typedOutput13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test0336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0336");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        java.util.List<retrofit.client.Header> headerList12 = request11.headers;
        java.lang.Object[] objArray14 = new java.lang.Object[] { true, (short) 1, request11, 0 };
        requestBuilder1.args = objArray14;
        retrofit.converter.Converter converter16 = requestBuilder1.converter;
        java.lang.Object[] objArray17 = requestBuilder1.args;
        retrofit.client.Header[] headerArray20 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList21 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList21, headerArray20);
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList21, typedOutput23);
        java.lang.String str25 = request24.url;
        java.util.List<retrofit.client.Header> headerList26 = request24.headers;
        retrofit.mime.TypedOutput typedOutput27 = request24.body;
        retrofit.mime.TypedOutput typedOutput28 = request24.body;
        java.util.List<retrofit.client.Header> headerList29 = request24.headers;
        requestBuilder1.setheaders(headerList29);
        requestBuilder1.setapiUrl("hi!");
        java.util.List<retrofit.client.Header> headerList33 = requestBuilder1.getheaders();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request34 = requestBuilder1.build();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertNotNull(headerArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(headerList26);
        org.junit.Assert.assertNull(typedOutput27);
        org.junit.Assert.assertNull(typedOutput28);
        org.junit.Assert.assertNotNull(headerList29);
        org.junit.Assert.assertNotNull(headerList33);
    }

    @Test
    public void test0337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0337");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        java.util.List<retrofit.client.Header> headerList12 = request11.headers;
        java.lang.Object[] objArray14 = new java.lang.Object[] { true, (short) 1, request11, 0 };
        requestBuilder1.args = objArray14;
        retrofit.converter.Converter converter16 = requestBuilder1.converter;
        java.lang.Object[] objArray17 = requestBuilder1.args;
        retrofit.converter.Converter converter18 = null;
        retrofit.RequestBuilder requestBuilder19 = new retrofit.RequestBuilder(converter18);
        java.util.List<retrofit.client.Header> headerList20 = requestBuilder19.headers;
        retrofit.client.Header[] headerArray25 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList26 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList26, headerArray25);
        retrofit.mime.TypedOutput typedOutput28 = null;
        retrofit.client.Request request29 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList26, typedOutput28);
        java.util.List<retrofit.client.Header> headerList30 = request29.headers;
        java.lang.Object[] objArray32 = new java.lang.Object[] { true, (short) 1, request29, 0 };
        requestBuilder19.args = objArray32;
        retrofit.converter.Converter converter34 = requestBuilder19.converter;
        java.lang.Object[] objArray35 = requestBuilder19.args;
        requestBuilder1.setargs(objArray35);
        java.util.List<retrofit.client.Header> headerList37 = requestBuilder1.headers;
        java.util.List<retrofit.client.Header> headerList38 = requestBuilder1.getheaders();
        retrofit.converter.Converter converter39 = null;
        retrofit.RequestBuilder requestBuilder40 = new retrofit.RequestBuilder(converter39);
        java.lang.Object[] objArray41 = requestBuilder40.getargs();
        retrofit.converter.Converter converter42 = requestBuilder40.getconverter();
        retrofit.converter.Converter converter43 = null;
        retrofit.RequestBuilder requestBuilder44 = new retrofit.RequestBuilder(converter43);
        java.util.List<retrofit.client.Header> headerList45 = requestBuilder44.headers;
        retrofit.converter.Converter converter46 = null;
        retrofit.RequestBuilder requestBuilder47 = new retrofit.RequestBuilder(converter46);
        java.util.List<retrofit.client.Header> headerList48 = requestBuilder47.headers;
        retrofit.client.Header[] headerArray53 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList54 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList54, headerArray53);
        retrofit.mime.TypedOutput typedOutput56 = null;
        retrofit.client.Request request57 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList54, typedOutput56);
        java.util.List<retrofit.client.Header> headerList58 = request57.headers;
        java.lang.Object[] objArray60 = new java.lang.Object[] { true, (short) 1, request57, 0 };
        requestBuilder47.args = objArray60;
        requestBuilder44.setargs(objArray60);
        retrofit.RequestBuilder requestBuilder63 = requestBuilder40.args(objArray60);
        requestBuilder1.setargs(objArray60);
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request65 = requestBuilder1.build();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertNull(headerList20);
        org.junit.Assert.assertNotNull(headerArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(headerList30);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertNull(converter34);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertNull(headerList37);
        org.junit.Assert.assertNull(headerList38);
        org.junit.Assert.assertNull(objArray41);
        org.junit.Assert.assertNull(converter42);
        org.junit.Assert.assertNull(headerList45);
        org.junit.Assert.assertNull(headerList48);
        org.junit.Assert.assertNotNull(headerArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(headerList58);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertNotNull(requestBuilder63);
    }

    @Test
    public void test0338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0338");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        java.util.List<retrofit.client.Header> headerList12 = request11.headers;
        java.lang.Object[] objArray14 = new java.lang.Object[] { true, (short) 1, request11, 0 };
        requestBuilder1.args = objArray14;
        retrofit.client.Header[] headerArray22 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList23 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList23, headerArray22);
        retrofit.mime.TypedOutput typedOutput25 = null;
        retrofit.client.Request request26 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList23, typedOutput25);
        java.lang.String str27 = request26.url;
        java.util.List<retrofit.client.Header> headerList28 = request26.headers;
        retrofit.mime.TypedOutput typedOutput29 = null;
        retrofit.client.Request request30 = new retrofit.client.Request("", "", headerList28, typedOutput29);
        retrofit.mime.TypedOutput typedOutput31 = request30.body;
        java.util.List<retrofit.client.Header> headerList32 = request30.headers;
        retrofit.mime.TypedOutput typedOutput33 = null;
        retrofit.client.Request request34 = new retrofit.client.Request("hi!", "", headerList32, typedOutput33);
        requestBuilder1.headers = headerList32;
        java.util.List<retrofit.client.Header> headerList36 = requestBuilder1.getheaders();
        java.lang.Class<?> wildcardClass37 = headerList36.getClass();
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNotNull(headerArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(headerList28);
        org.junit.Assert.assertNull(typedOutput31);
        org.junit.Assert.assertNotNull(headerList32);
        org.junit.Assert.assertNotNull(headerList36);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test0339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0339");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.converter.Converter converter3 = requestBuilder1.getconverter();
        java.lang.Object[] objArray6 = new java.lang.Object[] { 0.0f, 100.0d };
        retrofit.RequestBuilder requestBuilder7 = requestBuilder1.args(objArray6);
        retrofit.RequestBuilder requestBuilder9 = requestBuilder7.apiUrl("hi!");
        java.lang.Class<?> wildcardClass10 = requestBuilder9.getClass();
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[0.0, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[0.0, 100.0]");
        org.junit.Assert.assertNotNull(requestBuilder7);
        org.junit.Assert.assertNotNull(requestBuilder9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0340");
        retrofit.converter.Converter converter4 = null;
        retrofit.RequestBuilder requestBuilder5 = new retrofit.RequestBuilder(converter4);
        java.util.List<retrofit.client.Header> headerList6 = requestBuilder5.headers;
        retrofit.client.Header[] headerArray11 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList12 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList12, headerArray11);
        retrofit.mime.TypedOutput typedOutput14 = null;
        retrofit.client.Request request15 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList12, typedOutput14);
        java.util.List<retrofit.client.Header> headerList16 = request15.headers;
        java.lang.Object[] objArray18 = new java.lang.Object[] { true, (short) 1, request15, 0 };
        requestBuilder5.args = objArray18;
        retrofit.converter.Converter converter20 = requestBuilder5.converter;
        java.util.List<retrofit.client.Header> headerList21 = requestBuilder5.headers;
        requestBuilder5.apiUrl = "hi!";
        retrofit.client.Header[] headerArray28 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList29 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList29, headerArray28);
        retrofit.mime.TypedOutput typedOutput31 = null;
        retrofit.client.Request request32 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList29, typedOutput31);
        java.lang.String str33 = request32.url;
        java.util.List<retrofit.client.Header> headerList34 = request32.headers;
        retrofit.mime.TypedOutput typedOutput35 = null;
        retrofit.client.Request request36 = new retrofit.client.Request("", "", headerList34, typedOutput35);
        retrofit.RequestBuilder requestBuilder37 = requestBuilder5.headers(headerList34);
        retrofit.mime.TypedOutput typedOutput38 = null;
        retrofit.client.Request request39 = new retrofit.client.Request("", "hi!", headerList34, typedOutput38);
        retrofit.mime.TypedOutput typedOutput40 = null;
        retrofit.client.Request request41 = new retrofit.client.Request("hi!", "hi!", headerList34, typedOutput40);
        java.lang.String str42 = request41.method;
        org.junit.Assert.assertNull(headerList6);
        org.junit.Assert.assertNotNull(headerArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(headerList16);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertNull(converter20);
        org.junit.Assert.assertNull(headerList21);
        org.junit.Assert.assertNotNull(headerArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(headerList34);
        org.junit.Assert.assertNotNull(requestBuilder37);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "hi!" + "'", str42, "hi!");
    }

    @Test
    public void test0341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0341");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        java.util.List<retrofit.client.Header> headerList12 = request11.headers;
        java.lang.Object[] objArray14 = new java.lang.Object[] { true, (short) 1, request11, 0 };
        requestBuilder1.args = objArray14;
        retrofit.converter.Converter converter16 = requestBuilder1.converter;
        java.util.List<retrofit.client.Header> headerList17 = requestBuilder1.headers;
        java.lang.String str18 = requestBuilder1.getapiUrl();
        retrofit.client.Header[] headerArray21 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList22 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList22, headerArray21);
        retrofit.mime.TypedOutput typedOutput24 = null;
        retrofit.client.Request request25 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList22, typedOutput24);
        java.util.List<retrofit.client.Header> headerList26 = request25.headers;
        requestBuilder1.setheaders(headerList26);
        requestBuilder1.setapiUrl("");
        java.lang.String str30 = requestBuilder1.apiUrl;
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNull(headerList17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(headerArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(headerList26);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
    }

    @Test
    public void test0342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0342");
        retrofit.converter.Converter converter2 = null;
        retrofit.RequestBuilder requestBuilder3 = new retrofit.RequestBuilder(converter2);
        requestBuilder3.setapiUrl("");
        java.lang.String str6 = requestBuilder3.getapiUrl();
        requestBuilder3.setapiUrl("hi!");
        retrofit.RequestBuilder requestBuilder10 = requestBuilder3.apiUrl("");
        requestBuilder3.apiUrl = "";
        retrofit.converter.Converter converter17 = null;
        retrofit.RequestBuilder requestBuilder18 = new retrofit.RequestBuilder(converter17);
        retrofit.client.Header[] headerArray25 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList26 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList26, headerArray25);
        retrofit.mime.TypedOutput typedOutput28 = null;
        retrofit.client.Request request29 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList26, typedOutput28);
        java.lang.String str30 = request29.url;
        java.util.List<retrofit.client.Header> headerList31 = request29.headers;
        retrofit.mime.TypedOutput typedOutput32 = null;
        retrofit.client.Request request33 = new retrofit.client.Request("", "", headerList31, typedOutput32);
        retrofit.mime.TypedOutput typedOutput34 = request33.body;
        java.util.List<retrofit.client.Header> headerList35 = request33.headers;
        retrofit.mime.TypedOutput typedOutput36 = null;
        retrofit.client.Request request37 = new retrofit.client.Request("hi!", "", headerList35, typedOutput36);
        requestBuilder18.headers = headerList35;
        retrofit.mime.TypedOutput typedOutput39 = null;
        retrofit.client.Request request40 = new retrofit.client.Request("", "", headerList35, typedOutput39);
        retrofit.mime.TypedOutput typedOutput41 = null;
        retrofit.client.Request request42 = new retrofit.client.Request("", "hi!", headerList35, typedOutput41);
        retrofit.RequestBuilder requestBuilder43 = requestBuilder3.headers(headerList35);
        retrofit.mime.TypedOutput typedOutput44 = null;
        retrofit.client.Request request45 = new retrofit.client.Request("", "hi!", headerList35, typedOutput44);
        retrofit.mime.TypedOutput typedOutput46 = request45.getBody();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(requestBuilder10);
        org.junit.Assert.assertNotNull(headerArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(headerList31);
        org.junit.Assert.assertNull(typedOutput34);
        org.junit.Assert.assertNotNull(headerList35);
        org.junit.Assert.assertNotNull(requestBuilder43);
        org.junit.Assert.assertNull(typedOutput46);
    }

    @Test
    public void test0343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0343");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        retrofit.client.Header[] headerArray8 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList9 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList9, headerArray8);
        retrofit.mime.TypedOutput typedOutput11 = null;
        retrofit.client.Request request12 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList9, typedOutput11);
        java.lang.String str13 = request12.url;
        java.util.List<retrofit.client.Header> headerList14 = request12.headers;
        retrofit.mime.TypedOutput typedOutput15 = null;
        retrofit.client.Request request16 = new retrofit.client.Request("", "", headerList14, typedOutput15);
        retrofit.mime.TypedOutput typedOutput17 = request16.body;
        java.util.List<retrofit.client.Header> headerList18 = request16.headers;
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("hi!", "", headerList18, typedOutput19);
        requestBuilder1.headers = headerList18;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.mime.TypedOutput typedOutput22 = requestBuilder1.buildBody();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(headerArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(headerList14);
        org.junit.Assert.assertNull(typedOutput17);
        org.junit.Assert.assertNotNull(headerList18);
    }

    @Test
    public void test0344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0344");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        requestBuilder1.setapiUrl("hi!");
        java.lang.Object[] objArray4 = requestBuilder1.args;
        java.lang.Class<?> wildcardClass5 = requestBuilder1.getClass();
        org.junit.Assert.assertNull(objArray4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0345");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        requestBuilder1.setapiUrl("");
        java.lang.String str4 = requestBuilder1.getapiUrl();
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        requestBuilder1.setheaders((java.util.List<retrofit.client.Header>) headerList8);
        retrofit.converter.Converter converter13 = null;
        retrofit.RequestBuilder requestBuilder14 = new retrofit.RequestBuilder(converter13);
        java.lang.Object[] objArray15 = requestBuilder14.getargs();
        retrofit.converter.Converter converter16 = requestBuilder14.getconverter();
        retrofit.client.Header[] headerArray23 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList24 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList24, headerArray23);
        retrofit.mime.TypedOutput typedOutput26 = null;
        retrofit.client.Request request27 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList24, typedOutput26);
        retrofit.mime.TypedOutput typedOutput28 = null;
        retrofit.client.Request request29 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList24, typedOutput28);
        retrofit.mime.TypedOutput typedOutput30 = null;
        retrofit.client.Request request31 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList24, typedOutput30);
        java.util.List<retrofit.client.Header> headerList32 = request31.getHeaders();
        requestBuilder14.setheaders(headerList32);
        requestBuilder1.headers = headerList32;
        retrofit.RequestBuilder requestBuilder36 = requestBuilder1.apiUrl("");
        java.lang.String str37 = requestBuilder36.getapiUrl();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(objArray15);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNotNull(headerArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(headerList32);
        org.junit.Assert.assertNotNull(requestBuilder36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
    }

    @Test
    public void test0346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0346");
        retrofit.client.Header[] headerArray10 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList11 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList11, headerArray10);
        retrofit.mime.TypedOutput typedOutput13 = null;
        retrofit.client.Request request14 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList11, typedOutput13);
        retrofit.mime.TypedOutput typedOutput15 = null;
        retrofit.client.Request request16 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList11, typedOutput15);
        retrofit.mime.TypedOutput typedOutput17 = null;
        retrofit.client.Request request18 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList11, typedOutput17);
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList11, typedOutput19);
        retrofit.mime.TypedOutput typedOutput21 = null;
        retrofit.client.Request request22 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList11, typedOutput21);
        org.junit.Assert.assertNotNull(headerArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0347");
        retrofit.client.Header[] headerArray6 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList7 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList7, headerArray6);
        retrofit.mime.TypedOutput typedOutput9 = null;
        retrofit.client.Request request10 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList7, typedOutput9);
        java.lang.String str11 = request10.url;
        java.util.List<retrofit.client.Header> headerList12 = request10.headers;
        retrofit.mime.TypedOutput typedOutput13 = request10.body;
        retrofit.mime.TypedOutput typedOutput14 = request10.body;
        java.util.List<retrofit.client.Header> headerList15 = request10.headers;
        retrofit.mime.TypedOutput typedOutput16 = null;
        retrofit.client.Request request17 = new retrofit.client.Request("hi!", "hi!", headerList15, typedOutput16);
        retrofit.mime.TypedOutput typedOutput18 = request17.body;
        java.util.List<retrofit.client.Header> headerList19 = request17.getHeaders();
        retrofit.mime.TypedOutput typedOutput20 = null;
        retrofit.client.Request request21 = new retrofit.client.Request("", "hi!", headerList19, typedOutput20);
        retrofit.mime.TypedOutput typedOutput22 = request21.getBody();
        java.lang.Class<?> wildcardClass23 = request21.getClass();
        org.junit.Assert.assertNotNull(headerArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNull(typedOutput13);
        org.junit.Assert.assertNull(typedOutput14);
        org.junit.Assert.assertNotNull(headerList15);
        org.junit.Assert.assertNull(typedOutput18);
        org.junit.Assert.assertNotNull(headerList19);
        org.junit.Assert.assertNull(typedOutput22);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0348");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        retrofit.converter.Converter converter2 = requestBuilder1.converter;
        retrofit.converter.Converter converter3 = requestBuilder1.converter;
        java.lang.String str4 = requestBuilder1.apiUrl;
        java.lang.String str5 = requestBuilder1.getapiUrl();
        org.junit.Assert.assertNull(converter2);
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test0349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0349");
        retrofit.client.Header[] headerArray6 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList7 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList7, headerArray6);
        retrofit.mime.TypedOutput typedOutput9 = null;
        retrofit.client.Request request10 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList7, typedOutput9);
        retrofit.mime.TypedOutput typedOutput11 = null;
        retrofit.client.Request request12 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList7, typedOutput11);
        retrofit.mime.TypedOutput typedOutput13 = null;
        retrofit.client.Request request14 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList7, typedOutput13);
        java.util.List<retrofit.client.Header> headerList15 = request14.getHeaders();
        java.lang.String str16 = request14.getMethod();
        retrofit.mime.TypedOutput typedOutput17 = request14.body;
        org.junit.Assert.assertNotNull(headerArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(headerList15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNull(typedOutput17);
    }

    @Test
    public void test0350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0350");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        retrofit.client.Header[] headerArray8 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList9 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList9, headerArray8);
        retrofit.mime.TypedOutput typedOutput11 = null;
        retrofit.client.Request request12 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList9, typedOutput11);
        java.lang.String str13 = request12.url;
        java.util.List<retrofit.client.Header> headerList14 = request12.headers;
        retrofit.mime.TypedOutput typedOutput15 = null;
        retrofit.client.Request request16 = new retrofit.client.Request("", "", headerList14, typedOutput15);
        retrofit.mime.TypedOutput typedOutput17 = request16.body;
        java.util.List<retrofit.client.Header> headerList18 = request16.headers;
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("hi!", "", headerList18, typedOutput19);
        requestBuilder1.headers = headerList18;
        retrofit.client.Header[] headerArray28 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList29 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList29, headerArray28);
        retrofit.mime.TypedOutput typedOutput31 = null;
        retrofit.client.Request request32 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList29, typedOutput31);
        java.lang.String str33 = request32.url;
        java.util.List<retrofit.client.Header> headerList34 = request32.headers;
        retrofit.mime.TypedOutput typedOutput35 = null;
        retrofit.client.Request request36 = new retrofit.client.Request("", "", headerList34, typedOutput35);
        retrofit.mime.TypedOutput typedOutput37 = request36.body;
        retrofit.mime.TypedOutput typedOutput38 = request36.getBody();
        java.util.List<retrofit.client.Header> headerList39 = request36.getHeaders();
        retrofit.mime.TypedOutput typedOutput40 = null;
        retrofit.client.Request request41 = new retrofit.client.Request("", "", headerList39, typedOutput40);
        requestBuilder1.headers = headerList39;
        java.util.List<retrofit.client.Header> headerList43 = requestBuilder1.getheaders();
        retrofit.client.Header[] headerArray50 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList51 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList51, headerArray50);
        retrofit.mime.TypedOutput typedOutput53 = null;
        retrofit.client.Request request54 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList51, typedOutput53);
        java.lang.String str55 = request54.url;
        java.util.List<retrofit.client.Header> headerList56 = request54.headers;
        retrofit.mime.TypedOutput typedOutput57 = request54.body;
        retrofit.mime.TypedOutput typedOutput58 = request54.body;
        java.util.List<retrofit.client.Header> headerList59 = request54.headers;
        retrofit.mime.TypedOutput typedOutput60 = null;
        retrofit.client.Request request61 = new retrofit.client.Request("", "hi!", headerList59, typedOutput60);
        java.util.List<retrofit.client.Header> headerList62 = request61.getHeaders();
        retrofit.mime.TypedOutput typedOutput63 = null;
        retrofit.client.Request request64 = new retrofit.client.Request("", "hi!", headerList62, typedOutput63);
        requestBuilder1.headers = headerList62;
        retrofit.client.Header[] headerArray70 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList71 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList71, headerArray70);
        retrofit.mime.TypedOutput typedOutput73 = null;
        retrofit.client.Request request74 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList71, typedOutput73);
        java.util.List<retrofit.client.Header> headerList75 = request74.headers;
        java.util.List<retrofit.client.Header> headerList76 = request74.headers;
        retrofit.mime.TypedOutput typedOutput77 = null;
        retrofit.client.Request request78 = new retrofit.client.Request("", "", headerList76, typedOutput77);
        retrofit.RequestBuilder requestBuilder79 = requestBuilder1.headers(headerList76);
        // The following exception was thrown during execution in test generation
        try {
            retrofit.mime.TypedOutput typedOutput80 = requestBuilder1.buildBody();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(headerArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(headerList14);
        org.junit.Assert.assertNull(typedOutput17);
        org.junit.Assert.assertNotNull(headerList18);
        org.junit.Assert.assertNotNull(headerArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(headerList34);
        org.junit.Assert.assertNull(typedOutput37);
        org.junit.Assert.assertNull(typedOutput38);
        org.junit.Assert.assertNotNull(headerList39);
        org.junit.Assert.assertNotNull(headerList43);
        org.junit.Assert.assertNotNull(headerArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(headerList56);
        org.junit.Assert.assertNull(typedOutput57);
        org.junit.Assert.assertNull(typedOutput58);
        org.junit.Assert.assertNotNull(headerList59);
        org.junit.Assert.assertNotNull(headerList62);
        org.junit.Assert.assertNotNull(headerArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(headerList75);
        org.junit.Assert.assertNotNull(headerList76);
        org.junit.Assert.assertNotNull(requestBuilder79);
    }

    @Test
    public void test0351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0351");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        java.util.List<retrofit.client.Header> headerList12 = request11.headers;
        java.lang.Object[] objArray14 = new java.lang.Object[] { true, (short) 1, request11, 0 };
        requestBuilder1.args = objArray14;
        retrofit.converter.Converter converter16 = requestBuilder1.converter;
        java.lang.Object[] objArray17 = requestBuilder1.args;
        retrofit.client.Header[] headerArray20 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList21 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList21, headerArray20);
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList21, typedOutput23);
        java.lang.String str25 = request24.url;
        java.util.List<retrofit.client.Header> headerList26 = request24.headers;
        retrofit.mime.TypedOutput typedOutput27 = request24.body;
        retrofit.mime.TypedOutput typedOutput28 = request24.body;
        java.util.List<retrofit.client.Header> headerList29 = request24.headers;
        requestBuilder1.setheaders(headerList29);
        requestBuilder1.setapiUrl("hi!");
        retrofit.converter.Converter converter33 = null;
        retrofit.RequestBuilder requestBuilder34 = new retrofit.RequestBuilder(converter33);
        java.lang.Object[] objArray35 = requestBuilder34.getargs();
        retrofit.converter.Converter converter36 = requestBuilder34.getconverter();
        retrofit.client.Header[] headerArray43 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList44 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList44, headerArray43);
        retrofit.mime.TypedOutput typedOutput46 = null;
        retrofit.client.Request request47 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList44, typedOutput46);
        retrofit.mime.TypedOutput typedOutput48 = null;
        retrofit.client.Request request49 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList44, typedOutput48);
        retrofit.mime.TypedOutput typedOutput50 = null;
        retrofit.client.Request request51 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList44, typedOutput50);
        java.util.List<retrofit.client.Header> headerList52 = request51.getHeaders();
        requestBuilder34.setheaders(headerList52);
        retrofit.RequestBuilder requestBuilder54 = requestBuilder1.headers(headerList52);
        retrofit.RequestBuilder requestBuilder56 = requestBuilder1.apiUrl("");
        retrofit.client.Header[] headerArray63 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList64 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList64, headerArray63);
        retrofit.mime.TypedOutput typedOutput66 = null;
        retrofit.client.Request request67 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList64, typedOutput66);
        retrofit.mime.TypedOutput typedOutput68 = null;
        retrofit.client.Request request69 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList64, typedOutput68);
        retrofit.mime.TypedOutput typedOutput70 = null;
        retrofit.client.Request request71 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList64, typedOutput70);
        requestBuilder1.setheaders((java.util.List<retrofit.client.Header>) headerList64);
        retrofit.client.Header[] headerArray75 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList76 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList76, headerArray75);
        retrofit.mime.TypedOutput typedOutput78 = null;
        retrofit.client.Request request79 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList76, typedOutput78);
        java.lang.String str80 = request79.getUrl();
        java.util.List<retrofit.client.Header> headerList81 = request79.getHeaders();
        requestBuilder1.setheaders(headerList81);
        java.lang.Class<?> wildcardClass83 = requestBuilder1.getClass();
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertNotNull(headerArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(headerList26);
        org.junit.Assert.assertNull(typedOutput27);
        org.junit.Assert.assertNull(typedOutput28);
        org.junit.Assert.assertNotNull(headerList29);
        org.junit.Assert.assertNull(objArray35);
        org.junit.Assert.assertNull(converter36);
        org.junit.Assert.assertNotNull(headerArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(headerList52);
        org.junit.Assert.assertNotNull(requestBuilder54);
        org.junit.Assert.assertNotNull(requestBuilder56);
        org.junit.Assert.assertNotNull(headerArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(headerArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertNotNull(headerList81);
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test0352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0352");
        retrofit.client.Header[] headerArray4 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList5 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList5, headerArray4);
        retrofit.mime.TypedOutput typedOutput7 = null;
        retrofit.client.Request request8 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList5, typedOutput7);
        java.util.List<retrofit.client.Header> headerList9 = request8.headers;
        java.util.List<retrofit.client.Header> headerList10 = request8.getHeaders();
        retrofit.mime.TypedOutput typedOutput11 = null;
        retrofit.client.Request request12 = new retrofit.client.Request("", "", headerList10, typedOutput11);
        org.junit.Assert.assertNotNull(headerArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(headerList9);
        org.junit.Assert.assertNotNull(headerList10);
    }

    @Test
    public void test0353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0353");
        retrofit.client.Header[] headerArray8 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList9 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList9, headerArray8);
        retrofit.mime.TypedOutput typedOutput11 = null;
        retrofit.client.Request request12 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList9, typedOutput11);
        java.util.List<retrofit.client.Header> headerList13 = request12.headers;
        retrofit.mime.TypedOutput typedOutput14 = request12.body;
        java.lang.String str15 = request12.method;
        java.util.List<retrofit.client.Header> headerList16 = request12.getHeaders();
        retrofit.mime.TypedOutput typedOutput17 = null;
        retrofit.client.Request request18 = new retrofit.client.Request("hi!", "", headerList16, typedOutput17);
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("", "", headerList16, typedOutput19);
        retrofit.mime.TypedOutput typedOutput21 = null;
        retrofit.client.Request request22 = new retrofit.client.Request("", "", headerList16, typedOutput21);
        org.junit.Assert.assertNotNull(headerArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(headerList13);
        org.junit.Assert.assertNull(typedOutput14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(headerList16);
    }

    @Test
    public void test0354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0354");
        retrofit.client.Header[] headerArray6 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList7 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList7, headerArray6);
        retrofit.mime.TypedOutput typedOutput9 = null;
        retrofit.client.Request request10 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList7, typedOutput9);
        retrofit.mime.TypedOutput typedOutput11 = null;
        retrofit.client.Request request12 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList7, typedOutput11);
        retrofit.mime.TypedOutput typedOutput13 = null;
        retrofit.client.Request request14 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList7, typedOutput13);
        java.lang.String str15 = request14.getUrl();
        retrofit.mime.TypedOutput typedOutput16 = request14.getBody();
        retrofit.mime.TypedOutput typedOutput17 = request14.body;
        java.util.List<retrofit.client.Header> headerList18 = request14.getHeaders();
        org.junit.Assert.assertNotNull(headerArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNull(typedOutput16);
        org.junit.Assert.assertNull(typedOutput17);
        org.junit.Assert.assertNotNull(headerList18);
    }

    @Test
    public void test0355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0355");
        retrofit.client.Header[] headerArray8 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList9 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList9, headerArray8);
        retrofit.mime.TypedOutput typedOutput11 = null;
        retrofit.client.Request request12 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList9, typedOutput11);
        retrofit.mime.TypedOutput typedOutput13 = null;
        retrofit.client.Request request14 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList9, typedOutput13);
        retrofit.mime.TypedOutput typedOutput15 = null;
        retrofit.client.Request request16 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList9, typedOutput15);
        retrofit.mime.TypedOutput typedOutput17 = null;
        retrofit.client.Request request18 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList9, typedOutput17);
        retrofit.mime.TypedOutput typedOutput19 = request18.getBody();
        retrofit.mime.TypedOutput typedOutput20 = request18.body;
        retrofit.mime.TypedOutput typedOutput21 = request18.body;
        org.junit.Assert.assertNotNull(headerArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(typedOutput19);
        org.junit.Assert.assertNull(typedOutput20);
        org.junit.Assert.assertNull(typedOutput21);
    }

    @Test
    public void test0356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0356");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        retrofit.client.Header[] headerArray8 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList9 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList9, headerArray8);
        retrofit.mime.TypedOutput typedOutput11 = null;
        retrofit.client.Request request12 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList9, typedOutput11);
        java.lang.String str13 = request12.url;
        java.util.List<retrofit.client.Header> headerList14 = request12.headers;
        retrofit.mime.TypedOutput typedOutput15 = null;
        retrofit.client.Request request16 = new retrofit.client.Request("", "", headerList14, typedOutput15);
        retrofit.mime.TypedOutput typedOutput17 = request16.body;
        java.util.List<retrofit.client.Header> headerList18 = request16.headers;
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("hi!", "", headerList18, typedOutput19);
        requestBuilder1.headers = headerList18;
        retrofit.client.Header[] headerArray28 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList29 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList29, headerArray28);
        retrofit.mime.TypedOutput typedOutput31 = null;
        retrofit.client.Request request32 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList29, typedOutput31);
        java.lang.String str33 = request32.url;
        java.util.List<retrofit.client.Header> headerList34 = request32.headers;
        retrofit.mime.TypedOutput typedOutput35 = null;
        retrofit.client.Request request36 = new retrofit.client.Request("", "", headerList34, typedOutput35);
        retrofit.mime.TypedOutput typedOutput37 = request36.body;
        retrofit.mime.TypedOutput typedOutput38 = request36.getBody();
        java.util.List<retrofit.client.Header> headerList39 = request36.getHeaders();
        retrofit.mime.TypedOutput typedOutput40 = null;
        retrofit.client.Request request41 = new retrofit.client.Request("", "", headerList39, typedOutput40);
        requestBuilder1.headers = headerList39;
        retrofit.converter.Converter converter43 = requestBuilder1.converter;
        org.junit.Assert.assertNotNull(headerArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(headerList14);
        org.junit.Assert.assertNull(typedOutput17);
        org.junit.Assert.assertNotNull(headerList18);
        org.junit.Assert.assertNotNull(headerArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(headerList34);
        org.junit.Assert.assertNull(typedOutput37);
        org.junit.Assert.assertNull(typedOutput38);
        org.junit.Assert.assertNotNull(headerList39);
        org.junit.Assert.assertNull(converter43);
    }

    @Test
    public void test0357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0357");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        requestBuilder1.setapiUrl("hi!");
        java.lang.Object[] objArray4 = requestBuilder1.args;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request5 = requestBuilder1.build();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(objArray4);
    }

    @Test
    public void test0358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0358");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        retrofit.client.Header[] headerArray8 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList9 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList9, headerArray8);
        retrofit.mime.TypedOutput typedOutput11 = null;
        retrofit.client.Request request12 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList9, typedOutput11);
        java.lang.String str13 = request12.url;
        java.util.List<retrofit.client.Header> headerList14 = request12.headers;
        retrofit.mime.TypedOutput typedOutput15 = null;
        retrofit.client.Request request16 = new retrofit.client.Request("", "", headerList14, typedOutput15);
        retrofit.mime.TypedOutput typedOutput17 = request16.body;
        java.util.List<retrofit.client.Header> headerList18 = request16.headers;
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("hi!", "", headerList18, typedOutput19);
        requestBuilder1.headers = headerList18;
        requestBuilder1.setapiUrl("");
        requestBuilder1.apiUrl = "";
        // The following exception was thrown during execution in test generation
        try {
            retrofit.mime.TypedOutput typedOutput26 = requestBuilder1.buildBody();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(headerArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(headerList14);
        org.junit.Assert.assertNull(typedOutput17);
        org.junit.Assert.assertNotNull(headerList18);
    }

    @Test
    public void test0359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0359");
        retrofit.client.Header[] headerArray4 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList5 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList5, headerArray4);
        retrofit.mime.TypedOutput typedOutput7 = null;
        retrofit.client.Request request8 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList5, typedOutput7);
        java.lang.String str9 = request8.url;
        java.util.List<retrofit.client.Header> headerList10 = request8.headers;
        retrofit.mime.TypedOutput typedOutput11 = request8.body;
        retrofit.mime.TypedOutput typedOutput12 = request8.body;
        retrofit.mime.TypedOutput typedOutput13 = request8.getBody();
        retrofit.mime.TypedOutput typedOutput14 = request8.body;
        java.util.List<retrofit.client.Header> headerList15 = request8.getHeaders();
        java.util.List<retrofit.client.Header> headerList16 = request8.getHeaders();
        java.util.List<retrofit.client.Header> headerList17 = request8.getHeaders();
        java.util.List<retrofit.client.Header> headerList18 = request8.headers;
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("", "", headerList18, typedOutput19);
        java.lang.Class<?> wildcardClass21 = request20.getClass();
        org.junit.Assert.assertNotNull(headerArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(headerList10);
        org.junit.Assert.assertNull(typedOutput11);
        org.junit.Assert.assertNull(typedOutput12);
        org.junit.Assert.assertNull(typedOutput13);
        org.junit.Assert.assertNull(typedOutput14);
        org.junit.Assert.assertNotNull(headerList15);
        org.junit.Assert.assertNotNull(headerList16);
        org.junit.Assert.assertNotNull(headerList17);
        org.junit.Assert.assertNotNull(headerList18);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0360");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        java.util.List<retrofit.client.Header> headerList12 = request11.headers;
        java.lang.Object[] objArray14 = new java.lang.Object[] { true, (short) 1, request11, 0 };
        requestBuilder1.args = objArray14;
        retrofit.converter.Converter converter16 = requestBuilder1.converter;
        java.lang.Object[] objArray17 = requestBuilder1.args;
        retrofit.client.Header[] headerArray20 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList21 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList21, headerArray20);
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList21, typedOutput23);
        java.lang.String str25 = request24.url;
        java.util.List<retrofit.client.Header> headerList26 = request24.headers;
        retrofit.mime.TypedOutput typedOutput27 = request24.body;
        retrofit.mime.TypedOutput typedOutput28 = request24.body;
        java.util.List<retrofit.client.Header> headerList29 = request24.headers;
        requestBuilder1.setheaders(headerList29);
        requestBuilder1.setapiUrl("hi!");
        retrofit.RequestBuilder requestBuilder34 = requestBuilder1.apiUrl("hi!");
        java.util.List<retrofit.client.Header> headerList35 = requestBuilder1.headers;
        java.lang.Class<?> wildcardClass36 = requestBuilder1.getClass();
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertNotNull(headerArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(headerList26);
        org.junit.Assert.assertNull(typedOutput27);
        org.junit.Assert.assertNull(typedOutput28);
        org.junit.Assert.assertNotNull(headerList29);
        org.junit.Assert.assertNotNull(requestBuilder34);
        org.junit.Assert.assertNotNull(headerList35);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test0361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0361");
        retrofit.client.Header[] headerArray2 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList3 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList3, headerArray2);
        retrofit.mime.TypedOutput typedOutput5 = null;
        retrofit.client.Request request6 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList3, typedOutput5);
        java.util.List<retrofit.client.Header> headerList7 = request6.headers;
        retrofit.mime.TypedOutput typedOutput8 = request6.body;
        java.util.List<retrofit.client.Header> headerList9 = request6.headers;
        retrofit.mime.TypedOutput typedOutput10 = request6.body;
        java.lang.String str11 = request6.url;
        java.util.List<retrofit.client.Header> headerList12 = request6.getHeaders();
        retrofit.mime.TypedOutput typedOutput13 = request6.body;
        org.junit.Assert.assertNotNull(headerArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(headerList7);
        org.junit.Assert.assertNull(typedOutput8);
        org.junit.Assert.assertNotNull(headerList9);
        org.junit.Assert.assertNull(typedOutput10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNull(typedOutput13);
    }

    @Test
    public void test0362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0362");
        retrofit.client.Header[] headerArray4 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList5 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList5, headerArray4);
        retrofit.mime.TypedOutput typedOutput7 = null;
        retrofit.client.Request request8 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList5, typedOutput7);
        java.lang.String str9 = request8.url;
        java.util.List<retrofit.client.Header> headerList10 = request8.headers;
        retrofit.mime.TypedOutput typedOutput11 = null;
        retrofit.client.Request request12 = new retrofit.client.Request("", "", headerList10, typedOutput11);
        retrofit.mime.TypedOutput typedOutput13 = request12.body;
        retrofit.mime.TypedOutput typedOutput14 = request12.getBody();
        java.util.List<retrofit.client.Header> headerList15 = request12.getHeaders();
        java.lang.String str16 = request12.getMethod();
        retrofit.mime.TypedOutput typedOutput17 = request12.body;
        org.junit.Assert.assertNotNull(headerArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(headerList10);
        org.junit.Assert.assertNull(typedOutput13);
        org.junit.Assert.assertNull(typedOutput14);
        org.junit.Assert.assertNotNull(headerList15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNull(typedOutput17);
    }

    @Test
    public void test0363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0363");
        retrofit.client.Header[] headerArray2 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList3 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList3, headerArray2);
        retrofit.mime.TypedOutput typedOutput5 = null;
        retrofit.client.Request request6 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList3, typedOutput5);
        java.lang.String str7 = request6.method;
        java.lang.String str8 = request6.getMethod();
        java.util.List<retrofit.client.Header> headerList9 = request6.headers;
        java.lang.String str10 = request6.getMethod();
        java.lang.String str11 = request6.getMethod();
        org.junit.Assert.assertNotNull(headerArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(headerList9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test0364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0364");
        retrofit.client.Header[] headerArray2 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList3 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList3, headerArray2);
        retrofit.mime.TypedOutput typedOutput5 = null;
        retrofit.client.Request request6 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList3, typedOutput5);
        java.lang.String str7 = request6.url;
        java.util.List<retrofit.client.Header> headerList8 = request6.headers;
        retrofit.mime.TypedOutput typedOutput9 = request6.body;
        retrofit.mime.TypedOutput typedOutput10 = request6.body;
        retrofit.mime.TypedOutput typedOutput11 = request6.getBody();
        retrofit.mime.TypedOutput typedOutput12 = request6.body;
        retrofit.mime.TypedOutput typedOutput13 = request6.getBody();
        java.lang.String str14 = request6.getMethod();
        retrofit.mime.TypedOutput typedOutput15 = request6.body;
        retrofit.mime.TypedOutput typedOutput16 = request6.getBody();
        org.junit.Assert.assertNotNull(headerArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(headerList8);
        org.junit.Assert.assertNull(typedOutput9);
        org.junit.Assert.assertNull(typedOutput10);
        org.junit.Assert.assertNull(typedOutput11);
        org.junit.Assert.assertNull(typedOutput12);
        org.junit.Assert.assertNull(typedOutput13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNull(typedOutput15);
        org.junit.Assert.assertNull(typedOutput16);
    }

    @Test
    public void test0365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0365");
        retrofit.client.Header[] headerArray10 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList11 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList11, headerArray10);
        retrofit.mime.TypedOutput typedOutput13 = null;
        retrofit.client.Request request14 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList11, typedOutput13);
        java.lang.String str15 = request14.url;
        java.util.List<retrofit.client.Header> headerList16 = request14.headers;
        retrofit.mime.TypedOutput typedOutput17 = null;
        retrofit.client.Request request18 = new retrofit.client.Request("", "", headerList16, typedOutput17);
        retrofit.mime.TypedOutput typedOutput19 = request18.body;
        java.util.List<retrofit.client.Header> headerList20 = request18.headers;
        retrofit.mime.TypedOutput typedOutput21 = null;
        retrofit.client.Request request22 = new retrofit.client.Request("", "hi!", headerList20, typedOutput21);
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("", "hi!", headerList20, typedOutput23);
        java.util.List<retrofit.client.Header> headerList25 = request24.getHeaders();
        retrofit.mime.TypedOutput typedOutput26 = null;
        retrofit.client.Request request27 = new retrofit.client.Request("hi!", "hi!", headerList25, typedOutput26);
        java.lang.String str28 = request27.getUrl();
        java.lang.Class<?> wildcardClass29 = request27.getClass();
        org.junit.Assert.assertNotNull(headerArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(headerList16);
        org.junit.Assert.assertNull(typedOutput19);
        org.junit.Assert.assertNotNull(headerList20);
        org.junit.Assert.assertNotNull(headerList25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test0366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0366");
        retrofit.client.Header[] headerArray4 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList5 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList5, headerArray4);
        retrofit.mime.TypedOutput typedOutput7 = null;
        retrofit.client.Request request8 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList5, typedOutput7);
        java.lang.String str9 = request8.method;
        java.lang.String str10 = request8.getMethod();
        java.util.List<retrofit.client.Header> headerList11 = request8.headers;
        retrofit.mime.TypedOutput typedOutput12 = null;
        retrofit.client.Request request13 = new retrofit.client.Request("hi!", "hi!", headerList11, typedOutput12);
        java.lang.String str14 = request13.url;
        java.lang.String str15 = request13.getMethod();
        org.junit.Assert.assertNotNull(headerArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(headerList11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
    }

    @Test
    public void test0367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0367");
        retrofit.converter.Converter converter4 = null;
        retrofit.RequestBuilder requestBuilder5 = new retrofit.RequestBuilder(converter4);
        java.util.List<retrofit.client.Header> headerList6 = requestBuilder5.headers;
        retrofit.client.Header[] headerArray11 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList12 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList12, headerArray11);
        retrofit.mime.TypedOutput typedOutput14 = null;
        retrofit.client.Request request15 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList12, typedOutput14);
        java.util.List<retrofit.client.Header> headerList16 = request15.headers;
        java.lang.Object[] objArray18 = new java.lang.Object[] { true, (short) 1, request15, 0 };
        requestBuilder5.args = objArray18;
        retrofit.converter.Converter converter20 = requestBuilder5.converter;
        java.lang.Object[] objArray21 = requestBuilder5.args;
        java.lang.Object[] objArray22 = null;
        retrofit.RequestBuilder requestBuilder23 = requestBuilder5.args(objArray22);
        java.lang.Object[] objArray24 = requestBuilder5.getargs();
        retrofit.client.Header[] headerArray29 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList30 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList30, headerArray29);
        retrofit.mime.TypedOutput typedOutput32 = null;
        retrofit.client.Request request33 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList30, typedOutput32);
        java.lang.String str34 = request33.url;
        java.util.List<retrofit.client.Header> headerList35 = request33.headers;
        retrofit.mime.TypedOutput typedOutput36 = request33.body;
        retrofit.mime.TypedOutput typedOutput37 = request33.body;
        java.util.List<retrofit.client.Header> headerList38 = request33.headers;
        retrofit.mime.TypedOutput typedOutput39 = null;
        retrofit.client.Request request40 = new retrofit.client.Request("", "hi!", headerList38, typedOutput39);
        java.util.List<retrofit.client.Header> headerList41 = request40.getHeaders();
        retrofit.RequestBuilder requestBuilder42 = requestBuilder5.headers(headerList41);
        retrofit.mime.TypedOutput typedOutput43 = null;
        retrofit.client.Request request44 = new retrofit.client.Request("", "", headerList41, typedOutput43);
        retrofit.mime.TypedOutput typedOutput45 = null;
        retrofit.client.Request request46 = new retrofit.client.Request("hi!", "hi!", headerList41, typedOutput45);
        java.lang.String str47 = request46.method;
        java.lang.String str48 = request46.method;
        org.junit.Assert.assertNull(headerList6);
        org.junit.Assert.assertNotNull(headerArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(headerList16);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertNull(converter20);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertNotNull(requestBuilder23);
        org.junit.Assert.assertNull(objArray24);
        org.junit.Assert.assertNotNull(headerArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(headerList35);
        org.junit.Assert.assertNull(typedOutput36);
        org.junit.Assert.assertNull(typedOutput37);
        org.junit.Assert.assertNotNull(headerList38);
        org.junit.Assert.assertNotNull(headerList41);
        org.junit.Assert.assertNotNull(requestBuilder42);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hi!" + "'", str47, "hi!");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "hi!" + "'", str48, "hi!");
    }

    @Test
    public void test0368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0368");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        retrofit.converter.Converter converter2 = requestBuilder1.converter;
        java.lang.Object[] objArray3 = requestBuilder1.args;
        java.lang.String str4 = requestBuilder1.getapiUrl();
        retrofit.converter.Converter converter5 = requestBuilder1.getconverter();
        java.lang.Class<?> wildcardClass6 = requestBuilder1.getClass();
        org.junit.Assert.assertNull(converter2);
        org.junit.Assert.assertNull(objArray3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(converter5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0369");
        retrofit.client.Header[] headerArray6 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList7 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList7, headerArray6);
        retrofit.mime.TypedOutput typedOutput9 = null;
        retrofit.client.Request request10 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList7, typedOutput9);
        retrofit.mime.TypedOutput typedOutput11 = null;
        retrofit.client.Request request12 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList7, typedOutput11);
        retrofit.mime.TypedOutput typedOutput13 = null;
        retrofit.client.Request request14 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList7, typedOutput13);
        java.lang.String str15 = request14.method;
        java.lang.String str16 = request14.getUrl();
        java.util.List<retrofit.client.Header> headerList17 = request14.getHeaders();
        java.lang.String str18 = request14.method;
        java.lang.String str19 = request14.getMethod();
        java.util.List<retrofit.client.Header> headerList20 = request14.getHeaders();
        org.junit.Assert.assertNotNull(headerArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(headerList17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNotNull(headerList20);
    }

    @Test
    public void test0370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0370");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.converter.Converter converter3 = requestBuilder1.getconverter();
        java.lang.Object[] objArray6 = new java.lang.Object[] { 0.0f, 100.0d };
        retrofit.RequestBuilder requestBuilder7 = requestBuilder1.args(objArray6);
        java.util.List<retrofit.client.Header> headerList8 = requestBuilder7.headers;
        java.lang.Object[] objArray9 = requestBuilder7.getargs();
        java.lang.String str10 = requestBuilder7.getapiUrl();
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[0.0, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[0.0, 100.0]");
        org.junit.Assert.assertNotNull(requestBuilder7);
        org.junit.Assert.assertNull(headerList8);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[0.0, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[0.0, 100.0]");
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test0371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0371");
        retrofit.client.Header[] headerArray6 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList7 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList7, headerArray6);
        retrofit.mime.TypedOutput typedOutput9 = null;
        retrofit.client.Request request10 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList7, typedOutput9);
        retrofit.mime.TypedOutput typedOutput11 = null;
        retrofit.client.Request request12 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList7, typedOutput11);
        retrofit.mime.TypedOutput typedOutput13 = null;
        retrofit.client.Request request14 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList7, typedOutput13);
        java.lang.String str15 = request14.method;
        java.lang.String str16 = request14.url;
        java.lang.String str17 = request14.method;
        java.util.List<retrofit.client.Header> headerList18 = request14.getHeaders();
        java.lang.String str19 = request14.getUrl();
        java.util.List<retrofit.client.Header> headerList20 = request14.headers;
        java.lang.String str21 = request14.method;
        org.junit.Assert.assertNotNull(headerArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNotNull(headerList18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(headerList20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
    }

    @Test
    public void test0372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0372");
        retrofit.converter.Converter converter2 = null;
        retrofit.RequestBuilder requestBuilder3 = new retrofit.RequestBuilder(converter2);
        java.util.List<retrofit.client.Header> headerList4 = requestBuilder3.headers;
        retrofit.client.Header[] headerArray9 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList10 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList10, headerArray9);
        retrofit.mime.TypedOutput typedOutput12 = null;
        retrofit.client.Request request13 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList10, typedOutput12);
        java.util.List<retrofit.client.Header> headerList14 = request13.headers;
        java.lang.Object[] objArray16 = new java.lang.Object[] { true, (short) 1, request13, 0 };
        requestBuilder3.args = objArray16;
        retrofit.client.Header[] headerArray20 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList21 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList21, headerArray20);
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList21, typedOutput23);
        java.util.List<retrofit.client.Header> headerList25 = request24.headers;
        requestBuilder3.setheaders(headerList25);
        retrofit.mime.TypedOutput typedOutput27 = null;
        retrofit.client.Request request28 = new retrofit.client.Request("hi!", "hi!", headerList25, typedOutput27);
        java.lang.String str29 = request28.getUrl();
        retrofit.mime.TypedOutput typedOutput30 = request28.getBody();
        java.lang.String str31 = request28.getUrl();
        org.junit.Assert.assertNull(headerList4);
        org.junit.Assert.assertNotNull(headerArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(headerList14);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertNotNull(headerArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(headerList25);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertNull(typedOutput30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
    }

    @Test
    public void test0373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0373");
        retrofit.client.Header[] headerArray6 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList7 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList7, headerArray6);
        retrofit.mime.TypedOutput typedOutput9 = null;
        retrofit.client.Request request10 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList7, typedOutput9);
        retrofit.mime.TypedOutput typedOutput11 = null;
        retrofit.client.Request request12 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList7, typedOutput11);
        retrofit.mime.TypedOutput typedOutput13 = null;
        retrofit.client.Request request14 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList7, typedOutput13);
        java.lang.String str15 = request14.method;
        java.lang.String str16 = request14.url;
        java.lang.String str17 = request14.method;
        java.util.List<retrofit.client.Header> headerList18 = request14.getHeaders();
        java.lang.String str19 = request14.getUrl();
        java.util.List<retrofit.client.Header> headerList20 = request14.headers;
        java.lang.Class<?> wildcardClass21 = headerList20.getClass();
        org.junit.Assert.assertNotNull(headerArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNotNull(headerList18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(headerList20);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0374");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        java.util.List<retrofit.client.Header> headerList12 = request11.headers;
        java.lang.Object[] objArray14 = new java.lang.Object[] { true, (short) 1, request11, 0 };
        requestBuilder1.args = objArray14;
        retrofit.converter.Converter converter16 = requestBuilder1.converter;
        java.util.List<retrofit.client.Header> headerList17 = requestBuilder1.headers;
        requestBuilder1.apiUrl = "hi!";
        java.lang.Object[] objArray20 = requestBuilder1.getargs();
        java.util.List<retrofit.client.Header> headerList21 = requestBuilder1.headers;
        java.lang.Object[] objArray22 = requestBuilder1.getargs();
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNull(headerList17);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertNull(headerList21);
        org.junit.Assert.assertNotNull(objArray22);
    }

    @Test
    public void test0375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0375");
        retrofit.client.Header[] headerArray2 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList3 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList3, headerArray2);
        retrofit.mime.TypedOutput typedOutput5 = null;
        retrofit.client.Request request6 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList3, typedOutput5);
        java.lang.String str7 = request6.url;
        retrofit.mime.TypedOutput typedOutput8 = request6.getBody();
        java.lang.String str9 = request6.getMethod();
        java.lang.String str10 = request6.method;
        java.lang.String str11 = request6.getMethod();
        java.util.List<retrofit.client.Header> headerList12 = request6.headers;
        retrofit.mime.TypedOutput typedOutput13 = request6.getBody();
        org.junit.Assert.assertNotNull(headerArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(typedOutput8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNull(typedOutput13);
    }

    @Test
    public void test0376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0376");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.lang.Object[] objArray2 = requestBuilder1.getargs();
        retrofit.converter.Converter converter3 = requestBuilder1.getconverter();
        retrofit.converter.Converter converter4 = null;
        retrofit.RequestBuilder requestBuilder5 = new retrofit.RequestBuilder(converter4);
        java.util.List<retrofit.client.Header> headerList6 = requestBuilder5.headers;
        retrofit.converter.Converter converter7 = null;
        retrofit.RequestBuilder requestBuilder8 = new retrofit.RequestBuilder(converter7);
        java.util.List<retrofit.client.Header> headerList9 = requestBuilder8.headers;
        retrofit.client.Header[] headerArray14 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList15 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList15, headerArray14);
        retrofit.mime.TypedOutput typedOutput17 = null;
        retrofit.client.Request request18 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList15, typedOutput17);
        java.util.List<retrofit.client.Header> headerList19 = request18.headers;
        java.lang.Object[] objArray21 = new java.lang.Object[] { true, (short) 1, request18, 0 };
        requestBuilder8.args = objArray21;
        requestBuilder5.setargs(objArray21);
        retrofit.RequestBuilder requestBuilder24 = requestBuilder1.args(objArray21);
        java.lang.Object[] objArray25 = requestBuilder1.args;
        java.util.List<retrofit.client.Header> headerList26 = requestBuilder1.headers;
        retrofit.client.Header[] headerArray31 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList32 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList32, headerArray31);
        retrofit.mime.TypedOutput typedOutput34 = null;
        retrofit.client.Request request35 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList32, typedOutput34);
        java.lang.String str36 = request35.url;
        java.util.List<retrofit.client.Header> headerList37 = request35.headers;
        retrofit.mime.TypedOutput typedOutput38 = request35.body;
        retrofit.mime.TypedOutput typedOutput39 = request35.body;
        java.util.List<retrofit.client.Header> headerList40 = request35.headers;
        retrofit.mime.TypedOutput typedOutput41 = null;
        retrofit.client.Request request42 = new retrofit.client.Request("hi!", "hi!", headerList40, typedOutput41);
        retrofit.mime.TypedOutput typedOutput43 = request42.body;
        java.util.List<retrofit.client.Header> headerList44 = request42.getHeaders();
        retrofit.mime.TypedOutput typedOutput45 = request42.getBody();
        retrofit.mime.TypedOutput typedOutput46 = request42.body;
        java.util.List<retrofit.client.Header> headerList47 = request42.getHeaders();
        retrofit.RequestBuilder requestBuilder48 = requestBuilder1.headers(headerList47);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str49 = requestBuilder1.buildRelativeUrl();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(objArray2);
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(headerList6);
        org.junit.Assert.assertNull(headerList9);
        org.junit.Assert.assertNotNull(headerArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(headerList19);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertNotNull(requestBuilder24);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertNull(headerList26);
        org.junit.Assert.assertNotNull(headerArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(headerList37);
        org.junit.Assert.assertNull(typedOutput38);
        org.junit.Assert.assertNull(typedOutput39);
        org.junit.Assert.assertNotNull(headerList40);
        org.junit.Assert.assertNull(typedOutput43);
        org.junit.Assert.assertNotNull(headerList44);
        org.junit.Assert.assertNull(typedOutput45);
        org.junit.Assert.assertNull(typedOutput46);
        org.junit.Assert.assertNotNull(headerList47);
        org.junit.Assert.assertNotNull(requestBuilder48);
    }

    @Test
    public void test0377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0377");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        java.util.List<retrofit.client.Header> headerList12 = request11.headers;
        java.lang.Object[] objArray14 = new java.lang.Object[] { true, (short) 1, request11, 0 };
        requestBuilder1.args = objArray14;
        retrofit.converter.Converter converter16 = requestBuilder1.converter;
        java.util.List<retrofit.client.Header> headerList17 = requestBuilder1.headers;
        requestBuilder1.apiUrl = "hi!";
        java.lang.Object[] objArray20 = requestBuilder1.args;
        java.util.List<retrofit.client.Header> headerList21 = requestBuilder1.getheaders();
        java.util.List<retrofit.client.Header> headerList22 = requestBuilder1.getheaders();
        retrofit.RequestBuilder requestBuilder24 = requestBuilder1.apiUrl("");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str25 = requestBuilder24.buildRelativeUrl();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNull(headerList17);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertNull(headerList21);
        org.junit.Assert.assertNull(headerList22);
        org.junit.Assert.assertNotNull(requestBuilder24);
    }

    @Test
    public void test0378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0378");
        retrofit.client.Header[] headerArray4 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList5 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList5, headerArray4);
        retrofit.mime.TypedOutput typedOutput7 = null;
        retrofit.client.Request request8 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList5, typedOutput7);
        java.lang.String str9 = request8.url;
        java.util.List<retrofit.client.Header> headerList10 = request8.headers;
        retrofit.mime.TypedOutput typedOutput11 = request8.body;
        retrofit.mime.TypedOutput typedOutput12 = request8.body;
        java.util.List<retrofit.client.Header> headerList13 = request8.headers;
        retrofit.mime.TypedOutput typedOutput14 = null;
        retrofit.client.Request request15 = new retrofit.client.Request("", "hi!", headerList13, typedOutput14);
        java.lang.String str16 = request15.method;
        java.lang.String str17 = request15.getMethod();
        java.util.List<retrofit.client.Header> headerList18 = request15.getHeaders();
        java.util.List<retrofit.client.Header> headerList19 = request15.getHeaders();
        java.util.List<retrofit.client.Header> headerList20 = request15.headers;
        java.lang.String str21 = request15.url;
        org.junit.Assert.assertNotNull(headerArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(headerList10);
        org.junit.Assert.assertNull(typedOutput11);
        org.junit.Assert.assertNull(typedOutput12);
        org.junit.Assert.assertNotNull(headerList13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(headerList18);
        org.junit.Assert.assertNotNull(headerList19);
        org.junit.Assert.assertNotNull(headerList20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
    }

    @Test
    public void test0379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0379");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        java.util.List<retrofit.client.Header> headerList12 = request11.headers;
        java.lang.Object[] objArray14 = new java.lang.Object[] { true, (short) 1, request11, 0 };
        requestBuilder1.args = objArray14;
        retrofit.converter.Converter converter16 = requestBuilder1.converter;
        java.lang.Object[] objArray17 = requestBuilder1.args;
        retrofit.client.Header[] headerArray20 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList21 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList21, headerArray20);
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList21, typedOutput23);
        java.lang.String str25 = request24.url;
        java.util.List<retrofit.client.Header> headerList26 = request24.headers;
        retrofit.mime.TypedOutput typedOutput27 = request24.body;
        retrofit.mime.TypedOutput typedOutput28 = request24.body;
        java.util.List<retrofit.client.Header> headerList29 = request24.headers;
        requestBuilder1.setheaders(headerList29);
        requestBuilder1.setapiUrl("hi!");
        retrofit.converter.Converter converter33 = null;
        retrofit.RequestBuilder requestBuilder34 = new retrofit.RequestBuilder(converter33);
        java.lang.Object[] objArray35 = requestBuilder34.getargs();
        retrofit.converter.Converter converter36 = requestBuilder34.getconverter();
        retrofit.client.Header[] headerArray43 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList44 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList44, headerArray43);
        retrofit.mime.TypedOutput typedOutput46 = null;
        retrofit.client.Request request47 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList44, typedOutput46);
        retrofit.mime.TypedOutput typedOutput48 = null;
        retrofit.client.Request request49 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList44, typedOutput48);
        retrofit.mime.TypedOutput typedOutput50 = null;
        retrofit.client.Request request51 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList44, typedOutput50);
        java.util.List<retrofit.client.Header> headerList52 = request51.getHeaders();
        requestBuilder34.setheaders(headerList52);
        retrofit.RequestBuilder requestBuilder54 = requestBuilder1.headers(headerList52);
        retrofit.RequestBuilder requestBuilder56 = requestBuilder1.apiUrl("");
        retrofit.converter.Converter converter57 = requestBuilder1.converter;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request58 = requestBuilder1.build();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertNotNull(headerArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(headerList26);
        org.junit.Assert.assertNull(typedOutput27);
        org.junit.Assert.assertNull(typedOutput28);
        org.junit.Assert.assertNotNull(headerList29);
        org.junit.Assert.assertNull(objArray35);
        org.junit.Assert.assertNull(converter36);
        org.junit.Assert.assertNotNull(headerArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(headerList52);
        org.junit.Assert.assertNotNull(requestBuilder54);
        org.junit.Assert.assertNotNull(requestBuilder56);
        org.junit.Assert.assertNull(converter57);
    }

    @Test
    public void test0380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0380");
        retrofit.client.Header[] headerArray2 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList3 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList3, headerArray2);
        retrofit.mime.TypedOutput typedOutput5 = null;
        retrofit.client.Request request6 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList3, typedOutput5);
        java.lang.String str7 = request6.url;
        java.util.List<retrofit.client.Header> headerList8 = request6.headers;
        retrofit.mime.TypedOutput typedOutput9 = request6.body;
        retrofit.mime.TypedOutput typedOutput10 = request6.body;
        java.util.List<retrofit.client.Header> headerList11 = request6.headers;
        retrofit.mime.TypedOutput typedOutput12 = request6.getBody();
        java.util.List<retrofit.client.Header> headerList13 = request6.getHeaders();
        retrofit.mime.TypedOutput typedOutput14 = request6.getBody();
        org.junit.Assert.assertNotNull(headerArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(headerList8);
        org.junit.Assert.assertNull(typedOutput9);
        org.junit.Assert.assertNull(typedOutput10);
        org.junit.Assert.assertNotNull(headerList11);
        org.junit.Assert.assertNull(typedOutput12);
        org.junit.Assert.assertNotNull(headerList13);
        org.junit.Assert.assertNull(typedOutput14);
    }

    @Test
    public void test0381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0381");
        retrofit.client.Header[] headerArray4 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList5 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList5, headerArray4);
        retrofit.mime.TypedOutput typedOutput7 = null;
        retrofit.client.Request request8 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList5, typedOutput7);
        retrofit.mime.TypedOutput typedOutput9 = null;
        retrofit.client.Request request10 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList5, typedOutput9);
        java.lang.String str11 = request10.getUrl();
        retrofit.mime.TypedOutput typedOutput12 = request10.getBody();
        org.junit.Assert.assertNotNull(headerArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNull(typedOutput12);
    }

    @Test
    public void test0382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0382");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        java.util.List<retrofit.client.Header> headerList12 = request11.headers;
        java.lang.Object[] objArray14 = new java.lang.Object[] { true, (short) 1, request11, 0 };
        requestBuilder1.args = objArray14;
        retrofit.converter.Converter converter16 = requestBuilder1.converter;
        java.lang.Object[] objArray17 = requestBuilder1.args;
        java.lang.Object[] objArray18 = null;
        retrofit.RequestBuilder requestBuilder19 = requestBuilder1.args(objArray18);
        java.lang.Object[] objArray20 = requestBuilder1.getargs();
        java.util.List<retrofit.client.Header> headerList21 = requestBuilder1.headers;
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertNotNull(requestBuilder19);
        org.junit.Assert.assertNull(objArray20);
        org.junit.Assert.assertNull(headerList21);
    }

    @Test
    public void test0383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0383");
        retrofit.client.Header[] headerArray4 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList5 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList5, headerArray4);
        retrofit.mime.TypedOutput typedOutput7 = null;
        retrofit.client.Request request8 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList5, typedOutput7);
        java.lang.String str9 = request8.url;
        java.util.List<retrofit.client.Header> headerList10 = request8.headers;
        retrofit.mime.TypedOutput typedOutput11 = request8.body;
        retrofit.mime.TypedOutput typedOutput12 = request8.body;
        java.util.List<retrofit.client.Header> headerList13 = request8.headers;
        retrofit.mime.TypedOutput typedOutput14 = null;
        retrofit.client.Request request15 = new retrofit.client.Request("hi!", "hi!", headerList13, typedOutput14);
        java.lang.String str16 = request15.getMethod();
        java.lang.String str17 = request15.url;
        org.junit.Assert.assertNotNull(headerArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(headerList10);
        org.junit.Assert.assertNull(typedOutput11);
        org.junit.Assert.assertNull(typedOutput12);
        org.junit.Assert.assertNotNull(headerList13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
    }

    @Test
    public void test0384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0384");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        java.util.List<retrofit.client.Header> headerList12 = request11.headers;
        java.lang.Object[] objArray14 = new java.lang.Object[] { true, (short) 1, request11, 0 };
        requestBuilder1.args = objArray14;
        retrofit.converter.Converter converter16 = requestBuilder1.converter;
        java.util.List<retrofit.client.Header> headerList17 = requestBuilder1.headers;
        java.lang.String str18 = requestBuilder1.getapiUrl();
        retrofit.client.Header[] headerArray21 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList22 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList22, headerArray21);
        retrofit.mime.TypedOutput typedOutput24 = null;
        retrofit.client.Request request25 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList22, typedOutput24);
        java.util.List<retrofit.client.Header> headerList26 = request25.headers;
        requestBuilder1.setheaders(headerList26);
        retrofit.converter.Converter converter28 = requestBuilder1.converter;
        java.util.List<retrofit.client.Header> headerList29 = requestBuilder1.getheaders();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.mime.TypedOutput typedOutput30 = requestBuilder1.buildBody();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNull(headerList17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(headerArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(headerList26);
        org.junit.Assert.assertNull(converter28);
        org.junit.Assert.assertNotNull(headerList29);
    }

    @Test
    public void test0385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0385");
        retrofit.converter.Converter converter8 = null;
        retrofit.RequestBuilder requestBuilder9 = new retrofit.RequestBuilder(converter8);
        java.util.List<retrofit.client.Header> headerList10 = requestBuilder9.headers;
        retrofit.client.Header[] headerArray15 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList16 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList16, headerArray15);
        retrofit.mime.TypedOutput typedOutput18 = null;
        retrofit.client.Request request19 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList16, typedOutput18);
        java.util.List<retrofit.client.Header> headerList20 = request19.headers;
        java.lang.Object[] objArray22 = new java.lang.Object[] { true, (short) 1, request19, 0 };
        requestBuilder9.args = objArray22;
        retrofit.converter.Converter converter24 = requestBuilder9.converter;
        java.lang.Object[] objArray25 = requestBuilder9.args;
        retrofit.client.Header[] headerArray28 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList29 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList29, headerArray28);
        retrofit.mime.TypedOutput typedOutput31 = null;
        retrofit.client.Request request32 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList29, typedOutput31);
        java.lang.String str33 = request32.url;
        java.util.List<retrofit.client.Header> headerList34 = request32.headers;
        retrofit.mime.TypedOutput typedOutput35 = request32.body;
        retrofit.mime.TypedOutput typedOutput36 = request32.body;
        java.util.List<retrofit.client.Header> headerList37 = request32.headers;
        requestBuilder9.setheaders(headerList37);
        retrofit.mime.TypedOutput typedOutput39 = null;
        retrofit.client.Request request40 = new retrofit.client.Request("hi!", "hi!", headerList37, typedOutput39);
        retrofit.mime.TypedOutput typedOutput41 = null;
        retrofit.client.Request request42 = new retrofit.client.Request("", "", headerList37, typedOutput41);
        java.util.List<retrofit.client.Header> headerList43 = request42.getHeaders();
        retrofit.mime.TypedOutput typedOutput44 = null;
        retrofit.client.Request request45 = new retrofit.client.Request("", "hi!", headerList43, typedOutput44);
        retrofit.mime.TypedOutput typedOutput46 = null;
        retrofit.client.Request request47 = new retrofit.client.Request("hi!", "", headerList43, typedOutput46);
        java.lang.String str48 = request47.getUrl();
        org.junit.Assert.assertNull(headerList10);
        org.junit.Assert.assertNotNull(headerArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(headerList20);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertNull(converter24);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertNotNull(headerArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(headerList34);
        org.junit.Assert.assertNull(typedOutput35);
        org.junit.Assert.assertNull(typedOutput36);
        org.junit.Assert.assertNotNull(headerList37);
        org.junit.Assert.assertNotNull(headerList43);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
    }

    @Test
    public void test0386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0386");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        requestBuilder1.setapiUrl("");
        java.lang.String str4 = requestBuilder1.getapiUrl();
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        requestBuilder1.setheaders((java.util.List<retrofit.client.Header>) headerList8);
        java.util.List<retrofit.client.Header> headerList13 = requestBuilder1.headers;
        retrofit.converter.Converter converter14 = requestBuilder1.getconverter();
        java.util.List<retrofit.client.Header> headerList15 = requestBuilder1.getheaders();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str16 = requestBuilder1.buildRelativeUrl();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(headerList13);
        org.junit.Assert.assertNull(converter14);
        org.junit.Assert.assertNotNull(headerList15);
    }

    @Test
    public void test0387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0387");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        requestBuilder1.setapiUrl("");
        retrofit.RequestBuilder requestBuilder5 = requestBuilder1.apiUrl("");
        requestBuilder5.apiUrl = "";
        retrofit.converter.Converter converter8 = requestBuilder5.getconverter();
        java.lang.String str9 = requestBuilder5.apiUrl;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.mime.TypedOutput typedOutput10 = requestBuilder5.buildBody();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(requestBuilder5);
        org.junit.Assert.assertNull(converter8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test0388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0388");
        retrofit.converter.Converter converter2 = null;
        retrofit.RequestBuilder requestBuilder3 = new retrofit.RequestBuilder(converter2);
        java.util.List<retrofit.client.Header> headerList4 = requestBuilder3.headers;
        retrofit.client.Header[] headerArray9 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList10 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList10, headerArray9);
        retrofit.mime.TypedOutput typedOutput12 = null;
        retrofit.client.Request request13 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList10, typedOutput12);
        java.util.List<retrofit.client.Header> headerList14 = request13.headers;
        java.lang.Object[] objArray16 = new java.lang.Object[] { true, (short) 1, request13, 0 };
        requestBuilder3.args = objArray16;
        retrofit.client.Header[] headerArray20 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList21 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList21, headerArray20);
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList21, typedOutput23);
        java.util.List<retrofit.client.Header> headerList25 = request24.headers;
        requestBuilder3.setheaders(headerList25);
        retrofit.mime.TypedOutput typedOutput27 = null;
        retrofit.client.Request request28 = new retrofit.client.Request("hi!", "hi!", headerList25, typedOutput27);
        java.lang.String str29 = request28.getUrl();
        retrofit.mime.TypedOutput typedOutput30 = request28.getBody();
        java.lang.String str31 = request28.method;
        retrofit.mime.TypedOutput typedOutput32 = request28.body;
        retrofit.mime.TypedOutput typedOutput33 = request28.getBody();
        org.junit.Assert.assertNull(headerList4);
        org.junit.Assert.assertNotNull(headerArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(headerList14);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertNotNull(headerArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(headerList25);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertNull(typedOutput30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertNull(typedOutput32);
        org.junit.Assert.assertNull(typedOutput33);
    }

    @Test
    public void test0389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0389");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.converter.Converter converter3 = requestBuilder1.getconverter();
        java.lang.Object[] objArray6 = new java.lang.Object[] { 0.0f, 100.0d };
        retrofit.RequestBuilder requestBuilder7 = requestBuilder1.args(objArray6);
        requestBuilder7.setapiUrl("hi!");
        requestBuilder7.setapiUrl("hi!");
        java.lang.Object[] objArray12 = requestBuilder7.getargs();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request13 = requestBuilder7.build();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[0.0, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[0.0, 100.0]");
        org.junit.Assert.assertNotNull(requestBuilder7);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[0.0, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[0.0, 100.0]");
    }

    @Test
    public void test0390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0390");
        retrofit.client.Header[] headerArray4 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList5 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList5, headerArray4);
        retrofit.mime.TypedOutput typedOutput7 = null;
        retrofit.client.Request request8 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList5, typedOutput7);
        java.lang.String str9 = request8.url;
        java.util.List<retrofit.client.Header> headerList10 = request8.headers;
        retrofit.mime.TypedOutput typedOutput11 = request8.body;
        retrofit.mime.TypedOutput typedOutput12 = request8.body;
        java.util.List<retrofit.client.Header> headerList13 = request8.headers;
        retrofit.mime.TypedOutput typedOutput14 = null;
        retrofit.client.Request request15 = new retrofit.client.Request("", "hi!", headerList13, typedOutput14);
        java.lang.Class<?> wildcardClass16 = headerList13.getClass();
        org.junit.Assert.assertNotNull(headerArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(headerList10);
        org.junit.Assert.assertNull(typedOutput11);
        org.junit.Assert.assertNull(typedOutput12);
        org.junit.Assert.assertNotNull(headerList13);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0391");
        retrofit.client.Header[] headerArray4 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList5 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList5, headerArray4);
        retrofit.mime.TypedOutput typedOutput7 = null;
        retrofit.client.Request request8 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList5, typedOutput7);
        java.lang.String str9 = request8.url;
        java.util.List<retrofit.client.Header> headerList10 = request8.headers;
        retrofit.mime.TypedOutput typedOutput11 = request8.body;
        retrofit.mime.TypedOutput typedOutput12 = request8.body;
        java.util.List<retrofit.client.Header> headerList13 = request8.headers;
        retrofit.mime.TypedOutput typedOutput14 = null;
        retrofit.client.Request request15 = new retrofit.client.Request("", "hi!", headerList13, typedOutput14);
        retrofit.mime.TypedOutput typedOutput16 = request15.getBody();
        java.util.List<retrofit.client.Header> headerList17 = request15.headers;
        java.lang.String str18 = request15.getMethod();
        org.junit.Assert.assertNotNull(headerArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(headerList10);
        org.junit.Assert.assertNull(typedOutput11);
        org.junit.Assert.assertNull(typedOutput12);
        org.junit.Assert.assertNotNull(headerList13);
        org.junit.Assert.assertNull(typedOutput16);
        org.junit.Assert.assertNotNull(headerList17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
    }

    @Test
    public void test0392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0392");
        retrofit.client.Header[] headerArray2 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList3 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList3, headerArray2);
        retrofit.mime.TypedOutput typedOutput5 = null;
        retrofit.client.Request request6 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList3, typedOutput5);
        java.lang.String str7 = request6.url;
        java.util.List<retrofit.client.Header> headerList8 = request6.headers;
        retrofit.mime.TypedOutput typedOutput9 = request6.body;
        retrofit.mime.TypedOutput typedOutput10 = request6.body;
        retrofit.mime.TypedOutput typedOutput11 = request6.getBody();
        java.lang.String str12 = request6.url;
        java.lang.String str13 = request6.getUrl();
        java.lang.String str14 = request6.method;
        java.lang.String str15 = request6.getMethod();
        org.junit.Assert.assertNotNull(headerArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(headerList8);
        org.junit.Assert.assertNull(typedOutput9);
        org.junit.Assert.assertNull(typedOutput10);
        org.junit.Assert.assertNull(typedOutput11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test0393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0393");
        retrofit.converter.Converter converter2 = null;
        retrofit.RequestBuilder requestBuilder3 = new retrofit.RequestBuilder(converter2);
        java.util.List<retrofit.client.Header> headerList4 = requestBuilder3.headers;
        retrofit.client.Header[] headerArray9 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList10 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList10, headerArray9);
        retrofit.mime.TypedOutput typedOutput12 = null;
        retrofit.client.Request request13 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList10, typedOutput12);
        java.util.List<retrofit.client.Header> headerList14 = request13.headers;
        java.lang.Object[] objArray16 = new java.lang.Object[] { true, (short) 1, request13, 0 };
        requestBuilder3.args = objArray16;
        retrofit.client.Header[] headerArray20 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList21 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList21, headerArray20);
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList21, typedOutput23);
        java.util.List<retrofit.client.Header> headerList25 = request24.headers;
        requestBuilder3.setheaders(headerList25);
        retrofit.mime.TypedOutput typedOutput27 = null;
        retrofit.client.Request request28 = new retrofit.client.Request("hi!", "hi!", headerList25, typedOutput27);
        java.lang.String str29 = request28.getUrl();
        retrofit.mime.TypedOutput typedOutput30 = request28.getBody();
        retrofit.mime.TypedOutput typedOutput31 = request28.body;
        retrofit.mime.TypedOutput typedOutput32 = request28.body;
        retrofit.mime.TypedOutput typedOutput33 = request28.getBody();
        retrofit.mime.TypedOutput typedOutput34 = request28.getBody();
        org.junit.Assert.assertNull(headerList4);
        org.junit.Assert.assertNotNull(headerArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(headerList14);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertNotNull(headerArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(headerList25);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertNull(typedOutput30);
        org.junit.Assert.assertNull(typedOutput31);
        org.junit.Assert.assertNull(typedOutput32);
        org.junit.Assert.assertNull(typedOutput33);
        org.junit.Assert.assertNull(typedOutput34);
    }

    @Test
    public void test0394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0394");
        retrofit.client.Header[] headerArray2 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList3 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList3, headerArray2);
        retrofit.mime.TypedOutput typedOutput5 = null;
        retrofit.client.Request request6 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList3, typedOutput5);
        java.lang.String str7 = request6.getUrl();
        java.util.List<retrofit.client.Header> headerList8 = request6.getHeaders();
        java.util.List<retrofit.client.Header> headerList9 = request6.getHeaders();
        java.lang.String str10 = request6.url;
        org.junit.Assert.assertNotNull(headerArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(headerList8);
        org.junit.Assert.assertNotNull(headerList9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test0395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0395");
        retrofit.client.Header[] headerArray8 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList9 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList9, headerArray8);
        retrofit.mime.TypedOutput typedOutput11 = null;
        retrofit.client.Request request12 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList9, typedOutput11);
        java.lang.String str13 = request12.url;
        java.util.List<retrofit.client.Header> headerList14 = request12.headers;
        retrofit.mime.TypedOutput typedOutput15 = request12.body;
        retrofit.mime.TypedOutput typedOutput16 = request12.body;
        java.util.List<retrofit.client.Header> headerList17 = request12.headers;
        retrofit.mime.TypedOutput typedOutput18 = null;
        retrofit.client.Request request19 = new retrofit.client.Request("hi!", "hi!", headerList17, typedOutput18);
        retrofit.mime.TypedOutput typedOutput20 = null;
        retrofit.client.Request request21 = new retrofit.client.Request("hi!", "", headerList17, typedOutput20);
        retrofit.mime.TypedOutput typedOutput22 = request21.body;
        java.util.List<retrofit.client.Header> headerList23 = request21.getHeaders();
        retrofit.mime.TypedOutput typedOutput24 = null;
        retrofit.client.Request request25 = new retrofit.client.Request("hi!", "", headerList23, typedOutput24);
        java.lang.String str26 = request25.method;
        java.lang.String str27 = request25.method;
        org.junit.Assert.assertNotNull(headerArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(headerList14);
        org.junit.Assert.assertNull(typedOutput15);
        org.junit.Assert.assertNull(typedOutput16);
        org.junit.Assert.assertNotNull(headerList17);
        org.junit.Assert.assertNull(typedOutput22);
        org.junit.Assert.assertNotNull(headerList23);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
    }

    @Test
    public void test0396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0396");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.converter.Converter converter3 = requestBuilder1.getconverter();
        retrofit.RequestBuilder requestBuilder5 = requestBuilder1.apiUrl("hi!");
        java.lang.Object[] objArray6 = requestBuilder1.args;
        requestBuilder1.setapiUrl("hi!");
        requestBuilder1.setapiUrl("");
        retrofit.converter.Converter converter11 = requestBuilder1.converter;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str12 = requestBuilder1.buildRelativeUrl();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNotNull(requestBuilder5);
        org.junit.Assert.assertNull(objArray6);
        org.junit.Assert.assertNull(converter11);
    }

    @Test
    public void test0397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0397");
        retrofit.client.Header[] headerArray8 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList9 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList9, headerArray8);
        retrofit.mime.TypedOutput typedOutput11 = null;
        retrofit.client.Request request12 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList9, typedOutput11);
        retrofit.mime.TypedOutput typedOutput13 = null;
        retrofit.client.Request request14 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList9, typedOutput13);
        retrofit.mime.TypedOutput typedOutput15 = null;
        retrofit.client.Request request16 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList9, typedOutput15);
        java.util.List<retrofit.client.Header> headerList17 = request16.getHeaders();
        java.util.List<retrofit.client.Header> headerList18 = request16.getHeaders();
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("", "hi!", headerList18, typedOutput19);
        java.util.List<retrofit.client.Header> headerList21 = request20.headers;
        org.junit.Assert.assertNotNull(headerArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(headerList17);
        org.junit.Assert.assertNotNull(headerList18);
        org.junit.Assert.assertNotNull(headerList21);
    }

    @Test
    public void test0398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0398");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        retrofit.client.Header[] headerArray8 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList9 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList9, headerArray8);
        retrofit.mime.TypedOutput typedOutput11 = null;
        retrofit.client.Request request12 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList9, typedOutput11);
        java.lang.String str13 = request12.url;
        java.util.List<retrofit.client.Header> headerList14 = request12.headers;
        retrofit.mime.TypedOutput typedOutput15 = null;
        retrofit.client.Request request16 = new retrofit.client.Request("", "", headerList14, typedOutput15);
        retrofit.mime.TypedOutput typedOutput17 = request16.body;
        java.util.List<retrofit.client.Header> headerList18 = request16.headers;
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("hi!", "", headerList18, typedOutput19);
        requestBuilder1.headers = headerList18;
        retrofit.client.Header[] headerArray28 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList29 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList29, headerArray28);
        retrofit.mime.TypedOutput typedOutput31 = null;
        retrofit.client.Request request32 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList29, typedOutput31);
        java.lang.String str33 = request32.url;
        java.util.List<retrofit.client.Header> headerList34 = request32.headers;
        retrofit.mime.TypedOutput typedOutput35 = null;
        retrofit.client.Request request36 = new retrofit.client.Request("", "", headerList34, typedOutput35);
        retrofit.mime.TypedOutput typedOutput37 = request36.body;
        retrofit.mime.TypedOutput typedOutput38 = request36.getBody();
        java.util.List<retrofit.client.Header> headerList39 = request36.getHeaders();
        retrofit.mime.TypedOutput typedOutput40 = null;
        retrofit.client.Request request41 = new retrofit.client.Request("", "", headerList39, typedOutput40);
        requestBuilder1.headers = headerList39;
        java.lang.Object[] objArray43 = requestBuilder1.args;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request44 = requestBuilder1.build();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(headerArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(headerList14);
        org.junit.Assert.assertNull(typedOutput17);
        org.junit.Assert.assertNotNull(headerList18);
        org.junit.Assert.assertNotNull(headerArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(headerList34);
        org.junit.Assert.assertNull(typedOutput37);
        org.junit.Assert.assertNull(typedOutput38);
        org.junit.Assert.assertNotNull(headerList39);
        org.junit.Assert.assertNull(objArray43);
    }

    @Test
    public void test0399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0399");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        java.util.List<retrofit.client.Header> headerList12 = request11.headers;
        java.lang.Object[] objArray14 = new java.lang.Object[] { true, (short) 1, request11, 0 };
        requestBuilder1.args = objArray14;
        retrofit.converter.Converter converter16 = requestBuilder1.converter;
        java.util.List<retrofit.client.Header> headerList17 = requestBuilder1.headers;
        java.util.List<retrofit.client.Header> headerList18 = requestBuilder1.headers;
        retrofit.RequestBuilder requestBuilder20 = requestBuilder1.apiUrl("");
        retrofit.converter.Converter converter21 = requestBuilder1.getconverter();
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNull(headerList17);
        org.junit.Assert.assertNull(headerList18);
        org.junit.Assert.assertNotNull(requestBuilder20);
        org.junit.Assert.assertNull(converter21);
    }

    @Test
    public void test0400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0400");
        retrofit.client.Header[] headerArray2 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList3 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList3, headerArray2);
        retrofit.mime.TypedOutput typedOutput5 = null;
        retrofit.client.Request request6 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList3, typedOutput5);
        java.lang.String str7 = request6.url;
        java.lang.String str8 = request6.method;
        java.lang.String str9 = request6.url;
        org.junit.Assert.assertNotNull(headerArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test0401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0401");
        retrofit.converter.Converter converter2 = null;
        retrofit.RequestBuilder requestBuilder3 = new retrofit.RequestBuilder(converter2);
        java.util.List<retrofit.client.Header> headerList4 = requestBuilder3.headers;
        retrofit.client.Header[] headerArray9 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList10 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList10, headerArray9);
        retrofit.mime.TypedOutput typedOutput12 = null;
        retrofit.client.Request request13 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList10, typedOutput12);
        java.util.List<retrofit.client.Header> headerList14 = request13.headers;
        java.lang.Object[] objArray16 = new java.lang.Object[] { true, (short) 1, request13, 0 };
        requestBuilder3.args = objArray16;
        retrofit.client.Header[] headerArray20 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList21 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList21, headerArray20);
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList21, typedOutput23);
        java.util.List<retrofit.client.Header> headerList25 = request24.headers;
        requestBuilder3.setheaders(headerList25);
        retrofit.mime.TypedOutput typedOutput27 = null;
        retrofit.client.Request request28 = new retrofit.client.Request("hi!", "hi!", headerList25, typedOutput27);
        java.util.List<retrofit.client.Header> headerList29 = request28.headers;
        java.util.List<retrofit.client.Header> headerList30 = request28.headers;
        retrofit.mime.TypedOutput typedOutput31 = request28.getBody();
        java.lang.String str32 = request28.url;
        org.junit.Assert.assertNull(headerList4);
        org.junit.Assert.assertNotNull(headerArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(headerList14);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertNotNull(headerArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(headerList25);
        org.junit.Assert.assertNotNull(headerList29);
        org.junit.Assert.assertNotNull(headerList30);
        org.junit.Assert.assertNull(typedOutput31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
    }

    @Test
    public void test0402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0402");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        java.util.List<retrofit.client.Header> headerList12 = request11.headers;
        java.lang.Object[] objArray14 = new java.lang.Object[] { true, (short) 1, request11, 0 };
        requestBuilder1.args = objArray14;
        retrofit.converter.Converter converter16 = requestBuilder1.converter;
        java.lang.Object[] objArray17 = requestBuilder1.args;
        java.lang.Object[] objArray18 = null;
        retrofit.RequestBuilder requestBuilder19 = requestBuilder1.args(objArray18);
        java.lang.Object[] objArray20 = requestBuilder1.getargs();
        java.lang.String str21 = requestBuilder1.getapiUrl();
        retrofit.client.Header[] headerArray26 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList27 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList27, headerArray26);
        retrofit.mime.TypedOutput typedOutput29 = null;
        retrofit.client.Request request30 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList27, typedOutput29);
        java.util.List<retrofit.client.Header> headerList31 = request30.headers;
        retrofit.mime.TypedOutput typedOutput32 = request30.body;
        java.util.List<retrofit.client.Header> headerList33 = request30.headers;
        retrofit.mime.TypedOutput typedOutput34 = null;
        retrofit.client.Request request35 = new retrofit.client.Request("", "hi!", headerList33, typedOutput34);
        requestBuilder1.setheaders(headerList33);
        // The following exception was thrown during execution in test generation
        try {
            retrofit.mime.TypedOutput typedOutput37 = requestBuilder1.buildBody();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertNotNull(requestBuilder19);
        org.junit.Assert.assertNull(objArray20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(headerArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(headerList31);
        org.junit.Assert.assertNull(typedOutput32);
        org.junit.Assert.assertNotNull(headerList33);
    }

    @Test
    public void test0403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0403");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        retrofit.client.Header[] headerArray8 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList9 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList9, headerArray8);
        retrofit.mime.TypedOutput typedOutput11 = null;
        retrofit.client.Request request12 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList9, typedOutput11);
        java.lang.String str13 = request12.url;
        java.util.List<retrofit.client.Header> headerList14 = request12.headers;
        retrofit.mime.TypedOutput typedOutput15 = null;
        retrofit.client.Request request16 = new retrofit.client.Request("", "", headerList14, typedOutput15);
        retrofit.mime.TypedOutput typedOutput17 = request16.body;
        java.util.List<retrofit.client.Header> headerList18 = request16.headers;
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("hi!", "", headerList18, typedOutput19);
        requestBuilder1.headers = headerList18;
        retrofit.client.Header[] headerArray28 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList29 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList29, headerArray28);
        retrofit.mime.TypedOutput typedOutput31 = null;
        retrofit.client.Request request32 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList29, typedOutput31);
        java.lang.String str33 = request32.url;
        java.util.List<retrofit.client.Header> headerList34 = request32.headers;
        retrofit.mime.TypedOutput typedOutput35 = null;
        retrofit.client.Request request36 = new retrofit.client.Request("", "", headerList34, typedOutput35);
        retrofit.mime.TypedOutput typedOutput37 = request36.body;
        retrofit.mime.TypedOutput typedOutput38 = request36.getBody();
        java.util.List<retrofit.client.Header> headerList39 = request36.getHeaders();
        retrofit.mime.TypedOutput typedOutput40 = null;
        retrofit.client.Request request41 = new retrofit.client.Request("", "", headerList39, typedOutput40);
        requestBuilder1.headers = headerList39;
        retrofit.converter.Converter converter43 = requestBuilder1.getconverter();
        java.lang.String str44 = requestBuilder1.apiUrl;
        requestBuilder1.setapiUrl("hi!");
        org.junit.Assert.assertNotNull(headerArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(headerList14);
        org.junit.Assert.assertNull(typedOutput17);
        org.junit.Assert.assertNotNull(headerList18);
        org.junit.Assert.assertNotNull(headerArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(headerList34);
        org.junit.Assert.assertNull(typedOutput37);
        org.junit.Assert.assertNull(typedOutput38);
        org.junit.Assert.assertNotNull(headerList39);
        org.junit.Assert.assertNull(converter43);
        org.junit.Assert.assertNull(str44);
    }

    @Test
    public void test0404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0404");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        java.util.List<retrofit.client.Header> headerList12 = request11.headers;
        java.lang.Object[] objArray14 = new java.lang.Object[] { true, (short) 1, request11, 0 };
        requestBuilder1.args = objArray14;
        retrofit.client.Header[] headerArray18 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList19 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList19, headerArray18);
        retrofit.mime.TypedOutput typedOutput21 = null;
        retrofit.client.Request request22 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList19, typedOutput21);
        java.util.List<retrofit.client.Header> headerList23 = request22.headers;
        requestBuilder1.setheaders(headerList23);
        java.lang.Object[] objArray25 = requestBuilder1.getargs();
        java.lang.String str26 = requestBuilder1.apiUrl;
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNotNull(headerArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(headerList23);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertNull(str26);
    }

    @Test
    public void test0405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0405");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.converter.Converter converter3 = requestBuilder1.getconverter();
        java.lang.Object[] objArray6 = new java.lang.Object[] { 0.0f, 100.0d };
        retrofit.RequestBuilder requestBuilder7 = requestBuilder1.args(objArray6);
        requestBuilder7.setapiUrl("hi!");
        requestBuilder7.setapiUrl("hi!");
        java.util.List<retrofit.client.Header> headerList12 = requestBuilder7.headers;
        java.util.List<retrofit.client.Header> headerList13 = requestBuilder7.headers;
        retrofit.converter.Converter converter14 = null;
        retrofit.RequestBuilder requestBuilder15 = new retrofit.RequestBuilder(converter14);
        java.util.List<retrofit.client.Header> headerList16 = requestBuilder15.headers;
        retrofit.client.Header[] headerArray21 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList22 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList22, headerArray21);
        retrofit.mime.TypedOutput typedOutput24 = null;
        retrofit.client.Request request25 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList22, typedOutput24);
        java.util.List<retrofit.client.Header> headerList26 = request25.headers;
        java.lang.Object[] objArray28 = new java.lang.Object[] { true, (short) 1, request25, 0 };
        requestBuilder15.args = objArray28;
        retrofit.converter.Converter converter30 = requestBuilder15.converter;
        java.lang.Object[] objArray31 = requestBuilder15.args;
        retrofit.converter.Converter converter32 = null;
        retrofit.RequestBuilder requestBuilder33 = new retrofit.RequestBuilder(converter32);
        java.util.List<retrofit.client.Header> headerList34 = requestBuilder33.headers;
        retrofit.client.Header[] headerArray39 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList40 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList40, headerArray39);
        retrofit.mime.TypedOutput typedOutput42 = null;
        retrofit.client.Request request43 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList40, typedOutput42);
        java.util.List<retrofit.client.Header> headerList44 = request43.headers;
        java.lang.Object[] objArray46 = new java.lang.Object[] { true, (short) 1, request43, 0 };
        requestBuilder33.args = objArray46;
        retrofit.converter.Converter converter48 = requestBuilder33.converter;
        java.lang.Object[] objArray49 = requestBuilder33.args;
        requestBuilder15.setargs(objArray49);
        requestBuilder7.setargs(objArray49);
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request52 = requestBuilder7.build();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[0.0, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[0.0, 100.0]");
        org.junit.Assert.assertNotNull(requestBuilder7);
        org.junit.Assert.assertNull(headerList12);
        org.junit.Assert.assertNull(headerList13);
        org.junit.Assert.assertNull(headerList16);
        org.junit.Assert.assertNotNull(headerArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(headerList26);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertNull(converter30);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertNull(headerList34);
        org.junit.Assert.assertNotNull(headerArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(headerList44);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertNull(converter48);
        org.junit.Assert.assertNotNull(objArray49);
    }

    @Test
    public void test0406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0406");
        retrofit.client.Header[] headerArray6 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList7 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList7, headerArray6);
        retrofit.mime.TypedOutput typedOutput9 = null;
        retrofit.client.Request request10 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList7, typedOutput9);
        java.lang.String str11 = request10.url;
        java.util.List<retrofit.client.Header> headerList12 = request10.headers;
        retrofit.mime.TypedOutput typedOutput13 = request10.body;
        retrofit.mime.TypedOutput typedOutput14 = request10.body;
        java.util.List<retrofit.client.Header> headerList15 = request10.headers;
        retrofit.mime.TypedOutput typedOutput16 = null;
        retrofit.client.Request request17 = new retrofit.client.Request("hi!", "hi!", headerList15, typedOutput16);
        retrofit.mime.TypedOutput typedOutput18 = null;
        retrofit.client.Request request19 = new retrofit.client.Request("hi!", "hi!", headerList15, typedOutput18);
        retrofit.mime.TypedOutput typedOutput20 = request19.body;
        java.lang.String str21 = request19.getUrl();
        java.lang.Class<?> wildcardClass22 = request19.getClass();
        org.junit.Assert.assertNotNull(headerArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNull(typedOutput13);
        org.junit.Assert.assertNull(typedOutput14);
        org.junit.Assert.assertNotNull(headerList15);
        org.junit.Assert.assertNull(typedOutput20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test0407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0407");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        requestBuilder1.setapiUrl("");
        java.lang.String str4 = requestBuilder1.getapiUrl();
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        requestBuilder1.setheaders((java.util.List<retrofit.client.Header>) headerList8);
        retrofit.converter.Converter converter13 = null;
        retrofit.RequestBuilder requestBuilder14 = new retrofit.RequestBuilder(converter13);
        java.lang.Object[] objArray15 = requestBuilder14.getargs();
        retrofit.converter.Converter converter16 = requestBuilder14.getconverter();
        retrofit.client.Header[] headerArray23 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList24 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList24, headerArray23);
        retrofit.mime.TypedOutput typedOutput26 = null;
        retrofit.client.Request request27 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList24, typedOutput26);
        retrofit.mime.TypedOutput typedOutput28 = null;
        retrofit.client.Request request29 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList24, typedOutput28);
        retrofit.mime.TypedOutput typedOutput30 = null;
        retrofit.client.Request request31 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList24, typedOutput30);
        java.util.List<retrofit.client.Header> headerList32 = request31.getHeaders();
        requestBuilder14.setheaders(headerList32);
        requestBuilder1.headers = headerList32;
        requestBuilder1.setapiUrl("");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(objArray15);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNotNull(headerArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(headerList32);
    }

    @Test
    public void test0408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0408");
        retrofit.converter.Converter converter4 = null;
        retrofit.RequestBuilder requestBuilder5 = new retrofit.RequestBuilder(converter4);
        java.util.List<retrofit.client.Header> headerList6 = requestBuilder5.headers;
        retrofit.client.Header[] headerArray11 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList12 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList12, headerArray11);
        retrofit.mime.TypedOutput typedOutput14 = null;
        retrofit.client.Request request15 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList12, typedOutput14);
        java.util.List<retrofit.client.Header> headerList16 = request15.headers;
        java.lang.Object[] objArray18 = new java.lang.Object[] { true, (short) 1, request15, 0 };
        requestBuilder5.args = objArray18;
        retrofit.client.Header[] headerArray22 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList23 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList23, headerArray22);
        retrofit.mime.TypedOutput typedOutput25 = null;
        retrofit.client.Request request26 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList23, typedOutput25);
        java.util.List<retrofit.client.Header> headerList27 = request26.headers;
        requestBuilder5.setheaders(headerList27);
        retrofit.mime.TypedOutput typedOutput29 = null;
        retrofit.client.Request request30 = new retrofit.client.Request("hi!", "hi!", headerList27, typedOutput29);
        java.util.List<retrofit.client.Header> headerList31 = request30.headers;
        retrofit.mime.TypedOutput typedOutput32 = null;
        retrofit.client.Request request33 = new retrofit.client.Request("", "hi!", headerList31, typedOutput32);
        java.lang.String str34 = request33.url;
        retrofit.mime.TypedOutput typedOutput35 = request33.body;
        org.junit.Assert.assertNull(headerList6);
        org.junit.Assert.assertNotNull(headerArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(headerList16);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertNotNull(headerArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(headerList27);
        org.junit.Assert.assertNotNull(headerList31);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertNull(typedOutput35);
    }

    @Test
    public void test0409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0409");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.lang.Object[] objArray2 = requestBuilder1.getargs();
        retrofit.converter.Converter converter3 = requestBuilder1.getconverter();
        retrofit.converter.Converter converter4 = null;
        retrofit.RequestBuilder requestBuilder5 = new retrofit.RequestBuilder(converter4);
        java.util.List<retrofit.client.Header> headerList6 = requestBuilder5.headers;
        retrofit.converter.Converter converter7 = null;
        retrofit.RequestBuilder requestBuilder8 = new retrofit.RequestBuilder(converter7);
        java.util.List<retrofit.client.Header> headerList9 = requestBuilder8.headers;
        retrofit.client.Header[] headerArray14 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList15 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList15, headerArray14);
        retrofit.mime.TypedOutput typedOutput17 = null;
        retrofit.client.Request request18 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList15, typedOutput17);
        java.util.List<retrofit.client.Header> headerList19 = request18.headers;
        java.lang.Object[] objArray21 = new java.lang.Object[] { true, (short) 1, request18, 0 };
        requestBuilder8.args = objArray21;
        requestBuilder5.setargs(objArray21);
        retrofit.RequestBuilder requestBuilder24 = requestBuilder1.args(objArray21);
        java.lang.Object[] objArray25 = requestBuilder1.args;
        java.util.List<retrofit.client.Header> headerList26 = null;
        requestBuilder1.setheaders(headerList26);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str28 = requestBuilder1.buildRelativeUrl();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(objArray2);
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(headerList6);
        org.junit.Assert.assertNull(headerList9);
        org.junit.Assert.assertNotNull(headerArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(headerList19);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertNotNull(requestBuilder24);
        org.junit.Assert.assertNotNull(objArray25);
    }

    @Test
    public void test0410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0410");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        java.util.List<retrofit.client.Header> headerList12 = request11.headers;
        java.lang.Object[] objArray14 = new java.lang.Object[] { true, (short) 1, request11, 0 };
        requestBuilder1.args = objArray14;
        retrofit.converter.Converter converter16 = requestBuilder1.converter;
        java.lang.Object[] objArray17 = requestBuilder1.args;
        retrofit.client.Header[] headerArray20 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList21 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList21, headerArray20);
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList21, typedOutput23);
        java.lang.String str25 = request24.url;
        java.util.List<retrofit.client.Header> headerList26 = request24.headers;
        retrofit.mime.TypedOutput typedOutput27 = request24.body;
        retrofit.mime.TypedOutput typedOutput28 = request24.body;
        java.util.List<retrofit.client.Header> headerList29 = request24.headers;
        requestBuilder1.setheaders(headerList29);
        requestBuilder1.setapiUrl("hi!");
        retrofit.RequestBuilder requestBuilder34 = requestBuilder1.apiUrl("hi!");
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request35 = requestBuilder1.build();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertNotNull(headerArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(headerList26);
        org.junit.Assert.assertNull(typedOutput27);
        org.junit.Assert.assertNull(typedOutput28);
        org.junit.Assert.assertNotNull(headerList29);
        org.junit.Assert.assertNotNull(requestBuilder34);
    }

    @Test
    public void test0411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0411");
        retrofit.client.Header[] headerArray4 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList5 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList5, headerArray4);
        retrofit.mime.TypedOutput typedOutput7 = null;
        retrofit.client.Request request8 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList5, typedOutput7);
        java.lang.String str9 = request8.url;
        java.util.List<retrofit.client.Header> headerList10 = request8.headers;
        retrofit.mime.TypedOutput typedOutput11 = request8.body;
        retrofit.mime.TypedOutput typedOutput12 = request8.body;
        java.util.List<retrofit.client.Header> headerList13 = request8.headers;
        java.lang.String str14 = request8.url;
        java.util.List<retrofit.client.Header> headerList15 = request8.getHeaders();
        retrofit.mime.TypedOutput typedOutput16 = null;
        retrofit.client.Request request17 = new retrofit.client.Request("hi!", "", headerList15, typedOutput16);
        org.junit.Assert.assertNotNull(headerArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(headerList10);
        org.junit.Assert.assertNull(typedOutput11);
        org.junit.Assert.assertNull(typedOutput12);
        org.junit.Assert.assertNotNull(headerList13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(headerList15);
    }

    @Test
    public void test0412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0412");
        retrofit.converter.Converter converter2 = null;
        retrofit.RequestBuilder requestBuilder3 = new retrofit.RequestBuilder(converter2);
        java.util.List<retrofit.client.Header> headerList4 = requestBuilder3.headers;
        retrofit.client.Header[] headerArray9 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList10 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList10, headerArray9);
        retrofit.mime.TypedOutput typedOutput12 = null;
        retrofit.client.Request request13 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList10, typedOutput12);
        java.util.List<retrofit.client.Header> headerList14 = request13.headers;
        java.lang.Object[] objArray16 = new java.lang.Object[] { true, (short) 1, request13, 0 };
        requestBuilder3.args = objArray16;
        retrofit.converter.Converter converter18 = requestBuilder3.converter;
        java.util.List<retrofit.client.Header> headerList19 = requestBuilder3.headers;
        requestBuilder3.apiUrl = "hi!";
        retrofit.client.Header[] headerArray26 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList27 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList27, headerArray26);
        retrofit.mime.TypedOutput typedOutput29 = null;
        retrofit.client.Request request30 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList27, typedOutput29);
        java.lang.String str31 = request30.url;
        java.util.List<retrofit.client.Header> headerList32 = request30.headers;
        retrofit.mime.TypedOutput typedOutput33 = null;
        retrofit.client.Request request34 = new retrofit.client.Request("", "", headerList32, typedOutput33);
        retrofit.RequestBuilder requestBuilder35 = requestBuilder3.headers(headerList32);
        java.util.List<retrofit.client.Header> headerList36 = requestBuilder3.headers;
        java.util.List<retrofit.client.Header> headerList37 = requestBuilder3.headers;
        retrofit.mime.TypedOutput typedOutput38 = null;
        retrofit.client.Request request39 = new retrofit.client.Request("", "hi!", headerList37, typedOutput38);
        retrofit.mime.TypedOutput typedOutput40 = request39.getBody();
        java.lang.String str41 = request39.url;
        java.lang.String str42 = request39.getUrl();
        org.junit.Assert.assertNull(headerList4);
        org.junit.Assert.assertNotNull(headerArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(headerList14);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertNull(converter18);
        org.junit.Assert.assertNull(headerList19);
        org.junit.Assert.assertNotNull(headerArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(headerList32);
        org.junit.Assert.assertNotNull(requestBuilder35);
        org.junit.Assert.assertNotNull(headerList36);
        org.junit.Assert.assertNotNull(headerList37);
        org.junit.Assert.assertNull(typedOutput40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "hi!" + "'", str42, "hi!");
    }

    @Test
    public void test0413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0413");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        retrofit.client.Header[] headerArray8 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList9 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList9, headerArray8);
        retrofit.mime.TypedOutput typedOutput11 = null;
        retrofit.client.Request request12 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList9, typedOutput11);
        java.lang.String str13 = request12.url;
        java.util.List<retrofit.client.Header> headerList14 = request12.headers;
        retrofit.mime.TypedOutput typedOutput15 = null;
        retrofit.client.Request request16 = new retrofit.client.Request("", "", headerList14, typedOutput15);
        retrofit.mime.TypedOutput typedOutput17 = request16.body;
        java.util.List<retrofit.client.Header> headerList18 = request16.headers;
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("hi!", "", headerList18, typedOutput19);
        requestBuilder1.headers = headerList18;
        retrofit.client.Header[] headerArray28 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList29 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList29, headerArray28);
        retrofit.mime.TypedOutput typedOutput31 = null;
        retrofit.client.Request request32 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList29, typedOutput31);
        java.lang.String str33 = request32.url;
        java.util.List<retrofit.client.Header> headerList34 = request32.headers;
        retrofit.mime.TypedOutput typedOutput35 = null;
        retrofit.client.Request request36 = new retrofit.client.Request("", "", headerList34, typedOutput35);
        retrofit.mime.TypedOutput typedOutput37 = request36.body;
        retrofit.mime.TypedOutput typedOutput38 = request36.getBody();
        java.util.List<retrofit.client.Header> headerList39 = request36.getHeaders();
        retrofit.mime.TypedOutput typedOutput40 = null;
        retrofit.client.Request request41 = new retrofit.client.Request("", "", headerList39, typedOutput40);
        requestBuilder1.headers = headerList39;
        java.util.List<retrofit.client.Header> headerList43 = requestBuilder1.headers;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request44 = requestBuilder1.build();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(headerArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(headerList14);
        org.junit.Assert.assertNull(typedOutput17);
        org.junit.Assert.assertNotNull(headerList18);
        org.junit.Assert.assertNotNull(headerArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(headerList34);
        org.junit.Assert.assertNull(typedOutput37);
        org.junit.Assert.assertNull(typedOutput38);
        org.junit.Assert.assertNotNull(headerList39);
        org.junit.Assert.assertNotNull(headerList43);
    }

    @Test
    public void test0414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0414");
        retrofit.client.Header[] headerArray6 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList7 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList7, headerArray6);
        retrofit.mime.TypedOutput typedOutput9 = null;
        retrofit.client.Request request10 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList7, typedOutput9);
        java.lang.String str11 = request10.url;
        java.util.List<retrofit.client.Header> headerList12 = request10.headers;
        retrofit.mime.TypedOutput typedOutput13 = request10.body;
        retrofit.mime.TypedOutput typedOutput14 = request10.body;
        java.util.List<retrofit.client.Header> headerList15 = request10.headers;
        java.util.List<retrofit.client.Header> headerList16 = request10.headers;
        retrofit.mime.TypedOutput typedOutput17 = null;
        retrofit.client.Request request18 = new retrofit.client.Request("hi!", "", headerList16, typedOutput17);
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("", "", headerList16, typedOutput19);
        retrofit.mime.TypedOutput typedOutput21 = request20.body;
        retrofit.mime.TypedOutput typedOutput22 = request20.getBody();
        org.junit.Assert.assertNotNull(headerArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNull(typedOutput13);
        org.junit.Assert.assertNull(typedOutput14);
        org.junit.Assert.assertNotNull(headerList15);
        org.junit.Assert.assertNotNull(headerList16);
        org.junit.Assert.assertNull(typedOutput21);
        org.junit.Assert.assertNull(typedOutput22);
    }

    @Test
    public void test0415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0415");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        requestBuilder1.setapiUrl("");
        java.lang.String str4 = requestBuilder1.apiUrl;
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    }

    @Test
    public void test0416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0416");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.converter.Converter converter3 = requestBuilder1.getconverter();
        java.lang.Object[] objArray6 = new java.lang.Object[] { 0.0f, 100.0d };
        retrofit.RequestBuilder requestBuilder7 = requestBuilder1.args(objArray6);
        requestBuilder7.setapiUrl("hi!");
        requestBuilder7.setapiUrl("hi!");
        requestBuilder7.setapiUrl("hi!");
        retrofit.client.Header[] headerArray20 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList21 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList21, headerArray20);
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList21, typedOutput23);
        java.lang.String str25 = request24.url;
        java.util.List<retrofit.client.Header> headerList26 = request24.headers;
        retrofit.mime.TypedOutput typedOutput27 = request24.body;
        retrofit.mime.TypedOutput typedOutput28 = request24.body;
        java.util.List<retrofit.client.Header> headerList29 = request24.headers;
        retrofit.mime.TypedOutput typedOutput30 = null;
        retrofit.client.Request request31 = new retrofit.client.Request("hi!", "hi!", headerList29, typedOutput30);
        retrofit.mime.TypedOutput typedOutput32 = request31.body;
        java.util.List<retrofit.client.Header> headerList33 = request31.getHeaders();
        retrofit.mime.TypedOutput typedOutput34 = null;
        retrofit.client.Request request35 = new retrofit.client.Request("", "hi!", headerList33, typedOutput34);
        requestBuilder7.setheaders(headerList33);
        java.util.List<retrofit.client.Header> headerList37 = requestBuilder7.headers;
        java.lang.Class<?> wildcardClass38 = headerList37.getClass();
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[0.0, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[0.0, 100.0]");
        org.junit.Assert.assertNotNull(requestBuilder7);
        org.junit.Assert.assertNotNull(headerArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(headerList26);
        org.junit.Assert.assertNull(typedOutput27);
        org.junit.Assert.assertNull(typedOutput28);
        org.junit.Assert.assertNotNull(headerList29);
        org.junit.Assert.assertNull(typedOutput32);
        org.junit.Assert.assertNotNull(headerList33);
        org.junit.Assert.assertNotNull(headerList37);
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test0417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0417");
        retrofit.client.Header[] headerArray2 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList3 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList3, headerArray2);
        retrofit.mime.TypedOutput typedOutput5 = null;
        retrofit.client.Request request6 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList3, typedOutput5);
        java.lang.String str7 = request6.url;
        java.lang.String str8 = request6.getUrl();
        java.util.List<retrofit.client.Header> headerList9 = request6.headers;
        java.lang.String str10 = request6.method;
        java.lang.String str11 = request6.method;
        java.lang.Class<?> wildcardClass12 = request6.getClass();
        org.junit.Assert.assertNotNull(headerArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(headerList9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0418");
        retrofit.client.Header[] headerArray4 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList5 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList5, headerArray4);
        retrofit.mime.TypedOutput typedOutput7 = null;
        retrofit.client.Request request8 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList5, typedOutput7);
        java.lang.String str9 = request8.url;
        java.util.List<retrofit.client.Header> headerList10 = request8.headers;
        retrofit.mime.TypedOutput typedOutput11 = null;
        retrofit.client.Request request12 = new retrofit.client.Request("", "", headerList10, typedOutput11);
        retrofit.mime.TypedOutput typedOutput13 = request12.body;
        java.util.List<retrofit.client.Header> headerList14 = request12.headers;
        java.lang.String str15 = request12.getMethod();
        java.lang.Class<?> wildcardClass16 = request12.getClass();
        org.junit.Assert.assertNotNull(headerArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(headerList10);
        org.junit.Assert.assertNull(typedOutput13);
        org.junit.Assert.assertNotNull(headerList14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0419");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        java.util.List<retrofit.client.Header> headerList12 = request11.headers;
        java.lang.Object[] objArray14 = new java.lang.Object[] { true, (short) 1, request11, 0 };
        requestBuilder1.args = objArray14;
        retrofit.converter.Converter converter16 = requestBuilder1.converter;
        java.util.List<retrofit.client.Header> headerList17 = requestBuilder1.headers;
        java.lang.String str18 = requestBuilder1.getapiUrl();
        retrofit.client.Header[] headerArray21 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList22 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList22, headerArray21);
        retrofit.mime.TypedOutput typedOutput24 = null;
        retrofit.client.Request request25 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList22, typedOutput24);
        java.util.List<retrofit.client.Header> headerList26 = request25.headers;
        requestBuilder1.setheaders(headerList26);
        requestBuilder1.apiUrl = "";
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNull(headerList17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(headerArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(headerList26);
    }

    @Test
    public void test0420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0420");
        retrofit.client.Header[] headerArray4 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList5 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList5, headerArray4);
        retrofit.mime.TypedOutput typedOutput7 = null;
        retrofit.client.Request request8 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList5, typedOutput7);
        java.lang.String str9 = request8.url;
        java.util.List<retrofit.client.Header> headerList10 = request8.headers;
        retrofit.mime.TypedOutput typedOutput11 = request8.body;
        retrofit.mime.TypedOutput typedOutput12 = request8.body;
        retrofit.mime.TypedOutput typedOutput13 = request8.getBody();
        retrofit.mime.TypedOutput typedOutput14 = request8.body;
        java.util.List<retrofit.client.Header> headerList15 = request8.getHeaders();
        java.util.List<retrofit.client.Header> headerList16 = request8.getHeaders();
        java.util.List<retrofit.client.Header> headerList17 = request8.headers;
        retrofit.mime.TypedOutput typedOutput18 = null;
        retrofit.client.Request request19 = new retrofit.client.Request("hi!", "hi!", headerList17, typedOutput18);
        org.junit.Assert.assertNotNull(headerArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(headerList10);
        org.junit.Assert.assertNull(typedOutput11);
        org.junit.Assert.assertNull(typedOutput12);
        org.junit.Assert.assertNull(typedOutput13);
        org.junit.Assert.assertNull(typedOutput14);
        org.junit.Assert.assertNotNull(headerList15);
        org.junit.Assert.assertNotNull(headerList16);
        org.junit.Assert.assertNotNull(headerList17);
    }

    @Test
    public void test0421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0421");
        retrofit.client.Header[] headerArray2 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList3 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList3, headerArray2);
        retrofit.mime.TypedOutput typedOutput5 = null;
        retrofit.client.Request request6 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList3, typedOutput5);
        java.lang.String str7 = request6.url;
        java.util.List<retrofit.client.Header> headerList8 = request6.getHeaders();
        java.util.List<retrofit.client.Header> headerList9 = request6.getHeaders();
        retrofit.mime.TypedOutput typedOutput10 = request6.getBody();
        java.lang.String str11 = request6.getMethod();
        java.lang.String str12 = request6.method;
        org.junit.Assert.assertNotNull(headerArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(headerList8);
        org.junit.Assert.assertNotNull(headerList9);
        org.junit.Assert.assertNull(typedOutput10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test0422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0422");
        retrofit.client.Header[] headerArray6 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList7 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList7, headerArray6);
        retrofit.mime.TypedOutput typedOutput9 = null;
        retrofit.client.Request request10 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList7, typedOutput9);
        retrofit.mime.TypedOutput typedOutput11 = null;
        retrofit.client.Request request12 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList7, typedOutput11);
        retrofit.mime.TypedOutput typedOutput13 = null;
        retrofit.client.Request request14 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList7, typedOutput13);
        java.lang.String str15 = request14.getMethod();
        java.lang.String str16 = request14.getUrl();
        java.lang.String str17 = request14.getMethod();
        java.lang.String str18 = request14.method;
        java.lang.String str19 = request14.method;
        org.junit.Assert.assertNotNull(headerArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
    }

    @Test
    public void test0423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0423");
        retrofit.client.Header[] headerArray10 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList11 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList11, headerArray10);
        retrofit.mime.TypedOutput typedOutput13 = null;
        retrofit.client.Request request14 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList11, typedOutput13);
        java.lang.String str15 = request14.url;
        java.util.List<retrofit.client.Header> headerList16 = request14.headers;
        retrofit.mime.TypedOutput typedOutput17 = null;
        retrofit.client.Request request18 = new retrofit.client.Request("", "", headerList16, typedOutput17);
        retrofit.mime.TypedOutput typedOutput19 = request18.body;
        java.util.List<retrofit.client.Header> headerList20 = request18.headers;
        retrofit.mime.TypedOutput typedOutput21 = null;
        retrofit.client.Request request22 = new retrofit.client.Request("", "hi!", headerList20, typedOutput21);
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("", "hi!", headerList20, typedOutput23);
        retrofit.mime.TypedOutput typedOutput25 = request24.body;
        java.util.List<retrofit.client.Header> headerList26 = request24.headers;
        retrofit.mime.TypedOutput typedOutput27 = null;
        retrofit.client.Request request28 = new retrofit.client.Request("hi!", "", headerList26, typedOutput27);
        java.util.List<retrofit.client.Header> headerList29 = request28.headers;
        java.lang.Class<?> wildcardClass30 = headerList29.getClass();
        org.junit.Assert.assertNotNull(headerArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(headerList16);
        org.junit.Assert.assertNull(typedOutput19);
        org.junit.Assert.assertNotNull(headerList20);
        org.junit.Assert.assertNull(typedOutput25);
        org.junit.Assert.assertNotNull(headerList26);
        org.junit.Assert.assertNotNull(headerList29);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test0424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0424");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        java.util.List<retrofit.client.Header> headerList12 = request11.headers;
        java.lang.Object[] objArray14 = new java.lang.Object[] { true, (short) 1, request11, 0 };
        requestBuilder1.args = objArray14;
        retrofit.converter.Converter converter16 = requestBuilder1.converter;
        java.lang.Object[] objArray17 = requestBuilder1.args;
        java.lang.Object[] objArray18 = null;
        retrofit.RequestBuilder requestBuilder19 = requestBuilder1.args(objArray18);
        java.lang.Object[] objArray20 = requestBuilder1.getargs();
        java.lang.String str21 = requestBuilder1.getapiUrl();
        retrofit.client.Header[] headerArray26 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList27 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList27, headerArray26);
        retrofit.mime.TypedOutput typedOutput29 = null;
        retrofit.client.Request request30 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList27, typedOutput29);
        java.util.List<retrofit.client.Header> headerList31 = request30.headers;
        retrofit.mime.TypedOutput typedOutput32 = request30.body;
        java.util.List<retrofit.client.Header> headerList33 = request30.headers;
        retrofit.mime.TypedOutput typedOutput34 = null;
        retrofit.client.Request request35 = new retrofit.client.Request("", "hi!", headerList33, typedOutput34);
        requestBuilder1.setheaders(headerList33);
        java.lang.String str37 = requestBuilder1.getapiUrl();
        requestBuilder1.setapiUrl("hi!");
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertNotNull(requestBuilder19);
        org.junit.Assert.assertNull(objArray20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(headerArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(headerList31);
        org.junit.Assert.assertNull(typedOutput32);
        org.junit.Assert.assertNotNull(headerList33);
        org.junit.Assert.assertNull(str37);
    }

    @Test
    public void test0425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0425");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.lang.Object[] objArray2 = requestBuilder1.getargs();
        java.lang.Object[] objArray3 = requestBuilder1.getargs();
        requestBuilder1.apiUrl = "";
        java.lang.Object[] objArray6 = requestBuilder1.getargs();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.mime.TypedOutput typedOutput7 = requestBuilder1.buildBody();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(objArray2);
        org.junit.Assert.assertNull(objArray3);
        org.junit.Assert.assertNull(objArray6);
    }

    @Test
    public void test0426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0426");
        retrofit.client.Header[] headerArray4 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList5 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList5, headerArray4);
        retrofit.mime.TypedOutput typedOutput7 = null;
        retrofit.client.Request request8 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList5, typedOutput7);
        java.lang.String str9 = request8.url;
        java.util.List<retrofit.client.Header> headerList10 = request8.headers;
        retrofit.mime.TypedOutput typedOutput11 = request8.body;
        retrofit.mime.TypedOutput typedOutput12 = request8.body;
        java.util.List<retrofit.client.Header> headerList13 = request8.headers;
        retrofit.mime.TypedOutput typedOutput14 = null;
        retrofit.client.Request request15 = new retrofit.client.Request("", "hi!", headerList13, typedOutput14);
        java.util.List<retrofit.client.Header> headerList16 = request15.getHeaders();
        java.util.List<retrofit.client.Header> headerList17 = request15.headers;
        java.util.List<retrofit.client.Header> headerList18 = request15.getHeaders();
        java.lang.String str19 = request15.url;
        org.junit.Assert.assertNotNull(headerArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(headerList10);
        org.junit.Assert.assertNull(typedOutput11);
        org.junit.Assert.assertNull(typedOutput12);
        org.junit.Assert.assertNotNull(headerList13);
        org.junit.Assert.assertNotNull(headerList16);
        org.junit.Assert.assertNotNull(headerList17);
        org.junit.Assert.assertNotNull(headerList18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
    }

    @Test
    public void test0427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0427");
        retrofit.client.Header[] headerArray6 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList7 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList7, headerArray6);
        retrofit.mime.TypedOutput typedOutput9 = null;
        retrofit.client.Request request10 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList7, typedOutput9);
        java.lang.String str11 = request10.url;
        java.util.List<retrofit.client.Header> headerList12 = request10.headers;
        retrofit.mime.TypedOutput typedOutput13 = null;
        retrofit.client.Request request14 = new retrofit.client.Request("", "", headerList12, typedOutput13);
        retrofit.mime.TypedOutput typedOutput15 = request14.body;
        java.util.List<retrofit.client.Header> headerList16 = request14.headers;
        java.util.List<retrofit.client.Header> headerList17 = request14.getHeaders();
        retrofit.mime.TypedOutput typedOutput18 = null;
        retrofit.client.Request request19 = new retrofit.client.Request("hi!", "hi!", headerList17, typedOutput18);
        java.lang.String str20 = request19.getMethod();
        java.util.List<retrofit.client.Header> headerList21 = request19.headers;
        retrofit.mime.TypedOutput typedOutput22 = request19.getBody();
        org.junit.Assert.assertNotNull(headerArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNull(typedOutput15);
        org.junit.Assert.assertNotNull(headerList16);
        org.junit.Assert.assertNotNull(headerList17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertNotNull(headerList21);
        org.junit.Assert.assertNull(typedOutput22);
    }

    @Test
    public void test0428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0428");
        retrofit.client.Header[] headerArray4 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList5 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList5, headerArray4);
        retrofit.mime.TypedOutput typedOutput7 = null;
        retrofit.client.Request request8 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList5, typedOutput7);
        java.lang.String str9 = request8.url;
        java.util.List<retrofit.client.Header> headerList10 = request8.headers;
        retrofit.mime.TypedOutput typedOutput11 = null;
        retrofit.client.Request request12 = new retrofit.client.Request("", "", headerList10, typedOutput11);
        retrofit.mime.TypedOutput typedOutput13 = request12.body;
        java.util.List<retrofit.client.Header> headerList14 = request12.headers;
        retrofit.mime.TypedOutput typedOutput15 = request12.getBody();
        java.lang.String str16 = request12.url;
        java.lang.String str17 = request12.url;
        java.lang.String str18 = request12.method;
        org.junit.Assert.assertNotNull(headerArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(headerList10);
        org.junit.Assert.assertNull(typedOutput13);
        org.junit.Assert.assertNotNull(headerList14);
        org.junit.Assert.assertNull(typedOutput15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
    }

    @Test
    public void test0429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0429");
        retrofit.client.Header[] headerArray4 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList5 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList5, headerArray4);
        retrofit.mime.TypedOutput typedOutput7 = null;
        retrofit.client.Request request8 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList5, typedOutput7);
        retrofit.mime.TypedOutput typedOutput9 = null;
        retrofit.client.Request request10 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList5, typedOutput9);
        java.lang.String str11 = request10.getMethod();
        java.lang.String str12 = request10.getMethod();
        java.util.List<retrofit.client.Header> headerList13 = request10.getHeaders();
        java.lang.String str14 = request10.url;
        org.junit.Assert.assertNotNull(headerArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(headerList13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
    }

    @Test
    public void test0430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0430");
        retrofit.client.Header[] headerArray2 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList3 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList3, headerArray2);
        retrofit.mime.TypedOutput typedOutput5 = null;
        retrofit.client.Request request6 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList3, typedOutput5);
        java.util.List<retrofit.client.Header> headerList7 = request6.headers;
        retrofit.mime.TypedOutput typedOutput8 = request6.body;
        java.util.List<retrofit.client.Header> headerList9 = request6.headers;
        java.util.List<retrofit.client.Header> headerList10 = request6.getHeaders();
        java.util.List<retrofit.client.Header> headerList11 = request6.headers;
        java.util.List<retrofit.client.Header> headerList12 = request6.headers;
        retrofit.mime.TypedOutput typedOutput13 = request6.body;
        java.lang.String str14 = request6.url;
        java.lang.String str15 = request6.getUrl();
        org.junit.Assert.assertNotNull(headerArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(headerList7);
        org.junit.Assert.assertNull(typedOutput8);
        org.junit.Assert.assertNotNull(headerList9);
        org.junit.Assert.assertNotNull(headerList10);
        org.junit.Assert.assertNotNull(headerList11);
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNull(typedOutput13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test0431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0431");
        retrofit.client.Header[] headerArray4 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList5 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList5, headerArray4);
        retrofit.mime.TypedOutput typedOutput7 = null;
        retrofit.client.Request request8 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList5, typedOutput7);
        java.lang.String str9 = request8.method;
        java.lang.String str10 = request8.getMethod();
        java.util.List<retrofit.client.Header> headerList11 = request8.headers;
        retrofit.mime.TypedOutput typedOutput12 = null;
        retrofit.client.Request request13 = new retrofit.client.Request("hi!", "hi!", headerList11, typedOutput12);
        java.lang.String str14 = request13.url;
        retrofit.mime.TypedOutput typedOutput15 = request13.getBody();
        org.junit.Assert.assertNotNull(headerArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(headerList11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertNull(typedOutput15);
    }

    @Test
    public void test0432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0432");
        retrofit.client.Header[] headerArray4 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList5 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList5, headerArray4);
        retrofit.mime.TypedOutput typedOutput7 = null;
        retrofit.client.Request request8 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList5, typedOutput7);
        java.lang.String str9 = request8.url;
        java.util.List<retrofit.client.Header> headerList10 = request8.headers;
        retrofit.mime.TypedOutput typedOutput11 = request8.body;
        retrofit.mime.TypedOutput typedOutput12 = request8.body;
        java.util.List<retrofit.client.Header> headerList13 = request8.headers;
        retrofit.mime.TypedOutput typedOutput14 = null;
        retrofit.client.Request request15 = new retrofit.client.Request("", "hi!", headerList13, typedOutput14);
        java.lang.String str16 = request15.method;
        java.lang.String str17 = request15.getMethod();
        java.util.List<retrofit.client.Header> headerList18 = request15.getHeaders();
        java.lang.String str19 = request15.method;
        java.lang.String str20 = request15.method;
        org.junit.Assert.assertNotNull(headerArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(headerList10);
        org.junit.Assert.assertNull(typedOutput11);
        org.junit.Assert.assertNull(typedOutput12);
        org.junit.Assert.assertNotNull(headerList13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(headerList18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
    }

    @Test
    public void test0433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0433");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        java.util.List<retrofit.client.Header> headerList3 = requestBuilder1.headers;
        requestBuilder1.setapiUrl("hi!");
        java.lang.Object[] objArray6 = requestBuilder1.getargs();
        java.lang.String str7 = requestBuilder1.getapiUrl();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request8 = requestBuilder1.build();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNull(headerList3);
        org.junit.Assert.assertNull(objArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
    }

    @Test
    public void test0434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0434");
        retrofit.client.Header[] headerArray4 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList5 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList5, headerArray4);
        retrofit.mime.TypedOutput typedOutput7 = null;
        retrofit.client.Request request8 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList5, typedOutput7);
        java.lang.String str9 = request8.url;
        java.util.List<retrofit.client.Header> headerList10 = request8.headers;
        retrofit.mime.TypedOutput typedOutput11 = request8.body;
        retrofit.mime.TypedOutput typedOutput12 = request8.body;
        retrofit.mime.TypedOutput typedOutput13 = request8.getBody();
        retrofit.mime.TypedOutput typedOutput14 = request8.body;
        java.util.List<retrofit.client.Header> headerList15 = request8.getHeaders();
        java.util.List<retrofit.client.Header> headerList16 = request8.getHeaders();
        retrofit.mime.TypedOutput typedOutput17 = null;
        retrofit.client.Request request18 = new retrofit.client.Request("hi!", "", headerList16, typedOutput17);
        java.lang.Class<?> wildcardClass19 = headerList16.getClass();
        org.junit.Assert.assertNotNull(headerArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(headerList10);
        org.junit.Assert.assertNull(typedOutput11);
        org.junit.Assert.assertNull(typedOutput12);
        org.junit.Assert.assertNull(typedOutput13);
        org.junit.Assert.assertNull(typedOutput14);
        org.junit.Assert.assertNotNull(headerList15);
        org.junit.Assert.assertNotNull(headerList16);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0435");
        java.util.List<retrofit.client.Header> headerList2 = null;
        retrofit.mime.TypedOutput typedOutput3 = null;
        retrofit.client.Request request4 = new retrofit.client.Request("hi!", "", headerList2, typedOutput3);
        retrofit.mime.TypedOutput typedOutput5 = request4.body;
        retrofit.mime.TypedOutput typedOutput6 = request4.body;
        org.junit.Assert.assertNull(typedOutput5);
        org.junit.Assert.assertNull(typedOutput6);
    }

    @Test
    public void test0436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0436");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        requestBuilder1.setapiUrl("");
        java.lang.String str4 = requestBuilder1.getapiUrl();
        requestBuilder1.setapiUrl("hi!");
        retrofit.RequestBuilder requestBuilder8 = requestBuilder1.apiUrl("");
        requestBuilder1.apiUrl = "";
        retrofit.converter.Converter converter15 = null;
        retrofit.RequestBuilder requestBuilder16 = new retrofit.RequestBuilder(converter15);
        retrofit.client.Header[] headerArray23 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList24 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList24, headerArray23);
        retrofit.mime.TypedOutput typedOutput26 = null;
        retrofit.client.Request request27 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList24, typedOutput26);
        java.lang.String str28 = request27.url;
        java.util.List<retrofit.client.Header> headerList29 = request27.headers;
        retrofit.mime.TypedOutput typedOutput30 = null;
        retrofit.client.Request request31 = new retrofit.client.Request("", "", headerList29, typedOutput30);
        retrofit.mime.TypedOutput typedOutput32 = request31.body;
        java.util.List<retrofit.client.Header> headerList33 = request31.headers;
        retrofit.mime.TypedOutput typedOutput34 = null;
        retrofit.client.Request request35 = new retrofit.client.Request("hi!", "", headerList33, typedOutput34);
        requestBuilder16.headers = headerList33;
        retrofit.mime.TypedOutput typedOutput37 = null;
        retrofit.client.Request request38 = new retrofit.client.Request("", "", headerList33, typedOutput37);
        retrofit.mime.TypedOutput typedOutput39 = null;
        retrofit.client.Request request40 = new retrofit.client.Request("", "hi!", headerList33, typedOutput39);
        retrofit.RequestBuilder requestBuilder41 = requestBuilder1.headers(headerList33);
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request42 = requestBuilder41.build();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(requestBuilder8);
        org.junit.Assert.assertNotNull(headerArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(headerList29);
        org.junit.Assert.assertNull(typedOutput32);
        org.junit.Assert.assertNotNull(headerList33);
        org.junit.Assert.assertNotNull(requestBuilder41);
    }

    @Test
    public void test0437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0437");
        retrofit.client.Header[] headerArray2 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList3 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList3, headerArray2);
        retrofit.mime.TypedOutput typedOutput5 = null;
        retrofit.client.Request request6 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList3, typedOutput5);
        java.lang.String str7 = request6.getUrl();
        java.util.List<retrofit.client.Header> headerList8 = request6.getHeaders();
        java.util.List<retrofit.client.Header> headerList9 = request6.getHeaders();
        retrofit.mime.TypedOutput typedOutput10 = request6.body;
        java.lang.String str11 = request6.getMethod();
        java.lang.String str12 = request6.method;
        java.lang.String str13 = request6.url;
        org.junit.Assert.assertNotNull(headerArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(headerList8);
        org.junit.Assert.assertNotNull(headerList9);
        org.junit.Assert.assertNull(typedOutput10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test0438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0438");
        retrofit.client.Header[] headerArray8 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList9 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList9, headerArray8);
        retrofit.mime.TypedOutput typedOutput11 = null;
        retrofit.client.Request request12 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList9, typedOutput11);
        retrofit.mime.TypedOutput typedOutput13 = null;
        retrofit.client.Request request14 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList9, typedOutput13);
        retrofit.mime.TypedOutput typedOutput15 = null;
        retrofit.client.Request request16 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList9, typedOutput15);
        retrofit.mime.TypedOutput typedOutput17 = null;
        retrofit.client.Request request18 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList9, typedOutput17);
        retrofit.mime.TypedOutput typedOutput19 = request18.getBody();
        java.lang.String str20 = request18.method;
        java.lang.String str21 = request18.url;
        org.junit.Assert.assertNotNull(headerArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(typedOutput19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
    }

    @Test
    public void test0439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0439");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        java.util.List<retrofit.client.Header> headerList12 = request11.headers;
        java.lang.Object[] objArray14 = new java.lang.Object[] { true, (short) 1, request11, 0 };
        requestBuilder1.args = objArray14;
        retrofit.converter.Converter converter16 = requestBuilder1.converter;
        java.util.List<retrofit.client.Header> headerList17 = requestBuilder1.headers;
        java.util.List<retrofit.client.Header> headerList18 = requestBuilder1.headers;
        retrofit.RequestBuilder requestBuilder20 = requestBuilder1.apiUrl("");
        retrofit.client.Header[] headerArray25 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList26 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList26, headerArray25);
        retrofit.mime.TypedOutput typedOutput28 = null;
        retrofit.client.Request request29 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList26, typedOutput28);
        java.lang.String str30 = request29.url;
        java.util.List<retrofit.client.Header> headerList31 = request29.headers;
        retrofit.mime.TypedOutput typedOutput32 = request29.body;
        retrofit.mime.TypedOutput typedOutput33 = request29.body;
        java.util.List<retrofit.client.Header> headerList34 = request29.headers;
        retrofit.mime.TypedOutput typedOutput35 = null;
        retrofit.client.Request request36 = new retrofit.client.Request("hi!", "hi!", headerList34, typedOutput35);
        java.util.List<retrofit.client.Header> headerList37 = request36.getHeaders();
        retrofit.RequestBuilder requestBuilder38 = requestBuilder1.headers(headerList37);
        retrofit.client.Header[] headerArray43 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList44 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList44, headerArray43);
        retrofit.mime.TypedOutput typedOutput46 = null;
        retrofit.client.Request request47 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList44, typedOutput46);
        java.lang.String str48 = request47.url;
        java.util.List<retrofit.client.Header> headerList49 = request47.headers;
        retrofit.mime.TypedOutput typedOutput50 = request47.body;
        retrofit.mime.TypedOutput typedOutput51 = request47.body;
        java.util.List<retrofit.client.Header> headerList52 = request47.headers;
        retrofit.mime.TypedOutput typedOutput53 = null;
        retrofit.client.Request request54 = new retrofit.client.Request("hi!", "hi!", headerList52, typedOutput53);
        requestBuilder1.setheaders(headerList52);
        retrofit.converter.Converter converter56 = requestBuilder1.getconverter();
        requestBuilder1.setapiUrl("hi!");
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNull(headerList17);
        org.junit.Assert.assertNull(headerList18);
        org.junit.Assert.assertNotNull(requestBuilder20);
        org.junit.Assert.assertNotNull(headerArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(headerList31);
        org.junit.Assert.assertNull(typedOutput32);
        org.junit.Assert.assertNull(typedOutput33);
        org.junit.Assert.assertNotNull(headerList34);
        org.junit.Assert.assertNotNull(headerList37);
        org.junit.Assert.assertNotNull(requestBuilder38);
        org.junit.Assert.assertNotNull(headerArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(headerList49);
        org.junit.Assert.assertNull(typedOutput50);
        org.junit.Assert.assertNull(typedOutput51);
        org.junit.Assert.assertNotNull(headerList52);
        org.junit.Assert.assertNull(converter56);
    }

    @Test
    public void test0440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0440");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        java.util.List<retrofit.client.Header> headerList12 = request11.headers;
        java.lang.Object[] objArray14 = new java.lang.Object[] { true, (short) 1, request11, 0 };
        requestBuilder1.args = objArray14;
        retrofit.converter.Converter converter16 = requestBuilder1.converter;
        java.lang.Object[] objArray17 = requestBuilder1.args;
        retrofit.client.Header[] headerArray20 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList21 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList21, headerArray20);
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList21, typedOutput23);
        java.lang.String str25 = request24.url;
        java.util.List<retrofit.client.Header> headerList26 = request24.headers;
        retrofit.mime.TypedOutput typedOutput27 = request24.body;
        retrofit.mime.TypedOutput typedOutput28 = request24.body;
        java.util.List<retrofit.client.Header> headerList29 = request24.headers;
        requestBuilder1.setheaders(headerList29);
        requestBuilder1.setapiUrl("hi!");
        retrofit.converter.Converter converter33 = null;
        retrofit.RequestBuilder requestBuilder34 = new retrofit.RequestBuilder(converter33);
        java.lang.Object[] objArray35 = requestBuilder34.getargs();
        retrofit.converter.Converter converter36 = requestBuilder34.getconverter();
        retrofit.client.Header[] headerArray43 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList44 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList44, headerArray43);
        retrofit.mime.TypedOutput typedOutput46 = null;
        retrofit.client.Request request47 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList44, typedOutput46);
        retrofit.mime.TypedOutput typedOutput48 = null;
        retrofit.client.Request request49 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList44, typedOutput48);
        retrofit.mime.TypedOutput typedOutput50 = null;
        retrofit.client.Request request51 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList44, typedOutput50);
        java.util.List<retrofit.client.Header> headerList52 = request51.getHeaders();
        requestBuilder34.setheaders(headerList52);
        retrofit.RequestBuilder requestBuilder54 = requestBuilder1.headers(headerList52);
        retrofit.RequestBuilder requestBuilder56 = requestBuilder1.apiUrl("");
        retrofit.client.Header[] headerArray63 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList64 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList64, headerArray63);
        retrofit.mime.TypedOutput typedOutput66 = null;
        retrofit.client.Request request67 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList64, typedOutput66);
        retrofit.mime.TypedOutput typedOutput68 = null;
        retrofit.client.Request request69 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList64, typedOutput68);
        retrofit.mime.TypedOutput typedOutput70 = null;
        retrofit.client.Request request71 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList64, typedOutput70);
        requestBuilder1.setheaders((java.util.List<retrofit.client.Header>) headerList64);
        retrofit.client.Header[] headerArray75 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList76 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList76, headerArray75);
        retrofit.mime.TypedOutput typedOutput78 = null;
        retrofit.client.Request request79 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList76, typedOutput78);
        java.lang.String str80 = request79.getUrl();
        java.util.List<retrofit.client.Header> headerList81 = request79.getHeaders();
        requestBuilder1.setheaders(headerList81);
        java.util.List<retrofit.client.Header> headerList83 = requestBuilder1.getheaders();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.mime.TypedOutput typedOutput84 = requestBuilder1.buildBody();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertNotNull(headerArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(headerList26);
        org.junit.Assert.assertNull(typedOutput27);
        org.junit.Assert.assertNull(typedOutput28);
        org.junit.Assert.assertNotNull(headerList29);
        org.junit.Assert.assertNull(objArray35);
        org.junit.Assert.assertNull(converter36);
        org.junit.Assert.assertNotNull(headerArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(headerList52);
        org.junit.Assert.assertNotNull(requestBuilder54);
        org.junit.Assert.assertNotNull(requestBuilder56);
        org.junit.Assert.assertNotNull(headerArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(headerArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertNotNull(headerList81);
        org.junit.Assert.assertNotNull(headerList83);
    }

    @Test
    public void test0441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0441");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        java.util.List<retrofit.client.Header> headerList12 = request11.headers;
        java.lang.Object[] objArray14 = new java.lang.Object[] { true, (short) 1, request11, 0 };
        requestBuilder1.args = objArray14;
        retrofit.converter.Converter converter16 = requestBuilder1.converter;
        java.util.List<retrofit.client.Header> headerList17 = requestBuilder1.headers;
        java.lang.String str18 = requestBuilder1.getapiUrl();
        retrofit.client.Header[] headerArray21 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList22 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList22, headerArray21);
        retrofit.mime.TypedOutput typedOutput24 = null;
        retrofit.client.Request request25 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList22, typedOutput24);
        java.util.List<retrofit.client.Header> headerList26 = request25.headers;
        requestBuilder1.setheaders(headerList26);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str28 = requestBuilder1.buildRelativeUrl();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNull(headerList17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(headerArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(headerList26);
    }

    @Test
    public void test0442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0442");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.converter.Converter converter3 = requestBuilder1.getconverter();
        retrofit.RequestBuilder requestBuilder5 = requestBuilder1.apiUrl("hi!");
        java.util.List<retrofit.client.Header> headerList6 = requestBuilder5.headers;
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNotNull(requestBuilder5);
        org.junit.Assert.assertNull(headerList6);
    }

    @Test
    public void test0443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0443");
        retrofit.converter.Converter converter2 = null;
        retrofit.RequestBuilder requestBuilder3 = new retrofit.RequestBuilder(converter2);
        requestBuilder3.setapiUrl("");
        java.lang.String str6 = requestBuilder3.getapiUrl();
        java.util.List<retrofit.client.Header> headerList7 = requestBuilder3.getheaders();
        retrofit.client.Header[] headerArray18 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList19 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList19, headerArray18);
        retrofit.mime.TypedOutput typedOutput21 = null;
        retrofit.client.Request request22 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList19, typedOutput21);
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList19, typedOutput23);
        retrofit.mime.TypedOutput typedOutput25 = null;
        retrofit.client.Request request26 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList19, typedOutput25);
        retrofit.mime.TypedOutput typedOutput27 = null;
        retrofit.client.Request request28 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList19, typedOutput27);
        retrofit.mime.TypedOutput typedOutput29 = null;
        retrofit.client.Request request30 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList19, typedOutput29);
        requestBuilder3.headers = headerList19;
        retrofit.mime.TypedOutput typedOutput32 = null;
        retrofit.client.Request request33 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList19, typedOutput32);
        java.lang.String str34 = request33.getUrl();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNull(headerList7);
        org.junit.Assert.assertNotNull(headerArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
    }

    @Test
    public void test0444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0444");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        java.util.List<retrofit.client.Header> headerList12 = request11.headers;
        java.lang.Object[] objArray14 = new java.lang.Object[] { true, (short) 1, request11, 0 };
        requestBuilder1.args = objArray14;
        retrofit.converter.Converter converter16 = requestBuilder1.converter;
        java.lang.Object[] objArray17 = requestBuilder1.args;
        java.lang.Object[] objArray18 = null;
        retrofit.RequestBuilder requestBuilder19 = requestBuilder1.args(objArray18);
        retrofit.converter.Converter converter20 = requestBuilder19.getconverter();
        retrofit.RequestBuilder requestBuilder22 = requestBuilder19.apiUrl("");
        retrofit.client.Header[] headerArray29 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList30 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList30, headerArray29);
        retrofit.mime.TypedOutput typedOutput32 = null;
        retrofit.client.Request request33 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList30, typedOutput32);
        java.lang.String str34 = request33.url;
        java.util.List<retrofit.client.Header> headerList35 = request33.headers;
        retrofit.mime.TypedOutput typedOutput36 = null;
        retrofit.client.Request request37 = new retrofit.client.Request("", "", headerList35, typedOutput36);
        retrofit.mime.TypedOutput typedOutput38 = request37.body;
        java.util.List<retrofit.client.Header> headerList39 = request37.headers;
        retrofit.mime.TypedOutput typedOutput40 = null;
        retrofit.client.Request request41 = new retrofit.client.Request("hi!", "", headerList39, typedOutput40);
        requestBuilder22.setheaders(headerList39);
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request43 = requestBuilder22.build();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertNotNull(requestBuilder19);
        org.junit.Assert.assertNull(converter20);
        org.junit.Assert.assertNotNull(requestBuilder22);
        org.junit.Assert.assertNotNull(headerArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(headerList35);
        org.junit.Assert.assertNull(typedOutput38);
        org.junit.Assert.assertNotNull(headerList39);
    }

    @Test
    public void test0445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0445");
        retrofit.client.Header[] headerArray2 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList3 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList3, headerArray2);
        retrofit.mime.TypedOutput typedOutput5 = null;
        retrofit.client.Request request6 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList3, typedOutput5);
        java.lang.String str7 = request6.url;
        java.util.List<retrofit.client.Header> headerList8 = request6.headers;
        retrofit.mime.TypedOutput typedOutput9 = request6.body;
        retrofit.mime.TypedOutput typedOutput10 = request6.body;
        retrofit.mime.TypedOutput typedOutput11 = request6.getBody();
        retrofit.mime.TypedOutput typedOutput12 = request6.body;
        java.util.List<retrofit.client.Header> headerList13 = request6.getHeaders();
        java.util.List<retrofit.client.Header> headerList14 = request6.getHeaders();
        java.util.List<retrofit.client.Header> headerList15 = request6.headers;
        java.lang.String str16 = request6.getMethod();
        org.junit.Assert.assertNotNull(headerArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(headerList8);
        org.junit.Assert.assertNull(typedOutput9);
        org.junit.Assert.assertNull(typedOutput10);
        org.junit.Assert.assertNull(typedOutput11);
        org.junit.Assert.assertNull(typedOutput12);
        org.junit.Assert.assertNotNull(headerList13);
        org.junit.Assert.assertNotNull(headerList14);
        org.junit.Assert.assertNotNull(headerList15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test0446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0446");
        retrofit.client.Header[] headerArray2 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList3 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList3, headerArray2);
        retrofit.mime.TypedOutput typedOutput5 = null;
        retrofit.client.Request request6 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList3, typedOutput5);
        java.util.List<retrofit.client.Header> headerList7 = request6.headers;
        java.util.List<retrofit.client.Header> headerList8 = request6.headers;
        java.util.List<retrofit.client.Header> headerList9 = request6.getHeaders();
        java.util.List<retrofit.client.Header> headerList10 = request6.headers;
        retrofit.mime.TypedOutput typedOutput11 = request6.body;
        retrofit.mime.TypedOutput typedOutput12 = request6.body;
        retrofit.mime.TypedOutput typedOutput13 = request6.getBody();
        org.junit.Assert.assertNotNull(headerArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(headerList7);
        org.junit.Assert.assertNotNull(headerList8);
        org.junit.Assert.assertNotNull(headerList9);
        org.junit.Assert.assertNotNull(headerList10);
        org.junit.Assert.assertNull(typedOutput11);
        org.junit.Assert.assertNull(typedOutput12);
        org.junit.Assert.assertNull(typedOutput13);
    }

    @Test
    public void test0447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0447");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        requestBuilder1.setapiUrl("");
        java.lang.String str4 = requestBuilder1.getapiUrl();
        requestBuilder1.setapiUrl("hi!");
        retrofit.RequestBuilder requestBuilder8 = requestBuilder1.apiUrl("");
        requestBuilder1.apiUrl = "";
        retrofit.converter.Converter converter15 = null;
        retrofit.RequestBuilder requestBuilder16 = new retrofit.RequestBuilder(converter15);
        retrofit.client.Header[] headerArray23 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList24 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList24, headerArray23);
        retrofit.mime.TypedOutput typedOutput26 = null;
        retrofit.client.Request request27 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList24, typedOutput26);
        java.lang.String str28 = request27.url;
        java.util.List<retrofit.client.Header> headerList29 = request27.headers;
        retrofit.mime.TypedOutput typedOutput30 = null;
        retrofit.client.Request request31 = new retrofit.client.Request("", "", headerList29, typedOutput30);
        retrofit.mime.TypedOutput typedOutput32 = request31.body;
        java.util.List<retrofit.client.Header> headerList33 = request31.headers;
        retrofit.mime.TypedOutput typedOutput34 = null;
        retrofit.client.Request request35 = new retrofit.client.Request("hi!", "", headerList33, typedOutput34);
        requestBuilder16.headers = headerList33;
        retrofit.mime.TypedOutput typedOutput37 = null;
        retrofit.client.Request request38 = new retrofit.client.Request("", "", headerList33, typedOutput37);
        retrofit.mime.TypedOutput typedOutput39 = null;
        retrofit.client.Request request40 = new retrofit.client.Request("", "hi!", headerList33, typedOutput39);
        retrofit.RequestBuilder requestBuilder41 = requestBuilder1.headers(headerList33);
        requestBuilder1.setapiUrl("");
        retrofit.converter.Converter converter44 = requestBuilder1.getconverter();
        java.lang.Object[] objArray45 = requestBuilder1.args;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.mime.TypedOutput typedOutput46 = requestBuilder1.buildBody();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(requestBuilder8);
        org.junit.Assert.assertNotNull(headerArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(headerList29);
        org.junit.Assert.assertNull(typedOutput32);
        org.junit.Assert.assertNotNull(headerList33);
        org.junit.Assert.assertNotNull(requestBuilder41);
        org.junit.Assert.assertNull(converter44);
        org.junit.Assert.assertNull(objArray45);
    }

    @Test
    public void test0448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0448");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        requestBuilder1.setapiUrl("");
        java.lang.String str4 = requestBuilder1.getapiUrl();
        java.util.List<retrofit.client.Header> headerList5 = requestBuilder1.getheaders();
        java.lang.Object[] objArray6 = requestBuilder1.getargs();
        java.lang.Object[] objArray7 = requestBuilder1.getargs();
        java.util.List<retrofit.client.Header> headerList8 = requestBuilder1.getheaders();
        requestBuilder1.setapiUrl("hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(headerList5);
        org.junit.Assert.assertNull(objArray6);
        org.junit.Assert.assertNull(objArray7);
        org.junit.Assert.assertNull(headerList8);
    }

    @Test
    public void test0449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0449");
        retrofit.converter.Converter converter2 = null;
        retrofit.RequestBuilder requestBuilder3 = new retrofit.RequestBuilder(converter2);
        java.util.List<retrofit.client.Header> headerList4 = requestBuilder3.headers;
        retrofit.client.Header[] headerArray9 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList10 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList10, headerArray9);
        retrofit.mime.TypedOutput typedOutput12 = null;
        retrofit.client.Request request13 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList10, typedOutput12);
        java.util.List<retrofit.client.Header> headerList14 = request13.headers;
        java.lang.Object[] objArray16 = new java.lang.Object[] { true, (short) 1, request13, 0 };
        requestBuilder3.args = objArray16;
        retrofit.client.Header[] headerArray20 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList21 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList21, headerArray20);
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList21, typedOutput23);
        java.util.List<retrofit.client.Header> headerList25 = request24.headers;
        requestBuilder3.setheaders(headerList25);
        retrofit.mime.TypedOutput typedOutput27 = null;
        retrofit.client.Request request28 = new retrofit.client.Request("", "", headerList25, typedOutput27);
        java.lang.String str29 = request28.url;
        java.lang.String str30 = request28.url;
        retrofit.mime.TypedOutput typedOutput31 = request28.getBody();
        org.junit.Assert.assertNull(headerList4);
        org.junit.Assert.assertNotNull(headerArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(headerList14);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertNotNull(headerArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(headerList25);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNull(typedOutput31);
    }

    @Test
    public void test0450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0450");
        retrofit.client.Header[] headerArray4 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList5 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList5, headerArray4);
        retrofit.mime.TypedOutput typedOutput7 = null;
        retrofit.client.Request request8 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList5, typedOutput7);
        retrofit.mime.TypedOutput typedOutput9 = null;
        retrofit.client.Request request10 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList5, typedOutput9);
        java.lang.String str11 = request10.getUrl();
        retrofit.mime.TypedOutput typedOutput12 = request10.body;
        org.junit.Assert.assertNotNull(headerArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNull(typedOutput12);
    }

    @Test
    public void test0451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0451");
        retrofit.client.Header[] headerArray14 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList15 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList15, headerArray14);
        retrofit.mime.TypedOutput typedOutput17 = null;
        retrofit.client.Request request18 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList15, typedOutput17);
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList15, typedOutput19);
        retrofit.mime.TypedOutput typedOutput21 = null;
        retrofit.client.Request request22 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList15, typedOutput21);
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList15, typedOutput23);
        java.lang.String str25 = request24.getUrl();
        java.util.List<retrofit.client.Header> headerList26 = request24.getHeaders();
        retrofit.mime.TypedOutput typedOutput27 = null;
        retrofit.client.Request request28 = new retrofit.client.Request("hi!", "", headerList26, typedOutput27);
        retrofit.mime.TypedOutput typedOutput29 = null;
        retrofit.client.Request request30 = new retrofit.client.Request("hi!", "hi!", headerList26, typedOutput29);
        retrofit.mime.TypedOutput typedOutput31 = null;
        retrofit.client.Request request32 = new retrofit.client.Request("", "hi!", headerList26, typedOutput31);
        retrofit.mime.TypedOutput typedOutput33 = request32.body;
        org.junit.Assert.assertNotNull(headerArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(headerList26);
        org.junit.Assert.assertNull(typedOutput33);
    }

    @Test
    public void test0452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0452");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.converter.Converter converter3 = null;
        retrofit.RequestBuilder requestBuilder4 = new retrofit.RequestBuilder(converter3);
        java.util.List<retrofit.client.Header> headerList5 = requestBuilder4.headers;
        retrofit.client.Header[] headerArray10 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList11 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList11, headerArray10);
        retrofit.mime.TypedOutput typedOutput13 = null;
        retrofit.client.Request request14 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList11, typedOutput13);
        java.util.List<retrofit.client.Header> headerList15 = request14.headers;
        java.lang.Object[] objArray17 = new java.lang.Object[] { true, (short) 1, request14, 0 };
        requestBuilder4.args = objArray17;
        requestBuilder1.setargs(objArray17);
        retrofit.converter.Converter converter20 = requestBuilder1.getconverter();
        java.util.List<retrofit.client.Header> headerList21 = requestBuilder1.headers;
        retrofit.converter.Converter converter22 = requestBuilder1.getconverter();
        java.util.List<retrofit.client.Header> headerList27 = null;
        retrofit.mime.TypedOutput typedOutput28 = null;
        retrofit.client.Request request29 = new retrofit.client.Request("", "", headerList27, typedOutput28);
        java.lang.String str30 = request29.getUrl();
        java.util.List<retrofit.client.Header> headerList31 = request29.headers;
        retrofit.mime.TypedOutput typedOutput32 = null;
        retrofit.client.Request request33 = new retrofit.client.Request("", "", headerList31, typedOutput32);
        requestBuilder1.headers = headerList31;
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNull(headerList5);
        org.junit.Assert.assertNotNull(headerArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(headerList15);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertNull(converter20);
        org.junit.Assert.assertNull(headerList21);
        org.junit.Assert.assertNull(converter22);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(headerList31);
    }

    @Test
    public void test0453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0453");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        retrofit.client.Header[] headerArray8 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList9 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList9, headerArray8);
        retrofit.mime.TypedOutput typedOutput11 = null;
        retrofit.client.Request request12 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList9, typedOutput11);
        java.lang.String str13 = request12.url;
        java.util.List<retrofit.client.Header> headerList14 = request12.headers;
        retrofit.mime.TypedOutput typedOutput15 = null;
        retrofit.client.Request request16 = new retrofit.client.Request("", "", headerList14, typedOutput15);
        retrofit.mime.TypedOutput typedOutput17 = request16.body;
        java.util.List<retrofit.client.Header> headerList18 = request16.headers;
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("hi!", "", headerList18, typedOutput19);
        requestBuilder1.headers = headerList18;
        retrofit.client.Header[] headerArray28 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList29 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList29, headerArray28);
        retrofit.mime.TypedOutput typedOutput31 = null;
        retrofit.client.Request request32 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList29, typedOutput31);
        java.lang.String str33 = request32.url;
        java.util.List<retrofit.client.Header> headerList34 = request32.headers;
        retrofit.mime.TypedOutput typedOutput35 = null;
        retrofit.client.Request request36 = new retrofit.client.Request("", "", headerList34, typedOutput35);
        retrofit.mime.TypedOutput typedOutput37 = request36.body;
        retrofit.mime.TypedOutput typedOutput38 = request36.getBody();
        java.util.List<retrofit.client.Header> headerList39 = request36.getHeaders();
        retrofit.mime.TypedOutput typedOutput40 = null;
        retrofit.client.Request request41 = new retrofit.client.Request("", "", headerList39, typedOutput40);
        requestBuilder1.headers = headerList39;
        java.lang.Object[] objArray43 = requestBuilder1.getargs();
        java.lang.Object[] objArray44 = requestBuilder1.args;
        java.lang.Class<?> wildcardClass45 = requestBuilder1.getClass();
        org.junit.Assert.assertNotNull(headerArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(headerList14);
        org.junit.Assert.assertNull(typedOutput17);
        org.junit.Assert.assertNotNull(headerList18);
        org.junit.Assert.assertNotNull(headerArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(headerList34);
        org.junit.Assert.assertNull(typedOutput37);
        org.junit.Assert.assertNull(typedOutput38);
        org.junit.Assert.assertNotNull(headerList39);
        org.junit.Assert.assertNull(objArray43);
        org.junit.Assert.assertNull(objArray44);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test0454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0454");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        requestBuilder1.setapiUrl("");
        java.lang.String str4 = requestBuilder1.getapiUrl();
        requestBuilder1.setapiUrl("hi!");
        requestBuilder1.setapiUrl("");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    }

    @Test
    public void test0455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0455");
        retrofit.client.Header[] headerArray6 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList7 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList7, headerArray6);
        retrofit.mime.TypedOutput typedOutput9 = null;
        retrofit.client.Request request10 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList7, typedOutput9);
        java.lang.String str11 = request10.url;
        java.util.List<retrofit.client.Header> headerList12 = request10.headers;
        retrofit.mime.TypedOutput typedOutput13 = request10.body;
        retrofit.mime.TypedOutput typedOutput14 = request10.body;
        java.util.List<retrofit.client.Header> headerList15 = request10.headers;
        retrofit.mime.TypedOutput typedOutput16 = null;
        retrofit.client.Request request17 = new retrofit.client.Request("", "hi!", headerList15, typedOutput16);
        java.util.List<retrofit.client.Header> headerList18 = request17.getHeaders();
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("hi!", "hi!", headerList18, typedOutput19);
        java.util.List<retrofit.client.Header> headerList21 = request20.getHeaders();
        java.lang.String str22 = request20.getMethod();
        org.junit.Assert.assertNotNull(headerArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNull(typedOutput13);
        org.junit.Assert.assertNull(typedOutput14);
        org.junit.Assert.assertNotNull(headerList15);
        org.junit.Assert.assertNotNull(headerList18);
        org.junit.Assert.assertNotNull(headerList21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
    }

    @Test
    public void test0456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0456");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.lang.Object[] objArray2 = requestBuilder1.getargs();
        retrofit.converter.Converter converter3 = requestBuilder1.getconverter();
        retrofit.converter.Converter converter4 = requestBuilder1.converter;
        retrofit.RequestBuilder requestBuilder6 = requestBuilder1.apiUrl("");
        // The following exception was thrown during execution in test generation
        try {
            retrofit.mime.TypedOutput typedOutput7 = requestBuilder1.buildBody();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(objArray2);
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(converter4);
        org.junit.Assert.assertNotNull(requestBuilder6);
    }

    @Test
    public void test0457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0457");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        retrofit.client.Header[] headerArray8 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList9 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList9, headerArray8);
        retrofit.mime.TypedOutput typedOutput11 = null;
        retrofit.client.Request request12 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList9, typedOutput11);
        java.lang.String str13 = request12.url;
        java.util.List<retrofit.client.Header> headerList14 = request12.headers;
        retrofit.mime.TypedOutput typedOutput15 = null;
        retrofit.client.Request request16 = new retrofit.client.Request("", "", headerList14, typedOutput15);
        retrofit.mime.TypedOutput typedOutput17 = request16.body;
        java.util.List<retrofit.client.Header> headerList18 = request16.headers;
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("hi!", "", headerList18, typedOutput19);
        requestBuilder1.headers = headerList18;
        retrofit.client.Header[] headerArray28 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList29 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList29, headerArray28);
        retrofit.mime.TypedOutput typedOutput31 = null;
        retrofit.client.Request request32 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList29, typedOutput31);
        java.lang.String str33 = request32.url;
        java.util.List<retrofit.client.Header> headerList34 = request32.headers;
        retrofit.mime.TypedOutput typedOutput35 = null;
        retrofit.client.Request request36 = new retrofit.client.Request("", "", headerList34, typedOutput35);
        retrofit.mime.TypedOutput typedOutput37 = request36.body;
        retrofit.mime.TypedOutput typedOutput38 = request36.getBody();
        java.util.List<retrofit.client.Header> headerList39 = request36.getHeaders();
        retrofit.mime.TypedOutput typedOutput40 = null;
        retrofit.client.Request request41 = new retrofit.client.Request("", "", headerList39, typedOutput40);
        requestBuilder1.headers = headerList39;
        java.util.List<retrofit.client.Header> headerList43 = requestBuilder1.getheaders();
        retrofit.client.Header[] headerArray50 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList51 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList51, headerArray50);
        retrofit.mime.TypedOutput typedOutput53 = null;
        retrofit.client.Request request54 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList51, typedOutput53);
        java.lang.String str55 = request54.url;
        java.util.List<retrofit.client.Header> headerList56 = request54.headers;
        retrofit.mime.TypedOutput typedOutput57 = request54.body;
        retrofit.mime.TypedOutput typedOutput58 = request54.body;
        java.util.List<retrofit.client.Header> headerList59 = request54.headers;
        retrofit.mime.TypedOutput typedOutput60 = null;
        retrofit.client.Request request61 = new retrofit.client.Request("", "hi!", headerList59, typedOutput60);
        java.util.List<retrofit.client.Header> headerList62 = request61.getHeaders();
        retrofit.mime.TypedOutput typedOutput63 = null;
        retrofit.client.Request request64 = new retrofit.client.Request("", "hi!", headerList62, typedOutput63);
        requestBuilder1.headers = headerList62;
        retrofit.client.Header[] headerArray70 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList71 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList71, headerArray70);
        retrofit.mime.TypedOutput typedOutput73 = null;
        retrofit.client.Request request74 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList71, typedOutput73);
        java.util.List<retrofit.client.Header> headerList75 = request74.headers;
        java.util.List<retrofit.client.Header> headerList76 = request74.headers;
        retrofit.mime.TypedOutput typedOutput77 = null;
        retrofit.client.Request request78 = new retrofit.client.Request("", "", headerList76, typedOutput77);
        retrofit.RequestBuilder requestBuilder79 = requestBuilder1.headers(headerList76);
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request80 = requestBuilder79.build();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(headerArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(headerList14);
        org.junit.Assert.assertNull(typedOutput17);
        org.junit.Assert.assertNotNull(headerList18);
        org.junit.Assert.assertNotNull(headerArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(headerList34);
        org.junit.Assert.assertNull(typedOutput37);
        org.junit.Assert.assertNull(typedOutput38);
        org.junit.Assert.assertNotNull(headerList39);
        org.junit.Assert.assertNotNull(headerList43);
        org.junit.Assert.assertNotNull(headerArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(headerList56);
        org.junit.Assert.assertNull(typedOutput57);
        org.junit.Assert.assertNull(typedOutput58);
        org.junit.Assert.assertNotNull(headerList59);
        org.junit.Assert.assertNotNull(headerList62);
        org.junit.Assert.assertNotNull(headerArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(headerList75);
        org.junit.Assert.assertNotNull(headerList76);
        org.junit.Assert.assertNotNull(requestBuilder79);
    }

    @Test
    public void test0458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0458");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        retrofit.converter.Converter converter2 = requestBuilder1.converter;
        retrofit.converter.Converter converter3 = requestBuilder1.converter;
        java.lang.String str4 = requestBuilder1.apiUrl;
        java.util.List<retrofit.client.Header> headerList5 = requestBuilder1.getheaders();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request6 = requestBuilder1.build();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(converter2);
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(headerList5);
    }

    @Test
    public void test0459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0459");
        retrofit.client.Header[] headerArray8 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList9 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList9, headerArray8);
        retrofit.mime.TypedOutput typedOutput11 = null;
        retrofit.client.Request request12 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList9, typedOutput11);
        java.lang.String str13 = request12.url;
        java.util.List<retrofit.client.Header> headerList14 = request12.headers;
        retrofit.mime.TypedOutput typedOutput15 = request12.body;
        retrofit.mime.TypedOutput typedOutput16 = request12.body;
        java.util.List<retrofit.client.Header> headerList17 = request12.headers;
        retrofit.mime.TypedOutput typedOutput18 = null;
        retrofit.client.Request request19 = new retrofit.client.Request("hi!", "hi!", headerList17, typedOutput18);
        java.lang.String str20 = request19.getMethod();
        java.util.List<retrofit.client.Header> headerList21 = request19.getHeaders();
        retrofit.mime.TypedOutput typedOutput22 = null;
        retrofit.client.Request request23 = new retrofit.client.Request("hi!", "hi!", headerList21, typedOutput22);
        retrofit.mime.TypedOutput typedOutput24 = null;
        retrofit.client.Request request25 = new retrofit.client.Request("hi!", "hi!", headerList21, typedOutput24);
        org.junit.Assert.assertNotNull(headerArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(headerList14);
        org.junit.Assert.assertNull(typedOutput15);
        org.junit.Assert.assertNull(typedOutput16);
        org.junit.Assert.assertNotNull(headerList17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertNotNull(headerList21);
    }

    @Test
    public void test0460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0460");
        retrofit.client.Header[] headerArray2 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList3 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList3, headerArray2);
        retrofit.mime.TypedOutput typedOutput5 = null;
        retrofit.client.Request request6 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList3, typedOutput5);
        java.lang.String str7 = request6.url;
        java.util.List<retrofit.client.Header> headerList8 = request6.headers;
        retrofit.mime.TypedOutput typedOutput9 = request6.body;
        retrofit.mime.TypedOutput typedOutput10 = request6.body;
        java.util.List<retrofit.client.Header> headerList11 = request6.headers;
        java.lang.String str12 = request6.url;
        java.lang.String str13 = request6.getUrl();
        java.util.List<retrofit.client.Header> headerList14 = request6.headers;
        java.util.List<retrofit.client.Header> headerList15 = request6.headers;
        java.lang.String str16 = request6.method;
        java.lang.String str17 = request6.method;
        java.lang.String str18 = request6.url;
        retrofit.mime.TypedOutput typedOutput19 = request6.getBody();
        org.junit.Assert.assertNotNull(headerArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(headerList8);
        org.junit.Assert.assertNull(typedOutput9);
        org.junit.Assert.assertNull(typedOutput10);
        org.junit.Assert.assertNotNull(headerList11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(headerList14);
        org.junit.Assert.assertNotNull(headerList15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNull(typedOutput19);
    }

    @Test
    public void test0461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0461");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        java.util.List<retrofit.client.Header> headerList12 = request11.headers;
        java.lang.Object[] objArray14 = new java.lang.Object[] { true, (short) 1, request11, 0 };
        requestBuilder1.args = objArray14;
        retrofit.converter.Converter converter16 = requestBuilder1.converter;
        java.util.List<retrofit.client.Header> headerList17 = requestBuilder1.headers;
        requestBuilder1.apiUrl = "hi!";
        retrofit.client.Header[] headerArray24 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList25 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList25, headerArray24);
        retrofit.mime.TypedOutput typedOutput27 = null;
        retrofit.client.Request request28 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList25, typedOutput27);
        java.lang.String str29 = request28.url;
        java.util.List<retrofit.client.Header> headerList30 = request28.headers;
        retrofit.mime.TypedOutput typedOutput31 = null;
        retrofit.client.Request request32 = new retrofit.client.Request("", "", headerList30, typedOutput31);
        retrofit.RequestBuilder requestBuilder33 = requestBuilder1.headers(headerList30);
        java.util.List<retrofit.client.Header> headerList34 = requestBuilder1.headers;
        java.util.List<retrofit.client.Header> headerList35 = requestBuilder1.headers;
        java.lang.String str36 = requestBuilder1.apiUrl;
        java.util.List<retrofit.client.Header> headerList37 = requestBuilder1.headers;
        retrofit.RequestBuilder requestBuilder39 = requestBuilder1.apiUrl("hi!");
        java.lang.Class<?> wildcardClass40 = requestBuilder1.getClass();
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNull(headerList17);
        org.junit.Assert.assertNotNull(headerArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(headerList30);
        org.junit.Assert.assertNotNull(requestBuilder33);
        org.junit.Assert.assertNotNull(headerList34);
        org.junit.Assert.assertNotNull(headerList35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertNotNull(headerList37);
        org.junit.Assert.assertNotNull(requestBuilder39);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test0462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0462");
        retrofit.client.Header[] headerArray2 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList3 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList3, headerArray2);
        retrofit.mime.TypedOutput typedOutput5 = null;
        retrofit.client.Request request6 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList3, typedOutput5);
        java.util.List<retrofit.client.Header> headerList7 = request6.headers;
        retrofit.mime.TypedOutput typedOutput8 = request6.body;
        java.util.List<retrofit.client.Header> headerList9 = request6.headers;
        java.util.List<retrofit.client.Header> headerList10 = request6.getHeaders();
        retrofit.mime.TypedOutput typedOutput11 = request6.getBody();
        org.junit.Assert.assertNotNull(headerArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(headerList7);
        org.junit.Assert.assertNull(typedOutput8);
        org.junit.Assert.assertNotNull(headerList9);
        org.junit.Assert.assertNotNull(headerList10);
        org.junit.Assert.assertNull(typedOutput11);
    }

    @Test
    public void test0463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0463");
        retrofit.converter.Converter converter8 = null;
        retrofit.RequestBuilder requestBuilder9 = new retrofit.RequestBuilder(converter8);
        java.util.List<retrofit.client.Header> headerList10 = requestBuilder9.headers;
        retrofit.client.Header[] headerArray15 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList16 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList16, headerArray15);
        retrofit.mime.TypedOutput typedOutput18 = null;
        retrofit.client.Request request19 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList16, typedOutput18);
        java.util.List<retrofit.client.Header> headerList20 = request19.headers;
        java.lang.Object[] objArray22 = new java.lang.Object[] { true, (short) 1, request19, 0 };
        requestBuilder9.args = objArray22;
        retrofit.converter.Converter converter24 = requestBuilder9.converter;
        java.util.List<retrofit.client.Header> headerList25 = requestBuilder9.headers;
        requestBuilder9.apiUrl = "hi!";
        retrofit.client.Header[] headerArray32 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList33 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList33, headerArray32);
        retrofit.mime.TypedOutput typedOutput35 = null;
        retrofit.client.Request request36 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList33, typedOutput35);
        java.lang.String str37 = request36.url;
        java.util.List<retrofit.client.Header> headerList38 = request36.headers;
        retrofit.mime.TypedOutput typedOutput39 = null;
        retrofit.client.Request request40 = new retrofit.client.Request("", "", headerList38, typedOutput39);
        retrofit.RequestBuilder requestBuilder41 = requestBuilder9.headers(headerList38);
        retrofit.mime.TypedOutput typedOutput42 = null;
        retrofit.client.Request request43 = new retrofit.client.Request("", "hi!", headerList38, typedOutput42);
        retrofit.mime.TypedOutput typedOutput44 = null;
        retrofit.client.Request request45 = new retrofit.client.Request("hi!", "", headerList38, typedOutput44);
        retrofit.mime.TypedOutput typedOutput46 = null;
        retrofit.client.Request request47 = new retrofit.client.Request("", "hi!", headerList38, typedOutput46);
        retrofit.mime.TypedOutput typedOutput48 = null;
        retrofit.client.Request request49 = new retrofit.client.Request("", "hi!", headerList38, typedOutput48);
        java.lang.String str50 = request49.getUrl();
        org.junit.Assert.assertNull(headerList10);
        org.junit.Assert.assertNotNull(headerArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(headerList20);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertNull(converter24);
        org.junit.Assert.assertNull(headerList25);
        org.junit.Assert.assertNotNull(headerArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(headerList38);
        org.junit.Assert.assertNotNull(requestBuilder41);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hi!" + "'", str50, "hi!");
    }

    @Test
    public void test0464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0464");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        requestBuilder1.setapiUrl("");
        java.lang.String str4 = requestBuilder1.getapiUrl();
        requestBuilder1.setapiUrl("hi!");
        retrofit.RequestBuilder requestBuilder8 = requestBuilder1.apiUrl("");
        java.lang.String str9 = requestBuilder8.getapiUrl();
        requestBuilder8.setapiUrl("");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(requestBuilder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test0465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0465");
        retrofit.converter.Converter converter6 = null;
        retrofit.RequestBuilder requestBuilder7 = new retrofit.RequestBuilder(converter6);
        java.util.List<retrofit.client.Header> headerList8 = requestBuilder7.headers;
        retrofit.client.Header[] headerArray13 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList14 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList14, headerArray13);
        retrofit.mime.TypedOutput typedOutput16 = null;
        retrofit.client.Request request17 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList14, typedOutput16);
        java.util.List<retrofit.client.Header> headerList18 = request17.headers;
        java.lang.Object[] objArray20 = new java.lang.Object[] { true, (short) 1, request17, 0 };
        requestBuilder7.args = objArray20;
        retrofit.client.Header[] headerArray24 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList25 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList25, headerArray24);
        retrofit.mime.TypedOutput typedOutput27 = null;
        retrofit.client.Request request28 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList25, typedOutput27);
        java.util.List<retrofit.client.Header> headerList29 = request28.headers;
        requestBuilder7.setheaders(headerList29);
        retrofit.mime.TypedOutput typedOutput31 = null;
        retrofit.client.Request request32 = new retrofit.client.Request("", "hi!", headerList29, typedOutput31);
        java.util.List<retrofit.client.Header> headerList33 = request32.getHeaders();
        retrofit.mime.TypedOutput typedOutput34 = null;
        retrofit.client.Request request35 = new retrofit.client.Request("hi!", "", headerList33, typedOutput34);
        java.util.List<retrofit.client.Header> headerList36 = request35.getHeaders();
        retrofit.mime.TypedOutput typedOutput37 = null;
        retrofit.client.Request request38 = new retrofit.client.Request("hi!", "hi!", headerList36, typedOutput37);
        org.junit.Assert.assertNull(headerList8);
        org.junit.Assert.assertNotNull(headerArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(headerList18);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertNotNull(headerArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(headerList29);
        org.junit.Assert.assertNotNull(headerList33);
        org.junit.Assert.assertNotNull(headerList36);
    }

    @Test
    public void test0466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0466");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.converter.Converter converter3 = requestBuilder1.getconverter();
        java.lang.Object[] objArray6 = new java.lang.Object[] { 0.0f, 100.0d };
        retrofit.RequestBuilder requestBuilder7 = requestBuilder1.args(objArray6);
        requestBuilder7.setapiUrl("");
        java.util.List<retrofit.client.Header> headerList10 = requestBuilder7.headers;
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[0.0, 100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[0.0, 100.0]");
        org.junit.Assert.assertNotNull(requestBuilder7);
        org.junit.Assert.assertNull(headerList10);
    }

    @Test
    public void test0467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0467");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        java.util.List<retrofit.client.Header> headerList12 = request11.headers;
        java.lang.Object[] objArray14 = new java.lang.Object[] { true, (short) 1, request11, 0 };
        requestBuilder1.args = objArray14;
        retrofit.converter.Converter converter16 = requestBuilder1.converter;
        java.lang.Object[] objArray17 = requestBuilder1.args;
        retrofit.converter.Converter converter18 = null;
        retrofit.RequestBuilder requestBuilder19 = new retrofit.RequestBuilder(converter18);
        java.util.List<retrofit.client.Header> headerList20 = requestBuilder19.headers;
        retrofit.client.Header[] headerArray25 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList26 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList26, headerArray25);
        retrofit.mime.TypedOutput typedOutput28 = null;
        retrofit.client.Request request29 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList26, typedOutput28);
        java.util.List<retrofit.client.Header> headerList30 = request29.headers;
        java.lang.Object[] objArray32 = new java.lang.Object[] { true, (short) 1, request29, 0 };
        requestBuilder19.args = objArray32;
        retrofit.converter.Converter converter34 = requestBuilder19.converter;
        java.lang.Object[] objArray35 = requestBuilder19.args;
        requestBuilder1.setargs(objArray35);
        java.util.List<retrofit.client.Header> headerList37 = requestBuilder1.headers;
        java.util.List<retrofit.client.Header> headerList38 = requestBuilder1.getheaders();
        java.lang.Object[] objArray39 = requestBuilder1.getargs();
        java.lang.Object[] objArray40 = requestBuilder1.args;
        java.util.List<retrofit.client.Header> headerList41 = requestBuilder1.headers;
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertNull(headerList20);
        org.junit.Assert.assertNotNull(headerArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(headerList30);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertNull(converter34);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertNull(headerList37);
        org.junit.Assert.assertNull(headerList38);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertNull(headerList41);
    }

    @Test
    public void test0468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0468");
        retrofit.converter.Converter converter2 = null;
        retrofit.RequestBuilder requestBuilder3 = new retrofit.RequestBuilder(converter2);
        java.util.List<retrofit.client.Header> headerList4 = requestBuilder3.headers;
        retrofit.client.Header[] headerArray9 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList10 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList10, headerArray9);
        retrofit.mime.TypedOutput typedOutput12 = null;
        retrofit.client.Request request13 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList10, typedOutput12);
        java.util.List<retrofit.client.Header> headerList14 = request13.headers;
        java.lang.Object[] objArray16 = new java.lang.Object[] { true, (short) 1, request13, 0 };
        requestBuilder3.args = objArray16;
        retrofit.client.Header[] headerArray20 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList21 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList21, headerArray20);
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList21, typedOutput23);
        java.util.List<retrofit.client.Header> headerList25 = request24.headers;
        requestBuilder3.setheaders(headerList25);
        retrofit.mime.TypedOutput typedOutput27 = null;
        retrofit.client.Request request28 = new retrofit.client.Request("hi!", "hi!", headerList25, typedOutput27);
        retrofit.mime.TypedOutput typedOutput29 = request28.body;
        java.util.List<retrofit.client.Header> headerList30 = request28.headers;
        java.lang.Class<?> wildcardClass31 = request28.getClass();
        org.junit.Assert.assertNull(headerList4);
        org.junit.Assert.assertNotNull(headerArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(headerList14);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertNotNull(headerArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(headerList25);
        org.junit.Assert.assertNull(typedOutput29);
        org.junit.Assert.assertNotNull(headerList30);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0469");
        retrofit.client.Header[] headerArray10 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList11 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList11, headerArray10);
        retrofit.mime.TypedOutput typedOutput13 = null;
        retrofit.client.Request request14 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList11, typedOutput13);
        java.lang.String str15 = request14.url;
        java.util.List<retrofit.client.Header> headerList16 = request14.headers;
        retrofit.mime.TypedOutput typedOutput17 = request14.body;
        retrofit.mime.TypedOutput typedOutput18 = request14.body;
        java.util.List<retrofit.client.Header> headerList19 = request14.headers;
        retrofit.mime.TypedOutput typedOutput20 = null;
        retrofit.client.Request request21 = new retrofit.client.Request("hi!", "hi!", headerList19, typedOutput20);
        retrofit.mime.TypedOutput typedOutput22 = null;
        retrofit.client.Request request23 = new retrofit.client.Request("hi!", "hi!", headerList19, typedOutput22);
        retrofit.mime.TypedOutput typedOutput24 = request23.body;
        java.lang.String str25 = request23.getUrl();
        java.util.List<retrofit.client.Header> headerList26 = request23.headers;
        retrofit.mime.TypedOutput typedOutput27 = null;
        retrofit.client.Request request28 = new retrofit.client.Request("hi!", "hi!", headerList26, typedOutput27);
        retrofit.mime.TypedOutput typedOutput29 = null;
        retrofit.client.Request request30 = new retrofit.client.Request("hi!", "", headerList26, typedOutput29);
        org.junit.Assert.assertNotNull(headerArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(headerList16);
        org.junit.Assert.assertNull(typedOutput17);
        org.junit.Assert.assertNull(typedOutput18);
        org.junit.Assert.assertNotNull(headerList19);
        org.junit.Assert.assertNull(typedOutput24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertNotNull(headerList26);
    }

    @Test
    public void test0470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0470");
        retrofit.client.Header[] headerArray4 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList5 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList5, headerArray4);
        retrofit.mime.TypedOutput typedOutput7 = null;
        retrofit.client.Request request8 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList5, typedOutput7);
        java.lang.String str9 = request8.url;
        java.util.List<retrofit.client.Header> headerList10 = request8.headers;
        retrofit.mime.TypedOutput typedOutput11 = request8.body;
        retrofit.mime.TypedOutput typedOutput12 = request8.body;
        java.util.List<retrofit.client.Header> headerList13 = request8.headers;
        java.util.List<retrofit.client.Header> headerList14 = request8.headers;
        retrofit.mime.TypedOutput typedOutput15 = null;
        retrofit.client.Request request16 = new retrofit.client.Request("hi!", "", headerList14, typedOutput15);
        retrofit.mime.TypedOutput typedOutput17 = request16.getBody();
        java.lang.String str18 = request16.method;
        java.lang.String str19 = request16.method;
        java.lang.String str20 = request16.getMethod();
        org.junit.Assert.assertNotNull(headerArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(headerList10);
        org.junit.Assert.assertNull(typedOutput11);
        org.junit.Assert.assertNull(typedOutput12);
        org.junit.Assert.assertNotNull(headerList13);
        org.junit.Assert.assertNotNull(headerList14);
        org.junit.Assert.assertNull(typedOutput17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
    }

    @Test
    public void test0471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0471");
        retrofit.client.Header[] headerArray2 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList3 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList3, headerArray2);
        retrofit.mime.TypedOutput typedOutput5 = null;
        retrofit.client.Request request6 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList3, typedOutput5);
        java.lang.String str7 = request6.url;
        java.util.List<retrofit.client.Header> headerList8 = request6.headers;
        retrofit.mime.TypedOutput typedOutput9 = request6.body;
        retrofit.mime.TypedOutput typedOutput10 = request6.body;
        retrofit.mime.TypedOutput typedOutput11 = request6.getBody();
        retrofit.mime.TypedOutput typedOutput12 = request6.body;
        retrofit.mime.TypedOutput typedOutput13 = request6.getBody();
        java.lang.String str14 = request6.url;
        java.lang.String str15 = request6.getUrl();
        java.lang.Class<?> wildcardClass16 = request6.getClass();
        org.junit.Assert.assertNotNull(headerArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(headerList8);
        org.junit.Assert.assertNull(typedOutput9);
        org.junit.Assert.assertNull(typedOutput10);
        org.junit.Assert.assertNull(typedOutput11);
        org.junit.Assert.assertNull(typedOutput12);
        org.junit.Assert.assertNull(typedOutput13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0472");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        java.util.List<retrofit.client.Header> headerList12 = request11.headers;
        java.lang.Object[] objArray14 = new java.lang.Object[] { true, (short) 1, request11, 0 };
        requestBuilder1.args = objArray14;
        retrofit.converter.Converter converter16 = requestBuilder1.converter;
        java.util.List<retrofit.client.Header> headerList17 = requestBuilder1.headers;
        java.util.List<retrofit.client.Header> headerList18 = requestBuilder1.headers;
        java.util.List<retrofit.client.Header> headerList19 = requestBuilder1.getheaders();
        java.util.List<retrofit.client.Header> headerList20 = requestBuilder1.headers;
        retrofit.converter.Converter converter21 = requestBuilder1.converter;
        retrofit.converter.Converter converter22 = requestBuilder1.getconverter();
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNull(headerList17);
        org.junit.Assert.assertNull(headerList18);
        org.junit.Assert.assertNull(headerList19);
        org.junit.Assert.assertNull(headerList20);
        org.junit.Assert.assertNull(converter21);
        org.junit.Assert.assertNull(converter22);
    }

    @Test
    public void test0473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0473");
        retrofit.converter.Converter converter4 = null;
        retrofit.RequestBuilder requestBuilder5 = new retrofit.RequestBuilder(converter4);
        requestBuilder5.setapiUrl("");
        java.lang.String str8 = requestBuilder5.getapiUrl();
        retrofit.client.Header[] headerArray11 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList12 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList12, headerArray11);
        retrofit.mime.TypedOutput typedOutput14 = null;
        retrofit.client.Request request15 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList12, typedOutput14);
        requestBuilder5.setheaders((java.util.List<retrofit.client.Header>) headerList12);
        retrofit.mime.TypedOutput typedOutput17 = null;
        retrofit.client.Request request18 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList12, typedOutput17);
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList12, typedOutput19);
        java.lang.String str21 = request20.getUrl();
        java.lang.String str22 = request20.url;
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(headerArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
    }

    @Test
    public void test0474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0474");
        retrofit.client.Header[] headerArray10 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList11 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList11, headerArray10);
        retrofit.mime.TypedOutput typedOutput13 = null;
        retrofit.client.Request request14 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList11, typedOutput13);
        java.lang.String str15 = request14.url;
        java.util.List<retrofit.client.Header> headerList16 = request14.headers;
        retrofit.mime.TypedOutput typedOutput17 = request14.body;
        retrofit.mime.TypedOutput typedOutput18 = request14.body;
        java.util.List<retrofit.client.Header> headerList19 = request14.headers;
        retrofit.mime.TypedOutput typedOutput20 = null;
        retrofit.client.Request request21 = new retrofit.client.Request("hi!", "hi!", headerList19, typedOutput20);
        retrofit.mime.TypedOutput typedOutput22 = request21.body;
        java.util.List<retrofit.client.Header> headerList23 = request21.getHeaders();
        retrofit.mime.TypedOutput typedOutput24 = null;
        retrofit.client.Request request25 = new retrofit.client.Request("", "hi!", headerList23, typedOutput24);
        retrofit.mime.TypedOutput typedOutput26 = null;
        retrofit.client.Request request27 = new retrofit.client.Request("hi!", "hi!", headerList23, typedOutput26);
        retrofit.mime.TypedOutput typedOutput28 = request27.getBody();
        java.lang.String str29 = request27.url;
        java.util.List<retrofit.client.Header> headerList30 = request27.getHeaders();
        retrofit.mime.TypedOutput typedOutput31 = null;
        retrofit.client.Request request32 = new retrofit.client.Request("", "", headerList30, typedOutput31);
        org.junit.Assert.assertNotNull(headerArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(headerList16);
        org.junit.Assert.assertNull(typedOutput17);
        org.junit.Assert.assertNull(typedOutput18);
        org.junit.Assert.assertNotNull(headerList19);
        org.junit.Assert.assertNull(typedOutput22);
        org.junit.Assert.assertNotNull(headerList23);
        org.junit.Assert.assertNull(typedOutput28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertNotNull(headerList30);
    }

    @Test
    public void test0475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0475");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.lang.Object[] objArray2 = requestBuilder1.getargs();
        retrofit.converter.Converter converter3 = requestBuilder1.getconverter();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request4 = requestBuilder1.build();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(objArray2);
        org.junit.Assert.assertNull(converter3);
    }

    @Test
    public void test0476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0476");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        requestBuilder1.setapiUrl("");
        java.lang.String str4 = requestBuilder1.getapiUrl();
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        requestBuilder1.setheaders((java.util.List<retrofit.client.Header>) headerList8);
        requestBuilder1.setapiUrl("");
        java.util.List<retrofit.client.Header> headerList15 = requestBuilder1.headers;
        requestBuilder1.setapiUrl("hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(headerList15);
    }

    @Test
    public void test0477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0477");
        retrofit.client.Header[] headerArray2 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList3 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList3, headerArray2);
        retrofit.mime.TypedOutput typedOutput5 = null;
        retrofit.client.Request request6 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList3, typedOutput5);
        java.util.List<retrofit.client.Header> headerList7 = request6.headers;
        retrofit.mime.TypedOutput typedOutput8 = request6.body;
        java.lang.String str9 = request6.getUrl();
        java.lang.String str10 = request6.getMethod();
        java.util.List<retrofit.client.Header> headerList11 = request6.headers;
        java.lang.String str12 = request6.method;
        java.lang.String str13 = request6.method;
        retrofit.mime.TypedOutput typedOutput14 = request6.getBody();
        org.junit.Assert.assertNotNull(headerArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(headerList7);
        org.junit.Assert.assertNull(typedOutput8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(headerList11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNull(typedOutput14);
    }

    @Test
    public void test0478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0478");
        retrofit.client.Header[] headerArray8 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList9 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList9, headerArray8);
        retrofit.mime.TypedOutput typedOutput11 = null;
        retrofit.client.Request request12 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList9, typedOutput11);
        java.lang.String str13 = request12.url;
        java.util.List<retrofit.client.Header> headerList14 = request12.headers;
        retrofit.mime.TypedOutput typedOutput15 = null;
        retrofit.client.Request request16 = new retrofit.client.Request("", "", headerList14, typedOutput15);
        retrofit.mime.TypedOutput typedOutput17 = request16.body;
        java.util.List<retrofit.client.Header> headerList18 = request16.headers;
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("", "hi!", headerList18, typedOutput19);
        retrofit.mime.TypedOutput typedOutput21 = null;
        retrofit.client.Request request22 = new retrofit.client.Request("", "hi!", headerList18, typedOutput21);
        retrofit.mime.TypedOutput typedOutput23 = request22.body;
        java.util.List<retrofit.client.Header> headerList24 = request22.headers;
        java.lang.String str25 = request22.getUrl();
        org.junit.Assert.assertNotNull(headerArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(headerList14);
        org.junit.Assert.assertNull(typedOutput17);
        org.junit.Assert.assertNotNull(headerList18);
        org.junit.Assert.assertNull(typedOutput23);
        org.junit.Assert.assertNotNull(headerList24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
    }

    @Test
    public void test0479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0479");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        retrofit.client.Header[] headerArray8 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList9 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList9, headerArray8);
        retrofit.mime.TypedOutput typedOutput11 = null;
        retrofit.client.Request request12 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList9, typedOutput11);
        java.lang.String str13 = request12.url;
        java.util.List<retrofit.client.Header> headerList14 = request12.headers;
        retrofit.mime.TypedOutput typedOutput15 = null;
        retrofit.client.Request request16 = new retrofit.client.Request("", "", headerList14, typedOutput15);
        retrofit.mime.TypedOutput typedOutput17 = request16.body;
        java.util.List<retrofit.client.Header> headerList18 = request16.headers;
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("hi!", "", headerList18, typedOutput19);
        requestBuilder1.headers = headerList18;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request22 = requestBuilder1.build();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(headerArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(headerList14);
        org.junit.Assert.assertNull(typedOutput17);
        org.junit.Assert.assertNotNull(headerList18);
    }

    @Test
    public void test0480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0480");
        retrofit.converter.Converter converter6 = null;
        retrofit.RequestBuilder requestBuilder7 = new retrofit.RequestBuilder(converter6);
        retrofit.client.Header[] headerArray14 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList15 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList15, headerArray14);
        retrofit.mime.TypedOutput typedOutput17 = null;
        retrofit.client.Request request18 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList15, typedOutput17);
        java.lang.String str19 = request18.url;
        java.util.List<retrofit.client.Header> headerList20 = request18.headers;
        retrofit.mime.TypedOutput typedOutput21 = null;
        retrofit.client.Request request22 = new retrofit.client.Request("", "", headerList20, typedOutput21);
        retrofit.mime.TypedOutput typedOutput23 = request22.body;
        java.util.List<retrofit.client.Header> headerList24 = request22.headers;
        retrofit.mime.TypedOutput typedOutput25 = null;
        retrofit.client.Request request26 = new retrofit.client.Request("hi!", "", headerList24, typedOutput25);
        requestBuilder7.headers = headerList24;
        retrofit.mime.TypedOutput typedOutput28 = null;
        retrofit.client.Request request29 = new retrofit.client.Request("", "", headerList24, typedOutput28);
        retrofit.mime.TypedOutput typedOutput30 = null;
        retrofit.client.Request request31 = new retrofit.client.Request("hi!", "hi!", headerList24, typedOutput30);
        retrofit.mime.TypedOutput typedOutput32 = null;
        retrofit.client.Request request33 = new retrofit.client.Request("hi!", "hi!", headerList24, typedOutput32);
        retrofit.mime.TypedOutput typedOutput34 = request33.body;
        org.junit.Assert.assertNotNull(headerArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(headerList20);
        org.junit.Assert.assertNull(typedOutput23);
        org.junit.Assert.assertNotNull(headerList24);
        org.junit.Assert.assertNull(typedOutput34);
    }

    @Test
    public void test0481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0481");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        retrofit.client.Header[] headerArray8 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList9 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList9, headerArray8);
        retrofit.mime.TypedOutput typedOutput11 = null;
        retrofit.client.Request request12 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList9, typedOutput11);
        java.lang.String str13 = request12.url;
        java.util.List<retrofit.client.Header> headerList14 = request12.headers;
        retrofit.mime.TypedOutput typedOutput15 = null;
        retrofit.client.Request request16 = new retrofit.client.Request("", "", headerList14, typedOutput15);
        retrofit.mime.TypedOutput typedOutput17 = request16.body;
        java.util.List<retrofit.client.Header> headerList18 = request16.headers;
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("hi!", "", headerList18, typedOutput19);
        requestBuilder1.headers = headerList18;
        retrofit.client.Header[] headerArray28 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList29 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList29, headerArray28);
        retrofit.mime.TypedOutput typedOutput31 = null;
        retrofit.client.Request request32 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList29, typedOutput31);
        java.lang.String str33 = request32.url;
        java.util.List<retrofit.client.Header> headerList34 = request32.headers;
        retrofit.mime.TypedOutput typedOutput35 = null;
        retrofit.client.Request request36 = new retrofit.client.Request("", "", headerList34, typedOutput35);
        retrofit.mime.TypedOutput typedOutput37 = request36.body;
        retrofit.mime.TypedOutput typedOutput38 = request36.getBody();
        java.util.List<retrofit.client.Header> headerList39 = request36.getHeaders();
        retrofit.mime.TypedOutput typedOutput40 = null;
        retrofit.client.Request request41 = new retrofit.client.Request("", "", headerList39, typedOutput40);
        requestBuilder1.headers = headerList39;
        java.util.List<retrofit.client.Header> headerList43 = requestBuilder1.getheaders();
        retrofit.client.Header[] headerArray50 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList51 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList51, headerArray50);
        retrofit.mime.TypedOutput typedOutput53 = null;
        retrofit.client.Request request54 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList51, typedOutput53);
        java.lang.String str55 = request54.url;
        java.util.List<retrofit.client.Header> headerList56 = request54.headers;
        retrofit.mime.TypedOutput typedOutput57 = request54.body;
        retrofit.mime.TypedOutput typedOutput58 = request54.body;
        java.util.List<retrofit.client.Header> headerList59 = request54.headers;
        retrofit.mime.TypedOutput typedOutput60 = null;
        retrofit.client.Request request61 = new retrofit.client.Request("", "hi!", headerList59, typedOutput60);
        java.util.List<retrofit.client.Header> headerList62 = request61.getHeaders();
        retrofit.mime.TypedOutput typedOutput63 = null;
        retrofit.client.Request request64 = new retrofit.client.Request("", "hi!", headerList62, typedOutput63);
        requestBuilder1.headers = headerList62;
        retrofit.client.Header[] headerArray70 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList71 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList71, headerArray70);
        retrofit.mime.TypedOutput typedOutput73 = null;
        retrofit.client.Request request74 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList71, typedOutput73);
        java.util.List<retrofit.client.Header> headerList75 = request74.headers;
        java.util.List<retrofit.client.Header> headerList76 = request74.headers;
        retrofit.mime.TypedOutput typedOutput77 = null;
        retrofit.client.Request request78 = new retrofit.client.Request("", "", headerList76, typedOutput77);
        retrofit.RequestBuilder requestBuilder79 = requestBuilder1.headers(headerList76);
        java.lang.Object[] objArray80 = requestBuilder1.getargs();
        java.util.List<retrofit.client.Header> headerList81 = requestBuilder1.headers;
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request82 = requestBuilder1.build();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(headerArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(headerList14);
        org.junit.Assert.assertNull(typedOutput17);
        org.junit.Assert.assertNotNull(headerList18);
        org.junit.Assert.assertNotNull(headerArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(headerList34);
        org.junit.Assert.assertNull(typedOutput37);
        org.junit.Assert.assertNull(typedOutput38);
        org.junit.Assert.assertNotNull(headerList39);
        org.junit.Assert.assertNotNull(headerList43);
        org.junit.Assert.assertNotNull(headerArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(headerList56);
        org.junit.Assert.assertNull(typedOutput57);
        org.junit.Assert.assertNull(typedOutput58);
        org.junit.Assert.assertNotNull(headerList59);
        org.junit.Assert.assertNotNull(headerList62);
        org.junit.Assert.assertNotNull(headerArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(headerList75);
        org.junit.Assert.assertNotNull(headerList76);
        org.junit.Assert.assertNotNull(requestBuilder79);
        org.junit.Assert.assertNull(objArray80);
        org.junit.Assert.assertNotNull(headerList81);
    }

    @Test
    public void test0482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0482");
        retrofit.converter.Converter converter2 = null;
        retrofit.RequestBuilder requestBuilder3 = new retrofit.RequestBuilder(converter2);
        requestBuilder3.setapiUrl("");
        java.lang.String str6 = requestBuilder3.getapiUrl();
        java.util.List<retrofit.client.Header> headerList7 = requestBuilder3.getheaders();
        java.lang.Object[] objArray8 = requestBuilder3.getargs();
        retrofit.converter.Converter converter9 = null;
        retrofit.RequestBuilder requestBuilder10 = new retrofit.RequestBuilder(converter9);
        requestBuilder10.setapiUrl("");
        java.lang.String str13 = requestBuilder10.getapiUrl();
        retrofit.client.Header[] headerArray16 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList17 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList17, headerArray16);
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList17, typedOutput19);
        requestBuilder10.setheaders((java.util.List<retrofit.client.Header>) headerList17);
        requestBuilder3.headers = headerList17;
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("hi!", "hi!", (java.util.List<retrofit.client.Header>) headerList17, typedOutput23);
        retrofit.mime.TypedOutput typedOutput25 = request24.body;
        retrofit.mime.TypedOutput typedOutput26 = request24.body;
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNull(headerList7);
        org.junit.Assert.assertNull(objArray8);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(headerArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(typedOutput25);
        org.junit.Assert.assertNull(typedOutput26);
    }

    @Test
    public void test0483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0483");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        java.util.List<retrofit.client.Header> headerList12 = request11.headers;
        java.lang.Object[] objArray14 = new java.lang.Object[] { true, (short) 1, request11, 0 };
        requestBuilder1.args = objArray14;
        retrofit.converter.Converter converter16 = requestBuilder1.converter;
        java.lang.Object[] objArray17 = requestBuilder1.args;
        retrofit.client.Header[] headerArray20 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList21 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList21, headerArray20);
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList21, typedOutput23);
        java.lang.String str25 = request24.url;
        java.util.List<retrofit.client.Header> headerList26 = request24.headers;
        retrofit.mime.TypedOutput typedOutput27 = request24.body;
        retrofit.mime.TypedOutput typedOutput28 = request24.body;
        java.util.List<retrofit.client.Header> headerList29 = request24.headers;
        requestBuilder1.setheaders(headerList29);
        requestBuilder1.setapiUrl("hi!");
        java.util.List<retrofit.client.Header> headerList33 = requestBuilder1.getheaders();
        java.lang.String str34 = requestBuilder1.apiUrl;
        retrofit.converter.Converter converter35 = requestBuilder1.getconverter();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str36 = requestBuilder1.buildRelativeUrl();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertNotNull(headerArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(headerList26);
        org.junit.Assert.assertNull(typedOutput27);
        org.junit.Assert.assertNull(typedOutput28);
        org.junit.Assert.assertNotNull(headerList29);
        org.junit.Assert.assertNotNull(headerList33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertNull(converter35);
    }

    @Test
    public void test0484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0484");
        retrofit.converter.Converter converter4 = null;
        retrofit.RequestBuilder requestBuilder5 = new retrofit.RequestBuilder(converter4);
        java.util.List<retrofit.client.Header> headerList6 = requestBuilder5.headers;
        retrofit.client.Header[] headerArray11 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList12 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList12, headerArray11);
        retrofit.mime.TypedOutput typedOutput14 = null;
        retrofit.client.Request request15 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList12, typedOutput14);
        java.util.List<retrofit.client.Header> headerList16 = request15.headers;
        java.lang.Object[] objArray18 = new java.lang.Object[] { true, (short) 1, request15, 0 };
        requestBuilder5.args = objArray18;
        retrofit.client.Header[] headerArray22 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList23 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList23, headerArray22);
        retrofit.mime.TypedOutput typedOutput25 = null;
        retrofit.client.Request request26 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList23, typedOutput25);
        java.util.List<retrofit.client.Header> headerList27 = request26.headers;
        requestBuilder5.setheaders(headerList27);
        retrofit.mime.TypedOutput typedOutput29 = null;
        retrofit.client.Request request30 = new retrofit.client.Request("hi!", "hi!", headerList27, typedOutput29);
        retrofit.mime.TypedOutput typedOutput31 = null;
        retrofit.client.Request request32 = new retrofit.client.Request("hi!", "", headerList27, typedOutput31);
        java.lang.String str33 = request32.getMethod();
        java.lang.String str34 = request32.getUrl();
        org.junit.Assert.assertNull(headerList6);
        org.junit.Assert.assertNotNull(headerArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(headerList16);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertNotNull(headerArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(headerList27);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
    }

    @Test
    public void test0485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0485");
        retrofit.client.Header[] headerArray8 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList9 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList9, headerArray8);
        retrofit.mime.TypedOutput typedOutput11 = null;
        retrofit.client.Request request12 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList9, typedOutput11);
        java.lang.String str13 = request12.url;
        java.util.List<retrofit.client.Header> headerList14 = request12.headers;
        retrofit.mime.TypedOutput typedOutput15 = request12.body;
        retrofit.mime.TypedOutput typedOutput16 = request12.body;
        java.util.List<retrofit.client.Header> headerList17 = request12.headers;
        retrofit.mime.TypedOutput typedOutput18 = null;
        retrofit.client.Request request19 = new retrofit.client.Request("hi!", "hi!", headerList17, typedOutput18);
        retrofit.mime.TypedOutput typedOutput20 = request19.body;
        java.util.List<retrofit.client.Header> headerList21 = request19.getHeaders();
        retrofit.mime.TypedOutput typedOutput22 = null;
        retrofit.client.Request request23 = new retrofit.client.Request("", "hi!", headerList21, typedOutput22);
        retrofit.mime.TypedOutput typedOutput24 = null;
        retrofit.client.Request request25 = new retrofit.client.Request("hi!", "hi!", headerList21, typedOutput24);
        java.util.List<retrofit.client.Header> headerList26 = request25.headers;
        java.lang.String str27 = request25.method;
        java.lang.String str28 = request25.url;
        org.junit.Assert.assertNotNull(headerArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(headerList14);
        org.junit.Assert.assertNull(typedOutput15);
        org.junit.Assert.assertNull(typedOutput16);
        org.junit.Assert.assertNotNull(headerList17);
        org.junit.Assert.assertNull(typedOutput20);
        org.junit.Assert.assertNotNull(headerList21);
        org.junit.Assert.assertNotNull(headerList26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
    }

    @Test
    public void test0486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0486");
        retrofit.client.Header[] headerArray12 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList13 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList13, headerArray12);
        retrofit.mime.TypedOutput typedOutput15 = null;
        retrofit.client.Request request16 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList13, typedOutput15);
        retrofit.mime.TypedOutput typedOutput17 = null;
        retrofit.client.Request request18 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList13, typedOutput17);
        retrofit.mime.TypedOutput typedOutput19 = null;
        retrofit.client.Request request20 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList13, typedOutput19);
        java.util.List<retrofit.client.Header> headerList21 = request20.getHeaders();
        java.util.List<retrofit.client.Header> headerList22 = request20.getHeaders();
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("", "hi!", headerList22, typedOutput23);
        retrofit.mime.TypedOutput typedOutput25 = null;
        retrofit.client.Request request26 = new retrofit.client.Request("hi!", "hi!", headerList22, typedOutput25);
        retrofit.mime.TypedOutput typedOutput27 = null;
        retrofit.client.Request request28 = new retrofit.client.Request("", "hi!", headerList22, typedOutput27);
        java.lang.String str29 = request28.method;
        org.junit.Assert.assertNotNull(headerArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(headerList21);
        org.junit.Assert.assertNotNull(headerList22);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
    }

    @Test
    public void test0487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0487");
        retrofit.client.Header[] headerArray2 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList3 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList3, headerArray2);
        retrofit.mime.TypedOutput typedOutput5 = null;
        retrofit.client.Request request6 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList3, typedOutput5);
        java.lang.String str7 = request6.getUrl();
        java.lang.String str8 = request6.getUrl();
        org.junit.Assert.assertNotNull(headerArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
    }

    @Test
    public void test0488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0488");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.lang.Object[] objArray2 = requestBuilder1.getargs();
        retrofit.converter.Converter converter3 = requestBuilder1.getconverter();
        retrofit.converter.Converter converter4 = null;
        retrofit.RequestBuilder requestBuilder5 = new retrofit.RequestBuilder(converter4);
        java.util.List<retrofit.client.Header> headerList6 = requestBuilder5.headers;
        retrofit.converter.Converter converter7 = null;
        retrofit.RequestBuilder requestBuilder8 = new retrofit.RequestBuilder(converter7);
        java.util.List<retrofit.client.Header> headerList9 = requestBuilder8.headers;
        retrofit.client.Header[] headerArray14 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList15 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList15, headerArray14);
        retrofit.mime.TypedOutput typedOutput17 = null;
        retrofit.client.Request request18 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList15, typedOutput17);
        java.util.List<retrofit.client.Header> headerList19 = request18.headers;
        java.lang.Object[] objArray21 = new java.lang.Object[] { true, (short) 1, request18, 0 };
        requestBuilder8.args = objArray21;
        requestBuilder5.setargs(objArray21);
        retrofit.RequestBuilder requestBuilder24 = requestBuilder1.args(objArray21);
        java.lang.Object[] objArray25 = requestBuilder1.args;
        java.util.List<retrofit.client.Header> headerList26 = null;
        requestBuilder1.setheaders(headerList26);
        retrofit.client.Header[] headerArray34 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList35 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList35, headerArray34);
        retrofit.mime.TypedOutput typedOutput37 = null;
        retrofit.client.Request request38 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList35, typedOutput37);
        java.lang.String str39 = request38.url;
        java.util.List<retrofit.client.Header> headerList40 = request38.headers;
        retrofit.mime.TypedOutput typedOutput41 = null;
        retrofit.client.Request request42 = new retrofit.client.Request("", "", headerList40, typedOutput41);
        retrofit.mime.TypedOutput typedOutput43 = request42.body;
        retrofit.mime.TypedOutput typedOutput44 = request42.getBody();
        java.util.List<retrofit.client.Header> headerList45 = request42.getHeaders();
        retrofit.mime.TypedOutput typedOutput46 = null;
        retrofit.client.Request request47 = new retrofit.client.Request("", "", headerList45, typedOutput46);
        retrofit.RequestBuilder requestBuilder48 = requestBuilder1.headers(headerList45);
        java.lang.Object[] objArray49 = requestBuilder48.getargs();
        org.junit.Assert.assertNull(objArray2);
        org.junit.Assert.assertNull(converter3);
        org.junit.Assert.assertNull(headerList6);
        org.junit.Assert.assertNull(headerList9);
        org.junit.Assert.assertNotNull(headerArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(headerList19);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertNotNull(requestBuilder24);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertNotNull(headerArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(headerList40);
        org.junit.Assert.assertNull(typedOutput43);
        org.junit.Assert.assertNull(typedOutput44);
        org.junit.Assert.assertNotNull(headerList45);
        org.junit.Assert.assertNotNull(requestBuilder48);
        org.junit.Assert.assertNotNull(objArray49);
    }

    @Test
    public void test0489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0489");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        java.util.List<retrofit.client.Header> headerList12 = request11.headers;
        java.lang.Object[] objArray14 = new java.lang.Object[] { true, (short) 1, request11, 0 };
        requestBuilder1.args = objArray14;
        retrofit.converter.Converter converter16 = requestBuilder1.converter;
        java.lang.Object[] objArray17 = requestBuilder1.args;
        retrofit.client.Header[] headerArray20 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList21 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList21, headerArray20);
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList21, typedOutput23);
        java.lang.String str25 = request24.url;
        java.util.List<retrofit.client.Header> headerList26 = request24.headers;
        retrofit.mime.TypedOutput typedOutput27 = request24.body;
        retrofit.mime.TypedOutput typedOutput28 = request24.body;
        java.util.List<retrofit.client.Header> headerList29 = request24.headers;
        requestBuilder1.setheaders(headerList29);
        requestBuilder1.setapiUrl("hi!");
        retrofit.converter.Converter converter33 = null;
        retrofit.RequestBuilder requestBuilder34 = new retrofit.RequestBuilder(converter33);
        java.lang.Object[] objArray35 = requestBuilder34.getargs();
        retrofit.converter.Converter converter36 = requestBuilder34.getconverter();
        retrofit.client.Header[] headerArray43 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList44 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList44, headerArray43);
        retrofit.mime.TypedOutput typedOutput46 = null;
        retrofit.client.Request request47 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList44, typedOutput46);
        retrofit.mime.TypedOutput typedOutput48 = null;
        retrofit.client.Request request49 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList44, typedOutput48);
        retrofit.mime.TypedOutput typedOutput50 = null;
        retrofit.client.Request request51 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList44, typedOutput50);
        java.util.List<retrofit.client.Header> headerList52 = request51.getHeaders();
        requestBuilder34.setheaders(headerList52);
        retrofit.RequestBuilder requestBuilder54 = requestBuilder1.headers(headerList52);
        java.lang.String str55 = requestBuilder1.getapiUrl();
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertNotNull(headerArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(headerList26);
        org.junit.Assert.assertNull(typedOutput27);
        org.junit.Assert.assertNull(typedOutput28);
        org.junit.Assert.assertNotNull(headerList29);
        org.junit.Assert.assertNull(objArray35);
        org.junit.Assert.assertNull(converter36);
        org.junit.Assert.assertNotNull(headerArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(headerList52);
        org.junit.Assert.assertNotNull(requestBuilder54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hi!" + "'", str55, "hi!");
    }

    @Test
    public void test0490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0490");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        java.util.List<retrofit.client.Header> headerList12 = request11.headers;
        java.lang.Object[] objArray14 = new java.lang.Object[] { true, (short) 1, request11, 0 };
        requestBuilder1.args = objArray14;
        retrofit.converter.Converter converter16 = requestBuilder1.converter;
        java.lang.Object[] objArray17 = requestBuilder1.args;
        retrofit.converter.Converter converter18 = null;
        retrofit.RequestBuilder requestBuilder19 = new retrofit.RequestBuilder(converter18);
        java.util.List<retrofit.client.Header> headerList20 = requestBuilder19.headers;
        retrofit.client.Header[] headerArray25 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList26 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList26, headerArray25);
        retrofit.mime.TypedOutput typedOutput28 = null;
        retrofit.client.Request request29 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList26, typedOutput28);
        java.util.List<retrofit.client.Header> headerList30 = request29.headers;
        java.lang.Object[] objArray32 = new java.lang.Object[] { true, (short) 1, request29, 0 };
        requestBuilder19.args = objArray32;
        retrofit.converter.Converter converter34 = requestBuilder19.converter;
        java.lang.Object[] objArray35 = requestBuilder19.args;
        requestBuilder1.setargs(objArray35);
        java.util.List<retrofit.client.Header> headerList37 = requestBuilder1.headers;
        java.util.List<retrofit.client.Header> headerList38 = requestBuilder1.getheaders();
        java.lang.Object[] objArray39 = requestBuilder1.args;
        retrofit.RequestBuilder requestBuilder41 = requestBuilder1.apiUrl("");
        java.util.List<retrofit.client.Header> headerList42 = requestBuilder41.headers;
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNull(converter16);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertNull(headerList20);
        org.junit.Assert.assertNotNull(headerArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(headerList30);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertNull(converter34);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertNull(headerList37);
        org.junit.Assert.assertNull(headerList38);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertNotNull(requestBuilder41);
        org.junit.Assert.assertNull(headerList42);
    }

    @Test
    public void test0491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0491");
        retrofit.client.Header[] headerArray4 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList5 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList5, headerArray4);
        retrofit.mime.TypedOutput typedOutput7 = null;
        retrofit.client.Request request8 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList5, typedOutput7);
        java.lang.String str9 = request8.url;
        java.util.List<retrofit.client.Header> headerList10 = request8.headers;
        retrofit.mime.TypedOutput typedOutput11 = request8.body;
        retrofit.mime.TypedOutput typedOutput12 = request8.body;
        java.util.List<retrofit.client.Header> headerList13 = request8.headers;
        retrofit.mime.TypedOutput typedOutput14 = null;
        retrofit.client.Request request15 = new retrofit.client.Request("", "hi!", headerList13, typedOutput14);
        java.lang.String str16 = request15.method;
        java.lang.String str17 = request15.getMethod();
        retrofit.mime.TypedOutput typedOutput18 = request15.body;
        java.util.List<retrofit.client.Header> headerList19 = request15.getHeaders();
        java.util.List<retrofit.client.Header> headerList20 = request15.getHeaders();
        org.junit.Assert.assertNotNull(headerArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(headerList10);
        org.junit.Assert.assertNull(typedOutput11);
        org.junit.Assert.assertNull(typedOutput12);
        org.junit.Assert.assertNotNull(headerList13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNull(typedOutput18);
        org.junit.Assert.assertNotNull(headerList19);
        org.junit.Assert.assertNotNull(headerList20);
    }

    @Test
    public void test0492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0492");
        retrofit.client.Header[] headerArray6 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList7 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList7, headerArray6);
        retrofit.mime.TypedOutput typedOutput9 = null;
        retrofit.client.Request request10 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList7, typedOutput9);
        java.lang.String str11 = request10.url;
        java.util.List<retrofit.client.Header> headerList12 = request10.headers;
        retrofit.mime.TypedOutput typedOutput13 = request10.body;
        retrofit.mime.TypedOutput typedOutput14 = request10.body;
        java.util.List<retrofit.client.Header> headerList15 = request10.headers;
        retrofit.mime.TypedOutput typedOutput16 = null;
        retrofit.client.Request request17 = new retrofit.client.Request("hi!", "hi!", headerList15, typedOutput16);
        retrofit.mime.TypedOutput typedOutput18 = request17.body;
        java.util.List<retrofit.client.Header> headerList19 = request17.getHeaders();
        retrofit.mime.TypedOutput typedOutput20 = null;
        retrofit.client.Request request21 = new retrofit.client.Request("", "hi!", headerList19, typedOutput20);
        java.util.List<retrofit.client.Header> headerList22 = request21.headers;
        retrofit.mime.TypedOutput typedOutput23 = request21.body;
        java.lang.String str24 = request21.url;
        java.lang.String str25 = request21.method;
        org.junit.Assert.assertNotNull(headerArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNull(typedOutput13);
        org.junit.Assert.assertNull(typedOutput14);
        org.junit.Assert.assertNotNull(headerList15);
        org.junit.Assert.assertNull(typedOutput18);
        org.junit.Assert.assertNotNull(headerList19);
        org.junit.Assert.assertNotNull(headerList22);
        org.junit.Assert.assertNull(typedOutput23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
    }

    @Test
    public void test0493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0493");
        retrofit.client.Header[] headerArray6 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList7 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList7, headerArray6);
        retrofit.mime.TypedOutput typedOutput9 = null;
        retrofit.client.Request request10 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList7, typedOutput9);
        retrofit.mime.TypedOutput typedOutput11 = null;
        retrofit.client.Request request12 = new retrofit.client.Request("", "hi!", (java.util.List<retrofit.client.Header>) headerList7, typedOutput11);
        retrofit.mime.TypedOutput typedOutput13 = null;
        retrofit.client.Request request14 = new retrofit.client.Request("hi!", "", (java.util.List<retrofit.client.Header>) headerList7, typedOutput13);
        java.lang.String str15 = request14.method;
        java.util.List<retrofit.client.Header> headerList16 = request14.headers;
        java.util.List<retrofit.client.Header> headerList17 = request14.getHeaders();
        java.lang.Class<?> wildcardClass18 = request14.getClass();
        org.junit.Assert.assertNotNull(headerArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNotNull(headerList16);
        org.junit.Assert.assertNotNull(headerList17);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0494");
        retrofit.converter.Converter converter0 = null;
        retrofit.RequestBuilder requestBuilder1 = new retrofit.RequestBuilder(converter0);
        java.util.List<retrofit.client.Header> headerList2 = requestBuilder1.headers;
        retrofit.client.Header[] headerArray7 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList8 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList8, headerArray7);
        retrofit.mime.TypedOutput typedOutput10 = null;
        retrofit.client.Request request11 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList8, typedOutput10);
        java.util.List<retrofit.client.Header> headerList12 = request11.headers;
        java.lang.Object[] objArray14 = new java.lang.Object[] { true, (short) 1, request11, 0 };
        requestBuilder1.args = objArray14;
        retrofit.client.Header[] headerArray18 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList19 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList19, headerArray18);
        retrofit.mime.TypedOutput typedOutput21 = null;
        retrofit.client.Request request22 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList19, typedOutput21);
        java.util.List<retrofit.client.Header> headerList23 = request22.headers;
        requestBuilder1.setheaders(headerList23);
        java.lang.Object[] objArray25 = requestBuilder1.getargs();
        requestBuilder1.apiUrl = "";
        java.lang.Object[] objArray28 = requestBuilder1.getargs();
        // The following exception was thrown during execution in test generation
        try {
            retrofit.client.Request request29 = requestBuilder1.build();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(headerList2);
        org.junit.Assert.assertNotNull(headerArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertNotNull(headerArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(headerList23);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertNotNull(objArray28);
    }

    @Test
    public void test0495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0495");
        retrofit.client.Header[] headerArray6 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList7 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList7, headerArray6);
        retrofit.mime.TypedOutput typedOutput9 = null;
        retrofit.client.Request request10 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList7, typedOutput9);
        java.lang.String str11 = request10.url;
        java.util.List<retrofit.client.Header> headerList12 = request10.headers;
        retrofit.mime.TypedOutput typedOutput13 = request10.body;
        retrofit.mime.TypedOutput typedOutput14 = request10.body;
        java.util.List<retrofit.client.Header> headerList15 = request10.headers;
        retrofit.mime.TypedOutput typedOutput16 = null;
        retrofit.client.Request request17 = new retrofit.client.Request("hi!", "hi!", headerList15, typedOutput16);
        java.lang.String str18 = request17.url;
        java.lang.String str19 = request17.getMethod();
        retrofit.mime.TypedOutput typedOutput20 = request17.body;
        java.util.List<retrofit.client.Header> headerList21 = request17.headers;
        retrofit.mime.TypedOutput typedOutput22 = null;
        retrofit.client.Request request23 = new retrofit.client.Request("", "", headerList21, typedOutput22);
        java.lang.String str24 = request23.method;
        retrofit.mime.TypedOutput typedOutput25 = request23.body;
        java.lang.String str26 = request23.getUrl();
        retrofit.mime.TypedOutput typedOutput27 = request23.body;
        retrofit.mime.TypedOutput typedOutput28 = request23.getBody();
        org.junit.Assert.assertNotNull(headerArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNull(typedOutput13);
        org.junit.Assert.assertNull(typedOutput14);
        org.junit.Assert.assertNotNull(headerList15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNull(typedOutput20);
        org.junit.Assert.assertNotNull(headerList21);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNull(typedOutput25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNull(typedOutput27);
        org.junit.Assert.assertNull(typedOutput28);
    }

    @Test
    public void test0496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0496");
        retrofit.converter.Converter converter2 = null;
        retrofit.RequestBuilder requestBuilder3 = new retrofit.RequestBuilder(converter2);
        java.util.List<retrofit.client.Header> headerList4 = requestBuilder3.headers;
        retrofit.client.Header[] headerArray9 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList10 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList10, headerArray9);
        retrofit.mime.TypedOutput typedOutput12 = null;
        retrofit.client.Request request13 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList10, typedOutput12);
        java.util.List<retrofit.client.Header> headerList14 = request13.headers;
        java.lang.Object[] objArray16 = new java.lang.Object[] { true, (short) 1, request13, 0 };
        requestBuilder3.args = objArray16;
        retrofit.client.Header[] headerArray20 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList21 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList21, headerArray20);
        retrofit.mime.TypedOutput typedOutput23 = null;
        retrofit.client.Request request24 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList21, typedOutput23);
        java.util.List<retrofit.client.Header> headerList25 = request24.headers;
        requestBuilder3.setheaders(headerList25);
        retrofit.mime.TypedOutput typedOutput27 = null;
        retrofit.client.Request request28 = new retrofit.client.Request("hi!", "hi!", headerList25, typedOutput27);
        java.lang.String str29 = request28.getUrl();
        retrofit.mime.TypedOutput typedOutput30 = request28.getBody();
        java.lang.String str31 = request28.url;
        retrofit.mime.TypedOutput typedOutput32 = request28.getBody();
        java.util.List<retrofit.client.Header> headerList33 = request28.getHeaders();
        java.lang.String str34 = request28.url;
        java.lang.String str35 = request28.method;
        org.junit.Assert.assertNull(headerList4);
        org.junit.Assert.assertNotNull(headerArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(headerList14);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertNotNull(headerArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(headerList25);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertNull(typedOutput30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertNull(typedOutput32);
        org.junit.Assert.assertNotNull(headerList33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
    }

    @Test
    public void test0497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0497");
        retrofit.client.Header[] headerArray4 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList5 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList5, headerArray4);
        retrofit.mime.TypedOutput typedOutput7 = null;
        retrofit.client.Request request8 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList5, typedOutput7);
        java.lang.String str9 = request8.url;
        java.util.List<retrofit.client.Header> headerList10 = request8.getHeaders();
        retrofit.mime.TypedOutput typedOutput11 = null;
        retrofit.client.Request request12 = new retrofit.client.Request("hi!", "hi!", headerList10, typedOutput11);
        java.lang.String str13 = request12.getMethod();
        org.junit.Assert.assertNotNull(headerArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(headerList10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
    }

    @Test
    public void test0498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0498");
        retrofit.client.Header[] headerArray4 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList5 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList5, headerArray4);
        retrofit.mime.TypedOutput typedOutput7 = null;
        retrofit.client.Request request8 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList5, typedOutput7);
        java.lang.String str9 = request8.url;
        java.util.List<retrofit.client.Header> headerList10 = request8.headers;
        retrofit.mime.TypedOutput typedOutput11 = request8.body;
        retrofit.mime.TypedOutput typedOutput12 = request8.body;
        java.util.List<retrofit.client.Header> headerList13 = request8.headers;
        retrofit.mime.TypedOutput typedOutput14 = null;
        retrofit.client.Request request15 = new retrofit.client.Request("hi!", "hi!", headerList13, typedOutput14);
        java.lang.String str16 = request15.url;
        java.lang.String str17 = request15.getMethod();
        retrofit.mime.TypedOutput typedOutput18 = request15.body;
        retrofit.mime.TypedOutput typedOutput19 = request15.getBody();
        java.lang.String str20 = request15.getMethod();
        retrofit.mime.TypedOutput typedOutput21 = request15.body;
        retrofit.mime.TypedOutput typedOutput22 = request15.body;
        java.lang.String str23 = request15.method;
        java.lang.String str24 = request15.url;
        java.util.List<retrofit.client.Header> headerList25 = request15.headers;
        java.util.List<retrofit.client.Header> headerList26 = request15.getHeaders();
        org.junit.Assert.assertNotNull(headerArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(headerList10);
        org.junit.Assert.assertNull(typedOutput11);
        org.junit.Assert.assertNull(typedOutput12);
        org.junit.Assert.assertNotNull(headerList13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNull(typedOutput18);
        org.junit.Assert.assertNull(typedOutput19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertNull(typedOutput21);
        org.junit.Assert.assertNull(typedOutput22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(headerList25);
        org.junit.Assert.assertNotNull(headerList26);
    }

    @Test
    public void test0499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0499");
        retrofit.client.Header[] headerArray8 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList9 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList9, headerArray8);
        retrofit.mime.TypedOutput typedOutput11 = null;
        retrofit.client.Request request12 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList9, typedOutput11);
        java.lang.String str13 = request12.url;
        java.util.List<retrofit.client.Header> headerList14 = request12.headers;
        retrofit.mime.TypedOutput typedOutput15 = request12.body;
        retrofit.mime.TypedOutput typedOutput16 = request12.body;
        java.util.List<retrofit.client.Header> headerList17 = request12.headers;
        retrofit.mime.TypedOutput typedOutput18 = null;
        retrofit.client.Request request19 = new retrofit.client.Request("hi!", "hi!", headerList17, typedOutput18);
        retrofit.mime.TypedOutput typedOutput20 = null;
        retrofit.client.Request request21 = new retrofit.client.Request("hi!", "", headerList17, typedOutput20);
        retrofit.mime.TypedOutput typedOutput22 = request21.body;
        java.util.List<retrofit.client.Header> headerList23 = request21.getHeaders();
        retrofit.mime.TypedOutput typedOutput24 = null;
        retrofit.client.Request request25 = new retrofit.client.Request("", "hi!", headerList23, typedOutput24);
        java.lang.String str26 = request25.url;
        retrofit.mime.TypedOutput typedOutput27 = request25.body;
        org.junit.Assert.assertNotNull(headerArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(headerList14);
        org.junit.Assert.assertNull(typedOutput15);
        org.junit.Assert.assertNull(typedOutput16);
        org.junit.Assert.assertNotNull(headerList17);
        org.junit.Assert.assertNull(typedOutput22);
        org.junit.Assert.assertNotNull(headerList23);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
        org.junit.Assert.assertNull(typedOutput27);
    }

    @Test
    public void test0500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0500");
        retrofit.client.Header[] headerArray6 = new retrofit.client.Header[] {};
        java.util.ArrayList<retrofit.client.Header> headerList7 = new java.util.ArrayList<retrofit.client.Header>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<retrofit.client.Header>) headerList7, headerArray6);
        retrofit.mime.TypedOutput typedOutput9 = null;
        retrofit.client.Request request10 = new retrofit.client.Request("", "", (java.util.List<retrofit.client.Header>) headerList7, typedOutput9);
        java.lang.String str11 = request10.url;
        java.util.List<retrofit.client.Header> headerList12 = request10.headers;
        retrofit.mime.TypedOutput typedOutput13 = request10.body;
        retrofit.mime.TypedOutput typedOutput14 = request10.body;
        java.util.List<retrofit.client.Header> headerList15 = request10.headers;
        retrofit.mime.TypedOutput typedOutput16 = null;
        retrofit.client.Request request17 = new retrofit.client.Request("hi!", "hi!", headerList15, typedOutput16);
        retrofit.mime.TypedOutput typedOutput18 = request17.body;
        java.util.List<retrofit.client.Header> headerList19 = request17.getHeaders();
        retrofit.mime.TypedOutput typedOutput20 = null;
        retrofit.client.Request request21 = new retrofit.client.Request("", "hi!", headerList19, typedOutput20);
        java.util.List<retrofit.client.Header> headerList22 = request21.headers;
        retrofit.mime.TypedOutput typedOutput23 = request21.body;
        java.util.List<retrofit.client.Header> headerList24 = request21.headers;
        java.lang.String str25 = request21.getMethod();
        java.lang.String str26 = request21.method;
        java.lang.String str27 = request21.method;
        java.util.List<retrofit.client.Header> headerList28 = request21.getHeaders();
        java.lang.String str29 = request21.getUrl();
        java.util.List<retrofit.client.Header> headerList30 = request21.headers;
        java.lang.String str31 = request21.getMethod();
        org.junit.Assert.assertNotNull(headerArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(headerList12);
        org.junit.Assert.assertNull(typedOutput13);
        org.junit.Assert.assertNull(typedOutput14);
        org.junit.Assert.assertNotNull(headerList15);
        org.junit.Assert.assertNull(typedOutput18);
        org.junit.Assert.assertNotNull(headerList19);
        org.junit.Assert.assertNotNull(headerList22);
        org.junit.Assert.assertNull(typedOutput23);
        org.junit.Assert.assertNotNull(headerList24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(headerList28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertNotNull(headerList30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
    }
}

