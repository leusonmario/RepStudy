/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 02 06:24:25 GMT 2021
 */

package retrofit;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import retrofit.RequestBuilder;
import retrofit.RestMethodInfo;
import retrofit.client.Header;
import retrofit.client.Request;
import retrofit.converter.Converter;
import retrofit.converter.GsonConverter;
import retrofit.mime.FormUrlEncodedTypedOutput;
import retrofit.mime.MultipartTypedOutput;
import retrofit.mime.TypedInput;
import retrofit.mime.TypedOutput;
import retrofit.mime.TypedString;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RequestBuilder_ESTest extends RequestBuilder_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      Gson gson0 = null;
      GsonConverter gsonConverter0 = new GsonConverter(gson0);
      assertNotNull(gsonConverter0);
      
      RequestBuilder requestBuilder0 = new RequestBuilder(gsonConverter0);
      assertNotNull(requestBuilder0);
      assertNull(requestBuilder0.getapiUrl());
      
      RequestBuilder requestBuilder1 = requestBuilder0.methodInfo(requestBuilder0.methodInfo);
      assertNotNull(requestBuilder1);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      
      RestMethodInfo restMethodInfo0 = requestBuilder1.getmethodInfo();
      assertNull(restMethodInfo0);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      
      GsonConverter gsonConverter0 = new GsonConverter(gson0);
      assertNotNull(gsonConverter0);
      
      RequestBuilder requestBuilder0 = new RequestBuilder(gsonConverter0);
      assertNotNull(requestBuilder0);
      assertNull(requestBuilder0.getapiUrl());
      
      String string0 = requestBuilder0.getapiUrl();
      assertNull(string0);
      assertNull(requestBuilder0.getapiUrl());
      
      requestBuilder0.setheaders(requestBuilder0.headers);
      assertNull(requestBuilder0.getapiUrl());
      
      // Undeclared exception!
      try { 
        requestBuilder0.buildBody();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RequestBuilder", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      
      GsonConverter gsonConverter0 = new GsonConverter(gson0);
      assertNotNull(gsonConverter0);
      
      RequestBuilder requestBuilder0 = new RequestBuilder(gsonConverter0);
      assertNotNull(requestBuilder0);
      assertNull(requestBuilder0.getapiUrl());
      
      requestBuilder0.setargs(requestBuilder0.args);
      assertNull(requestBuilder0.getapiUrl());
      
      Object[] objectArray0 = requestBuilder0.getargs();
      assertNull(objectArray0);
      assertNull(requestBuilder0.getapiUrl());
      
      String string0 = "@Part po9Umeters can only )e used with mult5part enconing.";
      requestBuilder0.setapiUrl(string0);
      assertEquals("@Part po9Umeters can only )e used with mult5part enconing.", requestBuilder0.getapiUrl());
      
      List<Header> list0 = requestBuilder0.getheaders();
      assertNull(list0);
      assertEquals("@Part po9Umeters can only )e used with mult5part enconing.", requestBuilder0.getapiUrl());
      
      requestBuilder0.setmethodInfo(requestBuilder0.methodInfo);
      assertEquals("@Part po9Umeters can only )e used with mult5part enconing.", requestBuilder0.getapiUrl());
      
      // Undeclared exception!
      try { 
        requestBuilder0.build();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RequestBuilder", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      Gson gson0 = null;
      GsonConverter gsonConverter0 = new GsonConverter(gson0);
      assertNotNull(gsonConverter0);
      
      RequestBuilder requestBuilder0 = new RequestBuilder(gsonConverter0);
      assertNotNull(requestBuilder0);
      assertNull(requestBuilder0.getapiUrl());
      
      Converter converter0 = requestBuilder0.getconverter();
      assertNotNull(converter0);
      assertNull(requestBuilder0.getapiUrl());
      assertSame(gsonConverter0, converter0);
      assertSame(converter0, gsonConverter0);
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      GsonConverter gsonConverter0 = null;
      RequestBuilder requestBuilder0 = new RequestBuilder(gsonConverter0);
      assertNotNull(requestBuilder0);
      assertNull(requestBuilder0.getapiUrl());
      
      String string0 = "Body mnstfnot be null./";
      RequestBuilder requestBuilder1 = requestBuilder0.apiUrl(string0);
      assertNotNull(requestBuilder1);
      assertEquals("Body mnstfnot be null./", requestBuilder0.getapiUrl());
      assertEquals("Body mnstfnot be null./", requestBuilder1.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      
      RequestBuilder requestBuilder2 = requestBuilder0.args(requestBuilder0.args);
      assertNotNull(requestBuilder2);
      assertEquals("Body mnstfnot be null./", requestBuilder0.getapiUrl());
      assertEquals("Body mnstfnot be null./", requestBuilder2.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder1);
      
      RequestBuilder requestBuilder3 = requestBuilder1.headers(requestBuilder0.headers);
      assertNotNull(requestBuilder3);
      assertEquals("Body mnstfnot be null./", requestBuilder0.getapiUrl());
      assertEquals("Body mnstfnot be null./", requestBuilder1.getapiUrl());
      assertEquals("Body mnstfnot be null./", requestBuilder3.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder3);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder3, requestBuilder2);
      assertSame(requestBuilder3, requestBuilder0);
      assertSame(requestBuilder3, requestBuilder1);
      
      // Undeclared exception!
      try { 
        requestBuilder1.build();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RequestBuilder", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      Converter converter0 = null;
      RequestBuilder requestBuilder0 = new RequestBuilder(converter0);
      assertNotNull(requestBuilder0);
      assertNull(requestBuilder0.getapiUrl());
      
      String string0 = "";
      RequestBuilder requestBuilder1 = requestBuilder0.apiUrl(string0);
      assertNotNull(requestBuilder1);
      assertEquals("", requestBuilder0.getapiUrl());
      assertEquals("", requestBuilder1.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      
      RequestBuilder requestBuilder2 = requestBuilder1.methodInfo(requestBuilder0.methodInfo);
      assertNotNull(requestBuilder2);
      assertEquals("", requestBuilder0.getapiUrl());
      assertEquals("", requestBuilder1.getapiUrl());
      assertEquals("", requestBuilder2.getapiUrl());
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder0);
      
      RequestBuilder requestBuilder3 = requestBuilder2.args(requestBuilder0.args);
      assertNotNull(requestBuilder3);
      assertEquals("", requestBuilder0.getapiUrl());
      assertEquals("", requestBuilder1.getapiUrl());
      assertEquals("", requestBuilder2.getapiUrl());
      assertEquals("", requestBuilder3.getapiUrl());
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder3);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder3);
      assertSame(requestBuilder3, requestBuilder0);
      assertSame(requestBuilder3, requestBuilder2);
      assertSame(requestBuilder3, requestBuilder1);
      
      // Undeclared exception!
      try { 
        requestBuilder3.buildBody();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RequestBuilder", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      
      GsonConverter gsonConverter0 = new GsonConverter(gson0);
      assertNotNull(gsonConverter0);
      
      RequestBuilder requestBuilder0 = new RequestBuilder(gsonConverter0);
      assertNotNull(requestBuilder0);
      assertNull(requestBuilder0.getapiUrl());
      
      List<Header> list0 = null;
      RequestBuilder requestBuilder1 = requestBuilder0.headers(list0);
      assertNotNull(requestBuilder1);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      
      List<Header> list1 = requestBuilder1.getheaders();
      assertNull(list1);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      
      GsonConverter gsonConverter0 = new GsonConverter(gson0);
      assertNotNull(gsonConverter0);
      
      RequestBuilder requestBuilder0 = new RequestBuilder(gsonConverter0);
      assertNotNull(requestBuilder0);
      assertNull(requestBuilder0.getapiUrl());
      
      Object[] objectArray0 = requestBuilder0.getargs();
      assertNull(objectArray0);
      assertNull(requestBuilder0.getapiUrl());
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      
      GsonConverter gsonConverter0 = new GsonConverter(gson0);
      assertNotNull(gsonConverter0);
      
      RequestBuilder requestBuilder0 = new RequestBuilder(gsonConverter0);
      assertNotNull(requestBuilder0);
      assertNull(requestBuilder0.getapiUrl());
      
      // Undeclared exception!
      try { 
        requestBuilder0.buildBody();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RequestBuilder", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      
      GsonConverter gsonConverter0 = new GsonConverter(gson0);
      assertNotNull(gsonConverter0);
      
      RequestBuilder requestBuilder0 = new RequestBuilder(gsonConverter0);
      assertNotNull(requestBuilder0);
      assertNull(requestBuilder0.getapiUrl());
      
      Object[] objectArray0 = new Object[0];
      RequestBuilder requestBuilder1 = requestBuilder0.args(objectArray0);
      assertNotNull(requestBuilder1);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertEquals(0, objectArray0.length);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      
      List<Header> list0 = requestBuilder1.getheaders();
      assertNull(list0);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertEquals(0, objectArray0.length);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      Converter converter0 = null;
      RequestBuilder requestBuilder0 = new RequestBuilder(converter0);
      assertNotNull(requestBuilder0);
      assertNull(requestBuilder0.getapiUrl());
      
      String string0 = "[SOP[`nO)jaXR=]dX4D";
      RequestBuilder requestBuilder1 = requestBuilder0.apiUrl(string0);
      assertNotNull(requestBuilder1);
      assertEquals("[SOP[`nO)jaXR=]dX4D", requestBuilder0.getapiUrl());
      assertEquals("[SOP[`nO)jaXR=]dX4D", requestBuilder1.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      
      RequestBuilder requestBuilder2 = requestBuilder1.headers(requestBuilder0.headers);
      assertNotNull(requestBuilder2);
      assertEquals("[SOP[`nO)jaXR=]dX4D", requestBuilder0.getapiUrl());
      assertEquals("[SOP[`nO)jaXR=]dX4D", requestBuilder1.getapiUrl());
      assertEquals("[SOP[`nO)jaXR=]dX4D", requestBuilder2.getapiUrl());
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder0);
      
      // Undeclared exception!
      try { 
        requestBuilder2.build();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RequestBuilder", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      
      GsonConverter gsonConverter0 = new GsonConverter(gson0);
      assertNotNull(gsonConverter0);
      
      RequestBuilder requestBuilder0 = new RequestBuilder(gsonConverter0);
      assertNotNull(requestBuilder0);
      assertNull(requestBuilder0.getapiUrl());
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) gsonConverter0;
      objectArray0[1] = (Object) requestBuilder0;
      objectArray0[2] = (Object) gson0;
      objectArray0[3] = (Object) gson0;
      objectArray0[4] = (Object) gson0;
      objectArray0[5] = (Object) requestBuilder0;
      objectArray0[6] = (Object) requestBuilder0;
      // Undeclared exception!
      try { 
        requestBuilder0.buildRelativeUrl();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RequestBuilder", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      
      GsonConverter gsonConverter0 = new GsonConverter(gson0);
      assertNotNull(gsonConverter0);
      
      RequestBuilder requestBuilder0 = new RequestBuilder(gsonConverter0);
      assertNotNull(requestBuilder0);
      assertNull(requestBuilder0.getapiUrl());
      
      Object[] objectArray0 = new Object[0];
      RequestBuilder requestBuilder1 = requestBuilder0.args(objectArray0);
      assertNotNull(requestBuilder1);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertEquals(0, objectArray0.length);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      
      RequestBuilder requestBuilder2 = requestBuilder1.headers(requestBuilder0.headers);
      assertNotNull(requestBuilder2);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertNull(requestBuilder2.getapiUrl());
      assertEquals(0, objectArray0.length);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder1);
      
      // Undeclared exception!
      try { 
        requestBuilder2.build();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      
      GsonConverter gsonConverter0 = new GsonConverter(gson0);
      assertNotNull(gsonConverter0);
      
      RequestBuilder requestBuilder0 = new RequestBuilder(gsonConverter0);
      assertNotNull(requestBuilder0);
      assertNull(requestBuilder0.getapiUrl());
      
      RestMethodInfo restMethodInfo0 = requestBuilder0.getmethodInfo();
      assertNull(restMethodInfo0);
      assertNull(requestBuilder0.getapiUrl());
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      
      GsonConverter gsonConverter0 = new GsonConverter(gson0);
      assertNotNull(gsonConverter0);
      
      RequestBuilder requestBuilder0 = new RequestBuilder(gsonConverter0);
      assertNotNull(requestBuilder0);
      assertNull(requestBuilder0.getapiUrl());
      
      String string0 = ":";
      RequestBuilder requestBuilder1 = requestBuilder0.apiUrl(string0);
      assertNotNull(requestBuilder1);
      assertEquals(":", requestBuilder0.getapiUrl());
      assertEquals(":", requestBuilder1.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      RequestBuilder requestBuilder2 = requestBuilder1.methodInfo(requestBuilder0.methodInfo);
      assertNotNull(requestBuilder2);
      assertEquals(":", requestBuilder0.getapiUrl());
      assertEquals(":", requestBuilder1.getapiUrl());
      assertEquals(":", requestBuilder2.getapiUrl());
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder0);
      
      RequestBuilder requestBuilder3 = requestBuilder2.args(requestBuilder1.args);
      assertNotNull(requestBuilder3);
      assertEquals(":", requestBuilder0.getapiUrl());
      assertEquals(":", requestBuilder1.getapiUrl());
      assertEquals(":", requestBuilder2.getapiUrl());
      assertEquals(":", requestBuilder3.getapiUrl());
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder3);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder3);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder3, requestBuilder1);
      assertSame(requestBuilder3, requestBuilder2);
      assertSame(requestBuilder3, requestBuilder0);
      
      requestBuilder3.setapiUrl(requestBuilder0.apiUrl);
      assertEquals(":", requestBuilder0.getapiUrl());
      assertEquals(":", requestBuilder1.getapiUrl());
      assertEquals(":", requestBuilder2.getapiUrl());
      assertEquals(":", requestBuilder3.getapiUrl());
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder3);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder3);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder3, requestBuilder1);
      assertSame(requestBuilder3, requestBuilder2);
      assertSame(requestBuilder3, requestBuilder0);
      
      RequestBuilder requestBuilder4 = requestBuilder3.headers(requestBuilder1.headers);
      assertNotNull(requestBuilder4);
      assertEquals(":", requestBuilder0.getapiUrl());
      assertEquals(":", requestBuilder1.getapiUrl());
      assertEquals(":", requestBuilder2.getapiUrl());
      assertEquals(":", requestBuilder3.getapiUrl());
      assertEquals(":", requestBuilder4.getapiUrl());
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder0, requestBuilder4);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder4);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder3);
      assertSame(requestBuilder2, requestBuilder4);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder3);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder3, requestBuilder1);
      assertSame(requestBuilder3, requestBuilder2);
      assertSame(requestBuilder3, requestBuilder4);
      assertSame(requestBuilder3, requestBuilder0);
      assertSame(requestBuilder4, requestBuilder2);
      assertSame(requestBuilder4, requestBuilder3);
      assertSame(requestBuilder4, requestBuilder1);
      assertSame(requestBuilder4, requestBuilder0);
      
      // Undeclared exception!
      try { 
        requestBuilder4.buildRelativeUrl();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RequestBuilder", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      
      GsonConverter gsonConverter0 = new GsonConverter(gson0);
      assertNotNull(gsonConverter0);
      
      RequestBuilder requestBuilder0 = new RequestBuilder(gsonConverter0);
      assertNotNull(requestBuilder0);
      assertNull(requestBuilder0.getapiUrl());
      
      LinkedList<Header> linkedList0 = new LinkedList<Header>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      RequestBuilder requestBuilder1 = requestBuilder0.headers(linkedList0);
      assertNotNull(requestBuilder1);
      assertNull(requestBuilder0.getapiUrl());
      assertEquals(0, linkedList0.size());
      assertNull(requestBuilder1.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      
      RequestBuilder requestBuilder2 = requestBuilder1.apiUrl(requestBuilder0.apiUrl);
      assertNotNull(requestBuilder2);
      assertNull(requestBuilder0.getapiUrl());
      assertEquals(0, linkedList0.size());
      assertNull(requestBuilder1.getapiUrl());
      assertNull(requestBuilder2.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder0);
      
      RequestBuilder requestBuilder3 = requestBuilder2.args(requestBuilder0.args);
      assertNotNull(requestBuilder3);
      assertNull(requestBuilder0.getapiUrl());
      assertEquals(0, linkedList0.size());
      assertNull(requestBuilder1.getapiUrl());
      assertNull(requestBuilder2.getapiUrl());
      assertNull(requestBuilder3.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder3);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder3);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder3, requestBuilder0);
      assertSame(requestBuilder3, requestBuilder1);
      assertSame(requestBuilder3, requestBuilder2);
      
      RequestBuilder requestBuilder4 = requestBuilder3.methodInfo(requestBuilder1.methodInfo);
      assertNotNull(requestBuilder4);
      assertNull(requestBuilder0.getapiUrl());
      assertEquals(0, linkedList0.size());
      assertNull(requestBuilder1.getapiUrl());
      assertNull(requestBuilder2.getapiUrl());
      assertNull(requestBuilder3.getapiUrl());
      assertNull(requestBuilder4.getapiUrl());
      assertSame(requestBuilder0, requestBuilder4);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder4);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder3);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder2, requestBuilder4);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder3);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder3, requestBuilder0);
      assertSame(requestBuilder3, requestBuilder1);
      assertSame(requestBuilder3, requestBuilder4);
      assertSame(requestBuilder3, requestBuilder2);
      assertSame(requestBuilder4, requestBuilder2);
      assertSame(requestBuilder4, requestBuilder0);
      assertSame(requestBuilder4, requestBuilder1);
      assertSame(requestBuilder4, requestBuilder3);
      
      String string0 = "_uy<J-D;dZ0fWcNo<6e";
      RequestBuilder requestBuilder5 = requestBuilder4.apiUrl(string0);
      assertNotNull(requestBuilder5);
      assertEquals("_uy<J-D;dZ0fWcNo<6e", requestBuilder0.getapiUrl());
      assertEquals(0, linkedList0.size());
      assertEquals("_uy<J-D;dZ0fWcNo<6e", requestBuilder1.getapiUrl());
      assertEquals("_uy<J-D;dZ0fWcNo<6e", requestBuilder2.getapiUrl());
      assertEquals("_uy<J-D;dZ0fWcNo<6e", requestBuilder3.getapiUrl());
      assertEquals("_uy<J-D;dZ0fWcNo<6e", requestBuilder4.getapiUrl());
      assertEquals("_uy<J-D;dZ0fWcNo<6e", requestBuilder5.getapiUrl());
      assertSame(requestBuilder0, requestBuilder4);
      assertSame(requestBuilder0, requestBuilder5);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder4);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder3);
      assertSame(requestBuilder1, requestBuilder5);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder2, requestBuilder4);
      assertSame(requestBuilder2, requestBuilder5);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder3);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder3, requestBuilder0);
      assertSame(requestBuilder3, requestBuilder1);
      assertSame(requestBuilder3, requestBuilder5);
      assertSame(requestBuilder3, requestBuilder4);
      assertSame(requestBuilder3, requestBuilder2);
      assertSame(requestBuilder4, requestBuilder2);
      assertSame(requestBuilder4, requestBuilder0);
      assertSame(requestBuilder4, requestBuilder5);
      assertSame(requestBuilder4, requestBuilder1);
      assertSame(requestBuilder4, requestBuilder3);
      assertSame(requestBuilder5, requestBuilder4);
      assertSame(requestBuilder5, requestBuilder0);
      assertSame(requestBuilder5, requestBuilder1);
      assertSame(requestBuilder5, requestBuilder3);
      assertSame(requestBuilder5, requestBuilder2);
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      
      GsonConverter gsonConverter0 = new GsonConverter(gson0);
      assertNotNull(gsonConverter0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      TypedOutput typedOutput0 = gsonConverter0.toBody(object0);
      assertNotNull(typedOutput0);
      assertNull(typedOutput0.fileName());
      assertEquals(2L, typedOutput0.length());
      
      RequestBuilder requestBuilder0 = new RequestBuilder(gsonConverter0);
      assertNotNull(requestBuilder0);
      assertNull(requestBuilder0.getapiUrl());
      
      String string0 = "Y";
      requestBuilder0.setapiUrl(string0);
      assertEquals("Y", requestBuilder0.getapiUrl());
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) string0;
      objectArray0[1] = (Object) typedOutput0;
      objectArray0[2] = (Object) gsonConverter0;
      objectArray0[3] = (Object) gson0;
      objectArray0[4] = (Object) gson0;
      objectArray0[5] = (Object) string0;
      objectArray0[6] = object0;
      RequestBuilder requestBuilder1 = requestBuilder0.args(objectArray0);
      assertNotNull(requestBuilder1);
      assertEquals("Y", requestBuilder0.getapiUrl());
      assertEquals("Y", requestBuilder1.getapiUrl());
      assertEquals(7, objectArray0.length);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      
      GsonConverter gsonConverter0 = new GsonConverter(gson0);
      assertNotNull(gsonConverter0);
      
      RequestBuilder requestBuilder0 = new RequestBuilder(gsonConverter0);
      assertNotNull(requestBuilder0);
      assertNull(requestBuilder0.getapiUrl());
      
      String string0 = "=VN*85PbG>+k";
      RequestBuilder requestBuilder1 = requestBuilder0.apiUrl(string0);
      assertNotNull(requestBuilder1);
      assertEquals("=VN*85PbG>+k", requestBuilder0.getapiUrl());
      assertEquals("=VN*85PbG>+k", requestBuilder1.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      
      requestBuilder1.setargs(requestBuilder0.args);
      assertEquals("=VN*85PbG>+k", requestBuilder0.getapiUrl());
      assertEquals("=VN*85PbG>+k", requestBuilder1.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      
      GsonConverter gsonConverter0 = new GsonConverter(gson0);
      assertNotNull(gsonConverter0);
      
      RequestBuilder requestBuilder0 = new RequestBuilder(gsonConverter0);
      assertNotNull(requestBuilder0);
      assertNull(requestBuilder0.getapiUrl());
      
      Object[] objectArray0 = new Object[0];
      RequestBuilder requestBuilder1 = requestBuilder0.args(objectArray0);
      assertNotNull(requestBuilder1);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertEquals(0, objectArray0.length);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      
      Object[] objectArray1 = requestBuilder1.getargs();
      assertNotNull(objectArray1);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertEquals(0, objectArray0.length);
      assertEquals(0, objectArray1.length);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(objectArray0, objectArray1);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(objectArray1, objectArray0);
      
      Object[] objectArray2 = requestBuilder0.getargs();
      assertNotNull(objectArray2);
      assertNull(requestBuilder0.getapiUrl());
      assertEquals(0, objectArray2.length);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(objectArray2, objectArray0);
      assertSame(objectArray2, objectArray1);
      
      String string0 = "";
      RequestBuilder requestBuilder2 = requestBuilder0.apiUrl(string0);
      assertNotNull(requestBuilder2);
      assertEquals("", requestBuilder0.getapiUrl());
      assertEquals("", requestBuilder2.getapiUrl());
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder0);
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      
      GsonConverter gsonConverter0 = new GsonConverter(gson0);
      assertNotNull(gsonConverter0);
      
      RequestBuilder requestBuilder0 = new RequestBuilder(gsonConverter0);
      assertNotNull(requestBuilder0);
      assertNull(requestBuilder0.getapiUrl());
      
      List<Header> list0 = requestBuilder0.getheaders();
      assertNull(list0);
      assertNull(requestBuilder0.getapiUrl());
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) requestBuilder0;
      objectArray0[1] = (Object) list0;
      requestBuilder0.args = objectArray0;
      assertNull(requestBuilder0.getapiUrl());
      
      RequestBuilder requestBuilder1 = requestBuilder0.headers(list0);
      assertNotNull(requestBuilder1);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      
      Object[] objectArray1 = requestBuilder1.getargs();
      assertNotNull(objectArray1);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertEquals(2, objectArray1.length);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(objectArray1, objectArray0);
      
      RequestBuilder requestBuilder2 = requestBuilder0.methodInfo(requestBuilder1.methodInfo);
      assertNotNull(requestBuilder2);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertNull(requestBuilder2.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder1);
      
      // Undeclared exception!
      try { 
        requestBuilder2.buildRelativeUrl();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RequestBuilder", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      
      GsonConverter gsonConverter0 = new GsonConverter(gson0);
      assertNotNull(gsonConverter0);
      
      RequestBuilder requestBuilder0 = new RequestBuilder(gsonConverter0);
      assertNotNull(requestBuilder0);
      assertNull(requestBuilder0.getapiUrl());
      
      String string0 = "${7J-JlHRpm~A$<\\PCs";
      RequestBuilder requestBuilder1 = requestBuilder0.apiUrl(string0);
      assertNotNull(requestBuilder1);
      assertEquals("${7J-JlHRpm~A$<\\PCs", requestBuilder0.getapiUrl());
      assertEquals("${7J-JlHRpm~A$<\\PCs", requestBuilder1.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      
      RequestBuilder requestBuilder2 = requestBuilder1.methodInfo(requestBuilder0.methodInfo);
      assertNotNull(requestBuilder2);
      assertEquals("${7J-JlHRpm~A$<\\PCs", requestBuilder0.getapiUrl());
      assertEquals("${7J-JlHRpm~A$<\\PCs", requestBuilder1.getapiUrl());
      assertEquals("${7J-JlHRpm~A$<\\PCs", requestBuilder2.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder1);
      
      requestBuilder2.setheaders(requestBuilder0.headers);
      assertEquals("${7J-JlHRpm~A$<\\PCs", requestBuilder0.getapiUrl());
      assertEquals("${7J-JlHRpm~A$<\\PCs", requestBuilder1.getapiUrl());
      assertEquals("${7J-JlHRpm~A$<\\PCs", requestBuilder2.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder1);
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      
      GsonConverter gsonConverter0 = new GsonConverter(gson0);
      assertNotNull(gsonConverter0);
      
      RequestBuilder requestBuilder0 = new RequestBuilder(gsonConverter0);
      assertNotNull(requestBuilder0);
      assertNull(requestBuilder0.getapiUrl());
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) gson0;
      RequestBuilder requestBuilder1 = requestBuilder0.args(objectArray0);
      assertNotNull(requestBuilder1);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertEquals(1, objectArray0.length);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      
      String string0 = requestBuilder1.getapiUrl();
      assertNull(string0);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertEquals(1, objectArray0.length);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      
      Object[] objectArray1 = requestBuilder0.getargs();
      assertNotNull(objectArray1);
      assertNull(requestBuilder0.getapiUrl());
      assertEquals(1, objectArray1.length);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(objectArray1, objectArray0);
      
      Object[] objectArray2 = requestBuilder0.getargs();
      assertNotNull(objectArray2);
      assertNull(requestBuilder0.getapiUrl());
      assertEquals(1, objectArray2.length);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(objectArray2, objectArray0);
      assertSame(objectArray2, objectArray1);
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      
      GsonConverter gsonConverter0 = new GsonConverter(gson0);
      assertNotNull(gsonConverter0);
      
      RequestBuilder requestBuilder0 = new RequestBuilder(gsonConverter0);
      assertNotNull(requestBuilder0);
      assertNull(requestBuilder0.getapiUrl());
      
      String string0 = requestBuilder0.getapiUrl();
      assertNull(string0);
      assertNull(requestBuilder0.getapiUrl());
      
      List<Header> list0 = null;
      requestBuilder0.setheaders(list0);
      assertNull(requestBuilder0.getapiUrl());
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) requestBuilder0;
      objectArray0[1] = (Object) requestBuilder0;
      objectArray0[2] = (Object) list0;
      objectArray0[3] = (Object) gsonConverter0;
      objectArray0[4] = (Object) list0;
      objectArray0[5] = (Object) gson0;
      requestBuilder0.setargs(objectArray0);
      assertNull(requestBuilder0.getapiUrl());
      assertEquals(6, objectArray0.length);
      
      Object[] objectArray1 = requestBuilder0.getargs();
      assertNotNull(objectArray1);
      assertNull(requestBuilder0.getapiUrl());
      assertEquals(6, objectArray1.length);
      assertSame(objectArray1, objectArray0);
      
      // Undeclared exception!
      try { 
        requestBuilder0.buildBody();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RequestBuilder", e);
      }
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      
      GsonConverter gsonConverter0 = new GsonConverter(gson0);
      assertNotNull(gsonConverter0);
      
      RequestBuilder requestBuilder0 = new RequestBuilder(gsonConverter0);
      assertNotNull(requestBuilder0);
      assertNull(requestBuilder0.getapiUrl());
      
      TypedOutput typedOutput0 = gsonConverter0.toBody(requestBuilder0.apiUrl);
      assertNotNull(typedOutput0);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(typedOutput0.fileName());
      assertEquals(4L, typedOutput0.length());
      
      RestMethodInfo restMethodInfo0 = null;
      requestBuilder0.setmethodInfo(restMethodInfo0);
      assertNull(requestBuilder0.getapiUrl());
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      
      GsonConverter gsonConverter0 = new GsonConverter(gson0);
      assertNotNull(gsonConverter0);
      
      RequestBuilder requestBuilder0 = new RequestBuilder(gsonConverter0);
      assertNotNull(requestBuilder0);
      assertNull(requestBuilder0.getapiUrl());
      
      Object[] objectArray0 = null;
      RequestBuilder requestBuilder1 = requestBuilder0.args(objectArray0);
      assertNotNull(requestBuilder1);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      
      RequestBuilder requestBuilder2 = requestBuilder1.headers(requestBuilder0.headers);
      assertNotNull(requestBuilder2);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertNull(requestBuilder2.getapiUrl());
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder0);
      
      RequestBuilder requestBuilder3 = requestBuilder2.methodInfo(requestBuilder0.methodInfo);
      assertNotNull(requestBuilder3);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertNull(requestBuilder2.getapiUrl());
      assertNull(requestBuilder3.getapiUrl());
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder3);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder3);
      assertSame(requestBuilder3, requestBuilder1);
      assertSame(requestBuilder3, requestBuilder2);
      assertSame(requestBuilder3, requestBuilder0);
      
      String string0 = "av]ZI%inD*+";
      RequestBuilder requestBuilder4 = requestBuilder3.apiUrl(string0);
      assertNotNull(requestBuilder4);
      assertEquals("av]ZI%inD*+", requestBuilder0.getapiUrl());
      assertEquals("av]ZI%inD*+", requestBuilder1.getapiUrl());
      assertEquals("av]ZI%inD*+", requestBuilder2.getapiUrl());
      assertEquals("av]ZI%inD*+", requestBuilder3.getapiUrl());
      assertEquals("av]ZI%inD*+", requestBuilder4.getapiUrl());
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder4);
      assertSame(requestBuilder1, requestBuilder4);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder3);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder4);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder3);
      assertSame(requestBuilder3, requestBuilder1);
      assertSame(requestBuilder3, requestBuilder2);
      assertSame(requestBuilder3, requestBuilder4);
      assertSame(requestBuilder3, requestBuilder0);
      assertSame(requestBuilder4, requestBuilder2);
      assertSame(requestBuilder4, requestBuilder1);
      assertSame(requestBuilder4, requestBuilder3);
      assertSame(requestBuilder4, requestBuilder0);
      
      String string1 = requestBuilder4.getapiUrl();
      assertEquals("av]ZI%inD*+", string1);
      assertNotNull(string1);
      assertEquals("av]ZI%inD*+", requestBuilder0.getapiUrl());
      assertEquals("av]ZI%inD*+", requestBuilder1.getapiUrl());
      assertEquals("av]ZI%inD*+", requestBuilder2.getapiUrl());
      assertEquals("av]ZI%inD*+", requestBuilder3.getapiUrl());
      assertEquals("av]ZI%inD*+", requestBuilder4.getapiUrl());
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder4);
      assertSame(requestBuilder1, requestBuilder4);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder3);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder4);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder3);
      assertSame(requestBuilder3, requestBuilder1);
      assertSame(requestBuilder3, requestBuilder2);
      assertSame(requestBuilder3, requestBuilder4);
      assertSame(requestBuilder3, requestBuilder0);
      assertSame(string0, string1);
      assertSame(requestBuilder4, requestBuilder2);
      assertSame(requestBuilder4, requestBuilder1);
      assertSame(requestBuilder4, requestBuilder3);
      assertSame(requestBuilder4, requestBuilder0);
      assertSame(string1, string0);
      
      requestBuilder2.setheaders(requestBuilder3.headers);
      assertEquals("av]ZI%inD*+", requestBuilder0.getapiUrl());
      assertEquals("av]ZI%inD*+", requestBuilder1.getapiUrl());
      assertEquals("av]ZI%inD*+", requestBuilder2.getapiUrl());
      assertEquals("av]ZI%inD*+", requestBuilder3.getapiUrl());
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder4);
      assertSame(requestBuilder1, requestBuilder4);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder3);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder4);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder3);
      assertSame(requestBuilder3, requestBuilder1);
      assertSame(requestBuilder3, requestBuilder2);
      assertSame(requestBuilder3, requestBuilder4);
      assertSame(requestBuilder3, requestBuilder0);
      
      // Undeclared exception!
      try { 
        requestBuilder4.build();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RequestBuilder", e);
      }
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      
      GsonConverter gsonConverter0 = new GsonConverter(gson0);
      assertNotNull(gsonConverter0);
      
      RequestBuilder requestBuilder0 = new RequestBuilder(gsonConverter0);
      assertNotNull(requestBuilder0);
      assertNull(requestBuilder0.getapiUrl());
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) gson0;
      objectArray0[1] = (Object) gsonConverter0;
      RequestBuilder requestBuilder1 = requestBuilder0.args(objectArray0);
      assertNotNull(requestBuilder1);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertEquals(2, objectArray0.length);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      
      RequestBuilder requestBuilder2 = requestBuilder1.methodInfo(requestBuilder0.methodInfo);
      assertNotNull(requestBuilder2);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertNull(requestBuilder2.getapiUrl());
      assertEquals(2, objectArray0.length);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder0);
      
      RequestBuilder requestBuilder3 = requestBuilder2.apiUrl(requestBuilder1.apiUrl);
      assertNotNull(requestBuilder3);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertNull(requestBuilder2.getapiUrl());
      assertNull(requestBuilder3.getapiUrl());
      assertEquals(2, objectArray0.length);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder3);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder3);
      assertSame(requestBuilder3, requestBuilder1);
      assertSame(requestBuilder3, requestBuilder0);
      assertSame(requestBuilder3, requestBuilder2);
      
      RequestBuilder requestBuilder4 = requestBuilder3.headers(requestBuilder0.headers);
      assertNotNull(requestBuilder4);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertNull(requestBuilder2.getapiUrl());
      assertNull(requestBuilder3.getapiUrl());
      assertNull(requestBuilder4.getapiUrl());
      assertEquals(2, objectArray0.length);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder4);
      assertSame(requestBuilder1, requestBuilder4);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder3);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder2, requestBuilder4);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder3);
      assertSame(requestBuilder3, requestBuilder1);
      assertSame(requestBuilder3, requestBuilder4);
      assertSame(requestBuilder3, requestBuilder0);
      assertSame(requestBuilder3, requestBuilder2);
      assertSame(requestBuilder4, requestBuilder0);
      assertSame(requestBuilder4, requestBuilder2);
      assertSame(requestBuilder4, requestBuilder3);
      assertSame(requestBuilder4, requestBuilder1);
      
      Converter converter0 = requestBuilder4.getconverter();
      assertNotNull(converter0);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertNull(requestBuilder2.getapiUrl());
      assertNull(requestBuilder3.getapiUrl());
      assertNull(requestBuilder4.getapiUrl());
      assertEquals(2, objectArray0.length);
      assertSame(gsonConverter0, converter0);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder4);
      assertSame(requestBuilder1, requestBuilder4);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder3);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder2, requestBuilder4);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder3);
      assertSame(requestBuilder3, requestBuilder1);
      assertSame(requestBuilder3, requestBuilder4);
      assertSame(requestBuilder3, requestBuilder0);
      assertSame(requestBuilder3, requestBuilder2);
      assertSame(requestBuilder4, requestBuilder0);
      assertSame(requestBuilder4, requestBuilder2);
      assertSame(requestBuilder4, requestBuilder3);
      assertSame(requestBuilder4, requestBuilder1);
      assertSame(converter0, gsonConverter0);
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      
      GsonConverter gsonConverter0 = new GsonConverter(gson0);
      assertNotNull(gsonConverter0);
      
      RequestBuilder requestBuilder0 = new RequestBuilder(gsonConverter0);
      assertNotNull(requestBuilder0);
      assertNull(requestBuilder0.getapiUrl());
      
      String string0 = "+";
      FormUrlEncodedTypedOutput formUrlEncodedTypedOutput0 = new FormUrlEncodedTypedOutput();
      assertNotNull(formUrlEncodedTypedOutput0);
      assertEquals(0L, formUrlEncodedTypedOutput0.length());
      assertEquals("application/x-www-form-urlencoded; charset=UTF-8", formUrlEncodedTypedOutput0.mimeType());
      assertNull(formUrlEncodedTypedOutput0.fileName());
      
      TypedOutput typedOutput0 = gsonConverter0.toBody(formUrlEncodedTypedOutput0);
      assertNotNull(typedOutput0);
      assertEquals(0L, formUrlEncodedTypedOutput0.length());
      assertEquals("application/x-www-form-urlencoded; charset=UTF-8", formUrlEncodedTypedOutput0.mimeType());
      assertNull(formUrlEncodedTypedOutput0.fileName());
      assertEquals(890L, typedOutput0.length());
      assertNull(typedOutput0.fileName());
      
      RequestBuilder requestBuilder1 = requestBuilder0.apiUrl(string0);
      assertNotNull(requestBuilder1);
      assertEquals("+", requestBuilder0.getapiUrl());
      assertEquals("+", requestBuilder1.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      
      LinkedList<Header> linkedList0 = new LinkedList<Header>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      RequestBuilder requestBuilder2 = requestBuilder1.apiUrl(string0);
      assertNotNull(requestBuilder2);
      assertEquals("+", requestBuilder0.getapiUrl());
      assertEquals("+", requestBuilder1.getapiUrl());
      assertEquals("+", requestBuilder2.getapiUrl());
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder0);
      
      String string1 = "l8stxRz2";
      String string2 = "/";
      Header header0 = new Header(string1, string2);
      assertNotNull(header0);
      assertEquals("l8stxRz2", header0.getName());
      assertEquals("/", header0.getValue());
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean0 = linkedList0.add(header0);
      assertTrue(linkedList0.contains(header0));
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertEquals("l8stxRz2", header0.getName());
      assertEquals("/", header0.getValue());
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      
      RequestBuilder requestBuilder3 = requestBuilder1.headers(linkedList0);
      assertTrue(linkedList0.contains(header0));
      assertNotNull(requestBuilder3);
      assertEquals("+", requestBuilder0.getapiUrl());
      assertEquals("+", requestBuilder1.getapiUrl());
      assertEquals(1, linkedList0.size());
      assertEquals("+", requestBuilder3.getapiUrl());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder3);
      assertSame(requestBuilder3, requestBuilder0);
      assertSame(requestBuilder3, requestBuilder1);
      assertSame(requestBuilder3, requestBuilder2);
      
      List<Header> list0 = requestBuilder3.getheaders();
      assertTrue(linkedList0.contains(header0));
      assertTrue(list0.contains(header0));
      assertNotNull(list0);
      assertEquals("+", requestBuilder0.getapiUrl());
      assertEquals("+", requestBuilder1.getapiUrl());
      assertEquals(1, linkedList0.size());
      assertEquals("+", requestBuilder3.getapiUrl());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder3);
      assertSame(requestBuilder3, requestBuilder0);
      assertSame(requestBuilder3, requestBuilder1);
      assertSame(requestBuilder3, requestBuilder2);
      
      // Undeclared exception!
      try { 
        requestBuilder1.buildBody();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RequestBuilder", e);
      }
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      
      GsonConverter gsonConverter0 = new GsonConverter(gson0);
      assertNotNull(gsonConverter0);
      
      RequestBuilder requestBuilder0 = new RequestBuilder(gsonConverter0);
      assertNotNull(requestBuilder0);
      assertNull(requestBuilder0.getapiUrl());
      
      LinkedList<Header> linkedList0 = new LinkedList<Header>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      RequestBuilder requestBuilder1 = requestBuilder0.headers(linkedList0);
      assertNotNull(requestBuilder1);
      assertNull(requestBuilder0.getapiUrl());
      assertEquals(0, linkedList0.size());
      assertNull(requestBuilder1.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      
      String string0 = "r6ybj9}O+cmBI<S>5";
      RequestBuilder requestBuilder2 = requestBuilder1.apiUrl(string0);
      assertNotNull(requestBuilder2);
      assertEquals("r6ybj9}O+cmBI<S>5", requestBuilder0.getapiUrl());
      assertEquals(0, linkedList0.size());
      assertEquals("r6ybj9}O+cmBI<S>5", requestBuilder1.getapiUrl());
      assertEquals("r6ybj9}O+cmBI<S>5", requestBuilder2.getapiUrl());
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder0);
      
      RequestBuilder requestBuilder3 = requestBuilder2.args(requestBuilder0.args);
      assertNotNull(requestBuilder3);
      assertEquals("r6ybj9}O+cmBI<S>5", requestBuilder0.getapiUrl());
      assertEquals(0, linkedList0.size());
      assertEquals("r6ybj9}O+cmBI<S>5", requestBuilder1.getapiUrl());
      assertEquals("r6ybj9}O+cmBI<S>5", requestBuilder2.getapiUrl());
      assertEquals("r6ybj9}O+cmBI<S>5", requestBuilder3.getapiUrl());
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder3);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder3);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder3, requestBuilder2);
      assertSame(requestBuilder3, requestBuilder1);
      assertSame(requestBuilder3, requestBuilder0);
      
      requestBuilder3.setargs(requestBuilder2.args);
      assertEquals("r6ybj9}O+cmBI<S>5", requestBuilder0.getapiUrl());
      assertEquals(0, linkedList0.size());
      assertEquals("r6ybj9}O+cmBI<S>5", requestBuilder1.getapiUrl());
      assertEquals("r6ybj9}O+cmBI<S>5", requestBuilder2.getapiUrl());
      assertEquals("r6ybj9}O+cmBI<S>5", requestBuilder3.getapiUrl());
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder3);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder3);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder3, requestBuilder2);
      assertSame(requestBuilder3, requestBuilder1);
      assertSame(requestBuilder3, requestBuilder0);
      
      requestBuilder0.setmethodInfo(requestBuilder1.methodInfo);
      assertEquals("r6ybj9}O+cmBI<S>5", requestBuilder0.getapiUrl());
      assertEquals(0, linkedList0.size());
      assertEquals("r6ybj9}O+cmBI<S>5", requestBuilder1.getapiUrl());
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder3);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder2);
      
      RequestBuilder requestBuilder4 = requestBuilder3.methodInfo(requestBuilder2.methodInfo);
      assertNotNull(requestBuilder4);
      assertEquals("r6ybj9}O+cmBI<S>5", requestBuilder0.getapiUrl());
      assertEquals(0, linkedList0.size());
      assertEquals("r6ybj9}O+cmBI<S>5", requestBuilder1.getapiUrl());
      assertEquals("r6ybj9}O+cmBI<S>5", requestBuilder2.getapiUrl());
      assertEquals("r6ybj9}O+cmBI<S>5", requestBuilder3.getapiUrl());
      assertEquals("r6ybj9}O+cmBI<S>5", requestBuilder4.getapiUrl());
      assertSame(requestBuilder0, requestBuilder4);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder3);
      assertSame(requestBuilder1, requestBuilder4);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder4);
      assertSame(requestBuilder2, requestBuilder3);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder3, requestBuilder4);
      assertSame(requestBuilder3, requestBuilder2);
      assertSame(requestBuilder3, requestBuilder1);
      assertSame(requestBuilder3, requestBuilder0);
      assertSame(requestBuilder4, requestBuilder3);
      assertSame(requestBuilder4, requestBuilder1);
      assertSame(requestBuilder4, requestBuilder2);
      assertSame(requestBuilder4, requestBuilder0);
      
      String string1 = "b!.";
      String string2 = "";
      requestBuilder1.setapiUrl(string2);
      assertEquals("", requestBuilder0.getapiUrl());
      assertEquals(0, linkedList0.size());
      assertEquals("", requestBuilder1.getapiUrl());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertSame(requestBuilder0, requestBuilder4);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder3);
      assertSame(requestBuilder1, requestBuilder4);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      
      TypedString typedString0 = new TypedString(string1);
      assertNotNull(typedString0);
      assertEquals("text/plain; charset=UTF-8", typedString0.mimeType());
      assertNull(typedString0.fileName());
      assertEquals(4L, typedString0.length());
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      
      Class<Integer> class0 = Integer.TYPE;
      assertNotNull(class0);
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals(1041, class0.getModifiers());
      assertEquals("int", class0.toString());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isEnum());
      
      requestBuilder4.setapiUrl(requestBuilder1.apiUrl);
      assertEquals("", requestBuilder0.getapiUrl());
      assertEquals(0, linkedList0.size());
      assertEquals("", requestBuilder1.getapiUrl());
      assertEquals("", requestBuilder2.getapiUrl());
      assertEquals("", requestBuilder3.getapiUrl());
      assertEquals("", requestBuilder4.getapiUrl());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertSame(requestBuilder0, requestBuilder4);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder3);
      assertSame(requestBuilder1, requestBuilder4);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder4);
      assertSame(requestBuilder2, requestBuilder3);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder3, requestBuilder4);
      assertSame(requestBuilder3, requestBuilder2);
      assertSame(requestBuilder3, requestBuilder1);
      assertSame(requestBuilder3, requestBuilder0);
      assertSame(requestBuilder4, requestBuilder3);
      assertSame(requestBuilder4, requestBuilder1);
      assertSame(requestBuilder4, requestBuilder2);
      assertSame(requestBuilder4, requestBuilder0);
      
      List<Header> list0 = requestBuilder3.getheaders();
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals("", requestBuilder0.getapiUrl());
      assertEquals(0, linkedList0.size());
      assertEquals("", requestBuilder1.getapiUrl());
      assertEquals("", requestBuilder2.getapiUrl());
      assertEquals("", requestBuilder3.getapiUrl());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertSame(requestBuilder0, requestBuilder4);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder3);
      assertSame(requestBuilder1, requestBuilder4);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder4);
      assertSame(requestBuilder2, requestBuilder3);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder3, requestBuilder4);
      assertSame(requestBuilder3, requestBuilder2);
      assertSame(requestBuilder3, requestBuilder1);
      assertSame(requestBuilder3, requestBuilder0);
      
      RequestBuilder requestBuilder5 = requestBuilder1.methodInfo(requestBuilder0.methodInfo);
      assertNotNull(requestBuilder5);
      assertEquals("", requestBuilder5.getapiUrl());
      assertEquals("", requestBuilder0.getapiUrl());
      assertEquals(0, linkedList0.size());
      assertEquals("", requestBuilder1.getapiUrl());
      assertSame(requestBuilder5, requestBuilder2);
      assertSame(requestBuilder5, requestBuilder1);
      assertSame(requestBuilder5, requestBuilder0);
      assertSame(requestBuilder5, requestBuilder3);
      assertSame(requestBuilder5, requestBuilder4);
      assertSame(requestBuilder0, requestBuilder4);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder5);
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder3);
      assertSame(requestBuilder1, requestBuilder4);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder5);
      assertSame(requestBuilder1, requestBuilder2);
      
      // Undeclared exception!
      try { 
        requestBuilder0.build();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RequestBuilder", e);
      }
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      Converter converter0 = null;
      RequestBuilder requestBuilder0 = new RequestBuilder(converter0);
      assertNotNull(requestBuilder0);
      assertNull(requestBuilder0.getapiUrl());
      
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      assertNotNull(object0);
      
      LinkedList<Header> linkedList0 = new LinkedList<Header>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      requestBuilder0.setheaders(linkedList0);
      assertNull(requestBuilder0.getapiUrl());
      assertEquals(0, linkedList0.size());
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[1] = object1;
      RequestBuilder requestBuilder1 = requestBuilder0.headers(linkedList0);
      assertNotNull(requestBuilder1);
      assertNull(requestBuilder0.getapiUrl());
      assertEquals(0, linkedList0.size());
      assertNull(requestBuilder1.getapiUrl());
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      
      objectArray0[2] = (Object) converter0;
      objectArray0[3] = (Object) requestBuilder0;
      objectArray0[4] = (Object) converter0;
      objectArray0[5] = (Object) requestBuilder0;
      objectArray0[6] = (Object) requestBuilder0;
      objectArray0[7] = (Object) converter0;
      RequestBuilder requestBuilder2 = requestBuilder0.args(objectArray0);
      assertNotNull(requestBuilder2);
      assertNull(requestBuilder2.getapiUrl());
      assertNull(requestBuilder0.getapiUrl());
      assertEquals(8, objectArray0.length);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder1);
      
      Converter converter1 = requestBuilder1.getconverter();
      assertNull(converter1);
      assertNull(requestBuilder0.getapiUrl());
      assertEquals(0, linkedList0.size());
      assertNull(requestBuilder1.getapiUrl());
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder2);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      RequestBuilder requestBuilder3 = requestBuilder2.apiUrl(requestBuilder0.apiUrl);
      assertNotNull(requestBuilder3);
      assertNull(requestBuilder2.getapiUrl());
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder3.getapiUrl());
      assertEquals(8, objectArray0.length);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder3);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder3, requestBuilder2);
      assertSame(requestBuilder3, requestBuilder0);
      assertSame(requestBuilder3, requestBuilder1);
      
      RequestBuilder requestBuilder4 = requestBuilder1.apiUrl(requestBuilder2.apiUrl);
      assertNotNull(requestBuilder4);
      assertNull(requestBuilder2.getapiUrl());
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder4.getapiUrl());
      assertEquals(0, linkedList0.size());
      assertNull(requestBuilder1.getapiUrl());
      assertEquals(8, objectArray0.length);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder3);
      assertSame(requestBuilder2, requestBuilder4);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder4);
      assertSame(requestBuilder4, requestBuilder3);
      assertSame(requestBuilder4, requestBuilder2);
      assertSame(requestBuilder4, requestBuilder0);
      assertSame(requestBuilder4, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder4);
      assertSame(requestBuilder1, requestBuilder3);
      assertSame(requestBuilder1, requestBuilder2);
      
      requestBuilder1.setmethodInfo(requestBuilder3.methodInfo);
      assertNull(requestBuilder2.getapiUrl());
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder3.getapiUrl());
      assertEquals(0, linkedList0.size());
      assertNull(requestBuilder1.getapiUrl());
      assertEquals(8, objectArray0.length);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder3);
      assertSame(requestBuilder2, requestBuilder4);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder4);
      assertSame(requestBuilder3, requestBuilder4);
      assertSame(requestBuilder3, requestBuilder2);
      assertSame(requestBuilder3, requestBuilder0);
      assertSame(requestBuilder3, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder4);
      assertSame(requestBuilder1, requestBuilder3);
      assertSame(requestBuilder1, requestBuilder2);
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      
      GsonConverter gsonConverter0 = new GsonConverter(gson0);
      assertNotNull(gsonConverter0);
      
      RequestBuilder requestBuilder0 = new RequestBuilder(gsonConverter0);
      assertNotNull(requestBuilder0);
      assertNull(requestBuilder0.getapiUrl());
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) requestBuilder0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) gson0;
      objectArray0[3] = (Object) gson0;
      objectArray0[4] = (Object) gsonConverter0;
      objectArray0[5] = (Object) requestBuilder0;
      objectArray0[6] = (Object) requestBuilder0;
      RequestBuilder requestBuilder1 = requestBuilder0.args(objectArray0);
      assertNotNull(requestBuilder1);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertEquals(7, objectArray0.length);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder1, requestBuilder0);
      
      TypedOutput typedOutput0 = gsonConverter0.toBody(gson0);
      assertNotNull(typedOutput0);
      assertEquals(3075L, typedOutput0.length());
      assertNull(typedOutput0.fileName());
      
      requestBuilder1.methodInfo = requestBuilder0.methodInfo;
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      
      RequestBuilder requestBuilder2 = requestBuilder1.methodInfo(requestBuilder0.methodInfo);
      assertNotNull(requestBuilder2);
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertNull(requestBuilder2.getapiUrl());
      assertEquals(7, objectArray0.length);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder0);
      
      requestBuilder2.methodInfo = requestBuilder0.methodInfo;
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertNull(requestBuilder2.getapiUrl());
      
      String string0 = "";
      requestBuilder2.methodInfo = requestBuilder1.methodInfo;
      assertNull(requestBuilder0.getapiUrl());
      assertNull(requestBuilder1.getapiUrl());
      assertNull(requestBuilder2.getapiUrl());
      
      RequestBuilder requestBuilder3 = requestBuilder2.apiUrl(string0);
      assertNotNull(requestBuilder3);
      assertEquals("", requestBuilder0.getapiUrl());
      assertEquals("", requestBuilder3.getapiUrl());
      assertEquals("", requestBuilder1.getapiUrl());
      assertEquals("", requestBuilder2.getapiUrl());
      assertEquals(7, objectArray0.length);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder3, requestBuilder2);
      assertSame(requestBuilder3, requestBuilder1);
      assertSame(requestBuilder3, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder2);
      assertSame(requestBuilder1, requestBuilder3);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder3);
      assertSame(requestBuilder2, requestBuilder1);
      assertSame(requestBuilder2, requestBuilder0);
      
      String string1 = "@}&_gXk51J7#|k*S";
      String string2 = requestBuilder0.getapiUrl();
      assertEquals("", string2);
      assertNotNull(string2);
      assertEquals("", requestBuilder0.getapiUrl());
      assertFalse(string2.equals((Object)string1));
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder2);
      assertSame(requestBuilder0, requestBuilder3);
      assertNotSame(string2, string1);
      assertSame(string2, string0);
      
      requestBuilder3.apiUrl = string1;
      assertEquals("@}&_gXk51J7#|k*S", requestBuilder0.getapiUrl());
      assertEquals("@}&_gXk51J7#|k*S", requestBuilder3.getapiUrl());
      assertEquals("@}&_gXk51J7#|k*S", requestBuilder1.getapiUrl());
      assertEquals("@}&_gXk51J7#|k*S", requestBuilder2.getapiUrl());
      
      // Undeclared exception!
      try { 
        requestBuilder3.build();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RequestBuilder", e);
      }
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      Gson gson0 = new Gson();
      assertNotNull(gson0);
      
      GsonConverter gsonConverter0 = new GsonConverter(gson0);
      assertNotNull(gsonConverter0);
      
      RequestBuilder requestBuilder0 = new RequestBuilder(gsonConverter0);
      assertNotNull(requestBuilder0);
      assertNull(requestBuilder0.getapiUrl());
      
      String string0 = "retrofit.RequestBuilder$1";
      requestBuilder0.setapiUrl(string0);
      assertEquals("retrofit.RequestBuilder$1", requestBuilder0.getapiUrl());
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) gson0;
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)109;
      byteArray0[0] = byte0;
      byte byte1 = (byte)118;
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-30);
      byteArray0[2] = byte2;
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertArrayEquals(new byte[] {(byte)109, (byte)118, (byte) (-30)}, byteArray0);
      assertFalse(boolean0);
      assertEquals(3, byteArray0.length);
      
      objectArray0[1] = (Object) gson0;
      objectArray0[2] = (Object) requestBuilder0;
      requestBuilder0.args = objectArray0;
      assertEquals("retrofit.RequestBuilder$1", requestBuilder0.getapiUrl());
      
      String string1 = "Body must not be null./";
      RequestBuilder requestBuilder1 = requestBuilder0.apiUrl(string1);
      assertNotNull(requestBuilder1);
      assertEquals("Body must not be null./", requestBuilder0.getapiUrl());
      assertEquals("Body must not be null./", requestBuilder1.getapiUrl());
      assertFalse(string1.equals((Object)string0));
      assertSame(requestBuilder0, requestBuilder1);
      assertNotSame(string1, string0);
      assertSame(requestBuilder1, requestBuilder0);
      
      Object[] objectArray1 = new Object[6];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = (Object) gson0;
      requestBuilder0.setargs(objectArray0);
      assertEquals("Body must not be null./", requestBuilder0.getapiUrl());
      assertEquals(3, objectArray0.length);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertSame(requestBuilder0, requestBuilder1);
      assertNotSame(objectArray0, objectArray1);
      
      objectArray1[1] = (Object) requestBuilder1;
      objectArray1[2] = (Object) gson0;
      objectArray1[3] = (Object) gson0;
      objectArray1[4] = (Object) requestBuilder0;
      objectArray1[5] = (Object) requestBuilder1;
      RequestBuilder requestBuilder2 = requestBuilder1.args(objectArray1);
      assertNotNull(requestBuilder2);
      assertEquals("Body must not be null./", requestBuilder0.getapiUrl());
      assertEquals("Body must not be null./", requestBuilder1.getapiUrl());
      assertEquals("Body must not be null./", requestBuilder2.getapiUrl());
      assertEquals(6, objectArray1.length);
      assertFalse(string1.equals((Object)string0));
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder2);
      assertNotSame(string1, string0);
      assertSame(requestBuilder1, requestBuilder0);
      assertSame(requestBuilder1, requestBuilder2);
      assertNotSame(objectArray1, objectArray0);
      assertSame(requestBuilder2, requestBuilder0);
      assertSame(requestBuilder2, requestBuilder1);
      
      RequestBuilder requestBuilder3 = requestBuilder0.args(objectArray0);
      assertNotNull(requestBuilder3);
      assertEquals("Body must not be null./", requestBuilder0.getapiUrl());
      assertEquals("Body must not be null./", requestBuilder3.getapiUrl());
      assertEquals(3, objectArray0.length);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertSame(requestBuilder0, requestBuilder3);
      assertSame(requestBuilder0, requestBuilder1);
      assertSame(requestBuilder0, requestBuilder2);
      assertNotSame(objectArray0, objectArray1);
      assertSame(requestBuilder3, requestBuilder1);
      assertSame(requestBuilder3, requestBuilder2);
      assertSame(requestBuilder3, requestBuilder0);
      
      // Undeclared exception!
      try { 
        requestBuilder1.build();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RequestBuilder", e);
      }
  }
}
