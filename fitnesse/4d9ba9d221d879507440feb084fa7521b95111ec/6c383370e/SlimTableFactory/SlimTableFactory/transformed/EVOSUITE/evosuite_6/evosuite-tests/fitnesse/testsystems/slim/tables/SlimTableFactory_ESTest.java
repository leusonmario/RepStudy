/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 01 18:25:07 GMT 2021
 */

package fitnesse.testsystems.slim.tables;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import fitnesse.testsystems.TestResult;
import fitnesse.testsystems.slim.HtmlTable;
import fitnesse.testsystems.slim.SlimTestContext;
import fitnesse.testsystems.slim.SlimTestContextImpl;
import fitnesse.testsystems.slim.Table;
import fitnesse.testsystems.slim.results.SlimTestResult;
import fitnesse.testsystems.slim.tables.DecisionTable;
import fitnesse.testsystems.slim.tables.LibraryTable;
import fitnesse.testsystems.slim.tables.OrderedQueryTable;
import fitnesse.testsystems.slim.tables.QueryTable;
import fitnesse.testsystems.slim.tables.ScenarioAndDecisionTableExtensionTest;
import fitnesse.testsystems.slim.tables.ScenarioTable;
import fitnesse.testsystems.slim.tables.ScenarioTableExtensionTest;
import fitnesse.testsystems.slim.tables.ScriptTable;
import fitnesse.testsystems.slim.tables.SlimTable;
import fitnesse.testsystems.slim.tables.SlimTableFactory;
import fitnesse.testsystems.slim.tables.SubsetQueryTable;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.ResourceBundle;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.htmlparser.Node;
import org.htmlparser.tags.TableTag;
import org.htmlparser.util.NodeList;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SlimTableFactory_ESTest extends SlimTableFactory_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      assertNotNull(slimTableFactory0);
      
      String string0 = "script";
      Class<ScenarioAndDecisionTableExtensionTest.ScenarioTableWithDifferentScript> class0 = ScenarioAndDecisionTableExtensionTest.ScenarioTableWithDifferentScript.class;
      // Undeclared exception!
      try { 
        slimTableFactory0.addTableType(string0, class0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // A table type named 'script' already exists
         //
         verifyException("fitnesse.testsystems.slim.tables.SlimTableFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      assertNotNull(slimTableFactory0);
      
      String string0 = "asatyuEU";
      String string1 = slimTableFactory0.makeTableType(string0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("atyuEU", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      TableTag tableTag0 = new TableTag();
      assertNotNull(tableTag0);
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      
      boolean boolean0 = false;
      NodeList nodeList0 = tableTag0.searchFor(string0, boolean0);
      assertNotNull(nodeList0);
      assertFalse(string0.equals((Object)string1));
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertNotSame(string0, string1);
      
      tableTag0.setChildren(nodeList0);
      assertFalse(string0.equals((Object)string1));
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertNotSame(string0, string1);
      
      HtmlTable htmlTable0 = new HtmlTable(tableTag0);
      assertNotNull(htmlTable0);
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals(0, htmlTable0.getRowCount());
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(string1));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      boolean boolean1 = arrayList0.add(string1);
      assertTrue(arrayList0.contains(string1));
      assertFalse(arrayList0.contains(string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(boolean1 == boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      int int0 = htmlTable0.addRow(arrayList0);
      assertTrue(arrayList0.contains(string1));
      assertFalse(arrayList0.contains(string0));
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals(1, htmlTable0.getRowCount());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(0, int0);
      
      int int1 = htmlTable0.addRow(arrayList0);
      assertTrue(arrayList0.contains(string1));
      assertFalse(arrayList0.contains(string0));
      assertFalse(int1 == int0);
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals(2, htmlTable0.getRowCount());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, int1);
      
      SlimTable slimTable0 = slimTableFactory0.parseDefineTableTypeTable(htmlTable0);
      assertNull(slimTable0);
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals(2, htmlTable0.getRowCount());
      
      Class<OrderedQueryTable> class0 = OrderedQueryTable.class;
      slimTableFactory0.addTableType(string1, class0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      SlimTestContextImpl slimTestContextImpl0 = new SlimTestContextImpl();
      assertNotNull(slimTestContextImpl0);
      
      ScenarioTable scenarioTable0 = new ScenarioTable(htmlTable0, string1, slimTestContextImpl0);
      assertNotNull(scenarioTable0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(scenarioTable0.isParameterized());
      assertEquals("scenarioTable_atyuEU", scenarioTable0.getTableName());
      assertNull(scenarioTable0.getName());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals(2, htmlTable0.getRowCount());
      
      ScenarioTable.ScenarioTestContext scenarioTable_ScenarioTestContext0 = scenarioTable0.new ScenarioTestContext(slimTestContextImpl0);
      assertNotNull(scenarioTable_ScenarioTestContext0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(scenarioTable0.isParameterized());
      assertEquals("scenarioTable_atyuEU", scenarioTable0.getTableName());
      assertNull(scenarioTable0.getName());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals(2, htmlTable0.getRowCount());
      
      SlimTable slimTable1 = slimTableFactory0.makeSlimTable(htmlTable0, string1, scenarioTable_ScenarioTestContext0);
      assertNotNull(slimTable1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(scenarioTable0.isParameterized());
      assertEquals("scenarioTable_atyuEU", scenarioTable0.getTableName());
      assertNull(scenarioTable0.getName());
      assertEquals("queryTable_atyuEU", slimTable1.getTableName());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals(2, htmlTable0.getRowCount());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      String string2 = slimTableFactory0.makeTableType(string1);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertEquals("atyuEU", string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      assertNotNull(slimTableFactory0);
      
      String string0 = "comment:org.eclipse.jgi:.api.RebaseResult";
      String string1 = slimTableFactory0.makeTableType(string0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("comment org.eclipse.jgi .api.RebaseResult", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      TableTag tableTag0 = new TableTag();
      assertNotNull(tableTag0);
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getEndPosition());
      
      NodeList nodeList0 = tableTag0.searchFor(string0);
      assertNotNull(nodeList0);
      assertFalse(string0.equals((Object)string1));
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertNotSame(string0, string1);
      
      tableTag0.setChildren(nodeList0);
      assertFalse(string0.equals((Object)string1));
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertNotSame(string0, string1);
      
      HtmlTable htmlTable0 = new HtmlTable(tableTag0);
      assertNotNull(htmlTable0);
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals(0, htmlTable0.getRowCount());
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(string1));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      boolean boolean0 = arrayList0.add(string1);
      assertFalse(arrayList0.contains(string0));
      assertTrue(arrayList0.contains(string1));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      int int0 = htmlTable0.addRow(arrayList0);
      assertFalse(arrayList0.contains(string0));
      assertTrue(arrayList0.contains(string1));
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals(1, htmlTable0.getRowCount());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(0, int0);
      
      SlimTestContextImpl slimTestContextImpl0 = new SlimTestContextImpl();
      assertNotNull(slimTestContextImpl0);
      
      ScenarioTable scenarioTable0 = new ScenarioTable(htmlTable0, string0, slimTestContextImpl0);
      assertNotNull(scenarioTable0);
      assertFalse(string0.equals((Object)string1));
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals(1, htmlTable0.getRowCount());
      assertEquals("scenarioTable_comment:org.eclipse.jgi:.api.RebaseResult", scenarioTable0.getTableName());
      assertFalse(scenarioTable0.isParameterized());
      assertNull(scenarioTable0.getName());
      
      ScenarioTable.ScenarioTestContext scenarioTable_ScenarioTestContext0 = scenarioTable0.new ScenarioTestContext(slimTestContextImpl0);
      assertNotNull(scenarioTable_ScenarioTestContext0);
      assertFalse(string0.equals((Object)string1));
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals(1, htmlTable0.getRowCount());
      assertEquals("scenarioTable_comment:org.eclipse.jgi:.api.RebaseResult", scenarioTable0.getTableName());
      assertFalse(scenarioTable0.isParameterized());
      assertNull(scenarioTable0.getName());
      
      SlimTable slimTable0 = slimTableFactory0.makeSlimTable(htmlTable0, string1, scenarioTable_ScenarioTestContext0);
      assertNotNull(slimTable0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals(1, htmlTable0.getRowCount());
      assertEquals("scenarioTable_comment:org.eclipse.jgi:.api.RebaseResult", scenarioTable0.getTableName());
      assertFalse(scenarioTable0.isParameterized());
      assertNull(scenarioTable0.getName());
      assertEquals("decisionTable_comment org.eclipse.jgi .api.RebaseResult", slimTable0.getTableName());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      assertNotNull(slimTableFactory0);
      
      String string0 = "asjecli";
      String string1 = slimTableFactory0.getFullTableName(string0);
      assertNotNull(string1);
      assertEquals("asjecli", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      TableTag tableTag0 = new TableTag();
      assertNotNull(tableTag0);
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getTagBegin());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals("TABLE", tableTag0.getRawTagName());
      
      boolean boolean0 = false;
      Locale locale0 = new Locale(string1, string0, string1);
      assertNotNull(locale0);
      assertEquals("asjecli_ASJECLI_asjecli", locale0.toString());
      assertEquals("ASJECLI", locale0.getCountry());
      assertEquals("asjecli", locale0.getLanguage());
      assertEquals("asjecli", locale0.getVariant());
      
      NodeList nodeList0 = tableTag0.searchFor(string0, boolean0, locale0);
      assertNotNull(nodeList0);
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getTagBegin());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals("asjecli_ASJECLI_asjecli", locale0.toString());
      assertEquals("ASJECLI", locale0.getCountry());
      assertEquals("asjecli", locale0.getLanguage());
      assertEquals("asjecli", locale0.getVariant());
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      tableTag0.setChildren(nodeList0);
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getTagBegin());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals("asjecli_ASJECLI_asjecli", locale0.toString());
      assertEquals("ASJECLI", locale0.getCountry());
      assertEquals("asjecli", locale0.getLanguage());
      assertEquals("asjecli", locale0.getVariant());
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      HtmlTable htmlTable0 = new HtmlTable(tableTag0);
      assertNotNull(htmlTable0);
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getTagBegin());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals(0, htmlTable0.getRowCount());
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(string1));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      boolean boolean1 = arrayList0.add(string1);
      assertTrue(arrayList0.contains(string1));
      assertFalse(boolean1 == boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      int int0 = htmlTable0.addRow(arrayList0);
      assertTrue(arrayList0.contains(string1));
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getTagBegin());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals(1, htmlTable0.getRowCount());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(0, int0);
      
      SlimTestContextImpl slimTestContextImpl0 = new SlimTestContextImpl();
      assertNotNull(slimTestContextImpl0);
      
      ScenarioTable scenarioTable0 = new ScenarioTable(htmlTable0, string0, slimTestContextImpl0);
      assertNotNull(scenarioTable0);
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getTagBegin());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals(1, htmlTable0.getRowCount());
      assertFalse(scenarioTable0.isParameterized());
      assertEquals("scenarioTable_asjecli", scenarioTable0.getTableName());
      assertNull(scenarioTable0.getName());
      
      ScenarioTable.ScenarioTestContext scenarioTable_ScenarioTestContext0 = scenarioTable0.new ScenarioTestContext(slimTestContextImpl0);
      assertNotNull(scenarioTable_ScenarioTestContext0);
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getTagBegin());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals(1, htmlTable0.getRowCount());
      assertFalse(scenarioTable0.isParameterized());
      assertEquals("scenarioTable_asjecli", scenarioTable0.getTableName());
      assertNull(scenarioTable0.getName());
      
      SlimTable slimTable0 = slimTableFactory0.makeSlimTable(htmlTable0, string1, scenarioTable_ScenarioTestContext0);
      assertNotNull(slimTable0);
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getTagBegin());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals(1, htmlTable0.getRowCount());
      assertFalse(scenarioTable0.isParameterized());
      assertEquals("scenarioTable_asjecli", scenarioTable0.getTableName());
      assertNull(scenarioTable0.getName());
      assertEquals("decisionTable_asjecli", slimTable0.getTableName());
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      Class<? extends SlimTable> class0 = slimTableFactory0.getTableType(string1);
      assertNull(class0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      SlimTable slimTable1 = slimTableFactory0.newTableForType(class0, htmlTable0, string0, slimTestContextImpl0);
      assertNotNull(slimTable1);
      assertEquals("UnknownTableType_asjecli", slimTable1.getTableName());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getTagBegin());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals(1, htmlTable0.getRowCount());
      assertSame(string0, string1);
      assertSame(string1, string0);
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      assertNotNull(slimTableFactory0);
      
      String string0 = "0IJYYOh";
      TableTag tableTag0 = new TableTag();
      assertNotNull(tableTag0);
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      
      boolean boolean0 = true;
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      
      NodeList nodeList0 = tableTag0.searchFor(string0, boolean0, locale0);
      assertNotNull(nodeList0);
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      
      tableTag0.setChildren(nodeList0);
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      
      HtmlTable htmlTable0 = new HtmlTable(tableTag0);
      assertNotNull(htmlTable0);
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals(0, htmlTable0.getRowCount());
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(string0));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      String string1 = "comment:0ijyyoh:0IJYYOh";
      boolean boolean1 = arrayList0.add(string1);
      assertFalse(arrayList0.contains(string0));
      assertTrue(arrayList0.contains(string1));
      assertFalse(string1.equals((Object)string0));
      assertTrue(boolean1 == boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean1);
      assertNotSame(string1, string0);
      
      int int0 = htmlTable0.addRow(arrayList0);
      assertFalse(arrayList0.contains(string0));
      assertTrue(arrayList0.contains(string1));
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals(1, htmlTable0.getRowCount());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(0, int0);
      
      SlimTestContextImpl slimTestContextImpl0 = new SlimTestContextImpl();
      assertNotNull(slimTestContextImpl0);
      
      ScenarioTable scenarioTable0 = new ScenarioTable(htmlTable0, string0, slimTestContextImpl0);
      assertNotNull(scenarioTable0);
      assertFalse(string0.equals((Object)string1));
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals(1, htmlTable0.getRowCount());
      assertNull(scenarioTable0.getName());
      assertFalse(scenarioTable0.isParameterized());
      assertEquals("scenarioTable_0IJYYOh", scenarioTable0.getTableName());
      
      ScenarioTable.ScenarioTestContext scenarioTable_ScenarioTestContext0 = scenarioTable0.new ScenarioTestContext(slimTestContextImpl0);
      assertNotNull(scenarioTable_ScenarioTestContext0);
      assertFalse(string0.equals((Object)string1));
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals(1, htmlTable0.getRowCount());
      assertNull(scenarioTable0.getName());
      assertFalse(scenarioTable0.isParameterized());
      assertEquals("scenarioTable_0IJYYOh", scenarioTable0.getTableName());
      
      SlimTable slimTable0 = slimTableFactory0.makeSlimTable(htmlTable0, string0, scenarioTable_ScenarioTestContext0);
      assertNull(slimTable0);
      assertFalse(string0.equals((Object)string1));
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals(1, htmlTable0.getRowCount());
      assertNull(scenarioTable0.getName());
      assertFalse(scenarioTable0.isParameterized());
      assertEquals("scenarioTable_0IJYYOh", scenarioTable0.getTableName());
      assertNotSame(string0, string1);
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      assertNotNull(slimTableFactory0);
      
      String string0 = "0IYYOh";
      TableTag tableTag0 = new TableTag();
      assertNotNull(tableTag0);
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEndTag());
      
      boolean boolean0 = true;
      NodeList nodeList0 = tableTag0.searchFor(string0, boolean0);
      assertNotNull(nodeList0);
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEndTag());
      
      tableTag0.setChildren(nodeList0);
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEndTag());
      
      HtmlTable htmlTable0 = new HtmlTable(tableTag0);
      assertNotNull(htmlTable0);
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals(0, htmlTable0.getRowCount());
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(string0));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      String string1 = "define table type";
      boolean boolean1 = arrayList0.add(string1);
      assertFalse(arrayList0.contains(string0));
      assertTrue(arrayList0.contains(string1));
      assertFalse(string1.equals((Object)string0));
      assertTrue(boolean1 == boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean1);
      assertNotSame(string1, string0);
      
      int int0 = htmlTable0.addRow(arrayList0);
      assertFalse(arrayList0.contains(string0));
      assertTrue(arrayList0.contains(string1));
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals(1, htmlTable0.getRowCount());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(0, int0);
      
      SlimTestContextImpl slimTestContextImpl0 = new SlimTestContextImpl();
      assertNotNull(slimTestContextImpl0);
      
      SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
      assertNotNull(slimTableFactory1);
      assertFalse(slimTableFactory1.equals((Object)slimTableFactory0));
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertNotSame(slimTableFactory1, slimTableFactory0);
      
      SlimTable slimTable0 = slimTableFactory1.makeSlimTable(htmlTable0, string0, slimTestContextImpl0);
      assertNull(slimTable0);
      assertFalse(slimTableFactory0.equals((Object)slimTableFactory1));
      assertFalse(string0.equals((Object)string1));
      assertFalse(slimTableFactory1.equals((Object)slimTableFactory0));
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals(1, htmlTable0.getRowCount());
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertNotSame(string0, string1);
      assertNotSame(slimTableFactory1, slimTableFactory0);
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      assertNotNull(slimTableFactory0);
      
      String string0 = "0IJ(YYOh";
      String string1 = slimTableFactory0.makeTableType(string0);
      assertNotNull(string1);
      assertEquals("0IJ(YYOh", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      TableTag tableTag0 = new TableTag();
      assertNotNull(tableTag0);
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      
      boolean boolean0 = true;
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      
      NodeList nodeList0 = tableTag0.searchFor(string0, boolean0, locale0);
      assertNotNull(nodeList0);
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertSame(string0, string1);
      
      tableTag0.setChildren(nodeList0);
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertSame(string0, string1);
      
      HtmlTable htmlTable0 = new HtmlTable(tableTag0);
      assertNotNull(htmlTable0);
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals(0, htmlTable0.getRowCount());
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(string1));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      boolean boolean1 = arrayList0.add(string1);
      assertTrue(arrayList0.contains(string1));
      assertTrue(boolean1 == boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      boolean boolean2 = arrayList0.add(string1);
      assertTrue(arrayList0.contains(string1));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean2);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      int int0 = htmlTable0.addRow(arrayList0);
      assertTrue(arrayList0.contains(string1));
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals(1, htmlTable0.getRowCount());
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(0, int0);
      
      slimTableFactory0.parseDefineTableTypeRow(htmlTable0, int0);
      assertTrue(arrayList0.contains(string1));
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals(1, htmlTable0.getRowCount());
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      
      SlimTestContextImpl slimTestContextImpl0 = new SlimTestContextImpl();
      assertNotNull(slimTestContextImpl0);
      
      ScenarioTable scenarioTable0 = new ScenarioTable(htmlTable0, string0, slimTestContextImpl0);
      assertNotNull(scenarioTable0);
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals(1, htmlTable0.getRowCount());
      assertFalse(scenarioTable0.isParameterized());
      assertEquals("scenarioTable_0IJ(YYOh", scenarioTable0.getTableName());
      assertNull(scenarioTable0.getName());
      
      ScenarioTable.ScenarioTestContext scenarioTable_ScenarioTestContext0 = scenarioTable0.new ScenarioTestContext(slimTestContextImpl0);
      assertNotNull(scenarioTable_ScenarioTestContext0);
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals(1, htmlTable0.getRowCount());
      assertFalse(scenarioTable0.isParameterized());
      assertEquals("scenarioTable_0IJ(YYOh", scenarioTable0.getTableName());
      assertNull(scenarioTable0.getName());
      
      SlimTable slimTable0 = slimTableFactory0.makeSlimTable(htmlTable0, string1, scenarioTable_ScenarioTestContext0);
      assertNotNull(slimTable0);
      assertEquals("UnknownTableType_0IJ(YYOh", slimTable0.getTableName());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals(1, htmlTable0.getRowCount());
      assertFalse(scenarioTable0.isParameterized());
      assertEquals("scenarioTable_0IJ(YYOh", scenarioTable0.getTableName());
      assertNull(scenarioTable0.getName());
      assertSame(string0, string1);
      assertSame(string1, string0);
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      assertNotNull(slimTableFactory0);
      
      String string0 = "0Ip%OD";
      TableTag tableTag0 = new TableTag();
      assertNotNull(tableTag0);
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getStartPosition());
      
      boolean boolean0 = false;
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      
      NodeList nodeList0 = tableTag0.searchFor(string0, boolean0, locale0);
      assertNotNull(nodeList0);
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      
      tableTag0.setChildren(nodeList0);
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      
      HtmlTable htmlTable0 = new HtmlTable(tableTag0);
      assertNotNull(htmlTable0);
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals(0, htmlTable0.getRowCount());
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(string0));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      String string1 = "comment";
      boolean boolean1 = arrayList0.add(string1);
      assertTrue(arrayList0.contains(string1));
      assertFalse(arrayList0.contains(string0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(boolean1 == boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean1);
      assertNotSame(string1, string0);
      
      int int0 = htmlTable0.addRow(arrayList0);
      assertTrue(arrayList0.contains(string1));
      assertFalse(arrayList0.contains(string0));
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals(1, htmlTable0.getRowCount());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(0, int0);
      
      String string2 = tableTag0.toString();
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals("TableTag\n********\n<TABLE><tr><td>comment</td></tr>", string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      
      SlimTestContextImpl slimTestContextImpl0 = new SlimTestContextImpl();
      assertNotNull(slimTestContextImpl0);
      
      ScenarioTable scenarioTable0 = new ScenarioTable(htmlTable0, string0, slimTestContextImpl0);
      assertNotNull(scenarioTable0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals(1, htmlTable0.getRowCount());
      assertEquals("scenarioTable_0Ip%OD", scenarioTable0.getTableName());
      assertNull(scenarioTable0.getName());
      assertFalse(scenarioTable0.isParameterized());
      
      ScenarioTable.ScenarioTestContext scenarioTable_ScenarioTestContext0 = scenarioTable0.new ScenarioTestContext(slimTestContextImpl0);
      assertNotNull(scenarioTable_ScenarioTestContext0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals(1, htmlTable0.getRowCount());
      assertEquals("scenarioTable_0Ip%OD", scenarioTable0.getTableName());
      assertNull(scenarioTable0.getName());
      assertFalse(scenarioTable0.isParameterized());
      
      SlimTable slimTable0 = slimTableFactory0.makeSlimTable(htmlTable0, string0, scenarioTable_ScenarioTestContext0);
      assertNull(slimTable0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals(1, htmlTable0.getRowCount());
      assertEquals("scenarioTable_0Ip%OD", scenarioTable0.getTableName());
      assertNull(scenarioTable0.getName());
      assertFalse(scenarioTable0.isParameterized());
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      
      String string3 = null;
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      assertNotNull(slimTableFactory0);
      
      SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
      assertNotNull(slimTableFactory1);
      assertFalse(slimTableFactory1.equals((Object)slimTableFactory0));
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertNotSame(slimTableFactory1, slimTableFactory0);
      
      String string0 = "2U^'gTMxJ`Z+b[";
      Class<? extends SlimTable> class0 = slimTableFactory1.getTableType(string0);
      assertNull(class0);
      assertFalse(slimTableFactory0.equals((Object)slimTableFactory1));
      assertFalse(slimTableFactory1.equals((Object)slimTableFactory0));
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertNotSame(slimTableFactory1, slimTableFactory0);
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      assertNotNull(slimTableFactory0);
      
      String string0 = "";
      String string1 = slimTableFactory0.getFullTableName(string0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      assertNotNull(slimTableFactory0);
      
      String string0 = "";
      Class<? extends SlimTable> class0 = slimTableFactory0.getTableType(string0);
      assertNull(class0);
      
      SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
      assertNotNull(slimTableFactory1);
      assertFalse(slimTableFactory1.equals((Object)slimTableFactory0));
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertNotSame(slimTableFactory1, slimTableFactory0);
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      assertNotNull(slimTableFactory0);
      
      String string0 = "_~Z";
      String string1 = slimTableFactory0.makeTableType(string0);
      assertNotNull(string1);
      assertEquals("_~Z", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      Table table0 = null;
      int int0 = 16;
      // Undeclared exception!
      try { 
        slimTableFactory0.parseDefineTableTypeRow(table0, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.tables.SlimTableFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      assertNotNull(slimTableFactory0);
      
      String string0 = "I=NVJ4=G3o|/`E";
      String string1 = slimTableFactory0.getFullTableName(string0);
      assertNotNull(string1);
      assertEquals("I=NVJ4=G3o|/`E", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      String string2 = "ryzbn63@$:rAg\"";
      boolean boolean0 = slimTableFactory0.hasColon(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertTrue(boolean0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      assertNotNull(slimTableFactory0);
      
      String string0 = "";
      Class<SubsetQueryTable> class0 = SubsetQueryTable.class;
      slimTableFactory0.addTableType(string0, class0);
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      assertNotNull(slimTableFactory0);
      
      String string0 = "comment:";
      String string1 = slimTableFactory0.getFullTableName(string0);
      assertNotNull(string1);
      assertEquals("comment:", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      assertNotNull(slimTableFactory0);
      
      Hashtable<String, Class<ScenarioTable>> hashtable0 = new Hashtable<String, Class<ScenarioTable>>();
      assertNotNull(hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      slimTableFactory0.tableTypes = (Map<String, Class<? extends SlimTable>>) hashtable0;
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, slimTableFactory0.tableTypes.size());
      assertTrue(slimTableFactory0.tableTypes.isEmpty());
      
      SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
      assertNotNull(slimTableFactory1);
      assertFalse(slimTableFactory1.equals((Object)slimTableFactory0));
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertNotSame(slimTableFactory1, slimTableFactory0);
      
      String string0 = "";
      Class<SubsetQueryTable> class0 = SubsetQueryTable.class;
      slimTableFactory1.addTableType(string0, class0);
      assertFalse(slimTableFactory0.equals((Object)slimTableFactory1));
      assertFalse(slimTableFactory1.equals((Object)slimTableFactory0));
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertNotSame(slimTableFactory1, slimTableFactory0);
      
      SlimTableFactory slimTableFactory2 = slimTableFactory0.copy();
      assertNotNull(slimTableFactory2);
      assertFalse(slimTableFactory0.equals((Object)slimTableFactory1));
      assertFalse(slimTableFactory2.equals((Object)slimTableFactory1));
      assertFalse(slimTableFactory2.equals((Object)slimTableFactory0));
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertNotSame(slimTableFactory0, slimTableFactory2);
      assertNotSame(slimTableFactory2, slimTableFactory1);
      assertNotSame(slimTableFactory2, slimTableFactory0);
      
      Map<String, String> map0 = null;
      slimTableFactory2.tableTypeArrays = map0;
      // Undeclared exception!
      try { 
        slimTableFactory2.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      assertNotNull(slimTableFactory0);
      
      String string0 = "";
      Class<LibraryTable> class0 = LibraryTable.class;
      slimTableFactory0.addTableType(string0, class0);
      SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
      assertNotNull(slimTableFactory1);
      assertFalse(slimTableFactory1.equals((Object)slimTableFactory0));
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertNotSame(slimTableFactory1, slimTableFactory0);
      
      String string1 = slimTableFactory0.getFullTableName(string0);
      assertNotNull(string1);
      assertFalse(slimTableFactory0.equals((Object)slimTableFactory1));
      assertEquals("", string1);
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      Table table0 = null;
      SlimTestContextImpl slimTestContextImpl0 = new SlimTestContextImpl();
      assertNotNull(slimTestContextImpl0);
      
      // Undeclared exception!
      try { 
        slimTableFactory0.makeSlimTable(table0, string1, slimTestContextImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.tables.SlimTableFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      assertNotNull(slimTableFactory0);
      
      String string0 = "org.htmlparser.tags.TableRow";
      Class<ScenarioTable> class0 = ScenarioTable.class;
      slimTableFactory0.addTableType(string0, class0);
      Table table0 = null;
      String string1 = "";
      slimTableFactory0.addTableType(string0, class0);
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string0, string1);
      
      SlimTestContextImpl slimTestContextImpl0 = new SlimTestContextImpl();
      assertNotNull(slimTestContextImpl0);
      
      slimTestContextImpl0.incrementPassedTestsCount();
      // Undeclared exception!
      try { 
        slimTableFactory0.makeSlimTable(table0, string1, slimTestContextImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.tables.SlimTableFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      assertNotNull(slimTableFactory0);
      
      String string0 = null;
      SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
      assertNotNull(slimTableFactory1);
      assertFalse(slimTableFactory1.equals((Object)slimTableFactory0));
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertNotSame(slimTableFactory1, slimTableFactory0);
      
      Class<ScenarioAndDecisionTableExtensionTest.ScenarioTableWithDifferentScript> class0 = ScenarioAndDecisionTableExtensionTest.ScenarioTableWithDifferentScript.class;
      // Undeclared exception!
      try { 
        slimTableFactory0.addTableType(string0, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.tables.SlimTableFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      assertNotNull(slimTableFactory0);
      
      SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
      assertNotNull(slimTableFactory1);
      assertFalse(slimTableFactory1.equals((Object)slimTableFactory0));
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertNotSame(slimTableFactory1, slimTableFactory0);
      
      String string0 = "";
      SlimTableFactory slimTableFactory2 = slimTableFactory0.copy();
      assertNotNull(slimTableFactory2);
      assertFalse(slimTableFactory0.equals((Object)slimTableFactory1));
      assertFalse(slimTableFactory2.equals((Object)slimTableFactory1));
      assertFalse(slimTableFactory2.equals((Object)slimTableFactory0));
      assertNotSame(slimTableFactory0, slimTableFactory2);
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertNotSame(slimTableFactory2, slimTableFactory1);
      assertNotSame(slimTableFactory2, slimTableFactory0);
      
      String string1 = slimTableFactory2.makeTableType(string0);
      assertNotNull(string1);
      assertFalse(slimTableFactory0.equals((Object)slimTableFactory2));
      assertFalse(slimTableFactory0.equals((Object)slimTableFactory1));
      assertFalse(slimTableFactory2.equals((Object)slimTableFactory1));
      assertFalse(slimTableFactory2.equals((Object)slimTableFactory0));
      assertEquals("", string1);
      assertNotSame(slimTableFactory0, slimTableFactory2);
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertSame(string0, string1);
      assertNotSame(slimTableFactory2, slimTableFactory1);
      assertNotSame(slimTableFactory2, slimTableFactory0);
      assertSame(string1, string0);
      
      SlimTableFactory slimTableFactory3 = slimTableFactory1.copy();
      assertNotNull(slimTableFactory3);
      assertFalse(slimTableFactory0.equals((Object)slimTableFactory2));
      assertFalse(slimTableFactory0.equals((Object)slimTableFactory1));
      assertFalse(slimTableFactory1.equals((Object)slimTableFactory0));
      assertFalse(slimTableFactory1.equals((Object)slimTableFactory2));
      assertFalse(slimTableFactory3.equals((Object)slimTableFactory0));
      assertFalse(slimTableFactory3.equals((Object)slimTableFactory2));
      assertFalse(slimTableFactory3.equals((Object)slimTableFactory1));
      assertNotSame(slimTableFactory0, slimTableFactory2);
      assertNotSame(slimTableFactory0, slimTableFactory3);
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertNotSame(slimTableFactory1, slimTableFactory3);
      assertNotSame(slimTableFactory1, slimTableFactory0);
      assertNotSame(slimTableFactory1, slimTableFactory2);
      assertNotSame(slimTableFactory3, slimTableFactory0);
      assertNotSame(slimTableFactory3, slimTableFactory2);
      assertNotSame(slimTableFactory3, slimTableFactory1);
      
      String string2 = slimTableFactory1.makeTableType(string0);
      assertNotNull(string2);
      assertFalse(slimTableFactory0.equals((Object)slimTableFactory2));
      assertFalse(slimTableFactory0.equals((Object)slimTableFactory3));
      assertFalse(slimTableFactory0.equals((Object)slimTableFactory1));
      assertFalse(slimTableFactory1.equals((Object)slimTableFactory3));
      assertFalse(slimTableFactory1.equals((Object)slimTableFactory0));
      assertFalse(slimTableFactory1.equals((Object)slimTableFactory2));
      assertEquals("", string2);
      assertNotSame(slimTableFactory0, slimTableFactory2);
      assertNotSame(slimTableFactory0, slimTableFactory3);
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertNotSame(slimTableFactory1, slimTableFactory3);
      assertNotSame(slimTableFactory1, slimTableFactory0);
      assertNotSame(slimTableFactory1, slimTableFactory2);
      assertSame(string0, string1);
      assertSame(string0, string2);
      assertSame(string2, string1);
      assertSame(string2, string0);
      
      SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
      assertNotNull(slimTableFactory4);
      assertFalse(slimTableFactory0.equals((Object)slimTableFactory2));
      assertFalse(slimTableFactory0.equals((Object)slimTableFactory3));
      assertFalse(slimTableFactory0.equals((Object)slimTableFactory1));
      assertFalse(slimTableFactory1.equals((Object)slimTableFactory3));
      assertFalse(slimTableFactory1.equals((Object)slimTableFactory0));
      assertFalse(slimTableFactory1.equals((Object)slimTableFactory2));
      assertFalse(slimTableFactory4.equals((Object)slimTableFactory2));
      assertFalse(slimTableFactory4.equals((Object)slimTableFactory0));
      assertFalse(slimTableFactory4.equals((Object)slimTableFactory3));
      assertFalse(slimTableFactory4.equals((Object)slimTableFactory1));
      assertNotSame(slimTableFactory0, slimTableFactory2);
      assertNotSame(slimTableFactory0, slimTableFactory3);
      assertNotSame(slimTableFactory0, slimTableFactory4);
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertNotSame(slimTableFactory1, slimTableFactory3);
      assertNotSame(slimTableFactory1, slimTableFactory0);
      assertNotSame(slimTableFactory1, slimTableFactory4);
      assertNotSame(slimTableFactory1, slimTableFactory2);
      assertNotSame(slimTableFactory4, slimTableFactory2);
      assertNotSame(slimTableFactory4, slimTableFactory0);
      assertNotSame(slimTableFactory4, slimTableFactory3);
      assertNotSame(slimTableFactory4, slimTableFactory1);
      
      SlimTableFactory slimTableFactory5 = slimTableFactory3.copy();
      assertNotNull(slimTableFactory5);
      assertFalse(slimTableFactory0.equals((Object)slimTableFactory2));
      assertFalse(slimTableFactory0.equals((Object)slimTableFactory3));
      assertFalse(slimTableFactory0.equals((Object)slimTableFactory4));
      assertFalse(slimTableFactory0.equals((Object)slimTableFactory1));
      assertFalse(slimTableFactory1.equals((Object)slimTableFactory3));
      assertFalse(slimTableFactory1.equals((Object)slimTableFactory0));
      assertFalse(slimTableFactory1.equals((Object)slimTableFactory4));
      assertFalse(slimTableFactory1.equals((Object)slimTableFactory2));
      assertFalse(slimTableFactory3.equals((Object)slimTableFactory4));
      assertFalse(slimTableFactory3.equals((Object)slimTableFactory0));
      assertFalse(slimTableFactory3.equals((Object)slimTableFactory2));
      assertFalse(slimTableFactory3.equals((Object)slimTableFactory1));
      assertFalse(slimTableFactory5.equals((Object)slimTableFactory0));
      assertFalse(slimTableFactory5.equals((Object)slimTableFactory4));
      assertFalse(slimTableFactory5.equals((Object)slimTableFactory3));
      assertFalse(slimTableFactory5.equals((Object)slimTableFactory1));
      assertFalse(slimTableFactory5.equals((Object)slimTableFactory2));
      assertNotSame(slimTableFactory0, slimTableFactory2);
      assertNotSame(slimTableFactory0, slimTableFactory3);
      assertNotSame(slimTableFactory0, slimTableFactory4);
      assertNotSame(slimTableFactory0, slimTableFactory5);
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertNotSame(slimTableFactory1, slimTableFactory5);
      assertNotSame(slimTableFactory1, slimTableFactory3);
      assertNotSame(slimTableFactory1, slimTableFactory0);
      assertNotSame(slimTableFactory1, slimTableFactory4);
      assertNotSame(slimTableFactory1, slimTableFactory2);
      assertNotSame(slimTableFactory3, slimTableFactory4);
      assertNotSame(slimTableFactory3, slimTableFactory0);
      assertNotSame(slimTableFactory3, slimTableFactory5);
      assertNotSame(slimTableFactory3, slimTableFactory2);
      assertNotSame(slimTableFactory3, slimTableFactory1);
      assertNotSame(slimTableFactory5, slimTableFactory0);
      assertNotSame(slimTableFactory5, slimTableFactory4);
      assertNotSame(slimTableFactory5, slimTableFactory3);
      assertNotSame(slimTableFactory5, slimTableFactory1);
      assertNotSame(slimTableFactory5, slimTableFactory2);
      
      TableTag tableTag0 = null;
      HtmlTable htmlTable0 = null;
      try {
        htmlTable0 = new HtmlTable(tableTag0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.HtmlTable", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      assertNotNull(slimTableFactory0);
      
      String string0 = null;
      // Undeclared exception!
      try { 
        slimTableFactory0.makeTableType(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.tables.SlimTableFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      assertNotNull(slimTableFactory0);
      
      String string0 = ">:gk";
      Class<QueryTable> class0 = QueryTable.class;
      slimTableFactory0.addTableType(string0, class0);
      Table table0 = null;
      // Undeclared exception!
      try { 
        slimTableFactory0.parseDefineTableTypeTable(table0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.tables.SlimTableFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      assertNotNull(slimTableFactory0);
      
      HashMap<String, Class<ScriptTable>> hashMap0 = new HashMap<String, Class<ScriptTable>>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      slimTableFactory0.tableTypes = (Map<String, Class<? extends SlimTable>>) hashMap0;
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, slimTableFactory0.tableTypes.size());
      assertTrue(slimTableFactory0.tableTypes.isEmpty());
      
      SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
      assertNotNull(slimTableFactory1);
      assertFalse(slimTableFactory1.equals((Object)slimTableFactory0));
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertNotSame(slimTableFactory1, slimTableFactory0);
      
      String string0 = "library";
      boolean boolean0 = slimTableFactory1.hasColon(string0);
      assertFalse(slimTableFactory0.equals((Object)slimTableFactory1));
      assertFalse(slimTableFactory1.equals((Object)slimTableFactory0));
      assertFalse(boolean0);
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertNotSame(slimTableFactory1, slimTableFactory0);
      
      String string1 = "";
      boolean boolean1 = slimTableFactory0.hasColon(string1);
      assertFalse(slimTableFactory0.equals((Object)slimTableFactory1));
      assertFalse(string1.equals((Object)string0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertNotSame(string1, string0);
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      assertNotNull(slimTableFactory0);
      
      String string0 = "6tA";
      String string1 = slimTableFactory0.getFullTableName(string0);
      assertNotNull(string1);
      assertEquals("6tA", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      HashMap<String, Class<OrderedQueryTable>> hashMap0 = new HashMap<String, Class<OrderedQueryTable>>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      slimTableFactory0.tableTypes = (Map<String, Class<? extends SlimTable>>) hashMap0;
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(slimTableFactory0.tableTypes.isEmpty());
      assertEquals(0, slimTableFactory0.tableTypes.size());
      
      String string2 = null;
      // Undeclared exception!
      try { 
        slimTableFactory0.getFullTableName(string2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.tables.SlimTableFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      assertNotNull(slimTableFactory0);
      
      SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
      assertNotNull(slimTableFactory1);
      assertFalse(slimTableFactory1.equals((Object)slimTableFactory0));
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertNotSame(slimTableFactory1, slimTableFactory0);
      
      String string0 = null;
      // Undeclared exception!
      try { 
        slimTableFactory1.getTableType(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.tables.SlimTableFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      assertNotNull(slimTableFactory0);
      
      Hashtable<String, Class<ScenarioTableExtensionTest.AutoArgScenarioTable>> hashtable0 = new Hashtable<String, Class<ScenarioTableExtensionTest.AutoArgScenarioTable>>();
      assertNotNull(hashtable0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      
      slimTableFactory0.tableTypes = (Map<String, Class<? extends SlimTable>>) hashtable0;
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertEquals(0, slimTableFactory0.tableTypes.size());
      assertTrue(slimTableFactory0.tableTypes.isEmpty());
      
      String string0 = "org.eclipse.jgit.revwalk.RevCommit";
      Class<SubsetQueryTable> class0 = SubsetQueryTable.class;
      slimTableFactory0.addTableType(string0, class0);
      Class<? extends SlimTable> class1 = slimTableFactory0.getTableType(string0);
      assertNotNull(class1);
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("class fitnesse.testsystems.slim.tables.SubsetQueryTable", class1.toString());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertEquals(1, class1.getModifiers());
      
      SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
      assertNotNull(slimTableFactory1);
      assertFalse(slimTableFactory1.equals((Object)slimTableFactory0));
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertNotSame(slimTableFactory1, slimTableFactory0);
      
      TableTag tableTag0 = new TableTag();
      assertNotNull(tableTag0);
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      
      HtmlTable htmlTable0 = null;
      try {
        htmlTable0 = new HtmlTable(tableTag0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.HtmlTable", e);
      }
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      assertNotNull(slimTableFactory0);
      
      SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
      assertNotNull(slimTableFactory1);
      assertFalse(slimTableFactory1.equals((Object)slimTableFactory0));
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertNotSame(slimTableFactory1, slimTableFactory0);
      
      Class<DecisionTable> class0 = DecisionTable.class;
      Table table0 = null;
      String string0 = "W:B#j:&] pL`/";
      SlimTestContext slimTestContext0 = null;
      SlimTable slimTable0 = slimTableFactory1.newTableForType(class0, table0, string0, slimTestContext0);
      assertNotNull(slimTable0);
      assertFalse(slimTableFactory0.equals((Object)slimTableFactory1));
      assertFalse(slimTableFactory1.equals((Object)slimTableFactory0));
      assertEquals("decisionTable_W:B#j:&] pL`/", slimTable0.getTableName());
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertNotSame(slimTableFactory1, slimTableFactory0);
      
      TableTag tableTag0 = new TableTag();
      assertNotNull(tableTag0);
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getTagEnd());
      
      HtmlTable htmlTable0 = null;
      try {
        htmlTable0 = new HtmlTable(tableTag0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.HtmlTable", e);
      }
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      assertNotNull(slimTableFactory0);
      
      TableTag tableTag0 = new TableTag();
      assertNotNull(tableTag0);
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertFalse(tableTag0.isEmptyXmlTag());
      
      String string0 = "decision:";
      Class<QueryTable> class0 = QueryTable.class;
      String string1 = "A table type named '";
      Class<? extends SlimTable> class1 = slimTableFactory0.getTableType(string1);
      assertNull(class1);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      
      // Undeclared exception!
      try { 
        slimTableFactory0.addTableType(string0, class0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // A table type named 'decision:' already exists
         //
         verifyException("fitnesse.testsystems.slim.tables.SlimTableFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      assertNotNull(slimTableFactory0);
      
      String string0 = "IJYYOh";
      String string1 = slimTableFactory0.makeTableType(string0);
      assertNotNull(string1);
      assertEquals("IJYYOh", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      TableTag tableTag0 = new TableTag();
      assertNotNull(tableTag0);
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEndTag());
      
      boolean boolean0 = true;
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("IT", locale0.getCountry());
      
      NodeList nodeList0 = tableTag0.searchFor(string0, boolean0, locale0);
      assertNotNull(nodeList0);
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("IT", locale0.getCountry());
      assertSame(string0, string1);
      
      Node node0 = tableTag0.getPreviousSibling();
      assertNull(node0);
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEndTag());
      
      tableTag0.setChildren(nodeList0);
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("IT", locale0.getCountry());
      assertSame(string0, string1);
      
      HtmlTable htmlTable0 = new HtmlTable(tableTag0);
      assertNotNull(htmlTable0);
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals(0, htmlTable0.getRowCount());
      
      SlimTable slimTable0 = slimTableFactory0.parseDefineTableTypeTable(htmlTable0);
      assertNull(slimTable0);
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals(0, htmlTable0.getRowCount());
      
      SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
      assertNotNull(slimTableFactory1);
      assertFalse(slimTableFactory1.equals((Object)slimTableFactory0));
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertNotSame(slimTableFactory1, slimTableFactory0);
      
      String string2 = "-wUF= fl'P";
      String string3 = slimTableFactory1.getFullTableName(string2);
      assertNotNull(string3);
      assertFalse(slimTableFactory0.equals((Object)slimTableFactory1));
      assertFalse(slimTableFactory1.equals((Object)slimTableFactory0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("-wUF= fl'P", string3);
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertNotSame(slimTableFactory1, slimTableFactory0);
      assertNotSame(string2, string1);
      assertSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string3, string1);
      assertSame(string3, string2);
      assertNotSame(string3, string0);
      
      slimTableFactory1.tableTypes = slimTableFactory0.tableTypes;
      assertFalse(slimTableFactory1.tableTypes.isEmpty());
      assertEquals(11, slimTableFactory1.tableTypes.size());
      
      SlimTable slimTable1 = slimTableFactory1.parseDefineTableTypeTable(htmlTable0);
      assertNull(slimTable1);
      assertFalse(slimTableFactory0.equals((Object)slimTableFactory1));
      assertFalse(slimTableFactory1.equals((Object)slimTableFactory0));
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals(0, htmlTable0.getRowCount());
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertNotSame(slimTableFactory1, slimTableFactory0);
      
      SlimTableFactory slimTableFactory2 = slimTableFactory0.copy();
      assertNotNull(slimTableFactory2);
      assertFalse(slimTableFactory2.equals((Object)slimTableFactory1));
      assertFalse(slimTableFactory2.equals((Object)slimTableFactory0));
      assertFalse(slimTableFactory0.equals((Object)slimTableFactory1));
      assertNotSame(slimTableFactory2, slimTableFactory1);
      assertNotSame(slimTableFactory2, slimTableFactory0);
      assertNotSame(slimTableFactory0, slimTableFactory2);
      assertNotSame(slimTableFactory0, slimTableFactory1);
      
      String string4 = "astable ";
      String string5 = slimTableFactory2.makeTableType(string4);
      assertNotNull(string5);
      assertFalse(slimTableFactory2.equals((Object)slimTableFactory1));
      assertFalse(slimTableFactory2.equals((Object)slimTableFactory0));
      assertFalse(slimTableFactory0.equals((Object)slimTableFactory2));
      assertFalse(slimTableFactory0.equals((Object)slimTableFactory1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertEquals("table", string5);
      assertNotSame(slimTableFactory2, slimTableFactory1);
      assertNotSame(slimTableFactory2, slimTableFactory0);
      assertNotSame(slimTableFactory0, slimTableFactory2);
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertNotSame(string4, string5);
      assertNotSame(string4, string2);
      assertNotSame(string4, string1);
      assertNotSame(string4, string3);
      assertNotSame(string4, string0);
      assertNotSame(string5, string2);
      assertNotSame(string5, string1);
      assertNotSame(string5, string4);
      assertNotSame(string5, string3);
      assertNotSame(string5, string0);
      
      SlimTable slimTable2 = slimTableFactory2.parseDefineTableTypeTable(htmlTable0);
      assertNull(slimTable2);
      assertFalse(slimTableFactory2.equals((Object)slimTableFactory1));
      assertFalse(slimTableFactory2.equals((Object)slimTableFactory0));
      assertFalse(slimTableFactory0.equals((Object)slimTableFactory2));
      assertFalse(slimTableFactory0.equals((Object)slimTableFactory1));
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals(0, htmlTable0.getRowCount());
      assertNotSame(slimTableFactory2, slimTableFactory1);
      assertNotSame(slimTableFactory2, slimTableFactory0);
      assertNotSame(slimTableFactory0, slimTableFactory2);
      assertNotSame(slimTableFactory0, slimTableFactory1);
      
      HtmlTable htmlTable1 = new HtmlTable(tableTag0);
      assertNotNull(htmlTable1);
      assertFalse(htmlTable1.equals((Object)htmlTable0));
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals(0, htmlTable1.getRowCount());
      
      SlimTestContextImpl slimTestContextImpl0 = new SlimTestContextImpl();
      assertNotNull(slimTestContextImpl0);
      
      // Undeclared exception!
      try { 
        slimTableFactory2.makeSlimTable(htmlTable1, string4, slimTestContextImpl0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      assertNotNull(slimTableFactory0);
      
      String string0 = "S;.e3f\\U{$!BJY7Z<mE";
      String string1 = "branch: Created from commit ";
      SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
      assertNotNull(slimTableFactory1);
      assertFalse(slimTableFactory1.equals((Object)slimTableFactory0));
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertNotSame(slimTableFactory1, slimTableFactory0);
      
      String string2 = slimTableFactory0.makeTableType(string1);
      assertNotNull(string2);
      assertFalse(slimTableFactory0.equals((Object)slimTableFactory1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("branch  Created from commit", string2);
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      
      TableTag tableTag0 = new TableTag();
      assertNotNull(tableTag0);
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertEquals("TABLE", tableTag0.getRawTagName());
      
      HtmlTable htmlTable0 = null;
      try {
        htmlTable0 = new HtmlTable(tableTag0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.HtmlTable", e);
      }
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      assertNotNull(slimTableFactory0);
      
      SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
      assertNotNull(slimTableFactory1);
      assertFalse(slimTableFactory1.equals((Object)slimTableFactory0));
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertNotSame(slimTableFactory1, slimTableFactory0);
      
      String string0 = "mB-";
      Class<? extends SlimTable> class0 = slimTableFactory1.getTableType(string0);
      assertNull(class0);
      assertFalse(slimTableFactory0.equals((Object)slimTableFactory1));
      assertFalse(slimTableFactory1.equals((Object)slimTableFactory0));
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertNotSame(slimTableFactory1, slimTableFactory0);
      
      String string1 = "as6tA";
      String string2 = slimTableFactory1.makeTableType(string1);
      assertNotNull(string2);
      assertFalse(slimTableFactory0.equals((Object)slimTableFactory1));
      assertFalse(slimTableFactory1.equals((Object)slimTableFactory0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("6tA", string2);
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertNotSame(slimTableFactory1, slimTableFactory0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      assertNotNull(slimTableFactory0);
      
      SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
      assertNotNull(slimTableFactory1);
      assertFalse(slimTableFactory1.equals((Object)slimTableFactory0));
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertNotSame(slimTableFactory1, slimTableFactory0);
      
      slimTableFactory1.tableTypeArrays = slimTableFactory0.tableTypeArrays;
      assertEquals(0, slimTableFactory1.tableTypeArrays.size());
      assertTrue(slimTableFactory1.tableTypeArrays.isEmpty());
      
      String string0 = "u\\*oRz";
      String string1 = slimTableFactory1.getFullTableName(string0);
      assertNotNull(string1);
      assertFalse(slimTableFactory0.equals((Object)slimTableFactory1));
      assertFalse(slimTableFactory1.equals((Object)slimTableFactory0));
      assertEquals("u\\*oRz", string1);
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertNotSame(slimTableFactory1, slimTableFactory0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      TableTag tableTag0 = null;
      SlimTestContextImpl slimTestContextImpl0 = new SlimTestContextImpl();
      assertNotNull(slimTestContextImpl0);
      
      boolean boolean0 = slimTableFactory0.hasColon(string1);
      assertFalse(slimTableFactory0.equals((Object)slimTableFactory1));
      assertFalse(slimTableFactory1.equals((Object)slimTableFactory0));
      assertFalse(boolean0);
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertNotSame(slimTableFactory1, slimTableFactory0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      String string2 = null;
      // Undeclared exception!
      try { 
        slimTableFactory0.hasColon(string2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.tables.SlimTableFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      assertNotNull(slimTableFactory0);
      
      String string0 = "8{4'~'hG/Kz:yG|O";
      Class<? extends SlimTable> class0 = slimTableFactory0.getTableType(string0);
      assertNull(class0);
      
      String string1 = "m(nQC[;jk\"\\_";
      String string2 = slimTableFactory0.getFullTableName(string1);
      assertNotNull(string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertEquals("m(nQC[;jk\"\\_", string2);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      
      String string3 = "}XMU";
      Class<? extends SlimTable> class1 = slimTableFactory0.getTableType(string3);
      assertNull(class1);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      
      TableTag tableTag0 = new TableTag();
      assertNotNull(tableTag0);
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertFalse(tableTag0.isEmptyXmlTag());
      
      HtmlTable htmlTable0 = null;
      try {
        htmlTable0 = new HtmlTable(tableTag0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.HtmlTable", e);
      }
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      assertNotNull(slimTableFactory0);
      
      String string0 = "IJYYOh";
      String string1 = slimTableFactory0.makeTableType(string0);
      assertNotNull(string1);
      assertEquals("IJYYOh", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      TableTag tableTag0 = new TableTag();
      assertNotNull(tableTag0);
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      
      boolean boolean0 = true;
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      
      NodeList nodeList0 = tableTag0.searchFor(string0, boolean0, locale0);
      assertNotNull(nodeList0);
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertSame(string0, string1);
      
      Node node0 = tableTag0.getPreviousSibling();
      assertNull(node0);
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      
      tableTag0.setChildren(nodeList0);
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertSame(string0, string1);
      
      HtmlTable htmlTable0 = new HtmlTable(tableTag0);
      assertNotNull(htmlTable0);
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals(0, htmlTable0.getRowCount());
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(string0));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      int int0 = htmlTable0.addRow(arrayList0);
      assertFalse(arrayList0.contains(string0));
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals(1, htmlTable0.getRowCount());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, int0);
      
      SlimTable slimTable0 = slimTableFactory0.parseDefineTableTypeTable(htmlTable0);
      assertNull(slimTable0);
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals(1, htmlTable0.getRowCount());
      
      SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
      assertNotNull(slimTableFactory1);
      assertFalse(slimTableFactory1.equals((Object)slimTableFactory0));
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertNotSame(slimTableFactory1, slimTableFactory0);
      
      String string2 = "um";
      String string3 = slimTableFactory1.makeTableType(string2);
      assertNotNull(string3);
      assertFalse(slimTableFactory0.equals((Object)slimTableFactory1));
      assertFalse(slimTableFactory1.equals((Object)slimTableFactory0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("um", string3);
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertNotSame(slimTableFactory1, slimTableFactory0);
      assertSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      
      String string4 = "30|t?00!)B1}V8";
      String string5 = slimTableFactory0.makeTableType(string4);
      assertNotNull(string5);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(slimTableFactory0.equals((Object)slimTableFactory1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertEquals("30|t?00!)B1}V8", string5);
      assertSame(string4, string5);
      assertNotSame(string4, string3);
      assertNotSame(string4, string2);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertNotSame(string5, string0);
      assertNotSame(string5, string2);
      assertNotSame(string5, string1);
      assertSame(string5, string4);
      assertNotSame(string5, string3);
      
      slimTableFactory0.parseDefineTableTypeRow(htmlTable0, int0);
      assertFalse(arrayList0.contains(string0));
      assertFalse(slimTableFactory0.equals((Object)slimTableFactory1));
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals(1, htmlTable0.getRowCount());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotSame(slimTableFactory0, slimTableFactory1);
  }

  @Test(timeout = 11000)
  public void test34()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      assertNotNull(slimTableFactory0);
      
      Table table0 = null;
      SlimTestContextImpl slimTestContextImpl0 = new SlimTestContextImpl();
      assertNotNull(slimTestContextImpl0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)80;
      byteArray0[0] = byte0;
      Class<ScenarioTable> class0 = ScenarioTable.class;
      String string0 = "as,p*HK1=XsL[E#%";
      SlimTable slimTable0 = slimTableFactory0.newTableForType(class0, table0, string0, slimTestContextImpl0);
      assertNotNull(slimTable0);
      assertEquals("UnknownTableType_as,p*HK1=XsL[E#%", slimTable0.getTableName());
      
      byte byte1 = (byte)12;
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-91);
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-79);
      // Undeclared exception!
      try { 
        slimTableFactory0.parseDefineTableTypeRow(table0, byte1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.tables.SlimTableFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test35()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      assertNotNull(slimTableFactory0);
      
      String string0 = "IJYYOh";
      String string1 = slimTableFactory0.makeTableType(string0);
      assertNotNull(string1);
      assertEquals("IJYYOh", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      TableTag tableTag0 = new TableTag();
      assertNotNull(tableTag0);
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      
      boolean boolean0 = false;
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      
      NodeList nodeList0 = tableTag0.searchFor(string0, boolean0, locale0);
      assertNotNull(nodeList0);
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertSame(string0, string1);
      
      nodeList0.add((Node) tableTag0);
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertSame(string0, string1);
      
      Node node0 = tableTag0.getPreviousSibling();
      assertNull(node0);
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      
      tableTag0.setChildren(nodeList0);
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertSame(string0, string1);
      
      HtmlTable htmlTable0 = new HtmlTable(tableTag0);
      assertNotNull(htmlTable0);
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals(0, htmlTable0.getRowCount());
      
      SlimTable slimTable0 = slimTableFactory0.parseDefineTableTypeTable(htmlTable0);
      assertNull(slimTable0);
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals(0, htmlTable0.getRowCount());
      
      String string2 = "-wUF= fl'P";
      String string3 = slimTableFactory0.getFullTableName(string2);
      assertNotNull(string3);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("-wUF= fl'P", string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(string2, string3);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertSame(string3, string2);
      
      SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
      assertNotNull(slimTableFactory1);
      assertFalse(slimTableFactory1.equals((Object)slimTableFactory0));
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertNotSame(slimTableFactory1, slimTableFactory0);
      
      String string4 = "astable ";
      String string5 = slimTableFactory1.makeTableType(string4);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(slimTableFactory0.equals((Object)slimTableFactory1));
      assertFalse(slimTableFactory1.equals((Object)slimTableFactory0));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("table", string5);
      assertNotSame(string5, string0);
      assertNotSame(string5, string3);
      assertNotSame(string5, string1);
      assertNotSame(string5, string4);
      assertNotSame(string5, string2);
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertNotSame(slimTableFactory1, slimTableFactory0);
      assertNotSame(string4, string0);
      assertNotSame(string4, string5);
      assertNotSame(string4, string2);
      assertNotSame(string4, string1);
      assertNotSame(string4, string3);
      
      SlimTable slimTable1 = slimTableFactory1.parseDefineTableTypeTable(htmlTable0);
      assertNull(slimTable1);
      assertFalse(slimTableFactory0.equals((Object)slimTableFactory1));
      assertFalse(slimTableFactory1.equals((Object)slimTableFactory0));
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals(0, htmlTable0.getRowCount());
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertNotSame(slimTableFactory1, slimTableFactory0);
      
      HtmlTable htmlTable1 = new HtmlTable(tableTag0);
      assertNotNull(htmlTable1);
      assertFalse(htmlTable1.equals((Object)htmlTable0));
      assertEquals(0, htmlTable1.getRowCount());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      
      SlimTestContextImpl slimTestContextImpl0 = new SlimTestContextImpl();
      assertNotNull(slimTestContextImpl0);
      
      int int0 = 188;
      // Undeclared exception!
      try { 
        slimTableFactory0.parseDefineTableTypeRow(htmlTable0, int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 188, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 11000)
  public void test36()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      assertNotNull(slimTableFactory0);
      
      String string0 = "IJYYOh";
      String string1 = slimTableFactory0.makeTableType(string0);
      assertNotNull(string1);
      assertEquals("IJYYOh", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      TableTag tableTag0 = new TableTag();
      assertNotNull(tableTag0);
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      
      boolean boolean0 = false;
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      
      NodeList nodeList0 = tableTag0.searchFor(string0, boolean0, locale0);
      assertNotNull(nodeList0);
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertSame(string0, string1);
      
      String string2 = nodeList0.toHtml();
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("", string2);
      assertSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      
      Node node0 = tableTag0.getPreviousSibling();
      assertNull(node0);
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      
      tableTag0.setChildren(nodeList0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertSame(string0, string1);
      assertNotSame(string0, string2);
      
      HtmlTable htmlTable0 = new HtmlTable(tableTag0);
      assertNotNull(htmlTable0);
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertEquals(0, htmlTable0.getRowCount());
      
      SlimTable slimTable0 = slimTableFactory0.parseDefineTableTypeTable(htmlTable0);
      assertNull(slimTable0);
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertEquals(0, htmlTable0.getRowCount());
      
      String string3 = "-wUF= fl'P";
      String string4 = slimTableFactory0.getFullTableName(string3);
      assertNotNull(string4);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("-wUF= fl'P", string4);
      assertNotSame(string3, string2);
      assertSame(string3, string4);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertSame(string4, string3);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string2);
      
      SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
      assertNotNull(slimTableFactory1);
      assertFalse(slimTableFactory1.equals((Object)slimTableFactory0));
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertNotSame(slimTableFactory1, slimTableFactory0);
      
      String string5 = "astable ";
      String string6 = slimTableFactory1.makeTableType(string5);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(slimTableFactory0.equals((Object)slimTableFactory1));
      assertFalse(slimTableFactory1.equals((Object)slimTableFactory0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertEquals("table", string6);
      assertNotSame(string6, string0);
      assertNotSame(string6, string3);
      assertNotSame(string6, string4);
      assertNotSame(string6, string2);
      assertNotSame(string6, string5);
      assertNotSame(string6, string1);
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertNotSame(slimTableFactory1, slimTableFactory0);
      assertNotSame(string5, string3);
      assertNotSame(string5, string6);
      assertNotSame(string5, string0);
      assertNotSame(string5, string2);
      assertNotSame(string5, string4);
      assertNotSame(string5, string1);
      
      SlimTable slimTable1 = slimTableFactory1.parseDefineTableTypeTable(htmlTable0);
      assertNull(slimTable1);
      assertFalse(slimTableFactory0.equals((Object)slimTableFactory1));
      assertFalse(slimTableFactory1.equals((Object)slimTableFactory0));
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertEquals(0, htmlTable0.getRowCount());
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertNotSame(slimTableFactory1, slimTableFactory0);
      
      HtmlTable htmlTable1 = new HtmlTable(tableTag0);
      assertNotNull(htmlTable1);
      assertFalse(htmlTable1.equals((Object)htmlTable0));
      assertEquals(0, htmlTable1.getRowCount());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      
      SlimTestContextImpl slimTestContextImpl0 = new SlimTestContextImpl();
      assertNotNull(slimTestContextImpl0);
      
      List<List<String>> list0 = htmlTable1.asList();
      assertNotNull(list0);
      assertFalse(htmlTable1.equals((Object)htmlTable0));
      assertEquals(0, htmlTable1.getRowCount());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotSame(htmlTable1, htmlTable0);
      
      int int0 = (-4029);
      // Undeclared exception!
      try { 
        slimTableFactory1.parseDefineTableTypeRow(htmlTable0, int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 11000)
  public void test37()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      assertNotNull(slimTableFactory0);
      
      String string0 = "0IJYYOh";
      String string1 = slimTableFactory0.makeTableType(string0);
      assertNotNull(string1);
      assertEquals("0IJYYOh", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      TableTag tableTag0 = new TableTag();
      assertNotNull(tableTag0);
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals((-1), tableTag0.getStartPosition());
      
      boolean boolean0 = true;
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      NodeList nodeList0 = tableTag0.searchFor(string0, boolean0, locale0);
      assertNotNull(nodeList0);
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertSame(string0, string1);
      
      tableTag0.setChildren(nodeList0);
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertSame(string0, string1);
      
      HtmlTable htmlTable0 = new HtmlTable(tableTag0);
      assertNotNull(htmlTable0);
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals(0, htmlTable0.getRowCount());
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(string0));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      boolean boolean1 = arrayList0.add(string1);
      assertTrue(arrayList0.contains(string0));
      assertTrue(boolean1 == boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      int int0 = htmlTable0.addRow(arrayList0);
      assertTrue(arrayList0.contains(string0));
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals(1, htmlTable0.getRowCount());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(0, int0);
      
      SlimTable slimTable0 = slimTableFactory0.parseDefineTableTypeTable(htmlTable0);
      assertNull(slimTable0);
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals(1, htmlTable0.getRowCount());
      
      String string2 = "define table type";
      boolean boolean2 = arrayList0.add(string2);
      assertTrue(arrayList0.contains(string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      
      SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
      assertNotNull(slimTableFactory1);
      assertFalse(slimTableFactory1.equals((Object)slimTableFactory0));
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertNotSame(slimTableFactory1, slimTableFactory0);
      
      String string3 = "um";
      String string4 = slimTableFactory1.makeTableType(string3);
      assertNotNull(string4);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(slimTableFactory0.equals((Object)slimTableFactory1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(slimTableFactory1.equals((Object)slimTableFactory0));
      assertEquals("um", string4);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertSame(string3, string4);
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertNotSame(string4, string2);
      assertNotSame(string4, string0);
      assertNotSame(string4, string1);
      assertSame(string4, string3);
      assertNotSame(slimTableFactory1, slimTableFactory0);
      
      String string5 = "30|t?00!)B1}V8";
      String string6 = slimTableFactory0.makeTableType(string5);
      assertNotNull(string6);
      assertFalse(slimTableFactory0.equals((Object)slimTableFactory1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertEquals("30|t?00!)B1}V8", string6);
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertNotSame(string5, string0);
      assertNotSame(string5, string1);
      assertNotSame(string5, string4);
      assertNotSame(string5, string2);
      assertNotSame(string5, string3);
      assertSame(string5, string6);
      assertNotSame(string6, string3);
      assertSame(string6, string5);
      assertNotSame(string6, string4);
      assertNotSame(string6, string0);
      assertNotSame(string6, string2);
      assertNotSame(string6, string1);
      
      slimTableFactory0.parseDefineTableTypeRow(htmlTable0, int0);
      assertTrue(arrayList0.contains(string0));
      assertFalse(arrayList0.contains(string3));
      assertFalse(slimTableFactory0.equals((Object)slimTableFactory1));
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals(1, htmlTable0.getRowCount());
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertNotSame(slimTableFactory0, slimTableFactory1);
      
      SlimTestContextImpl slimTestContextImpl0 = new SlimTestContextImpl();
      assertNotNull(slimTestContextImpl0);
      
      ScenarioTable scenarioTable0 = new ScenarioTable(htmlTable0, string2, slimTestContextImpl0);
      assertNotNull(scenarioTable0);
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string0));
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals((-1), tableTag0.getStartPosition());
      assertNull(scenarioTable0.getName());
      assertFalse(scenarioTable0.isParameterized());
      assertEquals("scenarioTable_define table type", scenarioTable0.getTableName());
      assertEquals(1, htmlTable0.getRowCount());
      
      ScenarioTable.ScenarioTestContext scenarioTable_ScenarioTestContext0 = scenarioTable0.new ScenarioTestContext(slimTestContextImpl0);
      assertNotNull(scenarioTable_ScenarioTestContext0);
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string0));
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals((-1), tableTag0.getStartPosition());
      assertNull(scenarioTable0.getName());
      assertFalse(scenarioTable0.isParameterized());
      assertEquals("scenarioTable_define table type", scenarioTable0.getTableName());
      assertEquals(1, htmlTable0.getRowCount());
      
      SlimTable slimTable1 = slimTableFactory1.makeSlimTable(htmlTable0, string4, scenarioTable_ScenarioTestContext0);
      assertNotNull(slimTable1);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string6));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string5));
      assertFalse(slimTableFactory0.equals((Object)slimTableFactory1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string6));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string0));
      assertFalse(slimTableFactory1.equals((Object)slimTableFactory0));
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals((-1), tableTag0.getStartPosition());
      assertNull(scenarioTable0.getName());
      assertFalse(scenarioTable0.isParameterized());
      assertEquals("scenarioTable_define table type", scenarioTable0.getTableName());
      assertEquals("decisionTable_um", slimTable1.getTableName());
      assertEquals(1, htmlTable0.getRowCount());
      assertNotSame(string3, string0);
      assertNotSame(string3, string6);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string5);
      assertSame(string3, string4);
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertNotSame(string4, string2);
      assertNotSame(string4, string5);
      assertNotSame(string4, string0);
      assertNotSame(string4, string1);
      assertSame(string4, string3);
      assertNotSame(string4, string6);
      assertNotSame(string2, string3);
      assertNotSame(string2, string6);
      assertNotSame(string2, string5);
      assertNotSame(string2, string1);
      assertNotSame(string2, string4);
      assertNotSame(string2, string0);
      assertNotSame(slimTableFactory1, slimTableFactory0);
  }

  @Test(timeout = 11000)
  public void test38()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      assertNotNull(slimTableFactory0);
      
      String string0 = "0IJYYOh";
      String string1 = slimTableFactory0.makeTableType(string0);
      assertNotNull(string1);
      assertEquals("0IJYYOh", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      TableTag tableTag0 = new TableTag();
      assertNotNull(tableTag0);
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertFalse(tableTag0.isEmptyXmlTag());
      
      boolean boolean0 = true;
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      
      NodeList nodeList0 = tableTag0.searchFor(string0, boolean0, locale0);
      assertNotNull(nodeList0);
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertSame(string0, string1);
      
      tableTag0.setChildren(nodeList0);
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertSame(string0, string1);
      
      HtmlTable htmlTable0 = new HtmlTable(tableTag0);
      assertNotNull(htmlTable0);
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals(0, htmlTable0.getRowCount());
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(string1));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      boolean boolean1 = arrayList0.add(string0);
      assertTrue(arrayList0.contains(string1));
      assertTrue(boolean1 == boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean1);
      assertSame(string0, string1);
      
      boolean boolean2 = arrayList0.add(string1);
      assertTrue(arrayList0.contains(string1));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean2);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      int int0 = htmlTable0.addRow(arrayList0);
      assertTrue(arrayList0.contains(string1));
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals(1, htmlTable0.getRowCount());
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(0, int0);
      
      SlimTable slimTable0 = slimTableFactory0.parseDefineTableTypeTable(htmlTable0);
      assertNull(slimTable0);
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals(1, htmlTable0.getRowCount());
      
      boolean boolean3 = arrayList0.add(string1);
      assertTrue(arrayList0.contains(string1));
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertEquals(3, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean3);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
      assertNotNull(slimTableFactory1);
      assertFalse(slimTableFactory1.equals((Object)slimTableFactory0));
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertNotSame(slimTableFactory1, slimTableFactory0);
      
      String string2 = "um";
      String string3 = slimTableFactory1.makeTableType(string2);
      assertNotNull(string3);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(slimTableFactory0.equals((Object)slimTableFactory1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(slimTableFactory1.equals((Object)slimTableFactory0));
      assertEquals("um", string3);
      assertSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(slimTableFactory1, slimTableFactory0);
      
      String string4 = "30|t?00!)B1}V8";
      String string5 = slimTableFactory0.makeTableType(string4);
      assertNotNull(string5);
      assertFalse(slimTableFactory0.equals((Object)slimTableFactory1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertEquals("30|t?00!)B1}V8", string5);
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string2);
      assertNotSame(string4, string3);
      assertSame(string4, string5);
      assertNotSame(string4, string1);
      assertNotSame(string5, string2);
      assertSame(string5, string4);
      assertNotSame(string5, string0);
      assertNotSame(string5, string1);
      assertNotSame(string5, string3);
      
      slimTableFactory0.parseDefineTableTypeRow(htmlTable0, int0);
      assertTrue(arrayList0.contains(string0));
      assertFalse(arrayList0.contains(string2));
      assertFalse(slimTableFactory0.equals((Object)slimTableFactory1));
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals(1, htmlTable0.getRowCount());
      assertEquals(3, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertNotSame(slimTableFactory0, slimTableFactory1);
      
      Class<DecisionTable> class0 = DecisionTable.class;
      SlimTestContextImpl slimTestContextImpl0 = new SlimTestContextImpl();
      assertNotNull(slimTestContextImpl0);
      
      SlimTable slimTable1 = slimTableFactory0.newTableForType(class0, htmlTable0, string3, slimTestContextImpl0);
      assertNotNull(slimTable1);
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string5));
      assertFalse(slimTableFactory0.equals((Object)slimTableFactory1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string1));
      assertFalse(slimTableFactory1.equals((Object)slimTableFactory0));
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals("decisionTable_um", slimTable1.getTableName());
      assertEquals(1, htmlTable0.getRowCount());
      assertSame(string2, string3);
      assertNotSame(string2, string4);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string5);
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string4);
      assertNotSame(string3, string5);
      assertNotSame(string3, string1);
      assertNotSame(slimTableFactory1, slimTableFactory0);
      
      SlimTableFactory slimTableFactory2 = slimTableFactory1.copy();
      assertNotNull(slimTableFactory2);
      assertFalse(slimTableFactory0.equals((Object)slimTableFactory1));
      assertFalse(slimTableFactory2.equals((Object)slimTableFactory0));
      assertFalse(slimTableFactory2.equals((Object)slimTableFactory1));
      assertFalse(slimTableFactory1.equals((Object)slimTableFactory0));
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertNotSame(slimTableFactory0, slimTableFactory2);
      assertNotSame(slimTableFactory2, slimTableFactory0);
      assertNotSame(slimTableFactory2, slimTableFactory1);
      assertNotSame(slimTableFactory1, slimTableFactory0);
      assertNotSame(slimTableFactory1, slimTableFactory2);
  }

  @Test(timeout = 11000)
  public void test39()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      assertNotNull(slimTableFactory0);
      
      String string0 = "0IJYYOh";
      String string1 = slimTableFactory0.makeTableType(string0);
      assertNotNull(string1);
      assertEquals("0IJYYOh", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      TableTag tableTag0 = new TableTag();
      assertNotNull(tableTag0);
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEndTag());
      
      boolean boolean0 = true;
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.toString());
      
      NodeList nodeList0 = tableTag0.searchFor(string0, boolean0, locale0);
      assertNotNull(nodeList0);
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.toString());
      assertSame(string0, string1);
      
      tableTag0.setChildren(nodeList0);
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.toString());
      assertSame(string0, string1);
      
      HtmlTable htmlTable0 = new HtmlTable(tableTag0);
      assertNotNull(htmlTable0);
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals(0, htmlTable0.getRowCount());
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(string1));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      boolean boolean1 = arrayList0.add(string1);
      assertTrue(arrayList0.contains(string1));
      assertTrue(boolean1 == boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      boolean boolean2 = arrayList0.add(string1);
      assertTrue(arrayList0.contains(string1));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean2);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      int int0 = htmlTable0.addRow(arrayList0);
      assertTrue(arrayList0.contains(string1));
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals(1, htmlTable0.getRowCount());
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(0, int0);
      
      SlimTable slimTable0 = slimTableFactory0.parseDefineTableTypeTable(htmlTable0);
      assertNull(slimTable0);
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals(1, htmlTable0.getRowCount());
      
      boolean boolean3 = arrayList0.add(string1);
      assertTrue(arrayList0.contains(string1));
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertEquals(3, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean3);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
      assertNotNull(slimTableFactory1);
      assertFalse(slimTableFactory1.equals((Object)slimTableFactory0));
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertNotSame(slimTableFactory1, slimTableFactory0);
      
      String string2 = "um";
      String string3 = "30|t?00!)B1}V8";
      String string4 = slimTableFactory0.makeTableType(string3);
      assertNotNull(string4);
      assertFalse(slimTableFactory0.equals((Object)slimTableFactory1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("30|t?00!)B1}V8", string4);
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertSame(string3, string4);
      assertNotSame(string3, string0);
      assertNotSame(string4, string2);
      assertNotSame(string4, string0);
      assertNotSame(string4, string1);
      assertSame(string4, string3);
      
      slimTableFactory0.parseDefineTableTypeRow(htmlTable0, int0);
      assertTrue(arrayList0.contains(string1));
      assertFalse(arrayList0.contains(string4));
      assertFalse(slimTableFactory0.equals((Object)slimTableFactory1));
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals(1, htmlTable0.getRowCount());
      assertEquals(3, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertNotSame(slimTableFactory0, slimTableFactory1);
      
      SlimTestContextImpl slimTestContextImpl0 = new SlimTestContextImpl();
      assertNotNull(slimTestContextImpl0);
      
      ScenarioTable scenarioTable0 = new ScenarioTable(htmlTable0, string0, slimTestContextImpl0);
      assertNotNull(scenarioTable0);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals("scenarioTable_0IJYYOh", scenarioTable0.getTableName());
      assertNull(scenarioTable0.getName());
      assertFalse(scenarioTable0.isParameterized());
      assertEquals(1, htmlTable0.getRowCount());
      
      ScenarioTable.ScenarioTestContext scenarioTable_ScenarioTestContext0 = scenarioTable0.new ScenarioTestContext(slimTestContextImpl0);
      assertNotNull(scenarioTable_ScenarioTestContext0);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals("scenarioTable_0IJYYOh", scenarioTable0.getTableName());
      assertNull(scenarioTable0.getName());
      assertFalse(scenarioTable0.isParameterized());
      assertEquals(1, htmlTable0.getRowCount());
      
      SlimTable slimTable1 = slimTableFactory1.makeSlimTable(htmlTable0, string1, scenarioTable_ScenarioTestContext0);
      assertNotNull(slimTable1);
      assertFalse(slimTableFactory0.equals((Object)slimTableFactory1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(slimTableFactory1.equals((Object)slimTableFactory0));
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals("scenarioTable_0IJYYOh", scenarioTable0.getTableName());
      assertNull(scenarioTable0.getName());
      assertFalse(scenarioTable0.isParameterized());
      assertEquals("decisionTable_0IJYYOh", slimTable1.getTableName());
      assertEquals(1, htmlTable0.getRowCount());
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertNotSame(string0, string3);
      assertSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string4);
      assertNotSame(string1, string4);
      assertSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(slimTableFactory1, slimTableFactory0);
      
      SlimTable slimTable2 = slimTableFactory1.parseDefineTableTypeTable(htmlTable0);
      assertNull(slimTable2);
      assertFalse(slimTableFactory0.equals((Object)slimTableFactory1));
      assertFalse(slimTableFactory1.equals((Object)slimTableFactory0));
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals(1, htmlTable0.getRowCount());
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertNotSame(slimTableFactory1, slimTableFactory0);
      
      String string5 = slimTableFactory0.getFullTableName(string0);
      assertNotNull(string5);
      assertFalse(slimTableFactory0.equals((Object)slimTableFactory1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertEquals("0ijyyoh:0IJYYOh", string5);
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertNotSame(string0, string5);
      assertNotSame(string0, string3);
      assertSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string4);
      assertNotSame(string5, string0);
      assertNotSame(string5, string3);
      assertNotSame(string5, string2);
      assertNotSame(string5, string1);
      assertNotSame(string5, string4);
      
      System.setCurrentTimeMillis(int0);
      assertTrue(arrayList0.contains(string0));
      assertFalse(arrayList0.contains(string3));
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals(1, htmlTable0.getRowCount());
      assertEquals(3, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
  }

  @Test(timeout = 11000)
  public void test40()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      assertNotNull(slimTableFactory0);
      
      String string0 = "0IJYYOh";
      String string1 = slimTableFactory0.makeTableType(string0);
      assertNotNull(string1);
      assertEquals("0IJYYOh", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      TableTag tableTag0 = new TableTag();
      assertNotNull(tableTag0);
      assertEquals((-1), tableTag0.getTagBegin());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals("TABLE", tableTag0.getRawTagName());
      
      boolean boolean0 = true;
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      
      NodeList nodeList0 = tableTag0.searchFor(string0, boolean0, locale0);
      assertNotNull(nodeList0);
      assertEquals((-1), tableTag0.getTagBegin());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertSame(string0, string1);
      
      tableTag0.setChildren(nodeList0);
      assertEquals((-1), tableTag0.getTagBegin());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertSame(string0, string1);
      
      HtmlTable htmlTable0 = new HtmlTable(tableTag0);
      assertNotNull(htmlTable0);
      assertEquals((-1), tableTag0.getTagBegin());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals(0, htmlTable0.getRowCount());
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(string0));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      String string2 = "as0ijyyoh";
      boolean boolean1 = arrayList0.add(string2);
      assertTrue(arrayList0.contains(string2));
      assertFalse(arrayList0.contains(string1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertTrue(boolean1 == boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      
      boolean boolean2 = arrayList0.add(string0);
      assertTrue(arrayList0.contains(string2));
      assertFalse(string0.equals((Object)string2));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean2);
      assertSame(string0, string1);
      assertNotSame(string0, string2);
      
      boolean boolean3 = arrayList0.add(string1);
      assertTrue(arrayList0.contains(string2));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertEquals(3, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean3);
      assertSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(string1, string0);
      assertNotSame(string1, string2);
      
      int int0 = htmlTable0.addRow(arrayList0);
      assertTrue(arrayList0.contains(string2));
      assertEquals((-1), tableTag0.getTagBegin());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals(1, htmlTable0.getRowCount());
      assertEquals(3, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(0, int0);
      
      SlimTable slimTable0 = slimTableFactory0.parseDefineTableTypeTable(htmlTable0);
      assertNull(slimTable0);
      assertEquals((-1), tableTag0.getTagBegin());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals(1, htmlTable0.getRowCount());
      
      boolean boolean4 = slimTableFactory0.hasColon(string0);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertFalse(string0.equals((Object)string2));
      assertFalse(boolean4);
      assertSame(string0, string1);
      assertNotSame(string0, string2);
      
      SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
      assertNotNull(slimTableFactory1);
      assertFalse(slimTableFactory1.equals((Object)slimTableFactory0));
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertNotSame(slimTableFactory1, slimTableFactory0);
      
      String string3 = "um";
      String string4 = slimTableFactory1.makeTableType(string3);
      assertNotNull(string4);
      assertFalse(slimTableFactory0.equals((Object)slimTableFactory1));
      assertFalse(slimTableFactory1.equals((Object)slimTableFactory0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("um", string4);
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertNotSame(slimTableFactory1, slimTableFactory0);
      assertSame(string3, string4);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string4, string1);
      assertSame(string4, string3);
      assertNotSame(string4, string2);
      assertNotSame(string4, string0);
      
      String string5 = "30|t?00!)B1}V8";
      String string6 = slimTableFactory0.makeTableType(string5);
      assertNotNull(string6);
      assertFalse(slimTableFactory0.equals((Object)slimTableFactory1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertEquals("30|t?00!)B1}V8", string6);
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertNotSame(string5, string2);
      assertNotSame(string5, string3);
      assertSame(string5, string6);
      assertNotSame(string5, string4);
      assertNotSame(string5, string0);
      assertNotSame(string5, string1);
      assertNotSame(string6, string1);
      assertNotSame(string6, string0);
      assertNotSame(string6, string4);
      assertNotSame(string6, string2);
      assertSame(string6, string5);
      assertNotSame(string6, string3);
      
      slimTableFactory0.parseDefineTableTypeRow(htmlTable0, int0);
      assertTrue(arrayList0.contains(string2));
      assertFalse(arrayList0.contains(string4));
      assertFalse(slimTableFactory0.equals((Object)slimTableFactory1));
      assertEquals((-1), tableTag0.getTagBegin());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals(1, htmlTable0.getRowCount());
      assertEquals(3, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertNotSame(slimTableFactory0, slimTableFactory1);
      
      Class<DecisionTable> class0 = DecisionTable.class;
      SlimTestContextImpl slimTestContextImpl0 = new SlimTestContextImpl();
      assertNotNull(slimTestContextImpl0);
      
      SlimTable slimTable1 = slimTableFactory0.newTableForType(class0, htmlTable0, string4, slimTestContextImpl0);
      assertNotNull(slimTable1);
      assertFalse(slimTableFactory0.equals((Object)slimTableFactory1));
      assertFalse(slimTableFactory1.equals((Object)slimTableFactory0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string6));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string6));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals((-1), tableTag0.getTagBegin());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals(1, htmlTable0.getRowCount());
      assertEquals("decisionTable_um", slimTable1.getTableName());
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertNotSame(slimTableFactory1, slimTableFactory0);
      assertSame(string3, string4);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string6);
      assertNotSame(string3, string5);
      assertNotSame(string4, string5);
      assertNotSame(string4, string6);
      assertNotSame(string4, string1);
      assertSame(string4, string3);
      assertNotSame(string4, string2);
      assertNotSame(string4, string0);
  }

  @Test(timeout = 11000)
  public void test41()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      assertNotNull(slimTableFactory0);
      
      String string0 = "0IJYY\\h";
      String string1 = slimTableFactory0.makeTableType(string0);
      assertNotNull(string1);
      assertEquals("0IJYY\\h", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      TableTag tableTag0 = new TableTag();
      assertNotNull(tableTag0);
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals("TABLE", tableTag0.getRawTagName());
      
      boolean boolean0 = true;
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      
      NodeList nodeList0 = tableTag0.searchFor(string0, boolean0, locale0);
      assertNotNull(nodeList0);
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertSame(string0, string1);
      
      tableTag0.setChildren(nodeList0);
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertSame(string0, string1);
      
      HtmlTable htmlTable0 = new HtmlTable(tableTag0);
      assertNotNull(htmlTable0);
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals(0, htmlTable0.getRowCount());
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(string1));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      boolean boolean1 = arrayList0.add(string1);
      assertTrue(arrayList0.contains(string1));
      assertTrue(boolean1 == boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      boolean boolean2 = arrayList0.add(string1);
      assertTrue(arrayList0.contains(string1));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertTrue(boolean2);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      int int0 = htmlTable0.addRow(arrayList0);
      assertTrue(arrayList0.contains(string1));
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals(1, htmlTable0.getRowCount());
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertEquals(0, int0);
      
      SlimTable slimTable0 = slimTableFactory0.parseDefineTableTypeTable(htmlTable0);
      assertNull(slimTable0);
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals(1, htmlTable0.getRowCount());
      
      boolean boolean3 = arrayList0.add(string1);
      assertTrue(arrayList0.contains(string1));
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(3, arrayList0.size());
      assertTrue(boolean3);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
      assertNotNull(slimTableFactory1);
      assertFalse(slimTableFactory1.equals((Object)slimTableFactory0));
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertNotSame(slimTableFactory1, slimTableFactory0);
      
      String string2 = "um";
      String string3 = "30|t?00!)B1}V8";
      String string4 = slimTableFactory0.makeTableType(string3);
      assertNotNull(string4);
      assertFalse(slimTableFactory0.equals((Object)slimTableFactory1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("30|t?00!)B1}V8", string4);
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertSame(string3, string4);
      assertSame(string4, string3);
      assertNotSame(string4, string0);
      assertNotSame(string4, string2);
      assertNotSame(string4, string1);
      
      slimTableFactory0.parseDefineTableTypeRow(htmlTable0, int0);
      assertFalse(arrayList0.contains(string2));
      assertTrue(arrayList0.contains(string1));
      assertFalse(slimTableFactory0.equals((Object)slimTableFactory1));
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals(1, htmlTable0.getRowCount());
      assertFalse(arrayList0.isEmpty());
      assertEquals(3, arrayList0.size());
      assertNotSame(slimTableFactory0, slimTableFactory1);
      
      SlimTestContextImpl slimTestContextImpl0 = new SlimTestContextImpl();
      assertNotNull(slimTestContextImpl0);
      
      ScenarioTable scenarioTable0 = new ScenarioTable(htmlTable0, string0, slimTestContextImpl0);
      assertNotNull(scenarioTable0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals("scenarioTable_0IJYY\\h", scenarioTable0.getTableName());
      assertNull(scenarioTable0.getName());
      assertFalse(scenarioTable0.isParameterized());
      assertEquals(1, htmlTable0.getRowCount());
      
      ScenarioTable.ScenarioTestContext scenarioTable_ScenarioTestContext0 = scenarioTable0.new ScenarioTestContext(slimTestContextImpl0);
      assertNotNull(scenarioTable_ScenarioTestContext0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals("scenarioTable_0IJYY\\h", scenarioTable0.getTableName());
      assertNull(scenarioTable0.getName());
      assertFalse(scenarioTable0.isParameterized());
      assertEquals(1, htmlTable0.getRowCount());
      
      SlimTable slimTable1 = slimTableFactory1.makeSlimTable(htmlTable0, string1, scenarioTable_ScenarioTestContext0);
      assertNotNull(slimTable1);
      assertFalse(slimTableFactory0.equals((Object)slimTableFactory1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string2));
      assertFalse(slimTableFactory1.equals((Object)slimTableFactory0));
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals("scenarioTable_0IJYY\\h", scenarioTable0.getTableName());
      assertNull(scenarioTable0.getName());
      assertFalse(scenarioTable0.isParameterized());
      assertEquals("decisionTable_0IJYY\\h", slimTable1.getTableName());
      assertEquals(1, htmlTable0.getRowCount());
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string4);
      assertNotSame(string1, string3);
      assertSame(string1, string0);
      assertNotSame(string1, string4);
      assertNotSame(string1, string2);
      assertNotSame(slimTableFactory1, slimTableFactory0);
      
      SlimTable slimTable2 = slimTableFactory1.parseDefineTableTypeTable(htmlTable0);
      assertNull(slimTable2);
      assertFalse(slimTableFactory0.equals((Object)slimTableFactory1));
      assertFalse(slimTableFactory1.equals((Object)slimTableFactory0));
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals(1, htmlTable0.getRowCount());
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertNotSame(slimTableFactory1, slimTableFactory0);
      
      String string5 = slimTableFactory0.getFullTableName(string0);
      assertNotNull(string5);
      assertFalse(slimTableFactory0.equals((Object)slimTableFactory1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertEquals("0ijyy\\h:0IJYY\\h", string5);
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string5);
      assertNotSame(string0, string3);
      assertNotSame(string0, string4);
      assertNotSame(string5, string4);
      assertNotSame(string5, string1);
      assertNotSame(string5, string3);
      assertNotSame(string5, string2);
      assertNotSame(string5, string0);
      
      System.setCurrentTimeMillis(int0);
      assertFalse(arrayList0.contains(string2));
      assertTrue(arrayList0.contains(string1));
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals(1, htmlTable0.getRowCount());
      assertFalse(arrayList0.isEmpty());
      assertEquals(3, arrayList0.size());
  }

  @Test(timeout = 11000)
  public void test42()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      assertNotNull(slimTableFactory0);
      
      String string0 = "0IJYYOh";
      String string1 = slimTableFactory0.makeTableType(string0);
      assertNotNull(string1);
      assertEquals("0IJYYOh", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      TableTag tableTag0 = new TableTag();
      assertNotNull(tableTag0);
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      
      boolean boolean0 = true;
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      
      NodeList nodeList0 = tableTag0.searchFor(string0, boolean0, locale0);
      assertNotNull(nodeList0);
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertSame(string0, string1);
      
      tableTag0.setChildren(nodeList0);
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertSame(string0, string1);
      
      HtmlTable htmlTable0 = new HtmlTable(tableTag0);
      assertNotNull(htmlTable0);
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals(0, htmlTable0.getRowCount());
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(string1));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      boolean boolean1 = arrayList0.add(string1);
      assertTrue(arrayList0.contains(string1));
      assertTrue(boolean1 == boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      boolean boolean2 = arrayList0.add(string1);
      assertTrue(arrayList0.contains(string1));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean2);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      int int0 = htmlTable0.addRow(arrayList0);
      assertTrue(arrayList0.contains(string1));
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals(1, htmlTable0.getRowCount());
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(0, int0);
      
      SlimTable slimTable0 = slimTableFactory0.parseDefineTableTypeTable(htmlTable0);
      assertNull(slimTable0);
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals(1, htmlTable0.getRowCount());
      
      boolean boolean3 = arrayList0.add(string1);
      assertTrue(arrayList0.contains(string1));
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(arrayList0.isEmpty());
      assertEquals(3, arrayList0.size());
      assertTrue(boolean3);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
      assertNotNull(slimTableFactory1);
      assertFalse(slimTableFactory1.equals((Object)slimTableFactory0));
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertNotSame(slimTableFactory1, slimTableFactory0);
      
      String string2 = "um";
      String string3 = "30|t?00!)B1}V8";
      String string4 = slimTableFactory0.makeTableType(string3);
      assertNotNull(string4);
      assertFalse(slimTableFactory0.equals((Object)slimTableFactory1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("30|t?00!)B1}V8", string4);
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertNotSame(string3, string0);
      assertSame(string3, string4);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string4, string2);
      assertNotSame(string4, string0);
      assertNotSame(string4, string1);
      assertSame(string4, string3);
      
      slimTableFactory0.parseDefineTableTypeRow(htmlTable0, int0);
      assertTrue(arrayList0.contains(string0));
      assertFalse(arrayList0.contains(string3));
      assertFalse(slimTableFactory0.equals((Object)slimTableFactory1));
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals(1, htmlTable0.getRowCount());
      assertFalse(arrayList0.isEmpty());
      assertEquals(3, arrayList0.size());
      assertNotSame(slimTableFactory0, slimTableFactory1);
      
      SlimTestContextImpl slimTestContextImpl0 = new SlimTestContextImpl();
      assertNotNull(slimTestContextImpl0);
      
      ScenarioTable scenarioTable0 = new ScenarioTable(htmlTable0, string0, slimTestContextImpl0);
      assertNotNull(scenarioTable0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals("scenarioTable_0IJYYOh", scenarioTable0.getTableName());
      assertNull(scenarioTable0.getName());
      assertFalse(scenarioTable0.isParameterized());
      assertEquals(1, htmlTable0.getRowCount());
      
      ScenarioTable.ScenarioTestContext scenarioTable_ScenarioTestContext0 = scenarioTable0.new ScenarioTestContext(slimTestContextImpl0);
      assertNotNull(scenarioTable_ScenarioTestContext0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals("scenarioTable_0IJYYOh", scenarioTable0.getTableName());
      assertNull(scenarioTable0.getName());
      assertFalse(scenarioTable0.isParameterized());
      assertEquals(1, htmlTable0.getRowCount());
      
      slimTableFactory1.tableTypeArrays = slimTableFactory0.tableTypeArrays;
      assertFalse(slimTableFactory1.tableTypeArrays.isEmpty());
      assertEquals(1, slimTableFactory1.tableTypeArrays.size());
      
      SlimTable slimTable1 = slimTableFactory1.makeSlimTable(htmlTable0, string1, scenarioTable_ScenarioTestContext0);
      assertNotNull(slimTable1);
      assertFalse(slimTableFactory0.equals((Object)slimTableFactory1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string2));
      assertFalse(slimTableFactory1.equals((Object)slimTableFactory0));
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals("scenarioTable_0IJYYOh", scenarioTable0.getTableName());
      assertNull(scenarioTable0.getName());
      assertFalse(scenarioTable0.isParameterized());
      assertEquals("UnknownTableType_0IJYYOh", slimTable1.getTableName());
      assertEquals(1, htmlTable0.getRowCount());
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string4);
      assertNotSame(string1, string3);
      assertNotSame(string1, string4);
      assertSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(slimTableFactory1, slimTableFactory0);
      
      SlimTable slimTable2 = slimTableFactory1.parseDefineTableTypeTable(htmlTable0);
      assertNull(slimTable2);
      assertFalse(slimTableFactory0.equals((Object)slimTableFactory1));
      assertFalse(slimTableFactory1.equals((Object)slimTableFactory0));
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals(1, htmlTable0.getRowCount());
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertNotSame(slimTableFactory1, slimTableFactory0);
      
      String string5 = slimTableFactory0.getFullTableName(string0);
      assertNotNull(string5);
      assertFalse(slimTableFactory0.equals((Object)slimTableFactory1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertEquals("0ijyyoh:0IJYYOh", string5);
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string5);
      assertNotSame(string0, string3);
      assertNotSame(string0, string4);
      assertNotSame(string5, string4);
      assertNotSame(string5, string3);
      assertNotSame(string5, string0);
      assertNotSame(string5, string1);
      assertNotSame(string5, string2);
      
      System.setCurrentTimeMillis(int0);
      assertTrue(arrayList0.contains(string0));
      assertFalse(arrayList0.contains(string3));
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals(1, htmlTable0.getRowCount());
      assertFalse(arrayList0.isEmpty());
      assertEquals(3, arrayList0.size());
      
      String string6 = "1~,Dw1PZW};#5hhuQj";
      String string7 = slimTableFactory1.makeTableType(string6);
      assertNotNull(string7);
      assertFalse(slimTableFactory0.equals((Object)slimTableFactory1));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(slimTableFactory1.equals((Object)slimTableFactory0));
      assertEquals("1~,Dw1PZW};#5hhuQj", string7);
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertNotSame(string6, string1);
      assertNotSame(string6, string2);
      assertNotSame(string6, string0);
      assertNotSame(string6, string5);
      assertNotSame(string6, string3);
      assertSame(string6, string7);
      assertNotSame(string6, string4);
      assertNotSame(string7, string0);
      assertSame(string7, string6);
      assertNotSame(string7, string2);
      assertNotSame(string7, string1);
      assertNotSame(string7, string4);
      assertNotSame(string7, string3);
      assertNotSame(string7, string5);
      assertNotSame(slimTableFactory1, slimTableFactory0);
  }

  @Test(timeout = 11000)
  public void test43()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      assertNotNull(slimTableFactory0);
      
      String string0 = "org.eclipse.jgit.api.RebaseResult";
      String string1 = slimTableFactory0.makeTableType(string0);
      assertNotNull(string1);
      assertEquals("org.eclipse.jgit.api.RebaseResult", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      TableTag tableTag0 = new TableTag();
      assertNotNull(tableTag0);
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getTagBegin());
      
      boolean boolean0 = true;
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      
      NodeList nodeList0 = tableTag0.searchFor(string0, boolean0, locale0);
      assertNotNull(nodeList0);
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertSame(string0, string1);
      
      Class<ScenarioAndDecisionTableExtensionTest.ScenarioTableWithDifferentScript> class0 = ScenarioAndDecisionTableExtensionTest.ScenarioTableWithDifferentScript.class;
      slimTableFactory0.addTableType(string1, class0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      tableTag0.setChildren(nodeList0);
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertSame(string0, string1);
      
      HtmlTable htmlTable0 = new HtmlTable(tableTag0);
      assertNotNull(htmlTable0);
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals(0, htmlTable0.getRowCount());
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(string0));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      boolean boolean1 = arrayList0.add(string1);
      assertTrue(arrayList0.contains(string0));
      assertTrue(boolean1 == boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      int int0 = htmlTable0.addRow(arrayList0);
      assertTrue(arrayList0.contains(string0));
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals(1, htmlTable0.getRowCount());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(0, int0);
      
      SlimTable slimTable0 = slimTableFactory0.parseDefineTableTypeTable(htmlTable0);
      assertNull(slimTable0);
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals(1, htmlTable0.getRowCount());
      
      String string2 = "define table type";
      boolean boolean2 = new Boolean(boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean2);
      
      String string3 = "org.eclipse.jgit.treewalk.filter.PathFilterGroup";
      boolean boolean3 = arrayList0.add(string3);
      assertFalse(arrayList0.contains(string2));
      assertTrue(arrayList0.contains(string0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertTrue(boolean3);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      
      SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
      assertNotNull(slimTableFactory1);
      assertFalse(slimTableFactory1.equals((Object)slimTableFactory0));
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertNotSame(slimTableFactory1, slimTableFactory0);
      
      String string4 = slimTableFactory1.makeTableType(string1);
      assertNotNull(string4);
      assertFalse(slimTableFactory0.equals((Object)slimTableFactory1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(slimTableFactory1.equals((Object)slimTableFactory0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("org.eclipse.jgit.api.RebaseResult", string4);
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertSame(string0, string4);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertSame(string0, string1);
      assertNotSame(string1, string2);
      assertSame(string1, string4);
      assertNotSame(string1, string3);
      assertSame(string1, string0);
      assertNotSame(slimTableFactory1, slimTableFactory0);
      assertSame(string4, string1);
      assertNotSame(string4, string2);
      assertNotSame(string4, string3);
      assertSame(string4, string0);
      
      String string5 = "30|tv0w!)1}8";
      String string6 = slimTableFactory0.makeTableType(string5);
      assertNotNull(string6);
      assertFalse(slimTableFactory0.equals((Object)slimTableFactory1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertEquals("30|tv0w!)1}8", string6);
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertNotSame(string5, string0);
      assertNotSame(string5, string1);
      assertNotSame(string5, string3);
      assertNotSame(string5, string2);
      assertSame(string5, string6);
      assertNotSame(string5, string4);
      assertNotSame(string6, string2);
      assertNotSame(string6, string0);
      assertNotSame(string6, string1);
      assertNotSame(string6, string3);
      assertNotSame(string6, string4);
      assertSame(string6, string5);
      
      slimTableFactory0.parseDefineTableTypeRow(htmlTable0, int0);
      assertFalse(arrayList0.contains(string5));
      assertTrue(arrayList0.contains(string0));
      assertFalse(slimTableFactory0.equals((Object)slimTableFactory1));
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals(1, htmlTable0.getRowCount());
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertNotSame(slimTableFactory0, slimTableFactory1);
      
      SlimTestContextImpl slimTestContextImpl0 = new SlimTestContextImpl();
      assertNotNull(slimTestContextImpl0);
      
      ScenarioTable scenarioTable0 = new ScenarioTable(htmlTable0, string2, slimTestContextImpl0);
      assertNotNull(scenarioTable0);
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string2.equals((Object)string4));
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getTagBegin());
      assertFalse(scenarioTable0.isParameterized());
      assertNull(scenarioTable0.getName());
      assertEquals("scenarioTable_define table type", scenarioTable0.getTableName());
      assertEquals(1, htmlTable0.getRowCount());
      
      ScenarioTable.ScenarioTestContext scenarioTable_ScenarioTestContext0 = scenarioTable0.new ScenarioTestContext(slimTestContextImpl0);
      assertNotNull(scenarioTable_ScenarioTestContext0);
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string2.equals((Object)string4));
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getTagBegin());
      assertFalse(scenarioTable0.isParameterized());
      assertNull(scenarioTable0.getName());
      assertEquals("scenarioTable_define table type", scenarioTable0.getTableName());
      assertEquals(1, htmlTable0.getRowCount());
      
      ScenarioAndDecisionTableExtensionTest.ScenarioTableWithDifferentScript scenarioAndDecisionTableExtensionTest_ScenarioTableWithDifferentScript0 = (ScenarioAndDecisionTableExtensionTest.ScenarioTableWithDifferentScript)slimTableFactory1.makeSlimTable(htmlTable0, string4, scenarioTable_ScenarioTestContext0);
      assertNotNull(scenarioAndDecisionTableExtensionTest_ScenarioTableWithDifferentScript0);
      assertFalse(slimTableFactory0.equals((Object)slimTableFactory1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string3));
      assertFalse(slimTableFactory1.equals((Object)slimTableFactory0));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string6));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string2.equals((Object)string4));
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getTagBegin());
      assertFalse(scenarioTable0.isParameterized());
      assertNull(scenarioTable0.getName());
      assertEquals("scenarioTable_define table type", scenarioTable0.getTableName());
      assertEquals(1, htmlTable0.getRowCount());
      assertNull(scenarioAndDecisionTableExtensionTest_ScenarioTableWithDifferentScript0.getName());
      assertEquals("scenarioTable_org.eclipse.jgit.api.RebaseResult", scenarioAndDecisionTableExtensionTest_ScenarioTableWithDifferentScript0.getTableName());
      assertFalse(scenarioAndDecisionTableExtensionTest_ScenarioTableWithDifferentScript0.isParameterized());
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertSame(string0, string4);
      assertNotSame(string0, string2);
      assertNotSame(string0, string5);
      assertNotSame(string0, string3);
      assertSame(string0, string1);
      assertNotSame(string0, string6);
      assertNotSame(string1, string2);
      assertNotSame(string1, string6);
      assertSame(string1, string4);
      assertNotSame(string1, string5);
      assertNotSame(string1, string3);
      assertSame(string1, string0);
      assertNotSame(slimTableFactory1, slimTableFactory0);
      assertSame(string4, string1);
      assertNotSame(string4, string5);
      assertNotSame(string4, string2);
      assertNotSame(string4, string3);
      assertSame(string4, string0);
      assertNotSame(string4, string6);
      assertNotSame(string2, string5);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string6);
      assertNotSame(string2, string4);
  }

  @Test(timeout = 11000)
  public void test44()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      assertNotNull(slimTableFactory0);
      
      String string0 = "org.eclipse.jgit.api.RebaseResult";
      String string1 = slimTableFactory0.makeTableType(string0);
      assertNotNull(string1);
      assertEquals("org.eclipse.jgit.api.RebaseResult", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      TableTag tableTag0 = new TableTag();
      assertNotNull(tableTag0);
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      
      boolean boolean0 = true;
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      
      NodeList nodeList0 = tableTag0.searchFor(string0, boolean0);
      assertNotNull(nodeList0);
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertSame(string0, string1);
      
      tableTag0.setChildren(nodeList0);
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertSame(string0, string1);
      
      HtmlTable htmlTable0 = new HtmlTable(tableTag0);
      assertNotNull(htmlTable0);
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals(0, htmlTable0.getRowCount());
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(string0));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      boolean boolean1 = arrayList0.add(string1);
      assertTrue(arrayList0.contains(string0));
      assertTrue(boolean1 == boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      int int0 = htmlTable0.addRow(arrayList0);
      assertTrue(arrayList0.contains(string0));
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals(1, htmlTable0.getRowCount());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(0, int0);
      
      int int1 = htmlTable0.addRow(arrayList0);
      assertTrue(arrayList0.contains(string0));
      assertFalse(int1 == int0);
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals(2, htmlTable0.getRowCount());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(1, int1);
      
      SlimTable slimTable0 = slimTableFactory0.parseDefineTableTypeTable(htmlTable0);
      assertNull(slimTable0);
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals(2, htmlTable0.getRowCount());
      
      String string2 = "define table type";
      SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
      assertNotNull(slimTableFactory1);
      assertFalse(slimTableFactory1.equals((Object)slimTableFactory0));
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertNotSame(slimTableFactory1, slimTableFactory0);
      
      String string3 = slimTableFactory1.makeTableType(string1);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(slimTableFactory0.equals((Object)slimTableFactory1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(slimTableFactory1.equals((Object)slimTableFactory0));
      assertEquals("org.eclipse.jgit.api.RebaseResult", string3);
      assertSame(string3, string1);
      assertNotSame(string3, string2);
      assertSame(string3, string0);
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertSame(string0, string1);
      assertSame(string0, string3);
      assertNotSame(string0, string2);
      assertSame(string1, string3);
      assertSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(slimTableFactory1, slimTableFactory0);
      
      String string4 = "30|tv0w!)1}8";
      String string5 = slimTableFactory0.makeTableType(string4);
      assertNotNull(string5);
      assertFalse(slimTableFactory0.equals((Object)slimTableFactory1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertEquals("30|tv0w!)1}8", string5);
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertSame(string4, string5);
      assertNotSame(string4, string2);
      assertNotSame(string4, string1);
      assertNotSame(string4, string3);
      assertNotSame(string4, string0);
      assertNotSame(string5, string3);
      assertNotSame(string5, string0);
      assertSame(string5, string4);
      assertNotSame(string5, string1);
      assertNotSame(string5, string2);
      
      slimTableFactory0.parseDefineTableTypeRow(htmlTable0, int0);
      assertFalse(arrayList0.contains(string5));
      assertTrue(arrayList0.contains(string3));
      assertFalse(slimTableFactory0.equals((Object)slimTableFactory1));
      assertFalse(int0 == int1);
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals(2, htmlTable0.getRowCount());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertNotSame(slimTableFactory0, slimTableFactory1);
      
      Class<OrderedQueryTable> class0 = OrderedQueryTable.class;
      slimTableFactory1.addTableType(string1, class0);
      assertFalse(slimTableFactory0.equals((Object)slimTableFactory1));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string2));
      assertFalse(slimTableFactory1.equals((Object)slimTableFactory0));
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertSame(string0, string1);
      assertNotSame(string0, string5);
      assertSame(string0, string3);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertNotSame(string1, string5);
      assertSame(string1, string3);
      assertNotSame(string1, string4);
      assertSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(slimTableFactory1, slimTableFactory0);
      
      SlimTestContextImpl slimTestContextImpl0 = new SlimTestContextImpl();
      assertNotNull(slimTestContextImpl0);
      
      ScenarioTable scenarioTable0 = new ScenarioTable(htmlTable0, string2, slimTestContextImpl0);
      assertNotNull(scenarioTable0);
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string5));
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals("scenarioTable_define table type", scenarioTable0.getTableName());
      assertNull(scenarioTable0.getName());
      assertFalse(scenarioTable0.isParameterized());
      assertEquals(2, htmlTable0.getRowCount());
      
      String string6 = slimTableFactory1.makeTableType(string0);
      assertNotNull(string6);
      assertFalse(slimTableFactory0.equals((Object)slimTableFactory1));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(slimTableFactory1.equals((Object)slimTableFactory0));
      assertEquals("org.eclipse.jgit.api.RebaseResult", string6);
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertSame(string0, string1);
      assertNotSame(string0, string5);
      assertSame(string0, string3);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertSame(string0, string6);
      assertSame(string6, string3);
      assertSame(string6, string0);
      assertSame(string6, string1);
      assertNotSame(string6, string5);
      assertNotSame(string6, string4);
      assertNotSame(string6, string2);
      assertNotSame(slimTableFactory1, slimTableFactory0);
      
      ScenarioTable.ScenarioTestContext scenarioTable_ScenarioTestContext0 = scenarioTable0.new ScenarioTestContext(slimTestContextImpl0);
      assertNotNull(scenarioTable_ScenarioTestContext0);
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string5));
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals("scenarioTable_define table type", scenarioTable0.getTableName());
      assertNull(scenarioTable0.getName());
      assertFalse(scenarioTable0.isParameterized());
      assertEquals(2, htmlTable0.getRowCount());
      
      SlimTable slimTable1 = slimTableFactory1.makeSlimTable(htmlTable0, string3, scenarioTable_ScenarioTestContext0);
      assertNotNull(slimTable1);
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string2));
      assertFalse(slimTableFactory0.equals((Object)slimTableFactory1));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string5));
      assertFalse(slimTableFactory1.equals((Object)slimTableFactory0));
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals("scenarioTable_define table type", scenarioTable0.getTableName());
      assertNull(scenarioTable0.getName());
      assertFalse(scenarioTable0.isParameterized());
      assertEquals(2, htmlTable0.getRowCount());
      assertEquals("queryTable_org.eclipse.jgit.api.RebaseResult", slimTable1.getTableName());
      assertNotSame(string3, string4);
      assertSame(string3, string6);
      assertSame(string3, string1);
      assertNotSame(string3, string5);
      assertNotSame(string3, string2);
      assertSame(string3, string0);
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertSame(string0, string1);
      assertNotSame(string0, string5);
      assertSame(string0, string3);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertSame(string0, string6);
      assertNotSame(string1, string5);
      assertSame(string1, string3);
      assertNotSame(string1, string4);
      assertSame(string1, string0);
      assertSame(string1, string6);
      assertNotSame(string1, string2);
      assertNotSame(string2, string3);
      assertNotSame(string2, string6);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string4);
      assertNotSame(string2, string5);
      assertNotSame(slimTableFactory1, slimTableFactory0);
  }

  @Test(timeout = 11000)
  public void test45()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      assertNotNull(slimTableFactory0);
      
      String string0 = "0IJYYOh";
      String string1 = slimTableFactory0.getFullTableName(string0);
      assertNotNull(string1);
      assertEquals("0IJYYOh", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      TableTag tableTag0 = new TableTag();
      assertNotNull(tableTag0);
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getStartPosition());
      
      boolean boolean0 = true;
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      
      NodeList nodeList0 = tableTag0.searchFor(string0, boolean0, locale0);
      assertNotNull(nodeList0);
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertSame(string0, string1);
      
      tableTag0.setChildren(nodeList0);
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertSame(string0, string1);
      
      HtmlTable htmlTable0 = new HtmlTable(tableTag0);
      assertNotNull(htmlTable0);
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals(0, htmlTable0.getRowCount());
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(string0));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      String string2 = "comment:0ijyyoh:0IJYYOh";
      boolean boolean1 = arrayList0.add(string2);
      assertTrue(arrayList0.contains(string2));
      assertFalse(arrayList0.contains(string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertTrue(boolean1 == boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean2 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = arrayList0.add(string1);
      assertTrue(arrayList0.contains(string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertTrue(boolean3);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertNotSame(string1, string2);
      assertSame(string1, string0);
      
      boolean boolean4 = arrayList0.add(string1);
      assertTrue(arrayList0.contains(string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertFalse(arrayList0.isEmpty());
      assertEquals(3, arrayList0.size());
      assertTrue(boolean4);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertNotSame(string1, string2);
      assertSame(string1, string0);
      
      int int0 = htmlTable0.addRow(arrayList0);
      assertTrue(arrayList0.contains(string0));
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals(1, htmlTable0.getRowCount());
      assertFalse(arrayList0.isEmpty());
      assertEquals(3, arrayList0.size());
      assertEquals(0, int0);
      
      String string3 = "um";
      String string4 = "30|t?00!)B1}V8";
      slimTableFactory0.parseDefineTableTypeRow(htmlTable0, int0);
      assertTrue(arrayList0.contains(string0));
      assertFalse(arrayList0.contains(string3));
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals(1, htmlTable0.getRowCount());
      assertFalse(arrayList0.isEmpty());
      assertEquals(3, arrayList0.size());
      
      SlimTestContextImpl slimTestContextImpl0 = new SlimTestContextImpl();
      assertNotNull(slimTestContextImpl0);
      
      ScenarioTable scenarioTable0 = new ScenarioTable(htmlTable0, string0, slimTestContextImpl0);
      assertNotNull(scenarioTable0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string3));
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals("scenarioTable_0IJYYOh", scenarioTable0.getTableName());
      assertFalse(scenarioTable0.isParameterized());
      assertNull(scenarioTable0.getName());
      assertEquals(1, htmlTable0.getRowCount());
      
      ScenarioTable.ScenarioTestContext scenarioTable_ScenarioTestContext0 = scenarioTable0.new ScenarioTestContext(slimTestContextImpl0);
      assertNotNull(scenarioTable_ScenarioTestContext0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string3));
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals("scenarioTable_0IJYYOh", scenarioTable0.getTableName());
      assertFalse(scenarioTable0.isParameterized());
      assertNull(scenarioTable0.getName());
      assertEquals(1, htmlTable0.getRowCount());
      
      SlimTable slimTable0 = slimTableFactory0.makeSlimTable(htmlTable0, string1, scenarioTable_ScenarioTestContext0);
      assertNull(slimTable0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals("scenarioTable_0IJYYOh", scenarioTable0.getTableName());
      assertFalse(scenarioTable0.isParameterized());
      assertNull(scenarioTable0.getName());
      assertEquals(1, htmlTable0.getRowCount());
      assertNotSame(string0, string2);
      assertNotSame(string0, string4);
      assertNotSame(string0, string3);
      assertSame(string0, string1);
      assertNotSame(string1, string4);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertSame(string1, string0);
      
      String string5 = slimTableFactory0.getFullTableName(string0);
      assertNotNull(string5);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertEquals("0IJYYOh", string5);
      assertNotSame(string0, string2);
      assertNotSame(string0, string4);
      assertSame(string0, string5);
      assertNotSame(string0, string3);
      assertSame(string0, string1);
      assertNotSame(string5, string3);
      assertNotSame(string5, string4);
      assertNotSame(string5, string2);
      assertSame(string5, string0);
      assertSame(string5, string1);
      
      System.setCurrentTimeMillis(int0);
      assertTrue(arrayList0.contains(string0));
      assertFalse(arrayList0.contains(string3));
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals(1, htmlTable0.getRowCount());
      assertFalse(arrayList0.isEmpty());
      assertEquals(3, arrayList0.size());
      
      String string6 = "1~,Dw1PZW};#5hhuQj";
      String string7 = slimTableFactory0.makeTableType(string6);
      assertNotNull(string7);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertEquals("1~,Dw1PZW};#5hhuQj", string7);
      assertNotSame(string6, string1);
      assertNotSame(string6, string2);
      assertNotSame(string6, string5);
      assertNotSame(string6, string0);
      assertSame(string6, string7);
      assertNotSame(string6, string4);
      assertNotSame(string6, string3);
      assertNotSame(string7, string5);
      assertNotSame(string7, string1);
      assertNotSame(string7, string4);
      assertNotSame(string7, string0);
      assertNotSame(string7, string2);
      assertNotSame(string7, string3);
      assertSame(string7, string6);
  }

  @Test(timeout = 11000)
  public void test46()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      assertNotNull(slimTableFactory0);
      
      String string0 = "astab:e ";
      String string1 = slimTableFactory0.makeTableType(string0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("tab e", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test(timeout = 11000)
  public void test47()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      assertNotNull(slimTableFactory0);
      
      String string0 = "0IJYYOh";
      TableTag tableTag0 = new TableTag();
      assertNotNull(tableTag0);
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals("TABLE", tableTag0.getRawTagName());
      
      boolean boolean0 = true;
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      
      NodeList nodeList0 = tableTag0.searchFor(string0, boolean0, locale0);
      assertNotNull(nodeList0);
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      
      tableTag0.setChildren(nodeList0);
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      
      HtmlTable htmlTable0 = new HtmlTable(tableTag0);
      assertNotNull(htmlTable0);
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals(0, htmlTable0.getRowCount());
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(string0));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      String string1 = "comment";
      boolean boolean1 = arrayList0.add(string1);
      assertTrue(arrayList0.contains(string1));
      assertFalse(arrayList0.contains(string0));
      assertFalse(string1.equals((Object)string0));
      assertTrue(boolean1 == boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean1);
      assertNotSame(string1, string0);
      
      int int0 = htmlTable0.addRow(arrayList0);
      assertTrue(arrayList0.contains(string1));
      assertFalse(arrayList0.contains(string0));
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals(1, htmlTable0.getRowCount());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(0, int0);
      
      String string2 = "asWl/H\\&9z_|L|CF";
      slimTableFactory0.parseDefineTableTypeRow(htmlTable0, int0);
      assertTrue(arrayList0.contains(string1));
      assertFalse(arrayList0.contains(string2));
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals(1, htmlTable0.getRowCount());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      SlimTestContextImpl slimTestContextImpl0 = new SlimTestContextImpl();
      assertNotNull(slimTestContextImpl0);
      
      ScenarioTable scenarioTable0 = new ScenarioTable(htmlTable0, string0, slimTestContextImpl0);
      assertNotNull(scenarioTable0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals(1, htmlTable0.getRowCount());
      assertEquals("scenarioTable_0IJYYOh", scenarioTable0.getTableName());
      assertNull(scenarioTable0.getName());
      assertFalse(scenarioTable0.isParameterized());
      
      ScenarioTable.ScenarioTestContext scenarioTable_ScenarioTestContext0 = scenarioTable0.new ScenarioTestContext(slimTestContextImpl0);
      assertNotNull(scenarioTable_ScenarioTestContext0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals(1, htmlTable0.getRowCount());
      assertEquals("scenarioTable_0IJYYOh", scenarioTable0.getTableName());
      assertNull(scenarioTable0.getName());
      assertFalse(scenarioTable0.isParameterized());
      
      SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
      assertNotNull(slimTableFactory1);
      assertFalse(slimTableFactory1.equals((Object)slimTableFactory0));
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertNotSame(slimTableFactory1, slimTableFactory0);
      
      SlimTable slimTable0 = slimTableFactory1.makeSlimTable(htmlTable0, string2, scenarioTable_ScenarioTestContext0);
      assertNull(slimTable0);
      assertFalse(slimTableFactory0.equals((Object)slimTableFactory1));
      assertFalse(slimTableFactory1.equals((Object)slimTableFactory0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals(1, htmlTable0.getRowCount());
      assertEquals("scenarioTable_0IJYYOh", scenarioTable0.getTableName());
      assertNull(scenarioTable0.getName());
      assertFalse(scenarioTable0.isParameterized());
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertNotSame(slimTableFactory1, slimTableFactory0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
  }

  @Test(timeout = 11000)
  public void test48()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      assertNotNull(slimTableFactory0);
      
      String string0 = "jrgVecli";
      String string1 = slimTableFactory0.getFullTableName(string0);
      assertNotNull(string1);
      assertEquals("jrgVecli", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      TableTag tableTag0 = new TableTag();
      assertNotNull(tableTag0);
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getStartPosition());
      
      boolean boolean0 = true;
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      NodeList nodeList0 = tableTag0.searchFor(string0, boolean0, locale0);
      assertNotNull(nodeList0);
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertSame(string0, string1);
      
      tableTag0.setChildren(nodeList0);
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertSame(string0, string1);
      
      HtmlTable htmlTable0 = new HtmlTable(tableTag0);
      assertNotNull(htmlTable0);
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals(0, htmlTable0.getRowCount());
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(string0));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      boolean boolean1 = arrayList0.add(string1);
      assertTrue(arrayList0.contains(string0));
      assertTrue(boolean1 == boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertNotNull(map0);
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      
      slimTableFactory0.tableTypeArrays = map0;
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertFalse(slimTableFactory0.tableTypeArrays.isEmpty());
      assertEquals(28, slimTableFactory0.tableTypeArrays.size());
      
      boolean boolean2 = arrayList0.add(string1);
      assertTrue(arrayList0.contains(string0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean2);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      int int0 = htmlTable0.addRow(arrayList0);
      assertTrue(arrayList0.contains(string0));
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals(1, htmlTable0.getRowCount());
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        slimTableFactory0.parseDefineTableTypeRow(htmlTable0, int0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableMap", e);
      }
  }

  @Test(timeout = 11000)
  public void test49()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      assertNotNull(slimTableFactory0);
      
      String string0 = "0IYYOh";
      TableTag tableTag0 = new TableTag();
      assertNotNull(tableTag0);
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals("TABLE", tableTag0.getRawTagName());
      
      boolean boolean0 = true;
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      NodeList nodeList0 = tableTag0.searchFor(string0, boolean0, locale0);
      assertNotNull(nodeList0);
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      tableTag0.setChildren(nodeList0);
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      HtmlTable htmlTable0 = new HtmlTable(tableTag0);
      assertNotNull(htmlTable0);
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals(0, htmlTable0.getRowCount());
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(string0));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      String string1 = "define table type";
      boolean boolean1 = arrayList0.add(string1);
      assertTrue(arrayList0.contains(string1));
      assertFalse(arrayList0.contains(string0));
      assertFalse(string1.equals((Object)string0));
      assertTrue(boolean1 == boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean1);
      assertNotSame(string1, string0);
      
      int int0 = htmlTable0.addRow(arrayList0);
      assertTrue(arrayList0.contains(string1));
      assertFalse(arrayList0.contains(string0));
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals(1, htmlTable0.getRowCount());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(0, int0);
      
      SlimTestContextImpl slimTestContextImpl0 = new SlimTestContextImpl();
      assertNotNull(slimTestContextImpl0);
      
      ScenarioTable scenarioTable0 = new ScenarioTable(htmlTable0, string0, slimTestContextImpl0);
      assertNotNull(scenarioTable0);
      assertFalse(string0.equals((Object)string1));
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals(1, htmlTable0.getRowCount());
      assertNull(scenarioTable0.getName());
      assertFalse(scenarioTable0.isParameterized());
      assertEquals("scenarioTable_0IYYOh", scenarioTable0.getTableName());
      
      ScenarioTable.ScenarioTestContext scenarioTable_ScenarioTestContext0 = scenarioTable0.new ScenarioTestContext(slimTestContextImpl0);
      assertNotNull(scenarioTable_ScenarioTestContext0);
      assertFalse(string0.equals((Object)string1));
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals(1, htmlTable0.getRowCount());
      assertNull(scenarioTable0.getName());
      assertFalse(scenarioTable0.isParameterized());
      assertEquals("scenarioTable_0IYYOh", scenarioTable0.getTableName());
      
      SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
      assertNotNull(slimTableFactory1);
      assertFalse(slimTableFactory1.equals((Object)slimTableFactory0));
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertNotSame(slimTableFactory1, slimTableFactory0);
      
      SlimTable slimTable0 = slimTableFactory1.makeSlimTable(htmlTable0, string0, scenarioTable_ScenarioTestContext0);
      assertNull(slimTable0);
      assertFalse(slimTableFactory0.equals((Object)slimTableFactory1));
      assertFalse(string0.equals((Object)string1));
      assertFalse(slimTableFactory1.equals((Object)slimTableFactory0));
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals(1, htmlTable0.getRowCount());
      assertNull(scenarioTable0.getName());
      assertFalse(scenarioTable0.isParameterized());
      assertEquals("scenarioTable_0IYYOh", scenarioTable0.getTableName());
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertNotSame(string0, string1);
      assertNotSame(slimTableFactory1, slimTableFactory0);
  }
}
