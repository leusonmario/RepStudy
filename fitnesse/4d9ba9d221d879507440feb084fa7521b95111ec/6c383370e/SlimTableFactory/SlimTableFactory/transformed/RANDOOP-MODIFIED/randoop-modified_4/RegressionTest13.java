import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest13 {

    public static boolean debug = false;

    @Test
    public void test06501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06501");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        boolean boolean5 = slimTableFactory0.hasColon("");
        java.lang.String str7 = slimTableFactory0.makeTableType("");
        java.lang.String str9 = slimTableFactory0.makeTableType("");
        java.lang.String str11 = slimTableFactory0.makeTableType("");
        java.lang.String str13 = slimTableFactory0.getFullTableName("");
        java.lang.String str15 = slimTableFactory0.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory0.tableTypeArrays;
        java.lang.String str18 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap19 = slimTableFactory0.tableTypeArrays;
        java.lang.String str21 = slimTableFactory0.getFullTableName("");
        boolean boolean23 = slimTableFactory0.hasColon("");
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test06502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06502");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory1.tableTypeArrays;
        java.lang.String str6 = slimTableFactory1.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory7.copy();
        boolean boolean10 = slimTableFactory8.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory8.tableTypeArrays;
        java.lang.String str13 = slimTableFactory8.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory8.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap14;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory1.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass18 = slimTableFactory16.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory16.copy();
        boolean boolean21 = slimTableFactory19.hasColon("");
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertNotNull(slimTableFactory19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test06503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06503");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory0.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory9.copy();
        boolean boolean12 = slimTableFactory10.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap13 = slimTableFactory10.tableTypeArrays;
        java.lang.String str15 = slimTableFactory10.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory10.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap16;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.Table table19 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory18.parseDefineTableTypeRow(table19, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(slimTableFactory18);
    }

    @Test
    public void test06504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06504");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        boolean boolean6 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass10 = slimTableFactory8.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory8.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap12 = slimTableFactory11.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap12;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory1.copy();
        java.lang.String str16 = slimTableFactory14.makeTableType("hi!");
        java.lang.String str18 = slimTableFactory14.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap19 = slimTableFactory14.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory14.copy();
        fitnesse.testsystems.slim.Table table21 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory14.parseDefineTableTypeRow(table21, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(slimTableFactory20);
    }

    @Test
    public void test06505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06505");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory3.copy();
        java.lang.String str6 = slimTableFactory3.makeTableType("");
        java.lang.String str8 = slimTableFactory3.makeTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass10 = slimTableFactory3.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory11.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap13 = slimTableFactory12.tableTypes;
        boolean boolean15 = slimTableFactory12.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap16 = slimTableFactory12.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap17 = slimTableFactory12.tableTypeArrays;
        slimTableFactory3.tableTypeArrays = strMap17;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory3.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap20 = slimTableFactory3.tableTypeArrays;
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(slimTableFactory19);
        org.junit.Assert.assertNotNull(strMap20);
    }

    @Test
    public void test06506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06506");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory0.getTableType("hi!");
        java.lang.String str9 = slimTableFactory0.getFullTableName("");
        java.lang.String str11 = slimTableFactory0.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap13 = slimTableFactory12.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory12.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass16 = slimTableFactory12.getTableType("");
        fitnesse.testsystems.slim.Table table17 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory12.parseDefineTableTypeRow(table17, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertNull(wildcardClass16);
    }

    @Test
    public void test06507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06507");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory0.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap9 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory0.tableTypeArrays;
        boolean boolean12 = slimTableFactory0.hasColon("hi!");
        java.lang.String str14 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory15.copy();
        boolean boolean18 = slimTableFactory16.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory16.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory16.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = slimTableFactory20.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap22 = slimTableFactory20.tableTypes;
        java.lang.String str24 = slimTableFactory20.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap25 = slimTableFactory20.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap25;
        java.util.Map<java.lang.String, java.lang.String> strMap27 = slimTableFactory0.tableTypeArrays;
        java.lang.String str29 = slimTableFactory0.getFullTableName("");
        java.lang.Class<?> wildcardClass30 = slimTableFactory0.getClass();
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(slimTableFactory19);
        org.junit.Assert.assertNotNull(slimTableFactory20);
        org.junit.Assert.assertNotNull(slimTableFactory21);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test06508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06508");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        boolean boolean6 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory1.tableTypes;
        java.lang.String str9 = slimTableFactory1.makeTableType("");
        java.lang.String str11 = slimTableFactory1.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap12 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass15 = slimTableFactory13.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory13.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap17 = slimTableFactory16.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap18 = slimTableFactory16.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap19 = slimTableFactory16.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass21 = slimTableFactory16.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = slimTableFactory16.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = slimTableFactory23.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap25 = slimTableFactory24.tableTypes;
        boolean boolean27 = slimTableFactory24.hasColon("");
        boolean boolean29 = slimTableFactory24.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap30 = slimTableFactory24.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory31 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass33 = slimTableFactory31.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory34 = slimTableFactory31.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap35 = slimTableFactory34.tableTypeArrays;
        slimTableFactory24.tableTypeArrays = strMap35;
        slimTableFactory22.tableTypeArrays = strMap35;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory38 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory39 = slimTableFactory38.copy();
        boolean boolean41 = slimTableFactory39.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory42 = slimTableFactory39.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap43 = slimTableFactory39.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass45 = slimTableFactory39.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap46 = slimTableFactory39.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory47 = slimTableFactory39.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass49 = slimTableFactory39.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap50 = slimTableFactory39.tableTypeArrays;
        slimTableFactory22.tableTypeArrays = strMap50;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory52 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory53 = slimTableFactory52.copy();
        boolean boolean55 = slimTableFactory53.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap56 = slimTableFactory53.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory57 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass59 = slimTableFactory57.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory60 = slimTableFactory57.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap61 = slimTableFactory60.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory62 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass64 = slimTableFactory62.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory65 = slimTableFactory62.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory66 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory67 = slimTableFactory66.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap68 = slimTableFactory67.tableTypes;
        boolean boolean70 = slimTableFactory67.hasColon("");
        boolean boolean72 = slimTableFactory67.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap73 = slimTableFactory67.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory74 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass76 = slimTableFactory74.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory77 = slimTableFactory74.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap78 = slimTableFactory77.tableTypeArrays;
        slimTableFactory67.tableTypeArrays = strMap78;
        slimTableFactory62.tableTypeArrays = strMap78;
        slimTableFactory60.tableTypeArrays = strMap78;
        slimTableFactory53.tableTypeArrays = strMap78;
        slimTableFactory22.tableTypeArrays = strMap78;
        slimTableFactory1.tableTypeArrays = strMap78;
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNull(wildcardClass21);
        org.junit.Assert.assertNotNull(slimTableFactory22);
        org.junit.Assert.assertNotNull(slimTableFactory24);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNull(wildcardClass33);
        org.junit.Assert.assertNotNull(slimTableFactory34);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(slimTableFactory39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(slimTableFactory42);
        org.junit.Assert.assertNotNull(strMap43);
        org.junit.Assert.assertNull(wildcardClass45);
        org.junit.Assert.assertNotNull(strMap46);
        org.junit.Assert.assertNotNull(slimTableFactory47);
        org.junit.Assert.assertNull(wildcardClass49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNotNull(slimTableFactory53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(strMap56);
        org.junit.Assert.assertNull(wildcardClass59);
        org.junit.Assert.assertNotNull(slimTableFactory60);
        org.junit.Assert.assertNotNull(strMap61);
        org.junit.Assert.assertNull(wildcardClass64);
        org.junit.Assert.assertNotNull(slimTableFactory65);
        org.junit.Assert.assertNotNull(slimTableFactory67);
        org.junit.Assert.assertNotNull(strMap68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(strMap73);
        org.junit.Assert.assertNull(wildcardClass76);
        org.junit.Assert.assertNotNull(slimTableFactory77);
        org.junit.Assert.assertNotNull(strMap78);
    }

    @Test
    public void test06509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06509");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory1.tableTypeArrays;
        java.lang.String str6 = slimTableFactory1.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory7.copy();
        boolean boolean10 = slimTableFactory8.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory8.tableTypeArrays;
        java.lang.String str13 = slimTableFactory8.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory8.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap14;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap17 = slimTableFactory1.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass19 = slimTableFactory1.getTableType("");
        java.lang.String str21 = slimTableFactory1.getFullTableName("");
        java.lang.Class<?> wildcardClass22 = slimTableFactory1.getClass();
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test06510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06510");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass5 = slimTableFactory3.getTableType("");
        boolean boolean7 = slimTableFactory3.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory3.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap8;
        java.lang.String str11 = slimTableFactory1.makeTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass13 = slimTableFactory1.getTableType("");
        java.lang.String str15 = slimTableFactory1.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap16 = slimTableFactory1.tableTypes;
        java.lang.String str18 = slimTableFactory1.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = slimTableFactory20.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap22 = slimTableFactory21.tableTypes;
        boolean boolean24 = slimTableFactory21.hasColon("");
        boolean boolean26 = slimTableFactory21.hasColon("hi!");
        boolean boolean28 = slimTableFactory21.hasColon("");
        java.lang.String str30 = slimTableFactory21.makeTableType("");
        java.lang.String str32 = slimTableFactory21.makeTableType("");
        java.lang.String str34 = slimTableFactory21.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory35 = slimTableFactory21.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory36 = slimTableFactory21.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory37 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory38 = slimTableFactory37.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap39 = slimTableFactory38.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass41 = slimTableFactory38.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory42 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory43 = slimTableFactory42.copy();
        boolean boolean45 = slimTableFactory43.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory46 = slimTableFactory43.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap47 = slimTableFactory43.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory48 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory49 = slimTableFactory48.copy();
        boolean boolean51 = slimTableFactory49.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory52 = slimTableFactory49.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory53 = slimTableFactory49.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory54 = slimTableFactory49.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap55 = slimTableFactory54.tableTypeArrays;
        slimTableFactory43.tableTypeArrays = strMap55;
        slimTableFactory38.tableTypeArrays = strMap55;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap58 = slimTableFactory38.tableTypes;
        java.lang.String str60 = slimTableFactory38.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap61 = slimTableFactory38.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory62 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory63 = slimTableFactory62.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap64 = slimTableFactory63.tableTypes;
        boolean boolean66 = slimTableFactory63.hasColon("");
        boolean boolean68 = slimTableFactory63.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap69 = slimTableFactory63.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap70 = slimTableFactory63.tableTypeArrays;
        slimTableFactory38.tableTypeArrays = strMap70;
        slimTableFactory36.tableTypeArrays = strMap70;
        slimTableFactory1.tableTypeArrays = strMap70;
        fitnesse.testsystems.slim.Table table74 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory1.parseDefineTableTypeRow(table74, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(slimTableFactory19);
        org.junit.Assert.assertNotNull(slimTableFactory21);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory35);
        org.junit.Assert.assertNotNull(slimTableFactory36);
        org.junit.Assert.assertNotNull(slimTableFactory38);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNull(wildcardClass41);
        org.junit.Assert.assertNotNull(slimTableFactory43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(slimTableFactory46);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNotNull(slimTableFactory49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(slimTableFactory52);
        org.junit.Assert.assertNotNull(slimTableFactory53);
        org.junit.Assert.assertNotNull(slimTableFactory54);
        org.junit.Assert.assertNotNull(strMap55);
        org.junit.Assert.assertNotNull(strMap58);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "hi!" + "'", str60, "hi!");
        org.junit.Assert.assertNotNull(strMap61);
        org.junit.Assert.assertNotNull(slimTableFactory63);
        org.junit.Assert.assertNotNull(strMap64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(strMap69);
        org.junit.Assert.assertNotNull(strMap70);
    }

    @Test
    public void test06511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06511");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        boolean boolean6 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        boolean boolean11 = slimTableFactory9.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory9.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory9.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory13.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory14.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory14.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap16;
        java.lang.String str19 = slimTableFactory1.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap20 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.Table table21 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable22 = slimTableFactory1.parseDefineTableTypeTable(table21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertNotNull(slimTableFactory13);
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNotNull(strMap20);
    }

    @Test
    public void test06512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06512");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory4.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap6 = slimTableFactory5.tableTypes;
        boolean boolean8 = slimTableFactory5.hasColon("");
        boolean boolean10 = slimTableFactory5.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap11 = slimTableFactory5.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory12.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory12.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory15.tableTypeArrays;
        slimTableFactory5.tableTypeArrays = strMap16;
        slimTableFactory0.tableTypeArrays = strMap16;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap19 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory0.copy();
        java.lang.String str22 = slimTableFactory20.makeTableType("");
        fitnesse.testsystems.slim.Table table23 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory20.parseDefineTableTypeRow(table23, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(slimTableFactory20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
    }

    @Test
    public void test06513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06513");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        boolean boolean4 = slimTableFactory0.hasColon("");
        java.lang.String str6 = slimTableFactory0.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass10 = slimTableFactory8.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory8.tableTypeArrays;
        boolean boolean13 = slimTableFactory8.hasColon("");
        java.lang.String str15 = slimTableFactory8.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory8.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap16;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass19 = slimTableFactory0.getTableType("");
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNull(wildcardClass19);
    }

    @Test
    public void test06514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06514");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory3.copy();
        boolean boolean6 = slimTableFactory4.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory4.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory4.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory10.copy();
        boolean boolean13 = slimTableFactory11.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory11.tableTypeArrays;
        slimTableFactory9.tableTypeArrays = strMap14;
        slimTableFactory0.tableTypeArrays = strMap14;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap17 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.Table table18 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable19 = slimTableFactory0.parseDefineTableTypeTable(table18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(strMap17);
    }

    @Test
    public void test06515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06515");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        boolean boolean5 = slimTableFactory0.hasColon("");
        java.lang.String str7 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory0.copy();
        boolean boolean12 = slimTableFactory10.hasColon("");
        fitnesse.testsystems.slim.Table table13 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory10.parseDefineTableTypeRow(table13, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test06516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06516");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory1.tableTypeArrays;
        java.lang.String str6 = slimTableFactory1.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        boolean boolean11 = slimTableFactory9.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory9.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap13 = slimTableFactory9.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass16 = slimTableFactory14.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap17 = slimTableFactory14.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass19 = slimTableFactory14.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass22 = slimTableFactory20.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = slimTableFactory20.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = slimTableFactory23.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = slimTableFactory25.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap27 = slimTableFactory25.tableTypeArrays;
        slimTableFactory23.tableTypeArrays = strMap27;
        slimTableFactory14.tableTypeArrays = strMap27;
        slimTableFactory9.tableTypeArrays = strMap27;
        slimTableFactory1.tableTypeArrays = strMap27;
        java.lang.String str33 = slimTableFactory1.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory34 = slimTableFactory1.copy();
        java.lang.String str36 = slimTableFactory34.makeTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass38 = slimTableFactory34.getTableType("");
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNull(wildcardClass16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNull(wildcardClass22);
        org.junit.Assert.assertNotNull(slimTableFactory23);
        org.junit.Assert.assertNotNull(slimTableFactory24);
        org.junit.Assert.assertNotNull(slimTableFactory26);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertNull(wildcardClass38);
    }

    @Test
    public void test06517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06517");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory5.getTableType("");
        boolean boolean9 = slimTableFactory5.hasColon("");
        java.lang.String str11 = slimTableFactory5.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap12 = slimTableFactory5.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap12;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass15 = slimTableFactory1.getTableType("");
        java.lang.String str17 = slimTableFactory1.makeTableType("");
        boolean boolean19 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.Table table20 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory1.parseDefineTableTypeRow(table20, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test06518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06518");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory1.tableTypeArrays;
        java.lang.String str6 = slimTableFactory1.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory1.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass10 = slimTableFactory1.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory1.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap12 = slimTableFactory1.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap13 = slimTableFactory1.tableTypes;
        java.lang.String str15 = slimTableFactory1.getFullTableName("hi!");
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
    }

    @Test
    public void test06519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06519");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass4 = slimTableFactory1.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap5 = slimTableFactory1.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory1.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap8 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory9.tableTypeArrays;
        java.lang.String str12 = slimTableFactory9.makeTableType("hi!");
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
    }

    @Test
    public void test06520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06520");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory3.tableTypeArrays;
        java.lang.String str6 = slimTableFactory3.makeTableType("hi!");
        boolean boolean8 = slimTableFactory3.hasColon("hi!");
        java.lang.String str10 = slimTableFactory3.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap11 = slimTableFactory3.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory3.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap13 = null;
        slimTableFactory12.tableTypeArrays = strMap13;
        java.util.Map<java.lang.String, java.lang.String> strMap15 = slimTableFactory12.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass17 = slimTableFactory12.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap18 = slimTableFactory12.tableTypeArrays;
        boolean boolean20 = slimTableFactory12.hasColon("");
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertNull(strMap15);
        org.junit.Assert.assertNull(wildcardClass17);
        org.junit.Assert.assertNull(strMap18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test06521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06521");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap5 = slimTableFactory1.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory9.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap11 = slimTableFactory10.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory12.getTableType("");
        boolean boolean16 = slimTableFactory12.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap17 = slimTableFactory12.tableTypeArrays;
        slimTableFactory10.tableTypeArrays = strMap17;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory19.copy();
        boolean boolean22 = slimTableFactory20.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = slimTableFactory20.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = slimTableFactory20.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = slimTableFactory24.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass28 = slimTableFactory26.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory29 = slimTableFactory26.copy();
        boolean boolean31 = slimTableFactory26.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap32 = slimTableFactory26.tableTypeArrays;
        slimTableFactory24.tableTypeArrays = strMap32;
        java.util.Map<java.lang.String, java.lang.String> strMap34 = slimTableFactory24.tableTypeArrays;
        slimTableFactory10.tableTypeArrays = strMap34;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory36 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory37 = slimTableFactory36.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap38 = slimTableFactory37.tableTypes;
        boolean boolean40 = slimTableFactory37.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap41 = slimTableFactory37.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap42 = slimTableFactory37.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory43 = slimTableFactory37.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap44 = slimTableFactory37.tableTypeArrays;
        slimTableFactory10.tableTypeArrays = strMap44;
        slimTableFactory1.tableTypeArrays = strMap44;
        java.lang.String str48 = slimTableFactory1.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory49 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory51 = slimTableFactory1.copy();
        boolean boolean53 = slimTableFactory51.hasColon("");
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(slimTableFactory20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(slimTableFactory23);
        org.junit.Assert.assertNotNull(slimTableFactory24);
        org.junit.Assert.assertNotNull(slimTableFactory25);
        org.junit.Assert.assertNull(wildcardClass28);
        org.junit.Assert.assertNotNull(slimTableFactory29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNotNull(slimTableFactory37);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertNotNull(strMap42);
        org.junit.Assert.assertNotNull(slimTableFactory43);
        org.junit.Assert.assertNotNull(strMap44);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(slimTableFactory49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNotNull(slimTableFactory51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test06522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06522");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory3.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap5 = slimTableFactory3.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap6 = slimTableFactory3.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory3.copy();
        java.lang.String str9 = slimTableFactory7.makeTableType("");
        boolean boolean11 = slimTableFactory7.hasColon("hi!");
        java.lang.String str13 = slimTableFactory7.getFullTableName("");
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test06523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06523");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory1.tableTypeArrays;
        java.lang.String str6 = slimTableFactory1.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory7.copy();
        boolean boolean10 = slimTableFactory8.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory8.tableTypeArrays;
        java.lang.String str13 = slimTableFactory8.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory8.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap14;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap17 = slimTableFactory1.tableTypes;
        java.lang.String str19 = slimTableFactory1.getFullTableName("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass21 = slimTableFactory1.getTableType("");
        boolean boolean23 = slimTableFactory1.hasColon("hi!");
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNull(wildcardClass21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test06524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06524");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory1.tableTypeArrays;
        java.lang.String str6 = slimTableFactory1.getFullTableName("");
        boolean boolean8 = slimTableFactory1.hasColon("");
        java.lang.String str10 = slimTableFactory1.makeTableType("");
        fitnesse.testsystems.slim.Table table11 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable12 = slimTableFactory1.parseDefineTableTypeTable(table11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test06525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06525");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        boolean boolean6 = slimTableFactory1.hasColon("hi!");
        boolean boolean8 = slimTableFactory1.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory1.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass11 = slimTableFactory9.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory9.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap13 = slimTableFactory9.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory9.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap15 = slimTableFactory9.tableTypes;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap16 = slimTableFactory9.tableTypes;
        fitnesse.testsystems.slim.Table table17 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable18 = slimTableFactory9.parseDefineTableTypeTable(table17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(strMap16);
    }

    @Test
    public void test06526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06526");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap5 = slimTableFactory1.tableTypeArrays;
        java.lang.String str7 = slimTableFactory1.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory1.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass10 = slimTableFactory1.getTableType("");
        java.lang.String str12 = slimTableFactory1.getFullTableName("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory1.getTableType("hi!");
        java.lang.String str16 = slimTableFactory1.getFullTableName("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass18 = slimTableFactory1.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory19.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap21 = slimTableFactory20.tableTypes;
        boolean boolean23 = slimTableFactory20.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap24 = slimTableFactory20.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap25 = slimTableFactory20.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = slimTableFactory26.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap28 = slimTableFactory27.tableTypes;
        boolean boolean30 = slimTableFactory27.hasColon("");
        boolean boolean32 = slimTableFactory27.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap33 = slimTableFactory27.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory34 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass36 = slimTableFactory34.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory37 = slimTableFactory34.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap38 = slimTableFactory37.tableTypeArrays;
        slimTableFactory27.tableTypeArrays = strMap38;
        slimTableFactory20.tableTypeArrays = strMap38;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory41 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory42 = slimTableFactory41.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory43 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass45 = slimTableFactory43.getTableType("");
        boolean boolean47 = slimTableFactory43.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap48 = slimTableFactory43.tableTypeArrays;
        slimTableFactory41.tableTypeArrays = strMap48;
        slimTableFactory20.tableTypeArrays = strMap48;
        slimTableFactory1.tableTypeArrays = strMap48;
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertNotNull(slimTableFactory20);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(slimTableFactory27);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(wildcardClass36);
        org.junit.Assert.assertNotNull(slimTableFactory37);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertNotNull(slimTableFactory42);
        org.junit.Assert.assertNull(wildcardClass45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strMap48);
    }

    @Test
    public void test06527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06527");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory1.tableTypeArrays;
        java.lang.String str6 = slimTableFactory1.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        boolean boolean11 = slimTableFactory9.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory9.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap13 = slimTableFactory9.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass16 = slimTableFactory14.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap17 = slimTableFactory14.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass19 = slimTableFactory14.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass22 = slimTableFactory20.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = slimTableFactory20.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = slimTableFactory23.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = slimTableFactory25.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap27 = slimTableFactory25.tableTypeArrays;
        slimTableFactory23.tableTypeArrays = strMap27;
        slimTableFactory14.tableTypeArrays = strMap27;
        slimTableFactory9.tableTypeArrays = strMap27;
        slimTableFactory1.tableTypeArrays = strMap27;
        java.lang.String str33 = slimTableFactory1.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap34 = slimTableFactory1.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap35 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.Table table36 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext38 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable39 = slimTableFactory1.makeSlimTable(table36, "hi!", slimTestContext38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNull(wildcardClass16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNull(wildcardClass22);
        org.junit.Assert.assertNotNull(slimTableFactory23);
        org.junit.Assert.assertNotNull(slimTableFactory24);
        org.junit.Assert.assertNotNull(slimTableFactory26);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNotNull(strMap35);
    }

    @Test
    public void test06528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06528");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        slimTableFactory0.tableTypeArrays = strMap2;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass5 = slimTableFactory0.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory6.copy();
        boolean boolean9 = slimTableFactory7.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory7.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory7.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory12.getTableType("");
        boolean boolean16 = slimTableFactory12.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap17 = slimTableFactory12.tableTypeArrays;
        slimTableFactory11.tableTypeArrays = strMap17;
        slimTableFactory0.tableTypeArrays = strMap17;
        boolean boolean21 = slimTableFactory0.hasColon("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass23 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = slimTableFactory24.copy();
        boolean boolean27 = slimTableFactory25.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = slimTableFactory25.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory29 = slimTableFactory25.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory30 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass32 = slimTableFactory30.getTableType("");
        boolean boolean34 = slimTableFactory30.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap35 = slimTableFactory30.tableTypeArrays;
        slimTableFactory29.tableTypeArrays = strMap35;
        slimTableFactory0.tableTypeArrays = strMap35;
        java.lang.String str39 = slimTableFactory0.getFullTableName("");
        boolean boolean41 = slimTableFactory0.hasColon("");
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(wildcardClass23);
        org.junit.Assert.assertNotNull(slimTableFactory25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(slimTableFactory28);
        org.junit.Assert.assertNotNull(slimTableFactory29);
        org.junit.Assert.assertNull(wildcardClass32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test06529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06529");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        slimTableFactory0.tableTypeArrays = strMap2;
        boolean boolean5 = slimTableFactory0.hasColon("hi!");
        fitnesse.testsystems.slim.Table table6 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable7 = slimTableFactory0.parseDefineTableTypeTable(table6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test06530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06530");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap5 = slimTableFactory1.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap8 = slimTableFactory1.tableTypes;
        java.lang.String str10 = slimTableFactory1.makeTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass12 = slimTableFactory1.getTableType("hi!");
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(wildcardClass12);
    }

    @Test
    public void test06531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06531");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory4.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap6 = slimTableFactory5.tableTypes;
        boolean boolean8 = slimTableFactory5.hasColon("");
        boolean boolean10 = slimTableFactory5.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap11 = slimTableFactory5.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory12.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory12.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory15.tableTypeArrays;
        slimTableFactory5.tableTypeArrays = strMap16;
        slimTableFactory0.tableTypeArrays = strMap16;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = slimTableFactory0.copy();
        java.lang.Class<?> wildcardClass22 = slimTableFactory21.getClass();
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(slimTableFactory19);
        org.junit.Assert.assertNotNull(slimTableFactory20);
        org.junit.Assert.assertNotNull(slimTableFactory21);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test06532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06532");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.lang.String str3 = slimTableFactory0.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory4.copy();
        boolean boolean7 = slimTableFactory5.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory5.copy();
        fitnesse.testsystems.slim.Table table9 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable10 = slimTableFactory8.parseDefineTableTypeTable(table9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!" + "'", str3, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(slimTableFactory8);
    }

    @Test
    public void test06533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06533");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        boolean boolean6 = slimTableFactory1.hasColon("hi!");
        java.lang.String str8 = slimTableFactory1.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap9 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory1.copy();
        boolean boolean12 = slimTableFactory10.hasColon("");
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test06534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06534");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory0.hasColon("hi!");
        java.lang.String str5 = slimTableFactory0.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory0.copy();
        java.lang.String str8 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.Table table9 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable10 = slimTableFactory0.parseDefineTableTypeTable(table9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }

    @Test
    public void test06535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06535");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        boolean boolean6 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass10 = slimTableFactory8.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory8.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap12 = slimTableFactory11.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap12;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory1.copy();
        java.lang.String str16 = slimTableFactory14.getFullTableName("hi!");
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
    }

    @Test
    public void test06536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06536");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        boolean boolean6 = slimTableFactory1.hasColon("hi!");
        boolean boolean8 = slimTableFactory1.hasColon("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass10 = slimTableFactory1.getTableType("hi!");
        java.lang.String str12 = slimTableFactory1.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.Table table15 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable16 = slimTableFactory1.parseDefineTableTypeTable(table15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(slimTableFactory13);
        org.junit.Assert.assertNotNull(strMap14);
    }

    @Test
    public void test06537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06537");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory3.tableTypeArrays;
        java.lang.String str6 = slimTableFactory3.makeTableType("hi!");
        java.lang.String str8 = slimTableFactory3.makeTableType("hi!");
        java.lang.String str10 = slimTableFactory3.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory3.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory12.getTableType("");
        boolean boolean16 = slimTableFactory12.hasColon("");
        java.lang.String str18 = slimTableFactory12.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap19 = slimTableFactory12.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass22 = slimTableFactory20.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap23 = slimTableFactory20.tableTypeArrays;
        boolean boolean25 = slimTableFactory20.hasColon("");
        java.lang.String str27 = slimTableFactory20.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap28 = slimTableFactory20.tableTypeArrays;
        slimTableFactory12.tableTypeArrays = strMap28;
        java.lang.String str31 = slimTableFactory12.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap32 = slimTableFactory12.tableTypes;
        java.lang.String str34 = slimTableFactory12.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory35 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory36 = slimTableFactory35.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap37 = slimTableFactory36.tableTypes;
        boolean boolean39 = slimTableFactory36.hasColon("");
        boolean boolean41 = slimTableFactory36.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap42 = slimTableFactory36.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory43 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass45 = slimTableFactory43.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory46 = slimTableFactory43.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap47 = slimTableFactory46.tableTypeArrays;
        slimTableFactory36.tableTypeArrays = strMap47;
        java.util.Map<java.lang.String, java.lang.String> strMap49 = slimTableFactory36.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap50 = slimTableFactory36.tableTypeArrays;
        slimTableFactory12.tableTypeArrays = strMap50;
        slimTableFactory3.tableTypeArrays = strMap50;
        fitnesse.testsystems.slim.Table table53 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable54 = slimTableFactory3.parseDefineTableTypeTable(table53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNull(wildcardClass22);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(strMap42);
        org.junit.Assert.assertNull(wildcardClass45);
        org.junit.Assert.assertNotNull(slimTableFactory46);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNotNull(strMap49);
        org.junit.Assert.assertNotNull(strMap50);
    }

    @Test
    public void test06538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06538");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory5.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory7.copy();
        boolean boolean10 = slimTableFactory8.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory8.tableTypeArrays;
        slimTableFactory6.tableTypeArrays = strMap11;
        java.lang.String str14 = slimTableFactory6.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory15.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap17 = slimTableFactory16.tableTypes;
        boolean boolean19 = slimTableFactory16.hasColon("");
        boolean boolean21 = slimTableFactory16.hasColon("hi!");
        boolean boolean23 = slimTableFactory16.hasColon("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass25 = slimTableFactory16.getTableType("hi!");
        java.lang.String str27 = slimTableFactory16.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap28 = slimTableFactory16.tableTypeArrays;
        slimTableFactory6.tableTypeArrays = strMap28;
        java.lang.String str31 = slimTableFactory6.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory32 = slimTableFactory6.copy();
        fitnesse.testsystems.slim.Table table33 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable34 = slimTableFactory6.parseDefineTableTypeTable(table33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(wildcardClass25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(slimTableFactory32);
    }

    @Test
    public void test06539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06539");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass4 = slimTableFactory1.getTableType("hi!");
        java.lang.String str6 = slimTableFactory1.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory7.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap9 = slimTableFactory8.tableTypes;
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(strMap9);
    }

    @Test
    public void test06540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06540");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory0.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap9 = slimTableFactory0.tableTypeArrays;
        boolean boolean11 = slimTableFactory0.hasColon("");
        java.lang.Class<?> wildcardClass12 = slimTableFactory0.getClass();
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test06541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06541");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass5 = slimTableFactory0.getTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory0.getTableType("hi!");
        java.lang.String str9 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap11 = slimTableFactory0.tableTypes;
        java.lang.String str13 = slimTableFactory0.getFullTableName("");
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test06542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06542");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass3 = slimTableFactory1.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        boolean boolean6 = slimTableFactory1.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory1.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap7;
        boolean boolean10 = slimTableFactory0.hasColon("hi!");
        java.lang.String str12 = slimTableFactory0.makeTableType("");
        java.lang.String str14 = slimTableFactory0.makeTableType("hi!");
        boolean boolean16 = slimTableFactory0.hasColon("hi!");
        boolean boolean18 = slimTableFactory0.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap19 = slimTableFactory0.tableTypeArrays;
        java.lang.Class<?> wildcardClass20 = strMap19.getClass();
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test06543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06543");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap5 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory6.copy();
        boolean boolean9 = slimTableFactory7.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory7.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory7.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory11.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass15 = slimTableFactory13.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory13.copy();
        boolean boolean18 = slimTableFactory13.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap19 = slimTableFactory13.tableTypeArrays;
        slimTableFactory11.tableTypeArrays = strMap19;
        slimTableFactory0.tableTypeArrays = strMap19;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap22 = slimTableFactory0.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap23 = slimTableFactory0.tableTypeArrays;
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(strMap23);
    }

    @Test
    public void test06544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06544");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass4 = slimTableFactory1.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap5 = slimTableFactory1.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory1.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap8 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory1.copy();
        boolean boolean11 = slimTableFactory1.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap13 = slimTableFactory12.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass15 = slimTableFactory12.getTableType("");
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNull(wildcardClass15);
    }

    @Test
    public void test06545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06545");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory1.tableTypeArrays;
        java.lang.String str6 = slimTableFactory1.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap9 = slimTableFactory1.tableTypes;
        java.lang.String str11 = slimTableFactory1.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory12.copy();
        boolean boolean15 = slimTableFactory13.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory13.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = slimTableFactory13.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory17.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass21 = slimTableFactory19.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = slimTableFactory19.copy();
        boolean boolean24 = slimTableFactory19.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap25 = slimTableFactory19.tableTypeArrays;
        slimTableFactory17.tableTypeArrays = strMap25;
        slimTableFactory1.tableTypeArrays = strMap25;
        java.lang.Class<?> wildcardClass28 = slimTableFactory1.getClass();
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertNotNull(slimTableFactory17);
        org.junit.Assert.assertNotNull(slimTableFactory18);
        org.junit.Assert.assertNull(wildcardClass21);
        org.junit.Assert.assertNotNull(slimTableFactory22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test06546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06546");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        boolean boolean6 = slimTableFactory1.hasColon("hi!");
        boolean boolean8 = slimTableFactory1.hasColon("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass10 = slimTableFactory1.getTableType("hi!");
        java.lang.String str12 = slimTableFactory1.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass16 = slimTableFactory14.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = slimTableFactory14.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory17.copy();
        java.lang.String str20 = slimTableFactory17.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = slimTableFactory21.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap23 = null;
        slimTableFactory21.tableTypeArrays = strMap23;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass26 = slimTableFactory21.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = slimTableFactory27.copy();
        boolean boolean30 = slimTableFactory28.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory31 = slimTableFactory28.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory32 = slimTableFactory28.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory33 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass35 = slimTableFactory33.getTableType("");
        boolean boolean37 = slimTableFactory33.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap38 = slimTableFactory33.tableTypeArrays;
        slimTableFactory32.tableTypeArrays = strMap38;
        slimTableFactory21.tableTypeArrays = strMap38;
        slimTableFactory17.tableTypeArrays = strMap38;
        slimTableFactory1.tableTypeArrays = strMap38;
        java.util.Map<java.lang.String, java.lang.String> strMap43 = slimTableFactory1.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap44 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory45 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory46 = slimTableFactory45.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap47 = slimTableFactory45.tableTypeArrays;
        boolean boolean49 = slimTableFactory45.hasColon("");
        boolean boolean51 = slimTableFactory45.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory52 = slimTableFactory45.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory53 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory54 = slimTableFactory53.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap55 = null;
        slimTableFactory53.tableTypeArrays = strMap55;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass58 = slimTableFactory53.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory59 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory60 = slimTableFactory59.copy();
        boolean boolean62 = slimTableFactory60.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory63 = slimTableFactory60.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory64 = slimTableFactory60.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory65 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass67 = slimTableFactory65.getTableType("");
        boolean boolean69 = slimTableFactory65.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap70 = slimTableFactory65.tableTypeArrays;
        slimTableFactory64.tableTypeArrays = strMap70;
        slimTableFactory53.tableTypeArrays = strMap70;
        slimTableFactory45.tableTypeArrays = strMap70;
        slimTableFactory1.tableTypeArrays = strMap70;
        java.lang.Class<?> wildcardClass75 = slimTableFactory1.getClass();
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(slimTableFactory13);
        org.junit.Assert.assertNull(wildcardClass16);
        org.junit.Assert.assertNotNull(slimTableFactory17);
        org.junit.Assert.assertNotNull(slimTableFactory18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(slimTableFactory22);
        org.junit.Assert.assertNull(wildcardClass26);
        org.junit.Assert.assertNotNull(slimTableFactory28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(slimTableFactory31);
        org.junit.Assert.assertNotNull(slimTableFactory32);
        org.junit.Assert.assertNull(wildcardClass35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertNotNull(strMap43);
        org.junit.Assert.assertNotNull(strMap44);
        org.junit.Assert.assertNotNull(slimTableFactory46);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(slimTableFactory52);
        org.junit.Assert.assertNotNull(slimTableFactory54);
        org.junit.Assert.assertNull(wildcardClass58);
        org.junit.Assert.assertNotNull(slimTableFactory60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(slimTableFactory63);
        org.junit.Assert.assertNotNull(slimTableFactory64);
        org.junit.Assert.assertNull(wildcardClass67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(strMap70);
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test06547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06547");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory0.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap10 = slimTableFactory9.tableTypes;
        boolean boolean12 = slimTableFactory9.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap13 = slimTableFactory9.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory9.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory15.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap17 = slimTableFactory16.tableTypes;
        boolean boolean19 = slimTableFactory16.hasColon("");
        boolean boolean21 = slimTableFactory16.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap22 = slimTableFactory16.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass25 = slimTableFactory23.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = slimTableFactory23.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap27 = slimTableFactory26.tableTypeArrays;
        slimTableFactory16.tableTypeArrays = strMap27;
        slimTableFactory9.tableTypeArrays = strMap27;
        slimTableFactory0.tableTypeArrays = strMap27;
        java.util.Map<java.lang.String, java.lang.String> strMap31 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory32 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory33 = slimTableFactory32.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap34 = slimTableFactory33.tableTypes;
        boolean boolean36 = slimTableFactory33.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap37 = slimTableFactory33.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory38 = slimTableFactory33.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap39 = slimTableFactory38.tableTypeArrays;
        java.lang.String str41 = slimTableFactory38.getFullTableName("");
        java.lang.String str43 = slimTableFactory38.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap44 = slimTableFactory38.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory45 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass47 = slimTableFactory45.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap48 = slimTableFactory45.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory49 = slimTableFactory45.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = slimTableFactory45.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory51 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory52 = slimTableFactory51.copy();
        boolean boolean54 = slimTableFactory52.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory55 = slimTableFactory52.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory56 = slimTableFactory52.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory57 = slimTableFactory56.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory58 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass60 = slimTableFactory58.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory61 = slimTableFactory58.copy();
        boolean boolean63 = slimTableFactory58.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap64 = slimTableFactory58.tableTypeArrays;
        slimTableFactory56.tableTypeArrays = strMap64;
        slimTableFactory45.tableTypeArrays = strMap64;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass68 = slimTableFactory45.getTableType("hi!");
        boolean boolean70 = slimTableFactory45.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap71 = slimTableFactory45.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass73 = slimTableFactory45.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap74 = slimTableFactory45.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap75 = slimTableFactory45.tableTypeArrays;
        slimTableFactory38.tableTypeArrays = strMap75;
        slimTableFactory0.tableTypeArrays = strMap75;
        fitnesse.testsystems.slim.Table table78 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable79 = slimTableFactory0.parseDefineTableTypeTable(table78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNull(wildcardClass25);
        org.junit.Assert.assertNotNull(slimTableFactory26);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(slimTableFactory33);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(slimTableFactory38);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hi!" + "'", str43, "hi!");
        org.junit.Assert.assertNotNull(strMap44);
        org.junit.Assert.assertNull(wildcardClass47);
        org.junit.Assert.assertNotNull(strMap48);
        org.junit.Assert.assertNotNull(slimTableFactory49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNotNull(slimTableFactory52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(slimTableFactory55);
        org.junit.Assert.assertNotNull(slimTableFactory56);
        org.junit.Assert.assertNotNull(slimTableFactory57);
        org.junit.Assert.assertNull(wildcardClass60);
        org.junit.Assert.assertNotNull(slimTableFactory61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(strMap64);
        org.junit.Assert.assertNull(wildcardClass68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(strMap71);
        org.junit.Assert.assertNull(wildcardClass73);
        org.junit.Assert.assertNotNull(strMap74);
        org.junit.Assert.assertNotNull(strMap75);
    }

    @Test
    public void test06548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06548");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory0.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory9.copy();
        boolean boolean12 = slimTableFactory10.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap13 = slimTableFactory10.tableTypeArrays;
        java.lang.String str15 = slimTableFactory10.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory10.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap16;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap19 = slimTableFactory0.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap20 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.Table table21 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory0.parseDefineTableTypeRow(table21, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(slimTableFactory18);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(strMap20);
    }

    @Test
    public void test06549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06549");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        slimTableFactory0.tableTypeArrays = strMap2;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass5 = slimTableFactory0.getTableType("hi!");
        java.lang.String str7 = slimTableFactory0.makeTableType("");
        boolean boolean9 = slimTableFactory0.hasColon("");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str11 = slimTableFactory0.getFullTableName("hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test06550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06550");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.lang.String str3 = slimTableFactory0.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory4.copy();
        boolean boolean7 = slimTableFactory5.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory5.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap9 = slimTableFactory8.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass11 = slimTableFactory8.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory8.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory13.copy();
        boolean boolean16 = slimTableFactory14.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = slimTableFactory14.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = slimTableFactory14.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory14.copy();
        boolean boolean21 = slimTableFactory19.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap22 = slimTableFactory19.tableTypeArrays;
        slimTableFactory8.tableTypeArrays = strMap22;
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!" + "'", str3, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(slimTableFactory17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(slimTableFactory19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strMap22);
    }

    @Test
    public void test06551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06551");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory3.tableTypeArrays;
        java.lang.String str6 = slimTableFactory3.makeTableType("hi!");
        java.lang.String str8 = slimTableFactory3.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap9 = slimTableFactory3.tableTypeArrays;
        fitnesse.testsystems.slim.Table table10 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory3.parseDefineTableTypeRow(table10, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertNotNull(strMap9);
    }

    @Test
    public void test06552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06552");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass5 = slimTableFactory3.getTableType("");
        boolean boolean7 = slimTableFactory3.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory3.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap8;
        java.lang.String str11 = slimTableFactory1.makeTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass13 = slimTableFactory1.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory1.copy();
        boolean boolean16 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = slimTableFactory1.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass19 = slimTableFactory1.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap20 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.Table table21 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable22 = slimTableFactory1.parseDefineTableTypeTable(table21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(slimTableFactory17);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(strMap20);
    }

    @Test
    public void test06553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06553");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        boolean boolean6 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass10 = slimTableFactory8.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory8.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap12 = slimTableFactory11.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap12;
        java.lang.String str15 = slimTableFactory1.makeTableType("");
        java.lang.String str17 = slimTableFactory1.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory18.copy();
        boolean boolean21 = slimTableFactory19.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = slimTableFactory19.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = slimTableFactory19.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = slimTableFactory23.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = slimTableFactory25.copy();
        boolean boolean28 = slimTableFactory26.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap29 = slimTableFactory26.tableTypeArrays;
        slimTableFactory24.tableTypeArrays = strMap29;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory31 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory32 = slimTableFactory31.copy();
        boolean boolean34 = slimTableFactory32.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap35 = slimTableFactory32.tableTypeArrays;
        java.lang.String str37 = slimTableFactory32.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory38 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory39 = slimTableFactory38.copy();
        boolean boolean41 = slimTableFactory39.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap42 = slimTableFactory39.tableTypeArrays;
        java.lang.String str44 = slimTableFactory39.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap45 = slimTableFactory39.tableTypeArrays;
        slimTableFactory32.tableTypeArrays = strMap45;
        java.util.Map<java.lang.String, java.lang.String> strMap47 = slimTableFactory32.tableTypeArrays;
        slimTableFactory24.tableTypeArrays = strMap47;
        slimTableFactory1.tableTypeArrays = strMap47;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap50 = slimTableFactory1.tableTypes;
        boolean boolean52 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap53 = slimTableFactory1.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass55 = slimTableFactory1.getTableType("");
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(slimTableFactory22);
        org.junit.Assert.assertNotNull(slimTableFactory23);
        org.junit.Assert.assertNotNull(slimTableFactory24);
        org.junit.Assert.assertNotNull(slimTableFactory26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(slimTableFactory32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(slimTableFactory39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(strMap42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(strMap53);
        org.junit.Assert.assertNull(wildcardClass55);
    }

    @Test
    public void test06554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06554");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory8.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap10;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory12.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory12.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory15.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap17 = slimTableFactory15.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap17;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap19 = slimTableFactory1.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap20 = slimTableFactory1.tableTypeArrays;
        boolean boolean22 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.Table table23 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable24 = slimTableFactory1.parseDefineTableTypeTable(table23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test06555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06555");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap5 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory6.copy();
        boolean boolean9 = slimTableFactory7.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory7.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory7.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory11.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass15 = slimTableFactory13.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory13.copy();
        boolean boolean18 = slimTableFactory13.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap19 = slimTableFactory13.tableTypeArrays;
        slimTableFactory11.tableTypeArrays = strMap19;
        slimTableFactory0.tableTypeArrays = strMap19;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass23 = slimTableFactory0.getTableType("hi!");
        boolean boolean25 = slimTableFactory0.hasColon("hi!");
        boolean boolean27 = slimTableFactory0.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass29 = slimTableFactory0.getTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass31 = slimTableFactory0.getTableType("hi!");
        fitnesse.testsystems.slim.Table table32 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable33 = slimTableFactory0.parseDefineTableTypeTable(table32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(wildcardClass29);
        org.junit.Assert.assertNull(wildcardClass31);
    }

    @Test
    public void test06556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06556");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        slimTableFactory0.tableTypeArrays = strMap2;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass5 = slimTableFactory0.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory6.copy();
        boolean boolean9 = slimTableFactory7.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory7.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory7.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory12.getTableType("");
        boolean boolean16 = slimTableFactory12.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap17 = slimTableFactory12.tableTypeArrays;
        slimTableFactory11.tableTypeArrays = strMap17;
        slimTableFactory0.tableTypeArrays = strMap17;
        boolean boolean21 = slimTableFactory0.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap25 = slimTableFactory0.tableTypeArrays;
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(slimTableFactory22);
        org.junit.Assert.assertNotNull(slimTableFactory23);
        org.junit.Assert.assertNotNull(slimTableFactory24);
        org.junit.Assert.assertNotNull(strMap25);
    }

    @Test
    public void test06557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06557");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass5 = slimTableFactory3.getTableType("");
        boolean boolean7 = slimTableFactory3.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory3.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap8;
        java.lang.String str11 = slimTableFactory1.makeTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass13 = slimTableFactory1.getTableType("");
        boolean boolean15 = slimTableFactory1.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory1.copy();
        java.lang.Class<?> wildcardClass17 = slimTableFactory1.getClass();
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test06558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06558");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory0.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass6 = slimTableFactory4.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory4.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory4.copy();
        fitnesse.testsystems.slim.Table table9 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext11 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable12 = slimTableFactory4.makeSlimTable(table9, "", slimTestContext11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertNotNull(slimTableFactory8);
    }

    @Test
    public void test06559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06559");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory3.tableTypeArrays;
        java.lang.String str6 = slimTableFactory3.makeTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass8 = slimTableFactory3.getTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap9 = slimTableFactory3.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory3.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory3.copy();
        boolean boolean13 = slimTableFactory11.hasColon("hi!");
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test06560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06560");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap5 = slimTableFactory1.tableTypeArrays;
        java.lang.String str7 = slimTableFactory1.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory1.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass10 = slimTableFactory1.getTableType("");
        java.lang.String str12 = slimTableFactory1.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory1.copy();
        java.lang.String str15 = slimTableFactory1.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap16 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.Table table17 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory1.parseDefineTableTypeRow(table17, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(slimTableFactory13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNotNull(strMap16);
    }

    @Test
    public void test06561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06561");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        boolean boolean6 = slimTableFactory1.hasColon("hi!");
        boolean boolean8 = slimTableFactory1.hasColon("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass10 = slimTableFactory1.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap11 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.Table table13 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext15 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable16 = slimTableFactory12.makeSlimTable(table13, "", slimTestContext15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(slimTableFactory12);
    }

    @Test
    public void test06562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06562");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory0.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap9 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory10.copy();
        boolean boolean13 = slimTableFactory11.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory11.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory11.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass17 = slimTableFactory15.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap18 = slimTableFactory15.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass21 = slimTableFactory19.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap22 = slimTableFactory19.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = slimTableFactory19.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap24 = slimTableFactory19.tableTypeArrays;
        slimTableFactory15.tableTypeArrays = strMap24;
        slimTableFactory0.tableTypeArrays = strMap24;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.Table table28 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory27.parseDefineTableTypeRow(table28, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertNull(wildcardClass17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNull(wildcardClass21);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(slimTableFactory23);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNotNull(slimTableFactory27);
    }

    @Test
    public void test06563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06563");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap5 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory6.copy();
        boolean boolean9 = slimTableFactory7.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory7.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory7.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory11.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass15 = slimTableFactory13.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory13.copy();
        boolean boolean18 = slimTableFactory13.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap19 = slimTableFactory13.tableTypeArrays;
        slimTableFactory11.tableTypeArrays = strMap19;
        slimTableFactory0.tableTypeArrays = strMap19;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass23 = slimTableFactory0.getTableType("hi!");
        boolean boolean25 = slimTableFactory0.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap26 = slimTableFactory0.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass28 = slimTableFactory0.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap29 = slimTableFactory0.tableTypes;
        boolean boolean31 = slimTableFactory0.hasColon("");
        java.lang.Class<?> wildcardClass32 = slimTableFactory0.getClass();
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNull(wildcardClass28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test06564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06564");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = slimTableFactory0.tableTypeArrays;
        boolean boolean4 = slimTableFactory0.hasColon("");
        boolean boolean6 = slimTableFactory0.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = null;
        slimTableFactory8.tableTypeArrays = strMap10;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass13 = slimTableFactory8.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory14.copy();
        boolean boolean17 = slimTableFactory15.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory15.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory15.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass22 = slimTableFactory20.getTableType("");
        boolean boolean24 = slimTableFactory20.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap25 = slimTableFactory20.tableTypeArrays;
        slimTableFactory19.tableTypeArrays = strMap25;
        slimTableFactory8.tableTypeArrays = strMap25;
        slimTableFactory0.tableTypeArrays = strMap25;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap29 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory30 = slimTableFactory0.copy();
        java.lang.String str32 = slimTableFactory0.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap33 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.Table table34 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext36 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable37 = slimTableFactory0.makeSlimTable(table34, "", slimTestContext36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(slimTableFactory18);
        org.junit.Assert.assertNotNull(slimTableFactory19);
        org.junit.Assert.assertNull(wildcardClass22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(slimTableFactory30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(strMap33);
    }

    @Test
    public void test06565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06565");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.lang.String str3 = slimTableFactory0.getFullTableName("hi!");
        java.lang.String str5 = slimTableFactory0.makeTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory0.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap8 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass11 = slimTableFactory9.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory9.copy();
        boolean boolean14 = slimTableFactory9.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass16 = slimTableFactory9.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory17.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap19 = slimTableFactory18.tableTypes;
        boolean boolean21 = slimTableFactory18.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap22 = slimTableFactory18.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap23 = slimTableFactory18.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = slimTableFactory24.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap26 = slimTableFactory25.tableTypes;
        boolean boolean28 = slimTableFactory25.hasColon("");
        boolean boolean30 = slimTableFactory25.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap31 = slimTableFactory25.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory32 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass34 = slimTableFactory32.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory35 = slimTableFactory32.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap36 = slimTableFactory35.tableTypeArrays;
        slimTableFactory25.tableTypeArrays = strMap36;
        slimTableFactory18.tableTypeArrays = strMap36;
        slimTableFactory9.tableTypeArrays = strMap36;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory40 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass42 = slimTableFactory40.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap43 = slimTableFactory40.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory44 = slimTableFactory40.copy();
        boolean boolean46 = slimTableFactory44.hasColon("");
        java.lang.String str48 = slimTableFactory44.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap49 = slimTableFactory44.tableTypeArrays;
        slimTableFactory9.tableTypeArrays = strMap49;
        slimTableFactory0.tableTypeArrays = strMap49;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass53 = slimTableFactory0.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory54 = slimTableFactory0.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass56 = slimTableFactory0.getTableType("");
        java.lang.String str58 = slimTableFactory0.makeTableType("hi!");
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!" + "'", str3, "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(wildcardClass16);
        org.junit.Assert.assertNotNull(slimTableFactory18);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(slimTableFactory25);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNull(wildcardClass34);
        org.junit.Assert.assertNotNull(slimTableFactory35);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNull(wildcardClass42);
        org.junit.Assert.assertNotNull(strMap43);
        org.junit.Assert.assertNotNull(slimTableFactory44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(strMap49);
        org.junit.Assert.assertNull(wildcardClass53);
        org.junit.Assert.assertNotNull(slimTableFactory54);
        org.junit.Assert.assertNull(wildcardClass56);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "hi!" + "'", str58, "hi!");
    }

    @Test
    public void test06566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06566");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        slimTableFactory0.tableTypeArrays = strMap2;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass5 = slimTableFactory0.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory6.copy();
        boolean boolean9 = slimTableFactory7.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory7.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory7.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory12.getTableType("");
        boolean boolean16 = slimTableFactory12.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap17 = slimTableFactory12.tableTypeArrays;
        slimTableFactory11.tableTypeArrays = strMap17;
        slimTableFactory0.tableTypeArrays = strMap17;
        boolean boolean21 = slimTableFactory0.hasColon("");
        boolean boolean23 = slimTableFactory0.hasColon("");
        java.lang.String str25 = slimTableFactory0.getFullTableName("hi!");
        java.lang.Class<?> wildcardClass26 = slimTableFactory0.getClass();
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test06567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06567");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap5 = slimTableFactory1.tableTypeArrays;
        java.lang.String str7 = slimTableFactory1.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory1.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass10 = slimTableFactory1.getTableType("");
        java.lang.String str12 = slimTableFactory1.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass17 = slimTableFactory15.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap18 = slimTableFactory15.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory15.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap20 = slimTableFactory15.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = slimTableFactory21.copy();
        boolean boolean24 = slimTableFactory22.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = slimTableFactory22.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = slimTableFactory22.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = slimTableFactory26.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass30 = slimTableFactory28.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory31 = slimTableFactory28.copy();
        boolean boolean33 = slimTableFactory28.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap34 = slimTableFactory28.tableTypeArrays;
        slimTableFactory26.tableTypeArrays = strMap34;
        slimTableFactory15.tableTypeArrays = strMap34;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass38 = slimTableFactory15.getTableType("hi!");
        boolean boolean40 = slimTableFactory15.hasColon("hi!");
        boolean boolean42 = slimTableFactory15.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap43 = slimTableFactory15.tableTypeArrays;
        slimTableFactory14.tableTypeArrays = strMap43;
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(slimTableFactory13);
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertNull(wildcardClass17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(slimTableFactory19);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(slimTableFactory22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(slimTableFactory25);
        org.junit.Assert.assertNotNull(slimTableFactory26);
        org.junit.Assert.assertNotNull(slimTableFactory27);
        org.junit.Assert.assertNull(wildcardClass30);
        org.junit.Assert.assertNotNull(slimTableFactory31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNull(wildcardClass38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(strMap43);
    }

    @Test
    public void test06568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06568");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory1.tableTypeArrays;
        java.lang.String str6 = slimTableFactory1.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory7.copy();
        boolean boolean10 = slimTableFactory8.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory8.tableTypeArrays;
        java.lang.String str13 = slimTableFactory8.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory8.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap14;
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory1.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap17 = slimTableFactory1.tableTypes;
        java.lang.String str19 = slimTableFactory1.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = slimTableFactory1.copy();
        java.lang.String str23 = slimTableFactory21.makeTableType("");
        java.lang.Class<?> wildcardClass24 = slimTableFactory21.getClass();
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory20);
        org.junit.Assert.assertNotNull(slimTableFactory21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test06569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06569");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.lang.String str3 = slimTableFactory0.getFullTableName("hi!");
        java.lang.String str5 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory6.copy();
        java.lang.String str9 = slimTableFactory6.getFullTableName("");
        fitnesse.testsystems.slim.Table table10 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable11 = slimTableFactory6.parseDefineTableTypeTable(table10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!" + "'", str3, "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test06570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06570");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        boolean boolean6 = slimTableFactory1.hasColon("hi!");
        boolean boolean8 = slimTableFactory1.hasColon("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass10 = slimTableFactory1.getTableType("hi!");
        java.lang.String str12 = slimTableFactory1.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory1.copy();
        java.lang.String str15 = slimTableFactory1.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory1.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass18 = slimTableFactory1.getTableType("hi!");
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(slimTableFactory13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertNull(wildcardClass18);
    }

    @Test
    public void test06571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06571");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory0.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap9 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory0.copy();
        boolean boolean12 = slimTableFactory10.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap13 = slimTableFactory10.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory10.copy();
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(slimTableFactory14);
    }

    @Test
    public void test06572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06572");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory3.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap5 = slimTableFactory3.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap6 = slimTableFactory3.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass8 = slimTableFactory3.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory3.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory9.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory9.copy();
        java.lang.Class<?> wildcardClass12 = slimTableFactory11.getClass();
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test06573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06573");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass4 = slimTableFactory1.getTableType("hi!");
        boolean boolean6 = slimTableFactory1.hasColon("");
        java.lang.String str8 = slimTableFactory1.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap9 = slimTableFactory1.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap10 = slimTableFactory1.tableTypes;
        boolean boolean12 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.Table table14 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory1.parseDefineTableTypeRow(table14, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(slimTableFactory13);
    }

    @Test
    public void test06574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06574");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory1.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass8 = slimTableFactory6.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory6.copy();
        boolean boolean11 = slimTableFactory6.hasColon("");
        fitnesse.testsystems.slim.Table table12 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable13 = slimTableFactory6.parseDefineTableTypeTable(table12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test06575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06575");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        slimTableFactory0.tableTypeArrays = strMap2;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass5 = slimTableFactory0.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory6.copy();
        boolean boolean9 = slimTableFactory7.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory7.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory7.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory12.getTableType("");
        boolean boolean16 = slimTableFactory12.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap17 = slimTableFactory12.tableTypeArrays;
        slimTableFactory11.tableTypeArrays = strMap17;
        slimTableFactory0.tableTypeArrays = strMap17;
        boolean boolean21 = slimTableFactory0.hasColon("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass23 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = slimTableFactory24.copy();
        boolean boolean27 = slimTableFactory25.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = slimTableFactory25.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory29 = slimTableFactory25.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory30 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass32 = slimTableFactory30.getTableType("");
        boolean boolean34 = slimTableFactory30.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap35 = slimTableFactory30.tableTypeArrays;
        slimTableFactory29.tableTypeArrays = strMap35;
        slimTableFactory0.tableTypeArrays = strMap35;
        java.lang.String str39 = slimTableFactory0.getFullTableName("");
        java.lang.String str41 = slimTableFactory0.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap42 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory43 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory44 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory45 = slimTableFactory44.copy();
        boolean boolean47 = slimTableFactory45.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory48 = slimTableFactory45.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory49 = slimTableFactory45.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory50 = slimTableFactory49.copy();
        boolean boolean52 = slimTableFactory49.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory53 = slimTableFactory49.copy();
        java.lang.String str55 = slimTableFactory53.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory56 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory57 = slimTableFactory56.copy();
        boolean boolean59 = slimTableFactory57.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory60 = slimTableFactory57.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory61 = slimTableFactory57.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory62 = slimTableFactory61.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory63 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass65 = slimTableFactory63.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory66 = slimTableFactory63.copy();
        boolean boolean68 = slimTableFactory63.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap69 = slimTableFactory63.tableTypeArrays;
        slimTableFactory61.tableTypeArrays = strMap69;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory71 = slimTableFactory61.copy();
        java.lang.String str73 = slimTableFactory61.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap74 = slimTableFactory61.tableTypeArrays;
        slimTableFactory53.tableTypeArrays = strMap74;
        slimTableFactory43.tableTypeArrays = strMap74;
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(wildcardClass23);
        org.junit.Assert.assertNotNull(slimTableFactory25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(slimTableFactory28);
        org.junit.Assert.assertNotNull(slimTableFactory29);
        org.junit.Assert.assertNull(wildcardClass32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(strMap42);
        org.junit.Assert.assertNotNull(slimTableFactory43);
        org.junit.Assert.assertNotNull(slimTableFactory45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(slimTableFactory48);
        org.junit.Assert.assertNotNull(slimTableFactory49);
        org.junit.Assert.assertNotNull(slimTableFactory50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(slimTableFactory53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(slimTableFactory57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(slimTableFactory60);
        org.junit.Assert.assertNotNull(slimTableFactory61);
        org.junit.Assert.assertNotNull(slimTableFactory62);
        org.junit.Assert.assertNull(wildcardClass65);
        org.junit.Assert.assertNotNull(slimTableFactory66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(strMap69);
        org.junit.Assert.assertNotNull(slimTableFactory71);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(strMap74);
    }

    @Test
    public void test06576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06576");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass5 = slimTableFactory0.getTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory0.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory0.copy();
        boolean boolean10 = slimTableFactory0.hasColon("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass12 = slimTableFactory0.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap13 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass16 = slimTableFactory14.getTableType("");
        boolean boolean18 = slimTableFactory14.hasColon("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass20 = slimTableFactory14.getTableType("hi!");
        java.lang.String str22 = slimTableFactory14.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = slimTableFactory14.copy();
        java.lang.String str25 = slimTableFactory14.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap26 = slimTableFactory14.tableTypes;
        java.lang.String str28 = slimTableFactory14.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory29 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass31 = slimTableFactory29.getTableType("");
        boolean boolean33 = slimTableFactory29.hasColon("");
        java.lang.String str35 = slimTableFactory29.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap36 = slimTableFactory29.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory37 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass39 = slimTableFactory37.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap40 = slimTableFactory37.tableTypeArrays;
        boolean boolean42 = slimTableFactory37.hasColon("");
        java.lang.String str44 = slimTableFactory37.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap45 = slimTableFactory37.tableTypeArrays;
        slimTableFactory29.tableTypeArrays = strMap45;
        slimTableFactory14.tableTypeArrays = strMap45;
        slimTableFactory0.tableTypeArrays = strMap45;
        fitnesse.testsystems.slim.Table table49 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable50 = slimTableFactory0.parseDefineTableTypeTable(table49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNull(wildcardClass16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(wildcardClass20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNull(wildcardClass39);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(strMap45);
    }

    @Test
    public void test06577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06577");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory8.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap10;
        java.util.Map<java.lang.String, java.lang.String> strMap12 = slimTableFactory1.tableTypeArrays;
        java.lang.String str14 = slimTableFactory1.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory1.copy();
        java.lang.String str17 = slimTableFactory1.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass20 = slimTableFactory18.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap21 = slimTableFactory18.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = slimTableFactory18.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap23 = slimTableFactory18.tableTypeArrays;
        boolean boolean25 = slimTableFactory18.hasColon("");
        java.lang.String str27 = slimTableFactory18.makeTableType("");
        java.lang.String str29 = slimTableFactory18.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory30 = slimTableFactory18.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory31 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory32 = slimTableFactory31.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = null;
        slimTableFactory31.tableTypeArrays = strMap33;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass36 = slimTableFactory31.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory37 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory38 = slimTableFactory37.copy();
        boolean boolean40 = slimTableFactory38.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory41 = slimTableFactory38.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory42 = slimTableFactory38.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory43 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass45 = slimTableFactory43.getTableType("");
        boolean boolean47 = slimTableFactory43.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap48 = slimTableFactory43.tableTypeArrays;
        slimTableFactory42.tableTypeArrays = strMap48;
        slimTableFactory31.tableTypeArrays = strMap48;
        boolean boolean52 = slimTableFactory31.hasColon("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass54 = slimTableFactory31.getTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass56 = slimTableFactory31.getTableType("hi!");
        boolean boolean58 = slimTableFactory31.hasColon("hi!");
        java.lang.String str60 = slimTableFactory31.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap61 = slimTableFactory31.tableTypeArrays;
        slimTableFactory30.tableTypeArrays = strMap61;
        slimTableFactory1.tableTypeArrays = strMap61;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap64 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.Table table65 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext67 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable68 = slimTableFactory1.makeSlimTable(table65, "hi!", slimTestContext67);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNull(wildcardClass20);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(slimTableFactory22);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(slimTableFactory30);
        org.junit.Assert.assertNotNull(slimTableFactory32);
        org.junit.Assert.assertNull(wildcardClass36);
        org.junit.Assert.assertNotNull(slimTableFactory38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(slimTableFactory41);
        org.junit.Assert.assertNotNull(slimTableFactory42);
        org.junit.Assert.assertNull(wildcardClass45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strMap48);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(wildcardClass54);
        org.junit.Assert.assertNull(wildcardClass56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "hi!" + "'", str60, "hi!");
        org.junit.Assert.assertNotNull(strMap61);
        org.junit.Assert.assertNotNull(strMap64);
    }

    @Test
    public void test06578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06578");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        boolean boolean5 = slimTableFactory0.hasColon("");
        java.lang.String str7 = slimTableFactory0.makeTableType("");
        java.lang.String str9 = slimTableFactory0.makeTableType("");
        java.lang.String str11 = slimTableFactory0.makeTableType("");
        java.lang.String str13 = slimTableFactory0.getFullTableName("");
        java.lang.String str15 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = slimTableFactory16.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = null;
        slimTableFactory16.tableTypeArrays = strMap18;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass21 = slimTableFactory16.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = slimTableFactory22.copy();
        boolean boolean25 = slimTableFactory23.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = slimTableFactory23.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = slimTableFactory23.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass30 = slimTableFactory28.getTableType("");
        boolean boolean32 = slimTableFactory28.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap33 = slimTableFactory28.tableTypeArrays;
        slimTableFactory27.tableTypeArrays = strMap33;
        slimTableFactory16.tableTypeArrays = strMap33;
        boolean boolean37 = slimTableFactory16.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory38 = slimTableFactory16.copy();
        java.lang.String str40 = slimTableFactory16.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap41 = slimTableFactory16.tableTypes;
        boolean boolean43 = slimTableFactory16.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory44 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory45 = slimTableFactory44.copy();
        boolean boolean47 = slimTableFactory45.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory48 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass50 = slimTableFactory48.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory51 = slimTableFactory48.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory52 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory53 = slimTableFactory52.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap54 = slimTableFactory53.tableTypes;
        boolean boolean56 = slimTableFactory53.hasColon("");
        boolean boolean58 = slimTableFactory53.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap59 = slimTableFactory53.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory60 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass62 = slimTableFactory60.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory63 = slimTableFactory60.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap64 = slimTableFactory63.tableTypeArrays;
        slimTableFactory53.tableTypeArrays = strMap64;
        slimTableFactory48.tableTypeArrays = strMap64;
        slimTableFactory45.tableTypeArrays = strMap64;
        slimTableFactory16.tableTypeArrays = strMap64;
        slimTableFactory0.tableTypeArrays = strMap64;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap70 = slimTableFactory0.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap71 = slimTableFactory0.tableTypeArrays;
        java.lang.String str73 = slimTableFactory0.getFullTableName("hi!");
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(slimTableFactory17);
        org.junit.Assert.assertNull(wildcardClass21);
        org.junit.Assert.assertNotNull(slimTableFactory23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(slimTableFactory26);
        org.junit.Assert.assertNotNull(slimTableFactory27);
        org.junit.Assert.assertNull(wildcardClass30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(slimTableFactory38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(slimTableFactory45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(wildcardClass50);
        org.junit.Assert.assertNotNull(slimTableFactory51);
        org.junit.Assert.assertNotNull(slimTableFactory53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(strMap59);
        org.junit.Assert.assertNull(wildcardClass62);
        org.junit.Assert.assertNotNull(slimTableFactory63);
        org.junit.Assert.assertNotNull(strMap64);
        org.junit.Assert.assertNotNull(strMap70);
        org.junit.Assert.assertNotNull(strMap71);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "hi!" + "'", str73, "hi!");
    }

    @Test
    public void test06579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06579");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap5 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory6.tableTypeArrays;
        java.lang.String str9 = slimTableFactory6.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory10.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap12 = slimTableFactory11.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory11.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory15.copy();
        boolean boolean18 = slimTableFactory16.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory16.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap20 = slimTableFactory16.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = slimTableFactory21.copy();
        boolean boolean24 = slimTableFactory22.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = slimTableFactory22.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = slimTableFactory22.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = slimTableFactory22.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap28 = slimTableFactory27.tableTypeArrays;
        slimTableFactory16.tableTypeArrays = strMap28;
        slimTableFactory11.tableTypeArrays = strMap28;
        slimTableFactory6.tableTypeArrays = strMap28;
        fitnesse.testsystems.slim.Table table32 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory6.parseDefineTableTypeRow(table32, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(slimTableFactory19);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(slimTableFactory22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(slimTableFactory25);
        org.junit.Assert.assertNotNull(slimTableFactory26);
        org.junit.Assert.assertNotNull(slimTableFactory27);
        org.junit.Assert.assertNotNull(strMap28);
    }

    @Test
    public void test06580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06580");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        boolean boolean6 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory1.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass9 = slimTableFactory1.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory10.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap12 = slimTableFactory11.tableTypes;
        boolean boolean14 = slimTableFactory11.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap15 = slimTableFactory11.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory11.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap17 = slimTableFactory16.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap17;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass20 = slimTableFactory1.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap21 = slimTableFactory1.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap22 = slimTableFactory1.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass24 = slimTableFactory1.getTableType("");
        java.lang.String str26 = slimTableFactory1.getFullTableName("hi!");
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNull(wildcardClass20);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNull(wildcardClass24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
    }

    @Test
    public void test06581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06581");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory0.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap10 = slimTableFactory9.tableTypes;
        boolean boolean12 = slimTableFactory9.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap13 = slimTableFactory9.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory9.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory15.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap17 = slimTableFactory16.tableTypes;
        boolean boolean19 = slimTableFactory16.hasColon("");
        boolean boolean21 = slimTableFactory16.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap22 = slimTableFactory16.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass25 = slimTableFactory23.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = slimTableFactory23.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap27 = slimTableFactory26.tableTypeArrays;
        slimTableFactory16.tableTypeArrays = strMap27;
        slimTableFactory9.tableTypeArrays = strMap27;
        slimTableFactory0.tableTypeArrays = strMap27;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory31 = slimTableFactory0.copy();
        java.lang.String str33 = slimTableFactory31.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory34 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory35 = slimTableFactory34.copy();
        boolean boolean37 = slimTableFactory35.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory38 = slimTableFactory35.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory39 = slimTableFactory35.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory40 = slimTableFactory35.copy();
        boolean boolean42 = slimTableFactory40.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory43 = slimTableFactory40.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap44 = slimTableFactory43.tableTypeArrays;
        slimTableFactory31.tableTypeArrays = strMap44;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass47 = slimTableFactory31.getTableType("hi!");
        java.lang.String str49 = slimTableFactory31.makeTableType("hi!");
        boolean boolean51 = slimTableFactory31.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory52 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory53 = slimTableFactory52.copy();
        boolean boolean55 = slimTableFactory53.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory56 = slimTableFactory53.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory57 = slimTableFactory53.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory58 = slimTableFactory53.copy();
        boolean boolean60 = slimTableFactory58.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap61 = slimTableFactory58.tableTypes;
        java.lang.String str63 = slimTableFactory58.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap64 = slimTableFactory58.tableTypeArrays;
        slimTableFactory31.tableTypeArrays = strMap64;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap66 = slimTableFactory31.tableTypes;
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNull(wildcardClass25);
        org.junit.Assert.assertNotNull(slimTableFactory26);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(slimTableFactory31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(slimTableFactory38);
        org.junit.Assert.assertNotNull(slimTableFactory39);
        org.junit.Assert.assertNotNull(slimTableFactory40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(slimTableFactory43);
        org.junit.Assert.assertNotNull(strMap44);
        org.junit.Assert.assertNull(wildcardClass47);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hi!" + "'", str49, "hi!");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(slimTableFactory53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(slimTableFactory56);
        org.junit.Assert.assertNotNull(slimTableFactory57);
        org.junit.Assert.assertNotNull(slimTableFactory58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(strMap61);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "hi!" + "'", str63, "hi!");
        org.junit.Assert.assertNotNull(strMap64);
        org.junit.Assert.assertNotNull(strMap66);
    }

    @Test
    public void test06582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06582");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        java.lang.String str5 = slimTableFactory1.getFullTableName("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory1.getTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass9 = slimTableFactory1.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.Table table11 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable12 = slimTableFactory1.parseDefineTableTypeTable(table11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNotNull(slimTableFactory10);
    }

    @Test
    public void test06583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06583");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        boolean boolean6 = slimTableFactory1.hasColon("hi!");
        boolean boolean8 = slimTableFactory1.hasColon("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass10 = slimTableFactory1.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap11 = slimTableFactory1.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap12 = slimTableFactory1.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap13 = slimTableFactory1.tableTypes;
        java.lang.Class<?> wildcardClass14 = slimTableFactory1.getClass();
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test06584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06584");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory8.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap10;
        java.lang.String str13 = slimTableFactory1.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap14 = slimTableFactory1.tableTypes;
        java.lang.String str16 = slimTableFactory1.getFullTableName("hi!");
        fitnesse.testsystems.slim.Table table17 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext19 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable20 = slimTableFactory1.makeSlimTable(table17, "hi!", slimTestContext19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
    }

    @Test
    public void test06585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06585");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass3 = slimTableFactory1.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        boolean boolean6 = slimTableFactory1.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory1.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap7;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap9 = slimTableFactory0.tableTypes;
        boolean boolean11 = slimTableFactory0.hasColon("hi!");
        boolean boolean13 = slimTableFactory0.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory0.tableTypeArrays;
        java.lang.String str16 = slimTableFactory0.getFullTableName("hi!");
        fitnesse.testsystems.slim.Table table17 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext19 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable20 = slimTableFactory0.makeSlimTable(table17, "", slimTestContext19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
    }

    @Test
    public void test06586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06586");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        boolean boolean4 = slimTableFactory0.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap5 = slimTableFactory0.tableTypeArrays;
        boolean boolean7 = slimTableFactory0.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass10 = slimTableFactory8.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory8.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory8.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory8.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory8.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap14;
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertNotNull(slimTableFactory13);
        org.junit.Assert.assertNotNull(strMap14);
    }

    @Test
    public void test06587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06587");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory1.tableTypeArrays;
        java.lang.String str6 = slimTableFactory1.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory7.copy();
        boolean boolean10 = slimTableFactory8.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory8.tableTypeArrays;
        java.lang.String str13 = slimTableFactory8.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory8.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap14;
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass19 = slimTableFactory17.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory17.copy();
        boolean boolean22 = slimTableFactory17.hasColon("hi!");
        java.lang.String str24 = slimTableFactory17.getFullTableName("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass26 = slimTableFactory17.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap27 = slimTableFactory17.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap27;
        fitnesse.testsystems.slim.Table table29 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory1.parseDefineTableTypeRow(table29, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(slimTableFactory20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNull(wildcardClass26);
        org.junit.Assert.assertNotNull(strMap27);
    }

    @Test
    public void test06588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06588");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap5 = slimTableFactory1.tableTypeArrays;
        boolean boolean7 = slimTableFactory1.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass9 = slimTableFactory1.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory11.copy();
        fitnesse.testsystems.slim.Table table13 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext15 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable16 = slimTableFactory12.makeSlimTable(table13, "", slimTestContext15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNotNull(slimTableFactory12);
    }

    @Test
    public void test06589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06589");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        slimTableFactory0.tableTypeArrays = strMap2;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass5 = slimTableFactory0.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory6.copy();
        boolean boolean9 = slimTableFactory7.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory7.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory7.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory12.getTableType("");
        boolean boolean16 = slimTableFactory12.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap17 = slimTableFactory12.tableTypeArrays;
        slimTableFactory11.tableTypeArrays = strMap17;
        slimTableFactory0.tableTypeArrays = strMap17;
        boolean boolean21 = slimTableFactory0.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass24 = slimTableFactory22.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap25 = slimTableFactory22.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap25;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap27 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = slimTableFactory0.copy();
        java.lang.String str30 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap31 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.Table table32 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable33 = slimTableFactory0.parseDefineTableTypeTable(table32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(wildcardClass24);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(slimTableFactory28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
        org.junit.Assert.assertNotNull(strMap31);
    }

    @Test
    public void test06590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06590");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        boolean boolean4 = slimTableFactory0.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap5 = slimTableFactory0.tableTypeArrays;
        java.lang.String str7 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap9 = slimTableFactory0.tableTypes;
        boolean boolean11 = slimTableFactory0.hasColon("");
        fitnesse.testsystems.slim.Table table12 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory0.parseDefineTableTypeRow(table12, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test06591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06591");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        boolean boolean6 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass10 = slimTableFactory8.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory8.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap12 = slimTableFactory11.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap12;
        java.lang.String str15 = slimTableFactory1.makeTableType("");
        java.lang.String str17 = slimTableFactory1.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass20 = slimTableFactory18.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap21 = slimTableFactory18.tableTypeArrays;
        boolean boolean23 = slimTableFactory18.hasColon("");
        java.lang.String str25 = slimTableFactory18.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap26 = slimTableFactory18.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = slimTableFactory27.copy();
        boolean boolean30 = slimTableFactory28.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap31 = slimTableFactory28.tableTypeArrays;
        java.lang.String str33 = slimTableFactory28.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory34 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory35 = slimTableFactory34.copy();
        boolean boolean37 = slimTableFactory35.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap38 = slimTableFactory35.tableTypeArrays;
        java.lang.String str40 = slimTableFactory35.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap41 = slimTableFactory35.tableTypeArrays;
        slimTableFactory28.tableTypeArrays = strMap41;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory43 = slimTableFactory28.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory44 = slimTableFactory28.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory45 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass47 = slimTableFactory45.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory48 = slimTableFactory45.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap49 = slimTableFactory48.tableTypeArrays;
        slimTableFactory28.tableTypeArrays = strMap49;
        slimTableFactory18.tableTypeArrays = strMap49;
        slimTableFactory1.tableTypeArrays = strMap49;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass54 = slimTableFactory1.getTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass56 = slimTableFactory1.getTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass58 = slimTableFactory1.getTableType("hi!");
        java.lang.String str60 = slimTableFactory1.makeTableType("hi!");
        fitnesse.testsystems.slim.Table table61 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable62 = slimTableFactory1.parseDefineTableTypeTable(table61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNull(wildcardClass20);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(slimTableFactory28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(slimTableFactory35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertNotNull(slimTableFactory43);
        org.junit.Assert.assertNotNull(slimTableFactory44);
        org.junit.Assert.assertNull(wildcardClass47);
        org.junit.Assert.assertNotNull(slimTableFactory48);
        org.junit.Assert.assertNotNull(strMap49);
        org.junit.Assert.assertNull(wildcardClass54);
        org.junit.Assert.assertNull(wildcardClass56);
        org.junit.Assert.assertNull(wildcardClass58);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "hi!" + "'", str60, "hi!");
    }

    @Test
    public void test06592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06592");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap4 = slimTableFactory3.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory5.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory6.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass10 = slimTableFactory8.getTableType("");
        boolean boolean12 = slimTableFactory8.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap13 = slimTableFactory8.tableTypeArrays;
        slimTableFactory6.tableTypeArrays = strMap13;
        slimTableFactory3.tableTypeArrays = strMap13;
        boolean boolean17 = slimTableFactory3.hasColon("hi!");
        java.lang.String str19 = slimTableFactory3.getFullTableName("");
        fitnesse.testsystems.slim.Table table20 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable21 = slimTableFactory3.parseDefineTableTypeTable(table20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
    }

    @Test
    public void test06593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06593");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory0.getTableType("hi!");
        java.lang.String str9 = slimTableFactory0.getFullTableName("");
        java.lang.String str11 = slimTableFactory0.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap12 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap13 = slimTableFactory0.tableTypes;
        java.lang.String str15 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.Table table16 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext18 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable19 = slimTableFactory0.makeSlimTable(table16, "hi!", slimTestContext18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test06594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06594");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory5.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass9 = slimTableFactory7.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory7.copy();
        boolean boolean12 = slimTableFactory7.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap13 = slimTableFactory7.tableTypeArrays;
        slimTableFactory5.tableTypeArrays = strMap13;
        java.util.Map<java.lang.String, java.lang.String> strMap15 = slimTableFactory5.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass18 = slimTableFactory16.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory16.copy();
        boolean boolean21 = slimTableFactory16.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = slimTableFactory22.copy();
        boolean boolean25 = slimTableFactory23.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = slimTableFactory23.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = slimTableFactory23.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = slimTableFactory27.copy();
        boolean boolean30 = slimTableFactory27.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap31 = slimTableFactory27.tableTypeArrays;
        slimTableFactory16.tableTypeArrays = strMap31;
        slimTableFactory5.tableTypeArrays = strMap31;
        java.lang.String str35 = slimTableFactory5.makeTableType("hi!");
        java.lang.String str37 = slimTableFactory5.getFullTableName("hi!");
        java.lang.Class<?> wildcardClass38 = slimTableFactory5.getClass();
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertNotNull(slimTableFactory19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(slimTableFactory23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(slimTableFactory26);
        org.junit.Assert.assertNotNull(slimTableFactory27);
        org.junit.Assert.assertNotNull(slimTableFactory28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test06595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06595");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass4 = slimTableFactory1.getTableType("hi!");
        boolean boolean6 = slimTableFactory1.hasColon("");
        java.lang.String str8 = slimTableFactory1.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap9 = slimTableFactory1.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap10 = slimTableFactory1.tableTypes;
        boolean boolean12 = slimTableFactory1.hasColon("");
        java.lang.String str14 = slimTableFactory1.getFullTableName("hi!");
        fitnesse.testsystems.slim.Table table15 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable16 = slimTableFactory1.parseDefineTableTypeTable(table15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
    }

    @Test
    public void test06596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06596");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap5 = slimTableFactory1.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory7.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap9 = slimTableFactory8.tableTypes;
        boolean boolean11 = slimTableFactory8.hasColon("");
        boolean boolean13 = slimTableFactory8.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap14 = slimTableFactory8.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass17 = slimTableFactory15.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory15.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap19 = slimTableFactory18.tableTypeArrays;
        slimTableFactory8.tableTypeArrays = strMap19;
        slimTableFactory1.tableTypeArrays = strMap19;
        java.util.Map<java.lang.String, java.lang.String> strMap22 = slimTableFactory1.tableTypeArrays;
        java.lang.String str24 = slimTableFactory1.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap25 = slimTableFactory1.tableTypes;
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNull(wildcardClass17);
        org.junit.Assert.assertNotNull(slimTableFactory18);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(strMap25);
    }

    @Test
    public void test06597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06597");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory0.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap9 = slimTableFactory0.tableTypes;
        java.lang.String str11 = slimTableFactory0.makeTableType("hi!");
        java.lang.String str13 = slimTableFactory0.getFullTableName("hi!");
        fitnesse.testsystems.slim.Table table14 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory0.parseDefineTableTypeRow(table14, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
    }

    @Test
    public void test06598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06598");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory5.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass9 = slimTableFactory7.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory7.copy();
        boolean boolean12 = slimTableFactory7.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap13 = slimTableFactory7.tableTypeArrays;
        slimTableFactory5.tableTypeArrays = strMap13;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory5.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap16 = slimTableFactory5.tableTypes;
        java.lang.String str18 = slimTableFactory5.makeTableType("");
        java.lang.String str20 = slimTableFactory5.getFullTableName("");
        fitnesse.testsystems.slim.Table table21 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory5.parseDefineTableTypeRow(table21, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
    }

    @Test
    public void test06599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06599");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        boolean boolean5 = slimTableFactory0.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory0.copy();
        java.lang.String str10 = slimTableFactory8.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory8.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap12 = slimTableFactory11.tableTypes;
        fitnesse.testsystems.slim.Table table13 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable14 = slimTableFactory11.parseDefineTableTypeTable(table13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNotNull(strMap12);
    }

    @Test
    public void test06600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06600");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory5.copy();
        boolean boolean8 = slimTableFactory5.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass10 = slimTableFactory5.getTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass12 = slimTableFactory5.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap13 = slimTableFactory5.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass16 = slimTableFactory14.getTableType("");
        boolean boolean18 = slimTableFactory14.hasColon("hi!");
        java.lang.String str20 = slimTableFactory14.getFullTableName("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass22 = slimTableFactory14.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass25 = slimTableFactory23.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap26 = slimTableFactory23.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = slimTableFactory23.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap28 = slimTableFactory23.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory29 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory30 = slimTableFactory29.copy();
        boolean boolean32 = slimTableFactory30.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory33 = slimTableFactory30.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory34 = slimTableFactory30.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory35 = slimTableFactory34.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory36 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass38 = slimTableFactory36.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory39 = slimTableFactory36.copy();
        boolean boolean41 = slimTableFactory36.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap42 = slimTableFactory36.tableTypeArrays;
        slimTableFactory34.tableTypeArrays = strMap42;
        slimTableFactory23.tableTypeArrays = strMap42;
        slimTableFactory14.tableTypeArrays = strMap42;
        slimTableFactory5.tableTypeArrays = strMap42;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap47 = slimTableFactory5.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory48 = slimTableFactory5.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory49 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory50 = slimTableFactory49.copy();
        boolean boolean52 = slimTableFactory50.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory53 = slimTableFactory50.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = slimTableFactory50.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory55 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass57 = slimTableFactory55.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap58 = slimTableFactory55.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass60 = slimTableFactory55.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory61 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass63 = slimTableFactory61.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory64 = slimTableFactory61.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory65 = slimTableFactory64.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory66 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory67 = slimTableFactory66.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap68 = slimTableFactory66.tableTypeArrays;
        slimTableFactory64.tableTypeArrays = strMap68;
        slimTableFactory55.tableTypeArrays = strMap68;
        slimTableFactory50.tableTypeArrays = strMap68;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory72 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass74 = slimTableFactory72.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory75 = slimTableFactory72.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap76 = slimTableFactory75.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap77 = slimTableFactory75.tableTypeArrays;
        slimTableFactory50.tableTypeArrays = strMap77;
        slimTableFactory5.tableTypeArrays = strMap77;
        fitnesse.testsystems.slim.Table table80 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable81 = slimTableFactory5.parseDefineTableTypeTable(table80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNull(wildcardClass16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNull(wildcardClass22);
        org.junit.Assert.assertNull(wildcardClass25);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(slimTableFactory27);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNotNull(slimTableFactory30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(slimTableFactory33);
        org.junit.Assert.assertNotNull(slimTableFactory34);
        org.junit.Assert.assertNotNull(slimTableFactory35);
        org.junit.Assert.assertNull(wildcardClass38);
        org.junit.Assert.assertNotNull(slimTableFactory39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(strMap42);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNotNull(slimTableFactory48);
        org.junit.Assert.assertNotNull(slimTableFactory50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(slimTableFactory53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNull(wildcardClass57);
        org.junit.Assert.assertNotNull(strMap58);
        org.junit.Assert.assertNull(wildcardClass60);
        org.junit.Assert.assertNull(wildcardClass63);
        org.junit.Assert.assertNotNull(slimTableFactory64);
        org.junit.Assert.assertNotNull(slimTableFactory65);
        org.junit.Assert.assertNotNull(slimTableFactory67);
        org.junit.Assert.assertNotNull(strMap68);
        org.junit.Assert.assertNull(wildcardClass74);
        org.junit.Assert.assertNotNull(slimTableFactory75);
        org.junit.Assert.assertNotNull(strMap76);
        org.junit.Assert.assertNotNull(strMap77);
    }

    @Test
    public void test06601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06601");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("hi!");
        java.lang.String str7 = slimTableFactory0.getFullTableName("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass9 = slimTableFactory0.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap11 = slimTableFactory0.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass13 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory0.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass17 = slimTableFactory15.getTableType("hi!");
        fitnesse.testsystems.slim.Table table18 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory15.parseDefineTableTypeRow(table18, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertNull(wildcardClass17);
    }

    @Test
    public void test06602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06602");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory8.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap10;
        java.util.Map<java.lang.String, java.lang.String> strMap12 = slimTableFactory1.tableTypeArrays;
        java.lang.String str14 = slimTableFactory1.makeTableType("");
        boolean boolean16 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap18 = slimTableFactory1.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass20 = slimTableFactory1.getTableType("");
        fitnesse.testsystems.slim.Table table21 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable22 = slimTableFactory1.parseDefineTableTypeTable(table21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(slimTableFactory17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNull(wildcardClass20);
    }

    @Test
    public void test06603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06603");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory0.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory9.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap11 = slimTableFactory10.tableTypes;
        boolean boolean13 = slimTableFactory10.hasColon("");
        boolean boolean15 = slimTableFactory10.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap16 = slimTableFactory10.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass19 = slimTableFactory17.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory17.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap21 = slimTableFactory20.tableTypeArrays;
        slimTableFactory10.tableTypeArrays = strMap21;
        java.util.Map<java.lang.String, java.lang.String> strMap23 = slimTableFactory10.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap24 = slimTableFactory10.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap24;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass27 = slimTableFactory0.getTableType("hi!");
        java.lang.String str29 = slimTableFactory0.makeTableType("hi!");
        boolean boolean31 = slimTableFactory0.hasColon("");
        fitnesse.testsystems.slim.Table table32 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable33 = slimTableFactory0.parseDefineTableTypeTable(table32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(slimTableFactory20);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNull(wildcardClass27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test06604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06604");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory1.tableTypeArrays;
        java.lang.String str6 = slimTableFactory1.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory7.copy();
        boolean boolean10 = slimTableFactory8.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory8.tableTypeArrays;
        java.lang.String str13 = slimTableFactory8.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory8.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap14;
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory1.tableTypeArrays;
        java.lang.String str18 = slimTableFactory1.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap19 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.Table table21 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext23 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable24 = slimTableFactory1.makeSlimTable(table21, "", slimTestContext23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(slimTableFactory20);
    }

    @Test
    public void test06605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06605");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        boolean boolean5 = slimTableFactory0.hasColon("");
        java.lang.String str7 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap10 = slimTableFactory0.tableTypes;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap11 = slimTableFactory0.tableTypes;
        java.lang.String str13 = slimTableFactory0.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory0.tableTypeArrays;
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(strMap14);
    }

    @Test
    public void test06606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06606");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory0.getTableType("hi!");
        java.lang.String str9 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory0.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass12 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory13.copy();
        boolean boolean16 = slimTableFactory14.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = slimTableFactory14.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory14.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory14.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap20 = slimTableFactory19.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap20;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass23 = slimTableFactory0.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap24 = slimTableFactory0.tableTypes;
        java.lang.String str26 = slimTableFactory0.makeTableType("");
        java.lang.Class<?> wildcardClass27 = slimTableFactory0.getClass();
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(slimTableFactory17);
        org.junit.Assert.assertNotNull(slimTableFactory18);
        org.junit.Assert.assertNotNull(slimTableFactory19);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNull(wildcardClass23);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test06607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06607");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap6 = slimTableFactory0.tableTypes;
        java.lang.String str8 = slimTableFactory0.getFullTableName("hi!");
        java.lang.String str10 = slimTableFactory0.getFullTableName("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass12 = slimTableFactory0.getTableType("hi!");
        java.lang.String str14 = slimTableFactory0.getFullTableName("");
        java.lang.String str16 = slimTableFactory0.makeTableType("");
        java.lang.String str18 = slimTableFactory0.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap19 = slimTableFactory0.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap20 = slimTableFactory0.tableTypeArrays;
        java.lang.String str22 = slimTableFactory0.getFullTableName("hi!");
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
    }

    @Test
    public void test06608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06608");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        boolean boolean5 = slimTableFactory0.hasColon("");
        java.lang.String str7 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory0.copy();
        java.lang.String str11 = slimTableFactory9.makeTableType("");
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test06609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06609");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap5 = slimTableFactory1.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap11 = slimTableFactory1.tableTypes;
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNotNull(strMap11);
    }

    @Test
    public void test06610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06610");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory3.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap5 = slimTableFactory3.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap6 = slimTableFactory3.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory3.copy();
        boolean boolean9 = slimTableFactory7.hasColon("");
        boolean boolean11 = slimTableFactory7.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap12 = slimTableFactory7.tableTypeArrays;
        boolean boolean14 = slimTableFactory7.hasColon("hi!");
        java.lang.String str16 = slimTableFactory7.makeTableType("");
        fitnesse.testsystems.slim.Table table17 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory7.parseDefineTableTypeRow(table17, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test06611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06611");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap5 = slimTableFactory1.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory10.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap12 = slimTableFactory10.tableTypeArrays;
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(strMap12);
    }

    @Test
    public void test06612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06612");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory0.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap9 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory0.tableTypeArrays;
        boolean boolean12 = slimTableFactory0.hasColon("hi!");
        java.lang.String str14 = slimTableFactory0.makeTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass16 = slimTableFactory0.getTableType("hi!");
        java.lang.String str18 = slimTableFactory0.getFullTableName("");
        java.lang.Class<?> wildcardClass19 = slimTableFactory0.getClass();
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNull(wildcardClass16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test06613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06613");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory7.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap9 = slimTableFactory8.tableTypeArrays;
        fitnesse.testsystems.slim.Table table10 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext12 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable13 = slimTableFactory8.makeSlimTable(table10, "", slimTestContext12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(strMap9);
    }

    @Test
    public void test06614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06614");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory5.getTableType("hi!");
        boolean boolean9 = slimTableFactory5.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory5.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory11.copy();
        boolean boolean14 = slimTableFactory12.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap15 = slimTableFactory12.tableTypeArrays;
        java.lang.String str17 = slimTableFactory12.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap18 = slimTableFactory12.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory12.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass21 = slimTableFactory12.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap22 = slimTableFactory12.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap23 = slimTableFactory12.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap24 = slimTableFactory12.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass27 = slimTableFactory25.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = slimTableFactory25.copy();
        boolean boolean30 = slimTableFactory25.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass32 = slimTableFactory25.getTableType("hi!");
        java.lang.String str34 = slimTableFactory25.getFullTableName("");
        java.lang.String str36 = slimTableFactory25.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap37 = slimTableFactory25.tableTypeArrays;
        slimTableFactory12.tableTypeArrays = strMap37;
        slimTableFactory5.tableTypeArrays = strMap37;
        java.lang.String str41 = slimTableFactory5.makeTableType("");
        java.lang.String str43 = slimTableFactory5.getFullTableName("");
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(slimTableFactory19);
        org.junit.Assert.assertNull(wildcardClass21);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNull(wildcardClass27);
        org.junit.Assert.assertNotNull(slimTableFactory28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(wildcardClass32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
    }

    @Test
    public void test06615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06615");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = slimTableFactory0.tableTypeArrays;
        boolean boolean4 = slimTableFactory0.hasColon("");
        boolean boolean6 = slimTableFactory0.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory0.copy();
        boolean boolean9 = slimTableFactory0.hasColon("hi!");
        boolean boolean11 = slimTableFactory0.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap12 = slimTableFactory0.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap13 = slimTableFactory0.tableTypeArrays;
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(strMap13);
    }

    @Test
    public void test06616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06616");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.lang.String str3 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass6 = slimTableFactory4.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory4.copy();
        boolean boolean9 = slimTableFactory4.hasColon("hi!");
        java.lang.String str11 = slimTableFactory4.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap12 = slimTableFactory4.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap12;
        fitnesse.testsystems.slim.Table table14 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable15 = slimTableFactory0.parseDefineTableTypeTable(table14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(strMap12);
    }

    @Test
    public void test06617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06617");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap5 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass8 = slimTableFactory6.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap9 = slimTableFactory6.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass11 = slimTableFactory6.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory12.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory12.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory15.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory17.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap19 = slimTableFactory17.tableTypeArrays;
        slimTableFactory15.tableTypeArrays = strMap19;
        slimTableFactory6.tableTypeArrays = strMap19;
        slimTableFactory1.tableTypeArrays = strMap19;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass25 = slimTableFactory23.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = slimTableFactory23.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap27 = slimTableFactory26.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap28 = slimTableFactory26.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap28;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory30 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap31 = slimTableFactory30.tableTypes;
        fitnesse.testsystems.slim.Table table32 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext34 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable35 = slimTableFactory30.makeSlimTable(table32, "", slimTestContext34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertNotNull(slimTableFactory18);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNull(wildcardClass25);
        org.junit.Assert.assertNotNull(slimTableFactory26);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNotNull(slimTableFactory30);
        org.junit.Assert.assertNotNull(strMap31);
    }

    @Test
    public void test06618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06618");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory5.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass9 = slimTableFactory7.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory7.copy();
        boolean boolean12 = slimTableFactory7.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap13 = slimTableFactory7.tableTypeArrays;
        slimTableFactory5.tableTypeArrays = strMap13;
        java.util.Map<java.lang.String, java.lang.String> strMap15 = slimTableFactory5.tableTypeArrays;
        boolean boolean17 = slimTableFactory5.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass19 = slimTableFactory5.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap20 = slimTableFactory5.tableTypeArrays;
        fitnesse.testsystems.slim.Table table21 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable22 = slimTableFactory5.parseDefineTableTypeTable(table21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(strMap20);
    }

    @Test
    public void test06619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06619");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory8.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap10;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory12.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory12.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory15.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap17 = slimTableFactory15.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap17;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap19 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass22 = slimTableFactory20.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap23 = slimTableFactory20.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = slimTableFactory20.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap25 = slimTableFactory20.tableTypeArrays;
        boolean boolean27 = slimTableFactory20.hasColon("");
        java.lang.String str29 = slimTableFactory20.makeTableType("");
        java.lang.String str31 = slimTableFactory20.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory32 = slimTableFactory20.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory33 = slimTableFactory20.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap34 = slimTableFactory20.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory35 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass37 = slimTableFactory35.getTableType("");
        boolean boolean39 = slimTableFactory35.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap40 = slimTableFactory35.tableTypeArrays;
        slimTableFactory20.tableTypeArrays = strMap40;
        slimTableFactory1.tableTypeArrays = strMap40;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass44 = slimTableFactory1.getTableType("hi!");
        java.lang.String str46 = slimTableFactory1.getFullTableName("");
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNull(wildcardClass22);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(slimTableFactory24);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(slimTableFactory32);
        org.junit.Assert.assertNotNull(slimTableFactory33);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNull(wildcardClass37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertNull(wildcardClass44);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
    }

    @Test
    public void test06620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06620");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.lang.String str3 = slimTableFactory0.getFullTableName("hi!");
        java.lang.String str5 = slimTableFactory0.makeTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory0.getTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass9 = slimTableFactory0.getTableType("hi!");
        java.lang.String str11 = slimTableFactory0.getFullTableName("");
        java.lang.String str13 = slimTableFactory0.getFullTableName("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass15 = slimTableFactory0.getTableType("");
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!" + "'", str3, "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNull(wildcardClass15);
    }

    @Test
    public void test06621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06621");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        boolean boolean6 = slimTableFactory1.hasColon("hi!");
        boolean boolean8 = slimTableFactory1.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap10 = slimTableFactory9.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory9.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap12 = slimTableFactory9.tableTypes;
        fitnesse.testsystems.slim.Table table13 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory9.parseDefineTableTypeRow(table13, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNotNull(strMap12);
    }

    @Test
    public void test06622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06622");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass4 = slimTableFactory1.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap5 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory6.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap8 = slimTableFactory7.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory7.copy();
        java.lang.String str11 = slimTableFactory7.makeTableType("hi!");
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
    }

    @Test
    public void test06623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06623");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("hi!");
        java.lang.String str7 = slimTableFactory0.getFullTableName("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass9 = slimTableFactory0.getTableType("hi!");
        java.lang.String str11 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory13.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap15 = slimTableFactory14.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass18 = slimTableFactory16.getTableType("");
        boolean boolean20 = slimTableFactory16.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap21 = slimTableFactory16.tableTypeArrays;
        slimTableFactory14.tableTypeArrays = strMap21;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = slimTableFactory23.copy();
        boolean boolean26 = slimTableFactory24.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = slimTableFactory24.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = slimTableFactory24.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory29 = slimTableFactory28.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory30 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass32 = slimTableFactory30.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory33 = slimTableFactory30.copy();
        boolean boolean35 = slimTableFactory30.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap36 = slimTableFactory30.tableTypeArrays;
        slimTableFactory28.tableTypeArrays = strMap36;
        java.util.Map<java.lang.String, java.lang.String> strMap38 = slimTableFactory28.tableTypeArrays;
        slimTableFactory14.tableTypeArrays = strMap38;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory40 = slimTableFactory14.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap41 = slimTableFactory40.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap42 = slimTableFactory40.tableTypeArrays;
        boolean boolean44 = slimTableFactory40.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap45 = slimTableFactory40.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap46 = slimTableFactory40.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap47 = slimTableFactory40.tableTypeArrays;
        slimTableFactory12.tableTypeArrays = strMap47;
        fitnesse.testsystems.slim.Table table49 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory12.parseDefineTableTypeRow(table49, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(slimTableFactory24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(slimTableFactory27);
        org.junit.Assert.assertNotNull(slimTableFactory28);
        org.junit.Assert.assertNotNull(slimTableFactory29);
        org.junit.Assert.assertNull(wildcardClass32);
        org.junit.Assert.assertNotNull(slimTableFactory33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertNotNull(slimTableFactory40);
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertNotNull(strMap42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNotNull(strMap46);
        org.junit.Assert.assertNotNull(strMap47);
    }

    @Test
    public void test06624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06624");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory0.tableTypes;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap8 = slimTableFactory0.tableTypes;
        boolean boolean10 = slimTableFactory0.hasColon("");
        boolean boolean12 = slimTableFactory0.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory13.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap15 = null;
        slimTableFactory13.tableTypeArrays = strMap15;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass18 = slimTableFactory13.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory19.copy();
        boolean boolean22 = slimTableFactory20.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = slimTableFactory20.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = slimTableFactory20.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass27 = slimTableFactory25.getTableType("");
        boolean boolean29 = slimTableFactory25.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap30 = slimTableFactory25.tableTypeArrays;
        slimTableFactory24.tableTypeArrays = strMap30;
        slimTableFactory13.tableTypeArrays = strMap30;
        boolean boolean34 = slimTableFactory13.hasColon("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass36 = slimTableFactory13.getTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap37 = slimTableFactory13.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass39 = slimTableFactory13.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap40 = slimTableFactory13.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap40;
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertNotNull(slimTableFactory20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(slimTableFactory23);
        org.junit.Assert.assertNotNull(slimTableFactory24);
        org.junit.Assert.assertNull(wildcardClass27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(wildcardClass36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNull(wildcardClass39);
        org.junit.Assert.assertNotNull(strMap40);
    }

    @Test
    public void test06625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06625");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory5.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass9 = slimTableFactory7.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory7.copy();
        boolean boolean12 = slimTableFactory7.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap13 = slimTableFactory7.tableTypeArrays;
        slimTableFactory5.tableTypeArrays = strMap13;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory5.copy();
        java.lang.String str17 = slimTableFactory5.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory5.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory19.copy();
        boolean boolean22 = slimTableFactory20.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = slimTableFactory20.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = slimTableFactory20.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = slimTableFactory20.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap26 = slimTableFactory25.tableTypeArrays;
        slimTableFactory18.tableTypeArrays = strMap26;
        boolean boolean29 = slimTableFactory18.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory30 = slimTableFactory18.copy();
        boolean boolean32 = slimTableFactory30.hasColon("hi!");
        boolean boolean34 = slimTableFactory30.hasColon("");
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(slimTableFactory18);
        org.junit.Assert.assertNotNull(slimTableFactory20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(slimTableFactory23);
        org.junit.Assert.assertNotNull(slimTableFactory24);
        org.junit.Assert.assertNotNull(slimTableFactory25);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(slimTableFactory30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test06626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06626");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        slimTableFactory0.tableTypeArrays = strMap2;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass5 = slimTableFactory0.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory6.copy();
        boolean boolean9 = slimTableFactory7.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory7.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory7.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory12.getTableType("");
        boolean boolean16 = slimTableFactory12.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap17 = slimTableFactory12.tableTypeArrays;
        slimTableFactory11.tableTypeArrays = strMap17;
        slimTableFactory0.tableTypeArrays = strMap17;
        boolean boolean21 = slimTableFactory0.hasColon("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass23 = slimTableFactory0.getTableType("");
        java.lang.String str25 = slimTableFactory0.getFullTableName("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass27 = slimTableFactory0.getTableType("");
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(wildcardClass23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNull(wildcardClass27);
    }

    @Test
    public void test06627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06627");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        slimTableFactory0.tableTypeArrays = strMap2;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass5 = slimTableFactory0.getTableType("hi!");
        java.lang.String str7 = slimTableFactory0.makeTableType("");
        java.lang.String str9 = slimTableFactory0.makeTableType("");
        java.lang.String str11 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.Table table12 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable13 = slimTableFactory0.parseDefineTableTypeTable(table12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test06628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06628");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory4.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap6 = slimTableFactory5.tableTypes;
        boolean boolean8 = slimTableFactory5.hasColon("");
        boolean boolean10 = slimTableFactory5.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap11 = slimTableFactory5.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory12.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory12.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory15.tableTypeArrays;
        slimTableFactory5.tableTypeArrays = strMap16;
        slimTableFactory0.tableTypeArrays = strMap16;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap19 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory0.copy();
        java.lang.String str22 = slimTableFactory20.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = slimTableFactory20.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = slimTableFactory20.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = slimTableFactory25.copy();
        boolean boolean28 = slimTableFactory26.hasColon("hi!");
        java.lang.String str30 = slimTableFactory26.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap31 = null;
        slimTableFactory26.tableTypeArrays = strMap31;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory33 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory34 = slimTableFactory33.copy();
        boolean boolean36 = slimTableFactory34.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory37 = slimTableFactory34.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory38 = slimTableFactory34.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory39 = slimTableFactory38.copy();
        boolean boolean41 = slimTableFactory38.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap42 = slimTableFactory38.tableTypeArrays;
        slimTableFactory26.tableTypeArrays = strMap42;
        slimTableFactory20.tableTypeArrays = strMap42;
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(slimTableFactory20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(slimTableFactory23);
        org.junit.Assert.assertNotNull(slimTableFactory24);
        org.junit.Assert.assertNotNull(slimTableFactory26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(slimTableFactory34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(slimTableFactory37);
        org.junit.Assert.assertNotNull(slimTableFactory38);
        org.junit.Assert.assertNotNull(slimTableFactory39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(strMap42);
    }

    @Test
    public void test06629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06629");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap5 = slimTableFactory1.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory1.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = null;
        slimTableFactory8.tableTypeArrays = strMap10;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass13 = slimTableFactory8.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory14.copy();
        boolean boolean17 = slimTableFactory15.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory15.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory15.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass22 = slimTableFactory20.getTableType("");
        boolean boolean24 = slimTableFactory20.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap25 = slimTableFactory20.tableTypeArrays;
        slimTableFactory19.tableTypeArrays = strMap25;
        slimTableFactory8.tableTypeArrays = strMap25;
        boolean boolean29 = slimTableFactory8.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory30 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass32 = slimTableFactory30.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap33 = slimTableFactory30.tableTypeArrays;
        slimTableFactory8.tableTypeArrays = strMap33;
        slimTableFactory1.tableTypeArrays = strMap33;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory36 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory37 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory38 = slimTableFactory37.copy();
        boolean boolean40 = slimTableFactory38.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory41 = slimTableFactory38.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory42 = slimTableFactory38.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory43 = slimTableFactory42.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory44 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory45 = slimTableFactory44.copy();
        boolean boolean47 = slimTableFactory45.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap48 = slimTableFactory45.tableTypeArrays;
        slimTableFactory43.tableTypeArrays = strMap48;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory50 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory51 = slimTableFactory50.copy();
        boolean boolean53 = slimTableFactory51.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap54 = slimTableFactory51.tableTypeArrays;
        java.lang.String str56 = slimTableFactory51.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory57 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory58 = slimTableFactory57.copy();
        boolean boolean60 = slimTableFactory58.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap61 = slimTableFactory58.tableTypeArrays;
        java.lang.String str63 = slimTableFactory58.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap64 = slimTableFactory58.tableTypeArrays;
        slimTableFactory51.tableTypeArrays = strMap64;
        java.util.Map<java.lang.String, java.lang.String> strMap66 = slimTableFactory51.tableTypeArrays;
        slimTableFactory43.tableTypeArrays = strMap66;
        slimTableFactory36.tableTypeArrays = strMap66;
        boolean boolean70 = slimTableFactory36.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass72 = slimTableFactory36.getTableType("");
        boolean boolean74 = slimTableFactory36.hasColon("hi!");
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(slimTableFactory18);
        org.junit.Assert.assertNotNull(slimTableFactory19);
        org.junit.Assert.assertNull(wildcardClass22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(wildcardClass32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(slimTableFactory36);
        org.junit.Assert.assertNotNull(slimTableFactory38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(slimTableFactory41);
        org.junit.Assert.assertNotNull(slimTableFactory42);
        org.junit.Assert.assertNotNull(slimTableFactory43);
        org.junit.Assert.assertNotNull(slimTableFactory45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strMap48);
        org.junit.Assert.assertNotNull(slimTableFactory51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(slimTableFactory58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(strMap61);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(strMap64);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(wildcardClass72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test06630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06630");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        boolean boolean6 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass10 = slimTableFactory8.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory8.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap12 = slimTableFactory11.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap12;
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory1.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap15 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = slimTableFactory16.copy();
        boolean boolean19 = slimTableFactory17.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory17.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = slimTableFactory17.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = slimTableFactory21.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap23 = slimTableFactory21.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap24 = slimTableFactory21.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass27 = slimTableFactory25.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = slimTableFactory25.copy();
        java.lang.String str30 = slimTableFactory28.getFullTableName("hi!");
        java.lang.String str32 = slimTableFactory28.makeTableType("hi!");
        java.lang.String str34 = slimTableFactory28.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap35 = slimTableFactory28.tableTypeArrays;
        slimTableFactory21.tableTypeArrays = strMap35;
        boolean boolean38 = slimTableFactory21.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory39 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass41 = slimTableFactory39.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory42 = slimTableFactory39.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory43 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory44 = slimTableFactory43.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap45 = slimTableFactory44.tableTypes;
        boolean boolean47 = slimTableFactory44.hasColon("");
        boolean boolean49 = slimTableFactory44.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap50 = slimTableFactory44.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory51 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass53 = slimTableFactory51.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory54 = slimTableFactory51.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap55 = slimTableFactory54.tableTypeArrays;
        slimTableFactory44.tableTypeArrays = strMap55;
        slimTableFactory39.tableTypeArrays = strMap55;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory58 = slimTableFactory39.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory59 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory60 = slimTableFactory59.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap61 = null;
        slimTableFactory59.tableTypeArrays = strMap61;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass64 = slimTableFactory59.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory65 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory66 = slimTableFactory65.copy();
        boolean boolean68 = slimTableFactory66.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory69 = slimTableFactory66.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory70 = slimTableFactory66.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory71 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass73 = slimTableFactory71.getTableType("");
        boolean boolean75 = slimTableFactory71.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap76 = slimTableFactory71.tableTypeArrays;
        slimTableFactory70.tableTypeArrays = strMap76;
        slimTableFactory59.tableTypeArrays = strMap76;
        boolean boolean80 = slimTableFactory59.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory81 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass83 = slimTableFactory81.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap84 = slimTableFactory81.tableTypeArrays;
        slimTableFactory59.tableTypeArrays = strMap84;
        slimTableFactory58.tableTypeArrays = strMap84;
        slimTableFactory21.tableTypeArrays = strMap84;
        slimTableFactory1.tableTypeArrays = strMap84;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap89 = slimTableFactory1.tableTypes;
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(slimTableFactory17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(slimTableFactory20);
        org.junit.Assert.assertNotNull(slimTableFactory21);
        org.junit.Assert.assertNotNull(slimTableFactory22);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNull(wildcardClass27);
        org.junit.Assert.assertNotNull(slimTableFactory28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(wildcardClass41);
        org.junit.Assert.assertNotNull(slimTableFactory42);
        org.junit.Assert.assertNotNull(slimTableFactory44);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(wildcardClass53);
        org.junit.Assert.assertNotNull(slimTableFactory54);
        org.junit.Assert.assertNotNull(strMap55);
        org.junit.Assert.assertNotNull(slimTableFactory58);
        org.junit.Assert.assertNotNull(slimTableFactory60);
        org.junit.Assert.assertNull(wildcardClass64);
        org.junit.Assert.assertNotNull(slimTableFactory66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(slimTableFactory69);
        org.junit.Assert.assertNotNull(slimTableFactory70);
        org.junit.Assert.assertNull(wildcardClass73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(strMap76);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNull(wildcardClass83);
        org.junit.Assert.assertNotNull(strMap84);
        org.junit.Assert.assertNotNull(strMap89);
    }

    @Test
    public void test06631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06631");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap5 = slimTableFactory1.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory1.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory1.copy();
        boolean boolean11 = slimTableFactory1.hasColon("");
        boolean boolean13 = slimTableFactory1.hasColon("");
        fitnesse.testsystems.slim.Table table14 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory1.parseDefineTableTypeRow(table14, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test06632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06632");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        java.lang.String str5 = slimTableFactory3.getFullTableName("hi!");
        java.lang.String str7 = slimTableFactory3.getFullTableName("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass9 = slimTableFactory3.getTableType("hi!");
        boolean boolean11 = slimTableFactory3.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap12 = slimTableFactory3.tableTypeArrays;
        fitnesse.testsystems.slim.Table table13 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable14 = slimTableFactory3.parseDefineTableTypeTable(table13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strMap12);
    }

    @Test
    public void test06633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06633");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory0.getTableType("hi!");
        java.lang.String str9 = slimTableFactory0.getFullTableName("");
        java.lang.String str11 = slimTableFactory0.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory0.copy();
        java.lang.String str14 = slimTableFactory0.getFullTableName("hi!");
        boolean boolean16 = slimTableFactory0.hasColon("");
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test06634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06634");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory1.tableTypeArrays;
        java.lang.String str6 = slimTableFactory1.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory7.copy();
        boolean boolean10 = slimTableFactory8.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory8.tableTypeArrays;
        java.lang.String str13 = slimTableFactory8.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory8.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap14;
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory1.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap17 = slimTableFactory1.tableTypes;
        java.lang.String str19 = slimTableFactory1.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = slimTableFactory21.copy();
        boolean boolean24 = slimTableFactory22.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = slimTableFactory22.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap26 = slimTableFactory22.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = slimTableFactory22.copy();
        boolean boolean29 = slimTableFactory27.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap30 = slimTableFactory27.tableTypeArrays;
        slimTableFactory20.tableTypeArrays = strMap30;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory32 = slimTableFactory20.copy();
        java.lang.String str34 = slimTableFactory32.makeTableType("");
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory20);
        org.junit.Assert.assertNotNull(slimTableFactory22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(slimTableFactory25);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(slimTableFactory27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(slimTableFactory32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
    }

    @Test
    public void test06635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06635");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap5 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass8 = slimTableFactory6.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap9 = slimTableFactory6.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass11 = slimTableFactory6.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory12.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory12.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory15.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory17.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap19 = slimTableFactory17.tableTypeArrays;
        slimTableFactory15.tableTypeArrays = strMap19;
        slimTableFactory6.tableTypeArrays = strMap19;
        slimTableFactory1.tableTypeArrays = strMap19;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass25 = slimTableFactory23.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = slimTableFactory23.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap27 = slimTableFactory26.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap28 = slimTableFactory26.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap28;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory30 = slimTableFactory1.copy();
        java.lang.String str32 = slimTableFactory1.getFullTableName("");
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertNotNull(slimTableFactory18);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNull(wildcardClass25);
        org.junit.Assert.assertNotNull(slimTableFactory26);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNotNull(slimTableFactory30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
    }

    @Test
    public void test06636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06636");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap5 = slimTableFactory0.tableTypeArrays;
        boolean boolean7 = slimTableFactory0.hasColon("");
        java.lang.String str9 = slimTableFactory0.makeTableType("");
        java.lang.String str11 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory13.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap15 = null;
        slimTableFactory13.tableTypeArrays = strMap15;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass18 = slimTableFactory13.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory19.copy();
        boolean boolean22 = slimTableFactory20.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = slimTableFactory20.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = slimTableFactory20.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass27 = slimTableFactory25.getTableType("");
        boolean boolean29 = slimTableFactory25.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap30 = slimTableFactory25.tableTypeArrays;
        slimTableFactory24.tableTypeArrays = strMap30;
        slimTableFactory13.tableTypeArrays = strMap30;
        boolean boolean34 = slimTableFactory13.hasColon("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass36 = slimTableFactory13.getTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass38 = slimTableFactory13.getTableType("hi!");
        boolean boolean40 = slimTableFactory13.hasColon("hi!");
        java.lang.String str42 = slimTableFactory13.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap43 = slimTableFactory13.tableTypeArrays;
        slimTableFactory12.tableTypeArrays = strMap43;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory45 = slimTableFactory12.copy();
        fitnesse.testsystems.slim.Table table46 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext48 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable49 = slimTableFactory12.makeSlimTable(table46, "", slimTestContext48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertNotNull(slimTableFactory20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(slimTableFactory23);
        org.junit.Assert.assertNotNull(slimTableFactory24);
        org.junit.Assert.assertNull(wildcardClass27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(wildcardClass36);
        org.junit.Assert.assertNull(wildcardClass38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "hi!" + "'", str42, "hi!");
        org.junit.Assert.assertNotNull(strMap43);
        org.junit.Assert.assertNotNull(slimTableFactory45);
    }

    @Test
    public void test06637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06637");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass5 = slimTableFactory3.getTableType("");
        boolean boolean7 = slimTableFactory3.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory3.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap8;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory10.copy();
        boolean boolean13 = slimTableFactory11.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory11.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory11.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory15.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass19 = slimTableFactory17.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory17.copy();
        boolean boolean22 = slimTableFactory17.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap23 = slimTableFactory17.tableTypeArrays;
        slimTableFactory15.tableTypeArrays = strMap23;
        java.util.Map<java.lang.String, java.lang.String> strMap25 = slimTableFactory15.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap25;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = slimTableFactory1.copy();
        boolean boolean30 = slimTableFactory28.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap31 = slimTableFactory28.tableTypeArrays;
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(slimTableFactory20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(slimTableFactory27);
        org.junit.Assert.assertNotNull(slimTableFactory28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strMap31);
    }

    @Test
    public void test06638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06638");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory4.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap6 = slimTableFactory5.tableTypes;
        boolean boolean8 = slimTableFactory5.hasColon("");
        boolean boolean10 = slimTableFactory5.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap11 = slimTableFactory5.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory12.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory12.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory15.tableTypeArrays;
        slimTableFactory5.tableTypeArrays = strMap16;
        slimTableFactory0.tableTypeArrays = strMap16;
        java.util.Map<java.lang.String, java.lang.String> strMap19 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.Table table20 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable21 = slimTableFactory0.parseDefineTableTypeTable(table20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(strMap19);
    }

    @Test
    public void test06639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06639");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        boolean boolean6 = slimTableFactory1.hasColon("hi!");
        boolean boolean8 = slimTableFactory1.hasColon("");
        java.lang.String str10 = slimTableFactory1.getFullTableName("");
        boolean boolean12 = slimTableFactory1.hasColon("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory1.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass17 = slimTableFactory15.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap18 = slimTableFactory15.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory15.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = slimTableFactory20.copy();
        boolean boolean23 = slimTableFactory21.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = slimTableFactory21.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = slimTableFactory21.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = slimTableFactory25.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass29 = slimTableFactory27.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory30 = slimTableFactory27.copy();
        boolean boolean32 = slimTableFactory27.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap33 = slimTableFactory27.tableTypeArrays;
        slimTableFactory25.tableTypeArrays = strMap33;
        slimTableFactory19.tableTypeArrays = strMap33;
        slimTableFactory1.tableTypeArrays = strMap33;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass38 = slimTableFactory1.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap39 = slimTableFactory1.tableTypeArrays;
        boolean boolean41 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory42 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass44 = slimTableFactory42.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory45 = slimTableFactory42.copy();
        boolean boolean47 = slimTableFactory42.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass49 = slimTableFactory42.getTableType("hi!");
        java.lang.String str51 = slimTableFactory42.getFullTableName("");
        java.lang.String str53 = slimTableFactory42.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap54 = slimTableFactory42.tableTypeArrays;
        java.lang.String str56 = slimTableFactory42.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory57 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass59 = slimTableFactory57.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap60 = slimTableFactory57.tableTypeArrays;
        boolean boolean62 = slimTableFactory57.hasColon("");
        java.lang.String str64 = slimTableFactory57.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory65 = slimTableFactory57.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory66 = slimTableFactory57.copy();
        boolean boolean68 = slimTableFactory57.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap69 = slimTableFactory57.tableTypeArrays;
        slimTableFactory42.tableTypeArrays = strMap69;
        java.util.Map<java.lang.String, java.lang.String> strMap71 = slimTableFactory42.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap71;
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertNull(wildcardClass17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(slimTableFactory19);
        org.junit.Assert.assertNotNull(slimTableFactory21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(slimTableFactory24);
        org.junit.Assert.assertNotNull(slimTableFactory25);
        org.junit.Assert.assertNotNull(slimTableFactory26);
        org.junit.Assert.assertNull(wildcardClass29);
        org.junit.Assert.assertNotNull(slimTableFactory30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(wildcardClass38);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(wildcardClass44);
        org.junit.Assert.assertNotNull(slimTableFactory45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(wildcardClass49);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hi!" + "'", str56, "hi!");
        org.junit.Assert.assertNull(wildcardClass59);
        org.junit.Assert.assertNotNull(strMap60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(slimTableFactory65);
        org.junit.Assert.assertNotNull(slimTableFactory66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(strMap69);
        org.junit.Assert.assertNotNull(strMap71);
    }

    @Test
    public void test06640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06640");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory1.tableTypeArrays;
        java.lang.String str6 = slimTableFactory1.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory7.copy();
        boolean boolean10 = slimTableFactory8.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory8.tableTypeArrays;
        java.lang.String str13 = slimTableFactory8.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory8.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap14;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory1.copy();
        java.lang.String str18 = slimTableFactory16.makeTableType("hi!");
        java.lang.String str20 = slimTableFactory16.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap21 = slimTableFactory16.tableTypeArrays;
        java.lang.String str23 = slimTableFactory16.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap24 = slimTableFactory16.tableTypeArrays;
        fitnesse.testsystems.slim.Table table25 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory16.parseDefineTableTypeRow(table25, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(strMap24);
    }

    @Test
    public void test06641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06641");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        boolean boolean5 = slimTableFactory0.hasColon("");
        java.lang.String str7 = slimTableFactory0.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory9.copy();
        boolean boolean12 = slimTableFactory10.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap13 = slimTableFactory10.tableTypeArrays;
        java.lang.String str15 = slimTableFactory10.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = slimTableFactory16.copy();
        boolean boolean19 = slimTableFactory17.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap20 = slimTableFactory17.tableTypeArrays;
        java.lang.String str22 = slimTableFactory17.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap23 = slimTableFactory17.tableTypeArrays;
        slimTableFactory10.tableTypeArrays = strMap23;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = slimTableFactory10.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = slimTableFactory10.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass29 = slimTableFactory27.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory30 = slimTableFactory27.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap31 = slimTableFactory30.tableTypeArrays;
        slimTableFactory10.tableTypeArrays = strMap31;
        slimTableFactory0.tableTypeArrays = strMap31;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory34 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory35 = slimTableFactory34.copy();
        boolean boolean37 = slimTableFactory34.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap38 = slimTableFactory34.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap38;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory40 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap41 = slimTableFactory40.tableTypeArrays;
        fitnesse.testsystems.slim.Table table42 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable43 = slimTableFactory40.parseDefineTableTypeTable(table42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(slimTableFactory17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(slimTableFactory25);
        org.junit.Assert.assertNotNull(slimTableFactory26);
        org.junit.Assert.assertNull(wildcardClass29);
        org.junit.Assert.assertNotNull(slimTableFactory30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(slimTableFactory35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertNotNull(slimTableFactory40);
        org.junit.Assert.assertNotNull(strMap41);
    }

    @Test
    public void test06642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06642");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass4 = slimTableFactory1.getTableType("hi!");
        boolean boolean6 = slimTableFactory1.hasColon("");
        java.lang.String str8 = slimTableFactory1.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap9 = slimTableFactory1.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap10 = slimTableFactory1.tableTypes;
        boolean boolean12 = slimTableFactory1.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory1.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass15 = slimTableFactory13.getTableType("");
        boolean boolean17 = slimTableFactory13.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory13.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap19 = slimTableFactory13.tableTypes;
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(slimTableFactory13);
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(slimTableFactory18);
        org.junit.Assert.assertNotNull(strMap19);
    }

    @Test
    public void test06643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06643");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("hi!");
        java.lang.String str7 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass10 = slimTableFactory8.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory8.copy();
        boolean boolean13 = slimTableFactory8.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass15 = slimTableFactory8.getTableType("hi!");
        java.lang.String str17 = slimTableFactory8.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory8.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass20 = slimTableFactory8.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = slimTableFactory21.copy();
        boolean boolean24 = slimTableFactory22.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = slimTableFactory22.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = slimTableFactory22.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = slimTableFactory22.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap28 = slimTableFactory27.tableTypeArrays;
        slimTableFactory8.tableTypeArrays = strMap28;
        java.util.Map<java.lang.String, java.lang.String> strMap30 = slimTableFactory8.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap30;
        java.util.Map<java.lang.String, java.lang.String> strMap32 = slimTableFactory0.tableTypeArrays;
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(slimTableFactory18);
        org.junit.Assert.assertNull(wildcardClass20);
        org.junit.Assert.assertNotNull(slimTableFactory22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(slimTableFactory25);
        org.junit.Assert.assertNotNull(slimTableFactory26);
        org.junit.Assert.assertNotNull(slimTableFactory27);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(strMap32);
    }

    @Test
    public void test06644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06644");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory0.getTableType("hi!");
        java.lang.String str9 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass12 = slimTableFactory10.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory10.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory14.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap16 = slimTableFactory15.tableTypes;
        boolean boolean18 = slimTableFactory15.hasColon("");
        boolean boolean20 = slimTableFactory15.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap21 = slimTableFactory15.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass24 = slimTableFactory22.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = slimTableFactory22.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap26 = slimTableFactory25.tableTypeArrays;
        slimTableFactory15.tableTypeArrays = strMap26;
        slimTableFactory10.tableTypeArrays = strMap26;
        slimTableFactory0.tableTypeArrays = strMap26;
        boolean boolean31 = slimTableFactory0.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory32 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory33 = slimTableFactory0.copy();
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNotNull(slimTableFactory13);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNull(wildcardClass24);
        org.junit.Assert.assertNotNull(slimTableFactory25);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(slimTableFactory32);
        org.junit.Assert.assertNotNull(slimTableFactory33);
    }

    @Test
    public void test06645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06645");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        slimTableFactory0.tableTypeArrays = strMap2;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass5 = slimTableFactory0.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory6.copy();
        boolean boolean9 = slimTableFactory7.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory7.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory7.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory12.getTableType("");
        boolean boolean16 = slimTableFactory12.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap17 = slimTableFactory12.tableTypeArrays;
        slimTableFactory11.tableTypeArrays = strMap17;
        slimTableFactory0.tableTypeArrays = strMap17;
        boolean boolean21 = slimTableFactory0.hasColon("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass23 = slimTableFactory0.getTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass25 = slimTableFactory0.getTableType("hi!");
        boolean boolean27 = slimTableFactory0.hasColon("hi!");
        java.lang.String str29 = slimTableFactory0.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory30 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory31 = slimTableFactory30.copy();
        boolean boolean33 = slimTableFactory31.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory34 = slimTableFactory31.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap35 = slimTableFactory31.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass37 = slimTableFactory31.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap38 = slimTableFactory31.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory39 = slimTableFactory31.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass41 = slimTableFactory31.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap42 = slimTableFactory31.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap43 = slimTableFactory31.tableTypeArrays;
        java.lang.String str45 = slimTableFactory31.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap46 = slimTableFactory31.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory47 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory48 = slimTableFactory47.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap49 = slimTableFactory48.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory50 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass52 = slimTableFactory50.getTableType("");
        boolean boolean54 = slimTableFactory50.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap55 = slimTableFactory50.tableTypeArrays;
        slimTableFactory48.tableTypeArrays = strMap55;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory57 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory58 = slimTableFactory57.copy();
        boolean boolean60 = slimTableFactory58.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory61 = slimTableFactory58.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory62 = slimTableFactory58.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory63 = slimTableFactory62.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory64 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass66 = slimTableFactory64.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory67 = slimTableFactory64.copy();
        boolean boolean69 = slimTableFactory64.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap70 = slimTableFactory64.tableTypeArrays;
        slimTableFactory62.tableTypeArrays = strMap70;
        java.util.Map<java.lang.String, java.lang.String> strMap72 = slimTableFactory62.tableTypeArrays;
        slimTableFactory48.tableTypeArrays = strMap72;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory74 = slimTableFactory48.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory75 = slimTableFactory48.copy();
        java.lang.String str77 = slimTableFactory75.getFullTableName("");
        java.lang.String str79 = slimTableFactory75.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory80 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory81 = slimTableFactory80.copy();
        boolean boolean83 = slimTableFactory81.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory84 = slimTableFactory81.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory85 = slimTableFactory81.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory86 = slimTableFactory85.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap87 = slimTableFactory85.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap88 = slimTableFactory85.tableTypeArrays;
        slimTableFactory75.tableTypeArrays = strMap88;
        slimTableFactory31.tableTypeArrays = strMap88;
        slimTableFactory0.tableTypeArrays = strMap88;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap92 = slimTableFactory0.tableTypes;
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(wildcardClass23);
        org.junit.Assert.assertNull(wildcardClass25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(slimTableFactory34);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNull(wildcardClass37);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertNotNull(slimTableFactory39);
        org.junit.Assert.assertNull(wildcardClass41);
        org.junit.Assert.assertNotNull(strMap42);
        org.junit.Assert.assertNotNull(strMap43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
        org.junit.Assert.assertNotNull(strMap46);
        org.junit.Assert.assertNotNull(slimTableFactory48);
        org.junit.Assert.assertNotNull(strMap49);
        org.junit.Assert.assertNull(wildcardClass52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(strMap55);
        org.junit.Assert.assertNotNull(slimTableFactory58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(slimTableFactory61);
        org.junit.Assert.assertNotNull(slimTableFactory62);
        org.junit.Assert.assertNotNull(slimTableFactory63);
        org.junit.Assert.assertNull(wildcardClass66);
        org.junit.Assert.assertNotNull(slimTableFactory67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(strMap70);
        org.junit.Assert.assertNotNull(strMap72);
        org.junit.Assert.assertNotNull(slimTableFactory74);
        org.junit.Assert.assertNotNull(slimTableFactory75);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNotNull(slimTableFactory81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(slimTableFactory84);
        org.junit.Assert.assertNotNull(slimTableFactory85);
        org.junit.Assert.assertNotNull(slimTableFactory86);
        org.junit.Assert.assertNotNull(strMap87);
        org.junit.Assert.assertNotNull(strMap88);
        org.junit.Assert.assertNotNull(strMap92);
    }

    @Test
    public void test06646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06646");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap5 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory1.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass8 = slimTableFactory6.getTableType("hi!");
        boolean boolean10 = slimTableFactory6.hasColon("");
        java.lang.String str12 = slimTableFactory6.makeTableType("hi!");
        fitnesse.testsystems.slim.Table table13 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable14 = slimTableFactory6.parseDefineTableTypeTable(table13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
    }

    @Test
    public void test06647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06647");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        boolean boolean5 = slimTableFactory0.hasColon("");
        java.lang.String str7 = slimTableFactory0.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory9.tableTypeArrays;
        boolean boolean12 = slimTableFactory9.hasColon("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory9.getTableType("");
        fitnesse.testsystems.slim.Table table15 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext17 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable18 = slimTableFactory9.makeSlimTable(table15, "", slimTestContext17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(wildcardClass14);
    }

    @Test
    public void test06648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06648");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("hi!");
        java.lang.String str7 = slimTableFactory0.getFullTableName("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass9 = slimTableFactory0.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap11 = slimTableFactory0.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass13 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory0.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass17 = slimTableFactory0.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap18 = slimTableFactory0.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass20 = slimTableFactory0.getTableType("");
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertNull(wildcardClass17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNull(wildcardClass20);
    }

    @Test
    public void test06649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06649");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap5 = slimTableFactory1.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory1.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = null;
        slimTableFactory8.tableTypeArrays = strMap10;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass13 = slimTableFactory8.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory14.copy();
        boolean boolean17 = slimTableFactory15.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory15.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory15.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass22 = slimTableFactory20.getTableType("");
        boolean boolean24 = slimTableFactory20.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap25 = slimTableFactory20.tableTypeArrays;
        slimTableFactory19.tableTypeArrays = strMap25;
        slimTableFactory8.tableTypeArrays = strMap25;
        boolean boolean29 = slimTableFactory8.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory30 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass32 = slimTableFactory30.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap33 = slimTableFactory30.tableTypeArrays;
        slimTableFactory8.tableTypeArrays = strMap33;
        slimTableFactory1.tableTypeArrays = strMap33;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory36 = slimTableFactory1.copy();
        boolean boolean38 = slimTableFactory1.hasColon("");
        fitnesse.testsystems.slim.Table table39 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable40 = slimTableFactory1.parseDefineTableTypeTable(table39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(slimTableFactory18);
        org.junit.Assert.assertNotNull(slimTableFactory19);
        org.junit.Assert.assertNull(wildcardClass22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(wildcardClass32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(slimTableFactory36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test06650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06650");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory1.tableTypeArrays;
        java.lang.String str6 = slimTableFactory1.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory7.copy();
        boolean boolean10 = slimTableFactory8.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory8.tableTypeArrays;
        java.lang.String str13 = slimTableFactory8.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory8.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap14;
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory1.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap17 = slimTableFactory1.tableTypes;
        java.lang.String str19 = slimTableFactory1.makeTableType("");
        java.lang.String str21 = slimTableFactory1.makeTableType("hi!");
        java.lang.String str23 = slimTableFactory1.getFullTableName("hi!");
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
    }

    @Test
    public void test06651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06651");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory5.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory5.tableTypes;
        java.lang.String str9 = slimTableFactory5.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory5.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory10.copy();
        fitnesse.testsystems.slim.Table table12 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable13 = slimTableFactory10.parseDefineTableTypeTable(table12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNotNull(slimTableFactory11);
    }

    @Test
    public void test06652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06652");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory5.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory5.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory5.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass11 = slimTableFactory9.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory9.copy();
        java.lang.String str14 = slimTableFactory12.getFullTableName("hi!");
        java.lang.String str16 = slimTableFactory12.makeTableType("hi!");
        java.lang.String str18 = slimTableFactory12.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap19 = slimTableFactory12.tableTypeArrays;
        slimTableFactory5.tableTypeArrays = strMap19;
        boolean boolean22 = slimTableFactory5.hasColon("hi!");
        java.lang.Class<?> wildcardClass23 = slimTableFactory5.getClass();
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test06653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06653");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap5 = slimTableFactory0.tableTypeArrays;
        boolean boolean7 = slimTableFactory0.hasColon("");
        java.lang.String str9 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap11 = slimTableFactory0.tableTypes;
        boolean boolean13 = slimTableFactory0.hasColon("");
        fitnesse.testsystems.slim.Table table14 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory0.parseDefineTableTypeRow(table14, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test06654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06654");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        slimTableFactory0.tableTypeArrays = strMap2;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass5 = slimTableFactory0.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory6.copy();
        boolean boolean9 = slimTableFactory7.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory7.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory7.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory12.getTableType("");
        boolean boolean16 = slimTableFactory12.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap17 = slimTableFactory12.tableTypeArrays;
        slimTableFactory11.tableTypeArrays = strMap17;
        slimTableFactory0.tableTypeArrays = strMap17;
        boolean boolean21 = slimTableFactory0.hasColon("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass23 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap24 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap26 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap27 = slimTableFactory0.tableTypes;
        java.lang.Class<?> wildcardClass28 = slimTableFactory0.getClass();
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(wildcardClass23);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNotNull(slimTableFactory25);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test06655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06655");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory0.getTableType("hi!");
        java.lang.String str9 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory0.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass12 = slimTableFactory0.getTableType("");
        boolean boolean14 = slimTableFactory0.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass16 = slimTableFactory0.getTableType("hi!");
        boolean boolean18 = slimTableFactory0.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap19 = slimTableFactory0.tableTypes;
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(wildcardClass16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strMap19);
    }

    @Test
    public void test06656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06656");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap6 = slimTableFactory0.tableTypes;
        java.lang.String str8 = slimTableFactory0.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory9.copy();
        boolean boolean12 = slimTableFactory10.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory10.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory10.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory15.copy();
        boolean boolean18 = slimTableFactory16.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory16.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory16.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = slimTableFactory16.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap22 = slimTableFactory21.tableTypeArrays;
        slimTableFactory10.tableTypeArrays = strMap22;
        slimTableFactory0.tableTypeArrays = strMap22;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap25 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass28 = slimTableFactory26.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory29 = slimTableFactory26.copy();
        boolean boolean31 = slimTableFactory26.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass33 = slimTableFactory26.getTableType("hi!");
        java.lang.String str35 = slimTableFactory26.getFullTableName("");
        java.lang.String str37 = slimTableFactory26.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory38 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory39 = slimTableFactory38.copy();
        boolean boolean41 = slimTableFactory39.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory42 = slimTableFactory39.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap43 = slimTableFactory39.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory44 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory45 = slimTableFactory44.copy();
        boolean boolean47 = slimTableFactory45.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory48 = slimTableFactory45.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory49 = slimTableFactory45.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory50 = slimTableFactory45.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap51 = slimTableFactory50.tableTypeArrays;
        slimTableFactory39.tableTypeArrays = strMap51;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory53 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory54 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass56 = slimTableFactory54.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory57 = slimTableFactory54.copy();
        boolean boolean59 = slimTableFactory54.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap60 = slimTableFactory54.tableTypeArrays;
        slimTableFactory53.tableTypeArrays = strMap60;
        slimTableFactory39.tableTypeArrays = strMap60;
        slimTableFactory26.tableTypeArrays = strMap60;
        slimTableFactory0.tableTypeArrays = strMap60;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass66 = slimTableFactory0.getTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass68 = slimTableFactory0.getTableType("");
        java.lang.String str70 = slimTableFactory0.makeTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass72 = slimTableFactory0.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap73 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.Table table74 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable75 = slimTableFactory0.parseDefineTableTypeTable(table74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(slimTableFactory13);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(slimTableFactory19);
        org.junit.Assert.assertNotNull(slimTableFactory20);
        org.junit.Assert.assertNotNull(slimTableFactory21);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNull(wildcardClass28);
        org.junit.Assert.assertNotNull(slimTableFactory29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(wildcardClass33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(slimTableFactory39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(slimTableFactory42);
        org.junit.Assert.assertNotNull(strMap43);
        org.junit.Assert.assertNotNull(slimTableFactory45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(slimTableFactory48);
        org.junit.Assert.assertNotNull(slimTableFactory49);
        org.junit.Assert.assertNotNull(slimTableFactory50);
        org.junit.Assert.assertNotNull(strMap51);
        org.junit.Assert.assertNull(wildcardClass56);
        org.junit.Assert.assertNotNull(slimTableFactory57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(strMap60);
        org.junit.Assert.assertNull(wildcardClass66);
        org.junit.Assert.assertNull(wildcardClass68);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNull(wildcardClass72);
        org.junit.Assert.assertNotNull(strMap73);
    }

    @Test
    public void test06657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06657");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory3.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap5 = slimTableFactory3.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass8 = slimTableFactory6.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap9 = slimTableFactory6.tableTypeArrays;
        boolean boolean11 = slimTableFactory6.hasColon("");
        java.lang.String str13 = slimTableFactory6.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory6.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory14.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass18 = slimTableFactory16.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory16.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap20 = slimTableFactory19.tableTypeArrays;
        slimTableFactory14.tableTypeArrays = strMap20;
        slimTableFactory3.tableTypeArrays = strMap20;
        java.util.Map<java.lang.String, java.lang.String> strMap23 = slimTableFactory3.tableTypeArrays;
        java.lang.String str25 = slimTableFactory3.makeTableType("hi!");
        java.lang.String str27 = slimTableFactory3.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = slimTableFactory3.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass30 = slimTableFactory28.getTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass32 = slimTableFactory28.getTableType("hi!");
        fitnesse.testsystems.slim.Table table33 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory28.parseDefineTableTypeRow(table33, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertNotNull(slimTableFactory19);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(slimTableFactory28);
        org.junit.Assert.assertNull(wildcardClass30);
        org.junit.Assert.assertNull(wildcardClass32);
    }

    @Test
    public void test06658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06658");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        boolean boolean6 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory1.tableTypes;
        java.lang.String str9 = slimTableFactory1.makeTableType("");
        java.lang.String str11 = slimTableFactory1.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap12 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory1.copy();
        java.lang.Class<?> wildcardClass14 = slimTableFactory1.getClass();
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(slimTableFactory13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test06659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06659");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        java.lang.String str5 = slimTableFactory3.getFullTableName("hi!");
        java.lang.String str7 = slimTableFactory3.makeTableType("hi!");
        java.lang.String str9 = slimTableFactory3.getFullTableName("hi!");
        java.lang.Class<?> wildcardClass10 = slimTableFactory3.getClass();
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test06660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06660");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory1.copy();
        boolean boolean8 = slimTableFactory6.hasColon("hi!");
        fitnesse.testsystems.slim.Table table9 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext11 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable12 = slimTableFactory6.makeSlimTable(table9, "", slimTestContext11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test06661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06661");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass5 = slimTableFactory1.getTableType("hi!");
        boolean boolean7 = slimTableFactory1.hasColon("");
        boolean boolean9 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.Table table11 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext13 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable14 = slimTableFactory1.makeSlimTable(table11, "hi!", slimTestContext13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strMap10);
    }

    @Test
    public void test06662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06662");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory5.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory7.copy();
        boolean boolean10 = slimTableFactory8.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory8.tableTypeArrays;
        slimTableFactory6.tableTypeArrays = strMap11;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory6.getTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass16 = slimTableFactory6.getTableType("");
        fitnesse.testsystems.slim.Table table17 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable18 = slimTableFactory6.parseDefineTableTypeTable(table17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertNull(wildcardClass16);
    }

    @Test
    public void test06663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06663");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        boolean boolean5 = slimTableFactory0.hasColon("");
        java.lang.String str7 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap9 = slimTableFactory0.tableTypes;
        boolean boolean11 = slimTableFactory0.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory0.copy();
        boolean boolean14 = slimTableFactory12.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap15 = slimTableFactory12.tableTypeArrays;
        java.lang.String str17 = slimTableFactory12.getFullTableName("hi!");
        boolean boolean19 = slimTableFactory12.hasColon("");
        fitnesse.testsystems.slim.Table table20 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory12.parseDefineTableTypeRow(table20, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test06664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06664");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        slimTableFactory0.tableTypeArrays = strMap2;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass5 = slimTableFactory0.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory6.copy();
        boolean boolean9 = slimTableFactory7.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory7.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory7.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory12.getTableType("");
        boolean boolean16 = slimTableFactory12.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap17 = slimTableFactory12.tableTypeArrays;
        slimTableFactory11.tableTypeArrays = strMap17;
        slimTableFactory0.tableTypeArrays = strMap17;
        boolean boolean21 = slimTableFactory0.hasColon("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass23 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap24 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = slimTableFactory0.copy();
        java.lang.String str27 = slimTableFactory25.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = slimTableFactory25.copy();
        fitnesse.testsystems.slim.Table table29 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext31 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable32 = slimTableFactory25.makeSlimTable(table29, "", slimTestContext31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(wildcardClass23);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNotNull(slimTableFactory25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory28);
    }

    @Test
    public void test06665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06665");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory4.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap6 = slimTableFactory5.tableTypes;
        boolean boolean8 = slimTableFactory5.hasColon("");
        boolean boolean10 = slimTableFactory5.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap11 = slimTableFactory5.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory12.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory12.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory15.tableTypeArrays;
        slimTableFactory5.tableTypeArrays = strMap16;
        slimTableFactory0.tableTypeArrays = strMap16;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap19 = slimTableFactory0.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap20 = slimTableFactory0.tableTypeArrays;
        boolean boolean22 = slimTableFactory0.hasColon("");
        java.lang.String str24 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = slimTableFactory0.copy();
        java.lang.String str27 = slimTableFactory25.makeTableType("");
        boolean boolean29 = slimTableFactory25.hasColon("hi!");
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(slimTableFactory25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test06666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06666");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        boolean boolean6 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass10 = slimTableFactory8.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory8.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap12 = slimTableFactory11.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap12;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory1.copy();
        boolean boolean16 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap17 = slimTableFactory1.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass19 = slimTableFactory1.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = slimTableFactory20.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap22 = slimTableFactory21.tableTypes;
        boolean boolean24 = slimTableFactory21.hasColon("");
        boolean boolean26 = slimTableFactory21.hasColon("hi!");
        boolean boolean28 = slimTableFactory21.hasColon("");
        java.lang.String str30 = slimTableFactory21.getFullTableName("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass32 = slimTableFactory21.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap33 = slimTableFactory21.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap33;
        java.util.Map<java.lang.String, java.lang.String> strMap35 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.Table table36 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable37 = slimTableFactory1.parseDefineTableTypeTable(table36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(slimTableFactory21);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNull(wildcardClass32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(strMap35);
    }

    @Test
    public void test06667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06667");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        boolean boolean5 = slimTableFactory0.hasColon("");
        java.lang.String str7 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap9 = slimTableFactory0.tableTypes;
        boolean boolean11 = slimTableFactory0.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory0.copy();
        java.lang.String str14 = slimTableFactory12.makeTableType("");
        boolean boolean16 = slimTableFactory12.hasColon("");
        java.lang.String str18 = slimTableFactory12.makeTableType("");
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
    }

    @Test
    public void test06668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06668");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory1.tableTypeArrays;
        java.lang.String str6 = slimTableFactory1.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        boolean boolean11 = slimTableFactory9.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory9.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap13 = slimTableFactory9.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass16 = slimTableFactory14.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap17 = slimTableFactory14.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass19 = slimTableFactory14.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass22 = slimTableFactory20.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = slimTableFactory20.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = slimTableFactory23.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = slimTableFactory25.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap27 = slimTableFactory25.tableTypeArrays;
        slimTableFactory23.tableTypeArrays = strMap27;
        slimTableFactory14.tableTypeArrays = strMap27;
        slimTableFactory9.tableTypeArrays = strMap27;
        slimTableFactory1.tableTypeArrays = strMap27;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap32 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.Table table33 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory1.parseDefineTableTypeRow(table33, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNull(wildcardClass16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNull(wildcardClass22);
        org.junit.Assert.assertNotNull(slimTableFactory23);
        org.junit.Assert.assertNotNull(slimTableFactory24);
        org.junit.Assert.assertNotNull(slimTableFactory26);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(strMap32);
    }

    @Test
    public void test06669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06669");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        boolean boolean6 = slimTableFactory1.hasColon("hi!");
        boolean boolean8 = slimTableFactory1.hasColon("");
        java.lang.String str10 = slimTableFactory1.makeTableType("");
        java.lang.String str12 = slimTableFactory1.makeTableType("");
        java.lang.String str14 = slimTableFactory1.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory1.copy();
        boolean boolean17 = slimTableFactory15.hasColon("");
        java.lang.Class<?> wildcardClass18 = slimTableFactory15.getClass();
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test06670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06670");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory0.tableTypes;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap8 = slimTableFactory0.tableTypes;
        boolean boolean10 = slimTableFactory0.hasColon("");
        java.lang.String str12 = slimTableFactory0.getFullTableName("");
        java.lang.String str14 = slimTableFactory0.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap15 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory0.copy();
        java.lang.Class<?> wildcardClass17 = slimTableFactory0.getClass();
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test06671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06671");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass10 = slimTableFactory8.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory8.tableTypeArrays;
        slimTableFactory7.tableTypeArrays = strMap11;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory7.getTableType("");
        fitnesse.testsystems.slim.Table table15 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext17 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable18 = slimTableFactory7.makeSlimTable(table15, "hi!", slimTestContext17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNull(wildcardClass14);
    }

    @Test
    public void test06672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06672");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory3.tableTypeArrays;
        java.lang.String str6 = slimTableFactory3.makeTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass8 = slimTableFactory3.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory3.copy();
        java.lang.String str11 = slimTableFactory9.makeTableType("");
        boolean boolean13 = slimTableFactory9.hasColon("hi!");
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test06673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06673");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory1.copy();
        boolean boolean8 = slimTableFactory6.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap9 = slimTableFactory6.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory6.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory10.tableTypeArrays;
        java.lang.Class<?> wildcardClass12 = slimTableFactory10.getClass();
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test06674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06674");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory8.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap10;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory12.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory12.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory15.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap17 = slimTableFactory15.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap17;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory19.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap21 = slimTableFactory20.tableTypes;
        boolean boolean23 = slimTableFactory20.hasColon("");
        boolean boolean25 = slimTableFactory20.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap26 = slimTableFactory20.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass29 = slimTableFactory27.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory30 = slimTableFactory27.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap31 = slimTableFactory30.tableTypeArrays;
        slimTableFactory20.tableTypeArrays = strMap31;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory33 = slimTableFactory20.copy();
        java.lang.String str35 = slimTableFactory33.makeTableType("hi!");
        java.lang.String str37 = slimTableFactory33.getFullTableName("hi!");
        java.lang.String str39 = slimTableFactory33.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory40 = slimTableFactory33.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory41 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory42 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass44 = slimTableFactory42.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory45 = slimTableFactory42.copy();
        boolean boolean47 = slimTableFactory42.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap48 = slimTableFactory42.tableTypeArrays;
        slimTableFactory41.tableTypeArrays = strMap48;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap50 = slimTableFactory41.tableTypes;
        boolean boolean52 = slimTableFactory41.hasColon("hi!");
        boolean boolean54 = slimTableFactory41.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap55 = slimTableFactory41.tableTypeArrays;
        slimTableFactory33.tableTypeArrays = strMap55;
        slimTableFactory1.tableTypeArrays = strMap55;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory58 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.Table table59 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable60 = slimTableFactory58.parseDefineTableTypeTable(table59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(slimTableFactory20);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNull(wildcardClass29);
        org.junit.Assert.assertNotNull(slimTableFactory30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(slimTableFactory33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(slimTableFactory40);
        org.junit.Assert.assertNull(wildcardClass44);
        org.junit.Assert.assertNotNull(slimTableFactory45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strMap48);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(strMap55);
        org.junit.Assert.assertNotNull(slimTableFactory58);
    }

    @Test
    public void test06675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06675");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("hi!");
        java.lang.String str7 = slimTableFactory0.getFullTableName("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass9 = slimTableFactory0.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory11.copy();
        boolean boolean14 = slimTableFactory12.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory12.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory12.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = slimTableFactory16.copy();
        boolean boolean19 = slimTableFactory16.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap20 = slimTableFactory16.tableTypeArrays;
        java.lang.String str22 = slimTableFactory16.getFullTableName("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass24 = slimTableFactory16.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass27 = slimTableFactory25.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = slimTableFactory25.copy();
        boolean boolean30 = slimTableFactory25.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass32 = slimTableFactory25.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap33 = slimTableFactory25.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory34 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory35 = slimTableFactory34.copy();
        boolean boolean37 = slimTableFactory35.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap38 = slimTableFactory35.tableTypeArrays;
        java.lang.String str40 = slimTableFactory35.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap41 = slimTableFactory35.tableTypeArrays;
        slimTableFactory25.tableTypeArrays = strMap41;
        slimTableFactory16.tableTypeArrays = strMap41;
        slimTableFactory0.tableTypeArrays = strMap41;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory45 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory46 = slimTableFactory45.copy();
        boolean boolean48 = slimTableFactory46.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory49 = slimTableFactory46.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = slimTableFactory46.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass52 = slimTableFactory46.getTableType("");
        boolean boolean54 = slimTableFactory46.hasColon("");
        java.lang.String str56 = slimTableFactory46.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap57 = slimTableFactory46.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap57;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap59 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.Table table60 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory0.parseDefineTableTypeRow(table60, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertNotNull(slimTableFactory17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertNull(wildcardClass24);
        org.junit.Assert.assertNull(wildcardClass27);
        org.junit.Assert.assertNotNull(slimTableFactory28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(wildcardClass32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(slimTableFactory35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertNotNull(slimTableFactory46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(slimTableFactory49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(wildcardClass52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hi!" + "'", str56, "hi!");
        org.junit.Assert.assertNotNull(strMap57);
        org.junit.Assert.assertNotNull(strMap59);
    }

    @Test
    public void test06676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06676");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory1.tableTypeArrays;
        java.lang.String str6 = slimTableFactory1.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory7.copy();
        boolean boolean10 = slimTableFactory8.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory8.tableTypeArrays;
        java.lang.String str13 = slimTableFactory8.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory8.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap14;
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory1.tableTypeArrays;
        java.lang.String str18 = slimTableFactory1.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap19 = slimTableFactory1.tableTypeArrays;
        java.lang.String str21 = slimTableFactory1.getFullTableName("hi!");
        boolean boolean23 = slimTableFactory1.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = slimTableFactory24.copy();
        boolean boolean27 = slimTableFactory25.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = slimTableFactory25.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory29 = slimTableFactory25.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory30 = slimTableFactory25.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap31 = slimTableFactory25.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory32 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory33 = slimTableFactory32.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap34 = slimTableFactory32.tableTypeArrays;
        slimTableFactory25.tableTypeArrays = strMap34;
        java.util.Map<java.lang.String, java.lang.String> strMap36 = slimTableFactory25.tableTypeArrays;
        java.lang.String str38 = slimTableFactory25.makeTableType("");
        boolean boolean40 = slimTableFactory25.hasColon("hi!");
        java.lang.String str42 = slimTableFactory25.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap43 = slimTableFactory25.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap43;
        boolean boolean46 = slimTableFactory1.hasColon("");
        fitnesse.testsystems.slim.Table table47 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable48 = slimTableFactory1.parseDefineTableTypeTable(table47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(slimTableFactory25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(slimTableFactory28);
        org.junit.Assert.assertNotNull(slimTableFactory29);
        org.junit.Assert.assertNotNull(slimTableFactory30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(slimTableFactory33);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "hi!" + "'", str42, "hi!");
        org.junit.Assert.assertNotNull(strMap43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test06677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06677");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory0.copy();
        boolean boolean6 = slimTableFactory4.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass9 = slimTableFactory7.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory7.tableTypeArrays;
        boolean boolean12 = slimTableFactory7.hasColon("");
        java.lang.String str14 = slimTableFactory7.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap15 = slimTableFactory7.tableTypeArrays;
        slimTableFactory4.tableTypeArrays = strMap15;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = slimTableFactory4.copy();
        java.lang.String str19 = slimTableFactory17.getFullTableName("hi!");
        java.lang.String str21 = slimTableFactory17.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = slimTableFactory17.copy();
        fitnesse.testsystems.slim.Table table23 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext25 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable26 = slimTableFactory17.makeSlimTable(table23, "", slimTestContext25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(slimTableFactory17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(slimTableFactory22);
    }

    @Test
    public void test06678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06678");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory1.copy();
        java.lang.String str10 = slimTableFactory1.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory11.copy();
        boolean boolean14 = slimTableFactory12.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory12.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory12.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = slimTableFactory12.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap18 = slimTableFactory12.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory19.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap21 = slimTableFactory19.tableTypeArrays;
        slimTableFactory12.tableTypeArrays = strMap21;
        java.lang.String str24 = slimTableFactory12.getFullTableName("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass26 = slimTableFactory12.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass29 = slimTableFactory27.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory30 = slimTableFactory27.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap31 = slimTableFactory30.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap32 = slimTableFactory30.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap33 = slimTableFactory30.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory34 = slimTableFactory30.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory35 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass37 = slimTableFactory35.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory38 = slimTableFactory35.copy();
        boolean boolean40 = slimTableFactory35.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass42 = slimTableFactory35.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap43 = slimTableFactory35.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap44 = slimTableFactory35.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap45 = slimTableFactory35.tableTypeArrays;
        slimTableFactory34.tableTypeArrays = strMap45;
        slimTableFactory12.tableTypeArrays = strMap45;
        slimTableFactory1.tableTypeArrays = strMap45;
        fitnesse.testsystems.slim.Table table49 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable50 = slimTableFactory1.parseDefineTableTypeTable(table49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertNotNull(slimTableFactory17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(slimTableFactory20);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNull(wildcardClass26);
        org.junit.Assert.assertNull(wildcardClass29);
        org.junit.Assert.assertNotNull(slimTableFactory30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(slimTableFactory34);
        org.junit.Assert.assertNull(wildcardClass37);
        org.junit.Assert.assertNotNull(slimTableFactory38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(wildcardClass42);
        org.junit.Assert.assertNotNull(strMap43);
        org.junit.Assert.assertNotNull(strMap44);
        org.junit.Assert.assertNotNull(strMap45);
    }

    @Test
    public void test06679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06679");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory4.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap6 = slimTableFactory5.tableTypes;
        boolean boolean8 = slimTableFactory5.hasColon("");
        boolean boolean10 = slimTableFactory5.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap11 = slimTableFactory5.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory12.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory12.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory15.tableTypeArrays;
        slimTableFactory5.tableTypeArrays = strMap16;
        slimTableFactory0.tableTypeArrays = strMap16;
        java.lang.String str20 = slimTableFactory0.makeTableType("hi!");
        boolean boolean22 = slimTableFactory0.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass24 = slimTableFactory0.getTableType("");
        java.lang.String str26 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.Table table27 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory0.parseDefineTableTypeRow(table27, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(wildcardClass24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
    }

    @Test
    public void test06680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06680");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory5.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap8 = slimTableFactory5.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass11 = slimTableFactory9.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap12 = slimTableFactory9.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory9.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory9.tableTypeArrays;
        slimTableFactory5.tableTypeArrays = strMap14;
        java.lang.String str17 = slimTableFactory5.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory5.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory19.copy();
        boolean boolean22 = slimTableFactory20.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap23 = slimTableFactory20.tableTypeArrays;
        java.lang.String str25 = slimTableFactory20.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap26 = slimTableFactory20.tableTypeArrays;
        slimTableFactory5.tableTypeArrays = strMap26;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = slimTableFactory5.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = slimTableFactory28.tableTypeArrays;
        java.lang.String str31 = slimTableFactory28.getFullTableName("hi!");
        java.lang.String str33 = slimTableFactory28.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap34 = slimTableFactory28.tableTypes;
        java.lang.String str36 = slimTableFactory28.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory37 = slimTableFactory28.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory38 = slimTableFactory28.copy();
        java.lang.String str40 = slimTableFactory28.makeTableType("");
        java.lang.String str42 = slimTableFactory28.makeTableType("");
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(slimTableFactory13);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory18);
        org.junit.Assert.assertNotNull(slimTableFactory20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(slimTableFactory28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(slimTableFactory37);
        org.junit.Assert.assertNotNull(slimTableFactory38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
    }

    @Test
    public void test06681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06681");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory3.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap5 = slimTableFactory3.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap6 = slimTableFactory3.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass8 = slimTableFactory3.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory3.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory10.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap12 = slimTableFactory11.tableTypes;
        boolean boolean14 = slimTableFactory11.hasColon("");
        boolean boolean16 = slimTableFactory11.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap17 = slimTableFactory11.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass20 = slimTableFactory18.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = slimTableFactory18.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap22 = slimTableFactory21.tableTypeArrays;
        slimTableFactory11.tableTypeArrays = strMap22;
        slimTableFactory9.tableTypeArrays = strMap22;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = slimTableFactory25.copy();
        boolean boolean28 = slimTableFactory26.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory29 = slimTableFactory26.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap30 = slimTableFactory26.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass32 = slimTableFactory26.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap33 = slimTableFactory26.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory34 = slimTableFactory26.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass36 = slimTableFactory26.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap37 = slimTableFactory26.tableTypeArrays;
        slimTableFactory9.tableTypeArrays = strMap37;
        java.lang.String str40 = slimTableFactory9.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap41 = slimTableFactory9.tableTypes;
        java.lang.Class<?> wildcardClass42 = strMap41.getClass();
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNull(wildcardClass20);
        org.junit.Assert.assertNotNull(slimTableFactory21);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(slimTableFactory26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(slimTableFactory29);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNull(wildcardClass32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(slimTableFactory34);
        org.junit.Assert.assertNull(wildcardClass36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "hi!" + "'", str40, "hi!");
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test06682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06682");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass5 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass8 = slimTableFactory6.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory6.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory9.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory11.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap13 = slimTableFactory11.tableTypeArrays;
        slimTableFactory9.tableTypeArrays = strMap13;
        slimTableFactory0.tableTypeArrays = strMap13;
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.Table table17 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext19 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable20 = slimTableFactory0.makeSlimTable(table17, "", slimTestContext19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(strMap16);
    }

    @Test
    public void test06683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06683");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap5 = slimTableFactory4.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap6 = slimTableFactory4.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory4.copy();
        java.lang.String str9 = slimTableFactory7.makeTableType("");
        java.lang.String str11 = slimTableFactory7.makeTableType("hi!");
        java.lang.Class<?> wildcardClass12 = slimTableFactory7.getClass();
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test06684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06684");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory4.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap6 = slimTableFactory5.tableTypes;
        boolean boolean8 = slimTableFactory5.hasColon("");
        boolean boolean10 = slimTableFactory5.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap11 = slimTableFactory5.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory12.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory12.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory15.tableTypeArrays;
        slimTableFactory5.tableTypeArrays = strMap16;
        slimTableFactory0.tableTypeArrays = strMap16;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap19 = slimTableFactory0.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap20 = slimTableFactory0.tableTypeArrays;
        boolean boolean22 = slimTableFactory0.hasColon("");
        java.lang.String str24 = slimTableFactory0.makeTableType("");
        java.lang.String str26 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = slimTableFactory27.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap29 = slimTableFactory28.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass31 = slimTableFactory28.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap32 = slimTableFactory28.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass34 = slimTableFactory28.getTableType("hi!");
        java.lang.String str36 = slimTableFactory28.makeTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass38 = slimTableFactory28.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory39 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory40 = slimTableFactory39.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap41 = slimTableFactory40.tableTypes;
        boolean boolean43 = slimTableFactory40.hasColon("");
        boolean boolean45 = slimTableFactory40.hasColon("hi!");
        boolean boolean47 = slimTableFactory40.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory48 = slimTableFactory40.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory49 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass51 = slimTableFactory49.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap52 = slimTableFactory49.tableTypeArrays;
        java.lang.String str54 = slimTableFactory49.makeTableType("hi!");
        boolean boolean56 = slimTableFactory49.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory57 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass59 = slimTableFactory57.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap60 = slimTableFactory57.tableTypeArrays;
        boolean boolean62 = slimTableFactory57.hasColon("");
        java.lang.String str64 = slimTableFactory57.makeTableType("");
        java.lang.String str66 = slimTableFactory57.makeTableType("");
        java.lang.String str68 = slimTableFactory57.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory69 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory70 = slimTableFactory69.copy();
        boolean boolean72 = slimTableFactory70.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory73 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass75 = slimTableFactory73.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory76 = slimTableFactory73.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory77 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory78 = slimTableFactory77.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap79 = slimTableFactory78.tableTypes;
        boolean boolean81 = slimTableFactory78.hasColon("");
        boolean boolean83 = slimTableFactory78.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap84 = slimTableFactory78.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory85 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass87 = slimTableFactory85.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory88 = slimTableFactory85.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap89 = slimTableFactory88.tableTypeArrays;
        slimTableFactory78.tableTypeArrays = strMap89;
        slimTableFactory73.tableTypeArrays = strMap89;
        slimTableFactory70.tableTypeArrays = strMap89;
        slimTableFactory57.tableTypeArrays = strMap89;
        slimTableFactory49.tableTypeArrays = strMap89;
        slimTableFactory40.tableTypeArrays = strMap89;
        slimTableFactory28.tableTypeArrays = strMap89;
        java.util.Map<java.lang.String, java.lang.String> strMap97 = slimTableFactory28.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap97;
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(slimTableFactory28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNull(wildcardClass34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNull(wildcardClass38);
        org.junit.Assert.assertNotNull(slimTableFactory40);
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(slimTableFactory48);
        org.junit.Assert.assertNull(wildcardClass51);
        org.junit.Assert.assertNotNull(strMap52);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(wildcardClass59);
        org.junit.Assert.assertNotNull(strMap60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(slimTableFactory70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(wildcardClass75);
        org.junit.Assert.assertNotNull(slimTableFactory76);
        org.junit.Assert.assertNotNull(slimTableFactory78);
        org.junit.Assert.assertNotNull(strMap79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(strMap84);
        org.junit.Assert.assertNull(wildcardClass87);
        org.junit.Assert.assertNotNull(slimTableFactory88);
        org.junit.Assert.assertNotNull(strMap89);
        org.junit.Assert.assertNotNull(strMap97);
    }

    @Test
    public void test06685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06685");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass5 = slimTableFactory0.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory0.copy();
        java.lang.String str8 = slimTableFactory0.makeTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass10 = slimTableFactory0.getTableType("hi!");
        java.lang.String str12 = slimTableFactory0.getFullTableName("hi!");
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
    }

    @Test
    public void test06686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06686");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass4 = slimTableFactory1.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap5 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.Table table7 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory6.parseDefineTableTypeRow(table7, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
    }

    @Test
    public void test06687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06687");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap5 = slimTableFactory1.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory1.copy();
        boolean boolean11 = slimTableFactory9.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory9.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap13 = null;
        slimTableFactory9.tableTypeArrays = strMap13;
        java.util.Map<java.lang.String, java.lang.String> strMap15 = null;
        slimTableFactory9.tableTypeArrays = strMap15;
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(slimTableFactory12);
    }

    @Test
    public void test06688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06688");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        java.lang.String str5 = slimTableFactory0.makeTableType("hi!");
        java.lang.String str7 = slimTableFactory0.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap9 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.Table table10 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext12 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable13 = slimTableFactory0.makeSlimTable(table10, "hi!", slimTestContext12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(strMap9);
    }

    @Test
    public void test06689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06689");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory4.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap6 = slimTableFactory5.tableTypes;
        boolean boolean8 = slimTableFactory5.hasColon("");
        boolean boolean10 = slimTableFactory5.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap11 = slimTableFactory5.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory12.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory12.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory15.tableTypeArrays;
        slimTableFactory5.tableTypeArrays = strMap16;
        slimTableFactory0.tableTypeArrays = strMap16;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap19 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = slimTableFactory20.copy();
        java.lang.String str23 = slimTableFactory21.makeTableType("hi!");
        java.lang.String str25 = slimTableFactory21.makeTableType("");
        java.lang.String str27 = slimTableFactory21.makeTableType("");
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(slimTableFactory20);
        org.junit.Assert.assertNotNull(slimTableFactory21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
    }

    @Test
    public void test06690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06690");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        boolean boolean6 = slimTableFactory1.hasColon("hi!");
        boolean boolean8 = slimTableFactory1.hasColon("");
        java.lang.String str10 = slimTableFactory1.makeTableType("");
        java.lang.String str12 = slimTableFactory1.makeTableType("");
        java.lang.String str14 = slimTableFactory1.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = slimTableFactory16.copy();
        boolean boolean19 = slimTableFactory17.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap20 = slimTableFactory17.tableTypeArrays;
        java.lang.String str22 = slimTableFactory17.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = slimTableFactory23.copy();
        boolean boolean26 = slimTableFactory24.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap27 = slimTableFactory24.tableTypeArrays;
        java.lang.String str29 = slimTableFactory24.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap30 = slimTableFactory24.tableTypeArrays;
        slimTableFactory17.tableTypeArrays = strMap30;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory32 = slimTableFactory17.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap33 = slimTableFactory17.tableTypes;
        boolean boolean35 = slimTableFactory17.hasColon("");
        boolean boolean37 = slimTableFactory17.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap38 = slimTableFactory17.tableTypeArrays;
        slimTableFactory15.tableTypeArrays = strMap38;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass41 = slimTableFactory15.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory42 = slimTableFactory15.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap43 = slimTableFactory42.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap44 = slimTableFactory42.tableTypeArrays;
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertNotNull(slimTableFactory17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(slimTableFactory24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(slimTableFactory32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertNull(wildcardClass41);
        org.junit.Assert.assertNotNull(slimTableFactory42);
        org.junit.Assert.assertNotNull(strMap43);
        org.junit.Assert.assertNotNull(strMap44);
    }

    @Test
    public void test06691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06691");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        boolean boolean5 = slimTableFactory0.hasColon("");
        java.lang.String str7 = slimTableFactory0.makeTableType("");
        java.lang.String str9 = slimTableFactory0.makeTableType("");
        java.lang.String str11 = slimTableFactory0.makeTableType("");
        java.lang.String str13 = slimTableFactory0.getFullTableName("");
        java.lang.String str15 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = slimTableFactory16.copy();
        boolean boolean19 = slimTableFactory17.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap20 = slimTableFactory17.tableTypeArrays;
        java.lang.String str22 = slimTableFactory17.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = slimTableFactory23.copy();
        boolean boolean26 = slimTableFactory24.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap27 = slimTableFactory24.tableTypeArrays;
        java.lang.String str29 = slimTableFactory24.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap30 = slimTableFactory24.tableTypeArrays;
        slimTableFactory17.tableTypeArrays = strMap30;
        slimTableFactory0.tableTypeArrays = strMap30;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass34 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap35 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory36 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory37 = slimTableFactory36.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory38 = slimTableFactory37.copy();
        fitnesse.testsystems.slim.Table table39 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable40 = slimTableFactory37.parseDefineTableTypeTable(table39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(slimTableFactory17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(slimTableFactory24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNull(wildcardClass34);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(slimTableFactory36);
        org.junit.Assert.assertNotNull(slimTableFactory37);
        org.junit.Assert.assertNotNull(slimTableFactory38);
    }

    @Test
    public void test06692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06692");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap5 = slimTableFactory1.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory1.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.Table table9 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable10 = slimTableFactory1.parseDefineTableTypeTable(table9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNotNull(strMap8);
    }

    @Test
    public void test06693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06693");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory5.copy();
        boolean boolean8 = slimTableFactory5.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass10 = slimTableFactory5.getTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass12 = slimTableFactory5.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap13 = slimTableFactory5.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass16 = slimTableFactory14.getTableType("");
        boolean boolean18 = slimTableFactory14.hasColon("hi!");
        java.lang.String str20 = slimTableFactory14.getFullTableName("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass22 = slimTableFactory14.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass25 = slimTableFactory23.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap26 = slimTableFactory23.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = slimTableFactory23.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap28 = slimTableFactory23.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory29 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory30 = slimTableFactory29.copy();
        boolean boolean32 = slimTableFactory30.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory33 = slimTableFactory30.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory34 = slimTableFactory30.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory35 = slimTableFactory34.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory36 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass38 = slimTableFactory36.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory39 = slimTableFactory36.copy();
        boolean boolean41 = slimTableFactory36.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap42 = slimTableFactory36.tableTypeArrays;
        slimTableFactory34.tableTypeArrays = strMap42;
        slimTableFactory23.tableTypeArrays = strMap42;
        slimTableFactory14.tableTypeArrays = strMap42;
        slimTableFactory5.tableTypeArrays = strMap42;
        java.lang.String str48 = slimTableFactory5.makeTableType("");
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNull(wildcardClass16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNull(wildcardClass22);
        org.junit.Assert.assertNull(wildcardClass25);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(slimTableFactory27);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNotNull(slimTableFactory30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(slimTableFactory33);
        org.junit.Assert.assertNotNull(slimTableFactory34);
        org.junit.Assert.assertNotNull(slimTableFactory35);
        org.junit.Assert.assertNull(wildcardClass38);
        org.junit.Assert.assertNotNull(slimTableFactory39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(strMap42);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
    }

    @Test
    public void test06694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06694");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory3.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap5 = slimTableFactory3.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap6 = slimTableFactory3.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory3.copy();
        java.lang.String str9 = slimTableFactory7.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory7.tableTypeArrays;
        java.lang.String str12 = slimTableFactory7.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory7.copy();
        fitnesse.testsystems.slim.Table table14 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory7.parseDefineTableTypeRow(table14, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(slimTableFactory13);
    }

    @Test
    public void test06695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06695");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap5 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory6.tableTypeArrays;
        java.lang.String str9 = slimTableFactory6.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory6.tableTypeArrays;
        fitnesse.testsystems.slim.Table table11 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory6.parseDefineTableTypeRow(table11, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(strMap10);
    }

    @Test
    public void test06696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06696");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        boolean boolean4 = slimTableFactory0.hasColon("");
        java.lang.String str6 = slimTableFactory0.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass10 = slimTableFactory8.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory8.tableTypeArrays;
        boolean boolean13 = slimTableFactory8.hasColon("");
        java.lang.String str15 = slimTableFactory8.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory8.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap16;
        java.lang.String str19 = slimTableFactory0.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap21 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.Table table25 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory24.parseDefineTableTypeRow(table25, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory20);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(slimTableFactory22);
        org.junit.Assert.assertNotNull(slimTableFactory23);
        org.junit.Assert.assertNotNull(slimTableFactory24);
    }

    @Test
    public void test06697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06697");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory8.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap10;
        java.util.Map<java.lang.String, java.lang.String> strMap12 = slimTableFactory1.tableTypeArrays;
        java.lang.String str14 = slimTableFactory1.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory1.copy();
        java.lang.String str17 = slimTableFactory1.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass20 = slimTableFactory18.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap21 = slimTableFactory18.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = slimTableFactory18.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap23 = slimTableFactory18.tableTypeArrays;
        boolean boolean25 = slimTableFactory18.hasColon("");
        java.lang.String str27 = slimTableFactory18.makeTableType("");
        java.lang.String str29 = slimTableFactory18.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory30 = slimTableFactory18.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory31 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory32 = slimTableFactory31.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = null;
        slimTableFactory31.tableTypeArrays = strMap33;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass36 = slimTableFactory31.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory37 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory38 = slimTableFactory37.copy();
        boolean boolean40 = slimTableFactory38.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory41 = slimTableFactory38.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory42 = slimTableFactory38.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory43 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass45 = slimTableFactory43.getTableType("");
        boolean boolean47 = slimTableFactory43.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap48 = slimTableFactory43.tableTypeArrays;
        slimTableFactory42.tableTypeArrays = strMap48;
        slimTableFactory31.tableTypeArrays = strMap48;
        boolean boolean52 = slimTableFactory31.hasColon("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass54 = slimTableFactory31.getTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass56 = slimTableFactory31.getTableType("hi!");
        boolean boolean58 = slimTableFactory31.hasColon("hi!");
        java.lang.String str60 = slimTableFactory31.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap61 = slimTableFactory31.tableTypeArrays;
        slimTableFactory30.tableTypeArrays = strMap61;
        slimTableFactory1.tableTypeArrays = strMap61;
        fitnesse.testsystems.slim.Table table64 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext66 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable67 = slimTableFactory1.makeSlimTable(table64, "", slimTestContext66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNull(wildcardClass20);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(slimTableFactory22);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(slimTableFactory30);
        org.junit.Assert.assertNotNull(slimTableFactory32);
        org.junit.Assert.assertNull(wildcardClass36);
        org.junit.Assert.assertNotNull(slimTableFactory38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(slimTableFactory41);
        org.junit.Assert.assertNotNull(slimTableFactory42);
        org.junit.Assert.assertNull(wildcardClass45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strMap48);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(wildcardClass54);
        org.junit.Assert.assertNull(wildcardClass56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "hi!" + "'", str60, "hi!");
        org.junit.Assert.assertNotNull(strMap61);
    }

    @Test
    public void test06698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06698");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        boolean boolean6 = slimTableFactory1.hasColon("hi!");
        boolean boolean8 = slimTableFactory1.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory1.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass11 = slimTableFactory9.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap12 = slimTableFactory9.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass15 = slimTableFactory13.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory13.copy();
        boolean boolean18 = slimTableFactory16.hasColon("");
        boolean boolean20 = slimTableFactory16.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = slimTableFactory16.copy();
        java.lang.String str23 = slimTableFactory16.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap24 = slimTableFactory16.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = slimTableFactory25.copy();
        boolean boolean28 = slimTableFactory26.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap29 = slimTableFactory26.tableTypeArrays;
        java.lang.String str31 = slimTableFactory26.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory32 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory33 = slimTableFactory32.copy();
        boolean boolean35 = slimTableFactory33.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap36 = slimTableFactory33.tableTypeArrays;
        java.lang.String str38 = slimTableFactory33.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap39 = slimTableFactory33.tableTypeArrays;
        slimTableFactory26.tableTypeArrays = strMap39;
        java.util.Map<java.lang.String, java.lang.String> strMap41 = slimTableFactory26.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap42 = slimTableFactory26.tableTypes;
        java.lang.String str44 = slimTableFactory26.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory45 = slimTableFactory26.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory46 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory47 = slimTableFactory46.copy();
        boolean boolean49 = slimTableFactory47.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory50 = slimTableFactory47.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap51 = slimTableFactory47.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory52 = slimTableFactory47.copy();
        boolean boolean54 = slimTableFactory52.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap55 = slimTableFactory52.tableTypeArrays;
        slimTableFactory45.tableTypeArrays = strMap55;
        slimTableFactory16.tableTypeArrays = strMap55;
        slimTableFactory9.tableTypeArrays = strMap55;
        boolean boolean60 = slimTableFactory9.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory61 = slimTableFactory9.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap62 = slimTableFactory61.tableTypeArrays;
        java.lang.String str64 = slimTableFactory61.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap65 = slimTableFactory61.tableTypes;
        fitnesse.testsystems.slim.Table table66 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable67 = slimTableFactory61.parseDefineTableTypeTable(table66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(slimTableFactory21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNotNull(slimTableFactory26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(slimTableFactory33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertNotNull(strMap42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi!" + "'", str44, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory45);
        org.junit.Assert.assertNotNull(slimTableFactory47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(slimTableFactory50);
        org.junit.Assert.assertNotNull(strMap51);
        org.junit.Assert.assertNotNull(slimTableFactory52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(strMap55);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(slimTableFactory61);
        org.junit.Assert.assertNotNull(strMap62);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(strMap65);
    }

    @Test
    public void test06699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06699");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory0.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap9 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory0.tableTypeArrays;
        boolean boolean12 = slimTableFactory0.hasColon("hi!");
        java.lang.String str14 = slimTableFactory0.getFullTableName("hi!");
        boolean boolean16 = slimTableFactory0.hasColon("");
        fitnesse.testsystems.slim.Table table17 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory0.parseDefineTableTypeRow(table17, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test06700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06700");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory1.tableTypeArrays;
        java.lang.String str6 = slimTableFactory1.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory7.copy();
        boolean boolean10 = slimTableFactory8.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory8.tableTypeArrays;
        java.lang.String str13 = slimTableFactory8.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory8.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap14;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory18.copy();
        boolean boolean21 = slimTableFactory19.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap22 = slimTableFactory19.tableTypeArrays;
        slimTableFactory17.tableTypeArrays = strMap22;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap24 = slimTableFactory17.tableTypes;
        boolean boolean26 = slimTableFactory17.hasColon("");
        java.lang.String str28 = slimTableFactory17.getFullTableName("");
        java.lang.String str30 = slimTableFactory17.makeTableType("hi!");
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertNotNull(slimTableFactory17);
        org.junit.Assert.assertNotNull(slimTableFactory19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
    }

    @Test
    public void test06701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06701");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory1.tableTypeArrays;
        java.lang.String str6 = slimTableFactory1.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory7.copy();
        boolean boolean10 = slimTableFactory8.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory8.tableTypeArrays;
        java.lang.String str13 = slimTableFactory8.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory8.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap14;
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory1.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap17 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory1.copy();
        java.lang.String str20 = slimTableFactory1.getFullTableName("hi!");
        java.lang.Class<?> wildcardClass21 = slimTableFactory1.getClass();
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(slimTableFactory18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test06702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06702");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory4.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap6 = slimTableFactory5.tableTypes;
        boolean boolean8 = slimTableFactory5.hasColon("");
        boolean boolean10 = slimTableFactory5.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap11 = slimTableFactory5.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory12.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory12.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory15.tableTypeArrays;
        slimTableFactory5.tableTypeArrays = strMap16;
        slimTableFactory0.tableTypeArrays = strMap16;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap19 = slimTableFactory0.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap20 = slimTableFactory0.tableTypeArrays;
        boolean boolean22 = slimTableFactory0.hasColon("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass24 = slimTableFactory0.getTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass26 = slimTableFactory0.getTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass28 = slimTableFactory0.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory29 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass31 = slimTableFactory29.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap32 = slimTableFactory29.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory33 = slimTableFactory29.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory34 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory35 = slimTableFactory34.copy();
        boolean boolean37 = slimTableFactory35.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory38 = slimTableFactory35.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory39 = slimTableFactory35.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory40 = slimTableFactory39.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory41 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass43 = slimTableFactory41.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory44 = slimTableFactory41.copy();
        boolean boolean46 = slimTableFactory41.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap47 = slimTableFactory41.tableTypeArrays;
        slimTableFactory39.tableTypeArrays = strMap47;
        slimTableFactory33.tableTypeArrays = strMap47;
        java.lang.String str51 = slimTableFactory33.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory52 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory53 = slimTableFactory52.copy();
        boolean boolean55 = slimTableFactory53.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap56 = slimTableFactory53.tableTypeArrays;
        java.lang.String str58 = slimTableFactory53.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory59 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory60 = slimTableFactory59.copy();
        boolean boolean62 = slimTableFactory60.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap63 = slimTableFactory60.tableTypeArrays;
        java.lang.String str65 = slimTableFactory60.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap66 = slimTableFactory60.tableTypeArrays;
        slimTableFactory53.tableTypeArrays = strMap66;
        java.util.Map<java.lang.String, java.lang.String> strMap68 = slimTableFactory53.tableTypeArrays;
        slimTableFactory33.tableTypeArrays = strMap68;
        slimTableFactory0.tableTypeArrays = strMap68;
        boolean boolean72 = slimTableFactory0.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap73 = slimTableFactory0.tableTypes;
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(wildcardClass24);
        org.junit.Assert.assertNull(wildcardClass26);
        org.junit.Assert.assertNull(wildcardClass28);
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(slimTableFactory33);
        org.junit.Assert.assertNotNull(slimTableFactory35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(slimTableFactory38);
        org.junit.Assert.assertNotNull(slimTableFactory39);
        org.junit.Assert.assertNotNull(slimTableFactory40);
        org.junit.Assert.assertNull(wildcardClass43);
        org.junit.Assert.assertNotNull(slimTableFactory44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "hi!" + "'", str51, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(strMap56);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(slimTableFactory60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(strMap63);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strMap68);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(strMap73);
    }

    @Test
    public void test06703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06703");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap5 = slimTableFactory1.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory1.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory9.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap11 = slimTableFactory9.tableTypes;
        java.lang.Class<?> wildcardClass12 = slimTableFactory9.getClass();
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test06704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06704");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        boolean boolean6 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass10 = slimTableFactory8.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory8.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap12 = slimTableFactory11.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap12;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory1.copy();
        java.lang.String str16 = slimTableFactory14.makeTableType("hi!");
        java.lang.String str18 = slimTableFactory14.getFullTableName("hi!");
        java.lang.String str20 = slimTableFactory14.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = slimTableFactory14.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap22 = slimTableFactory21.tableTypes;
        java.lang.String str24 = slimTableFactory21.getFullTableName("hi!");
        fitnesse.testsystems.slim.Table table25 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext27 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable28 = slimTableFactory21.makeSlimTable(table25, "", slimTestContext27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(slimTableFactory21);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
    }

    @Test
    public void test06705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06705");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap5 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory6.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory6.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory6.copy();
        fitnesse.testsystems.slim.Table table10 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory6.parseDefineTableTypeRow(table10, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
    }

    @Test
    public void test06706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06706");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass5 = slimTableFactory3.getTableType("");
        boolean boolean7 = slimTableFactory3.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory3.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap8;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory10.copy();
        boolean boolean13 = slimTableFactory11.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory11.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory11.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory15.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass19 = slimTableFactory17.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory17.copy();
        boolean boolean22 = slimTableFactory17.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap23 = slimTableFactory17.tableTypeArrays;
        slimTableFactory15.tableTypeArrays = strMap23;
        java.util.Map<java.lang.String, java.lang.String> strMap25 = slimTableFactory15.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap25;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = slimTableFactory1.copy();
        boolean boolean30 = slimTableFactory28.hasColon("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass32 = slimTableFactory28.getTableType("");
        java.lang.String str34 = slimTableFactory28.makeTableType("");
        java.lang.String str36 = slimTableFactory28.getFullTableName("hi!");
        fitnesse.testsystems.slim.Table table37 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable38 = slimTableFactory28.parseDefineTableTypeTable(table37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(slimTableFactory20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(slimTableFactory27);
        org.junit.Assert.assertNotNull(slimTableFactory28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(wildcardClass32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
    }

    @Test
    public void test06707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06707");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap5 = slimTableFactory1.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory1.copy();
        boolean boolean12 = slimTableFactory1.hasColon("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory1.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap15 = slimTableFactory1.tableTypeArrays;
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertNotNull(strMap15);
    }

    @Test
    public void test06708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06708");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory3.hasColon("");
        boolean boolean7 = slimTableFactory3.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory3.copy();
        java.lang.String str10 = slimTableFactory3.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap11 = slimTableFactory3.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory3.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory12.getTableType("");
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertNull(wildcardClass14);
    }

    @Test
    public void test06709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06709");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass6 = slimTableFactory1.getTableType("");
        boolean boolean8 = slimTableFactory1.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.Table table10 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext12 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable13 = slimTableFactory1.makeSlimTable(table10, "", slimTestContext12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(slimTableFactory9);
    }

    @Test
    public void test06710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06710");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory0.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap10 = slimTableFactory9.tableTypes;
        boolean boolean12 = slimTableFactory9.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap13 = slimTableFactory9.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory9.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory15.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap17 = slimTableFactory16.tableTypes;
        boolean boolean19 = slimTableFactory16.hasColon("");
        boolean boolean21 = slimTableFactory16.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap22 = slimTableFactory16.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass25 = slimTableFactory23.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = slimTableFactory23.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap27 = slimTableFactory26.tableTypeArrays;
        slimTableFactory16.tableTypeArrays = strMap27;
        slimTableFactory9.tableTypeArrays = strMap27;
        slimTableFactory0.tableTypeArrays = strMap27;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory31 = slimTableFactory0.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass33 = slimTableFactory31.getTableType("hi!");
        java.lang.String str35 = slimTableFactory31.getFullTableName("hi!");
        fitnesse.testsystems.slim.Table table36 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext38 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable39 = slimTableFactory31.makeSlimTable(table36, "", slimTestContext38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNull(wildcardClass25);
        org.junit.Assert.assertNotNull(slimTableFactory26);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(slimTableFactory31);
        org.junit.Assert.assertNull(wildcardClass33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
    }

    @Test
    public void test06711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06711");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass5 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass8 = slimTableFactory6.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory6.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory9.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory11.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap13 = slimTableFactory11.tableTypeArrays;
        slimTableFactory9.tableTypeArrays = strMap13;
        slimTableFactory0.tableTypeArrays = strMap13;
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory0.tableTypeArrays;
        boolean boolean18 = slimTableFactory0.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass22 = slimTableFactory20.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = slimTableFactory20.copy();
        boolean boolean25 = slimTableFactory20.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap26 = slimTableFactory20.tableTypeArrays;
        slimTableFactory19.tableTypeArrays = strMap26;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory29 = slimTableFactory28.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap30 = slimTableFactory29.tableTypes;
        boolean boolean32 = slimTableFactory29.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap33 = slimTableFactory29.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap34 = slimTableFactory29.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap35 = slimTableFactory29.tableTypeArrays;
        slimTableFactory19.tableTypeArrays = strMap35;
        slimTableFactory0.tableTypeArrays = strMap35;
        fitnesse.testsystems.slim.Table table38 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable39 = slimTableFactory0.parseDefineTableTypeTable(table38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(wildcardClass22);
        org.junit.Assert.assertNotNull(slimTableFactory23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(slimTableFactory29);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNotNull(strMap35);
    }

    @Test
    public void test06712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06712");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        boolean boolean6 = slimTableFactory1.hasColon("hi!");
        boolean boolean8 = slimTableFactory1.hasColon("");
        java.lang.String str10 = slimTableFactory1.getFullTableName("");
        boolean boolean12 = slimTableFactory1.hasColon("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory1.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory15.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap17 = slimTableFactory16.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass20 = slimTableFactory18.getTableType("");
        boolean boolean22 = slimTableFactory18.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap23 = slimTableFactory18.tableTypeArrays;
        slimTableFactory16.tableTypeArrays = strMap23;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = slimTableFactory25.copy();
        boolean boolean28 = slimTableFactory26.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory29 = slimTableFactory26.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory30 = slimTableFactory26.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory31 = slimTableFactory30.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory32 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass34 = slimTableFactory32.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory35 = slimTableFactory32.copy();
        boolean boolean37 = slimTableFactory32.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap38 = slimTableFactory32.tableTypeArrays;
        slimTableFactory30.tableTypeArrays = strMap38;
        java.util.Map<java.lang.String, java.lang.String> strMap40 = slimTableFactory30.tableTypeArrays;
        slimTableFactory16.tableTypeArrays = strMap40;
        slimTableFactory1.tableTypeArrays = strMap40;
        boolean boolean44 = slimTableFactory1.hasColon("");
        boolean boolean46 = slimTableFactory1.hasColon("hi!");
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(slimTableFactory26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(slimTableFactory29);
        org.junit.Assert.assertNotNull(slimTableFactory30);
        org.junit.Assert.assertNotNull(slimTableFactory31);
        org.junit.Assert.assertNull(wildcardClass34);
        org.junit.Assert.assertNotNull(slimTableFactory35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test06713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06713");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass4 = slimTableFactory1.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap5 = slimTableFactory1.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory1.getTableType("hi!");
        java.lang.String str9 = slimTableFactory1.getFullTableName("");
        fitnesse.testsystems.slim.Table table10 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable11 = slimTableFactory1.parseDefineTableTypeTable(table10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test06714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06714");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap5 = slimTableFactory0.tableTypeArrays;
        boolean boolean7 = slimTableFactory0.hasColon("");
        java.lang.String str9 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory0.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass12 = slimTableFactory10.getTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory10.getTableType("hi!");
        boolean boolean16 = slimTableFactory10.hasColon("");
        java.lang.String str18 = slimTableFactory10.getFullTableName("");
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
    }

    @Test
    public void test06715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06715");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass4 = slimTableFactory1.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap5 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory6.copy();
        java.lang.String str9 = slimTableFactory7.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap10 = slimTableFactory7.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass13 = slimTableFactory11.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory11.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap15 = slimTableFactory14.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory14.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory17.copy();
        boolean boolean20 = slimTableFactory18.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = slimTableFactory18.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = slimTableFactory18.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = slimTableFactory18.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap24 = slimTableFactory18.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = slimTableFactory25.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap27 = slimTableFactory25.tableTypeArrays;
        slimTableFactory18.tableTypeArrays = strMap27;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory29 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass31 = slimTableFactory29.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory32 = slimTableFactory29.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = slimTableFactory32.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap34 = slimTableFactory32.tableTypeArrays;
        slimTableFactory18.tableTypeArrays = strMap34;
        slimTableFactory16.tableTypeArrays = strMap34;
        slimTableFactory7.tableTypeArrays = strMap34;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory38 = slimTableFactory7.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass40 = slimTableFactory7.getTableType("");
        java.lang.String str42 = slimTableFactory7.getFullTableName("hi!");
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertNotNull(slimTableFactory18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(slimTableFactory21);
        org.junit.Assert.assertNotNull(slimTableFactory22);
        org.junit.Assert.assertNotNull(slimTableFactory23);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNotNull(slimTableFactory26);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNotNull(slimTableFactory32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNotNull(slimTableFactory38);
        org.junit.Assert.assertNull(wildcardClass40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "hi!" + "'", str42, "hi!");
    }

    @Test
    public void test06716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06716");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap5 = slimTableFactory0.tableTypeArrays;
        boolean boolean7 = slimTableFactory0.hasColon("");
        java.lang.String str9 = slimTableFactory0.makeTableType("");
        java.lang.String str11 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass17 = slimTableFactory15.getTableType("");
        boolean boolean19 = slimTableFactory15.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap20 = slimTableFactory15.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap20;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = slimTableFactory0.copy();
        java.lang.String str24 = slimTableFactory22.makeTableType("hi!");
        java.lang.String str26 = slimTableFactory22.getFullTableName("hi!");
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertNotNull(slimTableFactory13);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNull(wildcardClass17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(slimTableFactory22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
    }

    @Test
    public void test06717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06717");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        boolean boolean5 = slimTableFactory0.hasColon("");
        java.lang.String str7 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory0.copy();
        java.lang.String str11 = slimTableFactory9.getFullTableName("hi!");
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
    }

    @Test
    public void test06718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06718");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory1.tableTypeArrays;
        java.lang.String str6 = slimTableFactory1.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory1.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass10 = slimTableFactory1.getTableType("hi!");
        java.lang.String str12 = slimTableFactory1.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory1.copy();
        boolean boolean15 = slimTableFactory1.hasColon("");
        java.lang.String str17 = slimTableFactory1.getFullTableName("");
        java.lang.Class<?> wildcardClass18 = slimTableFactory1.getClass();
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test06719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06719");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        boolean boolean5 = slimTableFactory0.hasColon("");
        java.lang.String str7 = slimTableFactory0.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory0.copy();
        java.lang.String str11 = slimTableFactory0.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory12.copy();
        boolean boolean15 = slimTableFactory13.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory13.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = slimTableFactory13.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory17.copy();
        boolean boolean20 = slimTableFactory17.hasColon("");
        boolean boolean22 = slimTableFactory17.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass24 = slimTableFactory17.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = slimTableFactory25.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap27 = slimTableFactory26.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass30 = slimTableFactory28.getTableType("");
        boolean boolean32 = slimTableFactory28.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap33 = slimTableFactory28.tableTypeArrays;
        slimTableFactory26.tableTypeArrays = strMap33;
        java.lang.String str36 = slimTableFactory26.makeTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass38 = slimTableFactory26.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory39 = slimTableFactory26.copy();
        java.lang.String str41 = slimTableFactory26.getFullTableName("");
        java.lang.String str43 = slimTableFactory26.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap44 = slimTableFactory26.tableTypeArrays;
        slimTableFactory17.tableTypeArrays = strMap44;
        slimTableFactory0.tableTypeArrays = strMap44;
        fitnesse.testsystems.slim.Table table47 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable48 = slimTableFactory0.parseDefineTableTypeTable(table47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertNotNull(slimTableFactory17);
        org.junit.Assert.assertNotNull(slimTableFactory18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(wildcardClass24);
        org.junit.Assert.assertNotNull(slimTableFactory26);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNull(wildcardClass30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNull(wildcardClass38);
        org.junit.Assert.assertNotNull(slimTableFactory39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(strMap44);
    }

    @Test
    public void test06720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06720");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory0.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap9 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory10.copy();
        boolean boolean13 = slimTableFactory11.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory11.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory11.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass17 = slimTableFactory15.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap18 = slimTableFactory15.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass21 = slimTableFactory19.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap22 = slimTableFactory19.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = slimTableFactory19.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap24 = slimTableFactory19.tableTypeArrays;
        slimTableFactory15.tableTypeArrays = strMap24;
        slimTableFactory0.tableTypeArrays = strMap24;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = slimTableFactory27.copy();
        boolean boolean30 = slimTableFactory28.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory31 = slimTableFactory28.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory32 = slimTableFactory28.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory33 = slimTableFactory32.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap34 = slimTableFactory32.tableTypes;
        java.lang.String str36 = slimTableFactory32.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap37 = slimTableFactory32.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap37;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass40 = slimTableFactory0.getTableType("hi!");
        fitnesse.testsystems.slim.Table table41 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable42 = slimTableFactory0.parseDefineTableTypeTable(table41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertNull(wildcardClass17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNull(wildcardClass21);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(slimTableFactory23);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNotNull(slimTableFactory28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(slimTableFactory31);
        org.junit.Assert.assertNotNull(slimTableFactory32);
        org.junit.Assert.assertNotNull(slimTableFactory33);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNull(wildcardClass40);
    }

    @Test
    public void test06721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06721");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass5 = slimTableFactory3.getTableType("");
        boolean boolean7 = slimTableFactory3.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory3.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap8;
        java.lang.String str11 = slimTableFactory1.makeTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass13 = slimTableFactory1.getTableType("");
        java.lang.String str15 = slimTableFactory1.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory1.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass18 = slimTableFactory16.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap19 = slimTableFactory16.tableTypes;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap20 = slimTableFactory16.tableTypes;
        boolean boolean22 = slimTableFactory16.hasColon("");
        java.lang.String str24 = slimTableFactory16.getFullTableName("hi!");
        boolean boolean26 = slimTableFactory16.hasColon("");
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test06722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06722");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap4 = slimTableFactory3.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory5.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory5.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory9.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap11 = slimTableFactory10.tableTypes;
        boolean boolean13 = slimTableFactory10.hasColon("");
        boolean boolean15 = slimTableFactory10.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap16 = slimTableFactory10.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass19 = slimTableFactory17.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory17.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap21 = slimTableFactory20.tableTypeArrays;
        slimTableFactory10.tableTypeArrays = strMap21;
        slimTableFactory5.tableTypeArrays = strMap21;
        slimTableFactory3.tableTypeArrays = strMap21;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap25 = slimTableFactory3.tableTypes;
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(slimTableFactory20);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(strMap25);
    }

    @Test
    public void test06723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06723");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory5.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory5.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        boolean boolean11 = slimTableFactory9.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory9.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory9.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory13.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory15.copy();
        boolean boolean18 = slimTableFactory16.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap19 = slimTableFactory16.tableTypeArrays;
        slimTableFactory14.tableTypeArrays = strMap19;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = slimTableFactory21.copy();
        boolean boolean24 = slimTableFactory22.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap25 = slimTableFactory22.tableTypeArrays;
        java.lang.String str27 = slimTableFactory22.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory29 = slimTableFactory28.copy();
        boolean boolean31 = slimTableFactory29.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap32 = slimTableFactory29.tableTypeArrays;
        java.lang.String str34 = slimTableFactory29.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap35 = slimTableFactory29.tableTypeArrays;
        slimTableFactory22.tableTypeArrays = strMap35;
        java.util.Map<java.lang.String, java.lang.String> strMap37 = slimTableFactory22.tableTypeArrays;
        slimTableFactory14.tableTypeArrays = strMap37;
        slimTableFactory7.tableTypeArrays = strMap37;
        java.util.Map<java.lang.String, java.lang.String> strMap40 = slimTableFactory7.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap41 = slimTableFactory7.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory42 = slimTableFactory7.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap43 = slimTableFactory42.tableTypeArrays;
        boolean boolean45 = slimTableFactory42.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory46 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory47 = slimTableFactory46.copy();
        boolean boolean49 = slimTableFactory47.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory50 = slimTableFactory47.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap51 = slimTableFactory47.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass53 = slimTableFactory47.getTableType("");
        boolean boolean55 = slimTableFactory47.hasColon("");
        java.lang.String str57 = slimTableFactory47.makeTableType("");
        java.lang.String str59 = slimTableFactory47.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory60 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory61 = slimTableFactory60.copy();
        boolean boolean63 = slimTableFactory61.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory64 = slimTableFactory61.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap65 = slimTableFactory61.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory66 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory67 = slimTableFactory66.copy();
        boolean boolean69 = slimTableFactory67.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory70 = slimTableFactory67.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory71 = slimTableFactory67.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory72 = slimTableFactory67.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap73 = slimTableFactory72.tableTypeArrays;
        slimTableFactory61.tableTypeArrays = strMap73;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory75 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory76 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass78 = slimTableFactory76.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory79 = slimTableFactory76.copy();
        boolean boolean81 = slimTableFactory76.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap82 = slimTableFactory76.tableTypeArrays;
        slimTableFactory75.tableTypeArrays = strMap82;
        slimTableFactory61.tableTypeArrays = strMap82;
        slimTableFactory47.tableTypeArrays = strMap82;
        slimTableFactory42.tableTypeArrays = strMap82;
        java.lang.Class<?> wildcardClass87 = strMap82.getClass();
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertNotNull(slimTableFactory13);
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(slimTableFactory22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(slimTableFactory29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertNotNull(slimTableFactory42);
        org.junit.Assert.assertNotNull(strMap43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(slimTableFactory47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(slimTableFactory50);
        org.junit.Assert.assertNotNull(strMap51);
        org.junit.Assert.assertNull(wildcardClass53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "hi!" + "'", str59, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(slimTableFactory64);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(slimTableFactory67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(slimTableFactory70);
        org.junit.Assert.assertNotNull(slimTableFactory71);
        org.junit.Assert.assertNotNull(slimTableFactory72);
        org.junit.Assert.assertNotNull(strMap73);
        org.junit.Assert.assertNull(wildcardClass78);
        org.junit.Assert.assertNotNull(slimTableFactory79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(strMap82);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test06724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06724");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory1.tableTypeArrays;
        java.lang.String str6 = slimTableFactory1.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        boolean boolean11 = slimTableFactory9.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory9.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap13 = slimTableFactory9.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass16 = slimTableFactory14.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap17 = slimTableFactory14.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass19 = slimTableFactory14.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass22 = slimTableFactory20.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = slimTableFactory20.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = slimTableFactory23.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = slimTableFactory25.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap27 = slimTableFactory25.tableTypeArrays;
        slimTableFactory23.tableTypeArrays = strMap27;
        slimTableFactory14.tableTypeArrays = strMap27;
        slimTableFactory9.tableTypeArrays = strMap27;
        slimTableFactory1.tableTypeArrays = strMap27;
        java.lang.String str33 = slimTableFactory1.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap34 = slimTableFactory1.tableTypes;
        java.lang.String str36 = slimTableFactory1.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory37 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap38 = slimTableFactory37.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap39 = slimTableFactory37.tableTypeArrays;
        java.lang.String str41 = slimTableFactory37.getFullTableName("");
        java.lang.Class<?> wildcardClass42 = slimTableFactory37.getClass();
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNull(wildcardClass16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNull(wildcardClass22);
        org.junit.Assert.assertNotNull(slimTableFactory23);
        org.junit.Assert.assertNotNull(slimTableFactory24);
        org.junit.Assert.assertNotNull(slimTableFactory26);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(slimTableFactory37);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test06725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06725");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory3.copy();
        java.lang.String str6 = slimTableFactory3.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory7.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap9 = null;
        slimTableFactory7.tableTypeArrays = strMap9;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass12 = slimTableFactory7.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory13.copy();
        boolean boolean16 = slimTableFactory14.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = slimTableFactory14.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory14.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass21 = slimTableFactory19.getTableType("");
        boolean boolean23 = slimTableFactory19.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap24 = slimTableFactory19.tableTypeArrays;
        slimTableFactory18.tableTypeArrays = strMap24;
        slimTableFactory7.tableTypeArrays = strMap24;
        slimTableFactory3.tableTypeArrays = strMap24;
        java.lang.String str29 = slimTableFactory3.makeTableType("hi!");
        java.lang.String str31 = slimTableFactory3.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory32 = slimTableFactory3.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = slimTableFactory3.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap34 = slimTableFactory3.tableTypeArrays;
        fitnesse.testsystems.slim.Table table35 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable36 = slimTableFactory3.parseDefineTableTypeTable(table35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(slimTableFactory17);
        org.junit.Assert.assertNotNull(slimTableFactory18);
        org.junit.Assert.assertNull(wildcardClass21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(strMap34);
    }

    @Test
    public void test06726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06726");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap5 = slimTableFactory1.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory1.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory1.copy();
        boolean boolean11 = slimTableFactory1.hasColon("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass13 = slimTableFactory1.getTableType("");
        java.lang.String str15 = slimTableFactory1.makeTableType("");
        fitnesse.testsystems.slim.Table table16 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory1.parseDefineTableTypeRow(table16, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test06727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06727");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory0.getTableType("hi!");
        java.lang.String str9 = slimTableFactory0.getFullTableName("");
        java.lang.String str11 = slimTableFactory0.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap13 = slimTableFactory12.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory12.copy();
        java.lang.String str16 = slimTableFactory14.makeTableType("");
        boolean boolean18 = slimTableFactory14.hasColon("");
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test06728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06728");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        boolean boolean6 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass10 = slimTableFactory8.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory8.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap12 = slimTableFactory11.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap12;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory1.copy();
        boolean boolean16 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap17 = slimTableFactory1.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass19 = slimTableFactory1.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = slimTableFactory20.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap22 = slimTableFactory21.tableTypes;
        boolean boolean24 = slimTableFactory21.hasColon("");
        boolean boolean26 = slimTableFactory21.hasColon("hi!");
        boolean boolean28 = slimTableFactory21.hasColon("");
        java.lang.String str30 = slimTableFactory21.getFullTableName("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass32 = slimTableFactory21.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap33 = slimTableFactory21.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap33;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap35 = slimTableFactory1.tableTypes;
        java.lang.String str37 = slimTableFactory1.getFullTableName("hi!");
        fitnesse.testsystems.slim.Table table38 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable39 = slimTableFactory1.parseDefineTableTypeTable(table38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(slimTableFactory21);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNull(wildcardClass32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
    }

    @Test
    public void test06729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06729");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory3.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory6.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass10 = slimTableFactory8.getTableType("");
        boolean boolean12 = slimTableFactory8.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap13 = slimTableFactory8.tableTypeArrays;
        slimTableFactory6.tableTypeArrays = strMap13;
        slimTableFactory3.tableTypeArrays = strMap13;
        java.lang.String str17 = slimTableFactory3.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory3.copy();
        fitnesse.testsystems.slim.Table table19 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext21 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable22 = slimTableFactory18.makeSlimTable(table19, "hi!", slimTestContext21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory18);
    }

    @Test
    public void test06730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06730");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        boolean boolean5 = slimTableFactory0.hasColon("");
        java.lang.String str7 = slimTableFactory0.makeTableType("");
        java.lang.String str9 = slimTableFactory0.makeTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass11 = slimTableFactory0.getTableType("hi!");
        boolean boolean13 = slimTableFactory0.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap14 = slimTableFactory0.tableTypes;
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strMap14);
    }

    @Test
    public void test06731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06731");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap4 = slimTableFactory3.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory5.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory6.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass10 = slimTableFactory8.getTableType("");
        boolean boolean12 = slimTableFactory8.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap13 = slimTableFactory8.tableTypeArrays;
        slimTableFactory6.tableTypeArrays = strMap13;
        slimTableFactory3.tableTypeArrays = strMap13;
        java.lang.String str17 = slimTableFactory3.getFullTableName("hi!");
        java.lang.String str19 = slimTableFactory3.makeTableType("");
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
    }

    @Test
    public void test06732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06732");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory0.copy();
        boolean boolean9 = slimTableFactory0.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory11.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap13 = slimTableFactory12.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass15 = slimTableFactory12.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory12.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = slimTableFactory12.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory17.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap19 = slimTableFactory18.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap19;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.Table table22 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext24 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable25 = slimTableFactory21.makeSlimTable(table22, "hi!", slimTestContext24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(slimTableFactory17);
        org.junit.Assert.assertNotNull(slimTableFactory18);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(slimTableFactory21);
    }

    @Test
    public void test06733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06733");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory0.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap10 = slimTableFactory9.tableTypes;
        boolean boolean12 = slimTableFactory9.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap13 = slimTableFactory9.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory9.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory15.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap17 = slimTableFactory16.tableTypes;
        boolean boolean19 = slimTableFactory16.hasColon("");
        boolean boolean21 = slimTableFactory16.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap22 = slimTableFactory16.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass25 = slimTableFactory23.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = slimTableFactory23.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap27 = slimTableFactory26.tableTypeArrays;
        slimTableFactory16.tableTypeArrays = strMap27;
        slimTableFactory9.tableTypeArrays = strMap27;
        slimTableFactory0.tableTypeArrays = strMap27;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory31 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap32 = slimTableFactory31.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass34 = slimTableFactory31.getTableType("");
        java.lang.String str36 = slimTableFactory31.getFullTableName("hi!");
        java.lang.String str38 = slimTableFactory31.getFullTableName("hi!");
        boolean boolean40 = slimTableFactory31.hasColon("hi!");
        fitnesse.testsystems.slim.Table table41 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable42 = slimTableFactory31.parseDefineTableTypeTable(table41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNull(wildcardClass25);
        org.junit.Assert.assertNotNull(slimTableFactory26);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(slimTableFactory31);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNull(wildcardClass34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test06734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06734");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass4 = slimTableFactory1.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap5 = slimTableFactory1.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory1.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap8 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory1.copy();
        boolean boolean11 = slimTableFactory1.hasColon("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass13 = slimTableFactory1.getTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass15 = slimTableFactory1.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory1.tableTypeArrays;
        java.lang.Class<?> wildcardClass17 = slimTableFactory1.getClass();
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test06735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06735");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        boolean boolean4 = slimTableFactory0.hasColon("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass6 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory7.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory7.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory7.copy();
        fitnesse.testsystems.slim.Table table11 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext13 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable14 = slimTableFactory7.makeSlimTable(table11, "hi!", slimTestContext13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(slimTableFactory10);
    }

    @Test
    public void test06736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06736");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        boolean boolean5 = slimTableFactory0.hasColon("");
        java.lang.String str7 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory8.tableTypeArrays;
        java.lang.String str12 = slimTableFactory8.getFullTableName("hi!");
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
    }

    @Test
    public void test06737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06737");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory5.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass9 = slimTableFactory7.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory7.copy();
        boolean boolean12 = slimTableFactory7.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap13 = slimTableFactory7.tableTypeArrays;
        slimTableFactory5.tableTypeArrays = strMap13;
        java.util.Map<java.lang.String, java.lang.String> strMap15 = slimTableFactory5.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass18 = slimTableFactory16.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory16.copy();
        boolean boolean21 = slimTableFactory16.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = slimTableFactory22.copy();
        boolean boolean25 = slimTableFactory23.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = slimTableFactory23.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = slimTableFactory23.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = slimTableFactory27.copy();
        boolean boolean30 = slimTableFactory27.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap31 = slimTableFactory27.tableTypeArrays;
        slimTableFactory16.tableTypeArrays = strMap31;
        slimTableFactory5.tableTypeArrays = strMap31;
        java.lang.Class<?> wildcardClass34 = strMap31.getClass();
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertNotNull(slimTableFactory19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(slimTableFactory23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(slimTableFactory26);
        org.junit.Assert.assertNotNull(slimTableFactory27);
        org.junit.Assert.assertNotNull(slimTableFactory28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test06738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06738");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory5.copy();
        boolean boolean8 = slimTableFactory5.hasColon("");
        boolean boolean10 = slimTableFactory5.hasColon("hi!");
        boolean boolean12 = slimTableFactory5.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap13 = slimTableFactory5.tableTypes;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap14 = slimTableFactory5.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass17 = slimTableFactory15.getTableType("");
        boolean boolean19 = slimTableFactory15.hasColon("");
        java.lang.String str21 = slimTableFactory15.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap22 = slimTableFactory15.tableTypeArrays;
        slimTableFactory5.tableTypeArrays = strMap22;
        java.lang.String str25 = slimTableFactory5.getFullTableName("hi!");
        java.lang.String str27 = slimTableFactory5.getFullTableName("hi!");
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNull(wildcardClass17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
    }

    @Test
    public void test06739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06739");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap5 = slimTableFactory0.tableTypeArrays;
        boolean boolean7 = slimTableFactory0.hasColon("");
        java.lang.String str9 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass13 = slimTableFactory11.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory11.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory11.copy();
        boolean boolean17 = slimTableFactory15.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass20 = slimTableFactory18.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap21 = slimTableFactory18.tableTypeArrays;
        boolean boolean23 = slimTableFactory18.hasColon("");
        java.lang.String str25 = slimTableFactory18.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap26 = slimTableFactory18.tableTypeArrays;
        slimTableFactory15.tableTypeArrays = strMap26;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory29 = slimTableFactory28.copy();
        boolean boolean31 = slimTableFactory29.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory32 = slimTableFactory29.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = slimTableFactory29.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass35 = slimTableFactory29.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap36 = slimTableFactory29.tableTypeArrays;
        slimTableFactory15.tableTypeArrays = strMap36;
        slimTableFactory10.tableTypeArrays = strMap36;
        java.util.Map<java.lang.String, java.lang.String> strMap39 = slimTableFactory10.tableTypeArrays;
        fitnesse.testsystems.slim.Table table40 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext42 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable43 = slimTableFactory10.makeSlimTable(table40, "hi!", slimTestContext42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(wildcardClass20);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(slimTableFactory29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(slimTableFactory32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(wildcardClass35);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(strMap39);
    }

    @Test
    public void test06740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06740");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory0.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap10 = slimTableFactory9.tableTypes;
        boolean boolean12 = slimTableFactory9.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap13 = slimTableFactory9.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory9.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory15.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap17 = slimTableFactory16.tableTypes;
        boolean boolean19 = slimTableFactory16.hasColon("");
        boolean boolean21 = slimTableFactory16.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap22 = slimTableFactory16.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass25 = slimTableFactory23.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = slimTableFactory23.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap27 = slimTableFactory26.tableTypeArrays;
        slimTableFactory16.tableTypeArrays = strMap27;
        slimTableFactory9.tableTypeArrays = strMap27;
        slimTableFactory0.tableTypeArrays = strMap27;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory31 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap32 = slimTableFactory31.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass34 = slimTableFactory31.getTableType("");
        java.lang.String str36 = slimTableFactory31.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory37 = slimTableFactory31.copy();
        java.lang.String str39 = slimTableFactory37.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap40 = slimTableFactory37.tableTypes;
        fitnesse.testsystems.slim.Table table41 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable42 = slimTableFactory37.parseDefineTableTypeTable(table41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNull(wildcardClass25);
        org.junit.Assert.assertNotNull(slimTableFactory26);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(slimTableFactory31);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNull(wildcardClass34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(strMap40);
    }

    @Test
    public void test06741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06741");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory0.getTableType("hi!");
        java.lang.String str9 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass12 = slimTableFactory10.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory10.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory14.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap16 = slimTableFactory15.tableTypes;
        boolean boolean18 = slimTableFactory15.hasColon("");
        boolean boolean20 = slimTableFactory15.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap21 = slimTableFactory15.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass24 = slimTableFactory22.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = slimTableFactory22.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap26 = slimTableFactory25.tableTypeArrays;
        slimTableFactory15.tableTypeArrays = strMap26;
        slimTableFactory10.tableTypeArrays = strMap26;
        slimTableFactory0.tableTypeArrays = strMap26;
        java.lang.Class<?> wildcardClass30 = slimTableFactory0.getClass();
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNotNull(slimTableFactory13);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNull(wildcardClass24);
        org.junit.Assert.assertNotNull(slimTableFactory25);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test06742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06742");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        boolean boolean6 = slimTableFactory1.hasColon("hi!");
        boolean boolean8 = slimTableFactory1.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory1.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass11 = slimTableFactory9.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory9.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap13 = slimTableFactory9.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory9.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap15 = slimTableFactory9.tableTypes;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap16 = slimTableFactory9.tableTypes;
        java.lang.Class<?> wildcardClass17 = slimTableFactory9.getClass();
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test06743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06743");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory0.getTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass9 = slimTableFactory0.getTableType("");
        java.lang.String str11 = slimTableFactory0.getFullTableName("");
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test06744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06744");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory5.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory5.tableTypes;
        java.lang.String str9 = slimTableFactory5.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory5.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory5.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory5.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap13 = slimTableFactory5.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory5.tableTypeArrays;
        java.lang.String str16 = slimTableFactory5.getFullTableName("hi!");
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
    }

    @Test
    public void test06745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06745");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory1.tableTypeArrays;
        java.lang.String str6 = slimTableFactory1.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        boolean boolean11 = slimTableFactory9.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory9.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap13 = slimTableFactory9.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass16 = slimTableFactory14.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap17 = slimTableFactory14.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass19 = slimTableFactory14.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass22 = slimTableFactory20.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = slimTableFactory20.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = slimTableFactory23.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = slimTableFactory25.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap27 = slimTableFactory25.tableTypeArrays;
        slimTableFactory23.tableTypeArrays = strMap27;
        slimTableFactory14.tableTypeArrays = strMap27;
        slimTableFactory9.tableTypeArrays = strMap27;
        slimTableFactory1.tableTypeArrays = strMap27;
        java.lang.String str33 = slimTableFactory1.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap34 = slimTableFactory1.tableTypes;
        java.lang.String str36 = slimTableFactory1.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory37 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap38 = slimTableFactory37.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap39 = slimTableFactory37.tableTypeArrays;
        java.lang.String str41 = slimTableFactory37.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory42 = slimTableFactory37.copy();
        fitnesse.testsystems.slim.Table table43 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory37.parseDefineTableTypeRow(table43, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNull(wildcardClass16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNull(wildcardClass22);
        org.junit.Assert.assertNotNull(slimTableFactory23);
        org.junit.Assert.assertNotNull(slimTableFactory24);
        org.junit.Assert.assertNotNull(slimTableFactory26);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(slimTableFactory37);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(slimTableFactory42);
    }

    @Test
    public void test06746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06746");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory1.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap5 = slimTableFactory1.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap6 = slimTableFactory1.tableTypes;
        java.lang.String str8 = slimTableFactory1.makeTableType("hi!");
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
    }

    @Test
    public void test06747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06747");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap5 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory6.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory7.copy();
        java.lang.String str10 = slimTableFactory8.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory8.copy();
        fitnesse.testsystems.slim.Table table12 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext14 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable15 = slimTableFactory11.makeSlimTable(table12, "hi!", slimTestContext14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(slimTableFactory11);
    }

    @Test
    public void test06748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06748");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory5.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass9 = slimTableFactory7.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory7.copy();
        boolean boolean12 = slimTableFactory7.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap13 = slimTableFactory7.tableTypeArrays;
        slimTableFactory5.tableTypeArrays = strMap13;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory5.copy();
        java.lang.String str17 = slimTableFactory5.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory5.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory19.copy();
        boolean boolean22 = slimTableFactory20.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = slimTableFactory20.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = slimTableFactory20.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = slimTableFactory20.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap26 = slimTableFactory25.tableTypeArrays;
        slimTableFactory18.tableTypeArrays = strMap26;
        boolean boolean29 = slimTableFactory18.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory30 = slimTableFactory18.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap31 = slimTableFactory30.tableTypeArrays;
        java.lang.Class<?> wildcardClass32 = strMap31.getClass();
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(slimTableFactory18);
        org.junit.Assert.assertNotNull(slimTableFactory20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(slimTableFactory23);
        org.junit.Assert.assertNotNull(slimTableFactory24);
        org.junit.Assert.assertNotNull(slimTableFactory25);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(slimTableFactory30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test06749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06749");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        boolean boolean5 = slimTableFactory0.hasColon("");
        java.lang.String str7 = slimTableFactory0.makeTableType("");
        java.lang.String str9 = slimTableFactory0.makeTableType("");
        java.lang.String str11 = slimTableFactory0.makeTableType("");
        java.lang.String str13 = slimTableFactory0.getFullTableName("");
        java.lang.String str15 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = slimTableFactory16.copy();
        boolean boolean19 = slimTableFactory17.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap20 = slimTableFactory17.tableTypeArrays;
        java.lang.String str22 = slimTableFactory17.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = slimTableFactory23.copy();
        boolean boolean26 = slimTableFactory24.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap27 = slimTableFactory24.tableTypeArrays;
        java.lang.String str29 = slimTableFactory24.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap30 = slimTableFactory24.tableTypeArrays;
        slimTableFactory17.tableTypeArrays = strMap30;
        slimTableFactory0.tableTypeArrays = strMap30;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass34 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap35 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory36 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory37 = slimTableFactory36.copy();
        fitnesse.testsystems.slim.Table table38 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable39 = slimTableFactory36.parseDefineTableTypeTable(table38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(slimTableFactory17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(slimTableFactory24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNull(wildcardClass34);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(slimTableFactory36);
        org.junit.Assert.assertNotNull(slimTableFactory37);
    }

    @Test
    public void test06750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06750");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory0.getTableType("hi!");
        java.lang.String str9 = slimTableFactory0.getFullTableName("");
        java.lang.String str11 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory12.copy();
        boolean boolean15 = slimTableFactory13.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory13.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap17 = slimTableFactory13.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory18.copy();
        boolean boolean21 = slimTableFactory19.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = slimTableFactory19.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = slimTableFactory19.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = slimTableFactory19.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap25 = slimTableFactory24.tableTypeArrays;
        slimTableFactory13.tableTypeArrays = strMap25;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass30 = slimTableFactory28.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory31 = slimTableFactory28.copy();
        boolean boolean33 = slimTableFactory28.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap34 = slimTableFactory28.tableTypeArrays;
        slimTableFactory27.tableTypeArrays = strMap34;
        slimTableFactory13.tableTypeArrays = strMap34;
        slimTableFactory0.tableTypeArrays = strMap34;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass39 = slimTableFactory0.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap40 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.Table table41 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory0.parseDefineTableTypeRow(table41, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(slimTableFactory13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(slimTableFactory19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(slimTableFactory22);
        org.junit.Assert.assertNotNull(slimTableFactory23);
        org.junit.Assert.assertNotNull(slimTableFactory24);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNull(wildcardClass30);
        org.junit.Assert.assertNotNull(slimTableFactory31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNull(wildcardClass39);
        org.junit.Assert.assertNotNull(strMap40);
    }

    @Test
    public void test06751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06751");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory3.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory3.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass8 = slimTableFactory6.getTableType("");
        boolean boolean10 = slimTableFactory6.hasColon("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass12 = slimTableFactory6.getTableType("");
        java.lang.String str14 = slimTableFactory6.getFullTableName("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass16 = slimTableFactory6.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass19 = slimTableFactory17.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory17.copy();
        boolean boolean22 = slimTableFactory17.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass24 = slimTableFactory17.getTableType("hi!");
        java.lang.String str26 = slimTableFactory17.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = slimTableFactory17.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass29 = slimTableFactory17.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory30 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory31 = slimTableFactory30.copy();
        boolean boolean33 = slimTableFactory31.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory34 = slimTableFactory31.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory35 = slimTableFactory31.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory36 = slimTableFactory31.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = slimTableFactory36.tableTypeArrays;
        slimTableFactory17.tableTypeArrays = strMap37;
        slimTableFactory6.tableTypeArrays = strMap37;
        slimTableFactory3.tableTypeArrays = strMap37;
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertNull(wildcardClass16);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(slimTableFactory20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(wildcardClass24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(slimTableFactory27);
        org.junit.Assert.assertNull(wildcardClass29);
        org.junit.Assert.assertNotNull(slimTableFactory31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(slimTableFactory34);
        org.junit.Assert.assertNotNull(slimTableFactory35);
        org.junit.Assert.assertNotNull(slimTableFactory36);
        org.junit.Assert.assertNotNull(strMap37);
    }

    @Test
    public void test06752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06752");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        boolean boolean5 = slimTableFactory0.hasColon("");
        java.lang.String str7 = slimTableFactory0.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory0.copy();
        java.lang.String str11 = slimTableFactory0.getFullTableName("hi!");
        java.lang.String str13 = slimTableFactory0.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory14.copy();
        boolean boolean17 = slimTableFactory15.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass19 = slimTableFactory15.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap20 = slimTableFactory15.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap20;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = slimTableFactory22.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap24 = slimTableFactory23.tableTypes;
        boolean boolean26 = slimTableFactory23.hasColon("");
        java.lang.String str28 = slimTableFactory23.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap29 = slimTableFactory23.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory30 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass32 = slimTableFactory30.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap33 = slimTableFactory30.tableTypeArrays;
        boolean boolean35 = slimTableFactory30.hasColon("");
        java.lang.String str37 = slimTableFactory30.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory38 = slimTableFactory30.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap39 = slimTableFactory30.tableTypes;
        boolean boolean41 = slimTableFactory30.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory42 = slimTableFactory30.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory43 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass45 = slimTableFactory43.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory46 = slimTableFactory43.copy();
        boolean boolean48 = slimTableFactory43.hasColon("hi!");
        java.lang.String str50 = slimTableFactory43.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap51 = slimTableFactory43.tableTypeArrays;
        slimTableFactory30.tableTypeArrays = strMap51;
        slimTableFactory23.tableTypeArrays = strMap51;
        slimTableFactory0.tableTypeArrays = strMap51;
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(slimTableFactory23);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNull(wildcardClass32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(slimTableFactory38);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(slimTableFactory42);
        org.junit.Assert.assertNull(wildcardClass45);
        org.junit.Assert.assertNotNull(slimTableFactory46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(strMap51);
    }

    @Test
    public void test06753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06753");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory5.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory6.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory6.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass10 = slimTableFactory6.getTableType("");
        java.lang.String str12 = slimTableFactory6.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory6.copy();
        java.lang.String str15 = slimTableFactory6.getFullTableName("hi!");
        java.lang.String str17 = slimTableFactory6.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory6.copy();
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(slimTableFactory13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory18);
    }

    @Test
    public void test06754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06754");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass3 = slimTableFactory1.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        boolean boolean6 = slimTableFactory1.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory1.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap7;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap9 = slimTableFactory0.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap11 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.Table table12 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory0.parseDefineTableTypeRow(table12, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strMap11);
    }

    @Test
    public void test06755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06755");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory0.getTableType("hi!");
        java.lang.String str9 = slimTableFactory0.getFullTableName("");
        java.lang.String str11 = slimTableFactory0.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory0.copy();
        boolean boolean14 = slimTableFactory12.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap15 = null;
        slimTableFactory12.tableTypeArrays = strMap15;
        java.lang.String str18 = slimTableFactory12.makeTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass20 = slimTableFactory12.getTableType("hi!");
        java.lang.String str22 = slimTableFactory12.makeTableType("");
        java.lang.Class<?> wildcardClass23 = slimTableFactory12.getClass();
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNull(wildcardClass20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test06756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06756");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory1.tableTypeArrays;
        java.lang.String str6 = slimTableFactory1.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory1.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass10 = slimTableFactory1.getTableType("hi!");
        java.lang.String str12 = slimTableFactory1.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap13 = slimTableFactory1.tableTypes;
        boolean boolean15 = slimTableFactory1.hasColon("");
        fitnesse.testsystems.slim.Table table16 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext18 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable19 = slimTableFactory1.makeSlimTable(table16, "hi!", slimTestContext18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test06757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06757");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap5 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory6.copy();
        boolean boolean9 = slimTableFactory7.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory7.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory7.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory11.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass15 = slimTableFactory13.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory13.copy();
        boolean boolean18 = slimTableFactory13.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap19 = slimTableFactory13.tableTypeArrays;
        slimTableFactory11.tableTypeArrays = strMap19;
        slimTableFactory0.tableTypeArrays = strMap19;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass23 = slimTableFactory0.getTableType("hi!");
        java.lang.String str25 = slimTableFactory0.makeTableType("hi!");
        java.lang.String str27 = slimTableFactory0.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.Table table29 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory28.parseDefineTableTypeRow(table29, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNull(wildcardClass23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory28);
    }

    @Test
    public void test06758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06758");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap5 = slimTableFactory1.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory9.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap11 = slimTableFactory10.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory12.getTableType("");
        boolean boolean16 = slimTableFactory12.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap17 = slimTableFactory12.tableTypeArrays;
        slimTableFactory10.tableTypeArrays = strMap17;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory19.copy();
        boolean boolean22 = slimTableFactory20.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = slimTableFactory20.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = slimTableFactory20.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = slimTableFactory24.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass28 = slimTableFactory26.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory29 = slimTableFactory26.copy();
        boolean boolean31 = slimTableFactory26.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap32 = slimTableFactory26.tableTypeArrays;
        slimTableFactory24.tableTypeArrays = strMap32;
        java.util.Map<java.lang.String, java.lang.String> strMap34 = slimTableFactory24.tableTypeArrays;
        slimTableFactory10.tableTypeArrays = strMap34;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory36 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory37 = slimTableFactory36.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap38 = slimTableFactory37.tableTypes;
        boolean boolean40 = slimTableFactory37.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap41 = slimTableFactory37.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap42 = slimTableFactory37.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory43 = slimTableFactory37.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap44 = slimTableFactory37.tableTypeArrays;
        slimTableFactory10.tableTypeArrays = strMap44;
        slimTableFactory1.tableTypeArrays = strMap44;
        java.util.Map<java.lang.String, java.lang.String> strMap47 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.Table table48 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory1.parseDefineTableTypeRow(table48, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(slimTableFactory20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(slimTableFactory23);
        org.junit.Assert.assertNotNull(slimTableFactory24);
        org.junit.Assert.assertNotNull(slimTableFactory25);
        org.junit.Assert.assertNull(wildcardClass28);
        org.junit.Assert.assertNotNull(slimTableFactory29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNotNull(slimTableFactory37);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertNotNull(strMap42);
        org.junit.Assert.assertNotNull(slimTableFactory43);
        org.junit.Assert.assertNotNull(strMap44);
        org.junit.Assert.assertNotNull(strMap47);
    }

    @Test
    public void test06759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06759");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory5.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass9 = slimTableFactory7.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory7.copy();
        boolean boolean12 = slimTableFactory7.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap13 = slimTableFactory7.tableTypeArrays;
        slimTableFactory5.tableTypeArrays = strMap13;
        java.util.Map<java.lang.String, java.lang.String> strMap15 = slimTableFactory5.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass18 = slimTableFactory16.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory16.copy();
        boolean boolean21 = slimTableFactory16.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = slimTableFactory22.copy();
        boolean boolean25 = slimTableFactory23.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = slimTableFactory23.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = slimTableFactory23.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = slimTableFactory27.copy();
        boolean boolean30 = slimTableFactory27.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap31 = slimTableFactory27.tableTypeArrays;
        slimTableFactory16.tableTypeArrays = strMap31;
        slimTableFactory5.tableTypeArrays = strMap31;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass35 = slimTableFactory5.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory36 = slimTableFactory5.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory37 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory38 = slimTableFactory37.copy();
        java.lang.String str40 = slimTableFactory37.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory41 = slimTableFactory37.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap42 = slimTableFactory37.tableTypeArrays;
        slimTableFactory36.tableTypeArrays = strMap42;
        java.lang.String str45 = slimTableFactory36.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory46 = slimTableFactory36.copy();
        java.lang.String str48 = slimTableFactory46.makeTableType("");
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertNotNull(slimTableFactory19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(slimTableFactory23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(slimTableFactory26);
        org.junit.Assert.assertNotNull(slimTableFactory27);
        org.junit.Assert.assertNotNull(slimTableFactory28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNull(wildcardClass35);
        org.junit.Assert.assertNotNull(slimTableFactory36);
        org.junit.Assert.assertNotNull(slimTableFactory38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "hi!" + "'", str40, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory41);
        org.junit.Assert.assertNotNull(strMap42);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory46);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
    }

    @Test
    public void test06760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06760");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass4 = slimTableFactory1.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap5 = slimTableFactory1.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap6 = slimTableFactory1.tableTypes;
        boolean boolean8 = slimTableFactory1.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap9 = slimTableFactory1.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory1.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass12 = slimTableFactory1.getTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory1.getTableType("");
        fitnesse.testsystems.slim.Table table15 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory1.parseDefineTableTypeRow(table15, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNull(wildcardClass14);
    }

    @Test
    public void test06761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06761");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        boolean boolean6 = slimTableFactory1.hasColon("hi!");
        boolean boolean8 = slimTableFactory1.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap10 = slimTableFactory9.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory9.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap12 = slimTableFactory11.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory11.copy();
        java.lang.String str15 = slimTableFactory11.makeTableType("");
        java.lang.String str17 = slimTableFactory11.getFullTableName("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass19 = slimTableFactory11.getTableType("hi!");
        java.lang.String str21 = slimTableFactory11.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = slimTableFactory11.copy();
        fitnesse.testsystems.slim.Table table23 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory22.parseDefineTableTypeRow(table23, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(slimTableFactory13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory22);
    }

    @Test
    public void test06762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06762");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory0.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap9 = slimTableFactory0.tableTypes;
        java.lang.String str11 = slimTableFactory0.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory12.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap14 = slimTableFactory13.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass17 = slimTableFactory15.getTableType("");
        boolean boolean19 = slimTableFactory15.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap20 = slimTableFactory15.tableTypeArrays;
        slimTableFactory13.tableTypeArrays = strMap20;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = slimTableFactory22.copy();
        boolean boolean25 = slimTableFactory23.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = slimTableFactory23.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = slimTableFactory23.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = slimTableFactory27.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory29 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass31 = slimTableFactory29.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory32 = slimTableFactory29.copy();
        boolean boolean34 = slimTableFactory29.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap35 = slimTableFactory29.tableTypeArrays;
        slimTableFactory27.tableTypeArrays = strMap35;
        java.util.Map<java.lang.String, java.lang.String> strMap37 = slimTableFactory27.tableTypeArrays;
        slimTableFactory13.tableTypeArrays = strMap37;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory39 = slimTableFactory13.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory40 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory41 = slimTableFactory40.copy();
        boolean boolean43 = slimTableFactory41.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory44 = slimTableFactory41.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory45 = slimTableFactory41.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap46 = slimTableFactory41.tableTypeArrays;
        slimTableFactory39.tableTypeArrays = strMap46;
        slimTableFactory0.tableTypeArrays = strMap46;
        java.util.Map<java.lang.String, java.lang.String> strMap49 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory50 = slimTableFactory0.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass52 = slimTableFactory50.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory53 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory54 = slimTableFactory53.copy();
        boolean boolean56 = slimTableFactory54.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory57 = slimTableFactory54.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory58 = slimTableFactory54.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory59 = slimTableFactory58.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory60 = slimTableFactory59.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap61 = slimTableFactory59.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass63 = slimTableFactory59.getTableType("");
        java.lang.String str65 = slimTableFactory59.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap66 = slimTableFactory59.tableTypeArrays;
        slimTableFactory50.tableTypeArrays = strMap66;
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory13);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNull(wildcardClass17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(slimTableFactory23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(slimTableFactory26);
        org.junit.Assert.assertNotNull(slimTableFactory27);
        org.junit.Assert.assertNotNull(slimTableFactory28);
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNotNull(slimTableFactory32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(slimTableFactory39);
        org.junit.Assert.assertNotNull(slimTableFactory41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(slimTableFactory44);
        org.junit.Assert.assertNotNull(slimTableFactory45);
        org.junit.Assert.assertNotNull(strMap46);
        org.junit.Assert.assertNotNull(strMap49);
        org.junit.Assert.assertNotNull(slimTableFactory50);
        org.junit.Assert.assertNull(wildcardClass52);
        org.junit.Assert.assertNotNull(slimTableFactory54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(slimTableFactory57);
        org.junit.Assert.assertNotNull(slimTableFactory58);
        org.junit.Assert.assertNotNull(slimTableFactory59);
        org.junit.Assert.assertNotNull(slimTableFactory60);
        org.junit.Assert.assertNotNull(strMap61);
        org.junit.Assert.assertNull(wildcardClass63);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(strMap66);
    }

    @Test
    public void test06763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06763");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory3.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap5 = slimTableFactory3.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass8 = slimTableFactory6.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap9 = slimTableFactory6.tableTypeArrays;
        boolean boolean11 = slimTableFactory6.hasColon("");
        java.lang.String str13 = slimTableFactory6.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory6.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory14.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass18 = slimTableFactory16.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory16.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap20 = slimTableFactory19.tableTypeArrays;
        slimTableFactory14.tableTypeArrays = strMap20;
        slimTableFactory3.tableTypeArrays = strMap20;
        java.util.Map<java.lang.String, java.lang.String> strMap23 = slimTableFactory3.tableTypeArrays;
        java.lang.String str25 = slimTableFactory3.makeTableType("hi!");
        java.lang.String str27 = slimTableFactory3.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = slimTableFactory3.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory29 = slimTableFactory3.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass31 = slimTableFactory29.getTableType("");
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertNotNull(slimTableFactory19);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(slimTableFactory28);
        org.junit.Assert.assertNotNull(slimTableFactory29);
        org.junit.Assert.assertNull(wildcardClass31);
    }

    @Test
    public void test06764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06764");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory1.tableTypeArrays;
        java.lang.String str6 = slimTableFactory1.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory7.copy();
        boolean boolean10 = slimTableFactory8.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory8.tableTypeArrays;
        java.lang.String str13 = slimTableFactory8.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory8.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap14;
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory1.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap17 = slimTableFactory1.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap18 = slimTableFactory1.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass20 = slimTableFactory1.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap21 = slimTableFactory1.tableTypeArrays;
        java.lang.Class<?> wildcardClass22 = slimTableFactory1.getClass();
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNull(wildcardClass20);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test06765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06765");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap5 = slimTableFactory0.tableTypeArrays;
        boolean boolean7 = slimTableFactory0.hasColon("");
        java.lang.String str9 = slimTableFactory0.makeTableType("");
        java.lang.String str11 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory13.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap15 = slimTableFactory13.tableTypes;
        boolean boolean17 = slimTableFactory13.hasColon("");
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertNotNull(slimTableFactory13);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test06766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06766");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap5 = slimTableFactory1.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory1.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory1.copy();
        boolean boolean11 = slimTableFactory1.hasColon("");
        boolean boolean13 = slimTableFactory1.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory14.copy();
        boolean boolean17 = slimTableFactory15.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap18 = slimTableFactory15.tableTypeArrays;
        java.lang.String str20 = slimTableFactory15.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = slimTableFactory21.copy();
        boolean boolean24 = slimTableFactory22.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap25 = slimTableFactory22.tableTypeArrays;
        java.lang.String str27 = slimTableFactory22.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap28 = slimTableFactory22.tableTypeArrays;
        slimTableFactory15.tableTypeArrays = strMap28;
        java.util.Map<java.lang.String, java.lang.String> strMap30 = slimTableFactory15.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap31 = slimTableFactory15.tableTypes;
        java.lang.String str33 = slimTableFactory15.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory34 = slimTableFactory15.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory35 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory36 = slimTableFactory35.copy();
        boolean boolean38 = slimTableFactory36.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory39 = slimTableFactory36.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap40 = slimTableFactory36.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory41 = slimTableFactory36.copy();
        boolean boolean43 = slimTableFactory41.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap44 = slimTableFactory41.tableTypeArrays;
        slimTableFactory34.tableTypeArrays = strMap44;
        slimTableFactory1.tableTypeArrays = strMap44;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory47 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.Table table48 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory47.parseDefineTableTypeRow(table48, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(slimTableFactory22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory34);
        org.junit.Assert.assertNotNull(slimTableFactory36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(slimTableFactory39);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertNotNull(slimTableFactory41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(strMap44);
        org.junit.Assert.assertNotNull(slimTableFactory47);
    }

    @Test
    public void test06767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06767");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory0.copy();
        boolean boolean6 = slimTableFactory4.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass9 = slimTableFactory7.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory7.tableTypeArrays;
        boolean boolean12 = slimTableFactory7.hasColon("");
        java.lang.String str14 = slimTableFactory7.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap15 = slimTableFactory7.tableTypeArrays;
        slimTableFactory4.tableTypeArrays = strMap15;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory17.copy();
        boolean boolean20 = slimTableFactory18.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = slimTableFactory18.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap22 = slimTableFactory18.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass24 = slimTableFactory18.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap25 = slimTableFactory18.tableTypeArrays;
        slimTableFactory4.tableTypeArrays = strMap25;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap27 = slimTableFactory4.tableTypes;
        boolean boolean29 = slimTableFactory4.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory30 = slimTableFactory4.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory31 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass33 = slimTableFactory31.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory34 = slimTableFactory31.copy();
        boolean boolean36 = slimTableFactory31.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass38 = slimTableFactory31.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap39 = slimTableFactory31.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap40 = slimTableFactory31.tableTypeArrays;
        slimTableFactory4.tableTypeArrays = strMap40;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory42 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory43 = slimTableFactory42.copy();
        java.lang.String str45 = slimTableFactory42.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory46 = slimTableFactory42.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap47 = slimTableFactory42.tableTypeArrays;
        slimTableFactory4.tableTypeArrays = strMap47;
        java.lang.Class<?> wildcardClass49 = slimTableFactory4.getClass();
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(slimTableFactory18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(slimTableFactory21);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNull(wildcardClass24);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(slimTableFactory30);
        org.junit.Assert.assertNull(wildcardClass33);
        org.junit.Assert.assertNotNull(slimTableFactory34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(wildcardClass38);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertNotNull(slimTableFactory43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory46);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test06768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06768");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory3.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory3.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory3.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass8 = slimTableFactory3.getTableType("hi!");
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNull(wildcardClass8);
    }

    @Test
    public void test06769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06769");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        boolean boolean5 = slimTableFactory0.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory0.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass9 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.Table table10 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory0.parseDefineTableTypeRow(table10, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNull(wildcardClass9);
    }

    @Test
    public void test06770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06770");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory4.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap6 = slimTableFactory5.tableTypes;
        boolean boolean8 = slimTableFactory5.hasColon("");
        boolean boolean10 = slimTableFactory5.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap11 = slimTableFactory5.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory12.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory12.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory15.tableTypeArrays;
        slimTableFactory5.tableTypeArrays = strMap16;
        slimTableFactory0.tableTypeArrays = strMap16;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap19 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = slimTableFactory20.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = slimTableFactory22.copy();
        java.lang.String str25 = slimTableFactory22.getFullTableName("hi!");
        boolean boolean27 = slimTableFactory22.hasColon("hi!");
        boolean boolean29 = slimTableFactory22.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory30 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass32 = slimTableFactory30.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory33 = slimTableFactory30.copy();
        boolean boolean35 = slimTableFactory30.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass37 = slimTableFactory30.getTableType("hi!");
        java.lang.String str39 = slimTableFactory30.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory40 = slimTableFactory30.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass42 = slimTableFactory30.getTableType("");
        boolean boolean44 = slimTableFactory30.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass46 = slimTableFactory30.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory47 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory48 = slimTableFactory47.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap49 = slimTableFactory48.tableTypes;
        boolean boolean51 = slimTableFactory48.hasColon("");
        boolean boolean53 = slimTableFactory48.hasColon("hi!");
        boolean boolean55 = slimTableFactory48.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory56 = slimTableFactory48.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass58 = slimTableFactory56.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap59 = slimTableFactory56.tableTypeArrays;
        slimTableFactory30.tableTypeArrays = strMap59;
        slimTableFactory22.tableTypeArrays = strMap59;
        slimTableFactory20.tableTypeArrays = strMap59;
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(slimTableFactory20);
        org.junit.Assert.assertNotNull(slimTableFactory21);
        org.junit.Assert.assertNotNull(slimTableFactory23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(wildcardClass32);
        org.junit.Assert.assertNotNull(slimTableFactory33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(wildcardClass37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(slimTableFactory40);
        org.junit.Assert.assertNull(wildcardClass42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(wildcardClass46);
        org.junit.Assert.assertNotNull(slimTableFactory48);
        org.junit.Assert.assertNotNull(strMap49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(slimTableFactory56);
        org.junit.Assert.assertNull(wildcardClass58);
        org.junit.Assert.assertNotNull(strMap59);
    }

    @Test
    public void test06771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06771");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        boolean boolean7 = slimTableFactory5.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass10 = slimTableFactory8.getTableType("");
        boolean boolean12 = slimTableFactory8.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap13 = slimTableFactory8.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory8.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass17 = slimTableFactory15.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap18 = slimTableFactory15.tableTypeArrays;
        java.lang.String str20 = slimTableFactory15.makeTableType("hi!");
        boolean boolean22 = slimTableFactory15.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass25 = slimTableFactory23.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap26 = slimTableFactory23.tableTypeArrays;
        boolean boolean28 = slimTableFactory23.hasColon("");
        java.lang.String str30 = slimTableFactory23.makeTableType("");
        java.lang.String str32 = slimTableFactory23.makeTableType("");
        java.lang.String str34 = slimTableFactory23.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory35 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory36 = slimTableFactory35.copy();
        boolean boolean38 = slimTableFactory36.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory39 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass41 = slimTableFactory39.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory42 = slimTableFactory39.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory43 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory44 = slimTableFactory43.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap45 = slimTableFactory44.tableTypes;
        boolean boolean47 = slimTableFactory44.hasColon("");
        boolean boolean49 = slimTableFactory44.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap50 = slimTableFactory44.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory51 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass53 = slimTableFactory51.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory54 = slimTableFactory51.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap55 = slimTableFactory54.tableTypeArrays;
        slimTableFactory44.tableTypeArrays = strMap55;
        slimTableFactory39.tableTypeArrays = strMap55;
        slimTableFactory36.tableTypeArrays = strMap55;
        slimTableFactory23.tableTypeArrays = strMap55;
        slimTableFactory15.tableTypeArrays = strMap55;
        slimTableFactory14.tableTypeArrays = strMap55;
        slimTableFactory5.tableTypeArrays = strMap55;
        fitnesse.testsystems.slim.Table table63 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext65 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable66 = slimTableFactory5.makeSlimTable(table63, "hi!", slimTestContext65);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertNull(wildcardClass17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(wildcardClass25);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(slimTableFactory36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(wildcardClass41);
        org.junit.Assert.assertNotNull(slimTableFactory42);
        org.junit.Assert.assertNotNull(slimTableFactory44);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(wildcardClass53);
        org.junit.Assert.assertNotNull(slimTableFactory54);
        org.junit.Assert.assertNotNull(strMap55);
    }

    @Test
    public void test06772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06772");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory1.tableTypeArrays;
        java.lang.String str6 = slimTableFactory1.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap9 = slimTableFactory1.tableTypes;
        java.lang.String str11 = slimTableFactory1.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap12 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.Table table13 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable14 = slimTableFactory1.parseDefineTableTypeTable(table13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNotNull(strMap12);
    }

    @Test
    public void test06773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06773");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        boolean boolean6 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory1.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass9 = slimTableFactory1.getTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap10 = slimTableFactory1.tableTypes;
        boolean boolean12 = slimTableFactory1.hasColon("");
        java.lang.String str14 = slimTableFactory1.makeTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass16 = slimTableFactory1.getTableType("hi!");
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertNull(wildcardClass16);
    }

    @Test
    public void test06774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06774");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass5 = slimTableFactory3.getTableType("");
        boolean boolean7 = slimTableFactory3.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory3.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap8;
        java.lang.String str11 = slimTableFactory1.makeTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass13 = slimTableFactory1.getTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap14 = slimTableFactory1.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass16 = slimTableFactory1.getTableType("hi!");
        java.lang.String str18 = slimTableFactory1.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = slimTableFactory20.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap22 = slimTableFactory21.tableTypes;
        boolean boolean24 = slimTableFactory21.hasColon("");
        boolean boolean26 = slimTableFactory21.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap27 = slimTableFactory21.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass29 = slimTableFactory21.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory30 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass32 = slimTableFactory30.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap33 = slimTableFactory30.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory34 = slimTableFactory30.copy();
        boolean boolean36 = slimTableFactory34.hasColon("");
        java.lang.String str38 = slimTableFactory34.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap39 = slimTableFactory34.tableTypeArrays;
        slimTableFactory21.tableTypeArrays = strMap39;
        slimTableFactory1.tableTypeArrays = strMap39;
        fitnesse.testsystems.slim.Table table42 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext44 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable45 = slimTableFactory1.makeSlimTable(table42, "", slimTestContext44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNull(wildcardClass16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory19);
        org.junit.Assert.assertNotNull(slimTableFactory21);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNull(wildcardClass29);
        org.junit.Assert.assertNull(wildcardClass32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(slimTableFactory34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(strMap39);
    }

    @Test
    public void test06775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06775");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory0.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass8 = slimTableFactory0.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap9 = slimTableFactory0.tableTypeArrays;
        java.lang.String str11 = slimTableFactory0.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap12 = null;
        slimTableFactory0.tableTypeArrays = strMap12;
        fitnesse.testsystems.slim.Table table14 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory0.parseDefineTableTypeRow(table14, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
    }

    @Test
    public void test06776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06776");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory1.tableTypeArrays;
        java.lang.String str6 = slimTableFactory1.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        boolean boolean11 = slimTableFactory9.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory9.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap13 = slimTableFactory9.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass16 = slimTableFactory14.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap17 = slimTableFactory14.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass19 = slimTableFactory14.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass22 = slimTableFactory20.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = slimTableFactory20.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = slimTableFactory23.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = slimTableFactory25.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap27 = slimTableFactory25.tableTypeArrays;
        slimTableFactory23.tableTypeArrays = strMap27;
        slimTableFactory14.tableTypeArrays = strMap27;
        slimTableFactory9.tableTypeArrays = strMap27;
        slimTableFactory1.tableTypeArrays = strMap27;
        java.lang.String str33 = slimTableFactory1.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap34 = slimTableFactory1.tableTypes;
        java.lang.String str36 = slimTableFactory1.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory37 = slimTableFactory1.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass39 = slimTableFactory1.getTableType("");
        boolean boolean41 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory42 = slimTableFactory1.copy();
        boolean boolean44 = slimTableFactory42.hasColon("");
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNull(wildcardClass16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNull(wildcardClass22);
        org.junit.Assert.assertNotNull(slimTableFactory23);
        org.junit.Assert.assertNotNull(slimTableFactory24);
        org.junit.Assert.assertNotNull(slimTableFactory26);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(slimTableFactory37);
        org.junit.Assert.assertNull(wildcardClass39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(slimTableFactory42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test06777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06777");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory5.getTableType("hi!");
        java.lang.String str9 = slimTableFactory5.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap10 = slimTableFactory5.tableTypes;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap11 = slimTableFactory5.tableTypes;
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strMap11);
    }

    @Test
    public void test06778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06778");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        boolean boolean6 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory1.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass9 = slimTableFactory1.getTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap10 = slimTableFactory1.tableTypes;
        java.lang.String str12 = slimTableFactory1.makeTableType("hi!");
        java.lang.String str14 = slimTableFactory1.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory1.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass17 = slimTableFactory15.getTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap18 = slimTableFactory15.tableTypes;
        java.lang.Class<?> wildcardClass19 = strMap18.getClass();
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertNull(wildcardClass17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test06779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06779");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass5 = slimTableFactory3.getTableType("");
        boolean boolean7 = slimTableFactory3.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory3.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap8;
        java.lang.String str11 = slimTableFactory1.makeTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass13 = slimTableFactory1.getTableType("");
        boolean boolean15 = slimTableFactory1.hasColon("");
        java.lang.String str17 = slimTableFactory1.makeTableType("hi!");
        boolean boolean19 = slimTableFactory1.hasColon("hi!");
        java.lang.String str21 = slimTableFactory1.makeTableType("");
        java.lang.String str23 = slimTableFactory1.getFullTableName("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass25 = slimTableFactory1.getTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass27 = slimTableFactory1.getTableType("");
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertNull(wildcardClass25);
        org.junit.Assert.assertNull(wildcardClass27);
    }

    @Test
    public void test06780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06780");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory4.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap6 = slimTableFactory5.tableTypes;
        boolean boolean8 = slimTableFactory5.hasColon("");
        boolean boolean10 = slimTableFactory5.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap11 = slimTableFactory5.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory12.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory12.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory15.tableTypeArrays;
        slimTableFactory5.tableTypeArrays = strMap16;
        slimTableFactory0.tableTypeArrays = strMap16;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = slimTableFactory20.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap22 = null;
        slimTableFactory20.tableTypeArrays = strMap22;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass25 = slimTableFactory20.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = slimTableFactory26.copy();
        boolean boolean29 = slimTableFactory27.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory30 = slimTableFactory27.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory31 = slimTableFactory27.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory32 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass34 = slimTableFactory32.getTableType("");
        boolean boolean36 = slimTableFactory32.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap37 = slimTableFactory32.tableTypeArrays;
        slimTableFactory31.tableTypeArrays = strMap37;
        slimTableFactory20.tableTypeArrays = strMap37;
        boolean boolean41 = slimTableFactory20.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory42 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass44 = slimTableFactory42.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap45 = slimTableFactory42.tableTypeArrays;
        slimTableFactory20.tableTypeArrays = strMap45;
        slimTableFactory19.tableTypeArrays = strMap45;
        boolean boolean49 = slimTableFactory19.hasColon("");
        boolean boolean51 = slimTableFactory19.hasColon("");
        boolean boolean53 = slimTableFactory19.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass55 = slimTableFactory19.getTableType("hi!");
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(slimTableFactory19);
        org.junit.Assert.assertNotNull(slimTableFactory21);
        org.junit.Assert.assertNull(wildcardClass25);
        org.junit.Assert.assertNotNull(slimTableFactory27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(slimTableFactory30);
        org.junit.Assert.assertNotNull(slimTableFactory31);
        org.junit.Assert.assertNull(wildcardClass34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(wildcardClass44);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(wildcardClass55);
    }

    @Test
    public void test06781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06781");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass11 = slimTableFactory8.getTableType("");
        java.lang.String str13 = slimTableFactory8.makeTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass15 = slimTableFactory8.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory8.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = slimTableFactory8.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass19 = slimTableFactory8.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory8.copy();
        fitnesse.testsystems.slim.Table table21 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory20.parseDefineTableTypeRow(table21, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertNotNull(slimTableFactory17);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(slimTableFactory20);
    }

    @Test
    public void test06782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06782");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        boolean boolean6 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass10 = slimTableFactory8.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory8.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap12 = slimTableFactory11.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap12;
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass17 = slimTableFactory15.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap18 = slimTableFactory15.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass20 = slimTableFactory15.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap21 = slimTableFactory15.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap21;
        boolean boolean24 = slimTableFactory1.hasColon("");
        boolean boolean26 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.Table table27 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable28 = slimTableFactory1.parseDefineTableTypeTable(table27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNull(wildcardClass17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNull(wildcardClass20);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test06783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06783");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap5 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory6.copy();
        boolean boolean9 = slimTableFactory7.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory7.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory7.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory11.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass15 = slimTableFactory13.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory13.copy();
        boolean boolean18 = slimTableFactory13.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap19 = slimTableFactory13.tableTypeArrays;
        slimTableFactory11.tableTypeArrays = strMap19;
        slimTableFactory0.tableTypeArrays = strMap19;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass23 = slimTableFactory0.getTableType("hi!");
        boolean boolean25 = slimTableFactory0.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap26 = slimTableFactory0.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass28 = slimTableFactory0.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap29 = slimTableFactory0.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap30 = slimTableFactory0.tableTypeArrays;
        java.lang.String str32 = slimTableFactory0.makeTableType("hi!");
        boolean boolean34 = slimTableFactory0.hasColon("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass36 = slimTableFactory0.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap37 = slimTableFactory0.tableTypes;
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNull(wildcardClass28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(wildcardClass36);
        org.junit.Assert.assertNotNull(strMap37);
    }

    @Test
    public void test06784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06784");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        boolean boolean4 = slimTableFactory0.hasColon("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass6 = slimTableFactory0.getTableType("hi!");
        java.lang.String str8 = slimTableFactory0.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory0.copy();
        java.lang.String str11 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap12 = slimTableFactory0.tableTypes;
        boolean boolean14 = slimTableFactory0.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = slimTableFactory16.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap18 = slimTableFactory17.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass21 = slimTableFactory19.getTableType("");
        boolean boolean23 = slimTableFactory19.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap24 = slimTableFactory19.tableTypeArrays;
        slimTableFactory17.tableTypeArrays = strMap24;
        java.lang.String str27 = slimTableFactory17.makeTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass29 = slimTableFactory17.getTableType("");
        boolean boolean31 = slimTableFactory17.hasColon("");
        java.lang.String str33 = slimTableFactory17.makeTableType("hi!");
        boolean boolean35 = slimTableFactory17.hasColon("hi!");
        java.lang.String str37 = slimTableFactory17.makeTableType("");
        java.lang.String str39 = slimTableFactory17.getFullTableName("hi!");
        java.lang.String str41 = slimTableFactory17.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory42 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory43 = slimTableFactory42.copy();
        boolean boolean45 = slimTableFactory43.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory46 = slimTableFactory43.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory47 = slimTableFactory43.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory48 = slimTableFactory47.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory49 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory50 = slimTableFactory49.copy();
        boolean boolean52 = slimTableFactory50.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap53 = slimTableFactory50.tableTypeArrays;
        slimTableFactory48.tableTypeArrays = strMap53;
        java.util.Map<java.lang.String, java.lang.String> strMap55 = slimTableFactory48.tableTypeArrays;
        slimTableFactory17.tableTypeArrays = strMap55;
        slimTableFactory15.tableTypeArrays = strMap55;
        java.lang.String str59 = slimTableFactory15.getFullTableName("");
        fitnesse.testsystems.slim.Table table60 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable61 = slimTableFactory15.parseDefineTableTypeTable(table60);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertNotNull(slimTableFactory17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNull(wildcardClass21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNull(wildcardClass29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hi!" + "'", str39, "hi!");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(slimTableFactory46);
        org.junit.Assert.assertNotNull(slimTableFactory47);
        org.junit.Assert.assertNotNull(slimTableFactory48);
        org.junit.Assert.assertNotNull(slimTableFactory50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(strMap53);
        org.junit.Assert.assertNotNull(strMap55);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
    }

    @Test
    public void test06785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06785");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory1.tableTypeArrays;
        java.lang.String str6 = slimTableFactory1.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        boolean boolean11 = slimTableFactory9.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory9.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap13 = slimTableFactory9.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass16 = slimTableFactory14.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap17 = slimTableFactory14.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass19 = slimTableFactory14.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass22 = slimTableFactory20.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = slimTableFactory20.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = slimTableFactory23.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = slimTableFactory25.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap27 = slimTableFactory25.tableTypeArrays;
        slimTableFactory23.tableTypeArrays = strMap27;
        slimTableFactory14.tableTypeArrays = strMap27;
        slimTableFactory9.tableTypeArrays = strMap27;
        slimTableFactory1.tableTypeArrays = strMap27;
        java.lang.String str33 = slimTableFactory1.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory34 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap35 = slimTableFactory34.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory36 = slimTableFactory34.copy();
        boolean boolean38 = slimTableFactory36.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap39 = slimTableFactory36.tableTypes;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap40 = slimTableFactory36.tableTypes;
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNull(wildcardClass16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNull(wildcardClass22);
        org.junit.Assert.assertNotNull(slimTableFactory23);
        org.junit.Assert.assertNotNull(slimTableFactory24);
        org.junit.Assert.assertNotNull(slimTableFactory26);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory34);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(slimTableFactory36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNotNull(strMap40);
    }

    @Test
    public void test06786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06786");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory5.getTableType("hi!");
        java.lang.String str9 = slimTableFactory5.makeTableType("hi!");
        java.lang.String str11 = slimTableFactory5.getFullTableName("hi!");
        java.lang.Class<?> wildcardClass12 = slimTableFactory5.getClass();
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test06787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06787");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        java.lang.String str5 = slimTableFactory1.makeTableType("");
        boolean boolean7 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory1.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap9 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.Table table10 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext12 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable13 = slimTableFactory1.makeSlimTable(table10, "", slimTestContext12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strMap9);
    }

    @Test
    public void test06788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06788");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory4.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap6 = slimTableFactory5.tableTypes;
        boolean boolean8 = slimTableFactory5.hasColon("");
        boolean boolean10 = slimTableFactory5.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap11 = slimTableFactory5.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory12.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory12.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory15.tableTypeArrays;
        slimTableFactory5.tableTypeArrays = strMap16;
        slimTableFactory0.tableTypeArrays = strMap16;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap19 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = slimTableFactory0.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass23 = slimTableFactory0.getTableType("hi!");
        fitnesse.testsystems.slim.Table table24 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable25 = slimTableFactory0.parseDefineTableTypeTable(table24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(slimTableFactory20);
        org.junit.Assert.assertNotNull(slimTableFactory21);
        org.junit.Assert.assertNull(wildcardClass23);
    }

    @Test
    public void test06789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06789");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass4 = slimTableFactory1.getTableType("hi!");
        boolean boolean6 = slimTableFactory1.hasColon("");
        java.lang.String str8 = slimTableFactory1.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory9.copy();
        fitnesse.testsystems.slim.Table table11 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory9.parseDefineTableTypeRow(table11, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(slimTableFactory10);
    }

    @Test
    public void test06790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06790");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        boolean boolean6 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass10 = slimTableFactory8.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory8.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap12 = slimTableFactory11.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap12;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory1.copy();
        boolean boolean16 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap17 = slimTableFactory1.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass19 = slimTableFactory1.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = slimTableFactory20.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap22 = slimTableFactory21.tableTypes;
        boolean boolean24 = slimTableFactory21.hasColon("");
        boolean boolean26 = slimTableFactory21.hasColon("hi!");
        boolean boolean28 = slimTableFactory21.hasColon("");
        java.lang.String str30 = slimTableFactory21.getFullTableName("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass32 = slimTableFactory21.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap33 = slimTableFactory21.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap33;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap35 = slimTableFactory1.tableTypes;
        java.lang.String str37 = slimTableFactory1.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap38 = slimTableFactory1.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap39 = slimTableFactory1.tableTypes;
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(slimTableFactory21);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNull(wildcardClass32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertNotNull(strMap39);
    }

    @Test
    public void test06791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06791");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap5 = slimTableFactory1.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap8 = slimTableFactory1.tableTypes;
        java.lang.String str10 = slimTableFactory1.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory1.tableTypeArrays;
        java.lang.String str13 = slimTableFactory1.makeTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass15 = slimTableFactory1.getTableType("");
        fitnesse.testsystems.slim.Table table16 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable17 = slimTableFactory1.parseDefineTableTypeTable(table16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNull(wildcardClass15);
    }

    @Test
    public void test06792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06792");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory0.getTableType("hi!");
        java.lang.String str9 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory0.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass12 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory13.copy();
        boolean boolean16 = slimTableFactory14.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = slimTableFactory14.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory14.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory14.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap20 = slimTableFactory19.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap20;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass23 = slimTableFactory0.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap24 = slimTableFactory0.tableTypes;
        java.lang.String str26 = slimTableFactory0.makeTableType("");
        boolean boolean28 = slimTableFactory0.hasColon("hi!");
        java.lang.String str30 = slimTableFactory0.makeTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass32 = slimTableFactory0.getTableType("");
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(slimTableFactory17);
        org.junit.Assert.assertNotNull(slimTableFactory18);
        org.junit.Assert.assertNotNull(slimTableFactory19);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNull(wildcardClass23);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
        org.junit.Assert.assertNull(wildcardClass32);
    }

    @Test
    public void test06793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06793");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory4.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap6 = slimTableFactory5.tableTypes;
        boolean boolean8 = slimTableFactory5.hasColon("");
        boolean boolean10 = slimTableFactory5.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap11 = slimTableFactory5.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory12.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory12.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory15.tableTypeArrays;
        slimTableFactory5.tableTypeArrays = strMap16;
        slimTableFactory0.tableTypeArrays = strMap16;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap19 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap21 = slimTableFactory20.tableTypes;
        boolean boolean23 = slimTableFactory20.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass26 = slimTableFactory24.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = slimTableFactory24.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory29 = slimTableFactory28.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap30 = slimTableFactory29.tableTypes;
        boolean boolean32 = slimTableFactory29.hasColon("");
        boolean boolean34 = slimTableFactory29.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap35 = slimTableFactory29.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory36 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass38 = slimTableFactory36.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory39 = slimTableFactory36.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap40 = slimTableFactory39.tableTypeArrays;
        slimTableFactory29.tableTypeArrays = strMap40;
        slimTableFactory24.tableTypeArrays = strMap40;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap43 = slimTableFactory24.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap44 = slimTableFactory24.tableTypeArrays;
        boolean boolean46 = slimTableFactory24.hasColon("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass48 = slimTableFactory24.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap49 = slimTableFactory24.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory50 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory51 = slimTableFactory50.copy();
        boolean boolean53 = slimTableFactory51.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory54 = slimTableFactory51.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory55 = slimTableFactory51.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory56 = slimTableFactory51.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap57 = slimTableFactory51.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory58 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory59 = slimTableFactory58.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap60 = slimTableFactory58.tableTypeArrays;
        slimTableFactory51.tableTypeArrays = strMap60;
        java.util.Map<java.lang.String, java.lang.String> strMap62 = slimTableFactory51.tableTypeArrays;
        java.lang.String str64 = slimTableFactory51.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory65 = slimTableFactory51.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory66 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory67 = slimTableFactory66.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap68 = slimTableFactory67.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass70 = slimTableFactory67.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap71 = slimTableFactory67.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap72 = slimTableFactory67.tableTypeArrays;
        slimTableFactory51.tableTypeArrays = strMap72;
        slimTableFactory24.tableTypeArrays = strMap72;
        slimTableFactory20.tableTypeArrays = strMap72;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap76 = slimTableFactory20.tableTypes;
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(slimTableFactory20);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(wildcardClass26);
        org.junit.Assert.assertNotNull(slimTableFactory27);
        org.junit.Assert.assertNotNull(slimTableFactory29);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNull(wildcardClass38);
        org.junit.Assert.assertNotNull(slimTableFactory39);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertNotNull(strMap43);
        org.junit.Assert.assertNotNull(strMap44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(wildcardClass48);
        org.junit.Assert.assertNotNull(strMap49);
        org.junit.Assert.assertNotNull(slimTableFactory51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(slimTableFactory54);
        org.junit.Assert.assertNotNull(slimTableFactory55);
        org.junit.Assert.assertNotNull(slimTableFactory56);
        org.junit.Assert.assertNotNull(strMap57);
        org.junit.Assert.assertNotNull(slimTableFactory59);
        org.junit.Assert.assertNotNull(strMap60);
        org.junit.Assert.assertNotNull(strMap62);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "hi!" + "'", str64, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory65);
        org.junit.Assert.assertNotNull(slimTableFactory67);
        org.junit.Assert.assertNotNull(strMap68);
        org.junit.Assert.assertNull(wildcardClass70);
        org.junit.Assert.assertNotNull(strMap71);
        org.junit.Assert.assertNotNull(strMap72);
        org.junit.Assert.assertNotNull(strMap76);
    }

    @Test
    public void test06794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06794");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory1.tableTypeArrays;
        java.lang.String str6 = slimTableFactory1.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory7.copy();
        boolean boolean10 = slimTableFactory8.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory8.tableTypeArrays;
        java.lang.String str13 = slimTableFactory8.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory8.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap14;
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory1.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap17 = slimTableFactory1.tableTypes;
        java.lang.String str19 = slimTableFactory1.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = slimTableFactory21.copy();
        boolean boolean24 = slimTableFactory22.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = slimTableFactory22.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap26 = slimTableFactory22.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = slimTableFactory22.copy();
        boolean boolean29 = slimTableFactory27.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap30 = slimTableFactory27.tableTypeArrays;
        slimTableFactory20.tableTypeArrays = strMap30;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory32 = slimTableFactory20.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory33 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory34 = slimTableFactory33.copy();
        boolean boolean36 = slimTableFactory34.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory37 = slimTableFactory34.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory38 = slimTableFactory34.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory39 = slimTableFactory34.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap40 = slimTableFactory34.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory41 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory42 = slimTableFactory41.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap43 = null;
        slimTableFactory41.tableTypeArrays = strMap43;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass46 = slimTableFactory41.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory47 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory48 = slimTableFactory47.copy();
        boolean boolean50 = slimTableFactory48.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory51 = slimTableFactory48.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory52 = slimTableFactory48.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory53 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass55 = slimTableFactory53.getTableType("");
        boolean boolean57 = slimTableFactory53.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap58 = slimTableFactory53.tableTypeArrays;
        slimTableFactory52.tableTypeArrays = strMap58;
        slimTableFactory41.tableTypeArrays = strMap58;
        boolean boolean62 = slimTableFactory41.hasColon("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass64 = slimTableFactory41.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap65 = slimTableFactory41.tableTypeArrays;
        slimTableFactory34.tableTypeArrays = strMap65;
        slimTableFactory32.tableTypeArrays = strMap65;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap68 = slimTableFactory32.tableTypes;
        java.lang.String str70 = slimTableFactory32.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory71 = slimTableFactory32.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass73 = slimTableFactory32.getTableType("hi!");
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory20);
        org.junit.Assert.assertNotNull(slimTableFactory22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(slimTableFactory25);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(slimTableFactory27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(slimTableFactory32);
        org.junit.Assert.assertNotNull(slimTableFactory34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(slimTableFactory37);
        org.junit.Assert.assertNotNull(slimTableFactory38);
        org.junit.Assert.assertNotNull(slimTableFactory39);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertNotNull(slimTableFactory42);
        org.junit.Assert.assertNull(wildcardClass46);
        org.junit.Assert.assertNotNull(slimTableFactory48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(slimTableFactory51);
        org.junit.Assert.assertNotNull(slimTableFactory52);
        org.junit.Assert.assertNull(wildcardClass55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(strMap58);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(wildcardClass64);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap68);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "hi!" + "'", str70, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory71);
        org.junit.Assert.assertNull(wildcardClass73);
    }

    @Test
    public void test06795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06795");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory5.copy();
        boolean boolean8 = slimTableFactory5.hasColon("");
        boolean boolean10 = slimTableFactory5.hasColon("hi!");
        boolean boolean12 = slimTableFactory5.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory5.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory13.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory13.copy();
        fitnesse.testsystems.slim.Table table16 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext18 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable19 = slimTableFactory13.makeSlimTable(table16, "hi!", slimTestContext18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(slimTableFactory13);
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertNotNull(slimTableFactory15);
    }

    @Test
    public void test06796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06796");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("");
        java.lang.String str7 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap10 = slimTableFactory9.tableTypes;
        boolean boolean12 = slimTableFactory9.hasColon("");
        boolean boolean14 = slimTableFactory9.hasColon("hi!");
        boolean boolean16 = slimTableFactory9.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = slimTableFactory9.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap18 = slimTableFactory17.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory17.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = slimTableFactory20.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap22 = slimTableFactory21.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass25 = slimTableFactory23.getTableType("");
        boolean boolean27 = slimTableFactory23.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap28 = slimTableFactory23.tableTypeArrays;
        slimTableFactory21.tableTypeArrays = strMap28;
        slimTableFactory19.tableTypeArrays = strMap28;
        slimTableFactory0.tableTypeArrays = strMap28;
        java.lang.String str33 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap34 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory35 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap36 = slimTableFactory35.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory37 = slimTableFactory35.copy();
        fitnesse.testsystems.slim.Table table38 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable39 = slimTableFactory35.parseDefineTableTypeTable(table38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(slimTableFactory17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(slimTableFactory19);
        org.junit.Assert.assertNotNull(slimTableFactory21);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNull(wildcardClass25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNotNull(slimTableFactory35);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(slimTableFactory37);
    }

    @Test
    public void test06797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06797");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass3 = slimTableFactory0.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap4 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory5.getTableType("");
        boolean boolean9 = slimTableFactory5.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory5.tableTypeArrays;
        boolean boolean12 = slimTableFactory5.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass15 = slimTableFactory13.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory13.copy();
        boolean boolean18 = slimTableFactory13.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass20 = slimTableFactory13.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap21 = slimTableFactory13.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap22 = slimTableFactory13.tableTypeArrays;
        slimTableFactory5.tableTypeArrays = strMap22;
        slimTableFactory0.tableTypeArrays = strMap22;
        boolean boolean26 = slimTableFactory0.hasColon("hi!");
        java.lang.String str28 = slimTableFactory0.makeTableType("");
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(wildcardClass20);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
    }

    @Test
    public void test06798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06798");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        slimTableFactory0.tableTypeArrays = strMap2;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass5 = slimTableFactory0.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory6.copy();
        boolean boolean9 = slimTableFactory7.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory7.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory7.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory12.getTableType("");
        boolean boolean16 = slimTableFactory12.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap17 = slimTableFactory12.tableTypeArrays;
        slimTableFactory11.tableTypeArrays = strMap17;
        slimTableFactory0.tableTypeArrays = strMap17;
        boolean boolean21 = slimTableFactory0.hasColon("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass23 = slimTableFactory0.getTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass25 = slimTableFactory0.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap26 = slimTableFactory0.tableTypes;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap27 = slimTableFactory0.tableTypes;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap28 = slimTableFactory0.tableTypes;
        java.lang.String str30 = slimTableFactory0.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap31 = slimTableFactory0.tableTypeArrays;
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(wildcardClass23);
        org.junit.Assert.assertNull(wildcardClass25);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(strMap31);
    }

    @Test
    public void test06799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06799");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory5.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass9 = slimTableFactory7.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory7.copy();
        boolean boolean12 = slimTableFactory7.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap13 = slimTableFactory7.tableTypeArrays;
        slimTableFactory5.tableTypeArrays = strMap13;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap15 = slimTableFactory5.tableTypes;
        java.lang.String str17 = slimTableFactory5.getFullTableName("hi!");
        boolean boolean19 = slimTableFactory5.hasColon("hi!");
        fitnesse.testsystems.slim.Table table20 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory5.parseDefineTableTypeRow(table20, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test06800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06800");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap5 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory6.copy();
        boolean boolean9 = slimTableFactory7.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory7.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory7.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory11.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass15 = slimTableFactory13.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory13.copy();
        boolean boolean18 = slimTableFactory13.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap19 = slimTableFactory13.tableTypeArrays;
        slimTableFactory11.tableTypeArrays = strMap19;
        slimTableFactory0.tableTypeArrays = strMap19;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass23 = slimTableFactory0.getTableType("hi!");
        boolean boolean25 = slimTableFactory0.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap26 = slimTableFactory0.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass28 = slimTableFactory0.getTableType("hi!");
        java.lang.String str30 = slimTableFactory0.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory31 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory32 = slimTableFactory31.copy();
        boolean boolean34 = slimTableFactory32.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory35 = slimTableFactory32.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory36 = slimTableFactory32.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory37 = slimTableFactory36.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory38 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass40 = slimTableFactory38.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory41 = slimTableFactory38.copy();
        boolean boolean43 = slimTableFactory38.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap44 = slimTableFactory38.tableTypeArrays;
        slimTableFactory36.tableTypeArrays = strMap44;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory46 = slimTableFactory36.copy();
        java.lang.String str48 = slimTableFactory36.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory49 = slimTableFactory36.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory50 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory51 = slimTableFactory50.copy();
        boolean boolean53 = slimTableFactory51.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory54 = slimTableFactory51.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory55 = slimTableFactory51.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory56 = slimTableFactory51.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap57 = slimTableFactory56.tableTypeArrays;
        slimTableFactory49.tableTypeArrays = strMap57;
        boolean boolean60 = slimTableFactory49.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory61 = slimTableFactory49.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap62 = slimTableFactory49.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap62;
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNull(wildcardClass28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(slimTableFactory35);
        org.junit.Assert.assertNotNull(slimTableFactory36);
        org.junit.Assert.assertNotNull(slimTableFactory37);
        org.junit.Assert.assertNull(wildcardClass40);
        org.junit.Assert.assertNotNull(slimTableFactory41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(strMap44);
        org.junit.Assert.assertNotNull(slimTableFactory46);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(slimTableFactory49);
        org.junit.Assert.assertNotNull(slimTableFactory51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(slimTableFactory54);
        org.junit.Assert.assertNotNull(slimTableFactory55);
        org.junit.Assert.assertNotNull(slimTableFactory56);
        org.junit.Assert.assertNotNull(strMap57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(slimTableFactory61);
        org.junit.Assert.assertNotNull(strMap62);
    }

    @Test
    public void test06801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06801");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory5.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap8 = slimTableFactory5.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass11 = slimTableFactory9.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap12 = slimTableFactory9.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory9.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory9.tableTypeArrays;
        slimTableFactory5.tableTypeArrays = strMap14;
        java.lang.String str17 = slimTableFactory5.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory5.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory19.copy();
        boolean boolean22 = slimTableFactory20.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap23 = slimTableFactory20.tableTypeArrays;
        java.lang.String str25 = slimTableFactory20.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap26 = slimTableFactory20.tableTypeArrays;
        slimTableFactory5.tableTypeArrays = strMap26;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = slimTableFactory5.copy();
        java.lang.String str30 = slimTableFactory28.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory31 = slimTableFactory28.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass33 = slimTableFactory28.getTableType("hi!");
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(slimTableFactory13);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory18);
        org.junit.Assert.assertNotNull(slimTableFactory20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(slimTableFactory28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory31);
        org.junit.Assert.assertNull(wildcardClass33);
    }

    @Test
    public void test06802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06802");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = slimTableFactory0.tableTypeArrays;
        boolean boolean4 = slimTableFactory0.hasColon("");
        boolean boolean6 = slimTableFactory0.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = null;
        slimTableFactory8.tableTypeArrays = strMap10;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass13 = slimTableFactory8.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory14.copy();
        boolean boolean17 = slimTableFactory15.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory15.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory15.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass22 = slimTableFactory20.getTableType("");
        boolean boolean24 = slimTableFactory20.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap25 = slimTableFactory20.tableTypeArrays;
        slimTableFactory19.tableTypeArrays = strMap25;
        slimTableFactory8.tableTypeArrays = strMap25;
        slimTableFactory0.tableTypeArrays = strMap25;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap29 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory30 = slimTableFactory0.copy();
        java.lang.String str32 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.Table table33 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory0.parseDefineTableTypeRow(table33, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(slimTableFactory18);
        org.junit.Assert.assertNotNull(slimTableFactory19);
        org.junit.Assert.assertNull(wildcardClass22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(slimTableFactory30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
    }

    @Test
    public void test06803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06803");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap5 = slimTableFactory1.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory1.getTableType("");
        java.lang.String str9 = slimTableFactory1.makeTableType("hi!");
        java.lang.String str11 = slimTableFactory1.getFullTableName("hi!");
        fitnesse.testsystems.slim.Table table12 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext14 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable15 = slimTableFactory1.makeSlimTable(table12, "hi!", slimTestContext14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
    }

    @Test
    public void test06804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06804");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory4.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap6 = slimTableFactory5.tableTypes;
        boolean boolean8 = slimTableFactory5.hasColon("");
        boolean boolean10 = slimTableFactory5.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap11 = slimTableFactory5.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory12.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory12.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory15.tableTypeArrays;
        slimTableFactory5.tableTypeArrays = strMap16;
        slimTableFactory0.tableTypeArrays = strMap16;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap19 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap22 = slimTableFactory0.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass24 = slimTableFactory0.getTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass26 = slimTableFactory0.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = slimTableFactory27.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap29 = slimTableFactory28.tableTypes;
        boolean boolean31 = slimTableFactory28.hasColon("");
        boolean boolean33 = slimTableFactory28.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap34 = slimTableFactory28.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory35 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass37 = slimTableFactory35.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory38 = slimTableFactory35.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap39 = slimTableFactory38.tableTypeArrays;
        slimTableFactory28.tableTypeArrays = strMap39;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory41 = slimTableFactory28.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap42 = slimTableFactory41.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory43 = slimTableFactory41.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory44 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass46 = slimTableFactory44.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory47 = slimTableFactory44.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap48 = slimTableFactory47.tableTypeArrays;
        java.lang.String str50 = slimTableFactory47.makeTableType("hi!");
        boolean boolean52 = slimTableFactory47.hasColon("hi!");
        java.lang.String str54 = slimTableFactory47.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap55 = slimTableFactory47.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory56 = slimTableFactory47.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap57 = null;
        slimTableFactory56.tableTypeArrays = strMap57;
        java.util.Map<java.lang.String, java.lang.String> strMap59 = slimTableFactory56.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass61 = slimTableFactory56.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory62 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory63 = slimTableFactory62.copy();
        boolean boolean65 = slimTableFactory63.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap66 = slimTableFactory63.tableTypeArrays;
        java.lang.String str68 = slimTableFactory63.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory69 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory70 = slimTableFactory69.copy();
        boolean boolean72 = slimTableFactory70.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap73 = slimTableFactory70.tableTypeArrays;
        java.lang.String str75 = slimTableFactory70.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap76 = slimTableFactory70.tableTypeArrays;
        slimTableFactory63.tableTypeArrays = strMap76;
        java.util.Map<java.lang.String, java.lang.String> strMap78 = slimTableFactory63.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass80 = slimTableFactory63.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap81 = slimTableFactory63.tableTypeArrays;
        slimTableFactory56.tableTypeArrays = strMap81;
        slimTableFactory43.tableTypeArrays = strMap81;
        slimTableFactory0.tableTypeArrays = strMap81;
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(slimTableFactory20);
        org.junit.Assert.assertNotNull(slimTableFactory21);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNull(wildcardClass24);
        org.junit.Assert.assertNull(wildcardClass26);
        org.junit.Assert.assertNotNull(slimTableFactory28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNull(wildcardClass37);
        org.junit.Assert.assertNotNull(slimTableFactory38);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNotNull(slimTableFactory41);
        org.junit.Assert.assertNotNull(strMap42);
        org.junit.Assert.assertNotNull(slimTableFactory43);
        org.junit.Assert.assertNull(wildcardClass46);
        org.junit.Assert.assertNotNull(slimTableFactory47);
        org.junit.Assert.assertNotNull(strMap48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hi!" + "'", str50, "hi!");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(strMap55);
        org.junit.Assert.assertNotNull(slimTableFactory56);
        org.junit.Assert.assertNull(strMap59);
        org.junit.Assert.assertNull(wildcardClass61);
        org.junit.Assert.assertNotNull(slimTableFactory63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(slimTableFactory70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(strMap73);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNotNull(strMap76);
        org.junit.Assert.assertNotNull(strMap78);
        org.junit.Assert.assertNull(wildcardClass80);
        org.junit.Assert.assertNotNull(strMap81);
    }

    @Test
    public void test06805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06805");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        boolean boolean6 = slimTableFactory1.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory1.copy();
        java.lang.String str11 = slimTableFactory9.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory12.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap14 = slimTableFactory13.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass17 = slimTableFactory15.getTableType("");
        boolean boolean19 = slimTableFactory15.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap20 = slimTableFactory15.tableTypeArrays;
        slimTableFactory13.tableTypeArrays = strMap20;
        slimTableFactory9.tableTypeArrays = strMap20;
        java.lang.Class<?> wildcardClass23 = strMap20.getClass();
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory13);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNull(wildcardClass17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test06806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06806");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory3.hasColon("");
        boolean boolean7 = slimTableFactory3.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory3.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass10 = slimTableFactory8.getTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass12 = slimTableFactory8.getTableType("");
        java.lang.Class<?> wildcardClass13 = slimTableFactory8.getClass();
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test06807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06807");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        slimTableFactory0.tableTypeArrays = strMap2;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass5 = slimTableFactory0.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory6.copy();
        boolean boolean9 = slimTableFactory7.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory7.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory7.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory12.getTableType("");
        boolean boolean16 = slimTableFactory12.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap17 = slimTableFactory12.tableTypeArrays;
        slimTableFactory11.tableTypeArrays = strMap17;
        slimTableFactory0.tableTypeArrays = strMap17;
        boolean boolean21 = slimTableFactory0.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass24 = slimTableFactory22.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap25 = slimTableFactory22.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap25;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap27 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory29 = slimTableFactory28.copy();
        boolean boolean31 = slimTableFactory29.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap32 = slimTableFactory29.tableTypeArrays;
        fitnesse.testsystems.slim.Table table33 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory29.parseDefineTableTypeRow(table33, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(wildcardClass24);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(slimTableFactory28);
        org.junit.Assert.assertNotNull(slimTableFactory29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(strMap32);
    }

    @Test
    public void test06808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06808");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory1.tableTypeArrays;
        java.lang.String str6 = slimTableFactory1.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory7.copy();
        boolean boolean10 = slimTableFactory8.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory8.tableTypeArrays;
        java.lang.String str13 = slimTableFactory8.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory8.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap14;
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory1.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap17 = slimTableFactory1.tableTypes;
        java.lang.String str19 = slimTableFactory1.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = slimTableFactory21.copy();
        boolean boolean24 = slimTableFactory22.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = slimTableFactory22.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap26 = slimTableFactory22.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = slimTableFactory22.copy();
        boolean boolean29 = slimTableFactory27.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap30 = slimTableFactory27.tableTypeArrays;
        slimTableFactory20.tableTypeArrays = strMap30;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory32 = slimTableFactory20.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory33 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory34 = slimTableFactory33.copy();
        boolean boolean36 = slimTableFactory34.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory37 = slimTableFactory34.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory38 = slimTableFactory34.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory39 = slimTableFactory34.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap40 = slimTableFactory34.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory41 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory42 = slimTableFactory41.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap43 = null;
        slimTableFactory41.tableTypeArrays = strMap43;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass46 = slimTableFactory41.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory47 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory48 = slimTableFactory47.copy();
        boolean boolean50 = slimTableFactory48.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory51 = slimTableFactory48.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory52 = slimTableFactory48.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory53 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass55 = slimTableFactory53.getTableType("");
        boolean boolean57 = slimTableFactory53.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap58 = slimTableFactory53.tableTypeArrays;
        slimTableFactory52.tableTypeArrays = strMap58;
        slimTableFactory41.tableTypeArrays = strMap58;
        boolean boolean62 = slimTableFactory41.hasColon("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass64 = slimTableFactory41.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap65 = slimTableFactory41.tableTypeArrays;
        slimTableFactory34.tableTypeArrays = strMap65;
        slimTableFactory32.tableTypeArrays = strMap65;
        fitnesse.testsystems.slim.Table table68 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext70 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable71 = slimTableFactory32.makeSlimTable(table68, "", slimTestContext70);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory20);
        org.junit.Assert.assertNotNull(slimTableFactory22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(slimTableFactory25);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(slimTableFactory27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(slimTableFactory32);
        org.junit.Assert.assertNotNull(slimTableFactory34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(slimTableFactory37);
        org.junit.Assert.assertNotNull(slimTableFactory38);
        org.junit.Assert.assertNotNull(slimTableFactory39);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertNotNull(slimTableFactory42);
        org.junit.Assert.assertNull(wildcardClass46);
        org.junit.Assert.assertNotNull(slimTableFactory48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(slimTableFactory51);
        org.junit.Assert.assertNotNull(slimTableFactory52);
        org.junit.Assert.assertNull(wildcardClass55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(strMap58);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(wildcardClass64);
        org.junit.Assert.assertNotNull(strMap65);
    }

    @Test
    public void test06809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06809");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory0.getTableType("hi!");
        java.lang.String str9 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory10.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap12 = slimTableFactory10.tableTypeArrays;
        java.lang.String str14 = slimTableFactory10.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap15 = null;
        slimTableFactory10.tableTypeArrays = strMap15;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap17 = slimTableFactory10.tableTypes;
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(strMap17);
    }

    @Test
    public void test06810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06810");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory5.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory7.copy();
        boolean boolean10 = slimTableFactory8.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory8.tableTypeArrays;
        slimTableFactory6.tableTypeArrays = strMap11;
        java.lang.String str14 = slimTableFactory6.getFullTableName("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass16 = slimTableFactory6.getTableType("hi!");
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertNull(wildcardClass16);
    }

    @Test
    public void test06811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06811");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        boolean boolean6 = slimTableFactory1.hasColon("hi!");
        boolean boolean8 = slimTableFactory1.hasColon("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass10 = slimTableFactory1.getTableType("hi!");
        java.lang.String str12 = slimTableFactory1.getFullTableName("");
        boolean boolean14 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap15 = slimTableFactory1.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass17 = slimTableFactory1.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory18.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap20 = slimTableFactory19.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass22 = slimTableFactory19.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = slimTableFactory23.copy();
        boolean boolean26 = slimTableFactory24.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = slimTableFactory24.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap28 = slimTableFactory24.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory29 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory30 = slimTableFactory29.copy();
        boolean boolean32 = slimTableFactory30.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory33 = slimTableFactory30.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory34 = slimTableFactory30.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory35 = slimTableFactory30.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap36 = slimTableFactory35.tableTypeArrays;
        slimTableFactory24.tableTypeArrays = strMap36;
        slimTableFactory19.tableTypeArrays = strMap36;
        slimTableFactory1.tableTypeArrays = strMap36;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory40 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory41 = slimTableFactory40.copy();
        boolean boolean43 = slimTableFactory41.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap44 = slimTableFactory41.tableTypeArrays;
        java.lang.String str46 = slimTableFactory41.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory47 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory48 = slimTableFactory47.copy();
        boolean boolean50 = slimTableFactory48.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap51 = slimTableFactory48.tableTypeArrays;
        java.lang.String str53 = slimTableFactory48.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap54 = slimTableFactory48.tableTypeArrays;
        slimTableFactory41.tableTypeArrays = strMap54;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory56 = slimTableFactory41.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass58 = slimTableFactory56.getTableType("");
        boolean boolean60 = slimTableFactory56.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap61 = slimTableFactory56.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap62 = slimTableFactory56.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap62;
        java.util.Map<java.lang.String, java.lang.String> strMap64 = slimTableFactory1.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap65 = slimTableFactory1.tableTypes;
        java.lang.String str67 = slimTableFactory1.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory68 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory69 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory70 = slimTableFactory69.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap71 = slimTableFactory70.tableTypes;
        boolean boolean73 = slimTableFactory70.hasColon("");
        boolean boolean75 = slimTableFactory70.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap76 = slimTableFactory70.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory77 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass79 = slimTableFactory77.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory80 = slimTableFactory77.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap81 = slimTableFactory80.tableTypeArrays;
        slimTableFactory70.tableTypeArrays = strMap81;
        slimTableFactory1.tableTypeArrays = strMap81;
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNull(wildcardClass17);
        org.junit.Assert.assertNotNull(slimTableFactory19);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNull(wildcardClass22);
        org.junit.Assert.assertNotNull(slimTableFactory24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(slimTableFactory27);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNotNull(slimTableFactory30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(slimTableFactory33);
        org.junit.Assert.assertNotNull(slimTableFactory34);
        org.junit.Assert.assertNotNull(slimTableFactory35);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(slimTableFactory41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(strMap44);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(slimTableFactory48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(strMap51);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(slimTableFactory56);
        org.junit.Assert.assertNull(wildcardClass58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(strMap61);
        org.junit.Assert.assertNotNull(strMap62);
        org.junit.Assert.assertNotNull(strMap64);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(slimTableFactory68);
        org.junit.Assert.assertNotNull(slimTableFactory70);
        org.junit.Assert.assertNotNull(strMap71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(strMap76);
        org.junit.Assert.assertNull(wildcardClass79);
        org.junit.Assert.assertNotNull(slimTableFactory80);
        org.junit.Assert.assertNotNull(strMap81);
    }

    @Test
    public void test06812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06812");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory5.getTableType("hi!");
        java.lang.String str9 = slimTableFactory5.makeTableType("hi!");
        java.lang.String str11 = slimTableFactory5.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap12 = slimTableFactory5.tableTypes;
        java.lang.String str14 = slimTableFactory5.getFullTableName("hi!");
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
    }

    @Test
    public void test06813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06813");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory3.copy();
        java.lang.String str6 = slimTableFactory3.makeTableType("");
        java.lang.String str8 = slimTableFactory3.makeTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap9 = slimTableFactory3.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass12 = slimTableFactory10.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory10.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory14.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap16 = slimTableFactory15.tableTypes;
        boolean boolean18 = slimTableFactory15.hasColon("");
        boolean boolean20 = slimTableFactory15.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap21 = slimTableFactory15.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass24 = slimTableFactory22.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = slimTableFactory22.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap26 = slimTableFactory25.tableTypeArrays;
        slimTableFactory15.tableTypeArrays = strMap26;
        slimTableFactory10.tableTypeArrays = strMap26;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap29 = slimTableFactory10.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap30 = slimTableFactory10.tableTypeArrays;
        slimTableFactory3.tableTypeArrays = strMap30;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass33 = slimTableFactory3.getTableType("hi!");
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNotNull(slimTableFactory13);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNull(wildcardClass24);
        org.junit.Assert.assertNotNull(slimTableFactory25);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNull(wildcardClass33);
    }

    @Test
    public void test06814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06814");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory0.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass6 = slimTableFactory4.getTableType("hi!");
        java.lang.String str8 = slimTableFactory4.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory4.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory4.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory4.copy();
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(slimTableFactory11);
    }

    @Test
    public void test06815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06815");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap5 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory6.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory7.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass10 = slimTableFactory7.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory7.copy();
        java.lang.String str13 = slimTableFactory11.getFullTableName("");
        java.lang.String str15 = slimTableFactory11.makeTableType("hi!");
        fitnesse.testsystems.slim.Table table16 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext18 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable19 = slimTableFactory11.makeSlimTable(table16, "", slimTestContext18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
    }

    @Test
    public void test06816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06816");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory4.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap6 = slimTableFactory5.tableTypes;
        boolean boolean8 = slimTableFactory5.hasColon("");
        boolean boolean10 = slimTableFactory5.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap11 = slimTableFactory5.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory12.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory12.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory15.tableTypeArrays;
        slimTableFactory5.tableTypeArrays = strMap16;
        slimTableFactory0.tableTypeArrays = strMap16;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap19 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory0.copy();
        java.lang.String str22 = slimTableFactory20.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = slimTableFactory20.copy();
        java.lang.String str25 = slimTableFactory20.getFullTableName("hi!");
        java.lang.String str27 = slimTableFactory20.makeTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap28 = slimTableFactory20.tableTypes;
        fitnesse.testsystems.slim.Table table29 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext31 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable32 = slimTableFactory20.makeSlimTable(table29, "hi!", slimTestContext31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(slimTableFactory20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(slimTableFactory23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(strMap28);
    }

    @Test
    public void test06817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06817");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        boolean boolean6 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory1.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass9 = slimTableFactory1.getTableType("hi!");
        java.lang.String str11 = slimTableFactory1.makeTableType("");
        boolean boolean13 = slimTableFactory1.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap14 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.Table table15 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext17 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable18 = slimTableFactory1.makeSlimTable(table15, "hi!", slimTestContext17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strMap14);
    }

    @Test
    public void test06818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06818");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        boolean boolean5 = slimTableFactory0.hasColon("");
        java.lang.String str7 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap9 = slimTableFactory0.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass11 = slimTableFactory0.getTableType("");
        java.lang.String str13 = slimTableFactory0.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap15 = null;
        slimTableFactory0.tableTypeArrays = strMap15;
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(strMap14);
    }

    @Test
    public void test06819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06819");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass4 = slimTableFactory1.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap5 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory6.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap8 = slimTableFactory7.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory7.copy();
        fitnesse.testsystems.slim.Table table10 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext12 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable13 = slimTableFactory7.makeSlimTable(table10, "hi!", slimTestContext12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
    }

    @Test
    public void test06820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06820");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory5.copy();
        boolean boolean8 = slimTableFactory5.hasColon("");
        boolean boolean10 = slimTableFactory5.hasColon("hi!");
        boolean boolean12 = slimTableFactory5.hasColon("");
        java.lang.String str14 = slimTableFactory5.makeTableType("hi!");
        fitnesse.testsystems.slim.Table table15 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory5.parseDefineTableTypeRow(table15, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
    }

    @Test
    public void test06821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06821");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass6 = slimTableFactory4.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory4.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap10 = slimTableFactory9.tableTypes;
        boolean boolean12 = slimTableFactory9.hasColon("");
        boolean boolean14 = slimTableFactory9.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap15 = slimTableFactory9.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass18 = slimTableFactory16.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory16.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap20 = slimTableFactory19.tableTypeArrays;
        slimTableFactory9.tableTypeArrays = strMap20;
        slimTableFactory4.tableTypeArrays = strMap20;
        slimTableFactory1.tableTypeArrays = strMap20;
        boolean boolean25 = slimTableFactory1.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap26 = slimTableFactory1.tableTypes;
        java.lang.String str28 = slimTableFactory1.getFullTableName("hi!");
        fitnesse.testsystems.slim.Table table29 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable30 = slimTableFactory1.parseDefineTableTypeTable(table29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertNotNull(slimTableFactory19);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
    }

    @Test
    public void test06822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06822");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        boolean boolean4 = slimTableFactory0.hasColon("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass6 = slimTableFactory0.getTableType("");
        java.lang.String str8 = slimTableFactory0.getFullTableName("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass10 = slimTableFactory0.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass13 = slimTableFactory11.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory11.copy();
        boolean boolean16 = slimTableFactory11.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass18 = slimTableFactory11.getTableType("hi!");
        java.lang.String str20 = slimTableFactory11.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = slimTableFactory11.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass23 = slimTableFactory11.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = slimTableFactory24.copy();
        boolean boolean27 = slimTableFactory25.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = slimTableFactory25.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory29 = slimTableFactory25.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory30 = slimTableFactory25.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap31 = slimTableFactory30.tableTypeArrays;
        slimTableFactory11.tableTypeArrays = strMap31;
        slimTableFactory0.tableTypeArrays = strMap31;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory34 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.Table table35 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext37 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable38 = slimTableFactory0.makeSlimTable(table35, "", slimTestContext37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(slimTableFactory21);
        org.junit.Assert.assertNull(wildcardClass23);
        org.junit.Assert.assertNotNull(slimTableFactory25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(slimTableFactory28);
        org.junit.Assert.assertNotNull(slimTableFactory29);
        org.junit.Assert.assertNotNull(slimTableFactory30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(slimTableFactory34);
    }

    @Test
    public void test06823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06823");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory1.tableTypeArrays;
        java.lang.String str6 = slimTableFactory1.getFullTableName("");
        boolean boolean8 = slimTableFactory1.hasColon("");
        java.lang.String str10 = slimTableFactory1.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap11 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass15 = slimTableFactory13.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory13.copy();
        boolean boolean18 = slimTableFactory13.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass20 = slimTableFactory13.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap21 = slimTableFactory13.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap22 = slimTableFactory13.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap23 = slimTableFactory13.tableTypeArrays;
        boolean boolean25 = slimTableFactory13.hasColon("hi!");
        java.lang.String str27 = slimTableFactory13.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory29 = slimTableFactory28.copy();
        boolean boolean31 = slimTableFactory29.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory32 = slimTableFactory29.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory33 = slimTableFactory29.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory34 = slimTableFactory33.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap35 = slimTableFactory33.tableTypes;
        java.lang.String str37 = slimTableFactory33.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap38 = slimTableFactory33.tableTypeArrays;
        slimTableFactory13.tableTypeArrays = strMap38;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory40 = slimTableFactory13.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory41 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass43 = slimTableFactory41.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory44 = slimTableFactory41.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap45 = slimTableFactory44.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap46 = slimTableFactory44.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap47 = slimTableFactory44.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory48 = slimTableFactory44.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap49 = slimTableFactory48.tableTypeArrays;
        slimTableFactory40.tableTypeArrays = strMap49;
        slimTableFactory12.tableTypeArrays = strMap49;
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(wildcardClass20);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(slimTableFactory29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(slimTableFactory32);
        org.junit.Assert.assertNotNull(slimTableFactory33);
        org.junit.Assert.assertNotNull(slimTableFactory34);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertNotNull(slimTableFactory40);
        org.junit.Assert.assertNull(wildcardClass43);
        org.junit.Assert.assertNotNull(slimTableFactory44);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNotNull(strMap46);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNotNull(slimTableFactory48);
        org.junit.Assert.assertNotNull(strMap49);
    }

    @Test
    public void test06824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06824");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory0.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass6 = slimTableFactory4.getTableType("hi!");
        java.lang.String str8 = slimTableFactory4.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory4.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory4.tableTypeArrays;
        boolean boolean12 = slimTableFactory4.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap13 = slimTableFactory4.tableTypeArrays;
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strMap13);
    }

    @Test
    public void test06825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06825");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory3.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap5 = slimTableFactory4.tableTypes;
        java.lang.String str7 = slimTableFactory4.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory4.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap9 = slimTableFactory4.tableTypes;
        fitnesse.testsystems.slim.Table table10 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable11 = slimTableFactory4.parseDefineTableTypeTable(table10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strMap9);
    }

    @Test
    public void test06826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06826");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        boolean boolean6 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory1.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass9 = slimTableFactory1.getTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap10 = slimTableFactory1.tableTypes;
        java.lang.String str12 = slimTableFactory1.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory13.copy();
        boolean boolean16 = slimTableFactory14.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = slimTableFactory14.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory14.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory14.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap20 = slimTableFactory14.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = slimTableFactory14.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap22 = slimTableFactory21.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap22;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = slimTableFactory1.copy();
        java.lang.String str26 = slimTableFactory24.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap27 = slimTableFactory24.tableTypeArrays;
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(slimTableFactory17);
        org.junit.Assert.assertNotNull(slimTableFactory18);
        org.junit.Assert.assertNotNull(slimTableFactory19);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(slimTableFactory21);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(slimTableFactory24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
        org.junit.Assert.assertNotNull(strMap27);
    }

    @Test
    public void test06827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06827");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass4 = slimTableFactory1.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap5 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory6.copy();
        java.lang.String str9 = slimTableFactory7.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap10 = slimTableFactory7.tableTypes;
        boolean boolean12 = slimTableFactory7.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory7.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory13.tableTypeArrays;
        java.lang.Class<?> wildcardClass15 = strMap14.getClass();
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(slimTableFactory13);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test06828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06828");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        boolean boolean6 = slimTableFactory1.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass8 = slimTableFactory1.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory1.copy();
        java.lang.Class<?> wildcardClass10 = slimTableFactory9.getClass();
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test06829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06829");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.lang.String str3 = slimTableFactory0.getFullTableName("hi!");
        java.lang.String str5 = slimTableFactory0.makeTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory0.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap8 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass11 = slimTableFactory9.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory9.copy();
        boolean boolean14 = slimTableFactory9.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass16 = slimTableFactory9.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory17.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap19 = slimTableFactory18.tableTypes;
        boolean boolean21 = slimTableFactory18.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap22 = slimTableFactory18.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap23 = slimTableFactory18.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = slimTableFactory24.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap26 = slimTableFactory25.tableTypes;
        boolean boolean28 = slimTableFactory25.hasColon("");
        boolean boolean30 = slimTableFactory25.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap31 = slimTableFactory25.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory32 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass34 = slimTableFactory32.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory35 = slimTableFactory32.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap36 = slimTableFactory35.tableTypeArrays;
        slimTableFactory25.tableTypeArrays = strMap36;
        slimTableFactory18.tableTypeArrays = strMap36;
        slimTableFactory9.tableTypeArrays = strMap36;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory40 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass42 = slimTableFactory40.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap43 = slimTableFactory40.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory44 = slimTableFactory40.copy();
        boolean boolean46 = slimTableFactory44.hasColon("");
        java.lang.String str48 = slimTableFactory44.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap49 = slimTableFactory44.tableTypeArrays;
        slimTableFactory9.tableTypeArrays = strMap49;
        slimTableFactory0.tableTypeArrays = strMap49;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass53 = slimTableFactory0.getTableType("hi!");
        fitnesse.testsystems.slim.Table table54 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext56 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable57 = slimTableFactory0.makeSlimTable(table54, "", slimTestContext56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!" + "'", str3, "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(wildcardClass16);
        org.junit.Assert.assertNotNull(slimTableFactory18);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(slimTableFactory25);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNull(wildcardClass34);
        org.junit.Assert.assertNotNull(slimTableFactory35);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNull(wildcardClass42);
        org.junit.Assert.assertNotNull(strMap43);
        org.junit.Assert.assertNotNull(slimTableFactory44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(strMap49);
        org.junit.Assert.assertNull(wildcardClass53);
    }

    @Test
    public void test06830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06830");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass4 = slimTableFactory1.getTableType("hi!");
        java.lang.String str6 = slimTableFactory1.getFullTableName("");
        java.lang.String str8 = slimTableFactory1.makeTableType("hi!");
        java.lang.String str10 = slimTableFactory1.makeTableType("hi!");
        fitnesse.testsystems.slim.Table table11 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext13 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable14 = slimTableFactory1.makeSlimTable(table11, "", slimTestContext13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
    }

    @Test
    public void test06831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06831");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        boolean boolean5 = slimTableFactory0.hasColon("");
        java.lang.String str7 = slimTableFactory0.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory9.copy();
        boolean boolean12 = slimTableFactory10.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap13 = slimTableFactory10.tableTypeArrays;
        java.lang.String str15 = slimTableFactory10.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = slimTableFactory16.copy();
        boolean boolean19 = slimTableFactory17.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap20 = slimTableFactory17.tableTypeArrays;
        java.lang.String str22 = slimTableFactory17.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap23 = slimTableFactory17.tableTypeArrays;
        slimTableFactory10.tableTypeArrays = strMap23;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = slimTableFactory10.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = slimTableFactory10.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass29 = slimTableFactory27.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory30 = slimTableFactory27.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap31 = slimTableFactory30.tableTypeArrays;
        slimTableFactory10.tableTypeArrays = strMap31;
        slimTableFactory0.tableTypeArrays = strMap31;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory34 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory35 = slimTableFactory34.copy();
        boolean boolean37 = slimTableFactory34.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap38 = slimTableFactory34.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap38;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory40 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap41 = slimTableFactory40.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory42 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory43 = slimTableFactory42.copy();
        boolean boolean45 = slimTableFactory43.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory46 = slimTableFactory43.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory47 = slimTableFactory43.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory48 = slimTableFactory47.copy();
        boolean boolean50 = slimTableFactory47.hasColon("");
        boolean boolean52 = slimTableFactory47.hasColon("hi!");
        boolean boolean54 = slimTableFactory47.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap55 = slimTableFactory47.tableTypeArrays;
        slimTableFactory40.tableTypeArrays = strMap55;
        java.util.Map<java.lang.String, java.lang.String> strMap57 = slimTableFactory40.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap58 = slimTableFactory40.tableTypeArrays;
        java.lang.String str60 = slimTableFactory40.getFullTableName("hi!");
        fitnesse.testsystems.slim.Table table61 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext63 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable64 = slimTableFactory40.makeSlimTable(table61, "", slimTestContext63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(slimTableFactory17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(slimTableFactory25);
        org.junit.Assert.assertNotNull(slimTableFactory26);
        org.junit.Assert.assertNull(wildcardClass29);
        org.junit.Assert.assertNotNull(slimTableFactory30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(slimTableFactory35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertNotNull(slimTableFactory40);
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertNotNull(slimTableFactory43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(slimTableFactory46);
        org.junit.Assert.assertNotNull(slimTableFactory47);
        org.junit.Assert.assertNotNull(slimTableFactory48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(strMap55);
        org.junit.Assert.assertNotNull(strMap57);
        org.junit.Assert.assertNotNull(strMap58);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "hi!" + "'", str60, "hi!");
    }

    @Test
    public void test06832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06832");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory4.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap6 = slimTableFactory5.tableTypes;
        boolean boolean8 = slimTableFactory5.hasColon("");
        boolean boolean10 = slimTableFactory5.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap11 = slimTableFactory5.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory12.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory12.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory15.tableTypeArrays;
        slimTableFactory5.tableTypeArrays = strMap16;
        slimTableFactory0.tableTypeArrays = strMap16;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = slimTableFactory20.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = slimTableFactory21.copy();
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(slimTableFactory19);
        org.junit.Assert.assertNotNull(slimTableFactory20);
        org.junit.Assert.assertNotNull(slimTableFactory21);
        org.junit.Assert.assertNotNull(slimTableFactory22);
    }

    @Test
    public void test06833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06833");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.lang.String str3 = slimTableFactory0.getFullTableName("hi!");
        java.lang.String str5 = slimTableFactory0.makeTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory0.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap8 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory0.copy();
        java.lang.String str11 = slimTableFactory0.makeTableType("hi!");
        java.lang.String str13 = slimTableFactory0.getFullTableName("hi!");
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!" + "'", str3, "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
    }

    @Test
    public void test06834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06834");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory1.tableTypeArrays;
        java.lang.String str6 = slimTableFactory1.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        boolean boolean11 = slimTableFactory9.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory9.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap13 = slimTableFactory9.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass16 = slimTableFactory14.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap17 = slimTableFactory14.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass19 = slimTableFactory14.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass22 = slimTableFactory20.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = slimTableFactory20.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = slimTableFactory23.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = slimTableFactory25.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap27 = slimTableFactory25.tableTypeArrays;
        slimTableFactory23.tableTypeArrays = strMap27;
        slimTableFactory14.tableTypeArrays = strMap27;
        slimTableFactory9.tableTypeArrays = strMap27;
        slimTableFactory1.tableTypeArrays = strMap27;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory32 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass34 = slimTableFactory32.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory35 = slimTableFactory32.copy();
        java.lang.String str37 = slimTableFactory35.getFullTableName("hi!");
        java.lang.String str39 = slimTableFactory35.makeTableType("hi!");
        java.lang.String str41 = slimTableFactory35.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory42 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory43 = slimTableFactory42.copy();
        boolean boolean45 = slimTableFactory43.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap46 = slimTableFactory43.tableTypeArrays;
        java.lang.String str48 = slimTableFactory43.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory49 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory50 = slimTableFactory49.copy();
        boolean boolean52 = slimTableFactory50.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap53 = slimTableFactory50.tableTypeArrays;
        java.lang.String str55 = slimTableFactory50.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap56 = slimTableFactory50.tableTypeArrays;
        slimTableFactory43.tableTypeArrays = strMap56;
        java.util.Map<java.lang.String, java.lang.String> strMap58 = slimTableFactory43.tableTypeArrays;
        slimTableFactory35.tableTypeArrays = strMap58;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap60 = slimTableFactory35.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory61 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory62 = slimTableFactory61.copy();
        boolean boolean64 = slimTableFactory62.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap65 = slimTableFactory62.tableTypeArrays;
        java.lang.String str67 = slimTableFactory62.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory68 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory69 = slimTableFactory68.copy();
        boolean boolean71 = slimTableFactory69.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap72 = slimTableFactory69.tableTypeArrays;
        java.lang.String str74 = slimTableFactory69.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap75 = slimTableFactory69.tableTypeArrays;
        slimTableFactory62.tableTypeArrays = strMap75;
        java.util.Map<java.lang.String, java.lang.String> strMap77 = slimTableFactory62.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass79 = slimTableFactory62.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap80 = slimTableFactory62.tableTypeArrays;
        slimTableFactory35.tableTypeArrays = strMap80;
        slimTableFactory1.tableTypeArrays = strMap80;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap83 = slimTableFactory1.tableTypes;
        java.lang.String str85 = slimTableFactory1.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory86 = slimTableFactory1.copy();
        boolean boolean88 = slimTableFactory86.hasColon("");
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNull(wildcardClass16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNull(wildcardClass22);
        org.junit.Assert.assertNotNull(slimTableFactory23);
        org.junit.Assert.assertNotNull(slimTableFactory24);
        org.junit.Assert.assertNotNull(slimTableFactory26);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNull(wildcardClass34);
        org.junit.Assert.assertNotNull(slimTableFactory35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hi!" + "'", str39, "hi!");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(strMap46);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(slimTableFactory50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(strMap53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(strMap56);
        org.junit.Assert.assertNotNull(strMap58);
        org.junit.Assert.assertNotNull(strMap60);
        org.junit.Assert.assertNotNull(slimTableFactory62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(slimTableFactory69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(strMap72);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(strMap75);
        org.junit.Assert.assertNotNull(strMap77);
        org.junit.Assert.assertNull(wildcardClass79);
        org.junit.Assert.assertNotNull(strMap80);
        org.junit.Assert.assertNotNull(strMap83);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertNotNull(slimTableFactory86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test06835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06835");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        boolean boolean6 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory1.tableTypes;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap8 = slimTableFactory1.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass10 = slimTableFactory1.getTableType("");
        fitnesse.testsystems.slim.Table table11 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable12 = slimTableFactory1.parseDefineTableTypeTable(table11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNull(wildcardClass10);
    }

    @Test
    public void test06836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06836");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory1.tableTypeArrays;
        java.lang.String str6 = slimTableFactory1.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory7.copy();
        boolean boolean10 = slimTableFactory8.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory8.tableTypeArrays;
        java.lang.String str13 = slimTableFactory8.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory8.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap14;
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory1.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass18 = slimTableFactory1.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass21 = slimTableFactory19.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = slimTableFactory19.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = slimTableFactory23.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap25 = slimTableFactory24.tableTypes;
        boolean boolean27 = slimTableFactory24.hasColon("");
        boolean boolean29 = slimTableFactory24.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap30 = slimTableFactory24.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory31 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass33 = slimTableFactory31.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory34 = slimTableFactory31.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap35 = slimTableFactory34.tableTypeArrays;
        slimTableFactory24.tableTypeArrays = strMap35;
        slimTableFactory19.tableTypeArrays = strMap35;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap38 = slimTableFactory19.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory39 = slimTableFactory19.copy();
        java.lang.String str41 = slimTableFactory39.makeTableType("");
        boolean boolean43 = slimTableFactory39.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory44 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass46 = slimTableFactory44.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory47 = slimTableFactory44.copy();
        boolean boolean49 = slimTableFactory44.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass51 = slimTableFactory44.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory52 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory53 = slimTableFactory52.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap54 = slimTableFactory53.tableTypes;
        boolean boolean56 = slimTableFactory53.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap57 = slimTableFactory53.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap58 = slimTableFactory53.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory59 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory60 = slimTableFactory59.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap61 = slimTableFactory60.tableTypes;
        boolean boolean63 = slimTableFactory60.hasColon("");
        boolean boolean65 = slimTableFactory60.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap66 = slimTableFactory60.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory67 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass69 = slimTableFactory67.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory70 = slimTableFactory67.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap71 = slimTableFactory70.tableTypeArrays;
        slimTableFactory60.tableTypeArrays = strMap71;
        slimTableFactory53.tableTypeArrays = strMap71;
        slimTableFactory44.tableTypeArrays = strMap71;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory75 = slimTableFactory44.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap76 = slimTableFactory75.tableTypeArrays;
        slimTableFactory39.tableTypeArrays = strMap76;
        slimTableFactory1.tableTypeArrays = strMap76;
        java.lang.String str80 = slimTableFactory1.makeTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap81 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.Table table82 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext84 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable85 = slimTableFactory1.makeSlimTable(table82, "hi!", slimTestContext84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertNull(wildcardClass21);
        org.junit.Assert.assertNotNull(slimTableFactory22);
        org.junit.Assert.assertNotNull(slimTableFactory24);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNull(wildcardClass33);
        org.junit.Assert.assertNotNull(slimTableFactory34);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertNotNull(slimTableFactory39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(wildcardClass46);
        org.junit.Assert.assertNotNull(slimTableFactory47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(wildcardClass51);
        org.junit.Assert.assertNotNull(slimTableFactory53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(strMap57);
        org.junit.Assert.assertNotNull(strMap58);
        org.junit.Assert.assertNotNull(slimTableFactory60);
        org.junit.Assert.assertNotNull(strMap61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNull(wildcardClass69);
        org.junit.Assert.assertNotNull(slimTableFactory70);
        org.junit.Assert.assertNotNull(strMap71);
        org.junit.Assert.assertNotNull(slimTableFactory75);
        org.junit.Assert.assertNotNull(strMap76);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertNotNull(strMap81);
    }

    @Test
    public void test06837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06837");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass4 = slimTableFactory1.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory5.copy();
        boolean boolean8 = slimTableFactory6.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory6.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory6.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory11.copy();
        boolean boolean14 = slimTableFactory12.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory12.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory12.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = slimTableFactory12.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = slimTableFactory17.tableTypeArrays;
        slimTableFactory6.tableTypeArrays = strMap18;
        slimTableFactory1.tableTypeArrays = strMap18;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap21 = slimTableFactory1.tableTypes;
        java.lang.String str23 = slimTableFactory1.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap24 = slimTableFactory1.tableTypeArrays;
        java.lang.String str26 = slimTableFactory1.makeTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass28 = slimTableFactory1.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap29 = slimTableFactory1.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap30 = slimTableFactory1.tableTypeArrays;
        java.lang.Class<?> wildcardClass31 = strMap30.getClass();
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertNotNull(slimTableFactory17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNull(wildcardClass28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test06838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06838");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory1.tableTypeArrays;
        java.lang.String str6 = slimTableFactory1.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory7.copy();
        boolean boolean10 = slimTableFactory8.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory8.tableTypeArrays;
        java.lang.String str13 = slimTableFactory8.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory8.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap14;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = slimTableFactory1.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap19 = slimTableFactory1.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass21 = slimTableFactory1.getTableType("hi!");
        fitnesse.testsystems.slim.Table table22 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable23 = slimTableFactory1.parseDefineTableTypeTable(table22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertNotNull(slimTableFactory17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNull(wildcardClass21);
    }

    @Test
    public void test06839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06839");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        boolean boolean5 = slimTableFactory0.hasColon("");
        java.lang.String str7 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap9 = null;
        slimTableFactory0.tableTypeArrays = strMap9;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap11 = slimTableFactory0.tableTypes;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap12 = slimTableFactory0.tableTypes;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap13 = slimTableFactory0.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass15 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.Table table16 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory0.parseDefineTableTypeRow(table16, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNull(wildcardClass15);
    }

    @Test
    public void test06840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06840");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        java.lang.String str5 = slimTableFactory0.makeTableType("hi!");
        java.lang.String str7 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap8 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory9.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass12 = slimTableFactory9.getTableType("");
        fitnesse.testsystems.slim.Table table13 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext15 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable16 = slimTableFactory9.makeSlimTable(table13, "hi!", slimTestContext15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNull(wildcardClass12);
    }

    @Test
    public void test06841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06841");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory1.tableTypeArrays;
        java.lang.String str6 = slimTableFactory1.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory7.copy();
        boolean boolean10 = slimTableFactory8.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory8.tableTypeArrays;
        java.lang.String str13 = slimTableFactory8.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory8.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap14;
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory1.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap17 = slimTableFactory1.tableTypes;
        java.lang.String str19 = slimTableFactory1.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = slimTableFactory1.copy();
        java.lang.String str23 = slimTableFactory21.makeTableType("");
        boolean boolean25 = slimTableFactory21.hasColon("hi!");
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory20);
        org.junit.Assert.assertNotNull(slimTableFactory21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test06842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06842");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap5 = slimTableFactory1.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory9.copy();
        boolean boolean12 = slimTableFactory10.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap13 = slimTableFactory10.tableTypeArrays;
        java.lang.String str15 = slimTableFactory10.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = slimTableFactory16.copy();
        boolean boolean19 = slimTableFactory17.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap20 = slimTableFactory17.tableTypeArrays;
        java.lang.String str22 = slimTableFactory17.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap23 = slimTableFactory17.tableTypeArrays;
        slimTableFactory10.tableTypeArrays = strMap23;
        java.util.Map<java.lang.String, java.lang.String> strMap25 = slimTableFactory10.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap26 = slimTableFactory10.tableTypes;
        java.lang.String str28 = slimTableFactory10.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory29 = slimTableFactory10.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory30 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory31 = slimTableFactory30.copy();
        boolean boolean33 = slimTableFactory31.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory34 = slimTableFactory31.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap35 = slimTableFactory31.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory36 = slimTableFactory31.copy();
        boolean boolean38 = slimTableFactory36.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap39 = slimTableFactory36.tableTypeArrays;
        slimTableFactory29.tableTypeArrays = strMap39;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory41 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass43 = slimTableFactory41.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap44 = slimTableFactory41.tableTypeArrays;
        slimTableFactory29.tableTypeArrays = strMap44;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap46 = slimTableFactory29.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory47 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory48 = slimTableFactory47.copy();
        boolean boolean50 = slimTableFactory48.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory51 = slimTableFactory48.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory52 = slimTableFactory48.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap53 = slimTableFactory52.tableTypeArrays;
        boolean boolean55 = slimTableFactory52.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory56 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory57 = slimTableFactory56.copy();
        boolean boolean59 = slimTableFactory57.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory60 = slimTableFactory57.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory61 = slimTableFactory57.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory62 = slimTableFactory61.copy();
        boolean boolean64 = slimTableFactory61.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass66 = slimTableFactory61.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap67 = slimTableFactory61.tableTypeArrays;
        slimTableFactory52.tableTypeArrays = strMap67;
        slimTableFactory29.tableTypeArrays = strMap67;
        slimTableFactory1.tableTypeArrays = strMap67;
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(slimTableFactory17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory29);
        org.junit.Assert.assertNotNull(slimTableFactory31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(slimTableFactory34);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(slimTableFactory36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNull(wildcardClass43);
        org.junit.Assert.assertNotNull(strMap44);
        org.junit.Assert.assertNotNull(strMap46);
        org.junit.Assert.assertNotNull(slimTableFactory48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(slimTableFactory51);
        org.junit.Assert.assertNotNull(slimTableFactory52);
        org.junit.Assert.assertNotNull(strMap53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(slimTableFactory57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(slimTableFactory60);
        org.junit.Assert.assertNotNull(slimTableFactory61);
        org.junit.Assert.assertNotNull(slimTableFactory62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(wildcardClass66);
        org.junit.Assert.assertNotNull(strMap67);
    }

    @Test
    public void test06843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06843");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory0.copy();
        boolean boolean9 = slimTableFactory0.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap11 = slimTableFactory10.tableTypes;
        fitnesse.testsystems.slim.Table table12 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext14 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable15 = slimTableFactory10.makeSlimTable(table12, "", slimTestContext14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNotNull(strMap11);
    }

    @Test
    public void test06844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06844");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory5.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass9 = slimTableFactory7.getTableType("");
        boolean boolean11 = slimTableFactory7.hasColon("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass13 = slimTableFactory7.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory14.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap16 = slimTableFactory15.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass19 = slimTableFactory17.getTableType("");
        boolean boolean21 = slimTableFactory17.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap22 = slimTableFactory17.tableTypeArrays;
        slimTableFactory15.tableTypeArrays = strMap22;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = slimTableFactory24.copy();
        boolean boolean27 = slimTableFactory25.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = slimTableFactory25.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory29 = slimTableFactory25.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory30 = slimTableFactory29.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory31 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass33 = slimTableFactory31.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory34 = slimTableFactory31.copy();
        boolean boolean36 = slimTableFactory31.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap37 = slimTableFactory31.tableTypeArrays;
        slimTableFactory29.tableTypeArrays = strMap37;
        java.util.Map<java.lang.String, java.lang.String> strMap39 = slimTableFactory29.tableTypeArrays;
        slimTableFactory15.tableTypeArrays = strMap39;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory41 = slimTableFactory15.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap42 = slimTableFactory41.tableTypeArrays;
        slimTableFactory7.tableTypeArrays = strMap42;
        slimTableFactory5.tableTypeArrays = strMap42;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory45 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory46 = slimTableFactory45.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap47 = slimTableFactory46.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory48 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass50 = slimTableFactory48.getTableType("");
        boolean boolean52 = slimTableFactory48.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap53 = slimTableFactory48.tableTypeArrays;
        slimTableFactory46.tableTypeArrays = strMap53;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory55 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory56 = slimTableFactory55.copy();
        boolean boolean58 = slimTableFactory56.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory59 = slimTableFactory56.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory60 = slimTableFactory56.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory61 = slimTableFactory60.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory62 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass64 = slimTableFactory62.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory65 = slimTableFactory62.copy();
        boolean boolean67 = slimTableFactory62.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap68 = slimTableFactory62.tableTypeArrays;
        slimTableFactory60.tableTypeArrays = strMap68;
        java.util.Map<java.lang.String, java.lang.String> strMap70 = slimTableFactory60.tableTypeArrays;
        slimTableFactory46.tableTypeArrays = strMap70;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory72 = slimTableFactory46.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap73 = slimTableFactory72.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap74 = slimTableFactory72.tableTypeArrays;
        boolean boolean76 = slimTableFactory72.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap77 = slimTableFactory72.tableTypeArrays;
        slimTableFactory5.tableTypeArrays = strMap77;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap79 = slimTableFactory5.tableTypes;
        java.lang.String str81 = slimTableFactory5.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory82 = slimTableFactory5.copy();
        java.lang.String str84 = slimTableFactory5.makeTableType("");
        boolean boolean86 = slimTableFactory5.hasColon("");
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(slimTableFactory25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(slimTableFactory28);
        org.junit.Assert.assertNotNull(slimTableFactory29);
        org.junit.Assert.assertNotNull(slimTableFactory30);
        org.junit.Assert.assertNull(wildcardClass33);
        org.junit.Assert.assertNotNull(slimTableFactory34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNotNull(slimTableFactory41);
        org.junit.Assert.assertNotNull(strMap42);
        org.junit.Assert.assertNotNull(slimTableFactory46);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNull(wildcardClass50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(strMap53);
        org.junit.Assert.assertNotNull(slimTableFactory56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(slimTableFactory59);
        org.junit.Assert.assertNotNull(slimTableFactory60);
        org.junit.Assert.assertNotNull(slimTableFactory61);
        org.junit.Assert.assertNull(wildcardClass64);
        org.junit.Assert.assertNotNull(slimTableFactory65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(strMap68);
        org.junit.Assert.assertNotNull(strMap70);
        org.junit.Assert.assertNotNull(slimTableFactory72);
        org.junit.Assert.assertNotNull(strMap73);
        org.junit.Assert.assertNotNull(strMap74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(strMap77);
        org.junit.Assert.assertNotNull(strMap79);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertNotNull(slimTableFactory82);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test06845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06845");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass5 = slimTableFactory1.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.Table table9 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable10 = slimTableFactory1.parseDefineTableTypeTable(table9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertNotNull(strMap8);
    }

    @Test
    public void test06846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06846");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory5.copy();
        boolean boolean8 = slimTableFactory5.hasColon("hi!");
        java.lang.String str10 = slimTableFactory5.getFullTableName("hi!");
        fitnesse.testsystems.slim.Table table11 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable12 = slimTableFactory5.parseDefineTableTypeTable(table11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
    }

    @Test
    public void test06847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06847");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.lang.String str3 = slimTableFactory0.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory4.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory5.getTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap8 = slimTableFactory5.tableTypes;
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!" + "'", str3, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNotNull(strMap8);
    }

    @Test
    public void test06848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06848");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass8 = slimTableFactory6.getTableType("");
        boolean boolean10 = slimTableFactory6.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory6.tableTypeArrays;
        slimTableFactory5.tableTypeArrays = strMap11;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory5.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory13.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory13.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass17 = slimTableFactory13.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap18 = slimTableFactory13.tableTypeArrays;
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(slimTableFactory13);
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertNull(wildcardClass17);
        org.junit.Assert.assertNotNull(strMap18);
    }

    @Test
    public void test06849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06849");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory5.copy();
        boolean boolean8 = slimTableFactory5.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory5.copy();
        java.lang.String str11 = slimTableFactory9.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory12.copy();
        boolean boolean15 = slimTableFactory13.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory13.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = slimTableFactory13.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory17.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass21 = slimTableFactory19.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = slimTableFactory19.copy();
        boolean boolean24 = slimTableFactory19.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap25 = slimTableFactory19.tableTypeArrays;
        slimTableFactory17.tableTypeArrays = strMap25;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = slimTableFactory17.copy();
        java.lang.String str29 = slimTableFactory17.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap30 = slimTableFactory17.tableTypeArrays;
        slimTableFactory9.tableTypeArrays = strMap30;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap32 = slimTableFactory9.tableTypes;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap33 = slimTableFactory9.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory34 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass36 = slimTableFactory34.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory37 = slimTableFactory34.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap38 = slimTableFactory37.tableTypeArrays;
        java.lang.String str40 = slimTableFactory37.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap41 = slimTableFactory37.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass43 = slimTableFactory37.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory44 = slimTableFactory37.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap45 = slimTableFactory44.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap46 = slimTableFactory44.tableTypeArrays;
        slimTableFactory9.tableTypeArrays = strMap46;
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(slimTableFactory13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertNotNull(slimTableFactory17);
        org.junit.Assert.assertNotNull(slimTableFactory18);
        org.junit.Assert.assertNull(wildcardClass21);
        org.junit.Assert.assertNotNull(slimTableFactory22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(slimTableFactory27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(wildcardClass36);
        org.junit.Assert.assertNotNull(slimTableFactory37);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "hi!" + "'", str40, "hi!");
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertNull(wildcardClass43);
        org.junit.Assert.assertNotNull(slimTableFactory44);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNotNull(strMap46);
    }

    @Test
    public void test06850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06850");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap5 = slimTableFactory1.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory1.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory9.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory11.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap13 = null;
        slimTableFactory11.tableTypeArrays = strMap13;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass16 = slimTableFactory11.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory17.copy();
        boolean boolean20 = slimTableFactory18.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = slimTableFactory18.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = slimTableFactory18.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass25 = slimTableFactory23.getTableType("");
        boolean boolean27 = slimTableFactory23.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap28 = slimTableFactory23.tableTypeArrays;
        slimTableFactory22.tableTypeArrays = strMap28;
        slimTableFactory11.tableTypeArrays = strMap28;
        boolean boolean32 = slimTableFactory11.hasColon("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass34 = slimTableFactory11.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap35 = slimTableFactory11.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap36 = slimTableFactory11.tableTypeArrays;
        slimTableFactory9.tableTypeArrays = strMap36;
        fitnesse.testsystems.slim.Table table38 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext40 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable41 = slimTableFactory9.makeSlimTable(table38, "", slimTestContext40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertNull(wildcardClass16);
        org.junit.Assert.assertNotNull(slimTableFactory18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(slimTableFactory21);
        org.junit.Assert.assertNotNull(slimTableFactory22);
        org.junit.Assert.assertNull(wildcardClass25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(wildcardClass34);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(strMap36);
    }

    @Test
    public void test06851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06851");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass5 = slimTableFactory3.getTableType("");
        boolean boolean7 = slimTableFactory3.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory3.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap8;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory10.copy();
        boolean boolean13 = slimTableFactory11.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory11.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory11.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory15.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass19 = slimTableFactory17.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory17.copy();
        boolean boolean22 = slimTableFactory17.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap23 = slimTableFactory17.tableTypeArrays;
        slimTableFactory15.tableTypeArrays = strMap23;
        java.util.Map<java.lang.String, java.lang.String> strMap25 = slimTableFactory15.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap25;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap28 = slimTableFactory27.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap29 = slimTableFactory27.tableTypeArrays;
        java.lang.String str31 = slimTableFactory27.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory32 = slimTableFactory27.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap33 = slimTableFactory27.tableTypes;
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(slimTableFactory20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(slimTableFactory27);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory32);
        org.junit.Assert.assertNotNull(strMap33);
    }

    @Test
    public void test06852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06852");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory1.tableTypeArrays;
        java.lang.String str6 = slimTableFactory1.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory7.copy();
        boolean boolean10 = slimTableFactory8.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory8.tableTypeArrays;
        java.lang.String str13 = slimTableFactory8.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory8.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap14;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap17 = slimTableFactory1.tableTypes;
        boolean boolean19 = slimTableFactory1.hasColon("");
        boolean boolean21 = slimTableFactory1.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass24 = slimTableFactory22.getTableType("");
        boolean boolean26 = slimTableFactory22.hasColon("");
        java.lang.String str28 = slimTableFactory22.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap29 = slimTableFactory22.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory30 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass32 = slimTableFactory30.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap33 = slimTableFactory30.tableTypeArrays;
        boolean boolean35 = slimTableFactory30.hasColon("");
        java.lang.String str37 = slimTableFactory30.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap38 = slimTableFactory30.tableTypeArrays;
        slimTableFactory22.tableTypeArrays = strMap38;
        java.lang.String str41 = slimTableFactory22.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap42 = slimTableFactory22.tableTypes;
        java.lang.String str44 = slimTableFactory22.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory45 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory46 = slimTableFactory45.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap47 = null;
        slimTableFactory45.tableTypeArrays = strMap47;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass50 = slimTableFactory45.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory51 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory52 = slimTableFactory51.copy();
        boolean boolean54 = slimTableFactory52.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory55 = slimTableFactory52.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory56 = slimTableFactory52.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory57 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass59 = slimTableFactory57.getTableType("");
        boolean boolean61 = slimTableFactory57.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap62 = slimTableFactory57.tableTypeArrays;
        slimTableFactory56.tableTypeArrays = strMap62;
        slimTableFactory45.tableTypeArrays = strMap62;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory65 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass67 = slimTableFactory65.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory68 = slimTableFactory65.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory69 = slimTableFactory68.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap70 = slimTableFactory68.tableTypeArrays;
        slimTableFactory45.tableTypeArrays = strMap70;
        java.util.Map<java.lang.String, java.lang.String> strMap72 = slimTableFactory45.tableTypeArrays;
        slimTableFactory22.tableTypeArrays = strMap72;
        slimTableFactory1.tableTypeArrays = strMap72;
        java.lang.String str76 = slimTableFactory1.getFullTableName("");
        java.lang.String str78 = slimTableFactory1.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory79 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.Table table80 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable81 = slimTableFactory79.parseDefineTableTypeTable(table80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(wildcardClass24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNull(wildcardClass32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertNotNull(strMap42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi!" + "'", str44, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory46);
        org.junit.Assert.assertNull(wildcardClass50);
        org.junit.Assert.assertNotNull(slimTableFactory52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(slimTableFactory55);
        org.junit.Assert.assertNotNull(slimTableFactory56);
        org.junit.Assert.assertNull(wildcardClass59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(strMap62);
        org.junit.Assert.assertNull(wildcardClass67);
        org.junit.Assert.assertNotNull(slimTableFactory68);
        org.junit.Assert.assertNotNull(slimTableFactory69);
        org.junit.Assert.assertNotNull(strMap70);
        org.junit.Assert.assertNotNull(strMap72);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "hi!" + "'", str78, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory79);
    }

    @Test
    public void test06853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06853");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory0.getTableType("hi!");
        java.lang.String str9 = slimTableFactory0.getFullTableName("");
        java.lang.String str11 = slimTableFactory0.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory0.copy();
        boolean boolean14 = slimTableFactory0.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory15.copy();
        boolean boolean18 = slimTableFactory16.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory16.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory16.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = slimTableFactory16.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap22 = slimTableFactory16.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = slimTableFactory23.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap25 = slimTableFactory23.tableTypeArrays;
        slimTableFactory16.tableTypeArrays = strMap25;
        java.lang.String str28 = slimTableFactory16.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap29 = slimTableFactory16.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap30 = slimTableFactory16.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap30;
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(slimTableFactory19);
        org.junit.Assert.assertNotNull(slimTableFactory20);
        org.junit.Assert.assertNotNull(slimTableFactory21);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(slimTableFactory24);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(strMap30);
    }

    @Test
    public void test06854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06854");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory1.tableTypeArrays;
        java.lang.String str6 = slimTableFactory1.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory7.copy();
        boolean boolean10 = slimTableFactory8.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory8.tableTypeArrays;
        java.lang.String str13 = slimTableFactory8.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory8.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap14;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap17 = slimTableFactory16.tableTypes;
        java.lang.Class<?> wildcardClass18 = strMap17.getClass();
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test06855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06855");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory0.getTableType("hi!");
        boolean boolean9 = slimTableFactory0.hasColon("hi!");
        java.lang.String str11 = slimTableFactory0.getFullTableName("hi!");
        java.lang.String str13 = slimTableFactory0.makeTableType("");
        java.lang.String str15 = slimTableFactory0.makeTableType("hi!");
        fitnesse.testsystems.slim.Table table16 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable17 = slimTableFactory0.parseDefineTableTypeTable(table16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
    }

    @Test
    public void test06856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06856");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass5 = slimTableFactory3.getTableType("");
        boolean boolean7 = slimTableFactory3.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory3.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap8;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory10.copy();
        boolean boolean13 = slimTableFactory11.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory11.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory11.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory15.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass19 = slimTableFactory17.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory17.copy();
        boolean boolean22 = slimTableFactory17.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap23 = slimTableFactory17.tableTypeArrays;
        slimTableFactory15.tableTypeArrays = strMap23;
        java.util.Map<java.lang.String, java.lang.String> strMap25 = slimTableFactory15.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap25;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = slimTableFactory1.copy();
        java.lang.String str30 = slimTableFactory28.getFullTableName("");
        java.lang.String str32 = slimTableFactory28.getFullTableName("");
        fitnesse.testsystems.slim.Table table33 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory28.parseDefineTableTypeRow(table33, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(slimTableFactory20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(slimTableFactory27);
        org.junit.Assert.assertNotNull(slimTableFactory28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
    }

    @Test
    public void test06857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06857");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        boolean boolean4 = slimTableFactory0.hasColon("");
        java.lang.String str6 = slimTableFactory0.getFullTableName("hi!");
        java.lang.String str8 = slimTableFactory0.getFullTableName("");
        boolean boolean10 = slimTableFactory0.hasColon("hi!");
        java.lang.String str12 = slimTableFactory0.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory13.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap15 = null;
        slimTableFactory13.tableTypeArrays = strMap15;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass18 = slimTableFactory13.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory19.copy();
        boolean boolean22 = slimTableFactory20.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = slimTableFactory20.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = slimTableFactory20.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass27 = slimTableFactory25.getTableType("");
        boolean boolean29 = slimTableFactory25.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap30 = slimTableFactory25.tableTypeArrays;
        slimTableFactory24.tableTypeArrays = strMap30;
        slimTableFactory13.tableTypeArrays = strMap30;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory33 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass35 = slimTableFactory33.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory36 = slimTableFactory33.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory37 = slimTableFactory36.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap38 = slimTableFactory36.tableTypeArrays;
        slimTableFactory13.tableTypeArrays = strMap38;
        java.util.Map<java.lang.String, java.lang.String> strMap40 = slimTableFactory13.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory41 = slimTableFactory13.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap42 = slimTableFactory41.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap42;
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertNotNull(slimTableFactory20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(slimTableFactory23);
        org.junit.Assert.assertNotNull(slimTableFactory24);
        org.junit.Assert.assertNull(wildcardClass27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNull(wildcardClass35);
        org.junit.Assert.assertNotNull(slimTableFactory36);
        org.junit.Assert.assertNotNull(slimTableFactory37);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertNotNull(slimTableFactory41);
        org.junit.Assert.assertNotNull(strMap42);
    }

    @Test
    public void test06858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06858");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        boolean boolean6 = slimTableFactory1.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass8 = slimTableFactory1.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.Table table10 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable11 = slimTableFactory9.parseDefineTableTypeTable(table10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
    }

    @Test
    public void test06859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06859");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap9 = slimTableFactory8.tableTypeArrays;
        java.lang.String str11 = slimTableFactory8.makeTableType("hi!");
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
    }

    @Test
    public void test06860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06860");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass4 = slimTableFactory1.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap5 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory6.copy();
        java.lang.String str9 = slimTableFactory7.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap10 = slimTableFactory7.tableTypes;
        boolean boolean12 = slimTableFactory7.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory7.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory13.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap15 = slimTableFactory13.tableTypeArrays;
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(slimTableFactory13);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(strMap15);
    }

    @Test
    public void test06861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06861");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory4.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap6 = slimTableFactory5.tableTypes;
        boolean boolean8 = slimTableFactory5.hasColon("");
        boolean boolean10 = slimTableFactory5.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap11 = slimTableFactory5.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory12.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory12.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory15.tableTypeArrays;
        slimTableFactory5.tableTypeArrays = strMap16;
        slimTableFactory0.tableTypeArrays = strMap16;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap19 = slimTableFactory0.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap20 = slimTableFactory0.tableTypeArrays;
        boolean boolean22 = slimTableFactory0.hasColon("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass24 = slimTableFactory0.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = slimTableFactory0.copy();
        java.lang.String str27 = slimTableFactory25.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap28 = slimTableFactory25.tableTypes;
        java.lang.Class<?> wildcardClass29 = strMap28.getClass();
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(wildcardClass24);
        org.junit.Assert.assertNotNull(slimTableFactory25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test06862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06862");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        boolean boolean6 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass10 = slimTableFactory8.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory8.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap12 = slimTableFactory11.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap12;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory1.copy();
        boolean boolean16 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap17 = slimTableFactory1.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass19 = slimTableFactory1.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = slimTableFactory20.copy();
        boolean boolean23 = slimTableFactory21.hasColon("");
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(slimTableFactory20);
        org.junit.Assert.assertNotNull(slimTableFactory21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test06863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06863");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory1.tableTypeArrays;
        java.lang.String str6 = slimTableFactory1.getFullTableName("");
        boolean boolean8 = slimTableFactory1.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory1.copy();
        java.lang.String str11 = slimTableFactory1.makeTableType("");
        boolean boolean13 = slimTableFactory1.hasColon("");
        fitnesse.testsystems.slim.Table table14 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory1.parseDefineTableTypeRow(table14, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test06864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06864");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory0.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory0.copy();
        java.lang.String str10 = slimTableFactory0.makeTableType("");
        java.lang.String str12 = slimTableFactory0.makeTableType("hi!");
        java.lang.String str14 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap15 = slimTableFactory0.tableTypes;
        java.lang.Class<?> wildcardClass16 = strMap15.getClass();
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test06865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06865");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory3.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap6 = slimTableFactory3.tableTypes;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory3.tableTypes;
        boolean boolean9 = slimTableFactory3.hasColon("hi!");
        boolean boolean11 = slimTableFactory3.hasColon("");
        boolean boolean13 = slimTableFactory3.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap14 = slimTableFactory3.tableTypes;
        java.lang.Class<?> wildcardClass15 = slimTableFactory3.getClass();
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test06866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06866");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass4 = slimTableFactory1.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap5 = slimTableFactory1.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap6 = slimTableFactory1.tableTypes;
        boolean boolean8 = slimTableFactory1.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap10 = slimTableFactory1.tableTypes;
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(strMap10);
    }

    @Test
    public void test06867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06867");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory1.tableTypeArrays;
        java.lang.String str6 = slimTableFactory1.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory7.copy();
        boolean boolean10 = slimTableFactory8.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory8.tableTypeArrays;
        java.lang.String str13 = slimTableFactory8.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory8.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap14;
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory1.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap17 = slimTableFactory1.tableTypes;
        java.lang.String str19 = slimTableFactory1.getFullTableName("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass21 = slimTableFactory1.getTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass23 = slimTableFactory1.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = slimTableFactory24.copy();
        boolean boolean27 = slimTableFactory25.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = slimTableFactory25.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory29 = slimTableFactory25.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory30 = slimTableFactory29.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap31 = slimTableFactory29.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap32 = slimTableFactory29.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap32;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory34 = slimTableFactory1.copy();
        java.lang.String str36 = slimTableFactory1.getFullTableName("");
        boolean boolean38 = slimTableFactory1.hasColon("");
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNull(wildcardClass21);
        org.junit.Assert.assertNull(wildcardClass23);
        org.junit.Assert.assertNotNull(slimTableFactory25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(slimTableFactory28);
        org.junit.Assert.assertNotNull(slimTableFactory29);
        org.junit.Assert.assertNotNull(slimTableFactory30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(slimTableFactory34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test06868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06868");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory0.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap10 = slimTableFactory9.tableTypes;
        boolean boolean12 = slimTableFactory9.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap13 = slimTableFactory9.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory9.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory15.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap17 = slimTableFactory16.tableTypes;
        boolean boolean19 = slimTableFactory16.hasColon("");
        boolean boolean21 = slimTableFactory16.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap22 = slimTableFactory16.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass25 = slimTableFactory23.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = slimTableFactory23.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap27 = slimTableFactory26.tableTypeArrays;
        slimTableFactory16.tableTypeArrays = strMap27;
        slimTableFactory9.tableTypeArrays = strMap27;
        slimTableFactory0.tableTypeArrays = strMap27;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory31 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap32 = slimTableFactory31.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass34 = slimTableFactory31.getTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass36 = slimTableFactory31.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory37 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory38 = slimTableFactory37.copy();
        boolean boolean40 = slimTableFactory38.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap41 = slimTableFactory38.tableTypeArrays;
        java.lang.String str43 = slimTableFactory38.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap44 = slimTableFactory38.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap45 = slimTableFactory38.tableTypeArrays;
        slimTableFactory31.tableTypeArrays = strMap45;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory47 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory48 = slimTableFactory47.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap49 = slimTableFactory48.tableTypes;
        boolean boolean51 = slimTableFactory48.hasColon("");
        boolean boolean53 = slimTableFactory48.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap54 = slimTableFactory48.tableTypeArrays;
        slimTableFactory31.tableTypeArrays = strMap54;
        java.lang.String str57 = slimTableFactory31.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap58 = slimTableFactory31.tableTypeArrays;
        java.lang.String str60 = slimTableFactory31.makeTableType("");
        boolean boolean62 = slimTableFactory31.hasColon("");
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNull(wildcardClass25);
        org.junit.Assert.assertNotNull(slimTableFactory26);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(slimTableFactory31);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNull(wildcardClass34);
        org.junit.Assert.assertNull(wildcardClass36);
        org.junit.Assert.assertNotNull(slimTableFactory38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(strMap44);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNotNull(slimTableFactory48);
        org.junit.Assert.assertNotNull(strMap49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(strMap58);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test06869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06869");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass5 = slimTableFactory3.getTableType("");
        boolean boolean7 = slimTableFactory3.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory3.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap8;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory10.copy();
        boolean boolean13 = slimTableFactory11.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory11.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory11.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory15.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass19 = slimTableFactory17.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory17.copy();
        boolean boolean22 = slimTableFactory17.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap23 = slimTableFactory17.tableTypeArrays;
        slimTableFactory15.tableTypeArrays = strMap23;
        java.util.Map<java.lang.String, java.lang.String> strMap25 = slimTableFactory15.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap25;
        java.lang.Class<?> wildcardClass27 = slimTableFactory1.getClass();
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(slimTableFactory20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test06870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06870");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap6 = slimTableFactory0.tableTypes;
        java.lang.String str8 = slimTableFactory0.getFullTableName("hi!");
        java.lang.String str10 = slimTableFactory0.getFullTableName("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass12 = slimTableFactory0.getTableType("hi!");
        java.lang.String str14 = slimTableFactory0.getFullTableName("");
        java.lang.String str16 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.Table table17 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory0.parseDefineTableTypeRow(table17, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test06871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06871");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory1.tableTypeArrays;
        java.lang.String str6 = slimTableFactory1.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory1.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass10 = slimTableFactory8.getTableType("hi!");
        fitnesse.testsystems.slim.Table table11 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable12 = slimTableFactory8.parseDefineTableTypeTable(table11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNull(wildcardClass10);
    }

    @Test
    public void test06872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06872");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap5 = slimTableFactory4.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap6 = slimTableFactory4.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass9 = slimTableFactory7.getTableType("");
        boolean boolean11 = slimTableFactory7.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap12 = slimTableFactory7.tableTypeArrays;
        boolean boolean14 = slimTableFactory7.hasColon("");
        java.lang.String str16 = slimTableFactory7.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory17.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap19 = slimTableFactory18.tableTypes;
        boolean boolean21 = slimTableFactory18.hasColon("");
        boolean boolean23 = slimTableFactory18.hasColon("hi!");
        boolean boolean25 = slimTableFactory18.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = slimTableFactory18.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass28 = slimTableFactory26.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap29 = slimTableFactory26.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory30 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass32 = slimTableFactory30.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory33 = slimTableFactory30.copy();
        boolean boolean35 = slimTableFactory33.hasColon("");
        boolean boolean37 = slimTableFactory33.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory38 = slimTableFactory33.copy();
        java.lang.String str40 = slimTableFactory33.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap41 = slimTableFactory33.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory42 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory43 = slimTableFactory42.copy();
        boolean boolean45 = slimTableFactory43.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap46 = slimTableFactory43.tableTypeArrays;
        java.lang.String str48 = slimTableFactory43.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory49 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory50 = slimTableFactory49.copy();
        boolean boolean52 = slimTableFactory50.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap53 = slimTableFactory50.tableTypeArrays;
        java.lang.String str55 = slimTableFactory50.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap56 = slimTableFactory50.tableTypeArrays;
        slimTableFactory43.tableTypeArrays = strMap56;
        java.util.Map<java.lang.String, java.lang.String> strMap58 = slimTableFactory43.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap59 = slimTableFactory43.tableTypes;
        java.lang.String str61 = slimTableFactory43.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory62 = slimTableFactory43.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory63 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory64 = slimTableFactory63.copy();
        boolean boolean66 = slimTableFactory64.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory67 = slimTableFactory64.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap68 = slimTableFactory64.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory69 = slimTableFactory64.copy();
        boolean boolean71 = slimTableFactory69.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap72 = slimTableFactory69.tableTypeArrays;
        slimTableFactory62.tableTypeArrays = strMap72;
        slimTableFactory33.tableTypeArrays = strMap72;
        slimTableFactory26.tableTypeArrays = strMap72;
        java.lang.String str77 = slimTableFactory26.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap78 = slimTableFactory26.tableTypeArrays;
        slimTableFactory7.tableTypeArrays = strMap78;
        slimTableFactory4.tableTypeArrays = strMap78;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory81 = slimTableFactory4.copy();
        java.lang.Class<?> wildcardClass82 = slimTableFactory4.getClass();
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(slimTableFactory18);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(slimTableFactory26);
        org.junit.Assert.assertNull(wildcardClass28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNull(wildcardClass32);
        org.junit.Assert.assertNotNull(slimTableFactory33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(slimTableFactory38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertNotNull(slimTableFactory43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(strMap46);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(slimTableFactory50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(strMap53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(strMap56);
        org.junit.Assert.assertNotNull(strMap58);
        org.junit.Assert.assertNotNull(strMap59);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "hi!" + "'", str61, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory62);
        org.junit.Assert.assertNotNull(slimTableFactory64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(slimTableFactory67);
        org.junit.Assert.assertNotNull(strMap68);
        org.junit.Assert.assertNotNull(slimTableFactory69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(strMap72);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertNotNull(strMap78);
        org.junit.Assert.assertNotNull(slimTableFactory81);
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test06873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06873");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory0.getTableType("hi!");
        boolean boolean9 = slimTableFactory0.hasColon("hi!");
        java.lang.String str11 = slimTableFactory0.getFullTableName("hi!");
        java.lang.String str13 = slimTableFactory0.makeTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap14 = slimTableFactory0.tableTypes;
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(strMap14);
    }

    @Test
    public void test06874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06874");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass5 = slimTableFactory3.getTableType("");
        boolean boolean7 = slimTableFactory3.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory3.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap8;
        java.lang.String str11 = slimTableFactory1.makeTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass13 = slimTableFactory1.getTableType("");
        java.lang.String str15 = slimTableFactory1.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory1.copy();
        java.lang.String str18 = slimTableFactory1.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory1.copy();
        java.lang.String str21 = slimTableFactory1.getFullTableName("hi!");
        fitnesse.testsystems.slim.Table table22 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable23 = slimTableFactory1.parseDefineTableTypeTable(table22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(slimTableFactory19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
    }

    @Test
    public void test06875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06875");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory3.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap5 = slimTableFactory3.tableTypeArrays;
        boolean boolean7 = slimTableFactory3.hasColon("");
        java.lang.String str9 = slimTableFactory3.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory3.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory3.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap12 = slimTableFactory11.tableTypes;
        java.lang.String str14 = slimTableFactory11.makeTableType("");
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test06876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06876");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        boolean boolean6 = slimTableFactory1.hasColon("hi!");
        boolean boolean8 = slimTableFactory1.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap10 = slimTableFactory9.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory9.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap12 = slimTableFactory11.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory11.copy();
        java.lang.String str15 = slimTableFactory11.makeTableType("");
        boolean boolean17 = slimTableFactory11.hasColon("hi!");
        java.lang.Class<?> wildcardClass18 = slimTableFactory11.getClass();
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(slimTableFactory13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test06877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06877");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory0.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory0.copy();
        boolean boolean10 = slimTableFactory8.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap11 = slimTableFactory8.tableTypes;
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
    }

    @Test
    public void test06878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06878");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory0.hasColon("hi!");
        java.lang.String str5 = slimTableFactory0.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory0.copy();
        java.lang.String str8 = slimTableFactory0.getFullTableName("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass10 = slimTableFactory0.getTableType("hi!");
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNull(wildcardClass10);
    }

    @Test
    public void test06879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06879");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory3.hasColon("");
        boolean boolean7 = slimTableFactory3.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory3.copy();
        java.lang.String str10 = slimTableFactory3.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap11 = slimTableFactory3.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory3.copy();
        fitnesse.testsystems.slim.Table table13 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext15 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable16 = slimTableFactory3.makeSlimTable(table13, "hi!", slimTestContext15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(slimTableFactory12);
    }

    @Test
    public void test06880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06880");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        boolean boolean6 = slimTableFactory1.hasColon("hi!");
        boolean boolean8 = slimTableFactory1.hasColon("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass10 = slimTableFactory1.getTableType("hi!");
        java.lang.String str12 = slimTableFactory1.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass16 = slimTableFactory14.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = slimTableFactory14.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory17.copy();
        java.lang.String str20 = slimTableFactory17.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = slimTableFactory21.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap23 = null;
        slimTableFactory21.tableTypeArrays = strMap23;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass26 = slimTableFactory21.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = slimTableFactory27.copy();
        boolean boolean30 = slimTableFactory28.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory31 = slimTableFactory28.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory32 = slimTableFactory28.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory33 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass35 = slimTableFactory33.getTableType("");
        boolean boolean37 = slimTableFactory33.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap38 = slimTableFactory33.tableTypeArrays;
        slimTableFactory32.tableTypeArrays = strMap38;
        slimTableFactory21.tableTypeArrays = strMap38;
        slimTableFactory17.tableTypeArrays = strMap38;
        slimTableFactory1.tableTypeArrays = strMap38;
        java.util.Map<java.lang.String, java.lang.String> strMap43 = slimTableFactory1.tableTypeArrays;
        java.lang.String str45 = slimTableFactory1.makeTableType("");
        java.lang.String str47 = slimTableFactory1.makeTableType("");
        fitnesse.testsystems.slim.Table table48 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext50 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable51 = slimTableFactory1.makeSlimTable(table48, "", slimTestContext50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(slimTableFactory13);
        org.junit.Assert.assertNull(wildcardClass16);
        org.junit.Assert.assertNotNull(slimTableFactory17);
        org.junit.Assert.assertNotNull(slimTableFactory18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(slimTableFactory22);
        org.junit.Assert.assertNull(wildcardClass26);
        org.junit.Assert.assertNotNull(slimTableFactory28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(slimTableFactory31);
        org.junit.Assert.assertNotNull(slimTableFactory32);
        org.junit.Assert.assertNull(wildcardClass35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertNotNull(strMap43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
    }

    @Test
    public void test06881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06881");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        boolean boolean6 = slimTableFactory1.hasColon("hi!");
        boolean boolean8 = slimTableFactory1.hasColon("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass10 = slimTableFactory1.getTableType("hi!");
        java.lang.String str12 = slimTableFactory1.getFullTableName("");
        boolean boolean14 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap15 = slimTableFactory1.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass17 = slimTableFactory1.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory18.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap20 = slimTableFactory19.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass22 = slimTableFactory19.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = slimTableFactory23.copy();
        boolean boolean26 = slimTableFactory24.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = slimTableFactory24.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap28 = slimTableFactory24.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory29 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory30 = slimTableFactory29.copy();
        boolean boolean32 = slimTableFactory30.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory33 = slimTableFactory30.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory34 = slimTableFactory30.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory35 = slimTableFactory30.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap36 = slimTableFactory35.tableTypeArrays;
        slimTableFactory24.tableTypeArrays = strMap36;
        slimTableFactory19.tableTypeArrays = strMap36;
        slimTableFactory1.tableTypeArrays = strMap36;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory40 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory41 = slimTableFactory40.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap42 = slimTableFactory41.tableTypes;
        boolean boolean44 = slimTableFactory41.hasColon("");
        boolean boolean46 = slimTableFactory41.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap47 = slimTableFactory41.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory48 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass50 = slimTableFactory48.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory51 = slimTableFactory48.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap52 = slimTableFactory51.tableTypeArrays;
        slimTableFactory41.tableTypeArrays = strMap52;
        java.util.Map<java.lang.String, java.lang.String> strMap54 = slimTableFactory41.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory55 = slimTableFactory41.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap56 = slimTableFactory55.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap56;
        boolean boolean59 = slimTableFactory1.hasColon("");
        fitnesse.testsystems.slim.Table table60 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory1.parseDefineTableTypeRow(table60, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNull(wildcardClass17);
        org.junit.Assert.assertNotNull(slimTableFactory19);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNull(wildcardClass22);
        org.junit.Assert.assertNotNull(slimTableFactory24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(slimTableFactory27);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNotNull(slimTableFactory30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(slimTableFactory33);
        org.junit.Assert.assertNotNull(slimTableFactory34);
        org.junit.Assert.assertNotNull(slimTableFactory35);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(slimTableFactory41);
        org.junit.Assert.assertNotNull(strMap42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNull(wildcardClass50);
        org.junit.Assert.assertNotNull(slimTableFactory51);
        org.junit.Assert.assertNotNull(strMap52);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(slimTableFactory55);
        org.junit.Assert.assertNotNull(strMap56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test06882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06882");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.lang.String str3 = slimTableFactory0.getFullTableName("hi!");
        boolean boolean5 = slimTableFactory0.hasColon("hi!");
        boolean boolean7 = slimTableFactory0.hasColon("");
        java.lang.String str9 = slimTableFactory0.makeTableType("");
        java.lang.String str11 = slimTableFactory0.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap12 = slimTableFactory0.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap13 = slimTableFactory0.tableTypeArrays;
        java.lang.String str15 = slimTableFactory0.makeTableType("");
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!" + "'", str3, "hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test06883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06883");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory1.tableTypeArrays;
        java.lang.String str6 = slimTableFactory1.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory7.copy();
        boolean boolean10 = slimTableFactory8.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory8.tableTypeArrays;
        java.lang.String str13 = slimTableFactory8.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory8.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap14;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory1.copy();
        boolean boolean18 = slimTableFactory16.hasColon("");
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test06884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06884");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap5 = slimTableFactory1.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory9.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap11 = slimTableFactory10.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory12.getTableType("");
        boolean boolean16 = slimTableFactory12.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap17 = slimTableFactory12.tableTypeArrays;
        slimTableFactory10.tableTypeArrays = strMap17;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory19.copy();
        boolean boolean22 = slimTableFactory20.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = slimTableFactory20.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = slimTableFactory20.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = slimTableFactory24.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass28 = slimTableFactory26.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory29 = slimTableFactory26.copy();
        boolean boolean31 = slimTableFactory26.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap32 = slimTableFactory26.tableTypeArrays;
        slimTableFactory24.tableTypeArrays = strMap32;
        java.util.Map<java.lang.String, java.lang.String> strMap34 = slimTableFactory24.tableTypeArrays;
        slimTableFactory10.tableTypeArrays = strMap34;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory36 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory37 = slimTableFactory36.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap38 = slimTableFactory37.tableTypes;
        boolean boolean40 = slimTableFactory37.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap41 = slimTableFactory37.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap42 = slimTableFactory37.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory43 = slimTableFactory37.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap44 = slimTableFactory37.tableTypeArrays;
        slimTableFactory10.tableTypeArrays = strMap44;
        slimTableFactory1.tableTypeArrays = strMap44;
        java.lang.String str48 = slimTableFactory1.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory49 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory50 = slimTableFactory49.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap51 = slimTableFactory50.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass53 = slimTableFactory50.getTableType("hi!");
        fitnesse.testsystems.slim.Table table54 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext56 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable57 = slimTableFactory50.makeSlimTable(table54, "hi!", slimTestContext56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(slimTableFactory20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(slimTableFactory23);
        org.junit.Assert.assertNotNull(slimTableFactory24);
        org.junit.Assert.assertNotNull(slimTableFactory25);
        org.junit.Assert.assertNull(wildcardClass28);
        org.junit.Assert.assertNotNull(slimTableFactory29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNotNull(slimTableFactory37);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertNotNull(strMap42);
        org.junit.Assert.assertNotNull(slimTableFactory43);
        org.junit.Assert.assertNotNull(strMap44);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(slimTableFactory49);
        org.junit.Assert.assertNotNull(slimTableFactory50);
        org.junit.Assert.assertNotNull(strMap51);
        org.junit.Assert.assertNull(wildcardClass53);
    }

    @Test
    public void test06885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06885");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("");
        java.lang.String str7 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap10 = slimTableFactory9.tableTypes;
        boolean boolean12 = slimTableFactory9.hasColon("");
        boolean boolean14 = slimTableFactory9.hasColon("hi!");
        boolean boolean16 = slimTableFactory9.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = slimTableFactory9.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap18 = slimTableFactory17.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory17.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = slimTableFactory20.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap22 = slimTableFactory21.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass25 = slimTableFactory23.getTableType("");
        boolean boolean27 = slimTableFactory23.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap28 = slimTableFactory23.tableTypeArrays;
        slimTableFactory21.tableTypeArrays = strMap28;
        slimTableFactory19.tableTypeArrays = strMap28;
        slimTableFactory0.tableTypeArrays = strMap28;
        java.lang.String str33 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap34 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory35 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass37 = slimTableFactory35.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap38 = slimTableFactory35.tableTypeArrays;
        boolean boolean40 = slimTableFactory35.hasColon("");
        java.lang.String str42 = slimTableFactory35.makeTableType("");
        java.lang.String str44 = slimTableFactory35.makeTableType("");
        java.lang.String str46 = slimTableFactory35.makeTableType("");
        java.lang.String str48 = slimTableFactory35.getFullTableName("");
        java.lang.String str50 = slimTableFactory35.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory51 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory52 = slimTableFactory51.copy();
        boolean boolean54 = slimTableFactory52.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap55 = slimTableFactory52.tableTypeArrays;
        java.lang.String str57 = slimTableFactory52.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory58 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory59 = slimTableFactory58.copy();
        boolean boolean61 = slimTableFactory59.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap62 = slimTableFactory59.tableTypeArrays;
        java.lang.String str64 = slimTableFactory59.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap65 = slimTableFactory59.tableTypeArrays;
        slimTableFactory52.tableTypeArrays = strMap65;
        slimTableFactory35.tableTypeArrays = strMap65;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass69 = slimTableFactory35.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap70 = slimTableFactory35.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap70;
        fitnesse.testsystems.slim.Table table72 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext74 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable75 = slimTableFactory0.makeSlimTable(table72, "hi!", slimTestContext74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(slimTableFactory17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(slimTableFactory19);
        org.junit.Assert.assertNotNull(slimTableFactory21);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNull(wildcardClass25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNull(wildcardClass37);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(slimTableFactory52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(strMap55);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(slimTableFactory59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(strMap62);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNull(wildcardClass69);
        org.junit.Assert.assertNotNull(strMap70);
    }

    @Test
    public void test06886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06886");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        slimTableFactory0.tableTypeArrays = strMap2;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass5 = slimTableFactory0.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory6.copy();
        boolean boolean9 = slimTableFactory7.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory7.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory7.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory12.getTableType("");
        boolean boolean16 = slimTableFactory12.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap17 = slimTableFactory12.tableTypeArrays;
        slimTableFactory11.tableTypeArrays = strMap17;
        slimTableFactory0.tableTypeArrays = strMap17;
        boolean boolean21 = slimTableFactory0.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass24 = slimTableFactory22.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap25 = slimTableFactory22.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap25;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass28 = slimTableFactory0.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap29 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory30 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.Table table31 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext33 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable34 = slimTableFactory30.makeSlimTable(table31, "", slimTestContext33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(wildcardClass24);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNull(wildcardClass28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(slimTableFactory30);
    }

    @Test
    public void test06887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06887");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory0.copy();
        boolean boolean6 = slimTableFactory4.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass9 = slimTableFactory7.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory7.tableTypeArrays;
        boolean boolean12 = slimTableFactory7.hasColon("");
        java.lang.String str14 = slimTableFactory7.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap15 = slimTableFactory7.tableTypeArrays;
        slimTableFactory4.tableTypeArrays = strMap15;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory17.copy();
        boolean boolean20 = slimTableFactory18.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = slimTableFactory18.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap22 = slimTableFactory18.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass24 = slimTableFactory18.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap25 = slimTableFactory18.tableTypeArrays;
        slimTableFactory4.tableTypeArrays = strMap25;
        java.util.Map<java.lang.String, java.lang.String> strMap27 = slimTableFactory4.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap28 = slimTableFactory4.tableTypes;
        fitnesse.testsystems.slim.Table table29 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext31 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable32 = slimTableFactory4.makeSlimTable(table29, "", slimTestContext31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(slimTableFactory18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(slimTableFactory21);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNull(wildcardClass24);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(strMap28);
    }

    @Test
    public void test06888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06888");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        boolean boolean6 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory1.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory1.tableTypeArrays;
        java.lang.String str10 = slimTableFactory1.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory11.copy();
        java.lang.String str14 = slimTableFactory11.getFullTableName("hi!");
        java.lang.String str16 = slimTableFactory11.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap17 = null;
        slimTableFactory11.tableTypeArrays = strMap17;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass21 = slimTableFactory19.getTableType("");
        boolean boolean23 = slimTableFactory19.hasColon("");
        java.lang.String str25 = slimTableFactory19.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap26 = slimTableFactory19.tableTypeArrays;
        slimTableFactory11.tableTypeArrays = strMap26;
        slimTableFactory1.tableTypeArrays = strMap26;
        fitnesse.testsystems.slim.Table table29 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory1.parseDefineTableTypeRow(table29, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNull(wildcardClass21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(strMap26);
    }

    @Test
    public void test06889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06889");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        slimTableFactory0.tableTypeArrays = strMap2;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass5 = slimTableFactory0.getTableType("hi!");
        java.lang.String str7 = slimTableFactory0.makeTableType("");
        java.lang.String str9 = slimTableFactory0.makeTableType("");
        java.lang.String str11 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.Table table12 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory0.parseDefineTableTypeRow(table12, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test06890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06890");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory0.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap9 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory0.tableTypeArrays;
        boolean boolean12 = slimTableFactory0.hasColon("hi!");
        java.lang.String str14 = slimTableFactory0.getFullTableName("hi!");
        boolean boolean16 = slimTableFactory0.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory17.copy();
        boolean boolean20 = slimTableFactory18.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = slimTableFactory18.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = slimTableFactory18.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = slimTableFactory22.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass26 = slimTableFactory24.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = slimTableFactory24.copy();
        boolean boolean29 = slimTableFactory24.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap30 = slimTableFactory24.tableTypeArrays;
        slimTableFactory22.tableTypeArrays = strMap30;
        java.util.Map<java.lang.String, java.lang.String> strMap32 = slimTableFactory22.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory33 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass35 = slimTableFactory33.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory36 = slimTableFactory33.copy();
        boolean boolean38 = slimTableFactory33.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory39 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory40 = slimTableFactory39.copy();
        boolean boolean42 = slimTableFactory40.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory43 = slimTableFactory40.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory44 = slimTableFactory40.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory45 = slimTableFactory44.copy();
        boolean boolean47 = slimTableFactory44.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap48 = slimTableFactory44.tableTypeArrays;
        slimTableFactory33.tableTypeArrays = strMap48;
        slimTableFactory22.tableTypeArrays = strMap48;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass52 = slimTableFactory22.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory53 = slimTableFactory22.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory54 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory55 = slimTableFactory54.copy();
        java.lang.String str57 = slimTableFactory54.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory58 = slimTableFactory54.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap59 = slimTableFactory54.tableTypeArrays;
        slimTableFactory53.tableTypeArrays = strMap59;
        java.lang.String str62 = slimTableFactory53.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory63 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory64 = slimTableFactory63.copy();
        boolean boolean66 = slimTableFactory64.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap67 = slimTableFactory64.tableTypeArrays;
        java.lang.String str69 = slimTableFactory64.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory70 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory71 = slimTableFactory70.copy();
        boolean boolean73 = slimTableFactory71.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap74 = slimTableFactory71.tableTypeArrays;
        java.lang.String str76 = slimTableFactory71.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap77 = slimTableFactory71.tableTypeArrays;
        slimTableFactory64.tableTypeArrays = strMap77;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory79 = slimTableFactory64.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass81 = slimTableFactory79.getTableType("");
        boolean boolean83 = slimTableFactory79.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap84 = slimTableFactory79.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap85 = slimTableFactory79.tableTypeArrays;
        slimTableFactory53.tableTypeArrays = strMap85;
        slimTableFactory0.tableTypeArrays = strMap85;
        java.lang.String str89 = slimTableFactory0.makeTableType("hi!");
        java.lang.String str91 = slimTableFactory0.getFullTableName("hi!");
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(slimTableFactory18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(slimTableFactory21);
        org.junit.Assert.assertNotNull(slimTableFactory22);
        org.junit.Assert.assertNotNull(slimTableFactory23);
        org.junit.Assert.assertNull(wildcardClass26);
        org.junit.Assert.assertNotNull(slimTableFactory27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNull(wildcardClass35);
        org.junit.Assert.assertNotNull(slimTableFactory36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(slimTableFactory40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(slimTableFactory43);
        org.junit.Assert.assertNotNull(slimTableFactory44);
        org.junit.Assert.assertNotNull(slimTableFactory45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strMap48);
        org.junit.Assert.assertNull(wildcardClass52);
        org.junit.Assert.assertNotNull(slimTableFactory53);
        org.junit.Assert.assertNotNull(slimTableFactory55);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "hi!" + "'", str57, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory58);
        org.junit.Assert.assertNotNull(strMap59);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "hi!" + "'", str62, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(strMap67);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(slimTableFactory71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(strMap74);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertNotNull(strMap77);
        org.junit.Assert.assertNotNull(slimTableFactory79);
        org.junit.Assert.assertNull(wildcardClass81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(strMap84);
        org.junit.Assert.assertNotNull(strMap85);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "hi!" + "'", str89, "hi!");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "hi!" + "'", str91, "hi!");
    }

    @Test
    public void test06891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06891");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass3 = slimTableFactory1.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        boolean boolean6 = slimTableFactory1.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory1.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap7;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap9 = slimTableFactory0.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory0.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass12 = slimTableFactory0.getTableType("");
        boolean boolean14 = slimTableFactory0.hasColon("hi!");
        java.lang.String str16 = slimTableFactory0.makeTableType("hi!");
        fitnesse.testsystems.slim.Table table17 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable18 = slimTableFactory0.parseDefineTableTypeTable(table17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
    }

    @Test
    public void test06892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06892");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        slimTableFactory0.tableTypeArrays = strMap2;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass5 = slimTableFactory0.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory6.copy();
        boolean boolean9 = slimTableFactory7.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory7.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory7.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory12.getTableType("");
        boolean boolean16 = slimTableFactory12.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap17 = slimTableFactory12.tableTypeArrays;
        slimTableFactory11.tableTypeArrays = strMap17;
        slimTableFactory0.tableTypeArrays = strMap17;
        boolean boolean21 = slimTableFactory0.hasColon("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass23 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = slimTableFactory24.copy();
        boolean boolean27 = slimTableFactory25.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = slimTableFactory25.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory29 = slimTableFactory25.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory30 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass32 = slimTableFactory30.getTableType("");
        boolean boolean34 = slimTableFactory30.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap35 = slimTableFactory30.tableTypeArrays;
        slimTableFactory29.tableTypeArrays = strMap35;
        slimTableFactory0.tableTypeArrays = strMap35;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory38 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass40 = slimTableFactory38.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory41 = slimTableFactory38.copy();
        boolean boolean43 = slimTableFactory38.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass45 = slimTableFactory38.getTableType("hi!");
        java.lang.String str47 = slimTableFactory38.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory48 = slimTableFactory38.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass50 = slimTableFactory38.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory51 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory52 = slimTableFactory51.copy();
        boolean boolean54 = slimTableFactory52.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory55 = slimTableFactory52.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory56 = slimTableFactory52.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory57 = slimTableFactory52.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap58 = slimTableFactory57.tableTypeArrays;
        slimTableFactory38.tableTypeArrays = strMap58;
        slimTableFactory0.tableTypeArrays = strMap58;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory61 = slimTableFactory0.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass63 = slimTableFactory61.getTableType("hi!");
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(wildcardClass23);
        org.junit.Assert.assertNotNull(slimTableFactory25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(slimTableFactory28);
        org.junit.Assert.assertNotNull(slimTableFactory29);
        org.junit.Assert.assertNull(wildcardClass32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNull(wildcardClass40);
        org.junit.Assert.assertNotNull(slimTableFactory41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(wildcardClass45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(slimTableFactory48);
        org.junit.Assert.assertNull(wildcardClass50);
        org.junit.Assert.assertNotNull(slimTableFactory52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(slimTableFactory55);
        org.junit.Assert.assertNotNull(slimTableFactory56);
        org.junit.Assert.assertNotNull(slimTableFactory57);
        org.junit.Assert.assertNotNull(strMap58);
        org.junit.Assert.assertNotNull(slimTableFactory61);
        org.junit.Assert.assertNull(wildcardClass63);
    }

    @Test
    public void test06893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06893");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory3.tableTypeArrays;
        java.lang.String str6 = slimTableFactory3.makeTableType("hi!");
        boolean boolean8 = slimTableFactory3.hasColon("hi!");
        java.lang.String str10 = slimTableFactory3.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap11 = slimTableFactory3.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory3.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap13 = null;
        slimTableFactory12.tableTypeArrays = strMap13;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass16 = slimTableFactory12.getTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass18 = slimTableFactory12.getTableType("hi!");
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertNull(wildcardClass16);
        org.junit.Assert.assertNull(wildcardClass18);
    }

    @Test
    public void test06894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06894");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = slimTableFactory0.tableTypeArrays;
        boolean boolean4 = slimTableFactory0.hasColon("");
        java.lang.String str6 = slimTableFactory0.makeTableType("hi!");
        boolean boolean8 = slimTableFactory0.hasColon("");
        java.lang.String str10 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass13 = slimTableFactory11.getTableType("");
        boolean boolean15 = slimTableFactory11.hasColon("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass17 = slimTableFactory11.getTableType("hi!");
        java.lang.String str19 = slimTableFactory11.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory11.copy();
        java.lang.String str22 = slimTableFactory11.getFullTableName("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass24 = slimTableFactory11.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = slimTableFactory11.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap26 = slimTableFactory25.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap26;
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(wildcardClass17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertNull(wildcardClass24);
        org.junit.Assert.assertNotNull(slimTableFactory25);
        org.junit.Assert.assertNotNull(strMap26);
    }

    @Test
    public void test06895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06895");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass4 = slimTableFactory1.getTableType("hi!");
        boolean boolean6 = slimTableFactory1.hasColon("");
        java.lang.String str8 = slimTableFactory1.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap9 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass12 = slimTableFactory10.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap13 = slimTableFactory10.tableTypeArrays;
        boolean boolean15 = slimTableFactory10.hasColon("");
        java.lang.String str17 = slimTableFactory10.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap18 = slimTableFactory10.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap18;
        fitnesse.testsystems.slim.Table table20 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable21 = slimTableFactory1.parseDefineTableTypeTable(table20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(strMap18);
    }

    @Test
    public void test06896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06896");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory3.tableTypeArrays;
        java.lang.String str6 = slimTableFactory3.makeTableType("hi!");
        boolean boolean8 = slimTableFactory3.hasColon("hi!");
        java.lang.String str10 = slimTableFactory3.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory3.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass13 = slimTableFactory3.getTableType("hi!");
        boolean boolean15 = slimTableFactory3.hasColon("");
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test06897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06897");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        boolean boolean6 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass10 = slimTableFactory8.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory8.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap12 = slimTableFactory11.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap12;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory1.copy();
        java.lang.String str16 = slimTableFactory14.makeTableType("hi!");
        java.lang.String str18 = slimTableFactory14.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap19 = slimTableFactory14.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory14.copy();
        java.lang.String str22 = slimTableFactory20.makeTableType("hi!");
        boolean boolean24 = slimTableFactory20.hasColon("");
        boolean boolean26 = slimTableFactory20.hasColon("hi!");
        java.lang.Class<?> wildcardClass27 = slimTableFactory20.getClass();
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(slimTableFactory20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test06898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06898");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass9 = slimTableFactory7.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory7.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory7.copy();
        boolean boolean13 = slimTableFactory11.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass16 = slimTableFactory14.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap17 = slimTableFactory14.tableTypeArrays;
        boolean boolean19 = slimTableFactory14.hasColon("");
        java.lang.String str21 = slimTableFactory14.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap22 = slimTableFactory14.tableTypeArrays;
        slimTableFactory11.tableTypeArrays = strMap22;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = slimTableFactory24.copy();
        boolean boolean27 = slimTableFactory25.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = slimTableFactory25.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = slimTableFactory25.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass31 = slimTableFactory25.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap32 = slimTableFactory25.tableTypeArrays;
        slimTableFactory11.tableTypeArrays = strMap32;
        java.lang.String str35 = slimTableFactory11.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap36 = slimTableFactory11.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap37 = slimTableFactory11.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap37;
        java.lang.Class<?> wildcardClass39 = strMap37.getClass();
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(wildcardClass16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(slimTableFactory25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(slimTableFactory28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test06899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06899");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        boolean boolean5 = slimTableFactory0.hasColon("");
        java.lang.String str7 = slimTableFactory0.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory0.tableTypeArrays;
        java.lang.String str10 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory0.copy();
        java.lang.String str13 = slimTableFactory11.getFullTableName("");
        java.lang.String str15 = slimTableFactory11.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory11.copy();
        fitnesse.testsystems.slim.Table table17 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext19 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable20 = slimTableFactory16.makeSlimTable(table17, "", slimTestContext19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory16);
    }

    @Test
    public void test06900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06900");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory3.tableTypeArrays;
        java.lang.String str6 = slimTableFactory3.makeTableType("hi!");
        java.lang.String str8 = slimTableFactory3.makeTableType("hi!");
        java.lang.String str10 = slimTableFactory3.getFullTableName("");
        boolean boolean12 = slimTableFactory3.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap13 = slimTableFactory3.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory3.copy();
        fitnesse.testsystems.slim.Table table15 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable16 = slimTableFactory3.parseDefineTableTypeTable(table15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(slimTableFactory14);
    }

    @Test
    public void test06901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06901");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory0.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap9 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass13 = slimTableFactory11.getTableType("");
        boolean boolean15 = slimTableFactory11.hasColon("");
        java.lang.String str17 = slimTableFactory11.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap18 = slimTableFactory11.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap18;
        java.lang.String str21 = slimTableFactory0.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass24 = slimTableFactory22.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = slimTableFactory22.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = slimTableFactory26.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap28 = slimTableFactory27.tableTypes;
        boolean boolean30 = slimTableFactory27.hasColon("");
        boolean boolean32 = slimTableFactory27.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap33 = slimTableFactory27.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory34 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass36 = slimTableFactory34.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory37 = slimTableFactory34.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap38 = slimTableFactory37.tableTypeArrays;
        slimTableFactory27.tableTypeArrays = strMap38;
        slimTableFactory22.tableTypeArrays = strMap38;
        slimTableFactory0.tableTypeArrays = strMap38;
        java.lang.Class<?> wildcardClass42 = slimTableFactory0.getClass();
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertNull(wildcardClass24);
        org.junit.Assert.assertNotNull(slimTableFactory25);
        org.junit.Assert.assertNotNull(slimTableFactory27);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(wildcardClass36);
        org.junit.Assert.assertNotNull(slimTableFactory37);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test06902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06902");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass3 = slimTableFactory0.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory4.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap6 = slimTableFactory5.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass9 = slimTableFactory7.getTableType("");
        boolean boolean11 = slimTableFactory7.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap12 = slimTableFactory7.tableTypeArrays;
        slimTableFactory5.tableTypeArrays = strMap12;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory14.copy();
        boolean boolean17 = slimTableFactory15.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory15.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory15.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory19.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass23 = slimTableFactory21.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = slimTableFactory21.copy();
        boolean boolean26 = slimTableFactory21.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap27 = slimTableFactory21.tableTypeArrays;
        slimTableFactory19.tableTypeArrays = strMap27;
        java.util.Map<java.lang.String, java.lang.String> strMap29 = slimTableFactory19.tableTypeArrays;
        slimTableFactory5.tableTypeArrays = strMap29;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory31 = slimTableFactory5.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap32 = slimTableFactory31.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap33 = slimTableFactory31.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap33;
        boolean boolean36 = slimTableFactory0.hasColon("hi!");
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(slimTableFactory18);
        org.junit.Assert.assertNotNull(slimTableFactory19);
        org.junit.Assert.assertNotNull(slimTableFactory20);
        org.junit.Assert.assertNull(wildcardClass23);
        org.junit.Assert.assertNotNull(slimTableFactory24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(slimTableFactory31);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test06903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06903");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory0.copy();
        java.lang.String str9 = slimTableFactory0.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap10 = slimTableFactory0.tableTypes;
        java.lang.String str12 = slimTableFactory0.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap13 = slimTableFactory0.tableTypeArrays;
        java.lang.Class<?> wildcardClass14 = strMap13.getClass();
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test06904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06904");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        boolean boolean6 = slimTableFactory1.hasColon("hi!");
        boolean boolean8 = slimTableFactory1.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap10 = slimTableFactory9.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory9.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap12 = slimTableFactory11.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory11.copy();
        java.lang.String str15 = slimTableFactory11.makeTableType("");
        java.lang.String str17 = slimTableFactory11.getFullTableName("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass19 = slimTableFactory11.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory11.copy();
        java.lang.String str22 = slimTableFactory20.makeTableType("");
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(slimTableFactory13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(slimTableFactory20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
    }

    @Test
    public void test06905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06905");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory0.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap10 = slimTableFactory9.tableTypes;
        boolean boolean12 = slimTableFactory9.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap13 = slimTableFactory9.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory9.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory15.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap17 = slimTableFactory16.tableTypes;
        boolean boolean19 = slimTableFactory16.hasColon("");
        boolean boolean21 = slimTableFactory16.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap22 = slimTableFactory16.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass25 = slimTableFactory23.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = slimTableFactory23.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap27 = slimTableFactory26.tableTypeArrays;
        slimTableFactory16.tableTypeArrays = strMap27;
        slimTableFactory9.tableTypeArrays = strMap27;
        slimTableFactory0.tableTypeArrays = strMap27;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory31 = slimTableFactory0.copy();
        java.lang.String str33 = slimTableFactory31.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory34 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory35 = slimTableFactory34.copy();
        boolean boolean37 = slimTableFactory35.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory38 = slimTableFactory35.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory39 = slimTableFactory35.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory40 = slimTableFactory35.copy();
        boolean boolean42 = slimTableFactory40.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory43 = slimTableFactory40.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap44 = slimTableFactory43.tableTypeArrays;
        slimTableFactory31.tableTypeArrays = strMap44;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass47 = slimTableFactory31.getTableType("hi!");
        java.lang.String str49 = slimTableFactory31.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory50 = slimTableFactory31.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass52 = slimTableFactory31.getTableType("hi!");
        boolean boolean54 = slimTableFactory31.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory55 = slimTableFactory31.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory56 = slimTableFactory31.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass58 = slimTableFactory56.getTableType("");
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNull(wildcardClass25);
        org.junit.Assert.assertNotNull(slimTableFactory26);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(slimTableFactory31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(slimTableFactory38);
        org.junit.Assert.assertNotNull(slimTableFactory39);
        org.junit.Assert.assertNotNull(slimTableFactory40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(slimTableFactory43);
        org.junit.Assert.assertNotNull(strMap44);
        org.junit.Assert.assertNull(wildcardClass47);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hi!" + "'", str49, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory50);
        org.junit.Assert.assertNull(wildcardClass52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(slimTableFactory55);
        org.junit.Assert.assertNotNull(slimTableFactory56);
        org.junit.Assert.assertNull(wildcardClass58);
    }

    @Test
    public void test06906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06906");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory0.copy();
        java.lang.String str10 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.Table table11 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory0.parseDefineTableTypeRow(table11, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test06907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06907");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        boolean boolean6 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass10 = slimTableFactory8.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory8.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap12 = slimTableFactory11.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap12;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory1.copy();
        boolean boolean16 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap17 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass20 = slimTableFactory18.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap21 = slimTableFactory18.tableTypeArrays;
        java.lang.String str23 = slimTableFactory18.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = slimTableFactory18.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap25 = slimTableFactory18.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap25;
        java.lang.String str28 = slimTableFactory1.makeTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass30 = slimTableFactory1.getTableType("");
        java.lang.String str32 = slimTableFactory1.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap33 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.Table table34 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext36 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable37 = slimTableFactory1.makeSlimTable(table34, "hi!", slimTestContext36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNull(wildcardClass20);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory24);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNull(wildcardClass30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
        org.junit.Assert.assertNotNull(strMap33);
    }

    @Test
    public void test06908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06908");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass3 = slimTableFactory1.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        boolean boolean6 = slimTableFactory1.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory1.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap7;
        boolean boolean10 = slimTableFactory0.hasColon("hi!");
        java.lang.String str12 = slimTableFactory0.makeTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory0.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap15 = slimTableFactory0.tableTypeArrays;
        java.lang.Class<?> wildcardClass16 = slimTableFactory0.getClass();
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test06909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06909");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory7.copy();
        java.lang.String str10 = slimTableFactory7.getFullTableName("hi!");
        java.lang.String str12 = slimTableFactory7.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory7.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass16 = slimTableFactory14.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = slimTableFactory14.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory18.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap20 = slimTableFactory19.tableTypes;
        boolean boolean22 = slimTableFactory19.hasColon("");
        boolean boolean24 = slimTableFactory19.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap25 = slimTableFactory19.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass28 = slimTableFactory26.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory29 = slimTableFactory26.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap30 = slimTableFactory29.tableTypeArrays;
        slimTableFactory19.tableTypeArrays = strMap30;
        slimTableFactory14.tableTypeArrays = strMap30;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap33 = slimTableFactory14.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory34 = slimTableFactory14.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap35 = slimTableFactory34.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass37 = slimTableFactory34.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory38 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass40 = slimTableFactory38.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap41 = slimTableFactory38.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory42 = slimTableFactory38.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap43 = slimTableFactory38.tableTypeArrays;
        boolean boolean45 = slimTableFactory38.hasColon("");
        java.lang.String str47 = slimTableFactory38.makeTableType("");
        java.lang.String str49 = slimTableFactory38.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory50 = slimTableFactory38.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory51 = slimTableFactory38.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap52 = slimTableFactory38.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory53 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass55 = slimTableFactory53.getTableType("");
        boolean boolean57 = slimTableFactory53.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap58 = slimTableFactory53.tableTypeArrays;
        slimTableFactory38.tableTypeArrays = strMap58;
        slimTableFactory34.tableTypeArrays = strMap58;
        slimTableFactory7.tableTypeArrays = strMap58;
        java.lang.String str63 = slimTableFactory7.getFullTableName("");
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory13);
        org.junit.Assert.assertNull(wildcardClass16);
        org.junit.Assert.assertNotNull(slimTableFactory17);
        org.junit.Assert.assertNotNull(slimTableFactory19);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNull(wildcardClass28);
        org.junit.Assert.assertNotNull(slimTableFactory29);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(slimTableFactory34);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNull(wildcardClass37);
        org.junit.Assert.assertNull(wildcardClass40);
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertNotNull(slimTableFactory42);
        org.junit.Assert.assertNotNull(strMap43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(slimTableFactory50);
        org.junit.Assert.assertNotNull(slimTableFactory51);
        org.junit.Assert.assertNotNull(strMap52);
        org.junit.Assert.assertNull(wildcardClass55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(strMap58);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
    }

    @Test
    public void test06910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06910");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap5 = slimTableFactory1.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory1.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory1.copy();
        boolean boolean11 = slimTableFactory1.hasColon("");
        boolean boolean13 = slimTableFactory1.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory14.copy();
        boolean boolean17 = slimTableFactory15.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap18 = slimTableFactory15.tableTypeArrays;
        java.lang.String str20 = slimTableFactory15.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = slimTableFactory21.copy();
        boolean boolean24 = slimTableFactory22.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap25 = slimTableFactory22.tableTypeArrays;
        java.lang.String str27 = slimTableFactory22.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap28 = slimTableFactory22.tableTypeArrays;
        slimTableFactory15.tableTypeArrays = strMap28;
        java.util.Map<java.lang.String, java.lang.String> strMap30 = slimTableFactory15.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap31 = slimTableFactory15.tableTypes;
        java.lang.String str33 = slimTableFactory15.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory34 = slimTableFactory15.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory35 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory36 = slimTableFactory35.copy();
        boolean boolean38 = slimTableFactory36.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory39 = slimTableFactory36.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap40 = slimTableFactory36.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory41 = slimTableFactory36.copy();
        boolean boolean43 = slimTableFactory41.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap44 = slimTableFactory41.tableTypeArrays;
        slimTableFactory34.tableTypeArrays = strMap44;
        slimTableFactory1.tableTypeArrays = strMap44;
        fitnesse.testsystems.slim.Table table47 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable48 = slimTableFactory1.parseDefineTableTypeTable(table47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(slimTableFactory22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory34);
        org.junit.Assert.assertNotNull(slimTableFactory36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(slimTableFactory39);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertNotNull(slimTableFactory41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(strMap44);
    }

    @Test
    public void test06911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06911");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        java.lang.String str5 = slimTableFactory0.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory0.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass8 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass11 = slimTableFactory9.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory9.copy();
        boolean boolean14 = slimTableFactory9.hasColon("");
        java.lang.String str16 = slimTableFactory9.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory17.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap19 = slimTableFactory18.tableTypes;
        boolean boolean21 = slimTableFactory18.hasColon("");
        boolean boolean23 = slimTableFactory18.hasColon("hi!");
        boolean boolean25 = slimTableFactory18.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = slimTableFactory18.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap27 = slimTableFactory26.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = slimTableFactory26.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory29 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory30 = slimTableFactory29.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap31 = slimTableFactory30.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory32 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass34 = slimTableFactory32.getTableType("");
        boolean boolean36 = slimTableFactory32.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap37 = slimTableFactory32.tableTypeArrays;
        slimTableFactory30.tableTypeArrays = strMap37;
        slimTableFactory28.tableTypeArrays = strMap37;
        slimTableFactory9.tableTypeArrays = strMap37;
        java.lang.String str42 = slimTableFactory9.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap43 = slimTableFactory9.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory44 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass46 = slimTableFactory44.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap47 = slimTableFactory44.tableTypeArrays;
        boolean boolean49 = slimTableFactory44.hasColon("");
        java.lang.String str51 = slimTableFactory44.makeTableType("");
        java.lang.String str53 = slimTableFactory44.makeTableType("");
        java.lang.String str55 = slimTableFactory44.makeTableType("");
        java.lang.String str57 = slimTableFactory44.getFullTableName("");
        java.lang.String str59 = slimTableFactory44.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory60 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory61 = slimTableFactory60.copy();
        boolean boolean63 = slimTableFactory61.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap64 = slimTableFactory61.tableTypeArrays;
        java.lang.String str66 = slimTableFactory61.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory67 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory68 = slimTableFactory67.copy();
        boolean boolean70 = slimTableFactory68.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap71 = slimTableFactory68.tableTypeArrays;
        java.lang.String str73 = slimTableFactory68.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap74 = slimTableFactory68.tableTypeArrays;
        slimTableFactory61.tableTypeArrays = strMap74;
        slimTableFactory44.tableTypeArrays = strMap74;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass78 = slimTableFactory44.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap79 = slimTableFactory44.tableTypeArrays;
        slimTableFactory9.tableTypeArrays = strMap79;
        slimTableFactory0.tableTypeArrays = strMap79;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap82 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.Table table83 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory0.parseDefineTableTypeRow(table83, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(slimTableFactory18);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(slimTableFactory26);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(slimTableFactory28);
        org.junit.Assert.assertNotNull(slimTableFactory30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNull(wildcardClass34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "hi!" + "'", str42, "hi!");
        org.junit.Assert.assertNotNull(strMap43);
        org.junit.Assert.assertNull(wildcardClass46);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(slimTableFactory61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(strMap64);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(slimTableFactory68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(strMap71);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(strMap74);
        org.junit.Assert.assertNull(wildcardClass78);
        org.junit.Assert.assertNotNull(strMap79);
        org.junit.Assert.assertNotNull(strMap82);
    }

    @Test
    public void test06912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06912");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory1.tableTypeArrays;
        java.lang.String str6 = slimTableFactory1.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory1.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass10 = slimTableFactory1.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory1.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap12 = slimTableFactory1.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory1.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory1.copy();
        java.lang.String str17 = slimTableFactory1.getFullTableName("hi!");
        java.lang.String str19 = slimTableFactory1.makeTableType("");
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
    }

    @Test
    public void test06913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06913");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory3.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory3.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory3.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory3.tableTypes;
        fitnesse.testsystems.slim.Table table8 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext10 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable11 = slimTableFactory3.makeSlimTable(table8, "", slimTestContext10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(strMap7);
    }

    @Test
    public void test06914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06914");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        boolean boolean5 = slimTableFactory0.hasColon("");
        java.lang.String str7 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        java.lang.String str11 = slimTableFactory8.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory8.copy();
        java.lang.String str14 = slimTableFactory8.makeTableType("");
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test06915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06915");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = slimTableFactory0.tableTypeArrays;
        boolean boolean4 = slimTableFactory0.hasColon("");
        boolean boolean6 = slimTableFactory0.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = null;
        slimTableFactory8.tableTypeArrays = strMap10;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass13 = slimTableFactory8.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory14.copy();
        boolean boolean17 = slimTableFactory15.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory15.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory15.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass22 = slimTableFactory20.getTableType("");
        boolean boolean24 = slimTableFactory20.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap25 = slimTableFactory20.tableTypeArrays;
        slimTableFactory19.tableTypeArrays = strMap25;
        slimTableFactory8.tableTypeArrays = strMap25;
        slimTableFactory0.tableTypeArrays = strMap25;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap29 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory30 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass32 = slimTableFactory30.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory33 = slimTableFactory30.copy();
        boolean boolean35 = slimTableFactory30.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass37 = slimTableFactory30.getTableType("hi!");
        java.lang.String str39 = slimTableFactory30.getFullTableName("");
        java.lang.String str41 = slimTableFactory30.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory42 = slimTableFactory30.copy();
        java.lang.String str44 = slimTableFactory42.getFullTableName("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass46 = slimTableFactory42.getTableType("");
        java.lang.String str48 = slimTableFactory42.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap49 = slimTableFactory42.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap49;
        java.util.Map<java.lang.String, java.lang.String> strMap51 = slimTableFactory0.tableTypeArrays;
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(slimTableFactory18);
        org.junit.Assert.assertNotNull(slimTableFactory19);
        org.junit.Assert.assertNull(wildcardClass22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNull(wildcardClass32);
        org.junit.Assert.assertNotNull(slimTableFactory33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(wildcardClass37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi!" + "'", str44, "hi!");
        org.junit.Assert.assertNull(wildcardClass46);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(strMap49);
        org.junit.Assert.assertNotNull(strMap51);
    }

    @Test
    public void test06916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06916");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory3.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory3.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory6.copy();
        boolean boolean9 = slimTableFactory7.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory7.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory7.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory7.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap13 = slimTableFactory7.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory14.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory14.tableTypeArrays;
        slimTableFactory7.tableTypeArrays = strMap16;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass20 = slimTableFactory18.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = slimTableFactory18.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap22 = slimTableFactory21.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap23 = slimTableFactory21.tableTypeArrays;
        slimTableFactory7.tableTypeArrays = strMap23;
        slimTableFactory5.tableTypeArrays = strMap23;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = slimTableFactory5.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass28 = slimTableFactory5.getTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass30 = slimTableFactory5.getTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass32 = slimTableFactory5.getTableType("");
        fitnesse.testsystems.slim.Table table33 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext35 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable36 = slimTableFactory5.makeSlimTable(table33, "hi!", slimTestContext35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNull(wildcardClass20);
        org.junit.Assert.assertNotNull(slimTableFactory21);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(slimTableFactory26);
        org.junit.Assert.assertNull(wildcardClass28);
        org.junit.Assert.assertNull(wildcardClass30);
        org.junit.Assert.assertNull(wildcardClass32);
    }

    @Test
    public void test06917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06917");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory4.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap6 = slimTableFactory5.tableTypes;
        boolean boolean8 = slimTableFactory5.hasColon("");
        boolean boolean10 = slimTableFactory5.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap11 = slimTableFactory5.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory12.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory12.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory15.tableTypeArrays;
        slimTableFactory5.tableTypeArrays = strMap16;
        slimTableFactory0.tableTypeArrays = strMap16;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = slimTableFactory20.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap22 = null;
        slimTableFactory20.tableTypeArrays = strMap22;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass25 = slimTableFactory20.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = slimTableFactory26.copy();
        boolean boolean29 = slimTableFactory27.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory30 = slimTableFactory27.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory31 = slimTableFactory27.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory32 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass34 = slimTableFactory32.getTableType("");
        boolean boolean36 = slimTableFactory32.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap37 = slimTableFactory32.tableTypeArrays;
        slimTableFactory31.tableTypeArrays = strMap37;
        slimTableFactory20.tableTypeArrays = strMap37;
        boolean boolean41 = slimTableFactory20.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory42 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass44 = slimTableFactory42.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap45 = slimTableFactory42.tableTypeArrays;
        slimTableFactory20.tableTypeArrays = strMap45;
        slimTableFactory19.tableTypeArrays = strMap45;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap48 = slimTableFactory19.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap49 = slimTableFactory19.tableTypeArrays;
        java.lang.String str51 = slimTableFactory19.makeTableType("");
        fitnesse.testsystems.slim.Table table52 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable53 = slimTableFactory19.parseDefineTableTypeTable(table52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(slimTableFactory19);
        org.junit.Assert.assertNotNull(slimTableFactory21);
        org.junit.Assert.assertNull(wildcardClass25);
        org.junit.Assert.assertNotNull(slimTableFactory27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(slimTableFactory30);
        org.junit.Assert.assertNotNull(slimTableFactory31);
        org.junit.Assert.assertNull(wildcardClass34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(wildcardClass44);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNotNull(strMap48);
        org.junit.Assert.assertNotNull(strMap49);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
    }

    @Test
    public void test06918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06918");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap5 = slimTableFactory1.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory1.copy();
        boolean boolean11 = slimTableFactory9.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory9.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory9.getTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass16 = slimTableFactory9.getTableType("");
        java.lang.String str18 = slimTableFactory9.makeTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass20 = slimTableFactory9.getTableType("hi!");
        fitnesse.testsystems.slim.Table table21 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory9.parseDefineTableTypeRow(table21, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertNull(wildcardClass16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertNull(wildcardClass20);
    }

    @Test
    public void test06919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06919");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap5 = slimTableFactory4.tableTypeArrays;
        java.lang.String str7 = slimTableFactory4.makeTableType("");
        fitnesse.testsystems.slim.Table table8 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext10 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable11 = slimTableFactory4.makeSlimTable(table8, "", slimTestContext10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
    }

    @Test
    public void test06920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06920");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory0.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap10 = slimTableFactory9.tableTypes;
        boolean boolean12 = slimTableFactory9.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap13 = slimTableFactory9.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory9.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory15.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap17 = slimTableFactory16.tableTypes;
        boolean boolean19 = slimTableFactory16.hasColon("");
        boolean boolean21 = slimTableFactory16.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap22 = slimTableFactory16.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass25 = slimTableFactory23.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = slimTableFactory23.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap27 = slimTableFactory26.tableTypeArrays;
        slimTableFactory16.tableTypeArrays = strMap27;
        slimTableFactory9.tableTypeArrays = strMap27;
        slimTableFactory0.tableTypeArrays = strMap27;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory31 = slimTableFactory0.copy();
        java.lang.String str33 = slimTableFactory31.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory34 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory35 = slimTableFactory34.copy();
        boolean boolean37 = slimTableFactory35.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory38 = slimTableFactory35.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory39 = slimTableFactory35.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory40 = slimTableFactory35.copy();
        boolean boolean42 = slimTableFactory40.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory43 = slimTableFactory40.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap44 = slimTableFactory43.tableTypeArrays;
        slimTableFactory31.tableTypeArrays = strMap44;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass47 = slimTableFactory31.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory48 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass50 = slimTableFactory48.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory51 = slimTableFactory48.copy();
        boolean boolean53 = slimTableFactory48.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass55 = slimTableFactory48.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory56 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory57 = slimTableFactory56.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap58 = slimTableFactory57.tableTypes;
        boolean boolean60 = slimTableFactory57.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap61 = slimTableFactory57.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap62 = slimTableFactory57.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory63 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory64 = slimTableFactory63.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap65 = slimTableFactory64.tableTypes;
        boolean boolean67 = slimTableFactory64.hasColon("");
        boolean boolean69 = slimTableFactory64.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap70 = slimTableFactory64.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory71 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass73 = slimTableFactory71.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory74 = slimTableFactory71.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap75 = slimTableFactory74.tableTypeArrays;
        slimTableFactory64.tableTypeArrays = strMap75;
        slimTableFactory57.tableTypeArrays = strMap75;
        slimTableFactory48.tableTypeArrays = strMap75;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory79 = slimTableFactory48.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap80 = slimTableFactory79.tableTypeArrays;
        slimTableFactory31.tableTypeArrays = strMap80;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass83 = slimTableFactory31.getTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass85 = slimTableFactory31.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory86 = slimTableFactory31.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap87 = slimTableFactory31.tableTypes;
        fitnesse.testsystems.slim.Table table88 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable89 = slimTableFactory31.parseDefineTableTypeTable(table88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNull(wildcardClass25);
        org.junit.Assert.assertNotNull(slimTableFactory26);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(slimTableFactory31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(slimTableFactory38);
        org.junit.Assert.assertNotNull(slimTableFactory39);
        org.junit.Assert.assertNotNull(slimTableFactory40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(slimTableFactory43);
        org.junit.Assert.assertNotNull(strMap44);
        org.junit.Assert.assertNull(wildcardClass47);
        org.junit.Assert.assertNull(wildcardClass50);
        org.junit.Assert.assertNotNull(slimTableFactory51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(wildcardClass55);
        org.junit.Assert.assertNotNull(slimTableFactory57);
        org.junit.Assert.assertNotNull(strMap58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(strMap61);
        org.junit.Assert.assertNotNull(strMap62);
        org.junit.Assert.assertNotNull(slimTableFactory64);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(strMap70);
        org.junit.Assert.assertNull(wildcardClass73);
        org.junit.Assert.assertNotNull(slimTableFactory74);
        org.junit.Assert.assertNotNull(strMap75);
        org.junit.Assert.assertNotNull(slimTableFactory79);
        org.junit.Assert.assertNotNull(strMap80);
        org.junit.Assert.assertNull(wildcardClass83);
        org.junit.Assert.assertNull(wildcardClass85);
        org.junit.Assert.assertNotNull(slimTableFactory86);
        org.junit.Assert.assertNotNull(strMap87);
    }

    @Test
    public void test06921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06921");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        boolean boolean6 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass10 = slimTableFactory8.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory8.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap12 = slimTableFactory11.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap12;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory1.copy();
        boolean boolean16 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap17 = slimTableFactory1.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass19 = slimTableFactory1.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = slimTableFactory20.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap22 = slimTableFactory21.tableTypes;
        boolean boolean24 = slimTableFactory21.hasColon("");
        boolean boolean26 = slimTableFactory21.hasColon("hi!");
        boolean boolean28 = slimTableFactory21.hasColon("");
        java.lang.String str30 = slimTableFactory21.getFullTableName("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass32 = slimTableFactory21.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap33 = slimTableFactory21.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap33;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory35 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap36 = slimTableFactory35.tableTypes;
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(slimTableFactory21);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNull(wildcardClass32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(slimTableFactory35);
        org.junit.Assert.assertNotNull(strMap36);
    }

    @Test
    public void test06922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06922");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory5.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory5.tableTypes;
        java.lang.String str9 = slimTableFactory5.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory5.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory10.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass13 = slimTableFactory10.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap14 = slimTableFactory10.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory15.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap17 = slimTableFactory16.tableTypes;
        boolean boolean19 = slimTableFactory16.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap20 = slimTableFactory16.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap21 = slimTableFactory16.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = slimTableFactory16.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap23 = slimTableFactory16.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = slimTableFactory24.copy();
        boolean boolean27 = slimTableFactory25.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = slimTableFactory25.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory29 = slimTableFactory25.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap30 = slimTableFactory25.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap31 = slimTableFactory25.tableTypeArrays;
        slimTableFactory16.tableTypeArrays = strMap31;
        slimTableFactory10.tableTypeArrays = strMap31;
        java.lang.String str35 = slimTableFactory10.getFullTableName("hi!");
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(slimTableFactory22);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(slimTableFactory25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(slimTableFactory28);
        org.junit.Assert.assertNotNull(slimTableFactory29);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
    }

    @Test
    public void test06923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06923");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.lang.String str3 = slimTableFactory0.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory4.copy();
        boolean boolean7 = slimTableFactory5.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass10 = slimTableFactory8.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory8.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory8.copy();
        java.lang.String str14 = slimTableFactory12.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap15 = slimTableFactory12.tableTypeArrays;
        slimTableFactory5.tableTypeArrays = strMap15;
        java.lang.Class<?> wildcardClass17 = slimTableFactory5.getClass();
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!" + "'", str3, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test06924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06924");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap5 = slimTableFactory1.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory1.copy();
        java.lang.String str9 = slimTableFactory7.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap10 = slimTableFactory7.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass13 = slimTableFactory11.getTableType("");
        boolean boolean15 = slimTableFactory11.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory11.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory17.copy();
        boolean boolean20 = slimTableFactory18.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap21 = slimTableFactory18.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap22 = slimTableFactory18.tableTypeArrays;
        slimTableFactory11.tableTypeArrays = strMap22;
        java.util.Map<java.lang.String, java.lang.String> strMap24 = slimTableFactory11.tableTypeArrays;
        slimTableFactory7.tableTypeArrays = strMap24;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = slimTableFactory7.copy();
        boolean boolean28 = slimTableFactory7.hasColon("hi!");
        java.lang.String str30 = slimTableFactory7.getFullTableName("hi!");
        boolean boolean32 = slimTableFactory7.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap33 = slimTableFactory7.tableTypeArrays;
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(slimTableFactory18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNotNull(slimTableFactory26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strMap33);
    }

    @Test
    public void test06925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06925");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        boolean boolean5 = slimTableFactory0.hasColon("");
        java.lang.String str7 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap9 = slimTableFactory0.tableTypes;
        boolean boolean11 = slimTableFactory0.hasColon("");
        fitnesse.testsystems.slim.Table table12 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext14 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable15 = slimTableFactory0.makeSlimTable(table12, "", slimTestContext14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test06926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06926");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory5.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass9 = slimTableFactory7.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory7.copy();
        boolean boolean12 = slimTableFactory7.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap13 = slimTableFactory7.tableTypeArrays;
        slimTableFactory5.tableTypeArrays = strMap13;
        java.util.Map<java.lang.String, java.lang.String> strMap15 = slimTableFactory5.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass18 = slimTableFactory16.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory16.copy();
        boolean boolean21 = slimTableFactory16.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = slimTableFactory22.copy();
        boolean boolean25 = slimTableFactory23.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = slimTableFactory23.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = slimTableFactory23.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = slimTableFactory27.copy();
        boolean boolean30 = slimTableFactory27.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap31 = slimTableFactory27.tableTypeArrays;
        slimTableFactory16.tableTypeArrays = strMap31;
        slimTableFactory5.tableTypeArrays = strMap31;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass35 = slimTableFactory5.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory36 = slimTableFactory5.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory37 = slimTableFactory5.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap38 = slimTableFactory37.tableTypes;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap39 = slimTableFactory37.tableTypes;
        java.lang.Class<?> wildcardClass40 = slimTableFactory37.getClass();
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertNotNull(slimTableFactory19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(slimTableFactory23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(slimTableFactory26);
        org.junit.Assert.assertNotNull(slimTableFactory27);
        org.junit.Assert.assertNotNull(slimTableFactory28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNull(wildcardClass35);
        org.junit.Assert.assertNotNull(slimTableFactory36);
        org.junit.Assert.assertNotNull(slimTableFactory37);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test06927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06927");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory5.getTableType("hi!");
        boolean boolean9 = slimTableFactory5.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass11 = slimTableFactory5.getTableType("hi!");
        java.lang.String str13 = slimTableFactory5.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory5.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory14.copy();
        java.lang.String str17 = slimTableFactory15.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap18 = slimTableFactory15.tableTypeArrays;
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(strMap18);
    }

    @Test
    public void test06928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06928");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass8 = slimTableFactory6.getTableType("");
        boolean boolean10 = slimTableFactory6.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory6.tableTypeArrays;
        slimTableFactory5.tableTypeArrays = strMap11;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap13 = slimTableFactory5.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory5.copy();
        java.lang.String str16 = slimTableFactory5.getFullTableName("hi!");
        fitnesse.testsystems.slim.Table table17 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext19 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable20 = slimTableFactory5.makeSlimTable(table17, "", slimTestContext19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
    }

    @Test
    public void test06929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06929");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory1.tableTypeArrays;
        java.lang.String str6 = slimTableFactory1.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory7.copy();
        boolean boolean10 = slimTableFactory8.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory8.tableTypeArrays;
        java.lang.String str13 = slimTableFactory8.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory8.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap14;
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory1.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap17 = slimTableFactory1.tableTypes;
        java.lang.String str19 = slimTableFactory1.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = slimTableFactory21.copy();
        boolean boolean24 = slimTableFactory22.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = slimTableFactory22.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap26 = slimTableFactory22.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = slimTableFactory22.copy();
        boolean boolean29 = slimTableFactory27.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap30 = slimTableFactory27.tableTypeArrays;
        slimTableFactory20.tableTypeArrays = strMap30;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory32 = slimTableFactory20.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory33 = slimTableFactory20.copy();
        java.lang.String str35 = slimTableFactory33.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory36 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory37 = slimTableFactory36.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap38 = slimTableFactory36.tableTypeArrays;
        boolean boolean40 = slimTableFactory36.hasColon("");
        boolean boolean42 = slimTableFactory36.hasColon("hi!");
        boolean boolean44 = slimTableFactory36.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap45 = slimTableFactory36.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory46 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass48 = slimTableFactory46.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory49 = slimTableFactory46.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory50 = slimTableFactory49.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap51 = slimTableFactory49.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory52 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass54 = slimTableFactory52.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap55 = slimTableFactory52.tableTypeArrays;
        boolean boolean57 = slimTableFactory52.hasColon("");
        java.lang.String str59 = slimTableFactory52.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory60 = slimTableFactory52.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory61 = slimTableFactory60.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory62 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass64 = slimTableFactory62.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory65 = slimTableFactory62.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap66 = slimTableFactory65.tableTypeArrays;
        slimTableFactory60.tableTypeArrays = strMap66;
        slimTableFactory49.tableTypeArrays = strMap66;
        java.util.Map<java.lang.String, java.lang.String> strMap69 = slimTableFactory49.tableTypeArrays;
        slimTableFactory36.tableTypeArrays = strMap69;
        java.util.Map<java.lang.String, java.lang.String> strMap71 = slimTableFactory36.tableTypeArrays;
        slimTableFactory33.tableTypeArrays = strMap71;
        fitnesse.testsystems.slim.Table table73 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable74 = slimTableFactory33.parseDefineTableTypeTable(table73);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory20);
        org.junit.Assert.assertNotNull(slimTableFactory22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(slimTableFactory25);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(slimTableFactory27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(slimTableFactory32);
        org.junit.Assert.assertNotNull(slimTableFactory33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory37);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNull(wildcardClass48);
        org.junit.Assert.assertNotNull(slimTableFactory49);
        org.junit.Assert.assertNotNull(slimTableFactory50);
        org.junit.Assert.assertNotNull(strMap51);
        org.junit.Assert.assertNull(wildcardClass54);
        org.junit.Assert.assertNotNull(strMap55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(slimTableFactory60);
        org.junit.Assert.assertNotNull(slimTableFactory61);
        org.junit.Assert.assertNull(wildcardClass64);
        org.junit.Assert.assertNotNull(slimTableFactory65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strMap69);
        org.junit.Assert.assertNotNull(strMap71);
    }

    @Test
    public void test06930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06930");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory0.getTableType("hi!");
        java.lang.String str9 = slimTableFactory0.getFullTableName("");
        java.lang.String str11 = slimTableFactory0.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory0.copy();
        java.lang.String str14 = slimTableFactory12.getFullTableName("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass16 = slimTableFactory12.getTableType("hi!");
        java.lang.String str18 = slimTableFactory12.makeTableType("hi!");
        java.lang.Class<?> wildcardClass19 = slimTableFactory12.getClass();
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertNull(wildcardClass16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test06931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06931");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        boolean boolean6 = slimTableFactory1.hasColon("hi!");
        boolean boolean8 = slimTableFactory1.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory1.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass11 = slimTableFactory9.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap12 = slimTableFactory9.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass15 = slimTableFactory13.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory13.copy();
        boolean boolean18 = slimTableFactory16.hasColon("");
        boolean boolean20 = slimTableFactory16.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = slimTableFactory16.copy();
        java.lang.String str23 = slimTableFactory16.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap24 = slimTableFactory16.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = slimTableFactory25.copy();
        boolean boolean28 = slimTableFactory26.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap29 = slimTableFactory26.tableTypeArrays;
        java.lang.String str31 = slimTableFactory26.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory32 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory33 = slimTableFactory32.copy();
        boolean boolean35 = slimTableFactory33.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap36 = slimTableFactory33.tableTypeArrays;
        java.lang.String str38 = slimTableFactory33.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap39 = slimTableFactory33.tableTypeArrays;
        slimTableFactory26.tableTypeArrays = strMap39;
        java.util.Map<java.lang.String, java.lang.String> strMap41 = slimTableFactory26.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap42 = slimTableFactory26.tableTypes;
        java.lang.String str44 = slimTableFactory26.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory45 = slimTableFactory26.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory46 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory47 = slimTableFactory46.copy();
        boolean boolean49 = slimTableFactory47.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory50 = slimTableFactory47.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap51 = slimTableFactory47.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory52 = slimTableFactory47.copy();
        boolean boolean54 = slimTableFactory52.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap55 = slimTableFactory52.tableTypeArrays;
        slimTableFactory45.tableTypeArrays = strMap55;
        slimTableFactory16.tableTypeArrays = strMap55;
        slimTableFactory9.tableTypeArrays = strMap55;
        java.lang.String str60 = slimTableFactory9.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap61 = slimTableFactory9.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap62 = slimTableFactory9.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap63 = slimTableFactory9.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap64 = slimTableFactory9.tableTypes;
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(slimTableFactory21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNotNull(slimTableFactory26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(slimTableFactory33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertNotNull(strMap42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi!" + "'", str44, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory45);
        org.junit.Assert.assertNotNull(slimTableFactory47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(slimTableFactory50);
        org.junit.Assert.assertNotNull(strMap51);
        org.junit.Assert.assertNotNull(slimTableFactory52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(strMap55);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(strMap61);
        org.junit.Assert.assertNotNull(strMap62);
        org.junit.Assert.assertNotNull(strMap63);
        org.junit.Assert.assertNotNull(strMap64);
    }

    @Test
    public void test06932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06932");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        boolean boolean4 = slimTableFactory0.hasColon("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass6 = slimTableFactory0.getTableType("hi!");
        java.lang.String str8 = slimTableFactory0.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory0.copy();
        java.lang.String str11 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap12 = slimTableFactory0.tableTypes;
        java.lang.String str14 = slimTableFactory0.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass17 = slimTableFactory15.getTableType("");
        boolean boolean19 = slimTableFactory15.hasColon("");
        java.lang.String str21 = slimTableFactory15.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap22 = slimTableFactory15.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass25 = slimTableFactory23.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap26 = slimTableFactory23.tableTypeArrays;
        boolean boolean28 = slimTableFactory23.hasColon("");
        java.lang.String str30 = slimTableFactory23.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap31 = slimTableFactory23.tableTypeArrays;
        slimTableFactory15.tableTypeArrays = strMap31;
        slimTableFactory0.tableTypeArrays = strMap31;
        fitnesse.testsystems.slim.Table table34 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable35 = slimTableFactory0.parseDefineTableTypeTable(table34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertNull(wildcardClass17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNull(wildcardClass25);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(strMap31);
    }

    @Test
    public void test06933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06933");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory5.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory5.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory5.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass11 = slimTableFactory9.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory9.copy();
        java.lang.String str14 = slimTableFactory12.getFullTableName("hi!");
        java.lang.String str16 = slimTableFactory12.makeTableType("hi!");
        java.lang.String str18 = slimTableFactory12.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap19 = slimTableFactory12.tableTypeArrays;
        slimTableFactory5.tableTypeArrays = strMap19;
        boolean boolean22 = slimTableFactory5.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass25 = slimTableFactory23.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = slimTableFactory23.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = slimTableFactory27.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap29 = slimTableFactory28.tableTypes;
        boolean boolean31 = slimTableFactory28.hasColon("");
        boolean boolean33 = slimTableFactory28.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap34 = slimTableFactory28.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory35 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass37 = slimTableFactory35.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory38 = slimTableFactory35.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap39 = slimTableFactory38.tableTypeArrays;
        slimTableFactory28.tableTypeArrays = strMap39;
        slimTableFactory23.tableTypeArrays = strMap39;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory42 = slimTableFactory23.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory43 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory44 = slimTableFactory43.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap45 = null;
        slimTableFactory43.tableTypeArrays = strMap45;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass48 = slimTableFactory43.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory49 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory50 = slimTableFactory49.copy();
        boolean boolean52 = slimTableFactory50.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory53 = slimTableFactory50.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory54 = slimTableFactory50.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory55 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass57 = slimTableFactory55.getTableType("");
        boolean boolean59 = slimTableFactory55.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap60 = slimTableFactory55.tableTypeArrays;
        slimTableFactory54.tableTypeArrays = strMap60;
        slimTableFactory43.tableTypeArrays = strMap60;
        boolean boolean64 = slimTableFactory43.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory65 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass67 = slimTableFactory65.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap68 = slimTableFactory65.tableTypeArrays;
        slimTableFactory43.tableTypeArrays = strMap68;
        slimTableFactory42.tableTypeArrays = strMap68;
        slimTableFactory5.tableTypeArrays = strMap68;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory72 = slimTableFactory5.copy();
        boolean boolean74 = slimTableFactory72.hasColon("");
        fitnesse.testsystems.slim.Table table75 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext77 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable78 = slimTableFactory72.makeSlimTable(table75, "", slimTestContext77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(wildcardClass25);
        org.junit.Assert.assertNotNull(slimTableFactory26);
        org.junit.Assert.assertNotNull(slimTableFactory28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNull(wildcardClass37);
        org.junit.Assert.assertNotNull(slimTableFactory38);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNotNull(slimTableFactory42);
        org.junit.Assert.assertNotNull(slimTableFactory44);
        org.junit.Assert.assertNull(wildcardClass48);
        org.junit.Assert.assertNotNull(slimTableFactory50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(slimTableFactory53);
        org.junit.Assert.assertNotNull(slimTableFactory54);
        org.junit.Assert.assertNull(wildcardClass57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(strMap60);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(wildcardClass67);
        org.junit.Assert.assertNotNull(strMap68);
        org.junit.Assert.assertNotNull(slimTableFactory72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test06934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06934");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("hi!");
        java.lang.String str7 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.Table table8 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory0.parseDefineTableTypeRow(table8, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
    }

    @Test
    public void test06935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06935");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        boolean boolean5 = slimTableFactory0.hasColon("");
        boolean boolean7 = slimTableFactory0.hasColon("hi!");
        boolean boolean9 = slimTableFactory0.hasColon("");
        java.lang.String str11 = slimTableFactory0.makeTableType("hi!");
        java.lang.String str13 = slimTableFactory0.getFullTableName("");
        java.lang.String str15 = slimTableFactory0.makeTableType("");
        java.lang.Class<?> wildcardClass16 = slimTableFactory0.getClass();
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test06936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06936");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap5 = slimTableFactory1.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory1.getTableType("");
        boolean boolean9 = slimTableFactory1.hasColon("");
        java.lang.String str11 = slimTableFactory1.makeTableType("");
        java.lang.String str13 = slimTableFactory1.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap14 = slimTableFactory1.tableTypes;
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(strMap14);
    }

    @Test
    public void test06937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06937");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory1.tableTypeArrays;
        java.lang.String str6 = slimTableFactory1.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory7.copy();
        boolean boolean10 = slimTableFactory8.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory8.tableTypeArrays;
        java.lang.String str13 = slimTableFactory8.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory8.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap14;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory1.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass18 = slimTableFactory16.getTableType("");
        fitnesse.testsystems.slim.Table table19 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext21 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable22 = slimTableFactory16.makeSlimTable(table19, "", slimTestContext21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertNull(wildcardClass18);
    }

    @Test
    public void test06938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06938");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap4 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.Table table5 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory1.parseDefineTableTypeRow(table5, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strMap4);
    }

    @Test
    public void test06939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06939");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory4.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap6 = slimTableFactory5.tableTypes;
        boolean boolean8 = slimTableFactory5.hasColon("");
        boolean boolean10 = slimTableFactory5.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap11 = slimTableFactory5.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory12.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory12.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory15.tableTypeArrays;
        slimTableFactory5.tableTypeArrays = strMap16;
        slimTableFactory0.tableTypeArrays = strMap16;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = slimTableFactory20.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap22 = null;
        slimTableFactory20.tableTypeArrays = strMap22;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass25 = slimTableFactory20.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = slimTableFactory26.copy();
        boolean boolean29 = slimTableFactory27.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory30 = slimTableFactory27.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory31 = slimTableFactory27.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory32 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass34 = slimTableFactory32.getTableType("");
        boolean boolean36 = slimTableFactory32.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap37 = slimTableFactory32.tableTypeArrays;
        slimTableFactory31.tableTypeArrays = strMap37;
        slimTableFactory20.tableTypeArrays = strMap37;
        boolean boolean41 = slimTableFactory20.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory42 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass44 = slimTableFactory42.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap45 = slimTableFactory42.tableTypeArrays;
        slimTableFactory20.tableTypeArrays = strMap45;
        slimTableFactory19.tableTypeArrays = strMap45;
        boolean boolean49 = slimTableFactory19.hasColon("");
        boolean boolean51 = slimTableFactory19.hasColon("");
        boolean boolean53 = slimTableFactory19.hasColon("hi!");
        boolean boolean55 = slimTableFactory19.hasColon("");
        java.lang.Class<?> wildcardClass56 = slimTableFactory19.getClass();
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(slimTableFactory19);
        org.junit.Assert.assertNotNull(slimTableFactory21);
        org.junit.Assert.assertNull(wildcardClass25);
        org.junit.Assert.assertNotNull(slimTableFactory27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(slimTableFactory30);
        org.junit.Assert.assertNotNull(slimTableFactory31);
        org.junit.Assert.assertNull(wildcardClass34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(wildcardClass44);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test06940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06940");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        slimTableFactory0.tableTypeArrays = strMap2;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass5 = slimTableFactory0.getTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory0.getTableType("");
        boolean boolean9 = slimTableFactory0.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory0.tableTypeArrays;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str12 = slimTableFactory0.getFullTableName("");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(strMap10);
    }

    @Test
    public void test06941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06941");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass4 = slimTableFactory1.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap5 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory6.copy();
        java.lang.String str9 = slimTableFactory7.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory7.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap11 = slimTableFactory7.tableTypes;
        fitnesse.testsystems.slim.Table table12 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable13 = slimTableFactory7.parseDefineTableTypeTable(table12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNotNull(strMap11);
    }

    @Test
    public void test06942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06942");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("hi!");
        java.lang.String str7 = slimTableFactory0.getFullTableName("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass9 = slimTableFactory0.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap11 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory12.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap15 = slimTableFactory12.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass17 = slimTableFactory12.getTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass19 = slimTableFactory12.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory12.copy();
        boolean boolean22 = slimTableFactory12.hasColon("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass24 = slimTableFactory12.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap25 = slimTableFactory12.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap25;
        fitnesse.testsystems.slim.Table table27 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable28 = slimTableFactory0.parseDefineTableTypeTable(table27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNull(wildcardClass17);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(slimTableFactory20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(wildcardClass24);
        org.junit.Assert.assertNotNull(strMap25);
    }

    @Test
    public void test06943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06943");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass5 = slimTableFactory3.getTableType("");
        boolean boolean7 = slimTableFactory3.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory3.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap8;
        java.lang.String str11 = slimTableFactory1.makeTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass13 = slimTableFactory1.getTableType("");
        boolean boolean15 = slimTableFactory1.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.Table table17 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable18 = slimTableFactory1.parseDefineTableTypeTable(table17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(slimTableFactory16);
    }

    @Test
    public void test06944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06944");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory1.tableTypeArrays;
        java.lang.String str6 = slimTableFactory1.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory7.copy();
        boolean boolean10 = slimTableFactory8.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory8.tableTypeArrays;
        java.lang.String str13 = slimTableFactory8.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory8.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap14;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap18 = slimTableFactory17.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap19 = slimTableFactory17.tableTypeArrays;
        fitnesse.testsystems.slim.Table table20 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory17.parseDefineTableTypeRow(table20, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertNotNull(slimTableFactory17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(strMap19);
    }

    @Test
    public void test06945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06945");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory3.hasColon("");
        boolean boolean7 = slimTableFactory3.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory3.copy();
        java.lang.String str10 = slimTableFactory3.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap11 = slimTableFactory3.tableTypes;
        java.lang.String str13 = slimTableFactory3.makeTableType("hi!");
        java.lang.String str15 = slimTableFactory3.getFullTableName("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass17 = slimTableFactory3.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory3.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass20 = slimTableFactory18.getTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap21 = slimTableFactory18.tableTypes;
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNull(wildcardClass17);
        org.junit.Assert.assertNotNull(slimTableFactory18);
        org.junit.Assert.assertNull(wildcardClass20);
        org.junit.Assert.assertNotNull(strMap21);
    }

    @Test
    public void test06946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06946");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory0.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap9 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.Table table10 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext12 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable13 = slimTableFactory0.makeSlimTable(table10, "hi!", slimTestContext12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strMap9);
    }

    @Test
    public void test06947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06947");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        boolean boolean4 = slimTableFactory0.hasColon("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass6 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory7.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap9 = slimTableFactory8.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass12 = slimTableFactory10.getTableType("");
        boolean boolean14 = slimTableFactory10.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap15 = slimTableFactory10.tableTypeArrays;
        slimTableFactory8.tableTypeArrays = strMap15;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory17.copy();
        boolean boolean20 = slimTableFactory18.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = slimTableFactory18.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = slimTableFactory18.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = slimTableFactory22.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass26 = slimTableFactory24.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = slimTableFactory24.copy();
        boolean boolean29 = slimTableFactory24.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap30 = slimTableFactory24.tableTypeArrays;
        slimTableFactory22.tableTypeArrays = strMap30;
        java.util.Map<java.lang.String, java.lang.String> strMap32 = slimTableFactory22.tableTypeArrays;
        slimTableFactory8.tableTypeArrays = strMap32;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory34 = slimTableFactory8.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap35 = slimTableFactory34.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap35;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass38 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap39 = slimTableFactory0.tableTypeArrays;
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(slimTableFactory18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(slimTableFactory21);
        org.junit.Assert.assertNotNull(slimTableFactory22);
        org.junit.Assert.assertNotNull(slimTableFactory23);
        org.junit.Assert.assertNull(wildcardClass26);
        org.junit.Assert.assertNotNull(slimTableFactory27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(slimTableFactory34);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNull(wildcardClass38);
        org.junit.Assert.assertNotNull(strMap39);
    }

    @Test
    public void test06948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06948");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory1.tableTypeArrays;
        java.lang.String str6 = slimTableFactory1.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory1.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap8 = slimTableFactory1.tableTypes;
        java.lang.Class<?> wildcardClass9 = strMap8.getClass();
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test06949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06949");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        boolean boolean6 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory1.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass9 = slimTableFactory1.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass12 = slimTableFactory10.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap13 = slimTableFactory10.tableTypeArrays;
        boolean boolean15 = slimTableFactory10.hasColon("");
        java.lang.String str17 = slimTableFactory10.makeTableType("");
        java.lang.String str19 = slimTableFactory10.makeTableType("");
        java.lang.String str21 = slimTableFactory10.makeTableType("");
        java.lang.String str23 = slimTableFactory10.getFullTableName("");
        java.lang.String str25 = slimTableFactory10.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap26 = slimTableFactory10.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = slimTableFactory10.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass30 = slimTableFactory28.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory31 = slimTableFactory28.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory32 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory33 = slimTableFactory32.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap34 = slimTableFactory33.tableTypes;
        boolean boolean36 = slimTableFactory33.hasColon("");
        boolean boolean38 = slimTableFactory33.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap39 = slimTableFactory33.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory40 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass42 = slimTableFactory40.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory43 = slimTableFactory40.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap44 = slimTableFactory43.tableTypeArrays;
        slimTableFactory33.tableTypeArrays = strMap44;
        slimTableFactory28.tableTypeArrays = strMap44;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap47 = slimTableFactory28.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory48 = slimTableFactory28.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap49 = slimTableFactory28.tableTypes;
        boolean boolean51 = slimTableFactory28.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap52 = slimTableFactory28.tableTypeArrays;
        slimTableFactory27.tableTypeArrays = strMap52;
        slimTableFactory1.tableTypeArrays = strMap52;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass56 = slimTableFactory1.getTableType("hi!");
        java.lang.String str58 = slimTableFactory1.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory59 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.Table table60 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext62 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable63 = slimTableFactory1.makeSlimTable(table60, "", slimTestContext62);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(slimTableFactory27);
        org.junit.Assert.assertNull(wildcardClass30);
        org.junit.Assert.assertNotNull(slimTableFactory31);
        org.junit.Assert.assertNotNull(slimTableFactory33);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNull(wildcardClass42);
        org.junit.Assert.assertNotNull(slimTableFactory43);
        org.junit.Assert.assertNotNull(strMap44);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNotNull(slimTableFactory48);
        org.junit.Assert.assertNotNull(strMap49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(strMap52);
        org.junit.Assert.assertNull(wildcardClass56);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "hi!" + "'", str58, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory59);
    }

    @Test
    public void test06950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06950");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        boolean boolean6 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass10 = slimTableFactory8.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory8.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap12 = slimTableFactory11.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap12;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory1.copy();
        boolean boolean16 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap17 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass20 = slimTableFactory18.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap21 = slimTableFactory18.tableTypeArrays;
        java.lang.String str23 = slimTableFactory18.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = slimTableFactory18.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap25 = slimTableFactory18.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap25;
        java.lang.String str28 = slimTableFactory1.makeTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass30 = slimTableFactory1.getTableType("");
        java.lang.String str32 = slimTableFactory1.makeTableType("hi!");
        java.lang.String str34 = slimTableFactory1.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap35 = slimTableFactory1.tableTypeArrays;
        java.lang.String str37 = slimTableFactory1.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap38 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory39 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory40 = slimTableFactory39.copy();
        boolean boolean42 = slimTableFactory40.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory43 = slimTableFactory40.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory44 = slimTableFactory40.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory45 = slimTableFactory40.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap46 = slimTableFactory40.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory47 = slimTableFactory40.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory48 = slimTableFactory47.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory49 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory50 = slimTableFactory49.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap51 = slimTableFactory50.tableTypes;
        boolean boolean53 = slimTableFactory50.hasColon("");
        boolean boolean55 = slimTableFactory50.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory56 = slimTableFactory50.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory57 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory58 = slimTableFactory57.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap59 = null;
        slimTableFactory57.tableTypeArrays = strMap59;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass62 = slimTableFactory57.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory63 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory64 = slimTableFactory63.copy();
        boolean boolean66 = slimTableFactory64.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory67 = slimTableFactory64.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory68 = slimTableFactory64.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory69 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass71 = slimTableFactory69.getTableType("");
        boolean boolean73 = slimTableFactory69.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap74 = slimTableFactory69.tableTypeArrays;
        slimTableFactory68.tableTypeArrays = strMap74;
        slimTableFactory57.tableTypeArrays = strMap74;
        boolean boolean78 = slimTableFactory57.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory79 = slimTableFactory57.copy();
        java.lang.String str81 = slimTableFactory57.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap82 = slimTableFactory57.tableTypes;
        boolean boolean84 = slimTableFactory57.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap85 = slimTableFactory57.tableTypeArrays;
        slimTableFactory56.tableTypeArrays = strMap85;
        slimTableFactory48.tableTypeArrays = strMap85;
        slimTableFactory1.tableTypeArrays = strMap85;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass90 = slimTableFactory1.getTableType("hi!");
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNull(wildcardClass20);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory24);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNull(wildcardClass30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertNotNull(slimTableFactory40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(slimTableFactory43);
        org.junit.Assert.assertNotNull(slimTableFactory44);
        org.junit.Assert.assertNotNull(slimTableFactory45);
        org.junit.Assert.assertNotNull(strMap46);
        org.junit.Assert.assertNotNull(slimTableFactory47);
        org.junit.Assert.assertNotNull(slimTableFactory48);
        org.junit.Assert.assertNotNull(slimTableFactory50);
        org.junit.Assert.assertNotNull(strMap51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(slimTableFactory56);
        org.junit.Assert.assertNotNull(slimTableFactory58);
        org.junit.Assert.assertNull(wildcardClass62);
        org.junit.Assert.assertNotNull(slimTableFactory64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(slimTableFactory67);
        org.junit.Assert.assertNotNull(slimTableFactory68);
        org.junit.Assert.assertNull(wildcardClass71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(strMap74);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(slimTableFactory79);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertNotNull(strMap82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(strMap85);
        org.junit.Assert.assertNull(wildcardClass90);
    }

    @Test
    public void test06951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06951");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory1.tableTypeArrays;
        java.lang.String str6 = slimTableFactory1.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory1.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass10 = slimTableFactory1.getTableType("hi!");
        java.lang.String str12 = slimTableFactory1.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap13 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.Table table14 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory1.parseDefineTableTypeRow(table14, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(strMap13);
    }

    @Test
    public void test06952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06952");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory0.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap9 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory0.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass12 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap13 = slimTableFactory0.tableTypes;
        java.lang.String str15 = slimTableFactory0.getFullTableName("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass17 = slimTableFactory0.getTableType("hi!");
        boolean boolean19 = slimTableFactory0.hasColon("");
        fitnesse.testsystems.slim.Table table20 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext22 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable23 = slimTableFactory0.makeSlimTable(table20, "", slimTestContext22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNull(wildcardClass17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test06953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06953");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        boolean boolean6 = slimTableFactory1.hasColon("hi!");
        boolean boolean8 = slimTableFactory1.hasColon("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass10 = slimTableFactory1.getTableType("hi!");
        java.lang.String str12 = slimTableFactory1.getFullTableName("");
        boolean boolean14 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap15 = slimTableFactory1.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass17 = slimTableFactory1.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory18.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap20 = slimTableFactory19.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass22 = slimTableFactory19.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = slimTableFactory23.copy();
        boolean boolean26 = slimTableFactory24.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = slimTableFactory24.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap28 = slimTableFactory24.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory29 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory30 = slimTableFactory29.copy();
        boolean boolean32 = slimTableFactory30.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory33 = slimTableFactory30.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory34 = slimTableFactory30.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory35 = slimTableFactory30.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap36 = slimTableFactory35.tableTypeArrays;
        slimTableFactory24.tableTypeArrays = strMap36;
        slimTableFactory19.tableTypeArrays = strMap36;
        slimTableFactory1.tableTypeArrays = strMap36;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory40 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory41 = slimTableFactory40.copy();
        boolean boolean43 = slimTableFactory41.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap44 = slimTableFactory41.tableTypeArrays;
        java.lang.String str46 = slimTableFactory41.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory47 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory48 = slimTableFactory47.copy();
        boolean boolean50 = slimTableFactory48.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap51 = slimTableFactory48.tableTypeArrays;
        java.lang.String str53 = slimTableFactory48.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap54 = slimTableFactory48.tableTypeArrays;
        slimTableFactory41.tableTypeArrays = strMap54;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory56 = slimTableFactory41.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass58 = slimTableFactory56.getTableType("");
        boolean boolean60 = slimTableFactory56.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap61 = slimTableFactory56.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap62 = slimTableFactory56.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap62;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass65 = slimTableFactory1.getTableType("");
        java.lang.String str67 = slimTableFactory1.getFullTableName("");
        java.lang.String str69 = slimTableFactory1.makeTableType("hi!");
        fitnesse.testsystems.slim.Table table70 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable71 = slimTableFactory1.parseDefineTableTypeTable(table70);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNull(wildcardClass17);
        org.junit.Assert.assertNotNull(slimTableFactory19);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNull(wildcardClass22);
        org.junit.Assert.assertNotNull(slimTableFactory24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(slimTableFactory27);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNotNull(slimTableFactory30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(slimTableFactory33);
        org.junit.Assert.assertNotNull(slimTableFactory34);
        org.junit.Assert.assertNotNull(slimTableFactory35);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(slimTableFactory41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(strMap44);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(slimTableFactory48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(strMap51);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(slimTableFactory56);
        org.junit.Assert.assertNull(wildcardClass58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(strMap61);
        org.junit.Assert.assertNotNull(strMap62);
        org.junit.Assert.assertNull(wildcardClass65);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "hi!" + "'", str69, "hi!");
    }

    @Test
    public void test06954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06954");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory5.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory5.tableTypes;
        java.lang.String str9 = slimTableFactory5.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory5.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory10.copy();
        fitnesse.testsystems.slim.Table table12 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext14 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable15 = slimTableFactory10.makeSlimTable(table12, "hi!", slimTestContext14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNotNull(slimTableFactory11);
    }

    @Test
    public void test06955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06955");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        boolean boolean6 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass10 = slimTableFactory8.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory8.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap12 = slimTableFactory11.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap12;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory1.copy();
        boolean boolean16 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap17 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass20 = slimTableFactory18.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap21 = slimTableFactory18.tableTypeArrays;
        java.lang.String str23 = slimTableFactory18.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = slimTableFactory18.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap25 = slimTableFactory18.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap25;
        java.lang.String str28 = slimTableFactory1.makeTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass30 = slimTableFactory1.getTableType("");
        java.lang.String str32 = slimTableFactory1.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap33 = slimTableFactory1.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap34 = slimTableFactory1.tableTypeArrays;
        boolean boolean36 = slimTableFactory1.hasColon("");
        boolean boolean38 = slimTableFactory1.hasColon("hi!");
        java.lang.String str40 = slimTableFactory1.getFullTableName("hi!");
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNull(wildcardClass20);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory24);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNull(wildcardClass30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "hi!" + "'", str40, "hi!");
    }

    @Test
    public void test06956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06956");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass5 = slimTableFactory3.getTableType("");
        boolean boolean7 = slimTableFactory3.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory3.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap8;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory10.copy();
        boolean boolean13 = slimTableFactory11.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory11.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory11.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory15.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass19 = slimTableFactory17.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory17.copy();
        boolean boolean22 = slimTableFactory17.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap23 = slimTableFactory17.tableTypeArrays;
        slimTableFactory15.tableTypeArrays = strMap23;
        java.util.Map<java.lang.String, java.lang.String> strMap25 = slimTableFactory15.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap25;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = slimTableFactory27.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap29 = slimTableFactory28.tableTypes;
        boolean boolean31 = slimTableFactory28.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap32 = slimTableFactory28.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap33 = slimTableFactory28.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory34 = slimTableFactory28.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap35 = slimTableFactory28.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap35;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass38 = slimTableFactory1.getTableType("hi!");
        java.lang.String str40 = slimTableFactory1.getFullTableName("");
        java.lang.Class<?> wildcardClass41 = slimTableFactory1.getClass();
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(slimTableFactory20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(slimTableFactory28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(slimTableFactory34);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNull(wildcardClass38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test06957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06957");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory1.tableTypeArrays;
        java.lang.String str6 = slimTableFactory1.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        boolean boolean11 = slimTableFactory9.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory9.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap13 = slimTableFactory9.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass16 = slimTableFactory14.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap17 = slimTableFactory14.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass19 = slimTableFactory14.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass22 = slimTableFactory20.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = slimTableFactory20.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = slimTableFactory23.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = slimTableFactory25.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap27 = slimTableFactory25.tableTypeArrays;
        slimTableFactory23.tableTypeArrays = strMap27;
        slimTableFactory14.tableTypeArrays = strMap27;
        slimTableFactory9.tableTypeArrays = strMap27;
        slimTableFactory1.tableTypeArrays = strMap27;
        java.lang.String str33 = slimTableFactory1.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap34 = slimTableFactory1.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap35 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory36 = slimTableFactory1.copy();
        java.lang.String str38 = slimTableFactory36.getFullTableName("");
        fitnesse.testsystems.slim.Table table39 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory36.parseDefineTableTypeRow(table39, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNull(wildcardClass16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNull(wildcardClass22);
        org.junit.Assert.assertNotNull(slimTableFactory23);
        org.junit.Assert.assertNotNull(slimTableFactory24);
        org.junit.Assert.assertNotNull(slimTableFactory26);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(slimTableFactory36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
    }

    @Test
    public void test06958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06958");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory1.tableTypeArrays;
        java.lang.String str6 = slimTableFactory1.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory1.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass10 = slimTableFactory1.getTableType("hi!");
        java.lang.String str12 = slimTableFactory1.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap13 = slimTableFactory1.tableTypeArrays;
        java.lang.String str15 = slimTableFactory1.makeTableType("hi!");
        fitnesse.testsystems.slim.Table table16 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable17 = slimTableFactory1.parseDefineTableTypeTable(table16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
    }

    @Test
    public void test06959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06959");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory0.tableTypeArrays;
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(strMap7);
    }

    @Test
    public void test06960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06960");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass5 = slimTableFactory3.getTableType("");
        boolean boolean7 = slimTableFactory3.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory3.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap8;
        java.lang.String str11 = slimTableFactory1.makeTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass13 = slimTableFactory1.getTableType("");
        java.lang.String str15 = slimTableFactory1.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap16 = slimTableFactory1.tableTypes;
        java.lang.String str18 = slimTableFactory1.makeTableType("");
        boolean boolean20 = slimTableFactory1.hasColon("");
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test06961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06961");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        slimTableFactory0.tableTypeArrays = strMap2;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass5 = slimTableFactory0.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory6.copy();
        boolean boolean9 = slimTableFactory7.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory7.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory7.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory12.getTableType("");
        boolean boolean16 = slimTableFactory12.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap17 = slimTableFactory12.tableTypeArrays;
        slimTableFactory11.tableTypeArrays = strMap17;
        slimTableFactory0.tableTypeArrays = strMap17;
        boolean boolean21 = slimTableFactory0.hasColon("");
        boolean boolean23 = slimTableFactory0.hasColon("");
        java.lang.String str25 = slimTableFactory0.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap27 = slimTableFactory26.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass29 = slimTableFactory26.getTableType("hi!");
        fitnesse.testsystems.slim.Table table30 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext32 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable33 = slimTableFactory26.makeSlimTable(table30, "", slimTestContext32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory26);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNull(wildcardClass29);
    }

    @Test
    public void test06962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06962");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap5 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory6.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory7.copy();
        java.lang.String str10 = slimTableFactory8.getFullTableName("");
        fitnesse.testsystems.slim.Table table11 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory8.parseDefineTableTypeRow(table11, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test06963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06963");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        boolean boolean5 = slimTableFactory0.hasColon("");
        java.lang.String str7 = slimTableFactory0.makeTableType("");
        java.lang.String str9 = slimTableFactory0.makeTableType("");
        java.lang.String str11 = slimTableFactory0.makeTableType("");
        java.lang.String str13 = slimTableFactory0.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory0.tableTypeArrays;
        boolean boolean16 = slimTableFactory0.hasColon("");
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test06964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06964");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        boolean boolean6 = slimTableFactory1.hasColon("hi!");
        boolean boolean8 = slimTableFactory1.hasColon("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass10 = slimTableFactory1.getTableType("hi!");
        java.lang.String str12 = slimTableFactory1.getFullTableName("");
        boolean boolean14 = slimTableFactory1.hasColon("hi!");
        java.lang.String str16 = slimTableFactory1.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory17.copy();
        boolean boolean20 = slimTableFactory18.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = slimTableFactory18.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap22 = slimTableFactory18.tableTypeArrays;
        boolean boolean24 = slimTableFactory18.hasColon("hi!");
        java.lang.String str26 = slimTableFactory18.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap27 = slimTableFactory18.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap27;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory29 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap30 = slimTableFactory29.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap31 = slimTableFactory29.tableTypes;
        java.lang.String str33 = slimTableFactory29.makeTableType("hi!");
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(slimTableFactory18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(slimTableFactory21);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(slimTableFactory29);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
    }

    @Test
    public void test06965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06965");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory0.getTableType("hi!");
        java.lang.String str9 = slimTableFactory0.getFullTableName("");
        java.lang.String str11 = slimTableFactory0.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap13 = slimTableFactory12.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory12.copy();
        fitnesse.testsystems.slim.Table table15 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory14.parseDefineTableTypeRow(table15, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(slimTableFactory14);
    }

    @Test
    public void test06966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06966");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        boolean boolean6 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass10 = slimTableFactory8.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory8.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap12 = slimTableFactory11.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap12;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory1.copy();
        java.lang.String str16 = slimTableFactory14.makeTableType("hi!");
        java.lang.String str18 = slimTableFactory14.getFullTableName("hi!");
        java.lang.String str20 = slimTableFactory14.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = slimTableFactory14.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass23 = slimTableFactory14.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = slimTableFactory14.copy();
        fitnesse.testsystems.slim.Table table25 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory24.parseDefineTableTypeRow(table25, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(slimTableFactory21);
        org.junit.Assert.assertNull(wildcardClass23);
        org.junit.Assert.assertNotNull(slimTableFactory24);
    }

    @Test
    public void test06967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06967");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory3.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap5 = slimTableFactory3.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap6 = slimTableFactory3.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass8 = slimTableFactory3.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory3.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass11 = slimTableFactory9.getTableType("hi!");
        boolean boolean13 = slimTableFactory9.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory9.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap15 = slimTableFactory9.tableTypeArrays;
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertNotNull(strMap15);
    }

    @Test
    public void test06968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06968");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.lang.String str3 = slimTableFactory0.getFullTableName("hi!");
        java.lang.String str5 = slimTableFactory0.makeTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap6 = slimTableFactory0.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory0.tableTypeArrays;
        java.lang.String str9 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.Table table10 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory0.parseDefineTableTypeRow(table10, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!" + "'", str3, "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test06969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06969");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory1.tableTypeArrays;
        java.lang.String str6 = slimTableFactory1.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory7.copy();
        boolean boolean10 = slimTableFactory8.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory8.tableTypeArrays;
        java.lang.String str13 = slimTableFactory8.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory8.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap14;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap17 = slimTableFactory1.tableTypes;
        java.lang.String str19 = slimTableFactory1.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap20 = slimTableFactory1.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap21 = slimTableFactory1.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap22 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.Table table23 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable24 = slimTableFactory1.parseDefineTableTypeTable(table23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(strMap22);
    }

    @Test
    public void test06970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06970");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        boolean boolean6 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory1.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass9 = slimTableFactory1.getTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap10 = slimTableFactory1.tableTypes;
        boolean boolean12 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap13 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.Table table14 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable15 = slimTableFactory1.parseDefineTableTypeTable(table14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strMap13);
    }

    @Test
    public void test06971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06971");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory0.copy();
        boolean boolean9 = slimTableFactory0.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap11 = slimTableFactory10.tableTypes;
        java.lang.String str13 = slimTableFactory10.makeTableType("");
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test06972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06972");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap5 = slimTableFactory1.tableTypeArrays;
        boolean boolean7 = slimTableFactory1.hasColon("hi!");
        java.lang.String str9 = slimTableFactory1.makeTableType("");
        java.lang.String str11 = slimTableFactory1.getFullTableName("hi!");
        java.lang.String str13 = slimTableFactory1.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.Table table15 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable16 = slimTableFactory14.parseDefineTableTypeTable(table15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory14);
    }

    @Test
    public void test06973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06973");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory4.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap6 = slimTableFactory5.tableTypes;
        boolean boolean8 = slimTableFactory5.hasColon("");
        boolean boolean10 = slimTableFactory5.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap11 = slimTableFactory5.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory12.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory12.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory15.tableTypeArrays;
        slimTableFactory5.tableTypeArrays = strMap16;
        slimTableFactory0.tableTypeArrays = strMap16;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = slimTableFactory20.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap22 = null;
        slimTableFactory20.tableTypeArrays = strMap22;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass25 = slimTableFactory20.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = slimTableFactory26.copy();
        boolean boolean29 = slimTableFactory27.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory30 = slimTableFactory27.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory31 = slimTableFactory27.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory32 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass34 = slimTableFactory32.getTableType("");
        boolean boolean36 = slimTableFactory32.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap37 = slimTableFactory32.tableTypeArrays;
        slimTableFactory31.tableTypeArrays = strMap37;
        slimTableFactory20.tableTypeArrays = strMap37;
        boolean boolean41 = slimTableFactory20.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory42 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass44 = slimTableFactory42.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap45 = slimTableFactory42.tableTypeArrays;
        slimTableFactory20.tableTypeArrays = strMap45;
        slimTableFactory19.tableTypeArrays = strMap45;
        java.util.Map<java.lang.String, java.lang.String> strMap48 = slimTableFactory19.tableTypeArrays;
        java.lang.String str50 = slimTableFactory19.getFullTableName("");
        boolean boolean52 = slimTableFactory19.hasColon("");
        fitnesse.testsystems.slim.Table table53 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext55 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable56 = slimTableFactory19.makeSlimTable(table53, "hi!", slimTestContext55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(slimTableFactory19);
        org.junit.Assert.assertNotNull(slimTableFactory21);
        org.junit.Assert.assertNull(wildcardClass25);
        org.junit.Assert.assertNotNull(slimTableFactory27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(slimTableFactory30);
        org.junit.Assert.assertNotNull(slimTableFactory31);
        org.junit.Assert.assertNull(wildcardClass34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(wildcardClass44);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNotNull(strMap48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test06974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06974");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory1.tableTypeArrays;
        java.lang.String str6 = slimTableFactory1.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory7.copy();
        boolean boolean10 = slimTableFactory8.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory8.tableTypeArrays;
        java.lang.String str13 = slimTableFactory8.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory8.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap14;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap17 = slimTableFactory1.tableTypes;
        boolean boolean19 = slimTableFactory1.hasColon("");
        boolean boolean21 = slimTableFactory1.hasColon("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass23 = slimTableFactory1.getTableType("");
        java.lang.Class<?> wildcardClass24 = slimTableFactory1.getClass();
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(wildcardClass23);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test06975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06975");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory5.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory5.tableTypeArrays;
        fitnesse.testsystems.slim.Table table8 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable9 = slimTableFactory5.parseDefineTableTypeTable(table8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(strMap7);
    }

    @Test
    public void test06976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06976");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory0.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass6 = slimTableFactory4.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory7.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap9 = null;
        slimTableFactory7.tableTypeArrays = strMap9;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass12 = slimTableFactory7.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory13.copy();
        boolean boolean16 = slimTableFactory14.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = slimTableFactory14.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory14.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass21 = slimTableFactory19.getTableType("");
        boolean boolean23 = slimTableFactory19.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap24 = slimTableFactory19.tableTypeArrays;
        slimTableFactory18.tableTypeArrays = strMap24;
        slimTableFactory7.tableTypeArrays = strMap24;
        slimTableFactory4.tableTypeArrays = strMap24;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory29 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass31 = slimTableFactory29.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory32 = slimTableFactory29.copy();
        boolean boolean34 = slimTableFactory29.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap35 = slimTableFactory29.tableTypeArrays;
        slimTableFactory28.tableTypeArrays = strMap35;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory37 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory38 = slimTableFactory37.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap39 = slimTableFactory38.tableTypes;
        boolean boolean41 = slimTableFactory38.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap42 = slimTableFactory38.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap43 = slimTableFactory38.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap44 = slimTableFactory38.tableTypeArrays;
        slimTableFactory28.tableTypeArrays = strMap44;
        slimTableFactory4.tableTypeArrays = strMap44;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass48 = slimTableFactory4.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory49 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory50 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass52 = slimTableFactory50.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory53 = slimTableFactory50.copy();
        boolean boolean55 = slimTableFactory50.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap56 = slimTableFactory50.tableTypeArrays;
        slimTableFactory49.tableTypeArrays = strMap56;
        boolean boolean59 = slimTableFactory49.hasColon("hi!");
        java.lang.String str61 = slimTableFactory49.makeTableType("");
        java.lang.String str63 = slimTableFactory49.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory64 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass66 = slimTableFactory64.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory67 = slimTableFactory64.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap68 = slimTableFactory67.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap69 = slimTableFactory67.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap70 = slimTableFactory67.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory71 = slimTableFactory67.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory72 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory73 = slimTableFactory72.copy();
        boolean boolean75 = slimTableFactory73.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap76 = slimTableFactory73.tableTypeArrays;
        java.lang.String str78 = slimTableFactory73.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap79 = slimTableFactory73.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory80 = slimTableFactory73.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass82 = slimTableFactory73.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap83 = slimTableFactory73.tableTypeArrays;
        slimTableFactory71.tableTypeArrays = strMap83;
        slimTableFactory49.tableTypeArrays = strMap83;
        slimTableFactory4.tableTypeArrays = strMap83;
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(slimTableFactory17);
        org.junit.Assert.assertNotNull(slimTableFactory18);
        org.junit.Assert.assertNull(wildcardClass21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNotNull(slimTableFactory32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(slimTableFactory38);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(strMap42);
        org.junit.Assert.assertNotNull(strMap43);
        org.junit.Assert.assertNotNull(strMap44);
        org.junit.Assert.assertNull(wildcardClass48);
        org.junit.Assert.assertNull(wildcardClass52);
        org.junit.Assert.assertNotNull(slimTableFactory53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(strMap56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "hi!" + "'", str63, "hi!");
        org.junit.Assert.assertNull(wildcardClass66);
        org.junit.Assert.assertNotNull(slimTableFactory67);
        org.junit.Assert.assertNotNull(strMap68);
        org.junit.Assert.assertNotNull(strMap69);
        org.junit.Assert.assertNotNull(strMap70);
        org.junit.Assert.assertNotNull(slimTableFactory71);
        org.junit.Assert.assertNotNull(slimTableFactory73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(strMap76);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertNotNull(strMap79);
        org.junit.Assert.assertNotNull(slimTableFactory80);
        org.junit.Assert.assertNull(wildcardClass82);
        org.junit.Assert.assertNotNull(strMap83);
    }

    @Test
    public void test06977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06977");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap5 = slimTableFactory1.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory1.tableTypeArrays;
        java.lang.String str12 = slimTableFactory1.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap13 = slimTableFactory1.tableTypeArrays;
        java.lang.String str15 = slimTableFactory1.makeTableType("");
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test06978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06978");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory0.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap9 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory10.copy();
        boolean boolean13 = slimTableFactory11.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory11.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory11.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass17 = slimTableFactory15.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap18 = slimTableFactory15.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass21 = slimTableFactory19.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap22 = slimTableFactory19.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = slimTableFactory19.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap24 = slimTableFactory19.tableTypeArrays;
        slimTableFactory15.tableTypeArrays = strMap24;
        slimTableFactory0.tableTypeArrays = strMap24;
        boolean boolean28 = slimTableFactory0.hasColon("");
        java.lang.String str30 = slimTableFactory0.makeTableType("hi!");
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertNull(wildcardClass17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNull(wildcardClass21);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(slimTableFactory23);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
    }

    @Test
    public void test06979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06979");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory5.copy();
        boolean boolean8 = slimTableFactory5.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass10 = slimTableFactory5.getTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass12 = slimTableFactory5.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap13 = slimTableFactory5.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory5.copy();
        fitnesse.testsystems.slim.Table table15 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable16 = slimTableFactory14.parseDefineTableTypeTable(table15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(slimTableFactory14);
    }

    @Test
    public void test06980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06980");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory0.tableTypes;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap8 = slimTableFactory0.tableTypes;
        boolean boolean10 = slimTableFactory0.hasColon("");
        boolean boolean12 = slimTableFactory0.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory0.copy();
        java.lang.Class<?> wildcardClass14 = slimTableFactory0.getClass();
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(slimTableFactory13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test06981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06981");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap5 = slimTableFactory0.tableTypeArrays;
        boolean boolean7 = slimTableFactory0.hasColon("");
        fitnesse.testsystems.slim.Table table8 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext10 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable11 = slimTableFactory0.makeSlimTable(table8, "hi!", slimTestContext10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test06982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06982");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        boolean boolean6 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory1.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass9 = slimTableFactory1.getTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap10 = slimTableFactory1.tableTypes;
        java.lang.String str12 = slimTableFactory1.makeTableType("hi!");
        java.lang.String str14 = slimTableFactory1.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory1.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass17 = slimTableFactory15.getTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap18 = slimTableFactory15.tableTypes;
        fitnesse.testsystems.slim.Table table19 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable20 = slimTableFactory15.parseDefineTableTypeTable(table19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertNull(wildcardClass17);
        org.junit.Assert.assertNotNull(strMap18);
    }

    @Test
    public void test06983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06983");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        boolean boolean6 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory1.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass9 = slimTableFactory1.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory10.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap12 = slimTableFactory11.tableTypes;
        boolean boolean14 = slimTableFactory11.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap15 = slimTableFactory11.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory11.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap17 = slimTableFactory16.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap17;
        boolean boolean20 = slimTableFactory1.hasColon("");
        java.lang.String str22 = slimTableFactory1.makeTableType("hi!");
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
    }

    @Test
    public void test06984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06984");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory1.tableTypeArrays;
        java.lang.String str6 = slimTableFactory1.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory7.copy();
        boolean boolean10 = slimTableFactory8.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory8.tableTypeArrays;
        java.lang.String str13 = slimTableFactory8.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory8.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap14;
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory1.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap17 = slimTableFactory1.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass19 = slimTableFactory1.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = slimTableFactory21.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap23 = slimTableFactory22.tableTypes;
        boolean boolean25 = slimTableFactory22.hasColon("");
        boolean boolean27 = slimTableFactory22.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap28 = slimTableFactory22.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory29 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass31 = slimTableFactory29.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory32 = slimTableFactory29.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = slimTableFactory32.tableTypeArrays;
        slimTableFactory22.tableTypeArrays = strMap33;
        java.lang.String str36 = slimTableFactory22.makeTableType("");
        java.lang.String str38 = slimTableFactory22.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory39 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory40 = slimTableFactory39.copy();
        boolean boolean42 = slimTableFactory40.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory43 = slimTableFactory40.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory44 = slimTableFactory40.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory45 = slimTableFactory44.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory46 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory47 = slimTableFactory46.copy();
        boolean boolean49 = slimTableFactory47.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap50 = slimTableFactory47.tableTypeArrays;
        slimTableFactory45.tableTypeArrays = strMap50;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory52 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory53 = slimTableFactory52.copy();
        boolean boolean55 = slimTableFactory53.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap56 = slimTableFactory53.tableTypeArrays;
        java.lang.String str58 = slimTableFactory53.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory59 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory60 = slimTableFactory59.copy();
        boolean boolean62 = slimTableFactory60.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap63 = slimTableFactory60.tableTypeArrays;
        java.lang.String str65 = slimTableFactory60.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap66 = slimTableFactory60.tableTypeArrays;
        slimTableFactory53.tableTypeArrays = strMap66;
        java.util.Map<java.lang.String, java.lang.String> strMap68 = slimTableFactory53.tableTypeArrays;
        slimTableFactory45.tableTypeArrays = strMap68;
        slimTableFactory22.tableTypeArrays = strMap68;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory71 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory72 = slimTableFactory71.copy();
        boolean boolean74 = slimTableFactory72.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory75 = slimTableFactory72.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory76 = slimTableFactory72.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory77 = slimTableFactory72.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap78 = slimTableFactory77.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory79 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory80 = slimTableFactory79.copy();
        boolean boolean82 = slimTableFactory80.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory83 = slimTableFactory80.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory84 = slimTableFactory80.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory85 = slimTableFactory80.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap86 = slimTableFactory80.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory87 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory88 = slimTableFactory87.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap89 = slimTableFactory87.tableTypeArrays;
        slimTableFactory80.tableTypeArrays = strMap89;
        slimTableFactory77.tableTypeArrays = strMap89;
        slimTableFactory22.tableTypeArrays = strMap89;
        slimTableFactory1.tableTypeArrays = strMap89;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap94 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.Table table95 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable96 = slimTableFactory1.parseDefineTableTypeTable(table95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(slimTableFactory20);
        org.junit.Assert.assertNotNull(slimTableFactory22);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNotNull(slimTableFactory32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(slimTableFactory43);
        org.junit.Assert.assertNotNull(slimTableFactory44);
        org.junit.Assert.assertNotNull(slimTableFactory45);
        org.junit.Assert.assertNotNull(slimTableFactory47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNotNull(slimTableFactory53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(strMap56);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(slimTableFactory60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(strMap63);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strMap68);
        org.junit.Assert.assertNotNull(slimTableFactory72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(slimTableFactory75);
        org.junit.Assert.assertNotNull(slimTableFactory76);
        org.junit.Assert.assertNotNull(slimTableFactory77);
        org.junit.Assert.assertNotNull(strMap78);
        org.junit.Assert.assertNotNull(slimTableFactory80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(slimTableFactory83);
        org.junit.Assert.assertNotNull(slimTableFactory84);
        org.junit.Assert.assertNotNull(slimTableFactory85);
        org.junit.Assert.assertNotNull(strMap86);
        org.junit.Assert.assertNotNull(slimTableFactory88);
        org.junit.Assert.assertNotNull(strMap89);
        org.junit.Assert.assertNotNull(strMap94);
    }

    @Test
    public void test06985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06985");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory1.tableTypeArrays;
        java.lang.String str6 = slimTableFactory1.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory1.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap8 = slimTableFactory1.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap9 = slimTableFactory1.tableTypeArrays;
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strMap9);
    }

    @Test
    public void test06986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06986");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory3.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap5 = slimTableFactory3.tableTypeArrays;
        java.lang.String str7 = slimTableFactory3.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass10 = slimTableFactory8.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory8.copy();
        boolean boolean13 = slimTableFactory8.hasColon("hi!");
        java.lang.String str15 = slimTableFactory8.getFullTableName("");
        java.lang.String str17 = slimTableFactory8.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap18 = slimTableFactory8.tableTypeArrays;
        slimTableFactory3.tableTypeArrays = strMap18;
        fitnesse.testsystems.slim.Table table20 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable21 = slimTableFactory3.parseDefineTableTypeTable(table20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNotNull(strMap18);
    }

    @Test
    public void test06987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06987");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass4 = slimTableFactory1.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap5 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory6.copy();
        java.lang.String str9 = slimTableFactory7.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory7.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory7.tableTypeArrays;
        fitnesse.testsystems.slim.Table table12 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable13 = slimTableFactory7.parseDefineTableTypeTable(table12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strMap11);
    }

    @Test
    public void test06988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06988");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass4 = slimTableFactory1.getTableType("hi!");
        boolean boolean6 = slimTableFactory1.hasColon("");
        java.lang.String str8 = slimTableFactory1.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap9 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory1.copy();
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(slimTableFactory10);
    }

    @Test
    public void test06989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06989");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("hi!");
        java.lang.String str7 = slimTableFactory0.getFullTableName("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass9 = slimTableFactory0.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory11.copy();
        boolean boolean14 = slimTableFactory12.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory12.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory12.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = slimTableFactory16.copy();
        boolean boolean19 = slimTableFactory16.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap20 = slimTableFactory16.tableTypeArrays;
        java.lang.String str22 = slimTableFactory16.getFullTableName("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass24 = slimTableFactory16.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass27 = slimTableFactory25.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = slimTableFactory25.copy();
        boolean boolean30 = slimTableFactory25.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass32 = slimTableFactory25.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap33 = slimTableFactory25.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory34 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory35 = slimTableFactory34.copy();
        boolean boolean37 = slimTableFactory35.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap38 = slimTableFactory35.tableTypeArrays;
        java.lang.String str40 = slimTableFactory35.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap41 = slimTableFactory35.tableTypeArrays;
        slimTableFactory25.tableTypeArrays = strMap41;
        slimTableFactory16.tableTypeArrays = strMap41;
        slimTableFactory0.tableTypeArrays = strMap41;
        java.lang.String str46 = slimTableFactory0.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory47 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.Table table48 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable49 = slimTableFactory0.parseDefineTableTypeTable(table48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertNotNull(slimTableFactory17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertNull(wildcardClass24);
        org.junit.Assert.assertNull(wildcardClass27);
        org.junit.Assert.assertNotNull(slimTableFactory28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(wildcardClass32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(slimTableFactory35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hi!" + "'", str46, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory47);
    }

    @Test
    public void test06990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06990");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        boolean boolean5 = slimTableFactory0.hasColon("");
        java.lang.String str7 = slimTableFactory0.makeTableType("");
        java.lang.String str9 = slimTableFactory0.makeTableType("");
        java.lang.String str11 = slimTableFactory0.makeTableType("");
        java.lang.String str13 = slimTableFactory0.getFullTableName("");
        java.lang.String str15 = slimTableFactory0.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory0.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass18 = slimTableFactory0.getTableType("");
        java.lang.String str20 = slimTableFactory0.makeTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap21 = slimTableFactory0.tableTypes;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap22 = slimTableFactory0.tableTypes;
        java.lang.Class<?> wildcardClass23 = slimTableFactory0.getClass();
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test06991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06991");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory8.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap10;
        java.lang.String str13 = slimTableFactory1.makeTableType("");
        java.lang.String str15 = slimTableFactory1.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory17.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap19 = slimTableFactory18.tableTypes;
        boolean boolean21 = slimTableFactory18.hasColon("");
        boolean boolean23 = slimTableFactory18.hasColon("hi!");
        boolean boolean25 = slimTableFactory18.hasColon("");
        java.lang.String str27 = slimTableFactory18.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap28 = slimTableFactory18.tableTypes;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap29 = slimTableFactory18.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap30 = slimTableFactory18.tableTypeArrays;
        slimTableFactory16.tableTypeArrays = strMap30;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory32 = slimTableFactory16.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = slimTableFactory16.tableTypeArrays;
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertNotNull(slimTableFactory18);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(slimTableFactory32);
        org.junit.Assert.assertNotNull(strMap33);
    }

    @Test
    public void test06992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06992");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory3.tableTypeArrays;
        java.lang.String str6 = slimTableFactory3.makeTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass8 = slimTableFactory3.getTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap9 = slimTableFactory3.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory3.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory3.copy();
        java.lang.Class<?> wildcardClass12 = slimTableFactory11.getClass();
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test06993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06993");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory0.getTableType("hi!");
        boolean boolean9 = slimTableFactory0.hasColon("hi!");
        java.lang.String str11 = slimTableFactory0.getFullTableName("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass13 = slimTableFactory0.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass18 = slimTableFactory16.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory16.copy();
        boolean boolean21 = slimTableFactory16.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap22 = slimTableFactory16.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = slimTableFactory16.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = slimTableFactory16.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = slimTableFactory25.copy();
        boolean boolean28 = slimTableFactory26.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap29 = slimTableFactory26.tableTypeArrays;
        java.lang.String str31 = slimTableFactory26.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory32 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory33 = slimTableFactory32.copy();
        boolean boolean35 = slimTableFactory33.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap36 = slimTableFactory33.tableTypeArrays;
        java.lang.String str38 = slimTableFactory33.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap39 = slimTableFactory33.tableTypeArrays;
        slimTableFactory26.tableTypeArrays = strMap39;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory41 = slimTableFactory26.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass43 = slimTableFactory41.getTableType("");
        boolean boolean45 = slimTableFactory41.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap46 = slimTableFactory41.tableTypeArrays;
        slimTableFactory24.tableTypeArrays = strMap46;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory48 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory49 = slimTableFactory48.copy();
        boolean boolean51 = slimTableFactory49.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory52 = slimTableFactory49.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap53 = slimTableFactory49.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass55 = slimTableFactory49.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory56 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory57 = slimTableFactory56.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap58 = null;
        slimTableFactory56.tableTypeArrays = strMap58;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass61 = slimTableFactory56.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory62 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory63 = slimTableFactory62.copy();
        boolean boolean65 = slimTableFactory63.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory66 = slimTableFactory63.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory67 = slimTableFactory63.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory68 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass70 = slimTableFactory68.getTableType("");
        boolean boolean72 = slimTableFactory68.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap73 = slimTableFactory68.tableTypeArrays;
        slimTableFactory67.tableTypeArrays = strMap73;
        slimTableFactory56.tableTypeArrays = strMap73;
        boolean boolean77 = slimTableFactory56.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory78 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass80 = slimTableFactory78.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap81 = slimTableFactory78.tableTypeArrays;
        slimTableFactory56.tableTypeArrays = strMap81;
        slimTableFactory49.tableTypeArrays = strMap81;
        slimTableFactory24.tableTypeArrays = strMap81;
        slimTableFactory15.tableTypeArrays = strMap81;
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertNotNull(slimTableFactory19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(slimTableFactory23);
        org.junit.Assert.assertNotNull(slimTableFactory24);
        org.junit.Assert.assertNotNull(slimTableFactory26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(slimTableFactory33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNotNull(slimTableFactory41);
        org.junit.Assert.assertNull(wildcardClass43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(strMap46);
        org.junit.Assert.assertNotNull(slimTableFactory49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(slimTableFactory52);
        org.junit.Assert.assertNotNull(strMap53);
        org.junit.Assert.assertNull(wildcardClass55);
        org.junit.Assert.assertNotNull(slimTableFactory57);
        org.junit.Assert.assertNull(wildcardClass61);
        org.junit.Assert.assertNotNull(slimTableFactory63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(slimTableFactory66);
        org.junit.Assert.assertNotNull(slimTableFactory67);
        org.junit.Assert.assertNull(wildcardClass70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(strMap73);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNull(wildcardClass80);
        org.junit.Assert.assertNotNull(strMap81);
    }

    @Test
    public void test06994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06994");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass5 = slimTableFactory3.getTableType("");
        boolean boolean7 = slimTableFactory3.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory3.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap8;
        java.lang.String str11 = slimTableFactory1.makeTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass13 = slimTableFactory1.getTableType("");
        boolean boolean15 = slimTableFactory1.hasColon("");
        java.lang.String str17 = slimTableFactory1.makeTableType("hi!");
        boolean boolean19 = slimTableFactory1.hasColon("hi!");
        java.lang.String str21 = slimTableFactory1.makeTableType("");
        java.lang.String str23 = slimTableFactory1.getFullTableName("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass25 = slimTableFactory1.getTableType("hi!");
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNull(wildcardClass25);
    }

    @Test
    public void test06995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06995");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory4.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap6 = slimTableFactory5.tableTypes;
        boolean boolean8 = slimTableFactory5.hasColon("");
        boolean boolean10 = slimTableFactory5.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap11 = slimTableFactory5.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory12.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory12.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory15.tableTypeArrays;
        slimTableFactory5.tableTypeArrays = strMap16;
        slimTableFactory0.tableTypeArrays = strMap16;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory0.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass22 = slimTableFactory20.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap23 = slimTableFactory20.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = slimTableFactory20.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass27 = slimTableFactory25.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = slimTableFactory25.copy();
        boolean boolean30 = slimTableFactory25.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass32 = slimTableFactory25.getTableType("hi!");
        java.lang.String str34 = slimTableFactory25.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory35 = slimTableFactory25.copy();
        java.lang.String str37 = slimTableFactory25.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap38 = slimTableFactory25.tableTypeArrays;
        slimTableFactory24.tableTypeArrays = strMap38;
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(slimTableFactory19);
        org.junit.Assert.assertNotNull(slimTableFactory20);
        org.junit.Assert.assertNull(wildcardClass22);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(slimTableFactory24);
        org.junit.Assert.assertNull(wildcardClass27);
        org.junit.Assert.assertNotNull(slimTableFactory28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(wildcardClass32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(slimTableFactory35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertNotNull(strMap38);
    }

    @Test
    public void test06996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06996");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass5 = slimTableFactory3.getTableType("");
        boolean boolean7 = slimTableFactory3.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory3.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap8;
        java.lang.String str11 = slimTableFactory1.makeTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass13 = slimTableFactory1.getTableType("");
        boolean boolean15 = slimTableFactory1.hasColon("");
        java.lang.String str17 = slimTableFactory1.makeTableType("hi!");
        boolean boolean19 = slimTableFactory1.hasColon("hi!");
        java.lang.String str21 = slimTableFactory1.makeTableType("");
        java.lang.String str23 = slimTableFactory1.getFullTableName("hi!");
        java.lang.String str25 = slimTableFactory1.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = slimTableFactory1.copy();
        boolean boolean28 = slimTableFactory26.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap29 = slimTableFactory26.tableTypeArrays;
        fitnesse.testsystems.slim.Table table30 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable31 = slimTableFactory26.parseDefineTableTypeTable(table30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strMap29);
    }

    @Test
    public void test06997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06997");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory3.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory5.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory5.tableTypeArrays;
        slimTableFactory3.tableTypeArrays = strMap7;
        boolean boolean10 = slimTableFactory3.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory11.copy();
        boolean boolean14 = slimTableFactory12.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory12.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory12.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass19 = slimTableFactory17.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap20 = slimTableFactory17.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass22 = slimTableFactory17.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass25 = slimTableFactory23.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = slimTableFactory23.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = slimTableFactory26.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory29 = slimTableFactory28.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap30 = slimTableFactory28.tableTypeArrays;
        slimTableFactory26.tableTypeArrays = strMap30;
        slimTableFactory17.tableTypeArrays = strMap30;
        slimTableFactory12.tableTypeArrays = strMap30;
        slimTableFactory3.tableTypeArrays = strMap30;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory35 = slimTableFactory3.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap36 = slimTableFactory35.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap37 = slimTableFactory35.tableTypes;
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNull(wildcardClass22);
        org.junit.Assert.assertNull(wildcardClass25);
        org.junit.Assert.assertNotNull(slimTableFactory26);
        org.junit.Assert.assertNotNull(slimTableFactory27);
        org.junit.Assert.assertNotNull(slimTableFactory29);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(slimTableFactory35);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(strMap37);
    }

    @Test
    public void test06998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06998");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory5.copy();
        boolean boolean8 = slimTableFactory5.hasColon("");
        boolean boolean10 = slimTableFactory5.hasColon("hi!");
        boolean boolean12 = slimTableFactory5.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory5.copy();
        fitnesse.testsystems.slim.Table table14 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext16 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable17 = slimTableFactory5.makeSlimTable(table14, "hi!", slimTestContext16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(slimTableFactory13);
    }

    @Test
    public void test06999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test06999");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory0.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap9 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory0.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass12 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap13 = slimTableFactory0.tableTypes;
        java.lang.String str15 = slimTableFactory0.getFullTableName("");
        java.lang.String str17 = slimTableFactory0.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap18 = slimTableFactory0.tableTypeArrays;
        boolean boolean20 = slimTableFactory0.hasColon("hi!");
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test07000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest13.test07000");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap5 = slimTableFactory1.tableTypeArrays;
        java.lang.String str7 = slimTableFactory1.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory9.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap11 = slimTableFactory10.tableTypes;
        boolean boolean13 = slimTableFactory10.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap14 = slimTableFactory10.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap15 = slimTableFactory10.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap15;
        java.util.Map<java.lang.String, java.lang.String> strMap17 = slimTableFactory1.tableTypeArrays;
        boolean boolean19 = slimTableFactory1.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap20 = slimTableFactory1.tableTypes;
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strMap20);
    }
}

