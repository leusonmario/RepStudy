import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest7 {

    public static boolean debug = false;

    @Test
    public void test03501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03501");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory3.hasColon("");
        boolean boolean7 = slimTableFactory3.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory3.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap9 = slimTableFactory3.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory10.copy();
        boolean boolean13 = slimTableFactory11.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory11.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory11.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory11.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap17 = slimTableFactory11.tableTypeArrays;
        slimTableFactory3.tableTypeArrays = strMap17;
        java.lang.Class<?> wildcardClass19 = slimTableFactory3.getClass();
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test03502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03502");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        slimTableFactory0.tableTypeArrays = strMap2;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass5 = slimTableFactory0.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory6.copy();
        boolean boolean9 = slimTableFactory7.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory7.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory7.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory12.getTableType("");
        boolean boolean16 = slimTableFactory12.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap17 = slimTableFactory12.tableTypeArrays;
        slimTableFactory11.tableTypeArrays = strMap17;
        slimTableFactory0.tableTypeArrays = strMap17;
        boolean boolean21 = slimTableFactory0.hasColon("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass23 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = slimTableFactory24.copy();
        boolean boolean27 = slimTableFactory25.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = slimTableFactory25.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory29 = slimTableFactory25.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory30 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass32 = slimTableFactory30.getTableType("");
        boolean boolean34 = slimTableFactory30.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap35 = slimTableFactory30.tableTypeArrays;
        slimTableFactory29.tableTypeArrays = strMap35;
        slimTableFactory0.tableTypeArrays = strMap35;
        java.lang.String str39 = slimTableFactory0.getFullTableName("");
        java.lang.String str41 = slimTableFactory0.getFullTableName("");
        java.lang.String str43 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.Table table44 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext46 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable47 = slimTableFactory0.makeSlimTable(table44, "", slimTestContext46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(wildcardClass23);
        org.junit.Assert.assertNotNull(slimTableFactory25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(slimTableFactory28);
        org.junit.Assert.assertNotNull(slimTableFactory29);
        org.junit.Assert.assertNull(wildcardClass32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
    }

    @Test
    public void test03503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03503");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass5 = slimTableFactory3.getTableType("");
        boolean boolean7 = slimTableFactory3.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory3.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap8;
        java.lang.String str11 = slimTableFactory1.makeTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass13 = slimTableFactory1.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory1.copy();
        java.lang.String str16 = slimTableFactory1.getFullTableName("");
        java.lang.String str18 = slimTableFactory1.makeTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap19 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.Table table20 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory1.parseDefineTableTypeRow(table20, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(strMap19);
    }

    @Test
    public void test03504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03504");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory0.copy();
        java.lang.String str7 = slimTableFactory5.makeTableType("");
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
    }

    @Test
    public void test03505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03505");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        boolean boolean4 = slimTableFactory0.hasColon("");
        java.lang.String str6 = slimTableFactory0.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory0.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass9 = slimTableFactory7.getTableType("");
        fitnesse.testsystems.slim.Table table10 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable11 = slimTableFactory7.parseDefineTableTypeTable(table10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertNull(wildcardClass9);
    }

    @Test
    public void test03506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03506");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        boolean boolean5 = slimTableFactory0.hasColon("");
        java.lang.String str7 = slimTableFactory0.makeTableType("");
        java.lang.String str9 = slimTableFactory0.makeTableType("");
        java.lang.String str11 = slimTableFactory0.makeTableType("");
        java.lang.String str13 = slimTableFactory0.getFullTableName("");
        java.lang.String str15 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = slimTableFactory16.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = null;
        slimTableFactory16.tableTypeArrays = strMap18;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass21 = slimTableFactory16.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = slimTableFactory22.copy();
        boolean boolean25 = slimTableFactory23.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = slimTableFactory23.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = slimTableFactory23.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass30 = slimTableFactory28.getTableType("");
        boolean boolean32 = slimTableFactory28.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap33 = slimTableFactory28.tableTypeArrays;
        slimTableFactory27.tableTypeArrays = strMap33;
        slimTableFactory16.tableTypeArrays = strMap33;
        boolean boolean37 = slimTableFactory16.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory38 = slimTableFactory16.copy();
        java.lang.String str40 = slimTableFactory16.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap41 = slimTableFactory16.tableTypes;
        boolean boolean43 = slimTableFactory16.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory44 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory45 = slimTableFactory44.copy();
        boolean boolean47 = slimTableFactory45.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory48 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass50 = slimTableFactory48.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory51 = slimTableFactory48.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory52 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory53 = slimTableFactory52.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap54 = slimTableFactory53.tableTypes;
        boolean boolean56 = slimTableFactory53.hasColon("");
        boolean boolean58 = slimTableFactory53.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap59 = slimTableFactory53.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory60 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass62 = slimTableFactory60.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory63 = slimTableFactory60.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap64 = slimTableFactory63.tableTypeArrays;
        slimTableFactory53.tableTypeArrays = strMap64;
        slimTableFactory48.tableTypeArrays = strMap64;
        slimTableFactory45.tableTypeArrays = strMap64;
        slimTableFactory16.tableTypeArrays = strMap64;
        slimTableFactory0.tableTypeArrays = strMap64;
        java.lang.String str71 = slimTableFactory0.makeTableType("");
        boolean boolean73 = slimTableFactory0.hasColon("");
        java.lang.String str75 = slimTableFactory0.makeTableType("hi!");
        java.lang.String str77 = slimTableFactory0.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap78 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.Table table79 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory0.parseDefineTableTypeRow(table79, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(slimTableFactory17);
        org.junit.Assert.assertNull(wildcardClass21);
        org.junit.Assert.assertNotNull(slimTableFactory23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(slimTableFactory26);
        org.junit.Assert.assertNotNull(slimTableFactory27);
        org.junit.Assert.assertNull(wildcardClass30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(slimTableFactory38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(slimTableFactory45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(wildcardClass50);
        org.junit.Assert.assertNotNull(slimTableFactory51);
        org.junit.Assert.assertNotNull(slimTableFactory53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(strMap59);
        org.junit.Assert.assertNull(wildcardClass62);
        org.junit.Assert.assertNotNull(slimTableFactory63);
        org.junit.Assert.assertNotNull(strMap64);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "hi!" + "'", str75, "hi!");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "hi!" + "'", str77, "hi!");
        org.junit.Assert.assertNotNull(strMap78);
    }

    @Test
    public void test03507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03507");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass5 = slimTableFactory3.getTableType("");
        boolean boolean7 = slimTableFactory3.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory3.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap8;
        java.lang.String str11 = slimTableFactory1.makeTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass13 = slimTableFactory1.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory1.copy();
        boolean boolean16 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass19 = slimTableFactory17.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory17.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = slimTableFactory20.copy();
        java.lang.String str23 = slimTableFactory20.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = slimTableFactory24.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap26 = null;
        slimTableFactory24.tableTypeArrays = strMap26;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass29 = slimTableFactory24.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory30 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory31 = slimTableFactory30.copy();
        boolean boolean33 = slimTableFactory31.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory34 = slimTableFactory31.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory35 = slimTableFactory31.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory36 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass38 = slimTableFactory36.getTableType("");
        boolean boolean40 = slimTableFactory36.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap41 = slimTableFactory36.tableTypeArrays;
        slimTableFactory35.tableTypeArrays = strMap41;
        slimTableFactory24.tableTypeArrays = strMap41;
        slimTableFactory20.tableTypeArrays = strMap41;
        slimTableFactory1.tableTypeArrays = strMap41;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass47 = slimTableFactory1.getTableType("");
        fitnesse.testsystems.slim.Table table48 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory1.parseDefineTableTypeRow(table48, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(slimTableFactory20);
        org.junit.Assert.assertNotNull(slimTableFactory21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(slimTableFactory25);
        org.junit.Assert.assertNull(wildcardClass29);
        org.junit.Assert.assertNotNull(slimTableFactory31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(slimTableFactory34);
        org.junit.Assert.assertNotNull(slimTableFactory35);
        org.junit.Assert.assertNull(wildcardClass38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertNull(wildcardClass47);
    }

    @Test
    public void test03508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03508");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory0.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap9 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory0.copy();
        java.lang.String str12 = slimTableFactory0.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory0.copy();
        boolean boolean15 = slimTableFactory13.hasColon("hi!");
        java.lang.String str17 = slimTableFactory13.makeTableType("hi!");
        fitnesse.testsystems.slim.Table table18 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory13.parseDefineTableTypeRow(table18, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
    }

    @Test
    public void test03509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03509");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap6 = slimTableFactory0.tableTypes;
        java.lang.String str8 = slimTableFactory0.getFullTableName("hi!");
        java.lang.String str10 = slimTableFactory0.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory0.tableTypeArrays;
        java.lang.String str13 = slimTableFactory0.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.Table table15 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable16 = slimTableFactory0.parseDefineTableTypeTable(table15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(strMap14);
    }

    @Test
    public void test03510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03510");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory0.getTableType("hi!");
        java.lang.String str9 = slimTableFactory0.getFullTableName("");
        java.lang.String str11 = slimTableFactory0.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap13 = slimTableFactory12.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory12.copy();
        fitnesse.testsystems.slim.Table table15 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable16 = slimTableFactory14.parseDefineTableTypeTable(table15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(slimTableFactory14);
    }

    @Test
    public void test03511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03511");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory5.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass9 = slimTableFactory7.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory7.copy();
        boolean boolean12 = slimTableFactory7.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap13 = slimTableFactory7.tableTypeArrays;
        slimTableFactory5.tableTypeArrays = strMap13;
        java.util.Map<java.lang.String, java.lang.String> strMap15 = slimTableFactory5.tableTypeArrays;
        java.lang.String str17 = slimTableFactory5.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory5.copy();
        java.lang.String str20 = slimTableFactory5.getFullTableName("hi!");
        fitnesse.testsystems.slim.Table table21 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable22 = slimTableFactory5.parseDefineTableTypeTable(table21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(slimTableFactory18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
    }

    @Test
    public void test03512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03512");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory5.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass9 = slimTableFactory7.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory7.copy();
        boolean boolean12 = slimTableFactory7.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap13 = slimTableFactory7.tableTypeArrays;
        slimTableFactory5.tableTypeArrays = strMap13;
        java.util.Map<java.lang.String, java.lang.String> strMap15 = slimTableFactory5.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass18 = slimTableFactory16.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory16.copy();
        boolean boolean21 = slimTableFactory16.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = slimTableFactory22.copy();
        boolean boolean25 = slimTableFactory23.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = slimTableFactory23.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = slimTableFactory23.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = slimTableFactory27.copy();
        boolean boolean30 = slimTableFactory27.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap31 = slimTableFactory27.tableTypeArrays;
        slimTableFactory16.tableTypeArrays = strMap31;
        slimTableFactory5.tableTypeArrays = strMap31;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass35 = slimTableFactory5.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory36 = slimTableFactory5.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory37 = slimTableFactory5.copy();
        java.lang.String str39 = slimTableFactory37.makeTableType("");
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertNotNull(slimTableFactory19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(slimTableFactory23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(slimTableFactory26);
        org.junit.Assert.assertNotNull(slimTableFactory27);
        org.junit.Assert.assertNotNull(slimTableFactory28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNull(wildcardClass35);
        org.junit.Assert.assertNotNull(slimTableFactory36);
        org.junit.Assert.assertNotNull(slimTableFactory37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
    }

    @Test
    public void test03513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03513");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory5.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory7.copy();
        boolean boolean10 = slimTableFactory8.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory8.tableTypeArrays;
        slimTableFactory6.tableTypeArrays = strMap11;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory13.copy();
        boolean boolean16 = slimTableFactory14.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap17 = slimTableFactory14.tableTypeArrays;
        java.lang.String str19 = slimTableFactory14.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = slimTableFactory20.copy();
        boolean boolean23 = slimTableFactory21.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap24 = slimTableFactory21.tableTypeArrays;
        java.lang.String str26 = slimTableFactory21.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap27 = slimTableFactory21.tableTypeArrays;
        slimTableFactory14.tableTypeArrays = strMap27;
        java.util.Map<java.lang.String, java.lang.String> strMap29 = slimTableFactory14.tableTypeArrays;
        slimTableFactory6.tableTypeArrays = strMap29;
        java.lang.String str32 = slimTableFactory6.getFullTableName("");
        java.lang.Class<?> wildcardClass33 = slimTableFactory6.getClass();
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(slimTableFactory21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test03514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03514");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory0.getTableType("hi!");
        java.lang.String str9 = slimTableFactory0.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory0.copy();
        java.lang.String str12 = slimTableFactory10.getFullTableName("hi!");
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
    }

    @Test
    public void test03515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03515");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass5 = slimTableFactory0.getTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap8 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory0.copy();
        java.lang.String str11 = slimTableFactory9.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory12.copy();
        boolean boolean15 = slimTableFactory13.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory13.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = slimTableFactory13.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory13.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap19 = slimTableFactory13.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = slimTableFactory20.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap22 = null;
        slimTableFactory20.tableTypeArrays = strMap22;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass25 = slimTableFactory20.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = slimTableFactory26.copy();
        boolean boolean29 = slimTableFactory27.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory30 = slimTableFactory27.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory31 = slimTableFactory27.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory32 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass34 = slimTableFactory32.getTableType("");
        boolean boolean36 = slimTableFactory32.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap37 = slimTableFactory32.tableTypeArrays;
        slimTableFactory31.tableTypeArrays = strMap37;
        slimTableFactory20.tableTypeArrays = strMap37;
        boolean boolean41 = slimTableFactory20.hasColon("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass43 = slimTableFactory20.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap44 = slimTableFactory20.tableTypeArrays;
        slimTableFactory13.tableTypeArrays = strMap44;
        java.util.Map<java.lang.String, java.lang.String> strMap46 = slimTableFactory13.tableTypeArrays;
        slimTableFactory9.tableTypeArrays = strMap46;
        java.lang.String str49 = slimTableFactory9.getFullTableName("");
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertNotNull(slimTableFactory17);
        org.junit.Assert.assertNotNull(slimTableFactory18);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(slimTableFactory21);
        org.junit.Assert.assertNull(wildcardClass25);
        org.junit.Assert.assertNotNull(slimTableFactory27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(slimTableFactory30);
        org.junit.Assert.assertNotNull(slimTableFactory31);
        org.junit.Assert.assertNull(wildcardClass34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(wildcardClass43);
        org.junit.Assert.assertNotNull(strMap44);
        org.junit.Assert.assertNotNull(strMap46);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
    }

    @Test
    public void test03516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03516");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory3.copy();
        java.lang.String str6 = slimTableFactory3.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory7.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap9 = null;
        slimTableFactory7.tableTypeArrays = strMap9;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass12 = slimTableFactory7.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory13.copy();
        boolean boolean16 = slimTableFactory14.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = slimTableFactory14.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory14.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass21 = slimTableFactory19.getTableType("");
        boolean boolean23 = slimTableFactory19.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap24 = slimTableFactory19.tableTypeArrays;
        slimTableFactory18.tableTypeArrays = strMap24;
        slimTableFactory7.tableTypeArrays = strMap24;
        slimTableFactory3.tableTypeArrays = strMap24;
        java.lang.String str29 = slimTableFactory3.makeTableType("hi!");
        java.lang.String str31 = slimTableFactory3.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory32 = slimTableFactory3.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass34 = slimTableFactory3.getTableType("");
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(slimTableFactory17);
        org.junit.Assert.assertNotNull(slimTableFactory18);
        org.junit.Assert.assertNull(wildcardClass21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory32);
        org.junit.Assert.assertNull(wildcardClass34);
    }

    @Test
    public void test03517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03517");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.lang.String str3 = slimTableFactory0.getFullTableName("hi!");
        boolean boolean5 = slimTableFactory0.hasColon("hi!");
        fitnesse.testsystems.slim.Table table6 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext8 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable9 = slimTableFactory0.makeSlimTable(table6, "", slimTestContext8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!" + "'", str3, "hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test03518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03518");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory5.copy();
        boolean boolean8 = slimTableFactory5.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass10 = slimTableFactory5.getTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass12 = slimTableFactory5.getTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory5.getTableType("");
        fitnesse.testsystems.slim.Table table15 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory5.parseDefineTableTypeRow(table15, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNull(wildcardClass14);
    }

    @Test
    public void test03519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03519");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass5 = slimTableFactory3.getTableType("");
        boolean boolean7 = slimTableFactory3.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory3.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap8;
        java.lang.String str11 = slimTableFactory1.makeTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass13 = slimTableFactory1.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory1.copy();
        java.lang.String str16 = slimTableFactory1.getFullTableName("");
        java.lang.String str18 = slimTableFactory1.makeTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap19 = slimTableFactory1.tableTypes;
        java.lang.String str21 = slimTableFactory1.makeTableType("");
        fitnesse.testsystems.slim.Table table22 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory1.parseDefineTableTypeRow(table22, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
    }

    @Test
    public void test03520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03520");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory0.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap9 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory0.tableTypeArrays;
        boolean boolean12 = slimTableFactory0.hasColon("hi!");
        java.lang.String str14 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.Table table15 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory0.parseDefineTableTypeRow(table15, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test03521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03521");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap5 = slimTableFactory1.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory1.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap8 = slimTableFactory1.tableTypes;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap9 = slimTableFactory1.tableTypes;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap10 = slimTableFactory1.tableTypes;
        java.lang.String str12 = slimTableFactory1.getFullTableName("");
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test03522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03522");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory0.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap9 = slimTableFactory0.tableTypeArrays;
        java.lang.String str11 = slimTableFactory0.getFullTableName("");
        boolean boolean13 = slimTableFactory0.hasColon("");
        boolean boolean15 = slimTableFactory0.hasColon("");
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test03523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03523");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        java.lang.String str5 = slimTableFactory0.getFullTableName("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory0.getTableType("");
        java.lang.String str9 = slimTableFactory0.makeTableType("hi!");
        java.lang.Class<?> wildcardClass10 = slimTableFactory0.getClass();
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test03524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03524");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory3.tableTypeArrays;
        java.lang.String str6 = slimTableFactory3.makeTableType("hi!");
        boolean boolean8 = slimTableFactory3.hasColon("hi!");
        java.lang.String str10 = slimTableFactory3.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap11 = slimTableFactory3.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory3.copy();
        java.lang.String str14 = slimTableFactory3.getFullTableName("");
        fitnesse.testsystems.slim.Table table15 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext17 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable18 = slimTableFactory3.makeSlimTable(table15, "", slimTestContext17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test03525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03525");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory5.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory5.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory5.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass11 = slimTableFactory9.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory9.copy();
        java.lang.String str14 = slimTableFactory12.getFullTableName("hi!");
        java.lang.String str16 = slimTableFactory12.makeTableType("hi!");
        java.lang.String str18 = slimTableFactory12.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap19 = slimTableFactory12.tableTypeArrays;
        slimTableFactory5.tableTypeArrays = strMap19;
        boolean boolean22 = slimTableFactory5.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass25 = slimTableFactory23.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = slimTableFactory23.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = slimTableFactory27.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap29 = slimTableFactory28.tableTypes;
        boolean boolean31 = slimTableFactory28.hasColon("");
        boolean boolean33 = slimTableFactory28.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap34 = slimTableFactory28.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory35 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass37 = slimTableFactory35.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory38 = slimTableFactory35.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap39 = slimTableFactory38.tableTypeArrays;
        slimTableFactory28.tableTypeArrays = strMap39;
        slimTableFactory23.tableTypeArrays = strMap39;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory42 = slimTableFactory23.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory43 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory44 = slimTableFactory43.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap45 = null;
        slimTableFactory43.tableTypeArrays = strMap45;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass48 = slimTableFactory43.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory49 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory50 = slimTableFactory49.copy();
        boolean boolean52 = slimTableFactory50.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory53 = slimTableFactory50.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory54 = slimTableFactory50.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory55 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass57 = slimTableFactory55.getTableType("");
        boolean boolean59 = slimTableFactory55.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap60 = slimTableFactory55.tableTypeArrays;
        slimTableFactory54.tableTypeArrays = strMap60;
        slimTableFactory43.tableTypeArrays = strMap60;
        boolean boolean64 = slimTableFactory43.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory65 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass67 = slimTableFactory65.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap68 = slimTableFactory65.tableTypeArrays;
        slimTableFactory43.tableTypeArrays = strMap68;
        slimTableFactory42.tableTypeArrays = strMap68;
        slimTableFactory5.tableTypeArrays = strMap68;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory72 = slimTableFactory5.copy();
        java.lang.String str74 = slimTableFactory5.makeTableType("hi!");
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(wildcardClass25);
        org.junit.Assert.assertNotNull(slimTableFactory26);
        org.junit.Assert.assertNotNull(slimTableFactory28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNull(wildcardClass37);
        org.junit.Assert.assertNotNull(slimTableFactory38);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNotNull(slimTableFactory42);
        org.junit.Assert.assertNotNull(slimTableFactory44);
        org.junit.Assert.assertNull(wildcardClass48);
        org.junit.Assert.assertNotNull(slimTableFactory50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(slimTableFactory53);
        org.junit.Assert.assertNotNull(slimTableFactory54);
        org.junit.Assert.assertNull(wildcardClass57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(strMap60);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(wildcardClass67);
        org.junit.Assert.assertNotNull(strMap68);
        org.junit.Assert.assertNotNull(slimTableFactory72);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "hi!" + "'", str74, "hi!");
    }

    @Test
    public void test03526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03526");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        boolean boolean6 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass10 = slimTableFactory8.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory8.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap12 = slimTableFactory11.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap12;
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory1.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap15 = slimTableFactory1.tableTypes;
        java.lang.String str17 = slimTableFactory1.makeTableType("hi!");
        fitnesse.testsystems.slim.Table table18 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory1.parseDefineTableTypeRow(table18, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
    }

    @Test
    public void test03527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03527");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory5.copy();
        boolean boolean8 = slimTableFactory5.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap9 = slimTableFactory5.tableTypes;
        boolean boolean11 = slimTableFactory5.hasColon("hi!");
        java.lang.String str13 = slimTableFactory5.makeTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap14 = slimTableFactory5.tableTypes;
        java.lang.Class<?> wildcardClass15 = slimTableFactory5.getClass();
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test03528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03528");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory3.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap5 = slimTableFactory3.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap6 = slimTableFactory3.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory3.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        boolean boolean11 = slimTableFactory9.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap12 = slimTableFactory9.tableTypeArrays;
        java.lang.String str14 = slimTableFactory9.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap15 = slimTableFactory9.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory9.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass18 = slimTableFactory9.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap19 = slimTableFactory9.tableTypeArrays;
        slimTableFactory7.tableTypeArrays = strMap19;
        java.lang.Class<?> wildcardClass21 = strMap19.getClass();
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test03529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03529");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory5.copy();
        boolean boolean8 = slimTableFactory5.hasColon("");
        boolean boolean10 = slimTableFactory5.hasColon("hi!");
        boolean boolean12 = slimTableFactory5.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory5.copy();
        fitnesse.testsystems.slim.Table table14 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext16 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable17 = slimTableFactory13.makeSlimTable(table14, "", slimTestContext16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(slimTableFactory13);
    }

    @Test
    public void test03530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03530");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory5.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass9 = slimTableFactory7.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory7.copy();
        boolean boolean12 = slimTableFactory7.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap13 = slimTableFactory7.tableTypeArrays;
        slimTableFactory5.tableTypeArrays = strMap13;
        java.util.Map<java.lang.String, java.lang.String> strMap15 = slimTableFactory5.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass18 = slimTableFactory16.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory16.copy();
        boolean boolean21 = slimTableFactory16.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = slimTableFactory22.copy();
        boolean boolean25 = slimTableFactory23.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = slimTableFactory23.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = slimTableFactory23.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = slimTableFactory27.copy();
        boolean boolean30 = slimTableFactory27.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap31 = slimTableFactory27.tableTypeArrays;
        slimTableFactory16.tableTypeArrays = strMap31;
        slimTableFactory5.tableTypeArrays = strMap31;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass35 = slimTableFactory5.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory36 = slimTableFactory5.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory37 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory38 = slimTableFactory37.copy();
        java.lang.String str40 = slimTableFactory37.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory41 = slimTableFactory37.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap42 = slimTableFactory37.tableTypeArrays;
        slimTableFactory36.tableTypeArrays = strMap42;
        java.lang.String str45 = slimTableFactory36.getFullTableName("hi!");
        fitnesse.testsystems.slim.Table table46 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory36.parseDefineTableTypeRow(table46, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertNotNull(slimTableFactory19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(slimTableFactory23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(slimTableFactory26);
        org.junit.Assert.assertNotNull(slimTableFactory27);
        org.junit.Assert.assertNotNull(slimTableFactory28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNull(wildcardClass35);
        org.junit.Assert.assertNotNull(slimTableFactory36);
        org.junit.Assert.assertNotNull(slimTableFactory38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "hi!" + "'", str40, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory41);
        org.junit.Assert.assertNotNull(strMap42);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
    }

    @Test
    public void test03531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03531");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        boolean boolean5 = slimTableFactory0.hasColon("");
        java.lang.String str7 = slimTableFactory0.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory0.tableTypeArrays;
        java.lang.String str10 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory0.copy();
        java.lang.String str13 = slimTableFactory0.makeTableType("hi!");
        fitnesse.testsystems.slim.Table table14 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext16 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable17 = slimTableFactory0.makeSlimTable(table14, "hi!", slimTestContext16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
    }

    @Test
    public void test03532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03532");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory4.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap6 = slimTableFactory5.tableTypes;
        boolean boolean8 = slimTableFactory5.hasColon("");
        boolean boolean10 = slimTableFactory5.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap11 = slimTableFactory5.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory12.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory12.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory15.tableTypeArrays;
        slimTableFactory5.tableTypeArrays = strMap16;
        slimTableFactory0.tableTypeArrays = strMap16;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory0.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass22 = slimTableFactory20.getTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap23 = slimTableFactory20.tableTypes;
        java.lang.String str25 = slimTableFactory20.getFullTableName("");
        java.lang.String str27 = slimTableFactory20.makeTableType("");
        boolean boolean29 = slimTableFactory20.hasColon("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass31 = slimTableFactory20.getTableType("hi!");
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(slimTableFactory19);
        org.junit.Assert.assertNotNull(slimTableFactory20);
        org.junit.Assert.assertNull(wildcardClass22);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(wildcardClass31);
    }

    @Test
    public void test03533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03533");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        boolean boolean6 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory1.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass9 = slimTableFactory1.getTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap10 = slimTableFactory1.tableTypes;
        java.lang.String str12 = slimTableFactory1.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory13.copy();
        boolean boolean16 = slimTableFactory14.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = slimTableFactory14.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory14.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory14.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap20 = slimTableFactory14.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = slimTableFactory14.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap22 = slimTableFactory21.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap22;
        java.util.Map<java.lang.String, java.lang.String> strMap24 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.Table table25 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext27 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable28 = slimTableFactory1.makeSlimTable(table25, "hi!", slimTestContext27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(slimTableFactory17);
        org.junit.Assert.assertNotNull(slimTableFactory18);
        org.junit.Assert.assertNotNull(slimTableFactory19);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(slimTableFactory21);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(strMap24);
    }

    @Test
    public void test03534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03534");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap5 = slimTableFactory1.tableTypes;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap6 = slimTableFactory1.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.Table table9 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable10 = slimTableFactory1.parseDefineTableTypeTable(table9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(slimTableFactory8);
    }

    @Test
    public void test03535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03535");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.lang.String str3 = slimTableFactory0.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory0.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass6 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory0.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass9 = slimTableFactory0.getTableType("");
        java.lang.String str11 = slimTableFactory0.makeTableType("hi!");
        boolean boolean13 = slimTableFactory0.hasColon("hi!");
        java.lang.Class<?> wildcardClass14 = slimTableFactory0.getClass();
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!" + "'", str3, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test03536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03536");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap5 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory6.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory7.copy();
        java.lang.String str10 = slimTableFactory7.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory7.copy();
        java.lang.String str13 = slimTableFactory7.getFullTableName("");
        fitnesse.testsystems.slim.Table table14 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext16 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable17 = slimTableFactory7.makeSlimTable(table14, "hi!", slimTestContext16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test03537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03537");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory3.tableTypeArrays;
        java.lang.String str6 = slimTableFactory3.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory3.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass9 = slimTableFactory3.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory3.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap11 = slimTableFactory10.tableTypes;
        java.lang.String str13 = slimTableFactory10.makeTableType("hi!");
        fitnesse.testsystems.slim.Table table14 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext16 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable17 = slimTableFactory10.makeSlimTable(table14, "", slimTestContext16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
    }

    @Test
    public void test03538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03538");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        boolean boolean5 = slimTableFactory0.hasColon("");
        java.lang.String str7 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap9 = slimTableFactory0.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass11 = slimTableFactory0.getTableType("");
        java.lang.String str13 = slimTableFactory0.getFullTableName("");
        java.lang.String str15 = slimTableFactory0.getFullTableName("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass17 = slimTableFactory0.getTableType("hi!");
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNull(wildcardClass17);
    }

    @Test
    public void test03539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03539");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory3.tableTypeArrays;
        java.lang.String str6 = slimTableFactory3.makeTableType("hi!");
        boolean boolean8 = slimTableFactory3.hasColon("hi!");
        java.lang.String str10 = slimTableFactory3.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap11 = slimTableFactory3.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory3.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap13 = null;
        slimTableFactory12.tableTypeArrays = strMap13;
        java.util.Map<java.lang.String, java.lang.String> strMap15 = slimTableFactory12.tableTypeArrays;
        boolean boolean17 = slimTableFactory12.hasColon("");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str19 = slimTableFactory12.getFullTableName("");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertNull(strMap15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test03540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03540");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory1.tableTypeArrays;
        java.lang.String str6 = slimTableFactory1.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory7.copy();
        boolean boolean10 = slimTableFactory8.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory8.tableTypeArrays;
        java.lang.String str13 = slimTableFactory8.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory8.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap14;
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory1.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap17 = slimTableFactory1.tableTypes;
        java.lang.String str19 = slimTableFactory1.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory1.copy();
        java.lang.String str22 = slimTableFactory20.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap23 = slimTableFactory20.tableTypeArrays;
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(strMap23);
    }

    @Test
    public void test03541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03541");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap5 = slimTableFactory1.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory1.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = null;
        slimTableFactory8.tableTypeArrays = strMap10;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass13 = slimTableFactory8.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory14.copy();
        boolean boolean17 = slimTableFactory15.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory15.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory15.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass22 = slimTableFactory20.getTableType("");
        boolean boolean24 = slimTableFactory20.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap25 = slimTableFactory20.tableTypeArrays;
        slimTableFactory19.tableTypeArrays = strMap25;
        slimTableFactory8.tableTypeArrays = strMap25;
        boolean boolean29 = slimTableFactory8.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory30 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass32 = slimTableFactory30.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap33 = slimTableFactory30.tableTypeArrays;
        slimTableFactory8.tableTypeArrays = strMap33;
        slimTableFactory1.tableTypeArrays = strMap33;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory36 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.Table table37 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext39 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable40 = slimTableFactory36.makeSlimTable(table37, "", slimTestContext39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(slimTableFactory18);
        org.junit.Assert.assertNotNull(slimTableFactory19);
        org.junit.Assert.assertNull(wildcardClass22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(wildcardClass32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(slimTableFactory36);
    }

    @Test
    public void test03542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03542");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory1.tableTypeArrays;
        java.lang.String str6 = slimTableFactory1.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory7.copy();
        boolean boolean10 = slimTableFactory8.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory8.tableTypeArrays;
        java.lang.String str13 = slimTableFactory8.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory8.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap14;
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory1.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap17 = slimTableFactory1.tableTypes;
        java.lang.String str19 = slimTableFactory1.getFullTableName("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass21 = slimTableFactory1.getTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass23 = slimTableFactory1.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = slimTableFactory24.copy();
        boolean boolean27 = slimTableFactory25.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = slimTableFactory25.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory29 = slimTableFactory25.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory30 = slimTableFactory29.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap31 = slimTableFactory29.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap32 = slimTableFactory29.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap32;
        boolean boolean35 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.Table table36 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable37 = slimTableFactory1.parseDefineTableTypeTable(table36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNull(wildcardClass21);
        org.junit.Assert.assertNull(wildcardClass23);
        org.junit.Assert.assertNotNull(slimTableFactory25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(slimTableFactory28);
        org.junit.Assert.assertNotNull(slimTableFactory29);
        org.junit.Assert.assertNotNull(slimTableFactory30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test03543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03543");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory5.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass9 = slimTableFactory7.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory7.copy();
        boolean boolean12 = slimTableFactory7.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap13 = slimTableFactory7.tableTypeArrays;
        slimTableFactory5.tableTypeArrays = strMap13;
        java.util.Map<java.lang.String, java.lang.String> strMap15 = slimTableFactory5.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass18 = slimTableFactory16.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory16.copy();
        boolean boolean21 = slimTableFactory16.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = slimTableFactory22.copy();
        boolean boolean25 = slimTableFactory23.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = slimTableFactory23.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = slimTableFactory23.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = slimTableFactory27.copy();
        boolean boolean30 = slimTableFactory27.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap31 = slimTableFactory27.tableTypeArrays;
        slimTableFactory16.tableTypeArrays = strMap31;
        slimTableFactory5.tableTypeArrays = strMap31;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass35 = slimTableFactory5.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory36 = slimTableFactory5.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory37 = slimTableFactory5.copy();
        boolean boolean39 = slimTableFactory5.hasColon("");
        fitnesse.testsystems.slim.Table table40 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory5.parseDefineTableTypeRow(table40, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertNotNull(slimTableFactory19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(slimTableFactory23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(slimTableFactory26);
        org.junit.Assert.assertNotNull(slimTableFactory27);
        org.junit.Assert.assertNotNull(slimTableFactory28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNull(wildcardClass35);
        org.junit.Assert.assertNotNull(slimTableFactory36);
        org.junit.Assert.assertNotNull(slimTableFactory37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test03544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03544");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass5 = slimTableFactory0.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory0.copy();
        java.lang.String str8 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.Table table9 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory0.parseDefineTableTypeRow(table9, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }

    @Test
    public void test03545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03545");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        boolean boolean5 = slimTableFactory0.hasColon("");
        java.lang.String str7 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap9 = slimTableFactory0.tableTypes;
        boolean boolean11 = slimTableFactory0.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory0.copy();
        java.lang.String str14 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.Table table15 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory0.parseDefineTableTypeRow(table15, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test03546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03546");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass8 = slimTableFactory6.getTableType("");
        boolean boolean10 = slimTableFactory6.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory6.tableTypeArrays;
        slimTableFactory5.tableTypeArrays = strMap11;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory5.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory13.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory13.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory13.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = slimTableFactory13.copy();
        java.lang.Class<?> wildcardClass18 = slimTableFactory13.getClass();
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(slimTableFactory13);
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertNotNull(slimTableFactory17);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test03547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03547");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory5.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory5.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap9 = slimTableFactory8.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass12 = slimTableFactory10.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory10.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory14.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap16 = slimTableFactory15.tableTypes;
        boolean boolean18 = slimTableFactory15.hasColon("");
        boolean boolean20 = slimTableFactory15.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap21 = slimTableFactory15.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass24 = slimTableFactory22.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = slimTableFactory22.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap26 = slimTableFactory25.tableTypeArrays;
        slimTableFactory15.tableTypeArrays = strMap26;
        slimTableFactory10.tableTypeArrays = strMap26;
        slimTableFactory8.tableTypeArrays = strMap26;
        slimTableFactory1.tableTypeArrays = strMap26;
        java.lang.String str32 = slimTableFactory1.makeTableType("");
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNotNull(slimTableFactory13);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNull(wildcardClass24);
        org.junit.Assert.assertNotNull(slimTableFactory25);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
    }

    @Test
    public void test03548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03548");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = slimTableFactory0.tableTypeArrays;
        boolean boolean4 = slimTableFactory0.hasColon("");
        java.lang.String str6 = slimTableFactory0.makeTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass8 = slimTableFactory0.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap9 = slimTableFactory0.tableTypes;
        java.lang.String str11 = slimTableFactory0.getFullTableName("hi!");
        fitnesse.testsystems.slim.Table table12 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext14 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable15 = slimTableFactory0.makeSlimTable(table12, "", slimTestContext14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
    }

    @Test
    public void test03549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03549");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory4.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap6 = slimTableFactory5.tableTypes;
        boolean boolean8 = slimTableFactory5.hasColon("");
        boolean boolean10 = slimTableFactory5.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap11 = slimTableFactory5.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory12.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory12.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory15.tableTypeArrays;
        slimTableFactory5.tableTypeArrays = strMap16;
        slimTableFactory0.tableTypeArrays = strMap16;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory0.copy();
        java.lang.String str21 = slimTableFactory19.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap22 = slimTableFactory19.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = slimTableFactory19.copy();
        fitnesse.testsystems.slim.Table table24 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable25 = slimTableFactory19.parseDefineTableTypeTable(table24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(slimTableFactory19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(slimTableFactory23);
    }

    @Test
    public void test03550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03550");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("");
        java.lang.String str7 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap10 = slimTableFactory9.tableTypes;
        boolean boolean12 = slimTableFactory9.hasColon("");
        boolean boolean14 = slimTableFactory9.hasColon("hi!");
        boolean boolean16 = slimTableFactory9.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = slimTableFactory9.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap18 = slimTableFactory17.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory17.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = slimTableFactory20.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap22 = slimTableFactory21.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass25 = slimTableFactory23.getTableType("");
        boolean boolean27 = slimTableFactory23.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap28 = slimTableFactory23.tableTypeArrays;
        slimTableFactory21.tableTypeArrays = strMap28;
        slimTableFactory19.tableTypeArrays = strMap28;
        slimTableFactory0.tableTypeArrays = strMap28;
        java.lang.String str33 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap34 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory35 = slimTableFactory0.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass37 = slimTableFactory35.getTableType("hi!");
        java.lang.Class<?> wildcardClass38 = slimTableFactory35.getClass();
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(slimTableFactory17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(slimTableFactory19);
        org.junit.Assert.assertNotNull(slimTableFactory21);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNull(wildcardClass25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNotNull(slimTableFactory35);
        org.junit.Assert.assertNull(wildcardClass37);
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test03551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03551");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        slimTableFactory0.tableTypeArrays = strMap2;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass5 = slimTableFactory0.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory6.copy();
        boolean boolean9 = slimTableFactory7.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory7.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory7.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory12.getTableType("");
        boolean boolean16 = slimTableFactory12.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap17 = slimTableFactory12.tableTypeArrays;
        slimTableFactory11.tableTypeArrays = strMap17;
        slimTableFactory0.tableTypeArrays = strMap17;
        boolean boolean21 = slimTableFactory0.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass24 = slimTableFactory22.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap25 = slimTableFactory22.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap25;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap27 = slimTableFactory0.tableTypes;
        java.lang.String str29 = slimTableFactory0.getFullTableName("hi!");
        fitnesse.testsystems.slim.Table table30 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext32 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable33 = slimTableFactory0.makeSlimTable(table30, "", slimTestContext32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(wildcardClass24);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
    }

    @Test
    public void test03552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03552");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.lang.String str3 = slimTableFactory0.getFullTableName("hi!");
        boolean boolean5 = slimTableFactory0.hasColon("hi!");
        boolean boolean7 = slimTableFactory0.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass10 = slimTableFactory8.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory8.copy();
        boolean boolean13 = slimTableFactory8.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass15 = slimTableFactory8.getTableType("hi!");
        java.lang.String str17 = slimTableFactory8.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory8.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass20 = slimTableFactory8.getTableType("");
        boolean boolean22 = slimTableFactory8.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass24 = slimTableFactory8.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = slimTableFactory25.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap27 = slimTableFactory26.tableTypes;
        boolean boolean29 = slimTableFactory26.hasColon("");
        boolean boolean31 = slimTableFactory26.hasColon("hi!");
        boolean boolean33 = slimTableFactory26.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory34 = slimTableFactory26.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass36 = slimTableFactory34.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap37 = slimTableFactory34.tableTypeArrays;
        slimTableFactory8.tableTypeArrays = strMap37;
        slimTableFactory0.tableTypeArrays = strMap37;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory40 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory41 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory42 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.Table table43 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext45 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable46 = slimTableFactory42.makeSlimTable(table43, "", slimTestContext45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!" + "'", str3, "hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(slimTableFactory18);
        org.junit.Assert.assertNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(wildcardClass24);
        org.junit.Assert.assertNotNull(slimTableFactory26);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(slimTableFactory34);
        org.junit.Assert.assertNull(wildcardClass36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(slimTableFactory40);
        org.junit.Assert.assertNotNull(slimTableFactory41);
        org.junit.Assert.assertNotNull(slimTableFactory42);
    }

    @Test
    public void test03553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03553");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory1.copy();
        boolean boolean8 = slimTableFactory1.hasColon("");
        boolean boolean10 = slimTableFactory1.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory11.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap13 = slimTableFactory12.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass16 = slimTableFactory14.getTableType("");
        boolean boolean18 = slimTableFactory14.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap19 = slimTableFactory14.tableTypeArrays;
        slimTableFactory12.tableTypeArrays = strMap19;
        slimTableFactory1.tableTypeArrays = strMap19;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap22 = slimTableFactory1.tableTypes;
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNull(wildcardClass16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(strMap22);
    }

    @Test
    public void test03554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03554");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = slimTableFactory0.tableTypeArrays;
        boolean boolean4 = slimTableFactory0.hasColon("");
        boolean boolean6 = slimTableFactory0.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory0.copy();
        java.lang.String str9 = slimTableFactory0.makeTableType("");
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test03555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03555");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory1.tableTypeArrays;
        boolean boolean5 = slimTableFactory1.hasColon("hi!");
        boolean boolean7 = slimTableFactory1.hasColon("");
        fitnesse.testsystems.slim.Table table8 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext10 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable11 = slimTableFactory1.makeSlimTable(table8, "hi!", slimTestContext10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test03556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03556");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory4.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap6 = slimTableFactory5.tableTypes;
        boolean boolean8 = slimTableFactory5.hasColon("");
        boolean boolean10 = slimTableFactory5.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap11 = slimTableFactory5.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory12.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory12.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory15.tableTypeArrays;
        slimTableFactory5.tableTypeArrays = strMap16;
        slimTableFactory0.tableTypeArrays = strMap16;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap19 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap23 = slimTableFactory22.tableTypes;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap24 = slimTableFactory22.tableTypes;
        fitnesse.testsystems.slim.Table table25 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory22.parseDefineTableTypeRow(table25, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(slimTableFactory20);
        org.junit.Assert.assertNotNull(slimTableFactory21);
        org.junit.Assert.assertNotNull(slimTableFactory22);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(strMap24);
    }

    @Test
    public void test03557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03557");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory4.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap6 = slimTableFactory5.tableTypes;
        boolean boolean8 = slimTableFactory5.hasColon("");
        boolean boolean10 = slimTableFactory5.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap11 = slimTableFactory5.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory12.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory12.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory15.tableTypeArrays;
        slimTableFactory5.tableTypeArrays = strMap16;
        slimTableFactory0.tableTypeArrays = strMap16;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = slimTableFactory20.copy();
        java.lang.String str23 = slimTableFactory20.getFullTableName("hi!");
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(slimTableFactory19);
        org.junit.Assert.assertNotNull(slimTableFactory20);
        org.junit.Assert.assertNotNull(slimTableFactory21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
    }

    @Test
    public void test03558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03558");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap5 = slimTableFactory1.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory9.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap11 = slimTableFactory10.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory12.getTableType("");
        boolean boolean16 = slimTableFactory12.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap17 = slimTableFactory12.tableTypeArrays;
        slimTableFactory10.tableTypeArrays = strMap17;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory19.copy();
        boolean boolean22 = slimTableFactory20.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = slimTableFactory20.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = slimTableFactory20.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = slimTableFactory24.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass28 = slimTableFactory26.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory29 = slimTableFactory26.copy();
        boolean boolean31 = slimTableFactory26.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap32 = slimTableFactory26.tableTypeArrays;
        slimTableFactory24.tableTypeArrays = strMap32;
        java.util.Map<java.lang.String, java.lang.String> strMap34 = slimTableFactory24.tableTypeArrays;
        slimTableFactory10.tableTypeArrays = strMap34;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory36 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory37 = slimTableFactory36.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap38 = slimTableFactory37.tableTypes;
        boolean boolean40 = slimTableFactory37.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap41 = slimTableFactory37.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap42 = slimTableFactory37.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory43 = slimTableFactory37.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap44 = slimTableFactory37.tableTypeArrays;
        slimTableFactory10.tableTypeArrays = strMap44;
        slimTableFactory1.tableTypeArrays = strMap44;
        java.lang.String str48 = slimTableFactory1.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory49 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory51 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory52 = slimTableFactory51.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap53 = slimTableFactory52.tableTypes;
        boolean boolean55 = slimTableFactory52.hasColon("");
        java.lang.String str57 = slimTableFactory52.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap58 = slimTableFactory52.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap58;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory60 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory61 = slimTableFactory60.copy();
        boolean boolean63 = slimTableFactory61.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory64 = slimTableFactory61.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap65 = slimTableFactory61.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass67 = slimTableFactory61.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap68 = slimTableFactory61.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory69 = slimTableFactory61.copy();
        boolean boolean71 = slimTableFactory61.hasColon("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass73 = slimTableFactory61.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap74 = slimTableFactory61.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory75 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass77 = slimTableFactory75.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory78 = slimTableFactory75.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap79 = slimTableFactory78.tableTypeArrays;
        java.lang.String str81 = slimTableFactory78.makeTableType("hi!");
        boolean boolean83 = slimTableFactory78.hasColon("hi!");
        java.lang.String str85 = slimTableFactory78.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap86 = slimTableFactory78.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory87 = slimTableFactory78.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap88 = slimTableFactory78.tableTypeArrays;
        slimTableFactory61.tableTypeArrays = strMap88;
        slimTableFactory1.tableTypeArrays = strMap88;
        fitnesse.testsystems.slim.Table table91 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable92 = slimTableFactory1.parseDefineTableTypeTable(table91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(slimTableFactory20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(slimTableFactory23);
        org.junit.Assert.assertNotNull(slimTableFactory24);
        org.junit.Assert.assertNotNull(slimTableFactory25);
        org.junit.Assert.assertNull(wildcardClass28);
        org.junit.Assert.assertNotNull(slimTableFactory29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNotNull(slimTableFactory37);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertNotNull(strMap42);
        org.junit.Assert.assertNotNull(slimTableFactory43);
        org.junit.Assert.assertNotNull(strMap44);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(slimTableFactory49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNotNull(slimTableFactory52);
        org.junit.Assert.assertNotNull(strMap53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(strMap58);
        org.junit.Assert.assertNotNull(slimTableFactory61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(slimTableFactory64);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNull(wildcardClass67);
        org.junit.Assert.assertNotNull(strMap68);
        org.junit.Assert.assertNotNull(slimTableFactory69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(wildcardClass73);
        org.junit.Assert.assertNotNull(strMap74);
        org.junit.Assert.assertNull(wildcardClass77);
        org.junit.Assert.assertNotNull(slimTableFactory78);
        org.junit.Assert.assertNotNull(strMap79);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "hi!" + "'", str81, "hi!");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertNotNull(strMap86);
        org.junit.Assert.assertNotNull(slimTableFactory87);
        org.junit.Assert.assertNotNull(strMap88);
    }

    @Test
    public void test03559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03559");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory0.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap10 = slimTableFactory9.tableTypes;
        boolean boolean12 = slimTableFactory9.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap13 = slimTableFactory9.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory9.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory15.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap17 = slimTableFactory16.tableTypes;
        boolean boolean19 = slimTableFactory16.hasColon("");
        boolean boolean21 = slimTableFactory16.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap22 = slimTableFactory16.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass25 = slimTableFactory23.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = slimTableFactory23.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap27 = slimTableFactory26.tableTypeArrays;
        slimTableFactory16.tableTypeArrays = strMap27;
        slimTableFactory9.tableTypeArrays = strMap27;
        slimTableFactory0.tableTypeArrays = strMap27;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory31 = slimTableFactory0.copy();
        java.lang.String str33 = slimTableFactory31.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory34 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory35 = slimTableFactory34.copy();
        boolean boolean37 = slimTableFactory35.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory38 = slimTableFactory35.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory39 = slimTableFactory35.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory40 = slimTableFactory35.copy();
        boolean boolean42 = slimTableFactory40.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory43 = slimTableFactory40.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap44 = slimTableFactory43.tableTypeArrays;
        slimTableFactory31.tableTypeArrays = strMap44;
        java.util.Map<java.lang.String, java.lang.String> strMap46 = slimTableFactory31.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass48 = slimTableFactory31.getTableType("hi!");
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNull(wildcardClass25);
        org.junit.Assert.assertNotNull(slimTableFactory26);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(slimTableFactory31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(slimTableFactory38);
        org.junit.Assert.assertNotNull(slimTableFactory39);
        org.junit.Assert.assertNotNull(slimTableFactory40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(slimTableFactory43);
        org.junit.Assert.assertNotNull(strMap44);
        org.junit.Assert.assertNotNull(strMap46);
        org.junit.Assert.assertNull(wildcardClass48);
    }

    @Test
    public void test03560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03560");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        boolean boolean5 = slimTableFactory0.hasColon("");
        boolean boolean7 = slimTableFactory0.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        boolean boolean11 = slimTableFactory9.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory9.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory9.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory13.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap14;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap16 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = slimTableFactory0.copy();
        java.lang.Class<?> wildcardClass18 = slimTableFactory17.getClass();
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertNotNull(slimTableFactory13);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(slimTableFactory17);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test03561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03561");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("hi!");
        java.lang.String str7 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.Table table8 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable9 = slimTableFactory0.parseDefineTableTypeTable(table8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
    }

    @Test
    public void test03562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03562");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory5.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory5.copy();
        java.lang.String str9 = slimTableFactory7.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory7.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory7.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory12.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory12.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = slimTableFactory16.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap18 = slimTableFactory17.tableTypes;
        boolean boolean20 = slimTableFactory17.hasColon("");
        boolean boolean22 = slimTableFactory17.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap23 = slimTableFactory17.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass26 = slimTableFactory24.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = slimTableFactory24.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap28 = slimTableFactory27.tableTypeArrays;
        slimTableFactory17.tableTypeArrays = strMap28;
        slimTableFactory12.tableTypeArrays = strMap28;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory31 = slimTableFactory12.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory32 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory33 = slimTableFactory32.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap34 = null;
        slimTableFactory32.tableTypeArrays = strMap34;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass37 = slimTableFactory32.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory38 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory39 = slimTableFactory38.copy();
        boolean boolean41 = slimTableFactory39.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory42 = slimTableFactory39.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory43 = slimTableFactory39.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory44 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass46 = slimTableFactory44.getTableType("");
        boolean boolean48 = slimTableFactory44.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap49 = slimTableFactory44.tableTypeArrays;
        slimTableFactory43.tableTypeArrays = strMap49;
        slimTableFactory32.tableTypeArrays = strMap49;
        boolean boolean53 = slimTableFactory32.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory54 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass56 = slimTableFactory54.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap57 = slimTableFactory54.tableTypeArrays;
        slimTableFactory32.tableTypeArrays = strMap57;
        slimTableFactory31.tableTypeArrays = strMap57;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap60 = slimTableFactory31.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap61 = slimTableFactory31.tableTypeArrays;
        slimTableFactory7.tableTypeArrays = strMap61;
        java.lang.String str64 = slimTableFactory7.getFullTableName("hi!");
        fitnesse.testsystems.slim.Table table65 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory7.parseDefineTableTypeRow(table65, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertNotNull(slimTableFactory17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNull(wildcardClass26);
        org.junit.Assert.assertNotNull(slimTableFactory27);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNotNull(slimTableFactory31);
        org.junit.Assert.assertNotNull(slimTableFactory33);
        org.junit.Assert.assertNull(wildcardClass37);
        org.junit.Assert.assertNotNull(slimTableFactory39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(slimTableFactory42);
        org.junit.Assert.assertNotNull(slimTableFactory43);
        org.junit.Assert.assertNull(wildcardClass46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(strMap49);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(wildcardClass56);
        org.junit.Assert.assertNotNull(strMap57);
        org.junit.Assert.assertNotNull(strMap60);
        org.junit.Assert.assertNotNull(strMap61);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "hi!" + "'", str64, "hi!");
    }

    @Test
    public void test03563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03563");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap5 = slimTableFactory0.tableTypeArrays;
        boolean boolean7 = slimTableFactory0.hasColon("");
        java.lang.String str9 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory0.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass12 = slimTableFactory10.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap13 = slimTableFactory10.tableTypeArrays;
        java.lang.Class<?> wildcardClass14 = strMap13.getClass();
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test03564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03564");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory4.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap6 = slimTableFactory5.tableTypes;
        boolean boolean8 = slimTableFactory5.hasColon("");
        boolean boolean10 = slimTableFactory5.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap11 = slimTableFactory5.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory12.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory12.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory15.tableTypeArrays;
        slimTableFactory5.tableTypeArrays = strMap16;
        slimTableFactory0.tableTypeArrays = strMap16;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap19 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap21 = slimTableFactory0.tableTypes;
        boolean boolean23 = slimTableFactory0.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap24 = slimTableFactory0.tableTypeArrays;
        boolean boolean26 = slimTableFactory0.hasColon("hi!");
        java.lang.Class<?> wildcardClass27 = slimTableFactory0.getClass();
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(slimTableFactory20);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test03565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03565");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        boolean boolean6 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass10 = slimTableFactory8.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory8.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap12 = slimTableFactory11.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap12;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory1.copy();
        boolean boolean16 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap17 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass20 = slimTableFactory18.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap21 = slimTableFactory18.tableTypeArrays;
        java.lang.String str23 = slimTableFactory18.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = slimTableFactory18.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap25 = slimTableFactory18.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap25;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = slimTableFactory1.copy();
        java.lang.Class<?> wildcardClass28 = slimTableFactory1.getClass();
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNull(wildcardClass20);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory24);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(slimTableFactory27);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test03566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03566");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory5.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory7.copy();
        boolean boolean10 = slimTableFactory8.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory8.tableTypeArrays;
        slimTableFactory6.tableTypeArrays = strMap11;
        java.lang.String str14 = slimTableFactory6.getFullTableName("hi!");
        java.lang.String str16 = slimTableFactory6.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap17 = slimTableFactory6.tableTypeArrays;
        boolean boolean19 = slimTableFactory6.hasColon("");
        boolean boolean21 = slimTableFactory6.hasColon("hi!");
        fitnesse.testsystems.slim.Table table22 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext24 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable25 = slimTableFactory6.makeSlimTable(table22, "", slimTestContext24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test03567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03567");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap8 = slimTableFactory1.tableTypes;
        java.lang.Class<?> wildcardClass9 = slimTableFactory1.getClass();
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test03568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03568");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory5.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory5.tableTypes;
        java.lang.String str9 = slimTableFactory5.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory5.copy();
        java.lang.String str12 = slimTableFactory10.makeTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory10.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap15 = slimTableFactory10.tableTypeArrays;
        fitnesse.testsystems.slim.Table table16 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext18 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable19 = slimTableFactory10.makeSlimTable(table16, "", slimTestContext18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertNotNull(strMap15);
    }

    @Test
    public void test03569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03569");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory1.tableTypeArrays;
        java.lang.String str6 = slimTableFactory1.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory7.copy();
        boolean boolean10 = slimTableFactory8.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory8.tableTypeArrays;
        java.lang.String str13 = slimTableFactory8.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory8.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap14;
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory1.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap17 = slimTableFactory1.tableTypes;
        java.lang.String str19 = slimTableFactory1.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = slimTableFactory21.copy();
        boolean boolean24 = slimTableFactory22.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = slimTableFactory22.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap26 = slimTableFactory22.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = slimTableFactory22.copy();
        boolean boolean29 = slimTableFactory27.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap30 = slimTableFactory27.tableTypeArrays;
        slimTableFactory20.tableTypeArrays = strMap30;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory32 = slimTableFactory20.copy();
        fitnesse.testsystems.slim.Table table33 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable34 = slimTableFactory32.parseDefineTableTypeTable(table33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory20);
        org.junit.Assert.assertNotNull(slimTableFactory22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(slimTableFactory25);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(slimTableFactory27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(slimTableFactory32);
    }

    @Test
    public void test03570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03570");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory1.tableTypeArrays;
        java.lang.String str6 = slimTableFactory1.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        boolean boolean11 = slimTableFactory9.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory9.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap13 = slimTableFactory9.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass16 = slimTableFactory14.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap17 = slimTableFactory14.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass19 = slimTableFactory14.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass22 = slimTableFactory20.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = slimTableFactory20.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = slimTableFactory23.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = slimTableFactory25.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap27 = slimTableFactory25.tableTypeArrays;
        slimTableFactory23.tableTypeArrays = strMap27;
        slimTableFactory14.tableTypeArrays = strMap27;
        slimTableFactory9.tableTypeArrays = strMap27;
        slimTableFactory1.tableTypeArrays = strMap27;
        java.lang.String str33 = slimTableFactory1.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap34 = slimTableFactory1.tableTypes;
        java.lang.String str36 = slimTableFactory1.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory37 = slimTableFactory1.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass39 = slimTableFactory37.getTableType("");
        java.lang.String str41 = slimTableFactory37.makeTableType("");
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNull(wildcardClass16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNull(wildcardClass22);
        org.junit.Assert.assertNotNull(slimTableFactory23);
        org.junit.Assert.assertNotNull(slimTableFactory24);
        org.junit.Assert.assertNotNull(slimTableFactory26);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(slimTableFactory37);
        org.junit.Assert.assertNull(wildcardClass39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
    }

    @Test
    public void test03571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03571");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass6 = slimTableFactory4.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory4.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap10 = slimTableFactory9.tableTypes;
        boolean boolean12 = slimTableFactory9.hasColon("");
        boolean boolean14 = slimTableFactory9.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap15 = slimTableFactory9.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass18 = slimTableFactory16.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory16.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap20 = slimTableFactory19.tableTypeArrays;
        slimTableFactory9.tableTypeArrays = strMap20;
        slimTableFactory4.tableTypeArrays = strMap20;
        slimTableFactory1.tableTypeArrays = strMap20;
        java.lang.String str25 = slimTableFactory1.makeTableType("");
        boolean boolean27 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.Table table28 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory1.parseDefineTableTypeRow(table28, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertNotNull(slimTableFactory19);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test03572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03572");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        boolean boolean4 = slimTableFactory0.hasColon("");
        java.lang.String str6 = slimTableFactory0.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass10 = slimTableFactory8.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory8.tableTypeArrays;
        boolean boolean13 = slimTableFactory8.hasColon("");
        java.lang.String str15 = slimTableFactory8.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory8.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap16;
        java.lang.String str19 = slimTableFactory0.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap21 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.Table table23 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext25 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable26 = slimTableFactory0.makeSlimTable(table23, "", slimTestContext25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory20);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(slimTableFactory22);
    }

    @Test
    public void test03573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03573");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        java.lang.String str5 = slimTableFactory0.makeTableType("hi!");
        boolean boolean7 = slimTableFactory0.hasColon("hi!");
        java.lang.String str9 = slimTableFactory0.getFullTableName("hi!");
        java.lang.String str11 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap12 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory13.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap15 = slimTableFactory14.tableTypes;
        boolean boolean17 = slimTableFactory14.hasColon("");
        boolean boolean19 = slimTableFactory14.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap20 = slimTableFactory14.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass23 = slimTableFactory21.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = slimTableFactory21.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap25 = slimTableFactory24.tableTypeArrays;
        slimTableFactory14.tableTypeArrays = strMap25;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = slimTableFactory14.copy();
        java.lang.String str29 = slimTableFactory27.makeTableType("hi!");
        java.lang.String str31 = slimTableFactory27.getFullTableName("hi!");
        java.lang.String str33 = slimTableFactory27.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory34 = slimTableFactory27.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory35 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory36 = slimTableFactory35.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = null;
        slimTableFactory35.tableTypeArrays = strMap37;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass40 = slimTableFactory35.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory41 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory42 = slimTableFactory41.copy();
        boolean boolean44 = slimTableFactory42.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory45 = slimTableFactory42.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory46 = slimTableFactory42.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory47 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass49 = slimTableFactory47.getTableType("");
        boolean boolean51 = slimTableFactory47.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap52 = slimTableFactory47.tableTypeArrays;
        slimTableFactory46.tableTypeArrays = strMap52;
        slimTableFactory35.tableTypeArrays = strMap52;
        boolean boolean56 = slimTableFactory35.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap57 = slimTableFactory35.tableTypes;
        java.lang.String str59 = slimTableFactory35.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap60 = slimTableFactory35.tableTypeArrays;
        slimTableFactory27.tableTypeArrays = strMap60;
        slimTableFactory0.tableTypeArrays = strMap60;
        fitnesse.testsystems.slim.Table table63 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext65 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable66 = slimTableFactory0.makeSlimTable(table63, "hi!", slimTestContext65);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNull(wildcardClass23);
        org.junit.Assert.assertNotNull(slimTableFactory24);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(slimTableFactory27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(slimTableFactory34);
        org.junit.Assert.assertNotNull(slimTableFactory36);
        org.junit.Assert.assertNull(wildcardClass40);
        org.junit.Assert.assertNotNull(slimTableFactory42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(slimTableFactory45);
        org.junit.Assert.assertNotNull(slimTableFactory46);
        org.junit.Assert.assertNull(wildcardClass49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(strMap52);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(strMap57);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "hi!" + "'", str59, "hi!");
        org.junit.Assert.assertNotNull(strMap60);
    }

    @Test
    public void test03574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03574");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        slimTableFactory0.tableTypeArrays = strMap2;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass5 = slimTableFactory0.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory6.copy();
        boolean boolean9 = slimTableFactory7.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory7.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory7.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory12.getTableType("");
        boolean boolean16 = slimTableFactory12.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap17 = slimTableFactory12.tableTypeArrays;
        slimTableFactory11.tableTypeArrays = strMap17;
        slimTableFactory0.tableTypeArrays = strMap17;
        boolean boolean21 = slimTableFactory0.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass24 = slimTableFactory22.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap25 = slimTableFactory22.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap25;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass28 = slimTableFactory0.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap29 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory30 = slimTableFactory0.copy();
        java.lang.String str32 = slimTableFactory0.getFullTableName("");
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(wildcardClass24);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNull(wildcardClass28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(slimTableFactory30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
    }

    @Test
    public void test03575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03575");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        boolean boolean4 = slimTableFactory0.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap5 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap6 = slimTableFactory0.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass8 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap9 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap10 = slimTableFactory0.tableTypes;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap11 = slimTableFactory0.tableTypes;
        java.lang.String str13 = slimTableFactory0.makeTableType("hi!");
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
    }

    @Test
    public void test03576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03576");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory3.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap5 = slimTableFactory3.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap6 = slimTableFactory3.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory3.copy();
        java.lang.String str9 = slimTableFactory7.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory10.copy();
        java.lang.String str13 = slimTableFactory10.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap14 = slimTableFactory10.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory15.copy();
        boolean boolean18 = slimTableFactory16.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory16.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory16.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap21 = slimTableFactory20.tableTypeArrays;
        slimTableFactory10.tableTypeArrays = strMap21;
        slimTableFactory7.tableTypeArrays = strMap21;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass25 = slimTableFactory7.getTableType("hi!");
        java.lang.Class<?> wildcardClass26 = slimTableFactory7.getClass();
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(slimTableFactory19);
        org.junit.Assert.assertNotNull(slimTableFactory20);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNull(wildcardClass25);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test03577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03577");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap4 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.Table table5 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext7 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable8 = slimTableFactory0.makeSlimTable(table5, "", slimTestContext7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(strMap4);
    }

    @Test
    public void test03578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03578");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        boolean boolean4 = slimTableFactory0.hasColon("");
        java.lang.String str6 = slimTableFactory0.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass10 = slimTableFactory8.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory8.tableTypeArrays;
        boolean boolean13 = slimTableFactory8.hasColon("");
        java.lang.String str15 = slimTableFactory8.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory8.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap16;
        java.lang.String str19 = slimTableFactory0.makeTableType("hi!");
        java.lang.Class<?> wildcardClass20 = slimTableFactory0.getClass();
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test03579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03579");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.lang.String str3 = slimTableFactory0.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory4.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap6 = slimTableFactory5.tableTypes;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory5.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory5.copy();
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!" + "'", str3, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(slimTableFactory8);
    }

    @Test
    public void test03580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03580");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        boolean boolean6 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass10 = slimTableFactory8.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory8.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap12 = slimTableFactory11.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap12;
        java.lang.String str15 = slimTableFactory1.makeTableType("");
        java.lang.String str17 = slimTableFactory1.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory18.copy();
        boolean boolean21 = slimTableFactory19.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = slimTableFactory19.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = slimTableFactory19.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = slimTableFactory23.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = slimTableFactory25.copy();
        boolean boolean28 = slimTableFactory26.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap29 = slimTableFactory26.tableTypeArrays;
        slimTableFactory24.tableTypeArrays = strMap29;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory31 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory32 = slimTableFactory31.copy();
        boolean boolean34 = slimTableFactory32.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap35 = slimTableFactory32.tableTypeArrays;
        java.lang.String str37 = slimTableFactory32.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory38 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory39 = slimTableFactory38.copy();
        boolean boolean41 = slimTableFactory39.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap42 = slimTableFactory39.tableTypeArrays;
        java.lang.String str44 = slimTableFactory39.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap45 = slimTableFactory39.tableTypeArrays;
        slimTableFactory32.tableTypeArrays = strMap45;
        java.util.Map<java.lang.String, java.lang.String> strMap47 = slimTableFactory32.tableTypeArrays;
        slimTableFactory24.tableTypeArrays = strMap47;
        slimTableFactory1.tableTypeArrays = strMap47;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap50 = slimTableFactory1.tableTypes;
        java.lang.String str52 = slimTableFactory1.makeTableType("");
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(slimTableFactory22);
        org.junit.Assert.assertNotNull(slimTableFactory23);
        org.junit.Assert.assertNotNull(slimTableFactory24);
        org.junit.Assert.assertNotNull(slimTableFactory26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(slimTableFactory32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(slimTableFactory39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(strMap42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
    }

    @Test
    public void test03581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03581");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory5.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap8 = slimTableFactory5.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass11 = slimTableFactory9.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap12 = slimTableFactory9.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory9.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory9.tableTypeArrays;
        slimTableFactory5.tableTypeArrays = strMap14;
        java.lang.Class<?> wildcardClass16 = strMap14.getClass();
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(slimTableFactory13);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test03582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03582");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        boolean boolean6 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass10 = slimTableFactory8.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory8.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap12 = slimTableFactory11.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap12;
        java.lang.String str15 = slimTableFactory1.makeTableType("");
        java.lang.String str17 = slimTableFactory1.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass20 = slimTableFactory18.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap21 = slimTableFactory18.tableTypeArrays;
        boolean boolean23 = slimTableFactory18.hasColon("");
        java.lang.String str25 = slimTableFactory18.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap26 = slimTableFactory18.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = slimTableFactory27.copy();
        boolean boolean30 = slimTableFactory28.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap31 = slimTableFactory28.tableTypeArrays;
        java.lang.String str33 = slimTableFactory28.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory34 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory35 = slimTableFactory34.copy();
        boolean boolean37 = slimTableFactory35.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap38 = slimTableFactory35.tableTypeArrays;
        java.lang.String str40 = slimTableFactory35.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap41 = slimTableFactory35.tableTypeArrays;
        slimTableFactory28.tableTypeArrays = strMap41;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory43 = slimTableFactory28.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory44 = slimTableFactory28.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory45 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass47 = slimTableFactory45.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory48 = slimTableFactory45.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap49 = slimTableFactory48.tableTypeArrays;
        slimTableFactory28.tableTypeArrays = strMap49;
        slimTableFactory18.tableTypeArrays = strMap49;
        slimTableFactory1.tableTypeArrays = strMap49;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass54 = slimTableFactory1.getTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass56 = slimTableFactory1.getTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass58 = slimTableFactory1.getTableType("hi!");
        java.lang.Class<?> wildcardClass59 = slimTableFactory1.getClass();
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNull(wildcardClass20);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(slimTableFactory28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(slimTableFactory35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertNotNull(slimTableFactory43);
        org.junit.Assert.assertNotNull(slimTableFactory44);
        org.junit.Assert.assertNull(wildcardClass47);
        org.junit.Assert.assertNotNull(slimTableFactory48);
        org.junit.Assert.assertNotNull(strMap49);
        org.junit.Assert.assertNull(wildcardClass54);
        org.junit.Assert.assertNull(wildcardClass56);
        org.junit.Assert.assertNull(wildcardClass58);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test03583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03583");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap5 = slimTableFactory4.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap6 = slimTableFactory4.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory4.copy();
        fitnesse.testsystems.slim.Table table8 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext10 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable11 = slimTableFactory4.makeSlimTable(table8, "hi!", slimTestContext10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory7);
    }

    @Test
    public void test03584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03584");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory3.tableTypeArrays;
        java.lang.String str6 = slimTableFactory3.makeTableType("hi!");
        boolean boolean8 = slimTableFactory3.hasColon("hi!");
        java.lang.String str10 = slimTableFactory3.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap11 = slimTableFactory3.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory3.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap13 = null;
        slimTableFactory12.tableTypeArrays = strMap13;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory15.copy();
        boolean boolean18 = slimTableFactory16.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory16.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory16.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = slimTableFactory20.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = slimTableFactory20.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = slimTableFactory23.copy();
        boolean boolean26 = slimTableFactory24.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = slimTableFactory24.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = slimTableFactory24.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory29 = slimTableFactory28.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory30 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory31 = slimTableFactory30.copy();
        boolean boolean33 = slimTableFactory31.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap34 = slimTableFactory31.tableTypeArrays;
        slimTableFactory29.tableTypeArrays = strMap34;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory36 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory37 = slimTableFactory36.copy();
        boolean boolean39 = slimTableFactory37.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap40 = slimTableFactory37.tableTypeArrays;
        java.lang.String str42 = slimTableFactory37.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory43 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory44 = slimTableFactory43.copy();
        boolean boolean46 = slimTableFactory44.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap47 = slimTableFactory44.tableTypeArrays;
        java.lang.String str49 = slimTableFactory44.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap50 = slimTableFactory44.tableTypeArrays;
        slimTableFactory37.tableTypeArrays = strMap50;
        java.util.Map<java.lang.String, java.lang.String> strMap52 = slimTableFactory37.tableTypeArrays;
        slimTableFactory29.tableTypeArrays = strMap52;
        slimTableFactory22.tableTypeArrays = strMap52;
        slimTableFactory12.tableTypeArrays = strMap52;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap56 = slimTableFactory12.tableTypes;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap57 = slimTableFactory12.tableTypes;
        boolean boolean59 = slimTableFactory12.hasColon("hi!");
        fitnesse.testsystems.slim.Table table60 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable61 = slimTableFactory12.parseDefineTableTypeTable(table60);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(slimTableFactory19);
        org.junit.Assert.assertNotNull(slimTableFactory20);
        org.junit.Assert.assertNotNull(slimTableFactory21);
        org.junit.Assert.assertNotNull(slimTableFactory22);
        org.junit.Assert.assertNotNull(slimTableFactory24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(slimTableFactory27);
        org.junit.Assert.assertNotNull(slimTableFactory28);
        org.junit.Assert.assertNotNull(slimTableFactory29);
        org.junit.Assert.assertNotNull(slimTableFactory31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNotNull(slimTableFactory37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(slimTableFactory44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNotNull(strMap52);
        org.junit.Assert.assertNotNull(strMap56);
        org.junit.Assert.assertNotNull(strMap57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test03585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03585");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap5 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory6.tableTypeArrays;
        java.lang.String str9 = slimTableFactory6.getFullTableName("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass11 = slimTableFactory6.getTableType("");
        java.lang.String str13 = slimTableFactory6.makeTableType("");
        java.lang.String str15 = slimTableFactory6.makeTableType("hi!");
        fitnesse.testsystems.slim.Table table16 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext18 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable19 = slimTableFactory6.makeSlimTable(table16, "hi!", slimTestContext18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
    }

    @Test
    public void test03586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03586");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory5.copy();
        boolean boolean8 = slimTableFactory6.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory6.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory6.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory10.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory12.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory12.copy();
        boolean boolean17 = slimTableFactory12.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap18 = slimTableFactory12.tableTypeArrays;
        slimTableFactory10.tableTypeArrays = strMap18;
        slimTableFactory4.tableTypeArrays = strMap18;
        boolean boolean22 = slimTableFactory4.hasColon("");
        fitnesse.testsystems.slim.Table table23 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable24 = slimTableFactory4.parseDefineTableTypeTable(table23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test03587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03587");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        boolean boolean6 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory1.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass9 = slimTableFactory1.getTableType("");
        java.lang.String str11 = slimTableFactory1.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory12.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory12.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory15.tableTypeArrays;
        java.lang.String str18 = slimTableFactory15.makeTableType("hi!");
        java.lang.String str20 = slimTableFactory15.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap21 = slimTableFactory15.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = slimTableFactory22.copy();
        boolean boolean25 = slimTableFactory23.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = slimTableFactory23.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap27 = slimTableFactory23.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory29 = slimTableFactory28.copy();
        boolean boolean31 = slimTableFactory29.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory32 = slimTableFactory29.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory33 = slimTableFactory29.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory34 = slimTableFactory29.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap35 = slimTableFactory34.tableTypeArrays;
        slimTableFactory23.tableTypeArrays = strMap35;
        slimTableFactory15.tableTypeArrays = strMap35;
        slimTableFactory1.tableTypeArrays = strMap35;
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(slimTableFactory23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(slimTableFactory26);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(slimTableFactory29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(slimTableFactory32);
        org.junit.Assert.assertNotNull(slimTableFactory33);
        org.junit.Assert.assertNotNull(slimTableFactory34);
        org.junit.Assert.assertNotNull(strMap35);
    }

    @Test
    public void test03588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03588");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        boolean boolean4 = slimTableFactory0.hasColon("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass6 = slimTableFactory0.getTableType("hi!");
        java.lang.String str8 = slimTableFactory0.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory0.copy();
        java.lang.String str11 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.Table table12 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext14 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable15 = slimTableFactory0.makeSlimTable(table12, "", slimTestContext14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test03589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03589");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory3.tableTypeArrays;
        java.lang.String str6 = slimTableFactory3.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory3.tableTypes;
        java.lang.String str9 = slimTableFactory3.getFullTableName("");
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test03590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03590");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory1.tableTypeArrays;
        java.lang.String str6 = slimTableFactory1.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory7.copy();
        boolean boolean10 = slimTableFactory8.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory8.tableTypeArrays;
        java.lang.String str13 = slimTableFactory8.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory8.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap14;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory1.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass18 = slimTableFactory16.getTableType("");
        boolean boolean20 = slimTableFactory16.hasColon("");
        java.lang.String str22 = slimTableFactory16.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap23 = slimTableFactory16.tableTypes;
        fitnesse.testsystems.slim.Table table24 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext26 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable27 = slimTableFactory16.makeSlimTable(table24, "hi!", slimTestContext26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertNotNull(strMap23);
    }

    @Test
    public void test03591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03591");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap6 = slimTableFactory0.tableTypes;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass10 = slimTableFactory8.getTableType("");
        boolean boolean12 = slimTableFactory8.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap13 = slimTableFactory8.tableTypeArrays;
        boolean boolean15 = slimTableFactory8.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass18 = slimTableFactory16.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory16.copy();
        boolean boolean21 = slimTableFactory16.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass23 = slimTableFactory16.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap24 = slimTableFactory16.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap25 = slimTableFactory16.tableTypeArrays;
        slimTableFactory8.tableTypeArrays = strMap25;
        slimTableFactory0.tableTypeArrays = strMap25;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.Table table29 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory0.parseDefineTableTypeRow(table29, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertNotNull(slimTableFactory19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(wildcardClass23);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(slimTableFactory28);
    }

    @Test
    public void test03592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03592");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory5.copy();
        boolean boolean8 = slimTableFactory5.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap9 = slimTableFactory5.tableTypeArrays;
        boolean boolean11 = slimTableFactory5.hasColon("hi!");
        fitnesse.testsystems.slim.Table table12 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext14 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable15 = slimTableFactory5.makeSlimTable(table12, "", slimTestContext14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test03593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03593");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass5 = slimTableFactory3.getTableType("");
        boolean boolean7 = slimTableFactory3.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory3.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap8;
        java.lang.String str11 = slimTableFactory1.makeTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass13 = slimTableFactory1.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory1.copy();
        java.lang.String str16 = slimTableFactory1.getFullTableName("");
        java.lang.String str18 = slimTableFactory1.makeTableType("");
        java.lang.String str20 = slimTableFactory1.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.Table table22 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable23 = slimTableFactory21.parseDefineTableTypeTable(table22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory21);
    }

    @Test
    public void test03594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03594");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass4 = slimTableFactory1.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory5.copy();
        boolean boolean8 = slimTableFactory6.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory6.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory6.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory11.copy();
        boolean boolean14 = slimTableFactory12.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory12.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory12.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = slimTableFactory12.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = slimTableFactory17.tableTypeArrays;
        slimTableFactory6.tableTypeArrays = strMap18;
        slimTableFactory1.tableTypeArrays = strMap18;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap21 = slimTableFactory1.tableTypes;
        java.lang.String str23 = slimTableFactory1.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap24 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.Table table25 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory1.parseDefineTableTypeRow(table25, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertNotNull(slimTableFactory17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertNotNull(strMap24);
    }

    @Test
    public void test03595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03595");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap5 = slimTableFactory1.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory1.getTableType("");
        boolean boolean9 = slimTableFactory1.hasColon("");
        java.lang.String str11 = slimTableFactory1.makeTableType("");
        java.lang.String str13 = slimTableFactory1.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory14.copy();
        boolean boolean17 = slimTableFactory15.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory15.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap19 = slimTableFactory15.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = slimTableFactory20.copy();
        boolean boolean23 = slimTableFactory21.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = slimTableFactory21.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = slimTableFactory21.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = slimTableFactory21.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap27 = slimTableFactory26.tableTypeArrays;
        slimTableFactory15.tableTypeArrays = strMap27;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory29 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory30 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass32 = slimTableFactory30.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory33 = slimTableFactory30.copy();
        boolean boolean35 = slimTableFactory30.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap36 = slimTableFactory30.tableTypeArrays;
        slimTableFactory29.tableTypeArrays = strMap36;
        slimTableFactory15.tableTypeArrays = strMap36;
        slimTableFactory1.tableTypeArrays = strMap36;
        java.lang.String str41 = slimTableFactory1.getFullTableName("");
        fitnesse.testsystems.slim.Table table42 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable43 = slimTableFactory1.parseDefineTableTypeTable(table42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(slimTableFactory18);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(slimTableFactory21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(slimTableFactory24);
        org.junit.Assert.assertNotNull(slimTableFactory25);
        org.junit.Assert.assertNotNull(slimTableFactory26);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNull(wildcardClass32);
        org.junit.Assert.assertNotNull(slimTableFactory33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
    }

    @Test
    public void test03596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03596");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        boolean boolean5 = slimTableFactory0.hasColon("");
        java.lang.String str7 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory0.copy();
        boolean boolean11 = slimTableFactory0.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass13 = slimTableFactory0.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap14 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.Table table15 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory0.parseDefineTableTypeRow(table15, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertNotNull(strMap14);
    }

    @Test
    public void test03597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03597");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory5.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory5.copy();
        java.lang.String str9 = slimTableFactory7.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory7.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass12 = slimTableFactory10.getTableType("hi!");
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNull(wildcardClass12);
    }

    @Test
    public void test03598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03598");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory0.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap10 = slimTableFactory9.tableTypes;
        boolean boolean12 = slimTableFactory9.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap13 = slimTableFactory9.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory9.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory15.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap17 = slimTableFactory16.tableTypes;
        boolean boolean19 = slimTableFactory16.hasColon("");
        boolean boolean21 = slimTableFactory16.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap22 = slimTableFactory16.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass25 = slimTableFactory23.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = slimTableFactory23.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap27 = slimTableFactory26.tableTypeArrays;
        slimTableFactory16.tableTypeArrays = strMap27;
        slimTableFactory9.tableTypeArrays = strMap27;
        slimTableFactory0.tableTypeArrays = strMap27;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory31 = slimTableFactory0.copy();
        java.lang.String str33 = slimTableFactory31.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory34 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory35 = slimTableFactory34.copy();
        boolean boolean37 = slimTableFactory35.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory38 = slimTableFactory35.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory39 = slimTableFactory35.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory40 = slimTableFactory35.copy();
        boolean boolean42 = slimTableFactory40.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory43 = slimTableFactory40.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap44 = slimTableFactory43.tableTypeArrays;
        slimTableFactory31.tableTypeArrays = strMap44;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory46 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory47 = slimTableFactory46.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap48 = null;
        slimTableFactory46.tableTypeArrays = strMap48;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass51 = slimTableFactory46.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory52 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory53 = slimTableFactory52.copy();
        boolean boolean55 = slimTableFactory53.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory56 = slimTableFactory53.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory57 = slimTableFactory53.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory58 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass60 = slimTableFactory58.getTableType("");
        boolean boolean62 = slimTableFactory58.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap63 = slimTableFactory58.tableTypeArrays;
        slimTableFactory57.tableTypeArrays = strMap63;
        slimTableFactory46.tableTypeArrays = strMap63;
        boolean boolean67 = slimTableFactory46.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap68 = slimTableFactory46.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap69 = slimTableFactory46.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap70 = slimTableFactory46.tableTypeArrays;
        slimTableFactory31.tableTypeArrays = strMap70;
        fitnesse.testsystems.slim.Table table72 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory31.parseDefineTableTypeRow(table72, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNull(wildcardClass25);
        org.junit.Assert.assertNotNull(slimTableFactory26);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(slimTableFactory31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(slimTableFactory38);
        org.junit.Assert.assertNotNull(slimTableFactory39);
        org.junit.Assert.assertNotNull(slimTableFactory40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(slimTableFactory43);
        org.junit.Assert.assertNotNull(strMap44);
        org.junit.Assert.assertNotNull(slimTableFactory47);
        org.junit.Assert.assertNull(wildcardClass51);
        org.junit.Assert.assertNotNull(slimTableFactory53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(slimTableFactory56);
        org.junit.Assert.assertNotNull(slimTableFactory57);
        org.junit.Assert.assertNull(wildcardClass60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(strMap63);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(strMap68);
        org.junit.Assert.assertNotNull(strMap69);
        org.junit.Assert.assertNotNull(strMap70);
    }

    @Test
    public void test03599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03599");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory1.tableTypeArrays;
        java.lang.String str6 = slimTableFactory1.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap9 = slimTableFactory1.tableTypes;
        java.lang.String str11 = slimTableFactory1.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap12 = slimTableFactory1.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory1.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory1.tableTypeArrays;
        java.lang.String str18 = slimTableFactory1.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.Table table20 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory1.parseDefineTableTypeRow(table20, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory19);
    }

    @Test
    public void test03600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03600");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass5 = slimTableFactory1.getTableType("hi!");
        boolean boolean7 = slimTableFactory1.hasColon("");
        boolean boolean9 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory1.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory1.tableTypeArrays;
        java.lang.String str13 = slimTableFactory1.makeTableType("hi!");
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
    }

    @Test
    public void test03601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03601");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        java.lang.String str5 = slimTableFactory0.makeTableType("hi!");
        java.lang.String str7 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap8 = slimTableFactory0.tableTypes;
        java.lang.String str10 = slimTableFactory0.makeTableType("hi!");
        fitnesse.testsystems.slim.Table table11 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory0.parseDefineTableTypeRow(table11, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
    }

    @Test
    public void test03602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03602");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.lang.String str3 = slimTableFactory0.getFullTableName("hi!");
        java.lang.String str5 = slimTableFactory0.makeTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory0.getTableType("hi!");
        java.lang.String str9 = slimTableFactory0.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass12 = slimTableFactory10.getTableType("");
        boolean boolean14 = slimTableFactory10.hasColon("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass16 = slimTableFactory10.getTableType("");
        java.lang.String str18 = slimTableFactory10.getFullTableName("hi!");
        java.lang.String str20 = slimTableFactory10.getFullTableName("");
        boolean boolean22 = slimTableFactory10.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = slimTableFactory10.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap24 = slimTableFactory23.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap24;
        java.lang.Class<?> wildcardClass26 = slimTableFactory0.getClass();
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!" + "'", str3, "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(wildcardClass16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(slimTableFactory23);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test03603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03603");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory0.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap10 = slimTableFactory9.tableTypes;
        boolean boolean12 = slimTableFactory9.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap13 = slimTableFactory9.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory9.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory15.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap17 = slimTableFactory16.tableTypes;
        boolean boolean19 = slimTableFactory16.hasColon("");
        boolean boolean21 = slimTableFactory16.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap22 = slimTableFactory16.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass25 = slimTableFactory23.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = slimTableFactory23.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap27 = slimTableFactory26.tableTypeArrays;
        slimTableFactory16.tableTypeArrays = strMap27;
        slimTableFactory9.tableTypeArrays = strMap27;
        slimTableFactory0.tableTypeArrays = strMap27;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory31 = slimTableFactory0.copy();
        java.lang.String str33 = slimTableFactory31.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory34 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory35 = slimTableFactory34.copy();
        boolean boolean37 = slimTableFactory35.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory38 = slimTableFactory35.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory39 = slimTableFactory35.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory40 = slimTableFactory35.copy();
        boolean boolean42 = slimTableFactory40.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory43 = slimTableFactory40.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap44 = slimTableFactory43.tableTypeArrays;
        slimTableFactory31.tableTypeArrays = strMap44;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass47 = slimTableFactory31.getTableType("hi!");
        java.lang.String str49 = slimTableFactory31.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory50 = slimTableFactory31.copy();
        java.lang.Class<?> wildcardClass51 = slimTableFactory31.getClass();
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNull(wildcardClass25);
        org.junit.Assert.assertNotNull(slimTableFactory26);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(slimTableFactory31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(slimTableFactory38);
        org.junit.Assert.assertNotNull(slimTableFactory39);
        org.junit.Assert.assertNotNull(slimTableFactory40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(slimTableFactory43);
        org.junit.Assert.assertNotNull(strMap44);
        org.junit.Assert.assertNull(wildcardClass47);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hi!" + "'", str49, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory50);
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test03604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03604");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory0.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap10 = slimTableFactory9.tableTypes;
        boolean boolean12 = slimTableFactory9.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap13 = slimTableFactory9.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory9.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory15.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap17 = slimTableFactory16.tableTypes;
        boolean boolean19 = slimTableFactory16.hasColon("");
        boolean boolean21 = slimTableFactory16.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap22 = slimTableFactory16.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass25 = slimTableFactory23.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = slimTableFactory23.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap27 = slimTableFactory26.tableTypeArrays;
        slimTableFactory16.tableTypeArrays = strMap27;
        slimTableFactory9.tableTypeArrays = strMap27;
        slimTableFactory0.tableTypeArrays = strMap27;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory31 = slimTableFactory0.copy();
        java.lang.String str33 = slimTableFactory31.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory34 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory35 = slimTableFactory34.copy();
        boolean boolean37 = slimTableFactory35.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory38 = slimTableFactory35.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory39 = slimTableFactory35.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory40 = slimTableFactory35.copy();
        boolean boolean42 = slimTableFactory40.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory43 = slimTableFactory40.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap44 = slimTableFactory43.tableTypeArrays;
        slimTableFactory31.tableTypeArrays = strMap44;
        java.util.Map<java.lang.String, java.lang.String> strMap46 = slimTableFactory31.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory47 = slimTableFactory31.copy();
        java.lang.String str49 = slimTableFactory47.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap50 = slimTableFactory47.tableTypeArrays;
        fitnesse.testsystems.slim.Table table51 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable52 = slimTableFactory47.parseDefineTableTypeTable(table51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNull(wildcardClass25);
        org.junit.Assert.assertNotNull(slimTableFactory26);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(slimTableFactory31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(slimTableFactory38);
        org.junit.Assert.assertNotNull(slimTableFactory39);
        org.junit.Assert.assertNotNull(slimTableFactory40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(slimTableFactory43);
        org.junit.Assert.assertNotNull(strMap44);
        org.junit.Assert.assertNotNull(strMap46);
        org.junit.Assert.assertNotNull(slimTableFactory47);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hi!" + "'", str49, "hi!");
        org.junit.Assert.assertNotNull(strMap50);
    }

    @Test
    public void test03605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03605");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory4.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap6 = slimTableFactory5.tableTypes;
        boolean boolean8 = slimTableFactory5.hasColon("");
        boolean boolean10 = slimTableFactory5.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap11 = slimTableFactory5.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory12.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory12.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory15.tableTypeArrays;
        slimTableFactory5.tableTypeArrays = strMap16;
        slimTableFactory0.tableTypeArrays = strMap16;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap19 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap22 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.Table table23 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory0.parseDefineTableTypeRow(table23, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(slimTableFactory20);
        org.junit.Assert.assertNotNull(slimTableFactory21);
        org.junit.Assert.assertNotNull(strMap22);
    }

    @Test
    public void test03606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03606");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = slimTableFactory0.tableTypeArrays;
        boolean boolean4 = slimTableFactory0.hasColon("");
        boolean boolean6 = slimTableFactory0.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap8 = slimTableFactory7.tableTypes;
        fitnesse.testsystems.slim.Table table9 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable10 = slimTableFactory7.parseDefineTableTypeTable(table9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertNotNull(strMap8);
    }

    @Test
    public void test03607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03607");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        boolean boolean6 = slimTableFactory1.hasColon("hi!");
        boolean boolean8 = slimTableFactory1.hasColon("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass10 = slimTableFactory1.getTableType("hi!");
        java.lang.String str12 = slimTableFactory1.getFullTableName("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory1.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap15 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.Table table16 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory1.parseDefineTableTypeRow(table16, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertNotNull(strMap15);
    }

    @Test
    public void test03608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03608");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory3.copy();
        java.lang.String str6 = slimTableFactory3.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory7.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap9 = null;
        slimTableFactory7.tableTypeArrays = strMap9;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass12 = slimTableFactory7.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory13.copy();
        boolean boolean16 = slimTableFactory14.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = slimTableFactory14.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory14.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass21 = slimTableFactory19.getTableType("");
        boolean boolean23 = slimTableFactory19.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap24 = slimTableFactory19.tableTypeArrays;
        slimTableFactory18.tableTypeArrays = strMap24;
        slimTableFactory7.tableTypeArrays = strMap24;
        slimTableFactory3.tableTypeArrays = strMap24;
        java.lang.String str29 = slimTableFactory3.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory30 = slimTableFactory3.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap31 = slimTableFactory3.tableTypes;
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(slimTableFactory17);
        org.junit.Assert.assertNotNull(slimTableFactory18);
        org.junit.Assert.assertNull(wildcardClass21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory30);
        org.junit.Assert.assertNotNull(strMap31);
    }

    @Test
    public void test03609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03609");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass5 = slimTableFactory3.getTableType("");
        boolean boolean7 = slimTableFactory3.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory3.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap8;
        java.lang.String str11 = slimTableFactory1.makeTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass13 = slimTableFactory1.getTableType("");
        boolean boolean15 = slimTableFactory1.hasColon("");
        java.lang.String str17 = slimTableFactory1.makeTableType("hi!");
        java.lang.String str19 = slimTableFactory1.getFullTableName("hi!");
        fitnesse.testsystems.slim.Table table20 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext22 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable23 = slimTableFactory1.makeSlimTable(table20, "hi!", slimTestContext22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
    }

    @Test
    public void test03610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03610");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap6 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.Table table8 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable9 = slimTableFactory0.parseDefineTableTypeTable(table8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory7);
    }

    @Test
    public void test03611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03611");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass5 = slimTableFactory0.getTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap8 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory0.copy();
        java.lang.Class<?> wildcardClass10 = slimTableFactory9.getClass();
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test03612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03612");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory3.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap6 = slimTableFactory3.tableTypes;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory3.tableTypes;
        boolean boolean9 = slimTableFactory3.hasColon("hi!");
        boolean boolean11 = slimTableFactory3.hasColon("");
        boolean boolean13 = slimTableFactory3.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap14 = slimTableFactory3.tableTypes;
        fitnesse.testsystems.slim.Table table15 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext17 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable18 = slimTableFactory3.makeSlimTable(table15, "", slimTestContext17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strMap14);
    }

    @Test
    public void test03613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03613");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass5 = slimTableFactory0.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory0.tableTypes;
        java.lang.Class<?> wildcardClass8 = strMap7.getClass();
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test03614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03614");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass3 = slimTableFactory1.getTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass5 = slimTableFactory1.getTableType("");
        fitnesse.testsystems.slim.Table table6 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext8 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable9 = slimTableFactory1.makeSlimTable(table6, "hi!", slimTestContext8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertNull(wildcardClass5);
    }

    @Test
    public void test03615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03615");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory1.tableTypeArrays;
        java.lang.String str6 = slimTableFactory1.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory7.copy();
        boolean boolean10 = slimTableFactory8.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory8.tableTypeArrays;
        java.lang.String str13 = slimTableFactory8.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory8.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap14;
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory1.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap17 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory1.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass20 = slimTableFactory1.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap21 = slimTableFactory1.tableTypeArrays;
        java.lang.Class<?> wildcardClass22 = strMap21.getClass();
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(slimTableFactory18);
        org.junit.Assert.assertNull(wildcardClass20);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test03616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03616");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass5 = slimTableFactory3.getTableType("");
        boolean boolean7 = slimTableFactory3.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory3.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap8;
        java.lang.String str11 = slimTableFactory1.makeTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass13 = slimTableFactory1.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.Table table15 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory1.parseDefineTableTypeRow(table15, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertNotNull(slimTableFactory14);
    }

    @Test
    public void test03617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03617");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        java.lang.String str5 = slimTableFactory0.makeTableType("hi!");
        java.lang.String str7 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass11 = slimTableFactory9.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap12 = slimTableFactory9.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory9.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory14.copy();
        boolean boolean17 = slimTableFactory15.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory15.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory15.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory19.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass23 = slimTableFactory21.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = slimTableFactory21.copy();
        boolean boolean26 = slimTableFactory21.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap27 = slimTableFactory21.tableTypeArrays;
        slimTableFactory19.tableTypeArrays = strMap27;
        slimTableFactory13.tableTypeArrays = strMap27;
        slimTableFactory0.tableTypeArrays = strMap27;
        java.util.Map<java.lang.String, java.lang.String> strMap31 = slimTableFactory0.tableTypeArrays;
        java.lang.Class<?> wildcardClass32 = strMap31.getClass();
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(slimTableFactory13);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(slimTableFactory18);
        org.junit.Assert.assertNotNull(slimTableFactory19);
        org.junit.Assert.assertNotNull(slimTableFactory20);
        org.junit.Assert.assertNull(wildcardClass23);
        org.junit.Assert.assertNotNull(slimTableFactory24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test03618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03618");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory8.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap10;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap12 = slimTableFactory1.tableTypes;
        boolean boolean14 = slimTableFactory1.hasColon("hi!");
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test03619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03619");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("hi!");
        java.lang.String str7 = slimTableFactory0.getFullTableName("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass9 = slimTableFactory0.getTableType("hi!");
        java.lang.Class<?> wildcardClass10 = slimTableFactory0.getClass();
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test03620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03620");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass5 = slimTableFactory3.getTableType("");
        boolean boolean7 = slimTableFactory3.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory3.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap8;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory10.copy();
        boolean boolean13 = slimTableFactory11.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory11.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory11.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory15.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass19 = slimTableFactory17.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory17.copy();
        boolean boolean22 = slimTableFactory17.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap23 = slimTableFactory17.tableTypeArrays;
        slimTableFactory15.tableTypeArrays = strMap23;
        java.util.Map<java.lang.String, java.lang.String> strMap25 = slimTableFactory15.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap25;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = slimTableFactory27.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap29 = slimTableFactory28.tableTypes;
        boolean boolean31 = slimTableFactory28.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap32 = slimTableFactory28.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap33 = slimTableFactory28.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory34 = slimTableFactory28.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap35 = slimTableFactory28.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap35;
        java.lang.String str38 = slimTableFactory1.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap39 = slimTableFactory1.tableTypeArrays;
        java.lang.String str41 = slimTableFactory1.makeTableType("hi!");
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(slimTableFactory20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(slimTableFactory28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(slimTableFactory34);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
    }

    @Test
    public void test03621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03621");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory5.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory7.copy();
        boolean boolean10 = slimTableFactory8.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory8.tableTypeArrays;
        slimTableFactory6.tableTypeArrays = strMap11;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory13.copy();
        boolean boolean16 = slimTableFactory14.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap17 = slimTableFactory14.tableTypeArrays;
        java.lang.String str19 = slimTableFactory14.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = slimTableFactory20.copy();
        boolean boolean23 = slimTableFactory21.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap24 = slimTableFactory21.tableTypeArrays;
        java.lang.String str26 = slimTableFactory21.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap27 = slimTableFactory21.tableTypeArrays;
        slimTableFactory14.tableTypeArrays = strMap27;
        java.util.Map<java.lang.String, java.lang.String> strMap29 = slimTableFactory14.tableTypeArrays;
        slimTableFactory6.tableTypeArrays = strMap29;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory31 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass33 = slimTableFactory31.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap34 = slimTableFactory31.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory35 = slimTableFactory31.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap36 = slimTableFactory31.tableTypeArrays;
        slimTableFactory6.tableTypeArrays = strMap36;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory38 = slimTableFactory6.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass40 = slimTableFactory38.getTableType("hi!");
        fitnesse.testsystems.slim.Table table41 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory38.parseDefineTableTypeRow(table41, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(slimTableFactory21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNull(wildcardClass33);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNotNull(slimTableFactory35);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(slimTableFactory38);
        org.junit.Assert.assertNull(wildcardClass40);
    }

    @Test
    public void test03622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03622");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        boolean boolean6 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory1.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass9 = slimTableFactory1.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory1.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap11 = slimTableFactory1.tableTypes;
        java.lang.String str13 = slimTableFactory1.getFullTableName("hi!");
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
    }

    @Test
    public void test03623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03623");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory3.copy();
        boolean boolean6 = slimTableFactory4.hasColon("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass8 = slimTableFactory4.getTableType("hi!");
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(wildcardClass8);
    }

    @Test
    public void test03624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03624");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory5.copy();
        boolean boolean8 = slimTableFactory5.hasColon("");
        boolean boolean10 = slimTableFactory5.hasColon("hi!");
        boolean boolean12 = slimTableFactory5.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory5.copy();
        fitnesse.testsystems.slim.Table table14 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable15 = slimTableFactory5.parseDefineTableTypeTable(table14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(slimTableFactory13);
    }

    @Test
    public void test03625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03625");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass8 = slimTableFactory6.getTableType("");
        boolean boolean10 = slimTableFactory6.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory6.tableTypeArrays;
        slimTableFactory5.tableTypeArrays = strMap11;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory5.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory13.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap15 = slimTableFactory13.tableTypes;
        fitnesse.testsystems.slim.Table table16 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory13.parseDefineTableTypeRow(table16, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(slimTableFactory13);
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertNotNull(strMap15);
    }

    @Test
    public void test03626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03626");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        boolean boolean5 = slimTableFactory0.hasColon("");
        java.lang.String str7 = slimTableFactory0.makeTableType("");
        java.lang.String str9 = slimTableFactory0.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory0.tableTypeArrays;
        java.lang.Class<?> wildcardClass11 = strMap10.getClass();
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test03627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03627");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        boolean boolean6 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory1.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass9 = slimTableFactory1.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory1.tableTypeArrays;
        boolean boolean12 = slimTableFactory1.hasColon("");
        fitnesse.testsystems.slim.Table table13 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable14 = slimTableFactory1.parseDefineTableTypeTable(table13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test03628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03628");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        boolean boolean6 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass10 = slimTableFactory8.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory8.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap12 = slimTableFactory11.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap12;
        java.lang.String str15 = slimTableFactory1.makeTableType("");
        java.lang.String str17 = slimTableFactory1.getFullTableName("hi!");
        java.lang.String str19 = slimTableFactory1.makeTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass21 = slimTableFactory1.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap22 = slimTableFactory1.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap23 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.Table table24 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable25 = slimTableFactory1.parseDefineTableTypeTable(table24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNull(wildcardClass21);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(strMap23);
    }

    @Test
    public void test03629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03629");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory0.getTableType("hi!");
        java.lang.String str9 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory10.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory12.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory12.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = slimTableFactory16.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap18 = slimTableFactory17.tableTypes;
        boolean boolean20 = slimTableFactory17.hasColon("");
        boolean boolean22 = slimTableFactory17.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap23 = slimTableFactory17.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass26 = slimTableFactory24.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = slimTableFactory24.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap28 = slimTableFactory27.tableTypeArrays;
        slimTableFactory17.tableTypeArrays = strMap28;
        slimTableFactory12.tableTypeArrays = strMap28;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap31 = slimTableFactory12.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory32 = slimTableFactory12.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory33 = slimTableFactory12.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap34 = slimTableFactory12.tableTypeArrays;
        slimTableFactory10.tableTypeArrays = strMap34;
        java.lang.Class<?> wildcardClass36 = slimTableFactory10.getClass();
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertNotNull(slimTableFactory17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNull(wildcardClass26);
        org.junit.Assert.assertNotNull(slimTableFactory27);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(slimTableFactory32);
        org.junit.Assert.assertNotNull(slimTableFactory33);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test03630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03630");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        java.lang.String str6 = slimTableFactory1.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory1.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass9 = slimTableFactory1.getTableType("");
        java.lang.String str11 = slimTableFactory1.getFullTableName("hi!");
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
    }

    @Test
    public void test03631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03631");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        boolean boolean6 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass10 = slimTableFactory8.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory8.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap12 = slimTableFactory11.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap12;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory1.copy();
        java.lang.String str16 = slimTableFactory14.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap17 = slimTableFactory14.tableTypes;
        boolean boolean19 = slimTableFactory14.hasColon("hi!");
        java.lang.String str21 = slimTableFactory14.getFullTableName("");
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
    }

    @Test
    public void test03632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03632");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass5 = slimTableFactory3.getTableType("");
        boolean boolean7 = slimTableFactory3.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory3.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap8;
        java.lang.String str11 = slimTableFactory1.makeTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass13 = slimTableFactory1.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory1.copy();
        java.lang.String str16 = slimTableFactory1.getFullTableName("");
        java.lang.String str18 = slimTableFactory1.makeTableType("");
        java.lang.String str20 = slimTableFactory1.makeTableType("hi!");
        fitnesse.testsystems.slim.Table table21 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory1.parseDefineTableTypeRow(table21, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
    }

    @Test
    public void test03633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03633");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap5 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory1.copy();
        boolean boolean8 = slimTableFactory6.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap9 = slimTableFactory6.tableTypeArrays;
        fitnesse.testsystems.slim.Table table10 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory6.parseDefineTableTypeRow(table10, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strMap9);
    }

    @Test
    public void test03634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03634");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap5 = slimTableFactory1.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory1.copy();
        boolean boolean11 = slimTableFactory9.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory9.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory9.getTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap15 = slimTableFactory9.tableTypes;
        java.lang.Class<?> wildcardClass16 = strMap15.getClass();
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test03635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03635");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        boolean boolean4 = slimTableFactory0.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap5 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.Table table7 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable8 = slimTableFactory0.parseDefineTableTypeTable(table7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
    }

    @Test
    public void test03636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03636");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory4.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap6 = slimTableFactory5.tableTypes;
        boolean boolean8 = slimTableFactory5.hasColon("");
        boolean boolean10 = slimTableFactory5.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap11 = slimTableFactory5.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory12.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory12.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory15.tableTypeArrays;
        slimTableFactory5.tableTypeArrays = strMap16;
        slimTableFactory0.tableTypeArrays = strMap16;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap19 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory0.copy();
        java.lang.String str22 = slimTableFactory20.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = slimTableFactory20.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = slimTableFactory20.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap25 = slimTableFactory24.tableTypes;
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(slimTableFactory20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(slimTableFactory23);
        org.junit.Assert.assertNotNull(slimTableFactory24);
        org.junit.Assert.assertNotNull(strMap25);
    }

    @Test
    public void test03637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03637");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory0.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass9 = slimTableFactory0.getTableType("");
        java.lang.Class<?> wildcardClass10 = slimTableFactory0.getClass();
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test03638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03638");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory0.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory9.copy();
        boolean boolean12 = slimTableFactory10.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap13 = slimTableFactory10.tableTypeArrays;
        java.lang.String str15 = slimTableFactory10.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory10.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap16;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.Table table19 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory0.parseDefineTableTypeRow(table19, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(slimTableFactory18);
    }

    @Test
    public void test03639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03639");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass5 = slimTableFactory0.getTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap8 = slimTableFactory0.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap9 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory0.tableTypeArrays;
        java.lang.Class<?> wildcardClass11 = slimTableFactory0.getClass();
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test03640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03640");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        boolean boolean5 = slimTableFactory0.hasColon("");
        java.lang.String str7 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        java.lang.String str11 = slimTableFactory9.getFullTableName("hi!");
        fitnesse.testsystems.slim.Table table12 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory9.parseDefineTableTypeRow(table12, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
    }

    @Test
    public void test03641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03641");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass4 = slimTableFactory1.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap5 = slimTableFactory1.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory1.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap8 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory1.copy();
        boolean boolean11 = slimTableFactory1.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.Table table13 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext15 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable16 = slimTableFactory1.makeSlimTable(table13, "hi!", slimTestContext15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(slimTableFactory12);
    }

    @Test
    public void test03642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03642");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.lang.String str3 = slimTableFactory0.getFullTableName("hi!");
        boolean boolean5 = slimTableFactory0.hasColon("hi!");
        boolean boolean7 = slimTableFactory0.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass10 = slimTableFactory8.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory8.copy();
        boolean boolean13 = slimTableFactory8.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass15 = slimTableFactory8.getTableType("hi!");
        java.lang.String str17 = slimTableFactory8.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory8.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass20 = slimTableFactory8.getTableType("");
        boolean boolean22 = slimTableFactory8.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass24 = slimTableFactory8.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = slimTableFactory25.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap27 = slimTableFactory26.tableTypes;
        boolean boolean29 = slimTableFactory26.hasColon("");
        boolean boolean31 = slimTableFactory26.hasColon("hi!");
        boolean boolean33 = slimTableFactory26.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory34 = slimTableFactory26.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass36 = slimTableFactory34.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap37 = slimTableFactory34.tableTypeArrays;
        slimTableFactory8.tableTypeArrays = strMap37;
        slimTableFactory0.tableTypeArrays = strMap37;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory40 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory41 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.Table table42 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable43 = slimTableFactory0.parseDefineTableTypeTable(table42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!" + "'", str3, "hi!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(slimTableFactory18);
        org.junit.Assert.assertNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(wildcardClass24);
        org.junit.Assert.assertNotNull(slimTableFactory26);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(slimTableFactory34);
        org.junit.Assert.assertNull(wildcardClass36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(slimTableFactory40);
        org.junit.Assert.assertNotNull(slimTableFactory41);
    }

    @Test
    public void test03643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03643");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        boolean boolean6 = slimTableFactory1.hasColon("hi!");
        boolean boolean8 = slimTableFactory1.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory1.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass11 = slimTableFactory9.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory9.copy();
        fitnesse.testsystems.slim.Table table13 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext15 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable16 = slimTableFactory12.makeSlimTable(table13, "hi!", slimTestContext15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertNotNull(slimTableFactory12);
    }

    @Test
    public void test03644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03644");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory0.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory9.copy();
        boolean boolean12 = slimTableFactory10.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap13 = slimTableFactory10.tableTypeArrays;
        java.lang.String str15 = slimTableFactory10.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory10.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap16;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap19 = slimTableFactory0.tableTypes;
        java.lang.Class<?> wildcardClass20 = slimTableFactory0.getClass();
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(slimTableFactory18);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test03645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03645");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory1.tableTypeArrays;
        java.lang.String str6 = slimTableFactory1.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap9 = slimTableFactory1.tableTypes;
        java.lang.String str11 = slimTableFactory1.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap12 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.Table table13 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext15 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable16 = slimTableFactory1.makeSlimTable(table13, "", slimTestContext15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNotNull(strMap12);
    }

    @Test
    public void test03646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03646");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory3.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap5 = slimTableFactory3.tableTypeArrays;
        java.lang.String str7 = slimTableFactory3.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap10 = slimTableFactory9.tableTypes;
        boolean boolean12 = slimTableFactory9.hasColon("");
        boolean boolean14 = slimTableFactory9.hasColon("hi!");
        boolean boolean16 = slimTableFactory9.hasColon("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass18 = slimTableFactory9.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap19 = slimTableFactory9.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass22 = slimTableFactory20.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = slimTableFactory20.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = slimTableFactory24.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap26 = slimTableFactory25.tableTypes;
        boolean boolean28 = slimTableFactory25.hasColon("");
        boolean boolean30 = slimTableFactory25.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap31 = slimTableFactory25.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory32 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass34 = slimTableFactory32.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory35 = slimTableFactory32.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap36 = slimTableFactory35.tableTypeArrays;
        slimTableFactory25.tableTypeArrays = strMap36;
        slimTableFactory20.tableTypeArrays = strMap36;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory39 = slimTableFactory20.copy();
        java.lang.String str41 = slimTableFactory39.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap42 = slimTableFactory39.tableTypeArrays;
        slimTableFactory9.tableTypeArrays = strMap42;
        slimTableFactory3.tableTypeArrays = strMap42;
        java.lang.String str46 = slimTableFactory3.getFullTableName("");
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNull(wildcardClass22);
        org.junit.Assert.assertNotNull(slimTableFactory23);
        org.junit.Assert.assertNotNull(slimTableFactory25);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNull(wildcardClass34);
        org.junit.Assert.assertNotNull(slimTableFactory35);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(slimTableFactory39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(strMap42);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
    }

    @Test
    public void test03647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03647");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory5.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory5.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        boolean boolean11 = slimTableFactory9.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory9.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory9.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory13.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory15.copy();
        boolean boolean18 = slimTableFactory16.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap19 = slimTableFactory16.tableTypeArrays;
        slimTableFactory14.tableTypeArrays = strMap19;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = slimTableFactory21.copy();
        boolean boolean24 = slimTableFactory22.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap25 = slimTableFactory22.tableTypeArrays;
        java.lang.String str27 = slimTableFactory22.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory29 = slimTableFactory28.copy();
        boolean boolean31 = slimTableFactory29.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap32 = slimTableFactory29.tableTypeArrays;
        java.lang.String str34 = slimTableFactory29.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap35 = slimTableFactory29.tableTypeArrays;
        slimTableFactory22.tableTypeArrays = strMap35;
        java.util.Map<java.lang.String, java.lang.String> strMap37 = slimTableFactory22.tableTypeArrays;
        slimTableFactory14.tableTypeArrays = strMap37;
        slimTableFactory7.tableTypeArrays = strMap37;
        java.util.Map<java.lang.String, java.lang.String> strMap40 = slimTableFactory7.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap41 = slimTableFactory7.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory42 = slimTableFactory7.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap43 = slimTableFactory42.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap44 = slimTableFactory42.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap45 = slimTableFactory42.tableTypes;
        java.lang.Class<?> wildcardClass46 = strMap45.getClass();
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertNotNull(slimTableFactory13);
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(slimTableFactory22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(slimTableFactory29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertNotNull(slimTableFactory42);
        org.junit.Assert.assertNotNull(strMap43);
        org.junit.Assert.assertNotNull(strMap44);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test03648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03648");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory0.hasColon("hi!");
        java.lang.String str5 = slimTableFactory0.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.Table table7 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory6.parseDefineTableTypeRow(table7, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory6);
    }

    @Test
    public void test03649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03649");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory3.copy();
        java.lang.String str6 = slimTableFactory3.makeTableType("");
        java.lang.String str8 = slimTableFactory3.makeTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap9 = slimTableFactory3.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass12 = slimTableFactory10.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory10.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory14.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap16 = slimTableFactory15.tableTypes;
        boolean boolean18 = slimTableFactory15.hasColon("");
        boolean boolean20 = slimTableFactory15.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap21 = slimTableFactory15.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass24 = slimTableFactory22.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = slimTableFactory22.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap26 = slimTableFactory25.tableTypeArrays;
        slimTableFactory15.tableTypeArrays = strMap26;
        slimTableFactory10.tableTypeArrays = strMap26;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap29 = slimTableFactory10.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap30 = slimTableFactory10.tableTypeArrays;
        slimTableFactory3.tableTypeArrays = strMap30;
        java.util.Map<java.lang.String, java.lang.String> strMap32 = slimTableFactory3.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory33 = slimTableFactory3.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory34 = slimTableFactory33.copy();
        java.lang.Class<?> wildcardClass35 = slimTableFactory34.getClass();
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNotNull(slimTableFactory13);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNull(wildcardClass24);
        org.junit.Assert.assertNotNull(slimTableFactory25);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(slimTableFactory33);
        org.junit.Assert.assertNotNull(slimTableFactory34);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test03650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03650");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory5.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory5.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        boolean boolean11 = slimTableFactory9.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory9.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory9.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory13.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory15.copy();
        boolean boolean18 = slimTableFactory16.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap19 = slimTableFactory16.tableTypeArrays;
        slimTableFactory14.tableTypeArrays = strMap19;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = slimTableFactory21.copy();
        boolean boolean24 = slimTableFactory22.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap25 = slimTableFactory22.tableTypeArrays;
        java.lang.String str27 = slimTableFactory22.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory29 = slimTableFactory28.copy();
        boolean boolean31 = slimTableFactory29.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap32 = slimTableFactory29.tableTypeArrays;
        java.lang.String str34 = slimTableFactory29.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap35 = slimTableFactory29.tableTypeArrays;
        slimTableFactory22.tableTypeArrays = strMap35;
        java.util.Map<java.lang.String, java.lang.String> strMap37 = slimTableFactory22.tableTypeArrays;
        slimTableFactory14.tableTypeArrays = strMap37;
        slimTableFactory7.tableTypeArrays = strMap37;
        java.util.Map<java.lang.String, java.lang.String> strMap40 = slimTableFactory7.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap41 = slimTableFactory7.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory42 = slimTableFactory7.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory43 = slimTableFactory7.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap44 = slimTableFactory7.tableTypes;
        fitnesse.testsystems.slim.Table table45 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable46 = slimTableFactory7.parseDefineTableTypeTable(table45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertNotNull(slimTableFactory13);
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(slimTableFactory22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(slimTableFactory29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertNotNull(slimTableFactory42);
        org.junit.Assert.assertNotNull(slimTableFactory43);
        org.junit.Assert.assertNotNull(strMap44);
    }

    @Test
    public void test03651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03651");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap5 = slimTableFactory1.tableTypeArrays;
        java.lang.String str7 = slimTableFactory1.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory1.tableTypeArrays;
        java.lang.String str10 = slimTableFactory1.makeTableType("hi!");
        java.lang.String str12 = slimTableFactory1.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory13.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap15 = slimTableFactory14.tableTypes;
        boolean boolean17 = slimTableFactory14.hasColon("");
        boolean boolean19 = slimTableFactory14.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap20 = slimTableFactory14.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap21 = slimTableFactory14.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap21;
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(strMap21);
    }

    @Test
    public void test03652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03652");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory0.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass8 = slimTableFactory0.getTableType("hi!");
        fitnesse.testsystems.slim.Table table9 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable10 = slimTableFactory0.parseDefineTableTypeTable(table9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNull(wildcardClass8);
    }

    @Test
    public void test03653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03653");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory0.getTableType("hi!");
        java.lang.String str9 = slimTableFactory0.getFullTableName("");
        java.lang.String str11 = slimTableFactory0.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory0.copy();
        java.lang.String str14 = slimTableFactory12.getFullTableName("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass16 = slimTableFactory12.getTableType("");
        java.lang.String str18 = slimTableFactory12.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap19 = null;
        slimTableFactory12.tableTypeArrays = strMap19;
        java.lang.Class<?> wildcardClass21 = slimTableFactory12.getClass();
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertNull(wildcardClass16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test03654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03654");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        slimTableFactory0.tableTypeArrays = strMap2;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass5 = slimTableFactory0.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory6.copy();
        boolean boolean9 = slimTableFactory7.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory7.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory7.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory12.getTableType("");
        boolean boolean16 = slimTableFactory12.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap17 = slimTableFactory12.tableTypeArrays;
        slimTableFactory11.tableTypeArrays = strMap17;
        slimTableFactory0.tableTypeArrays = strMap17;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass22 = slimTableFactory20.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = slimTableFactory20.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = slimTableFactory23.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap25 = slimTableFactory23.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap25;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap27 = slimTableFactory0.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap28 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.Table table29 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory0.parseDefineTableTypeRow(table29, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNull(wildcardClass22);
        org.junit.Assert.assertNotNull(slimTableFactory23);
        org.junit.Assert.assertNotNull(slimTableFactory24);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(strMap28);
    }

    @Test
    public void test03655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03655");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory0.getTableType("hi!");
        java.lang.String str9 = slimTableFactory0.getFullTableName("");
        java.lang.String str11 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory12.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap14 = null;
        slimTableFactory12.tableTypeArrays = strMap14;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass17 = slimTableFactory12.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory18.copy();
        boolean boolean21 = slimTableFactory19.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = slimTableFactory19.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = slimTableFactory19.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass26 = slimTableFactory24.getTableType("");
        boolean boolean28 = slimTableFactory24.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap29 = slimTableFactory24.tableTypeArrays;
        slimTableFactory23.tableTypeArrays = strMap29;
        slimTableFactory12.tableTypeArrays = strMap29;
        boolean boolean33 = slimTableFactory12.hasColon("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass35 = slimTableFactory12.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory36 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory37 = slimTableFactory36.copy();
        boolean boolean39 = slimTableFactory37.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory40 = slimTableFactory37.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory41 = slimTableFactory37.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory42 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass44 = slimTableFactory42.getTableType("");
        boolean boolean46 = slimTableFactory42.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap47 = slimTableFactory42.tableTypeArrays;
        slimTableFactory41.tableTypeArrays = strMap47;
        slimTableFactory12.tableTypeArrays = strMap47;
        slimTableFactory0.tableTypeArrays = strMap47;
        java.util.Map<java.lang.String, java.lang.String> strMap51 = null;
        slimTableFactory0.tableTypeArrays = strMap51;
        fitnesse.testsystems.slim.Table table53 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext55 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable56 = slimTableFactory0.makeSlimTable(table53, "hi!", slimTestContext55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(slimTableFactory13);
        org.junit.Assert.assertNull(wildcardClass17);
        org.junit.Assert.assertNotNull(slimTableFactory19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(slimTableFactory22);
        org.junit.Assert.assertNotNull(slimTableFactory23);
        org.junit.Assert.assertNull(wildcardClass26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(wildcardClass35);
        org.junit.Assert.assertNotNull(slimTableFactory37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(slimTableFactory40);
        org.junit.Assert.assertNotNull(slimTableFactory41);
        org.junit.Assert.assertNull(wildcardClass44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(strMap47);
    }

    @Test
    public void test03656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03656");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory8.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap10;
        java.lang.String str13 = slimTableFactory1.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory1.tableTypeArrays;
        java.lang.String str16 = slimTableFactory1.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap17 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.Table table18 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext20 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable21 = slimTableFactory1.makeSlimTable(table18, "hi!", slimTestContext20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(strMap17);
    }

    @Test
    public void test03657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03657");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass5 = slimTableFactory3.getTableType("");
        boolean boolean7 = slimTableFactory3.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory3.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap8;
        java.lang.String str11 = slimTableFactory1.makeTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass13 = slimTableFactory1.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory1.copy();
        java.lang.String str16 = slimTableFactory1.getFullTableName("");
        java.lang.String str18 = slimTableFactory1.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap19 = slimTableFactory1.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass21 = slimTableFactory1.getTableType("");
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNull(wildcardClass21);
    }

    @Test
    public void test03658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03658");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        slimTableFactory0.tableTypeArrays = strMap2;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass5 = slimTableFactory0.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory0.tableTypeArrays;
        java.lang.String str9 = slimTableFactory0.makeTableType("hi!");
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertNull(strMap6);
        org.junit.Assert.assertNull(strMap7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
    }

    @Test
    public void test03659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03659");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory0.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap10 = slimTableFactory9.tableTypes;
        boolean boolean12 = slimTableFactory9.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap13 = slimTableFactory9.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory9.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory15.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap17 = slimTableFactory16.tableTypes;
        boolean boolean19 = slimTableFactory16.hasColon("");
        boolean boolean21 = slimTableFactory16.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap22 = slimTableFactory16.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass25 = slimTableFactory23.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = slimTableFactory23.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap27 = slimTableFactory26.tableTypeArrays;
        slimTableFactory16.tableTypeArrays = strMap27;
        slimTableFactory9.tableTypeArrays = strMap27;
        slimTableFactory0.tableTypeArrays = strMap27;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory31 = slimTableFactory0.copy();
        java.lang.String str33 = slimTableFactory31.makeTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass35 = slimTableFactory31.getTableType("");
        java.lang.Class<?> wildcardClass36 = slimTableFactory31.getClass();
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNull(wildcardClass25);
        org.junit.Assert.assertNotNull(slimTableFactory26);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(slimTableFactory31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertNull(wildcardClass35);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test03660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03660");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory3.tableTypeArrays;
        java.lang.String str6 = slimTableFactory3.makeTableType("hi!");
        boolean boolean8 = slimTableFactory3.hasColon("hi!");
        java.lang.String str10 = slimTableFactory3.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap11 = slimTableFactory3.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory3.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap13 = null;
        slimTableFactory12.tableTypeArrays = strMap13;
        java.util.Map<java.lang.String, java.lang.String> strMap15 = slimTableFactory12.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass17 = slimTableFactory12.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap18 = slimTableFactory12.tableTypeArrays;
        fitnesse.testsystems.slim.Table table19 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable20 = slimTableFactory12.parseDefineTableTypeTable(table19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertNull(strMap15);
        org.junit.Assert.assertNull(wildcardClass17);
        org.junit.Assert.assertNull(strMap18);
    }

    @Test
    public void test03661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03661");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory6.copy();
        java.lang.Class<?> wildcardClass8 = slimTableFactory7.getClass();
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test03662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03662");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        java.lang.String str5 = slimTableFactory1.makeTableType("");
        boolean boolean7 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory1.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap9 = slimTableFactory1.tableTypes;
        java.lang.Class<?> wildcardClass10 = slimTableFactory1.getClass();
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test03663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03663");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass5 = slimTableFactory0.getTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        boolean boolean11 = slimTableFactory9.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory9.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory9.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory13.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory15.copy();
        boolean boolean18 = slimTableFactory16.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap19 = slimTableFactory16.tableTypeArrays;
        slimTableFactory14.tableTypeArrays = strMap19;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = slimTableFactory21.copy();
        boolean boolean24 = slimTableFactory22.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap25 = slimTableFactory22.tableTypeArrays;
        java.lang.String str27 = slimTableFactory22.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory29 = slimTableFactory28.copy();
        boolean boolean31 = slimTableFactory29.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap32 = slimTableFactory29.tableTypeArrays;
        java.lang.String str34 = slimTableFactory29.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap35 = slimTableFactory29.tableTypeArrays;
        slimTableFactory22.tableTypeArrays = strMap35;
        java.util.Map<java.lang.String, java.lang.String> strMap37 = slimTableFactory22.tableTypeArrays;
        slimTableFactory14.tableTypeArrays = strMap37;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory39 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass41 = slimTableFactory39.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap42 = slimTableFactory39.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory43 = slimTableFactory39.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap44 = slimTableFactory39.tableTypeArrays;
        slimTableFactory14.tableTypeArrays = strMap44;
        slimTableFactory0.tableTypeArrays = strMap44;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory47 = slimTableFactory0.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass49 = slimTableFactory0.getTableType("hi!");
        fitnesse.testsystems.slim.Table table50 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory0.parseDefineTableTypeRow(table50, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertNotNull(slimTableFactory13);
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(slimTableFactory22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(slimTableFactory29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNull(wildcardClass41);
        org.junit.Assert.assertNotNull(strMap42);
        org.junit.Assert.assertNotNull(slimTableFactory43);
        org.junit.Assert.assertNotNull(strMap44);
        org.junit.Assert.assertNotNull(slimTableFactory47);
        org.junit.Assert.assertNull(wildcardClass49);
    }

    @Test
    public void test03664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03664");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        boolean boolean6 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass10 = slimTableFactory8.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory8.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap12 = slimTableFactory11.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap12;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory1.copy();
        boolean boolean16 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap17 = slimTableFactory1.tableTypes;
        java.lang.String str19 = slimTableFactory1.getFullTableName("hi!");
        fitnesse.testsystems.slim.Table table20 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory1.parseDefineTableTypeRow(table20, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
    }

    @Test
    public void test03665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03665");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory0.getTableType("hi!");
        java.lang.String str9 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass12 = slimTableFactory10.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory10.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory14.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap16 = slimTableFactory15.tableTypes;
        boolean boolean18 = slimTableFactory15.hasColon("");
        boolean boolean20 = slimTableFactory15.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap21 = slimTableFactory15.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass24 = slimTableFactory22.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = slimTableFactory22.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap26 = slimTableFactory25.tableTypeArrays;
        slimTableFactory15.tableTypeArrays = strMap26;
        slimTableFactory10.tableTypeArrays = strMap26;
        slimTableFactory0.tableTypeArrays = strMap26;
        java.lang.String str31 = slimTableFactory0.makeTableType("");
        java.lang.String str33 = slimTableFactory0.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap34 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.Table table35 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable36 = slimTableFactory0.parseDefineTableTypeTable(table35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNotNull(slimTableFactory13);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNull(wildcardClass24);
        org.junit.Assert.assertNotNull(slimTableFactory25);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(strMap34);
    }

    @Test
    public void test03666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03666");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory4.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap6 = slimTableFactory5.tableTypes;
        boolean boolean8 = slimTableFactory5.hasColon("");
        boolean boolean10 = slimTableFactory5.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap11 = slimTableFactory5.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory12.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory12.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory15.tableTypeArrays;
        slimTableFactory5.tableTypeArrays = strMap16;
        slimTableFactory0.tableTypeArrays = strMap16;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory0.copy();
        java.lang.String str21 = slimTableFactory19.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap22 = slimTableFactory19.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap23 = slimTableFactory19.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = slimTableFactory19.copy();
        java.lang.String str26 = slimTableFactory19.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass29 = slimTableFactory27.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap30 = slimTableFactory27.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory31 = slimTableFactory27.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap32 = slimTableFactory27.tableTypeArrays;
        boolean boolean34 = slimTableFactory27.hasColon("");
        java.lang.String str36 = slimTableFactory27.makeTableType("");
        java.lang.String str38 = slimTableFactory27.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory39 = slimTableFactory27.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory40 = slimTableFactory27.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap41 = slimTableFactory27.tableTypeArrays;
        slimTableFactory19.tableTypeArrays = strMap41;
        java.lang.Class<?> wildcardClass43 = slimTableFactory19.getClass();
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(slimTableFactory19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(slimTableFactory24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
        org.junit.Assert.assertNull(wildcardClass29);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(slimTableFactory31);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(slimTableFactory39);
        org.junit.Assert.assertNotNull(slimTableFactory40);
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test03667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03667");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory0.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap10 = slimTableFactory9.tableTypes;
        boolean boolean12 = slimTableFactory9.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap13 = slimTableFactory9.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory9.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory15.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap17 = slimTableFactory16.tableTypes;
        boolean boolean19 = slimTableFactory16.hasColon("");
        boolean boolean21 = slimTableFactory16.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap22 = slimTableFactory16.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass25 = slimTableFactory23.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = slimTableFactory23.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap27 = slimTableFactory26.tableTypeArrays;
        slimTableFactory16.tableTypeArrays = strMap27;
        slimTableFactory9.tableTypeArrays = strMap27;
        slimTableFactory0.tableTypeArrays = strMap27;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory31 = slimTableFactory0.copy();
        java.lang.String str33 = slimTableFactory31.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory34 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory35 = slimTableFactory34.copy();
        boolean boolean37 = slimTableFactory35.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory38 = slimTableFactory35.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory39 = slimTableFactory35.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory40 = slimTableFactory35.copy();
        boolean boolean42 = slimTableFactory40.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory43 = slimTableFactory40.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap44 = slimTableFactory43.tableTypeArrays;
        slimTableFactory31.tableTypeArrays = strMap44;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass47 = slimTableFactory31.getTableType("hi!");
        java.lang.String str49 = slimTableFactory31.makeTableType("hi!");
        boolean boolean51 = slimTableFactory31.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory52 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory53 = slimTableFactory52.copy();
        boolean boolean55 = slimTableFactory53.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory56 = slimTableFactory53.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory57 = slimTableFactory53.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory58 = slimTableFactory53.copy();
        boolean boolean60 = slimTableFactory58.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap61 = slimTableFactory58.tableTypes;
        java.lang.String str63 = slimTableFactory58.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap64 = slimTableFactory58.tableTypeArrays;
        slimTableFactory31.tableTypeArrays = strMap64;
        java.lang.String str67 = slimTableFactory31.makeTableType("hi!");
        java.lang.String str69 = slimTableFactory31.getFullTableName("");
        boolean boolean71 = slimTableFactory31.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory72 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass74 = slimTableFactory72.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap75 = slimTableFactory72.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory76 = slimTableFactory72.copy();
        boolean boolean78 = slimTableFactory76.hasColon("");
        java.lang.String str80 = slimTableFactory76.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap81 = slimTableFactory76.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory82 = slimTableFactory76.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory83 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory84 = slimTableFactory83.copy();
        boolean boolean86 = slimTableFactory84.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory87 = slimTableFactory84.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory88 = slimTableFactory84.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory89 = slimTableFactory84.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap90 = slimTableFactory84.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory91 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory92 = slimTableFactory91.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap93 = slimTableFactory91.tableTypeArrays;
        slimTableFactory84.tableTypeArrays = strMap93;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap95 = slimTableFactory84.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap96 = slimTableFactory84.tableTypeArrays;
        slimTableFactory76.tableTypeArrays = strMap96;
        slimTableFactory31.tableTypeArrays = strMap96;
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNull(wildcardClass25);
        org.junit.Assert.assertNotNull(slimTableFactory26);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(slimTableFactory31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(slimTableFactory38);
        org.junit.Assert.assertNotNull(slimTableFactory39);
        org.junit.Assert.assertNotNull(slimTableFactory40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(slimTableFactory43);
        org.junit.Assert.assertNotNull(strMap44);
        org.junit.Assert.assertNull(wildcardClass47);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hi!" + "'", str49, "hi!");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(slimTableFactory53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(slimTableFactory56);
        org.junit.Assert.assertNotNull(slimTableFactory57);
        org.junit.Assert.assertNotNull(slimTableFactory58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(strMap61);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "hi!" + "'", str63, "hi!");
        org.junit.Assert.assertNotNull(strMap64);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "hi!" + "'", str67, "hi!");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(wildcardClass74);
        org.junit.Assert.assertNotNull(strMap75);
        org.junit.Assert.assertNotNull(slimTableFactory76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertNotNull(strMap81);
        org.junit.Assert.assertNotNull(slimTableFactory82);
        org.junit.Assert.assertNotNull(slimTableFactory84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(slimTableFactory87);
        org.junit.Assert.assertNotNull(slimTableFactory88);
        org.junit.Assert.assertNotNull(slimTableFactory89);
        org.junit.Assert.assertNotNull(strMap90);
        org.junit.Assert.assertNotNull(slimTableFactory92);
        org.junit.Assert.assertNotNull(strMap93);
        org.junit.Assert.assertNotNull(strMap95);
        org.junit.Assert.assertNotNull(strMap96);
    }

    @Test
    public void test03668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03668");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        boolean boolean6 = slimTableFactory1.hasColon("hi!");
        boolean boolean8 = slimTableFactory1.hasColon("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass10 = slimTableFactory1.getTableType("hi!");
        java.lang.String str12 = slimTableFactory1.getFullTableName("");
        boolean boolean14 = slimTableFactory1.hasColon("hi!");
        java.lang.String str16 = slimTableFactory1.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory17.copy();
        boolean boolean20 = slimTableFactory18.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = slimTableFactory18.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap22 = slimTableFactory18.tableTypeArrays;
        boolean boolean24 = slimTableFactory18.hasColon("hi!");
        java.lang.String str26 = slimTableFactory18.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap27 = slimTableFactory18.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap27;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory29 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.Table table30 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable31 = slimTableFactory1.parseDefineTableTypeTable(table30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(slimTableFactory18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(slimTableFactory21);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(slimTableFactory29);
    }

    @Test
    public void test03669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03669");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        slimTableFactory0.tableTypeArrays = strMap2;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass5 = slimTableFactory0.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory6.copy();
        boolean boolean9 = slimTableFactory7.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory7.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory7.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory12.getTableType("");
        boolean boolean16 = slimTableFactory12.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap17 = slimTableFactory12.tableTypeArrays;
        slimTableFactory11.tableTypeArrays = strMap17;
        slimTableFactory0.tableTypeArrays = strMap17;
        boolean boolean21 = slimTableFactory0.hasColon("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass23 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap24 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap26 = slimTableFactory0.tableTypeArrays;
        java.lang.Class<?> wildcardClass27 = strMap26.getClass();
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(wildcardClass23);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNotNull(slimTableFactory25);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test03670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03670");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap5 = slimTableFactory1.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap8 = slimTableFactory7.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap9 = slimTableFactory7.tableTypeArrays;
        fitnesse.testsystems.slim.Table table10 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory7.parseDefineTableTypeRow(table10, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strMap9);
    }

    @Test
    public void test03671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03671");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory3.copy();
        java.lang.String str6 = slimTableFactory3.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory7.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap9 = null;
        slimTableFactory7.tableTypeArrays = strMap9;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass12 = slimTableFactory7.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory13.copy();
        boolean boolean16 = slimTableFactory14.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = slimTableFactory14.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory14.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass21 = slimTableFactory19.getTableType("");
        boolean boolean23 = slimTableFactory19.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap24 = slimTableFactory19.tableTypeArrays;
        slimTableFactory18.tableTypeArrays = strMap24;
        slimTableFactory7.tableTypeArrays = strMap24;
        slimTableFactory3.tableTypeArrays = strMap24;
        java.lang.String str29 = slimTableFactory3.makeTableType("hi!");
        java.lang.String str31 = slimTableFactory3.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory32 = slimTableFactory3.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = slimTableFactory32.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap34 = slimTableFactory32.tableTypeArrays;
        java.lang.Class<?> wildcardClass35 = strMap34.getClass();
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(slimTableFactory17);
        org.junit.Assert.assertNotNull(slimTableFactory18);
        org.junit.Assert.assertNull(wildcardClass21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test03672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03672");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass4 = slimTableFactory1.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap5 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory6.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass10 = slimTableFactory8.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory8.copy();
        boolean boolean13 = slimTableFactory8.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass15 = slimTableFactory8.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory8.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap17 = slimTableFactory8.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory8.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass21 = slimTableFactory19.getTableType("");
        boolean boolean23 = slimTableFactory19.hasColon("");
        java.lang.String str25 = slimTableFactory19.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap26 = slimTableFactory19.tableTypeArrays;
        slimTableFactory8.tableTypeArrays = strMap26;
        slimTableFactory7.tableTypeArrays = strMap26;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap29 = slimTableFactory7.tableTypes;
        java.lang.String str31 = slimTableFactory7.getFullTableName("hi!");
        fitnesse.testsystems.slim.Table table32 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory7.parseDefineTableTypeRow(table32, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(slimTableFactory18);
        org.junit.Assert.assertNull(wildcardClass21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
    }

    @Test
    public void test03673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03673");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.lang.String str3 = slimTableFactory0.getFullTableName("hi!");
        java.lang.String str5 = slimTableFactory0.makeTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory0.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap8 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass11 = slimTableFactory9.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory9.copy();
        boolean boolean14 = slimTableFactory9.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass16 = slimTableFactory9.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory17.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap19 = slimTableFactory18.tableTypes;
        boolean boolean21 = slimTableFactory18.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap22 = slimTableFactory18.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap23 = slimTableFactory18.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = slimTableFactory24.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap26 = slimTableFactory25.tableTypes;
        boolean boolean28 = slimTableFactory25.hasColon("");
        boolean boolean30 = slimTableFactory25.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap31 = slimTableFactory25.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory32 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass34 = slimTableFactory32.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory35 = slimTableFactory32.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap36 = slimTableFactory35.tableTypeArrays;
        slimTableFactory25.tableTypeArrays = strMap36;
        slimTableFactory18.tableTypeArrays = strMap36;
        slimTableFactory9.tableTypeArrays = strMap36;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory40 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass42 = slimTableFactory40.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap43 = slimTableFactory40.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory44 = slimTableFactory40.copy();
        boolean boolean46 = slimTableFactory44.hasColon("");
        java.lang.String str48 = slimTableFactory44.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap49 = slimTableFactory44.tableTypeArrays;
        slimTableFactory9.tableTypeArrays = strMap49;
        slimTableFactory0.tableTypeArrays = strMap49;
        java.lang.Class<?> wildcardClass52 = slimTableFactory0.getClass();
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!" + "'", str3, "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(wildcardClass16);
        org.junit.Assert.assertNotNull(slimTableFactory18);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(slimTableFactory25);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNull(wildcardClass34);
        org.junit.Assert.assertNotNull(slimTableFactory35);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNull(wildcardClass42);
        org.junit.Assert.assertNotNull(strMap43);
        org.junit.Assert.assertNotNull(slimTableFactory44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(strMap49);
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test03674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03674");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass5 = slimTableFactory3.getTableType("");
        boolean boolean7 = slimTableFactory3.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory3.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap8;
        java.lang.String str11 = slimTableFactory1.makeTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass13 = slimTableFactory1.getTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap14 = slimTableFactory1.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass16 = slimTableFactory1.getTableType("hi!");
        java.lang.String str18 = slimTableFactory1.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.Table table20 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable21 = slimTableFactory1.parseDefineTableTypeTable(table20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNull(wildcardClass16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory19);
    }

    @Test
    public void test03675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03675");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        boolean boolean5 = slimTableFactory0.hasColon("");
        java.lang.String str7 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory0.copy();
        boolean boolean11 = slimTableFactory0.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap12 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.Table table15 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory0.parseDefineTableTypeRow(table15, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(slimTableFactory13);
        org.junit.Assert.assertNotNull(slimTableFactory14);
    }

    @Test
    public void test03676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03676");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory7.copy();
        boolean boolean10 = slimTableFactory8.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory8.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory8.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory12.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass16 = slimTableFactory14.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = slimTableFactory14.copy();
        boolean boolean19 = slimTableFactory14.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap20 = slimTableFactory14.tableTypeArrays;
        slimTableFactory12.tableTypeArrays = strMap20;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap22 = slimTableFactory12.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = slimTableFactory12.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap24 = slimTableFactory23.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap24;
        java.lang.String str27 = slimTableFactory1.getFullTableName("hi!");
        fitnesse.testsystems.slim.Table table28 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext30 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable31 = slimTableFactory1.makeSlimTable(table28, "", slimTestContext30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertNotNull(slimTableFactory13);
        org.junit.Assert.assertNull(wildcardClass16);
        org.junit.Assert.assertNotNull(slimTableFactory17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(slimTableFactory23);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
    }

    @Test
    public void test03677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03677");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap5 = slimTableFactory1.tableTypes;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap6 = slimTableFactory1.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory1.copy();
        boolean boolean10 = slimTableFactory1.hasColon("");
        java.lang.String str12 = slimTableFactory1.getFullTableName("");
        boolean boolean14 = slimTableFactory1.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap15 = slimTableFactory1.tableTypeArrays;
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strMap15);
    }

    @Test
    public void test03678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03678");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap5 = slimTableFactory1.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory9.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap11 = slimTableFactory10.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory12.getTableType("");
        boolean boolean16 = slimTableFactory12.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap17 = slimTableFactory12.tableTypeArrays;
        slimTableFactory10.tableTypeArrays = strMap17;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory19.copy();
        boolean boolean22 = slimTableFactory20.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = slimTableFactory20.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = slimTableFactory20.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = slimTableFactory24.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass28 = slimTableFactory26.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory29 = slimTableFactory26.copy();
        boolean boolean31 = slimTableFactory26.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap32 = slimTableFactory26.tableTypeArrays;
        slimTableFactory24.tableTypeArrays = strMap32;
        java.util.Map<java.lang.String, java.lang.String> strMap34 = slimTableFactory24.tableTypeArrays;
        slimTableFactory10.tableTypeArrays = strMap34;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory36 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory37 = slimTableFactory36.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap38 = slimTableFactory37.tableTypes;
        boolean boolean40 = slimTableFactory37.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap41 = slimTableFactory37.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap42 = slimTableFactory37.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory43 = slimTableFactory37.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap44 = slimTableFactory37.tableTypeArrays;
        slimTableFactory10.tableTypeArrays = strMap44;
        slimTableFactory1.tableTypeArrays = strMap44;
        java.lang.String str48 = slimTableFactory1.makeTableType("");
        java.lang.Class<?> wildcardClass49 = slimTableFactory1.getClass();
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(slimTableFactory20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(slimTableFactory23);
        org.junit.Assert.assertNotNull(slimTableFactory24);
        org.junit.Assert.assertNotNull(slimTableFactory25);
        org.junit.Assert.assertNull(wildcardClass28);
        org.junit.Assert.assertNotNull(slimTableFactory29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNotNull(slimTableFactory37);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertNotNull(strMap42);
        org.junit.Assert.assertNotNull(slimTableFactory43);
        org.junit.Assert.assertNotNull(strMap44);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test03679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03679");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory1.tableTypeArrays;
        java.lang.String str6 = slimTableFactory1.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory1.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass10 = slimTableFactory1.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory1.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap12 = slimTableFactory1.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap13 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass16 = slimTableFactory14.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = slimTableFactory14.copy();
        boolean boolean19 = slimTableFactory14.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass21 = slimTableFactory14.getTableType("hi!");
        java.lang.String str23 = slimTableFactory14.getFullTableName("");
        java.lang.String str25 = slimTableFactory14.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap26 = slimTableFactory14.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap26;
        boolean boolean29 = slimTableFactory1.hasColon("hi!");
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNull(wildcardClass16);
        org.junit.Assert.assertNotNull(slimTableFactory17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(wildcardClass21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test03680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03680");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        boolean boolean5 = slimTableFactory0.hasColon("");
        boolean boolean7 = slimTableFactory0.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        boolean boolean11 = slimTableFactory9.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory9.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory9.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory13.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap14;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap16 = slimTableFactory0.tableTypes;
        java.lang.String str18 = slimTableFactory0.getFullTableName("");
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertNotNull(slimTableFactory13);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
    }

    @Test
    public void test03681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03681");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.lang.String str3 = slimTableFactory0.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory4.copy();
        boolean boolean7 = slimTableFactory5.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory5.copy();
        boolean boolean10 = slimTableFactory5.hasColon("hi!");
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!" + "'", str3, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test03682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03682");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory1.tableTypeArrays;
        java.lang.String str6 = slimTableFactory1.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory7.copy();
        boolean boolean10 = slimTableFactory8.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory8.tableTypeArrays;
        java.lang.String str13 = slimTableFactory8.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory8.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap14;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory18.copy();
        boolean boolean21 = slimTableFactory19.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap22 = slimTableFactory19.tableTypeArrays;
        slimTableFactory17.tableTypeArrays = strMap22;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass25 = slimTableFactory17.getTableType("");
        java.lang.String str27 = slimTableFactory17.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = slimTableFactory17.copy();
        java.lang.String str30 = slimTableFactory17.getFullTableName("");
        fitnesse.testsystems.slim.Table table31 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext33 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable34 = slimTableFactory17.makeSlimTable(table31, "hi!", slimTestContext33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertNotNull(slimTableFactory17);
        org.junit.Assert.assertNotNull(slimTableFactory19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNull(wildcardClass25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(slimTableFactory28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
    }

    @Test
    public void test03683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03683");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory3.tableTypeArrays;
        java.lang.String str6 = slimTableFactory3.makeTableType("hi!");
        java.lang.String str8 = slimTableFactory3.makeTableType("hi!");
        java.lang.String str10 = slimTableFactory3.makeTableType("");
        fitnesse.testsystems.slim.Table table11 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory3.parseDefineTableTypeRow(table11, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test03684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03684");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory0.getTableType("hi!");
        java.lang.String str9 = slimTableFactory0.getFullTableName("");
        java.lang.String str11 = slimTableFactory0.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory0.copy();
        java.lang.String str14 = slimTableFactory12.getFullTableName("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass16 = slimTableFactory12.getTableType("");
        java.lang.String str18 = slimTableFactory12.makeTableType("");
        java.lang.String str20 = slimTableFactory12.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = slimTableFactory12.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass23 = slimTableFactory21.getTableType("hi!");
        fitnesse.testsystems.slim.Table table24 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory21.parseDefineTableTypeRow(table24, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertNull(wildcardClass16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory21);
        org.junit.Assert.assertNull(wildcardClass23);
    }

    @Test
    public void test03685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03685");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory3.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap5 = slimTableFactory3.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap6 = slimTableFactory3.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass8 = slimTableFactory3.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory3.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory3.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass12 = slimTableFactory3.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory3.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory13.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap15 = slimTableFactory13.tableTypes;
        fitnesse.testsystems.slim.Table table16 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext18 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable19 = slimTableFactory13.makeSlimTable(table16, "hi!", slimTestContext18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNotNull(slimTableFactory13);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(strMap15);
    }

    @Test
    public void test03686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03686");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory3.tableTypeArrays;
        java.lang.String str6 = slimTableFactory3.makeTableType("");
        java.lang.String str8 = slimTableFactory3.getFullTableName("");
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }

    @Test
    public void test03687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03687");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory0.getTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass9 = slimTableFactory0.getTableType("");
        java.lang.Class<?> wildcardClass10 = slimTableFactory0.getClass();
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test03688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03688");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap5 = slimTableFactory1.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory1.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory1.copy();
        java.lang.Class<?> wildcardClass10 = slimTableFactory1.getClass();
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test03689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03689");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory1.copy();
        boolean boolean8 = slimTableFactory1.hasColon("");
        boolean boolean10 = slimTableFactory1.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory11.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap13 = slimTableFactory12.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass16 = slimTableFactory14.getTableType("");
        boolean boolean18 = slimTableFactory14.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap19 = slimTableFactory14.tableTypeArrays;
        slimTableFactory12.tableTypeArrays = strMap19;
        slimTableFactory1.tableTypeArrays = strMap19;
        fitnesse.testsystems.slim.Table table22 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory1.parseDefineTableTypeRow(table22, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNull(wildcardClass16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strMap19);
    }

    @Test
    public void test03690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03690");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory0.copy();
        boolean boolean9 = slimTableFactory0.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap10 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.Table table11 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext13 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable14 = slimTableFactory0.makeSlimTable(table11, "", slimTestContext13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strMap10);
    }

    @Test
    public void test03691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03691");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory1.tableTypeArrays;
        java.lang.String str6 = slimTableFactory1.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory7.copy();
        boolean boolean10 = slimTableFactory8.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory8.tableTypeArrays;
        java.lang.String str13 = slimTableFactory8.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory8.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap14;
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory1.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap17 = slimTableFactory1.tableTypes;
        java.lang.String str19 = slimTableFactory1.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = slimTableFactory21.copy();
        boolean boolean24 = slimTableFactory22.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = slimTableFactory22.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap26 = slimTableFactory22.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = slimTableFactory22.copy();
        boolean boolean29 = slimTableFactory27.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap30 = slimTableFactory27.tableTypeArrays;
        slimTableFactory20.tableTypeArrays = strMap30;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap32 = slimTableFactory20.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap33 = slimTableFactory20.tableTypeArrays;
        java.lang.Class<?> wildcardClass34 = strMap33.getClass();
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory20);
        org.junit.Assert.assertNotNull(slimTableFactory22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(slimTableFactory25);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(slimTableFactory27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test03692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03692");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory0.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap9 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory11.copy();
        boolean boolean14 = slimTableFactory12.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory12.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory12.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass18 = slimTableFactory12.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap19 = slimTableFactory12.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap19;
        java.lang.String str22 = slimTableFactory0.makeTableType("hi!");
        java.lang.String str24 = slimTableFactory0.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap25 = slimTableFactory0.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass27 = slimTableFactory0.getTableType("");
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNull(wildcardClass27);
    }

    @Test
    public void test03693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03693");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory3.copy();
        java.lang.String str6 = slimTableFactory3.makeTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory3.tableTypes;
        fitnesse.testsystems.slim.Table table8 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext10 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable11 = slimTableFactory3.makeSlimTable(table8, "hi!", slimTestContext10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(strMap7);
    }

    @Test
    public void test03694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03694");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        boolean boolean4 = slimTableFactory0.hasColon("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass6 = slimTableFactory0.getTableType("");
        java.lang.String str8 = slimTableFactory0.getFullTableName("hi!");
        java.lang.String str10 = slimTableFactory0.getFullTableName("");
        boolean boolean12 = slimTableFactory0.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory13.tableTypeArrays;
        boolean boolean16 = slimTableFactory13.hasColon("");
        java.lang.String str18 = slimTableFactory13.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap19 = slimTableFactory13.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = slimTableFactory20.copy();
        boolean boolean23 = slimTableFactory21.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = slimTableFactory21.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = slimTableFactory21.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = slimTableFactory25.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass29 = slimTableFactory27.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory30 = slimTableFactory27.copy();
        boolean boolean32 = slimTableFactory27.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap33 = slimTableFactory27.tableTypeArrays;
        slimTableFactory25.tableTypeArrays = strMap33;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap35 = slimTableFactory25.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory36 = slimTableFactory25.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap37 = slimTableFactory36.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap38 = slimTableFactory36.tableTypeArrays;
        slimTableFactory13.tableTypeArrays = strMap38;
        boolean boolean41 = slimTableFactory13.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap42 = slimTableFactory13.tableTypeArrays;
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(slimTableFactory13);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(slimTableFactory21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(slimTableFactory24);
        org.junit.Assert.assertNotNull(slimTableFactory25);
        org.junit.Assert.assertNotNull(slimTableFactory26);
        org.junit.Assert.assertNull(wildcardClass29);
        org.junit.Assert.assertNotNull(slimTableFactory30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(slimTableFactory36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(strMap42);
    }

    @Test
    public void test03695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03695");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass5 = slimTableFactory0.getTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory0.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap9 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.Table table10 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable11 = slimTableFactory0.parseDefineTableTypeTable(table10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(strMap9);
    }

    @Test
    public void test03696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03696");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass3 = slimTableFactory1.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        boolean boolean6 = slimTableFactory1.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory1.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap7;
        boolean boolean10 = slimTableFactory0.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap11 = slimTableFactory0.tableTypes;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap12 = slimTableFactory0.tableTypes;
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(strMap12);
    }

    @Test
    public void test03697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03697");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        boolean boolean4 = slimTableFactory0.hasColon("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass6 = slimTableFactory0.getTableType("hi!");
        java.lang.String str8 = slimTableFactory0.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory0.copy();
        java.lang.Class<?> wildcardClass10 = slimTableFactory9.getClass();
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test03698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03698");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        slimTableFactory0.tableTypeArrays = strMap2;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass5 = slimTableFactory0.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory6.copy();
        boolean boolean9 = slimTableFactory7.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory7.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory7.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory12.getTableType("");
        boolean boolean16 = slimTableFactory12.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap17 = slimTableFactory12.tableTypeArrays;
        slimTableFactory11.tableTypeArrays = strMap17;
        slimTableFactory0.tableTypeArrays = strMap17;
        boolean boolean21 = slimTableFactory0.hasColon("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass23 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap24 = slimTableFactory0.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass26 = slimTableFactory0.getTableType("hi!");
        java.lang.String str28 = slimTableFactory0.makeTableType("");
        boolean boolean30 = slimTableFactory0.hasColon("hi!");
        boolean boolean32 = slimTableFactory0.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap33 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.Table table34 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory0.parseDefineTableTypeRow(table34, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(wildcardClass23);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNull(wildcardClass26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strMap33);
    }

    @Test
    public void test03699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03699");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap5 = slimTableFactory1.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory7.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap9 = slimTableFactory8.tableTypes;
        boolean boolean11 = slimTableFactory8.hasColon("");
        boolean boolean13 = slimTableFactory8.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap14 = slimTableFactory8.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass17 = slimTableFactory15.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory15.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap19 = slimTableFactory18.tableTypeArrays;
        slimTableFactory8.tableTypeArrays = strMap19;
        slimTableFactory1.tableTypeArrays = strMap19;
        java.util.Map<java.lang.String, java.lang.String> strMap22 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = slimTableFactory23.copy();
        boolean boolean26 = slimTableFactory24.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = slimTableFactory24.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = slimTableFactory24.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass30 = slimTableFactory28.getTableType("hi!");
        java.lang.String str32 = slimTableFactory28.makeTableType("hi!");
        java.lang.String str34 = slimTableFactory28.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap35 = slimTableFactory28.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap35;
        java.lang.Class<?> wildcardClass37 = slimTableFactory1.getClass();
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNull(wildcardClass17);
        org.junit.Assert.assertNotNull(slimTableFactory18);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(slimTableFactory24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(slimTableFactory27);
        org.junit.Assert.assertNotNull(slimTableFactory28);
        org.junit.Assert.assertNull(wildcardClass30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test03700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03700");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory5.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass9 = slimTableFactory7.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory7.copy();
        boolean boolean12 = slimTableFactory7.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap13 = slimTableFactory7.tableTypeArrays;
        slimTableFactory5.tableTypeArrays = strMap13;
        java.util.Map<java.lang.String, java.lang.String> strMap15 = slimTableFactory5.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory5.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass18 = slimTableFactory16.getTableType("");
        java.lang.String str20 = slimTableFactory16.getFullTableName("hi!");
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
    }

    @Test
    public void test03701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03701");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory4.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap6 = slimTableFactory5.tableTypes;
        boolean boolean8 = slimTableFactory5.hasColon("");
        boolean boolean10 = slimTableFactory5.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap11 = slimTableFactory5.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory12.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory12.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory15.tableTypeArrays;
        slimTableFactory5.tableTypeArrays = strMap16;
        slimTableFactory0.tableTypeArrays = strMap16;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = slimTableFactory20.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap22 = null;
        slimTableFactory20.tableTypeArrays = strMap22;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass25 = slimTableFactory20.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = slimTableFactory26.copy();
        boolean boolean29 = slimTableFactory27.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory30 = slimTableFactory27.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory31 = slimTableFactory27.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory32 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass34 = slimTableFactory32.getTableType("");
        boolean boolean36 = slimTableFactory32.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap37 = slimTableFactory32.tableTypeArrays;
        slimTableFactory31.tableTypeArrays = strMap37;
        slimTableFactory20.tableTypeArrays = strMap37;
        boolean boolean41 = slimTableFactory20.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory42 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass44 = slimTableFactory42.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap45 = slimTableFactory42.tableTypeArrays;
        slimTableFactory20.tableTypeArrays = strMap45;
        slimTableFactory19.tableTypeArrays = strMap45;
        boolean boolean49 = slimTableFactory19.hasColon("");
        java.lang.String str51 = slimTableFactory19.getFullTableName("hi!");
        java.lang.Class<?> wildcardClass52 = slimTableFactory19.getClass();
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(slimTableFactory19);
        org.junit.Assert.assertNotNull(slimTableFactory21);
        org.junit.Assert.assertNull(wildcardClass25);
        org.junit.Assert.assertNotNull(slimTableFactory27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(slimTableFactory30);
        org.junit.Assert.assertNotNull(slimTableFactory31);
        org.junit.Assert.assertNull(wildcardClass34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(wildcardClass44);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "hi!" + "'", str51, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test03702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03702");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        boolean boolean5 = slimTableFactory0.hasColon("");
        java.lang.String str7 = slimTableFactory0.makeTableType("");
        java.lang.String str9 = slimTableFactory0.makeTableType("");
        java.lang.String str11 = slimTableFactory0.makeTableType("");
        java.lang.String str13 = slimTableFactory0.getFullTableName("");
        java.lang.String str15 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = slimTableFactory16.copy();
        boolean boolean19 = slimTableFactory17.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap20 = slimTableFactory17.tableTypeArrays;
        java.lang.String str22 = slimTableFactory17.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = slimTableFactory23.copy();
        boolean boolean26 = slimTableFactory24.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap27 = slimTableFactory24.tableTypeArrays;
        java.lang.String str29 = slimTableFactory24.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap30 = slimTableFactory24.tableTypeArrays;
        slimTableFactory17.tableTypeArrays = strMap30;
        slimTableFactory0.tableTypeArrays = strMap30;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass34 = slimTableFactory0.getTableType("");
        boolean boolean36 = slimTableFactory0.hasColon("");
        java.lang.String str38 = slimTableFactory0.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory39 = slimTableFactory0.copy();
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(slimTableFactory17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(slimTableFactory24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNull(wildcardClass34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory39);
    }

    @Test
    public void test03703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03703");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap5 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory6.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory7.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory9.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap11 = slimTableFactory10.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory12.getTableType("");
        boolean boolean16 = slimTableFactory12.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap17 = slimTableFactory12.tableTypeArrays;
        slimTableFactory10.tableTypeArrays = strMap17;
        java.lang.String str20 = slimTableFactory10.makeTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass22 = slimTableFactory10.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = slimTableFactory10.copy();
        java.lang.String str25 = slimTableFactory10.getFullTableName("");
        java.lang.String str27 = slimTableFactory10.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap28 = slimTableFactory10.tableTypeArrays;
        slimTableFactory8.tableTypeArrays = strMap28;
        fitnesse.testsystems.slim.Table table30 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory8.parseDefineTableTypeRow(table30, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNull(wildcardClass22);
        org.junit.Assert.assertNotNull(slimTableFactory23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(strMap28);
    }

    @Test
    public void test03704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03704");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap5 = slimTableFactory1.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory1.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory1.tableTypeArrays;
        java.lang.Class<?> wildcardClass9 = slimTableFactory1.getClass();
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test03705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03705");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap5 = slimTableFactory1.tableTypes;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap6 = slimTableFactory1.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass11 = slimTableFactory9.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory9.copy();
        boolean boolean14 = slimTableFactory9.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass16 = slimTableFactory9.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory17.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap19 = slimTableFactory18.tableTypes;
        boolean boolean21 = slimTableFactory18.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap22 = slimTableFactory18.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap23 = slimTableFactory18.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = slimTableFactory24.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap26 = slimTableFactory25.tableTypes;
        boolean boolean28 = slimTableFactory25.hasColon("");
        boolean boolean30 = slimTableFactory25.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap31 = slimTableFactory25.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory32 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass34 = slimTableFactory32.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory35 = slimTableFactory32.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap36 = slimTableFactory35.tableTypeArrays;
        slimTableFactory25.tableTypeArrays = strMap36;
        slimTableFactory18.tableTypeArrays = strMap36;
        slimTableFactory9.tableTypeArrays = strMap36;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory40 = slimTableFactory9.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap41 = slimTableFactory40.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass43 = slimTableFactory40.getTableType("");
        java.lang.String str45 = slimTableFactory40.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory46 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory47 = slimTableFactory46.copy();
        boolean boolean49 = slimTableFactory47.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory50 = slimTableFactory47.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory51 = slimTableFactory47.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory52 = slimTableFactory47.copy();
        boolean boolean54 = slimTableFactory47.hasColon("");
        boolean boolean56 = slimTableFactory47.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory57 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory58 = slimTableFactory57.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap59 = slimTableFactory58.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory60 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass62 = slimTableFactory60.getTableType("");
        boolean boolean64 = slimTableFactory60.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap65 = slimTableFactory60.tableTypeArrays;
        slimTableFactory58.tableTypeArrays = strMap65;
        slimTableFactory47.tableTypeArrays = strMap65;
        slimTableFactory40.tableTypeArrays = strMap65;
        slimTableFactory1.tableTypeArrays = strMap65;
        java.lang.String str71 = slimTableFactory1.makeTableType("");
        fitnesse.testsystems.slim.Table table72 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext74 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable75 = slimTableFactory1.makeSlimTable(table72, "hi!", slimTestContext74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(wildcardClass16);
        org.junit.Assert.assertNotNull(slimTableFactory18);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(slimTableFactory25);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNull(wildcardClass34);
        org.junit.Assert.assertNotNull(slimTableFactory35);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(slimTableFactory40);
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertNull(wildcardClass43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(slimTableFactory50);
        org.junit.Assert.assertNotNull(slimTableFactory51);
        org.junit.Assert.assertNotNull(slimTableFactory52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(slimTableFactory58);
        org.junit.Assert.assertNotNull(strMap59);
        org.junit.Assert.assertNull(wildcardClass62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
    }

    @Test
    public void test03706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03706");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        boolean boolean6 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory1.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass9 = slimTableFactory1.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory1.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap11 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.Table table12 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable13 = slimTableFactory1.parseDefineTableTypeTable(table12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strMap11);
    }

    @Test
    public void test03707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03707");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory1.tableTypeArrays;
        java.lang.String str6 = slimTableFactory1.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory7.copy();
        boolean boolean10 = slimTableFactory8.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory8.tableTypeArrays;
        java.lang.String str13 = slimTableFactory8.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory8.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap14;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap17 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory1.copy();
        boolean boolean20 = slimTableFactory18.hasColon("hi!");
        java.lang.String str22 = slimTableFactory18.makeTableType("");
        java.lang.String str24 = slimTableFactory18.getFullTableName("hi!");
        java.lang.String str26 = slimTableFactory18.makeTableType("");
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(slimTableFactory18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
    }

    @Test
    public void test03708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03708");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory0.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory9.copy();
        boolean boolean12 = slimTableFactory10.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap13 = slimTableFactory10.tableTypeArrays;
        java.lang.String str15 = slimTableFactory10.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory10.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap16;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap19 = slimTableFactory18.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass21 = slimTableFactory18.getTableType("hi!");
        fitnesse.testsystems.slim.Table table22 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory18.parseDefineTableTypeRow(table22, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(slimTableFactory18);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNull(wildcardClass21);
    }

    @Test
    public void test03709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03709");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory0.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass6 = slimTableFactory4.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory4.copy();
        boolean boolean9 = slimTableFactory4.hasColon("");
        java.lang.String str11 = slimTableFactory4.getFullTableName("hi!");
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
    }

    @Test
    public void test03710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03710");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory1.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass8 = slimTableFactory6.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory6.copy();
        fitnesse.testsystems.slim.Table table10 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory6.parseDefineTableTypeRow(table10, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
    }

    @Test
    public void test03711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03711");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        slimTableFactory0.tableTypeArrays = strMap2;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass5 = slimTableFactory0.getTableType("hi!");
        java.lang.String str7 = slimTableFactory0.makeTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap8 = slimTableFactory0.tableTypes;
        java.lang.Class<?> wildcardClass9 = strMap8.getClass();
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test03712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03712");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory5.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory6.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory6.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass10 = slimTableFactory6.getTableType("");
        fitnesse.testsystems.slim.Table table11 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext13 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable14 = slimTableFactory6.makeSlimTable(table11, "", slimTestContext13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNull(wildcardClass10);
    }

    @Test
    public void test03713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03713");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory0.copy();
        boolean boolean6 = slimTableFactory4.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass9 = slimTableFactory7.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory7.tableTypeArrays;
        boolean boolean12 = slimTableFactory7.hasColon("");
        java.lang.String str14 = slimTableFactory7.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap15 = slimTableFactory7.tableTypeArrays;
        slimTableFactory4.tableTypeArrays = strMap15;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory17.copy();
        boolean boolean20 = slimTableFactory18.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = slimTableFactory18.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap22 = slimTableFactory18.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass24 = slimTableFactory18.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap25 = slimTableFactory18.tableTypeArrays;
        slimTableFactory4.tableTypeArrays = strMap25;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap27 = slimTableFactory4.tableTypes;
        java.lang.String str29 = slimTableFactory4.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory30 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory31 = slimTableFactory30.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap32 = slimTableFactory31.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass34 = slimTableFactory31.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap35 = slimTableFactory31.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass37 = slimTableFactory31.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap38 = slimTableFactory31.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory39 = slimTableFactory31.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap40 = slimTableFactory39.tableTypeArrays;
        slimTableFactory4.tableTypeArrays = strMap40;
        java.lang.String str43 = slimTableFactory4.getFullTableName("");
        fitnesse.testsystems.slim.Table table44 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext46 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable47 = slimTableFactory4.makeSlimTable(table44, "", slimTestContext46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(slimTableFactory18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(slimTableFactory21);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNull(wildcardClass24);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(slimTableFactory31);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNull(wildcardClass34);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNull(wildcardClass37);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertNotNull(slimTableFactory39);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
    }

    @Test
    public void test03714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03714");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory5.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass9 = slimTableFactory7.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory7.copy();
        boolean boolean12 = slimTableFactory7.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap13 = slimTableFactory7.tableTypeArrays;
        slimTableFactory5.tableTypeArrays = strMap13;
        java.util.Map<java.lang.String, java.lang.String> strMap15 = slimTableFactory5.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass18 = slimTableFactory16.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory16.copy();
        boolean boolean21 = slimTableFactory16.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = slimTableFactory22.copy();
        boolean boolean25 = slimTableFactory23.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = slimTableFactory23.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = slimTableFactory23.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = slimTableFactory27.copy();
        boolean boolean30 = slimTableFactory27.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap31 = slimTableFactory27.tableTypeArrays;
        slimTableFactory16.tableTypeArrays = strMap31;
        slimTableFactory5.tableTypeArrays = strMap31;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass35 = slimTableFactory5.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory36 = slimTableFactory5.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap37 = slimTableFactory36.tableTypes;
        java.lang.String str39 = slimTableFactory36.makeTableType("");
        java.lang.Class<?> wildcardClass40 = slimTableFactory36.getClass();
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertNotNull(slimTableFactory19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(slimTableFactory23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(slimTableFactory26);
        org.junit.Assert.assertNotNull(slimTableFactory27);
        org.junit.Assert.assertNotNull(slimTableFactory28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNull(wildcardClass35);
        org.junit.Assert.assertNotNull(slimTableFactory36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test03715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03715");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory5.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory7.copy();
        boolean boolean10 = slimTableFactory8.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory8.tableTypeArrays;
        slimTableFactory6.tableTypeArrays = strMap11;
        java.lang.String str14 = slimTableFactory6.getFullTableName("hi!");
        java.lang.String str16 = slimTableFactory6.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = slimTableFactory6.copy();
        fitnesse.testsystems.slim.Table table18 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable19 = slimTableFactory6.parseDefineTableTypeTable(table18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory17);
    }

    @Test
    public void test03716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03716");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory1.tableTypeArrays;
        java.lang.String str6 = slimTableFactory1.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory7.copy();
        boolean boolean10 = slimTableFactory8.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory8.tableTypeArrays;
        java.lang.String str13 = slimTableFactory8.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory8.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap14;
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory1.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap17 = slimTableFactory1.tableTypes;
        java.lang.String str19 = slimTableFactory1.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = slimTableFactory21.copy();
        boolean boolean24 = slimTableFactory22.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = slimTableFactory22.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap26 = slimTableFactory22.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = slimTableFactory22.copy();
        boolean boolean29 = slimTableFactory27.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap30 = slimTableFactory27.tableTypeArrays;
        slimTableFactory20.tableTypeArrays = strMap30;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass33 = slimTableFactory20.getTableType("hi!");
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory20);
        org.junit.Assert.assertNotNull(slimTableFactory22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(slimTableFactory25);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(slimTableFactory27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNull(wildcardClass33);
    }

    @Test
    public void test03717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03717");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory5.getTableType("hi!");
        boolean boolean9 = slimTableFactory5.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass11 = slimTableFactory5.getTableType("hi!");
        java.lang.String str13 = slimTableFactory5.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory5.copy();
        fitnesse.testsystems.slim.Table table15 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable16 = slimTableFactory5.parseDefineTableTypeTable(table15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory14);
    }

    @Test
    public void test03718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03718");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        boolean boolean4 = slimTableFactory0.hasColon("");
        java.lang.String str6 = slimTableFactory0.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass10 = slimTableFactory8.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory8.tableTypeArrays;
        boolean boolean13 = slimTableFactory8.hasColon("");
        java.lang.String str15 = slimTableFactory8.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory8.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap16;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.Table table20 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable21 = slimTableFactory19.parseDefineTableTypeTable(table20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(slimTableFactory18);
        org.junit.Assert.assertNotNull(slimTableFactory19);
    }

    @Test
    public void test03719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03719");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        boolean boolean4 = slimTableFactory0.hasColon("");
        java.lang.String str6 = slimTableFactory0.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass9 = slimTableFactory7.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory7.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory10.copy();
        java.lang.String str13 = slimTableFactory10.makeTableType("");
        java.lang.String str15 = slimTableFactory10.makeTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap16 = slimTableFactory10.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass19 = slimTableFactory17.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory17.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = slimTableFactory21.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap23 = slimTableFactory22.tableTypes;
        boolean boolean25 = slimTableFactory22.hasColon("");
        boolean boolean27 = slimTableFactory22.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap28 = slimTableFactory22.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory29 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass31 = slimTableFactory29.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory32 = slimTableFactory29.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = slimTableFactory32.tableTypeArrays;
        slimTableFactory22.tableTypeArrays = strMap33;
        slimTableFactory17.tableTypeArrays = strMap33;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap36 = slimTableFactory17.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap37 = slimTableFactory17.tableTypeArrays;
        slimTableFactory10.tableTypeArrays = strMap37;
        java.util.Map<java.lang.String, java.lang.String> strMap39 = slimTableFactory10.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap39;
        fitnesse.testsystems.slim.Table table41 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext43 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable44 = slimTableFactory0.makeSlimTable(table41, "", slimTestContext43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(slimTableFactory20);
        org.junit.Assert.assertNotNull(slimTableFactory22);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNotNull(slimTableFactory32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(strMap39);
    }

    @Test
    public void test03720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03720");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        java.lang.String str6 = slimTableFactory1.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass10 = slimTableFactory8.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory8.tableTypeArrays;
        boolean boolean13 = slimTableFactory8.hasColon("");
        java.lang.String str15 = slimTableFactory8.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory8.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap17 = slimTableFactory8.tableTypes;
        boolean boolean19 = slimTableFactory8.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory8.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass23 = slimTableFactory21.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = slimTableFactory21.copy();
        boolean boolean26 = slimTableFactory21.hasColon("hi!");
        java.lang.String str28 = slimTableFactory21.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap29 = slimTableFactory21.tableTypeArrays;
        slimTableFactory8.tableTypeArrays = strMap29;
        slimTableFactory1.tableTypeArrays = strMap29;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass33 = slimTableFactory1.getTableType("");
        fitnesse.testsystems.slim.Table table34 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext36 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable37 = slimTableFactory1.makeSlimTable(table34, "", slimTestContext36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(slimTableFactory20);
        org.junit.Assert.assertNull(wildcardClass23);
        org.junit.Assert.assertNotNull(slimTableFactory24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNull(wildcardClass33);
    }

    @Test
    public void test03721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03721");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory3.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap6 = slimTableFactory3.tableTypes;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory3.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        boolean boolean11 = slimTableFactory9.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory9.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap13 = slimTableFactory9.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass15 = slimTableFactory9.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory9.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = slimTableFactory9.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass19 = slimTableFactory9.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap20 = slimTableFactory9.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap21 = slimTableFactory9.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = slimTableFactory22.copy();
        boolean boolean25 = slimTableFactory23.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = slimTableFactory23.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = slimTableFactory23.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = slimTableFactory27.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory29 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass31 = slimTableFactory29.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory32 = slimTableFactory29.copy();
        boolean boolean34 = slimTableFactory29.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap35 = slimTableFactory29.tableTypeArrays;
        slimTableFactory27.tableTypeArrays = strMap35;
        java.util.Map<java.lang.String, java.lang.String> strMap37 = slimTableFactory27.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory38 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass40 = slimTableFactory38.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory41 = slimTableFactory38.copy();
        boolean boolean43 = slimTableFactory38.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory44 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory45 = slimTableFactory44.copy();
        boolean boolean47 = slimTableFactory45.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory48 = slimTableFactory45.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory49 = slimTableFactory45.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory50 = slimTableFactory49.copy();
        boolean boolean52 = slimTableFactory49.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap53 = slimTableFactory49.tableTypeArrays;
        slimTableFactory38.tableTypeArrays = strMap53;
        slimTableFactory27.tableTypeArrays = strMap53;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass57 = slimTableFactory27.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory58 = slimTableFactory27.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory59 = slimTableFactory27.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory60 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory61 = slimTableFactory60.copy();
        boolean boolean63 = slimTableFactory61.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory64 = slimTableFactory61.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap65 = slimTableFactory64.tableTypeArrays;
        slimTableFactory59.tableTypeArrays = strMap65;
        slimTableFactory9.tableTypeArrays = strMap65;
        slimTableFactory3.tableTypeArrays = strMap65;
        java.lang.String str70 = slimTableFactory3.getFullTableName("");
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(slimTableFactory17);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(slimTableFactory23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(slimTableFactory26);
        org.junit.Assert.assertNotNull(slimTableFactory27);
        org.junit.Assert.assertNotNull(slimTableFactory28);
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNotNull(slimTableFactory32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNull(wildcardClass40);
        org.junit.Assert.assertNotNull(slimTableFactory41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(slimTableFactory45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(slimTableFactory48);
        org.junit.Assert.assertNotNull(slimTableFactory49);
        org.junit.Assert.assertNotNull(slimTableFactory50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(strMap53);
        org.junit.Assert.assertNull(wildcardClass57);
        org.junit.Assert.assertNotNull(slimTableFactory58);
        org.junit.Assert.assertNotNull(slimTableFactory59);
        org.junit.Assert.assertNotNull(slimTableFactory61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(slimTableFactory64);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
    }

    @Test
    public void test03722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03722");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass5 = slimTableFactory1.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.Table table7 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory1.parseDefineTableTypeRow(table7, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
    }

    @Test
    public void test03723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03723");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.lang.String str3 = slimTableFactory0.getFullTableName("hi!");
        java.lang.String str5 = slimTableFactory0.makeTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap6 = slimTableFactory0.tableTypes;
        java.lang.String str8 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory0.copy();
        boolean boolean11 = slimTableFactory0.hasColon("hi!");
        fitnesse.testsystems.slim.Table table12 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable13 = slimTableFactory0.parseDefineTableTypeTable(table12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!" + "'", str3, "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test03724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03724");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory4.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap6 = slimTableFactory5.tableTypes;
        boolean boolean8 = slimTableFactory5.hasColon("");
        boolean boolean10 = slimTableFactory5.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap11 = slimTableFactory5.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory12.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory12.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory15.tableTypeArrays;
        slimTableFactory5.tableTypeArrays = strMap16;
        slimTableFactory0.tableTypeArrays = strMap16;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap19 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap21 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = slimTableFactory0.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass24 = slimTableFactory22.getTableType("hi!");
        fitnesse.testsystems.slim.Table table25 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory22.parseDefineTableTypeRow(table25, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(slimTableFactory20);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(slimTableFactory22);
        org.junit.Assert.assertNull(wildcardClass24);
    }

    @Test
    public void test03725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03725");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory5.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory5.copy();
        fitnesse.testsystems.slim.Table table8 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory7.parseDefineTableTypeRow(table8, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory7);
    }

    @Test
    public void test03726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03726");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory1.tableTypeArrays;
        java.lang.String str6 = slimTableFactory1.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap9 = slimTableFactory1.tableTypes;
        java.lang.String str11 = slimTableFactory1.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap12 = slimTableFactory1.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory1.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory15.copy();
        boolean boolean18 = slimTableFactory16.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap19 = slimTableFactory16.tableTypeArrays;
        java.lang.String str21 = slimTableFactory16.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = slimTableFactory22.copy();
        boolean boolean25 = slimTableFactory23.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap26 = slimTableFactory23.tableTypeArrays;
        java.lang.String str28 = slimTableFactory23.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap29 = slimTableFactory23.tableTypeArrays;
        slimTableFactory16.tableTypeArrays = strMap29;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory31 = slimTableFactory16.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory32 = slimTableFactory16.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory33 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory34 = slimTableFactory33.copy();
        boolean boolean36 = slimTableFactory34.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap37 = slimTableFactory34.tableTypeArrays;
        slimTableFactory32.tableTypeArrays = strMap37;
        java.util.Map<java.lang.String, java.lang.String> strMap39 = slimTableFactory32.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap39;
        boolean boolean42 = slimTableFactory1.hasColon("hi!");
        java.lang.Class<?> wildcardClass43 = slimTableFactory1.getClass();
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(slimTableFactory23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(slimTableFactory31);
        org.junit.Assert.assertNotNull(slimTableFactory32);
        org.junit.Assert.assertNotNull(slimTableFactory34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test03727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03727");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        boolean boolean6 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory1.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass9 = slimTableFactory1.getTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap10 = slimTableFactory1.tableTypes;
        java.lang.String str12 = slimTableFactory1.makeTableType("hi!");
        java.lang.Class<?> wildcardClass13 = slimTableFactory1.getClass();
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test03728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03728");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass4 = slimTableFactory1.getTableType("hi!");
        boolean boolean6 = slimTableFactory1.hasColon("");
        java.lang.String str8 = slimTableFactory1.makeTableType("hi!");
        boolean boolean10 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory11.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap13 = slimTableFactory12.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass16 = slimTableFactory14.getTableType("");
        boolean boolean18 = slimTableFactory14.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap19 = slimTableFactory14.tableTypeArrays;
        slimTableFactory12.tableTypeArrays = strMap19;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = slimTableFactory21.copy();
        boolean boolean24 = slimTableFactory22.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = slimTableFactory22.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = slimTableFactory22.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = slimTableFactory26.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass30 = slimTableFactory28.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory31 = slimTableFactory28.copy();
        boolean boolean33 = slimTableFactory28.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap34 = slimTableFactory28.tableTypeArrays;
        slimTableFactory26.tableTypeArrays = strMap34;
        java.util.Map<java.lang.String, java.lang.String> strMap36 = slimTableFactory26.tableTypeArrays;
        slimTableFactory12.tableTypeArrays = strMap36;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory38 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory39 = slimTableFactory38.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap40 = slimTableFactory39.tableTypes;
        boolean boolean42 = slimTableFactory39.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap43 = slimTableFactory39.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap44 = slimTableFactory39.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory45 = slimTableFactory39.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap46 = slimTableFactory39.tableTypeArrays;
        slimTableFactory12.tableTypeArrays = strMap46;
        java.lang.String str49 = slimTableFactory12.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap50 = slimTableFactory12.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap50;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass53 = slimTableFactory1.getTableType("hi!");
        fitnesse.testsystems.slim.Table table54 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory1.parseDefineTableTypeRow(table54, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNull(wildcardClass16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(slimTableFactory22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(slimTableFactory25);
        org.junit.Assert.assertNotNull(slimTableFactory26);
        org.junit.Assert.assertNotNull(slimTableFactory27);
        org.junit.Assert.assertNull(wildcardClass30);
        org.junit.Assert.assertNotNull(slimTableFactory31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(slimTableFactory39);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(strMap43);
        org.junit.Assert.assertNotNull(strMap44);
        org.junit.Assert.assertNotNull(slimTableFactory45);
        org.junit.Assert.assertNotNull(strMap46);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(wildcardClass53);
    }

    @Test
    public void test03729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03729");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory0.getTableType("hi!");
        java.lang.String str9 = slimTableFactory0.getFullTableName("");
        java.lang.String str11 = slimTableFactory0.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap12 = slimTableFactory0.tableTypeArrays;
        java.lang.String str14 = slimTableFactory0.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass17 = slimTableFactory15.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap18 = slimTableFactory15.tableTypeArrays;
        boolean boolean20 = slimTableFactory15.hasColon("");
        java.lang.String str22 = slimTableFactory15.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = slimTableFactory15.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = slimTableFactory15.copy();
        boolean boolean26 = slimTableFactory15.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap27 = slimTableFactory15.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap27;
        java.lang.Class<?> wildcardClass29 = slimTableFactory0.getClass();
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertNull(wildcardClass17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(slimTableFactory23);
        org.junit.Assert.assertNotNull(slimTableFactory24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test03730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03730");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass4 = slimTableFactory1.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap5 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory6.copy();
        java.lang.String str9 = slimTableFactory7.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory7.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory7.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory7.copy();
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(slimTableFactory12);
    }

    @Test
    public void test03731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03731");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        slimTableFactory0.tableTypeArrays = strMap2;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass5 = slimTableFactory0.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory6.copy();
        boolean boolean9 = slimTableFactory7.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory7.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory7.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory12.getTableType("");
        boolean boolean16 = slimTableFactory12.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap17 = slimTableFactory12.tableTypeArrays;
        slimTableFactory11.tableTypeArrays = strMap17;
        slimTableFactory0.tableTypeArrays = strMap17;
        boolean boolean21 = slimTableFactory0.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass24 = slimTableFactory22.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap25 = slimTableFactory22.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap25;
        java.util.Map<java.lang.String, java.lang.String> strMap27 = slimTableFactory0.tableTypeArrays;
        java.lang.String str29 = slimTableFactory0.makeTableType("hi!");
        fitnesse.testsystems.slim.Table table30 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory0.parseDefineTableTypeRow(table30, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(wildcardClass24);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
    }

    @Test
    public void test03732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03732");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        boolean boolean6 = slimTableFactory1.hasColon("hi!");
        boolean boolean8 = slimTableFactory1.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap10 = slimTableFactory9.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory9.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory12.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap14 = slimTableFactory13.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass17 = slimTableFactory15.getTableType("");
        boolean boolean19 = slimTableFactory15.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap20 = slimTableFactory15.tableTypeArrays;
        slimTableFactory13.tableTypeArrays = strMap20;
        slimTableFactory11.tableTypeArrays = strMap20;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = slimTableFactory11.copy();
        fitnesse.testsystems.slim.Table table24 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory23.parseDefineTableTypeRow(table24, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNotNull(slimTableFactory13);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNull(wildcardClass17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(slimTableFactory23);
    }

    @Test
    public void test03733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03733");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory0.copy();
        boolean boolean6 = slimTableFactory4.hasColon("");
        java.lang.String str8 = slimTableFactory4.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory4.copy();
        java.lang.String str11 = slimTableFactory9.makeTableType("");
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test03734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03734");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass4 = slimTableFactory1.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap5 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory6.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass10 = slimTableFactory8.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory8.copy();
        boolean boolean13 = slimTableFactory8.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass15 = slimTableFactory8.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory8.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap17 = slimTableFactory8.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory8.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass21 = slimTableFactory19.getTableType("");
        boolean boolean23 = slimTableFactory19.hasColon("");
        java.lang.String str25 = slimTableFactory19.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap26 = slimTableFactory19.tableTypeArrays;
        slimTableFactory8.tableTypeArrays = strMap26;
        slimTableFactory7.tableTypeArrays = strMap26;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap29 = slimTableFactory7.tableTypes;
        java.lang.String str31 = slimTableFactory7.getFullTableName("hi!");
        java.lang.Class<?> wildcardClass32 = slimTableFactory7.getClass();
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(slimTableFactory18);
        org.junit.Assert.assertNull(wildcardClass21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test03735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03735");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass5 = slimTableFactory1.getTableType("hi!");
        boolean boolean7 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.Table table8 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext10 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable11 = slimTableFactory1.makeSlimTable(table8, "hi!", slimTestContext10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test03736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03736");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("hi!");
        java.lang.String str7 = slimTableFactory0.getFullTableName("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass9 = slimTableFactory0.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory11.copy();
        boolean boolean14 = slimTableFactory12.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory12.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory12.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = slimTableFactory16.copy();
        boolean boolean19 = slimTableFactory16.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap20 = slimTableFactory16.tableTypeArrays;
        java.lang.String str22 = slimTableFactory16.getFullTableName("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass24 = slimTableFactory16.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass27 = slimTableFactory25.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = slimTableFactory25.copy();
        boolean boolean30 = slimTableFactory25.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass32 = slimTableFactory25.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap33 = slimTableFactory25.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory34 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory35 = slimTableFactory34.copy();
        boolean boolean37 = slimTableFactory35.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap38 = slimTableFactory35.tableTypeArrays;
        java.lang.String str40 = slimTableFactory35.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap41 = slimTableFactory35.tableTypeArrays;
        slimTableFactory25.tableTypeArrays = strMap41;
        slimTableFactory16.tableTypeArrays = strMap41;
        slimTableFactory0.tableTypeArrays = strMap41;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory45 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory46 = slimTableFactory45.copy();
        boolean boolean48 = slimTableFactory46.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory49 = slimTableFactory46.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = slimTableFactory46.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass52 = slimTableFactory46.getTableType("");
        boolean boolean54 = slimTableFactory46.hasColon("");
        java.lang.String str56 = slimTableFactory46.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap57 = slimTableFactory46.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap57;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap59 = slimTableFactory0.tableTypes;
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertNotNull(slimTableFactory17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertNull(wildcardClass24);
        org.junit.Assert.assertNull(wildcardClass27);
        org.junit.Assert.assertNotNull(slimTableFactory28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(wildcardClass32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(slimTableFactory35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertNotNull(slimTableFactory46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(slimTableFactory49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(wildcardClass52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hi!" + "'", str56, "hi!");
        org.junit.Assert.assertNotNull(strMap57);
        org.junit.Assert.assertNotNull(strMap59);
    }

    @Test
    public void test03737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03737");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.lang.String str3 = slimTableFactory0.getFullTableName("hi!");
        java.lang.String str5 = slimTableFactory0.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap6 = null;
        slimTableFactory0.tableTypeArrays = strMap6;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass9 = slimTableFactory0.getTableType("");
        java.lang.Class<?> wildcardClass10 = slimTableFactory0.getClass();
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!" + "'", str3, "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test03738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03738");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory8.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap10;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory12.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory12.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory15.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap17 = slimTableFactory15.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap17;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap19 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass22 = slimTableFactory20.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap23 = slimTableFactory20.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = slimTableFactory20.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap25 = slimTableFactory20.tableTypeArrays;
        boolean boolean27 = slimTableFactory20.hasColon("");
        java.lang.String str29 = slimTableFactory20.makeTableType("");
        java.lang.String str31 = slimTableFactory20.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory32 = slimTableFactory20.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory33 = slimTableFactory20.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap34 = slimTableFactory20.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory35 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass37 = slimTableFactory35.getTableType("");
        boolean boolean39 = slimTableFactory35.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap40 = slimTableFactory35.tableTypeArrays;
        slimTableFactory20.tableTypeArrays = strMap40;
        slimTableFactory1.tableTypeArrays = strMap40;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass44 = slimTableFactory1.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap45 = slimTableFactory1.tableTypeArrays;
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNull(wildcardClass22);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(slimTableFactory24);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(slimTableFactory32);
        org.junit.Assert.assertNotNull(slimTableFactory33);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNull(wildcardClass37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertNull(wildcardClass44);
        org.junit.Assert.assertNotNull(strMap45);
    }

    @Test
    public void test03739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03739");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        boolean boolean6 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory1.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass9 = slimTableFactory1.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.Table table11 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory1.parseDefineTableTypeRow(table11, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNotNull(strMap10);
    }

    @Test
    public void test03740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03740");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory0.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap9 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory0.tableTypeArrays;
        boolean boolean12 = slimTableFactory0.hasColon("hi!");
        java.lang.String str14 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory15.copy();
        boolean boolean18 = slimTableFactory16.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory16.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory16.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = slimTableFactory20.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap22 = slimTableFactory20.tableTypes;
        java.lang.String str24 = slimTableFactory20.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap25 = slimTableFactory20.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap25;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap28 = slimTableFactory27.tableTypeArrays;
        java.lang.Class<?> wildcardClass29 = slimTableFactory27.getClass();
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(slimTableFactory19);
        org.junit.Assert.assertNotNull(slimTableFactory20);
        org.junit.Assert.assertNotNull(slimTableFactory21);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(slimTableFactory27);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test03741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03741");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory5.copy();
        java.lang.String str8 = slimTableFactory5.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory5.copy();
        java.lang.String str11 = slimTableFactory5.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory5.copy();
        fitnesse.testsystems.slim.Table table13 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext15 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable16 = slimTableFactory12.makeSlimTable(table13, "hi!", slimTestContext15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory12);
    }

    @Test
    public void test03742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03742");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        boolean boolean6 = slimTableFactory1.hasColon("hi!");
        boolean boolean8 = slimTableFactory1.hasColon("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass10 = slimTableFactory1.getTableType("hi!");
        java.lang.String str12 = slimTableFactory1.getFullTableName("");
        boolean boolean14 = slimTableFactory1.hasColon("hi!");
        java.lang.String str16 = slimTableFactory1.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory17.copy();
        boolean boolean20 = slimTableFactory18.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = slimTableFactory18.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap22 = slimTableFactory18.tableTypeArrays;
        boolean boolean24 = slimTableFactory18.hasColon("hi!");
        java.lang.String str26 = slimTableFactory18.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap27 = slimTableFactory18.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap27;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory29 = slimTableFactory1.copy();
        java.lang.String str31 = slimTableFactory29.makeTableType("hi!");
        fitnesse.testsystems.slim.Table table32 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable33 = slimTableFactory29.parseDefineTableTypeTable(table32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(slimTableFactory18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(slimTableFactory21);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(slimTableFactory29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
    }

    @Test
    public void test03743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03743");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory0.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory9.copy();
        boolean boolean12 = slimTableFactory10.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap13 = slimTableFactory10.tableTypeArrays;
        java.lang.String str15 = slimTableFactory10.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory10.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap16;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.Table table20 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext22 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable23 = slimTableFactory0.makeSlimTable(table20, "", slimTestContext22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(slimTableFactory18);
        org.junit.Assert.assertNotNull(slimTableFactory19);
    }

    @Test
    public void test03744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03744");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory1.tableTypeArrays;
        java.lang.String str6 = slimTableFactory1.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory7.copy();
        boolean boolean10 = slimTableFactory8.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory8.tableTypeArrays;
        java.lang.String str13 = slimTableFactory8.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory8.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap14;
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory1.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap17 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory1.copy();
        java.lang.String str20 = slimTableFactory1.getFullTableName("hi!");
        fitnesse.testsystems.slim.Table table21 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory1.parseDefineTableTypeRow(table21, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(slimTableFactory18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
    }

    @Test
    public void test03745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03745");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory1.tableTypeArrays;
        java.lang.String str6 = slimTableFactory1.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        boolean boolean11 = slimTableFactory9.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory9.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap13 = slimTableFactory9.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass16 = slimTableFactory14.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap17 = slimTableFactory14.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass19 = slimTableFactory14.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass22 = slimTableFactory20.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = slimTableFactory20.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = slimTableFactory23.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = slimTableFactory25.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap27 = slimTableFactory25.tableTypeArrays;
        slimTableFactory23.tableTypeArrays = strMap27;
        slimTableFactory14.tableTypeArrays = strMap27;
        slimTableFactory9.tableTypeArrays = strMap27;
        slimTableFactory1.tableTypeArrays = strMap27;
        java.lang.String str33 = slimTableFactory1.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory34 = slimTableFactory1.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass36 = slimTableFactory1.getTableType("hi!");
        fitnesse.testsystems.slim.Table table37 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable38 = slimTableFactory1.parseDefineTableTypeTable(table37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNull(wildcardClass16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNull(wildcardClass22);
        org.junit.Assert.assertNotNull(slimTableFactory23);
        org.junit.Assert.assertNotNull(slimTableFactory24);
        org.junit.Assert.assertNotNull(slimTableFactory26);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory34);
        org.junit.Assert.assertNull(wildcardClass36);
    }

    @Test
    public void test03746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03746");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory0.copy();
        boolean boolean6 = slimTableFactory4.hasColon("");
        boolean boolean8 = slimTableFactory4.hasColon("hi!");
        boolean boolean10 = slimTableFactory4.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory4.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass13 = slimTableFactory11.getTableType("hi!");
        boolean boolean15 = slimTableFactory11.hasColon("hi!");
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test03747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03747");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory1.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory1.copy();
        java.lang.Class<?> wildcardClass9 = slimTableFactory1.getClass();
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test03748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03748");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap6 = slimTableFactory0.tableTypes;
        java.lang.String str8 = slimTableFactory0.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory9.copy();
        boolean boolean12 = slimTableFactory10.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory10.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory10.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory10.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory15.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap16;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass20 = slimTableFactory18.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = slimTableFactory18.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = slimTableFactory21.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap23 = slimTableFactory21.tableTypeArrays;
        boolean boolean25 = slimTableFactory21.hasColon("");
        java.lang.String str27 = slimTableFactory21.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory29 = slimTableFactory28.copy();
        boolean boolean31 = slimTableFactory29.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory32 = slimTableFactory29.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory33 = slimTableFactory29.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory34 = slimTableFactory33.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory35 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass37 = slimTableFactory35.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory38 = slimTableFactory35.copy();
        boolean boolean40 = slimTableFactory35.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap41 = slimTableFactory35.tableTypeArrays;
        slimTableFactory33.tableTypeArrays = strMap41;
        java.util.Map<java.lang.String, java.lang.String> strMap43 = slimTableFactory33.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory44 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass46 = slimTableFactory44.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory47 = slimTableFactory44.copy();
        boolean boolean49 = slimTableFactory44.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory50 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory51 = slimTableFactory50.copy();
        boolean boolean53 = slimTableFactory51.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory54 = slimTableFactory51.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory55 = slimTableFactory51.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory56 = slimTableFactory55.copy();
        boolean boolean58 = slimTableFactory55.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap59 = slimTableFactory55.tableTypeArrays;
        slimTableFactory44.tableTypeArrays = strMap59;
        slimTableFactory33.tableTypeArrays = strMap59;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass63 = slimTableFactory33.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory64 = slimTableFactory33.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory65 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory66 = slimTableFactory65.copy();
        java.lang.String str68 = slimTableFactory65.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory69 = slimTableFactory65.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap70 = slimTableFactory65.tableTypeArrays;
        slimTableFactory64.tableTypeArrays = strMap70;
        slimTableFactory21.tableTypeArrays = strMap70;
        slimTableFactory0.tableTypeArrays = strMap70;
        fitnesse.testsystems.slim.Table table74 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext76 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable77 = slimTableFactory0.makeSlimTable(table74, "", slimTestContext76);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(slimTableFactory13);
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNull(wildcardClass20);
        org.junit.Assert.assertNotNull(slimTableFactory21);
        org.junit.Assert.assertNotNull(slimTableFactory22);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(slimTableFactory29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(slimTableFactory32);
        org.junit.Assert.assertNotNull(slimTableFactory33);
        org.junit.Assert.assertNotNull(slimTableFactory34);
        org.junit.Assert.assertNull(wildcardClass37);
        org.junit.Assert.assertNotNull(slimTableFactory38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertNotNull(strMap43);
        org.junit.Assert.assertNull(wildcardClass46);
        org.junit.Assert.assertNotNull(slimTableFactory47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(slimTableFactory51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(slimTableFactory54);
        org.junit.Assert.assertNotNull(slimTableFactory55);
        org.junit.Assert.assertNotNull(slimTableFactory56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(strMap59);
        org.junit.Assert.assertNull(wildcardClass63);
        org.junit.Assert.assertNotNull(slimTableFactory64);
        org.junit.Assert.assertNotNull(slimTableFactory66);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "hi!" + "'", str68, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory69);
        org.junit.Assert.assertNotNull(strMap70);
    }

    @Test
    public void test03749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03749");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory0.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap9 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory0.tableTypeArrays;
        boolean boolean12 = slimTableFactory0.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap13 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.Table table14 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext16 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable17 = slimTableFactory0.makeSlimTable(table14, "hi!", slimTestContext16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strMap13);
    }

    @Test
    public void test03750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03750");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        boolean boolean6 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass10 = slimTableFactory8.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory8.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap12 = slimTableFactory11.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap12;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap15 = slimTableFactory14.tableTypeArrays;
        java.lang.String str17 = slimTableFactory14.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory18.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap20 = slimTableFactory19.tableTypes;
        boolean boolean22 = slimTableFactory19.hasColon("");
        boolean boolean24 = slimTableFactory19.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap25 = slimTableFactory19.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass28 = slimTableFactory26.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory29 = slimTableFactory26.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap30 = slimTableFactory29.tableTypeArrays;
        slimTableFactory19.tableTypeArrays = strMap30;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory32 = slimTableFactory19.copy();
        boolean boolean34 = slimTableFactory19.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap35 = slimTableFactory19.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory36 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass38 = slimTableFactory36.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap39 = slimTableFactory36.tableTypeArrays;
        java.lang.String str41 = slimTableFactory36.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory42 = slimTableFactory36.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap43 = slimTableFactory36.tableTypeArrays;
        slimTableFactory19.tableTypeArrays = strMap43;
        java.lang.String str46 = slimTableFactory19.makeTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass48 = slimTableFactory19.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap49 = slimTableFactory19.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap50 = slimTableFactory19.tableTypeArrays;
        slimTableFactory14.tableTypeArrays = strMap50;
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(slimTableFactory19);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNull(wildcardClass28);
        org.junit.Assert.assertNotNull(slimTableFactory29);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(slimTableFactory32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNull(wildcardClass38);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory42);
        org.junit.Assert.assertNotNull(strMap43);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNull(wildcardClass48);
        org.junit.Assert.assertNotNull(strMap49);
        org.junit.Assert.assertNotNull(strMap50);
    }

    @Test
    public void test03751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03751");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass5 = slimTableFactory3.getTableType("");
        boolean boolean7 = slimTableFactory3.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory3.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap8;
        java.lang.String str11 = slimTableFactory1.makeTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass13 = slimTableFactory1.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory1.copy();
        java.lang.String str16 = slimTableFactory1.getFullTableName("");
        java.lang.String str18 = slimTableFactory1.makeTableType("");
        java.lang.String str20 = slimTableFactory1.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = slimTableFactory21.copy();
        boolean boolean24 = slimTableFactory22.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = slimTableFactory22.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = slimTableFactory22.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = slimTableFactory22.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap28 = slimTableFactory22.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory29 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory30 = slimTableFactory29.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap31 = slimTableFactory29.tableTypeArrays;
        slimTableFactory22.tableTypeArrays = strMap31;
        slimTableFactory1.tableTypeArrays = strMap31;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory34 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass36 = slimTableFactory34.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory37 = slimTableFactory34.copy();
        boolean boolean39 = slimTableFactory34.hasColon("");
        java.lang.String str41 = slimTableFactory34.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory42 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory43 = slimTableFactory42.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap44 = slimTableFactory43.tableTypes;
        boolean boolean46 = slimTableFactory43.hasColon("");
        boolean boolean48 = slimTableFactory43.hasColon("hi!");
        boolean boolean50 = slimTableFactory43.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory51 = slimTableFactory43.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap52 = slimTableFactory51.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory53 = slimTableFactory51.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory54 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory55 = slimTableFactory54.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap56 = slimTableFactory55.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory57 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass59 = slimTableFactory57.getTableType("");
        boolean boolean61 = slimTableFactory57.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap62 = slimTableFactory57.tableTypeArrays;
        slimTableFactory55.tableTypeArrays = strMap62;
        slimTableFactory53.tableTypeArrays = strMap62;
        slimTableFactory34.tableTypeArrays = strMap62;
        slimTableFactory1.tableTypeArrays = strMap62;
        java.util.Map<java.lang.String, java.lang.String> strMap67 = slimTableFactory1.tableTypeArrays;
        java.lang.Class<?> wildcardClass68 = strMap67.getClass();
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(slimTableFactory25);
        org.junit.Assert.assertNotNull(slimTableFactory26);
        org.junit.Assert.assertNotNull(slimTableFactory27);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNotNull(slimTableFactory30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNull(wildcardClass36);
        org.junit.Assert.assertNotNull(slimTableFactory37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(slimTableFactory43);
        org.junit.Assert.assertNotNull(strMap44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(slimTableFactory51);
        org.junit.Assert.assertNotNull(strMap52);
        org.junit.Assert.assertNotNull(slimTableFactory53);
        org.junit.Assert.assertNotNull(slimTableFactory55);
        org.junit.Assert.assertNotNull(strMap56);
        org.junit.Assert.assertNull(wildcardClass59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(strMap62);
        org.junit.Assert.assertNotNull(strMap67);
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test03752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03752");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass5 = slimTableFactory3.getTableType("");
        boolean boolean7 = slimTableFactory3.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory3.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap8;
        java.lang.String str11 = slimTableFactory1.makeTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass13 = slimTableFactory1.getTableType("");
        boolean boolean15 = slimTableFactory1.hasColon("");
        java.lang.String str17 = slimTableFactory1.getFullTableName("");
        fitnesse.testsystems.slim.Table table18 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext20 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable21 = slimTableFactory1.makeSlimTable(table18, "", slimTestContext20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test03753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03753");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory0.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap9 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory0.tableTypeArrays;
        boolean boolean12 = slimTableFactory0.hasColon("hi!");
        java.lang.String str14 = slimTableFactory0.makeTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass16 = slimTableFactory0.getTableType("hi!");
        java.lang.String str18 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.Table table19 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory0.parseDefineTableTypeRow(table19, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNull(wildcardClass16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
    }

    @Test
    public void test03754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03754");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory3.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory5.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory5.tableTypeArrays;
        slimTableFactory3.tableTypeArrays = strMap7;
        java.lang.String str10 = slimTableFactory3.makeTableType("");
        fitnesse.testsystems.slim.Table table11 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext13 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable14 = slimTableFactory3.makeSlimTable(table11, "hi!", slimTestContext13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test03755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03755");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        boolean boolean5 = slimTableFactory0.hasColon("");
        java.lang.String str7 = slimTableFactory0.makeTableType("");
        java.lang.String str9 = slimTableFactory0.makeTableType("");
        java.lang.String str11 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory12.copy();
        boolean boolean15 = slimTableFactory13.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass18 = slimTableFactory16.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory16.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = slimTableFactory20.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap22 = slimTableFactory21.tableTypes;
        boolean boolean24 = slimTableFactory21.hasColon("");
        boolean boolean26 = slimTableFactory21.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap27 = slimTableFactory21.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass30 = slimTableFactory28.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory31 = slimTableFactory28.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap32 = slimTableFactory31.tableTypeArrays;
        slimTableFactory21.tableTypeArrays = strMap32;
        slimTableFactory16.tableTypeArrays = strMap32;
        slimTableFactory13.tableTypeArrays = strMap32;
        slimTableFactory0.tableTypeArrays = strMap32;
        fitnesse.testsystems.slim.Table table37 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory0.parseDefineTableTypeRow(table37, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(slimTableFactory13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertNotNull(slimTableFactory19);
        org.junit.Assert.assertNotNull(slimTableFactory21);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNull(wildcardClass30);
        org.junit.Assert.assertNotNull(slimTableFactory31);
        org.junit.Assert.assertNotNull(strMap32);
    }

    @Test
    public void test03756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03756");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap5 = slimTableFactory1.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap8 = slimTableFactory7.tableTypes;
        fitnesse.testsystems.slim.Table table9 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext11 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable12 = slimTableFactory7.makeSlimTable(table9, "", slimTestContext11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertNotNull(strMap8);
    }

    @Test
    public void test03757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03757");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap5 = slimTableFactory1.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory1.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory1.tableTypeArrays;
        boolean boolean9 = slimTableFactory1.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap10 = slimTableFactory1.tableTypes;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap11 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory1.copy();
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(slimTableFactory12);
    }

    @Test
    public void test03758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03758");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        boolean boolean4 = slimTableFactory0.hasColon("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass6 = slimTableFactory0.getTableType("");
        java.lang.String str8 = slimTableFactory0.getFullTableName("hi!");
        java.lang.String str10 = slimTableFactory0.getFullTableName("");
        boolean boolean12 = slimTableFactory0.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory13.tableTypeArrays;
        boolean boolean16 = slimTableFactory13.hasColon("");
        java.lang.String str18 = slimTableFactory13.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap19 = slimTableFactory13.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = slimTableFactory20.copy();
        boolean boolean23 = slimTableFactory21.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = slimTableFactory21.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = slimTableFactory21.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = slimTableFactory25.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass29 = slimTableFactory27.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory30 = slimTableFactory27.copy();
        boolean boolean32 = slimTableFactory27.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap33 = slimTableFactory27.tableTypeArrays;
        slimTableFactory25.tableTypeArrays = strMap33;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap35 = slimTableFactory25.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory36 = slimTableFactory25.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap37 = slimTableFactory36.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap38 = slimTableFactory36.tableTypeArrays;
        slimTableFactory13.tableTypeArrays = strMap38;
        fitnesse.testsystems.slim.Table table40 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory13.parseDefineTableTypeRow(table40, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(slimTableFactory13);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(slimTableFactory21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(slimTableFactory24);
        org.junit.Assert.assertNotNull(slimTableFactory25);
        org.junit.Assert.assertNotNull(slimTableFactory26);
        org.junit.Assert.assertNull(wildcardClass29);
        org.junit.Assert.assertNotNull(slimTableFactory30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(slimTableFactory36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(strMap38);
    }

    @Test
    public void test03759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03759");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.lang.String str3 = slimTableFactory0.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory4.copy();
        boolean boolean7 = slimTableFactory5.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory5.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap9 = slimTableFactory5.tableTypes;
        fitnesse.testsystems.slim.Table table10 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory5.parseDefineTableTypeRow(table10, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!" + "'", str3, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(strMap9);
    }

    @Test
    public void test03760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03760");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass5 = slimTableFactory3.getTableType("");
        boolean boolean7 = slimTableFactory3.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory3.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap8;
        java.lang.String str11 = slimTableFactory1.makeTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass13 = slimTableFactory1.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory1.copy();
        java.lang.String str16 = slimTableFactory1.getFullTableName("");
        java.lang.String str18 = slimTableFactory1.makeTableType("");
        fitnesse.testsystems.slim.Table table19 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory1.parseDefineTableTypeRow(table19, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
    }

    @Test
    public void test03761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03761");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap5 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass8 = slimTableFactory6.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap9 = slimTableFactory6.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass11 = slimTableFactory6.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory12.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory12.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory15.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory17.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap19 = slimTableFactory17.tableTypeArrays;
        slimTableFactory15.tableTypeArrays = strMap19;
        slimTableFactory6.tableTypeArrays = strMap19;
        slimTableFactory1.tableTypeArrays = strMap19;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass25 = slimTableFactory23.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = slimTableFactory23.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap27 = slimTableFactory26.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap28 = slimTableFactory26.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap28;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory30 = slimTableFactory1.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass32 = slimTableFactory30.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory33 = slimTableFactory30.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory34 = slimTableFactory33.copy();
        java.lang.Class<?> wildcardClass35 = slimTableFactory34.getClass();
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertNotNull(slimTableFactory18);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNull(wildcardClass25);
        org.junit.Assert.assertNotNull(slimTableFactory26);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNotNull(slimTableFactory30);
        org.junit.Assert.assertNull(wildcardClass32);
        org.junit.Assert.assertNotNull(slimTableFactory33);
        org.junit.Assert.assertNotNull(slimTableFactory34);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test03762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03762");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory8.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap10;
        java.util.Map<java.lang.String, java.lang.String> strMap12 = slimTableFactory1.tableTypeArrays;
        java.lang.String str14 = slimTableFactory1.makeTableType("");
        boolean boolean16 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory17.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap19 = slimTableFactory18.tableTypes;
        boolean boolean21 = slimTableFactory18.hasColon("");
        boolean boolean23 = slimTableFactory18.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap24 = slimTableFactory18.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass27 = slimTableFactory25.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = slimTableFactory25.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = slimTableFactory28.tableTypeArrays;
        slimTableFactory18.tableTypeArrays = strMap29;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory31 = slimTableFactory18.copy();
        boolean boolean33 = slimTableFactory18.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap34 = slimTableFactory18.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory35 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass37 = slimTableFactory35.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap38 = slimTableFactory35.tableTypeArrays;
        java.lang.String str40 = slimTableFactory35.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory41 = slimTableFactory35.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap42 = slimTableFactory35.tableTypeArrays;
        slimTableFactory18.tableTypeArrays = strMap42;
        java.lang.String str45 = slimTableFactory18.makeTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass47 = slimTableFactory18.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap48 = slimTableFactory18.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap49 = slimTableFactory18.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap49;
        java.lang.String str52 = slimTableFactory1.getFullTableName("hi!");
        fitnesse.testsystems.slim.Table table53 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable54 = slimTableFactory1.parseDefineTableTypeTable(table53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(slimTableFactory18);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNull(wildcardClass27);
        org.junit.Assert.assertNotNull(slimTableFactory28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(slimTableFactory31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNull(wildcardClass37);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "hi!" + "'", str40, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory41);
        org.junit.Assert.assertNotNull(strMap42);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNull(wildcardClass47);
        org.junit.Assert.assertNotNull(strMap48);
        org.junit.Assert.assertNotNull(strMap49);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "hi!" + "'", str52, "hi!");
    }

    @Test
    public void test03763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03763");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory5.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass9 = slimTableFactory7.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory7.copy();
        boolean boolean12 = slimTableFactory7.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap13 = slimTableFactory7.tableTypeArrays;
        slimTableFactory5.tableTypeArrays = strMap13;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap15 = slimTableFactory5.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory5.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass18 = slimTableFactory5.getTableType("");
        boolean boolean20 = slimTableFactory5.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap21 = slimTableFactory5.tableTypes;
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strMap21);
    }

    @Test
    public void test03764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03764");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory0.getTableType("hi!");
        java.lang.String str9 = slimTableFactory0.getFullTableName("");
        java.lang.String str11 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory12.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap14 = null;
        slimTableFactory12.tableTypeArrays = strMap14;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass17 = slimTableFactory12.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory18.copy();
        boolean boolean21 = slimTableFactory19.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = slimTableFactory19.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = slimTableFactory19.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass26 = slimTableFactory24.getTableType("");
        boolean boolean28 = slimTableFactory24.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap29 = slimTableFactory24.tableTypeArrays;
        slimTableFactory23.tableTypeArrays = strMap29;
        slimTableFactory12.tableTypeArrays = strMap29;
        boolean boolean33 = slimTableFactory12.hasColon("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass35 = slimTableFactory12.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory36 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory37 = slimTableFactory36.copy();
        boolean boolean39 = slimTableFactory37.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory40 = slimTableFactory37.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory41 = slimTableFactory37.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory42 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass44 = slimTableFactory42.getTableType("");
        boolean boolean46 = slimTableFactory42.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap47 = slimTableFactory42.tableTypeArrays;
        slimTableFactory41.tableTypeArrays = strMap47;
        slimTableFactory12.tableTypeArrays = strMap47;
        slimTableFactory0.tableTypeArrays = strMap47;
        java.util.Map<java.lang.String, java.lang.String> strMap51 = null;
        slimTableFactory0.tableTypeArrays = strMap51;
        boolean boolean54 = slimTableFactory0.hasColon("");
        java.lang.Class<?> wildcardClass55 = slimTableFactory0.getClass();
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(slimTableFactory13);
        org.junit.Assert.assertNull(wildcardClass17);
        org.junit.Assert.assertNotNull(slimTableFactory19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(slimTableFactory22);
        org.junit.Assert.assertNotNull(slimTableFactory23);
        org.junit.Assert.assertNull(wildcardClass26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(wildcardClass35);
        org.junit.Assert.assertNotNull(slimTableFactory37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(slimTableFactory40);
        org.junit.Assert.assertNotNull(slimTableFactory41);
        org.junit.Assert.assertNull(wildcardClass44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test03765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03765");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory3.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap5 = slimTableFactory3.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap6 = slimTableFactory3.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass8 = slimTableFactory3.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory3.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap10 = slimTableFactory3.tableTypes;
        java.lang.String str12 = slimTableFactory3.makeTableType("hi!");
        java.lang.String str14 = slimTableFactory3.makeTableType("hi!");
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
    }

    @Test
    public void test03766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03766");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory1.copy();
        boolean boolean8 = slimTableFactory6.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass10 = slimTableFactory6.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory11.copy();
        boolean boolean14 = slimTableFactory12.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory12.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory12.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass18 = slimTableFactory12.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap19 = slimTableFactory12.tableTypeArrays;
        slimTableFactory6.tableTypeArrays = strMap19;
        fitnesse.testsystems.slim.Table table21 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable22 = slimTableFactory6.parseDefineTableTypeTable(table21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertNotNull(strMap19);
    }

    @Test
    public void test03767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03767");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory0.copy();
        boolean boolean9 = slimTableFactory0.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.Table table11 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext13 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable14 = slimTableFactory10.makeSlimTable(table11, "hi!", slimTestContext13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(slimTableFactory10);
    }

    @Test
    public void test03768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03768");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        boolean boolean6 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory1.tableTypeArrays;
        boolean boolean9 = slimTableFactory1.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap10 = slimTableFactory1.tableTypes;
        java.lang.Class<?> wildcardClass11 = slimTableFactory1.getClass();
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test03769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03769");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        boolean boolean6 = slimTableFactory1.hasColon("hi!");
        boolean boolean8 = slimTableFactory1.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory1.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass11 = slimTableFactory9.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap12 = slimTableFactory9.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass15 = slimTableFactory13.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory13.copy();
        boolean boolean18 = slimTableFactory16.hasColon("");
        boolean boolean20 = slimTableFactory16.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = slimTableFactory16.copy();
        java.lang.String str23 = slimTableFactory16.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap24 = slimTableFactory16.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = slimTableFactory25.copy();
        boolean boolean28 = slimTableFactory26.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap29 = slimTableFactory26.tableTypeArrays;
        java.lang.String str31 = slimTableFactory26.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory32 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory33 = slimTableFactory32.copy();
        boolean boolean35 = slimTableFactory33.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap36 = slimTableFactory33.tableTypeArrays;
        java.lang.String str38 = slimTableFactory33.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap39 = slimTableFactory33.tableTypeArrays;
        slimTableFactory26.tableTypeArrays = strMap39;
        java.util.Map<java.lang.String, java.lang.String> strMap41 = slimTableFactory26.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap42 = slimTableFactory26.tableTypes;
        java.lang.String str44 = slimTableFactory26.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory45 = slimTableFactory26.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory46 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory47 = slimTableFactory46.copy();
        boolean boolean49 = slimTableFactory47.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory50 = slimTableFactory47.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap51 = slimTableFactory47.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory52 = slimTableFactory47.copy();
        boolean boolean54 = slimTableFactory52.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap55 = slimTableFactory52.tableTypeArrays;
        slimTableFactory45.tableTypeArrays = strMap55;
        slimTableFactory16.tableTypeArrays = strMap55;
        slimTableFactory9.tableTypeArrays = strMap55;
        java.lang.String str60 = slimTableFactory9.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap61 = slimTableFactory9.tableTypeArrays;
        fitnesse.testsystems.slim.Table table62 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable63 = slimTableFactory9.parseDefineTableTypeTable(table62);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(slimTableFactory21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNotNull(slimTableFactory26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(slimTableFactory33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertNotNull(strMap42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi!" + "'", str44, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory45);
        org.junit.Assert.assertNotNull(slimTableFactory47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(slimTableFactory50);
        org.junit.Assert.assertNotNull(strMap51);
        org.junit.Assert.assertNotNull(slimTableFactory52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(strMap55);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(strMap61);
    }

    @Test
    public void test03770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03770");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        slimTableFactory0.tableTypeArrays = strMap2;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass5 = slimTableFactory0.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory6.copy();
        boolean boolean9 = slimTableFactory7.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory7.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory7.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory12.getTableType("");
        boolean boolean16 = slimTableFactory12.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap17 = slimTableFactory12.tableTypeArrays;
        slimTableFactory11.tableTypeArrays = strMap17;
        slimTableFactory0.tableTypeArrays = strMap17;
        boolean boolean21 = slimTableFactory0.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass24 = slimTableFactory22.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap25 = slimTableFactory22.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap25;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass28 = slimTableFactory0.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap29 = slimTableFactory0.tableTypes;
        boolean boolean31 = slimTableFactory0.hasColon("hi!");
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(wildcardClass24);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNull(wildcardClass28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test03771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03771");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory0.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass6 = slimTableFactory4.getTableType("hi!");
        java.lang.String str8 = slimTableFactory4.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory4.copy();
        fitnesse.testsystems.slim.Table table10 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext12 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable13 = slimTableFactory9.makeSlimTable(table10, "hi!", slimTestContext12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(slimTableFactory9);
    }

    @Test
    public void test03772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03772");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory5.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass9 = slimTableFactory7.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory7.copy();
        boolean boolean12 = slimTableFactory7.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap13 = slimTableFactory7.tableTypeArrays;
        slimTableFactory5.tableTypeArrays = strMap13;
        java.util.Map<java.lang.String, java.lang.String> strMap15 = slimTableFactory5.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass18 = slimTableFactory16.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory16.copy();
        boolean boolean21 = slimTableFactory16.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = slimTableFactory22.copy();
        boolean boolean25 = slimTableFactory23.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = slimTableFactory23.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = slimTableFactory23.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = slimTableFactory27.copy();
        boolean boolean30 = slimTableFactory27.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap31 = slimTableFactory27.tableTypeArrays;
        slimTableFactory16.tableTypeArrays = strMap31;
        slimTableFactory5.tableTypeArrays = strMap31;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass35 = slimTableFactory5.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory36 = slimTableFactory5.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory37 = slimTableFactory5.copy();
        boolean boolean39 = slimTableFactory5.hasColon("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass41 = slimTableFactory5.getTableType("hi!");
        fitnesse.testsystems.slim.Table table42 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable43 = slimTableFactory5.parseDefineTableTypeTable(table42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertNotNull(slimTableFactory19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(slimTableFactory23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(slimTableFactory26);
        org.junit.Assert.assertNotNull(slimTableFactory27);
        org.junit.Assert.assertNotNull(slimTableFactory28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNull(wildcardClass35);
        org.junit.Assert.assertNotNull(slimTableFactory36);
        org.junit.Assert.assertNotNull(slimTableFactory37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(wildcardClass41);
    }

    @Test
    public void test03773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03773");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        boolean boolean5 = slimTableFactory0.hasColon("");
        java.lang.String str7 = slimTableFactory0.makeTableType("");
        java.lang.String str9 = slimTableFactory0.makeTableType("");
        java.lang.String str11 = slimTableFactory0.makeTableType("");
        java.lang.String str13 = slimTableFactory0.getFullTableName("");
        java.lang.String str15 = slimTableFactory0.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.Table table17 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext19 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable20 = slimTableFactory0.makeSlimTable(table17, "hi!", slimTestContext19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(strMap16);
    }

    @Test
    public void test03774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03774");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        boolean boolean5 = slimTableFactory0.hasColon("");
        java.lang.String str7 = slimTableFactory0.makeTableType("");
        java.lang.String str9 = slimTableFactory0.makeTableType("");
        java.lang.String str11 = slimTableFactory0.makeTableType("");
        java.lang.String str13 = slimTableFactory0.getFullTableName("");
        java.lang.String str15 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = slimTableFactory16.copy();
        boolean boolean19 = slimTableFactory17.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap20 = slimTableFactory17.tableTypeArrays;
        java.lang.String str22 = slimTableFactory17.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = slimTableFactory23.copy();
        boolean boolean26 = slimTableFactory24.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap27 = slimTableFactory24.tableTypeArrays;
        java.lang.String str29 = slimTableFactory24.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap30 = slimTableFactory24.tableTypeArrays;
        slimTableFactory17.tableTypeArrays = strMap30;
        slimTableFactory0.tableTypeArrays = strMap30;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass34 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap35 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory36 = slimTableFactory0.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass38 = slimTableFactory0.getTableType("hi!");
        fitnesse.testsystems.slim.Table table39 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable40 = slimTableFactory0.parseDefineTableTypeTable(table39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(slimTableFactory17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(slimTableFactory24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNull(wildcardClass34);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(slimTableFactory36);
        org.junit.Assert.assertNull(wildcardClass38);
    }

    @Test
    public void test03775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03775");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory4.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap6 = slimTableFactory5.tableTypes;
        boolean boolean8 = slimTableFactory5.hasColon("");
        boolean boolean10 = slimTableFactory5.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap11 = slimTableFactory5.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory12.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory12.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory15.tableTypeArrays;
        slimTableFactory5.tableTypeArrays = strMap16;
        slimTableFactory0.tableTypeArrays = strMap16;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap19 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = slimTableFactory20.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass24 = slimTableFactory22.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = slimTableFactory22.copy();
        boolean boolean27 = slimTableFactory22.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass29 = slimTableFactory22.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap30 = slimTableFactory22.tableTypeArrays;
        java.lang.String str32 = slimTableFactory22.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap33 = slimTableFactory22.tableTypeArrays;
        slimTableFactory20.tableTypeArrays = strMap33;
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(slimTableFactory20);
        org.junit.Assert.assertNotNull(slimTableFactory21);
        org.junit.Assert.assertNull(wildcardClass24);
        org.junit.Assert.assertNotNull(slimTableFactory25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(wildcardClass29);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(strMap33);
    }

    @Test
    public void test03776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03776");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap6 = slimTableFactory0.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass8 = slimTableFactory0.getTableType("");
        java.lang.String str10 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap12 = null;
        slimTableFactory0.tableTypeArrays = strMap12;
        fitnesse.testsystems.slim.Table table14 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable15 = slimTableFactory0.parseDefineTableTypeTable(table14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNotNull(strMap11);
    }

    @Test
    public void test03777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03777");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap5 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory6.copy();
        boolean boolean9 = slimTableFactory7.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory7.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory7.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory11.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass15 = slimTableFactory13.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory13.copy();
        boolean boolean18 = slimTableFactory13.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap19 = slimTableFactory13.tableTypeArrays;
        slimTableFactory11.tableTypeArrays = strMap19;
        slimTableFactory0.tableTypeArrays = strMap19;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass23 = slimTableFactory0.getTableType("hi!");
        boolean boolean25 = slimTableFactory0.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap26 = slimTableFactory0.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass28 = slimTableFactory0.getTableType("hi!");
        java.lang.String str30 = slimTableFactory0.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap31 = slimTableFactory0.tableTypes;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap32 = slimTableFactory0.tableTypes;
        java.lang.Class<?> wildcardClass33 = slimTableFactory0.getClass();
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNull(wildcardClass28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test03778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03778");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory0.getTableType("hi!");
        java.lang.String str9 = slimTableFactory0.getFullTableName("");
        java.lang.String str11 = slimTableFactory0.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap12 = slimTableFactory0.tableTypeArrays;
        java.lang.String str14 = slimTableFactory0.getFullTableName("");
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test03779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03779");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory1.copy();
        boolean boolean8 = slimTableFactory6.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap9 = slimTableFactory6.tableTypes;
        java.lang.String str11 = slimTableFactory6.makeTableType("hi!");
        java.lang.String str13 = slimTableFactory6.getFullTableName("hi!");
        java.lang.String str15 = slimTableFactory6.getFullTableName("hi!");
        java.lang.String str17 = slimTableFactory6.makeTableType("");
        fitnesse.testsystems.slim.Table table18 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext20 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable21 = slimTableFactory6.makeSlimTable(table18, "", slimTestContext20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test03780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03780");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        boolean boolean6 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory1.tableTypeArrays;
        boolean boolean9 = slimTableFactory1.hasColon("");
        java.lang.String str11 = slimTableFactory1.getFullTableName("hi!");
        boolean boolean13 = slimTableFactory1.hasColon("");
        fitnesse.testsystems.slim.Table table14 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext16 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable17 = slimTableFactory1.makeSlimTable(table14, "", slimTestContext16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test03781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03781");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        boolean boolean4 = slimTableFactory0.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory0.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.Table table9 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext11 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable12 = slimTableFactory0.makeSlimTable(table9, "", slimTestContext11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNotNull(strMap8);
    }

    @Test
    public void test03782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03782");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory0.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap10 = slimTableFactory9.tableTypes;
        boolean boolean12 = slimTableFactory9.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap13 = slimTableFactory9.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory9.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory15.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap17 = slimTableFactory16.tableTypes;
        boolean boolean19 = slimTableFactory16.hasColon("");
        boolean boolean21 = slimTableFactory16.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap22 = slimTableFactory16.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass25 = slimTableFactory23.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = slimTableFactory23.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap27 = slimTableFactory26.tableTypeArrays;
        slimTableFactory16.tableTypeArrays = strMap27;
        slimTableFactory9.tableTypeArrays = strMap27;
        slimTableFactory0.tableTypeArrays = strMap27;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory31 = slimTableFactory0.copy();
        java.lang.String str33 = slimTableFactory31.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory34 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory35 = slimTableFactory34.copy();
        boolean boolean37 = slimTableFactory35.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory38 = slimTableFactory35.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory39 = slimTableFactory35.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory40 = slimTableFactory35.copy();
        boolean boolean42 = slimTableFactory40.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory43 = slimTableFactory40.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap44 = slimTableFactory43.tableTypeArrays;
        slimTableFactory31.tableTypeArrays = strMap44;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass47 = slimTableFactory31.getTableType("hi!");
        java.lang.String str49 = slimTableFactory31.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory50 = slimTableFactory31.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass52 = slimTableFactory31.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory53 = slimTableFactory31.copy();
        java.lang.Class<?> wildcardClass54 = slimTableFactory31.getClass();
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNull(wildcardClass25);
        org.junit.Assert.assertNotNull(slimTableFactory26);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(slimTableFactory31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(slimTableFactory38);
        org.junit.Assert.assertNotNull(slimTableFactory39);
        org.junit.Assert.assertNotNull(slimTableFactory40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(slimTableFactory43);
        org.junit.Assert.assertNotNull(strMap44);
        org.junit.Assert.assertNull(wildcardClass47);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hi!" + "'", str49, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory50);
        org.junit.Assert.assertNull(wildcardClass52);
        org.junit.Assert.assertNotNull(slimTableFactory53);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test03783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03783");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory0.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass6 = slimTableFactory4.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory7.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap9 = null;
        slimTableFactory7.tableTypeArrays = strMap9;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass12 = slimTableFactory7.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory13.copy();
        boolean boolean16 = slimTableFactory14.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = slimTableFactory14.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory14.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass21 = slimTableFactory19.getTableType("");
        boolean boolean23 = slimTableFactory19.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap24 = slimTableFactory19.tableTypeArrays;
        slimTableFactory18.tableTypeArrays = strMap24;
        slimTableFactory7.tableTypeArrays = strMap24;
        slimTableFactory4.tableTypeArrays = strMap24;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory29 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass31 = slimTableFactory29.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory32 = slimTableFactory29.copy();
        boolean boolean34 = slimTableFactory29.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap35 = slimTableFactory29.tableTypeArrays;
        slimTableFactory28.tableTypeArrays = strMap35;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory37 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory38 = slimTableFactory37.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap39 = slimTableFactory38.tableTypes;
        boolean boolean41 = slimTableFactory38.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap42 = slimTableFactory38.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap43 = slimTableFactory38.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap44 = slimTableFactory38.tableTypeArrays;
        slimTableFactory28.tableTypeArrays = strMap44;
        slimTableFactory4.tableTypeArrays = strMap44;
        java.lang.String str48 = slimTableFactory4.makeTableType("hi!");
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(slimTableFactory17);
        org.junit.Assert.assertNotNull(slimTableFactory18);
        org.junit.Assert.assertNull(wildcardClass21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNotNull(slimTableFactory32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(slimTableFactory38);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(strMap42);
        org.junit.Assert.assertNotNull(strMap43);
        org.junit.Assert.assertNotNull(strMap44);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "hi!" + "'", str48, "hi!");
    }

    @Test
    public void test03784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03784");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        boolean boolean6 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        boolean boolean11 = slimTableFactory9.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory9.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory9.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory13.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory14.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory14.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap16;
        java.util.Map<java.lang.String, java.lang.String> strMap18 = slimTableFactory1.tableTypeArrays;
        java.lang.Class<?> wildcardClass19 = strMap18.getClass();
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertNotNull(slimTableFactory13);
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test03785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03785");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass4 = slimTableFactory1.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap5 = slimTableFactory1.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap6 = slimTableFactory1.tableTypes;
        boolean boolean8 = slimTableFactory1.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap9 = slimTableFactory1.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass11 = slimTableFactory1.getTableType("hi!");
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(wildcardClass11);
    }

    @Test
    public void test03786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03786");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory5.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap8 = slimTableFactory5.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass11 = slimTableFactory9.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap12 = slimTableFactory9.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory9.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory9.tableTypeArrays;
        slimTableFactory5.tableTypeArrays = strMap14;
        java.lang.String str17 = slimTableFactory5.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory5.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory19.copy();
        boolean boolean22 = slimTableFactory20.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap23 = slimTableFactory20.tableTypeArrays;
        java.lang.String str25 = slimTableFactory20.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap26 = slimTableFactory20.tableTypeArrays;
        slimTableFactory5.tableTypeArrays = strMap26;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = slimTableFactory5.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory29 = slimTableFactory5.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory30 = slimTableFactory29.copy();
        java.lang.String str32 = slimTableFactory29.getFullTableName("");
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(slimTableFactory13);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory18);
        org.junit.Assert.assertNotNull(slimTableFactory20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(slimTableFactory28);
        org.junit.Assert.assertNotNull(slimTableFactory29);
        org.junit.Assert.assertNotNull(slimTableFactory30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
    }

    @Test
    public void test03787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03787");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        slimTableFactory0.tableTypeArrays = strMap2;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass5 = slimTableFactory0.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory6.copy();
        boolean boolean9 = slimTableFactory7.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory7.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory7.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory12.getTableType("");
        boolean boolean16 = slimTableFactory12.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap17 = slimTableFactory12.tableTypeArrays;
        slimTableFactory11.tableTypeArrays = strMap17;
        slimTableFactory0.tableTypeArrays = strMap17;
        boolean boolean21 = slimTableFactory0.hasColon("");
        boolean boolean23 = slimTableFactory0.hasColon("");
        java.lang.String str25 = slimTableFactory0.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = slimTableFactory0.copy();
        boolean boolean28 = slimTableFactory0.hasColon("");
        boolean boolean30 = slimTableFactory0.hasColon("hi!");
        boolean boolean32 = slimTableFactory0.hasColon("");
        java.lang.String str34 = slimTableFactory0.makeTableType("hi!");
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
    }

    @Test
    public void test03788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03788");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass5 = slimTableFactory3.getTableType("");
        boolean boolean7 = slimTableFactory3.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory3.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap8;
        java.lang.String str11 = slimTableFactory1.makeTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass13 = slimTableFactory1.getTableType("");
        java.lang.String str15 = slimTableFactory1.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap16 = slimTableFactory1.tableTypes;
        java.lang.String str18 = slimTableFactory1.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.Table table20 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable21 = slimTableFactory19.parseDefineTableTypeTable(table20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(slimTableFactory19);
    }

    @Test
    public void test03789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03789");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("hi!");
        java.lang.String str7 = slimTableFactory0.getFullTableName("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass9 = slimTableFactory0.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.Table table12 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory0.parseDefineTableTypeRow(table12, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strMap11);
    }

    @Test
    public void test03790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03790");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory3.copy();
        java.lang.String str6 = slimTableFactory3.makeTableType("");
        java.lang.String str8 = slimTableFactory3.makeTableType("");
        java.lang.String str10 = slimTableFactory3.makeTableType("");
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test03791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03791");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        boolean boolean6 = slimTableFactory1.hasColon("hi!");
        boolean boolean8 = slimTableFactory1.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory1.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass11 = slimTableFactory9.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory9.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap13 = slimTableFactory9.tableTypes;
        fitnesse.testsystems.slim.Table table14 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory9.parseDefineTableTypeRow(table14, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertNotNull(strMap13);
    }

    @Test
    public void test03792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03792");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap5 = slimTableFactory1.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory1.copy();
        java.lang.String str11 = slimTableFactory1.getFullTableName("");
        java.lang.Class<?> wildcardClass12 = slimTableFactory1.getClass();
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test03793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03793");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass5 = slimTableFactory3.getTableType("");
        boolean boolean7 = slimTableFactory3.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory3.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap8;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory10.copy();
        fitnesse.testsystems.slim.Table table12 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory10.parseDefineTableTypeRow(table12, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNotNull(slimTableFactory11);
    }

    @Test
    public void test03794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03794");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory3.copy();
        java.lang.String str6 = slimTableFactory3.makeTableType("");
        java.lang.String str8 = slimTableFactory3.makeTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass10 = slimTableFactory3.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap11 = slimTableFactory3.tableTypes;
        fitnesse.testsystems.slim.Table table12 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory3.parseDefineTableTypeRow(table12, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNotNull(strMap11);
    }

    @Test
    public void test03795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03795");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory4.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap6 = slimTableFactory5.tableTypes;
        boolean boolean8 = slimTableFactory5.hasColon("");
        boolean boolean10 = slimTableFactory5.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap11 = slimTableFactory5.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory12.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory12.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory15.tableTypeArrays;
        slimTableFactory5.tableTypeArrays = strMap16;
        slimTableFactory0.tableTypeArrays = strMap16;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory19.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap21 = slimTableFactory19.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap22 = slimTableFactory19.tableTypeArrays;
        fitnesse.testsystems.slim.Table table23 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory19.parseDefineTableTypeRow(table23, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(slimTableFactory19);
        org.junit.Assert.assertNotNull(slimTableFactory20);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(strMap22);
    }

    @Test
    public void test03796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03796");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass5 = slimTableFactory3.getTableType("");
        boolean boolean7 = slimTableFactory3.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory3.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap8;
        java.lang.String str11 = slimTableFactory1.makeTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass13 = slimTableFactory1.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.Table table15 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable16 = slimTableFactory1.parseDefineTableTypeTable(table15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertNotNull(slimTableFactory14);
    }

    @Test
    public void test03797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03797");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory9.copy();
        boolean boolean12 = slimTableFactory10.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap13 = slimTableFactory10.tableTypeArrays;
        java.lang.String str15 = slimTableFactory10.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = slimTableFactory16.copy();
        boolean boolean19 = slimTableFactory17.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap20 = slimTableFactory17.tableTypeArrays;
        java.lang.String str22 = slimTableFactory17.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap23 = slimTableFactory17.tableTypeArrays;
        slimTableFactory10.tableTypeArrays = strMap23;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = slimTableFactory10.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass27 = slimTableFactory25.getTableType("");
        boolean boolean29 = slimTableFactory25.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap30 = slimTableFactory25.tableTypeArrays;
        slimTableFactory8.tableTypeArrays = strMap30;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory32 = slimTableFactory8.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass34 = slimTableFactory8.getTableType("");
        fitnesse.testsystems.slim.Table table35 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext37 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable38 = slimTableFactory8.makeSlimTable(table35, "", slimTestContext37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(slimTableFactory17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(slimTableFactory25);
        org.junit.Assert.assertNull(wildcardClass27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(slimTableFactory32);
        org.junit.Assert.assertNull(wildcardClass34);
    }

    @Test
    public void test03798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03798");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap5 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory1.copy();
        boolean boolean8 = slimTableFactory6.hasColon("hi!");
        java.lang.String str10 = slimTableFactory6.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap11 = slimTableFactory6.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass13 = slimTableFactory6.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory6.tableTypeArrays;
        fitnesse.testsystems.slim.Table table15 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext17 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable18 = slimTableFactory6.makeSlimTable(table15, "", slimTestContext17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertNotNull(strMap14);
    }

    @Test
    public void test03799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03799");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = slimTableFactory0.tableTypeArrays;
        boolean boolean4 = slimTableFactory0.hasColon("");
        boolean boolean6 = slimTableFactory0.hasColon("hi!");
        boolean boolean8 = slimTableFactory0.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap9 = slimTableFactory0.tableTypeArrays;
        java.lang.String str11 = slimTableFactory0.makeTableType("");
        java.lang.Class<?> wildcardClass12 = slimTableFactory0.getClass();
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test03800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03800");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.lang.String str3 = slimTableFactory0.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory4.copy();
        boolean boolean7 = slimTableFactory5.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory5.copy();
        java.lang.String str10 = slimTableFactory5.getFullTableName("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass12 = slimTableFactory5.getTableType("hi!");
        fitnesse.testsystems.slim.Table table13 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext15 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable16 = slimTableFactory5.makeSlimTable(table13, "", slimTestContext15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!" + "'", str3, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(wildcardClass12);
    }

    @Test
    public void test03801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03801");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory3.copy();
        java.lang.String str6 = slimTableFactory3.makeTableType("");
        java.lang.String str8 = slimTableFactory3.makeTableType("");
        boolean boolean10 = slimTableFactory3.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory3.tableTypeArrays;
        boolean boolean13 = slimTableFactory3.hasColon("");
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test03802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03802");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = slimTableFactory0.tableTypeArrays;
        boolean boolean4 = slimTableFactory0.hasColon("");
        boolean boolean6 = slimTableFactory0.hasColon("hi!");
        java.lang.String str8 = slimTableFactory0.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.Table table10 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable11 = slimTableFactory9.parseDefineTableTypeTable(table10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory9);
    }

    @Test
    public void test03803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03803");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory2 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass4 = slimTableFactory2.getTableType("");
        boolean boolean6 = slimTableFactory2.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory2.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap7;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass10 = slimTableFactory0.getTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass12 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory0.copy();
        java.lang.Class<?> wildcardClass14 = slimTableFactory13.getClass();
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNotNull(slimTableFactory13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test03804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03804");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap5 = slimTableFactory1.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory1.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = null;
        slimTableFactory8.tableTypeArrays = strMap10;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass13 = slimTableFactory8.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory14.copy();
        boolean boolean17 = slimTableFactory15.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory15.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory15.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass22 = slimTableFactory20.getTableType("");
        boolean boolean24 = slimTableFactory20.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap25 = slimTableFactory20.tableTypeArrays;
        slimTableFactory19.tableTypeArrays = strMap25;
        slimTableFactory8.tableTypeArrays = strMap25;
        boolean boolean29 = slimTableFactory8.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory30 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass32 = slimTableFactory30.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap33 = slimTableFactory30.tableTypeArrays;
        slimTableFactory8.tableTypeArrays = strMap33;
        slimTableFactory1.tableTypeArrays = strMap33;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory36 = slimTableFactory1.copy();
        boolean boolean38 = slimTableFactory1.hasColon("");
        java.lang.String str40 = slimTableFactory1.makeTableType("");
        fitnesse.testsystems.slim.Table table41 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext43 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable44 = slimTableFactory1.makeSlimTable(table41, "hi!", slimTestContext43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(slimTableFactory18);
        org.junit.Assert.assertNotNull(slimTableFactory19);
        org.junit.Assert.assertNull(wildcardClass22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(wildcardClass32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(slimTableFactory36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
    }

    @Test
    public void test03805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03805");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory1.tableTypeArrays;
        java.lang.String str6 = slimTableFactory1.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory7.copy();
        boolean boolean10 = slimTableFactory8.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory8.tableTypeArrays;
        java.lang.String str13 = slimTableFactory8.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory8.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap14;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory18.copy();
        boolean boolean21 = slimTableFactory19.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap22 = slimTableFactory19.tableTypeArrays;
        slimTableFactory17.tableTypeArrays = strMap22;
        java.util.Map<java.lang.String, java.lang.String> strMap24 = slimTableFactory17.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass26 = slimTableFactory17.getTableType("hi!");
        fitnesse.testsystems.slim.Table table27 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext29 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable30 = slimTableFactory17.makeSlimTable(table27, "", slimTestContext29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertNotNull(slimTableFactory17);
        org.junit.Assert.assertNotNull(slimTableFactory19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNull(wildcardClass26);
    }

    @Test
    public void test03806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03806");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory0.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap10 = slimTableFactory9.tableTypes;
        boolean boolean12 = slimTableFactory9.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap13 = slimTableFactory9.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory9.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory15.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap17 = slimTableFactory16.tableTypes;
        boolean boolean19 = slimTableFactory16.hasColon("");
        boolean boolean21 = slimTableFactory16.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap22 = slimTableFactory16.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass25 = slimTableFactory23.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = slimTableFactory23.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap27 = slimTableFactory26.tableTypeArrays;
        slimTableFactory16.tableTypeArrays = strMap27;
        slimTableFactory9.tableTypeArrays = strMap27;
        slimTableFactory0.tableTypeArrays = strMap27;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory31 = slimTableFactory0.copy();
        java.lang.String str33 = slimTableFactory31.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory34 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory35 = slimTableFactory34.copy();
        boolean boolean37 = slimTableFactory35.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory38 = slimTableFactory35.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory39 = slimTableFactory35.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory40 = slimTableFactory35.copy();
        boolean boolean42 = slimTableFactory40.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory43 = slimTableFactory40.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap44 = slimTableFactory43.tableTypeArrays;
        slimTableFactory31.tableTypeArrays = strMap44;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass47 = slimTableFactory31.getTableType("hi!");
        java.lang.String str49 = slimTableFactory31.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory50 = slimTableFactory31.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass52 = slimTableFactory31.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory53 = slimTableFactory31.copy();
        fitnesse.testsystems.slim.Table table54 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext56 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable57 = slimTableFactory31.makeSlimTable(table54, "", slimTestContext56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNull(wildcardClass25);
        org.junit.Assert.assertNotNull(slimTableFactory26);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(slimTableFactory31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(slimTableFactory38);
        org.junit.Assert.assertNotNull(slimTableFactory39);
        org.junit.Assert.assertNotNull(slimTableFactory40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(slimTableFactory43);
        org.junit.Assert.assertNotNull(strMap44);
        org.junit.Assert.assertNull(wildcardClass47);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hi!" + "'", str49, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory50);
        org.junit.Assert.assertNull(wildcardClass52);
        org.junit.Assert.assertNotNull(slimTableFactory53);
    }

    @Test
    public void test03807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03807");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        boolean boolean4 = slimTableFactory0.hasColon("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass6 = slimTableFactory0.getTableType("hi!");
        java.lang.String str8 = slimTableFactory0.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory0.copy();
        java.lang.String str11 = slimTableFactory0.getFullTableName("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass13 = slimTableFactory0.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.Table table15 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory14.parseDefineTableTypeRow(table15, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertNotNull(slimTableFactory14);
    }

    @Test
    public void test03808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03808");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        slimTableFactory0.tableTypeArrays = strMap2;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass5 = slimTableFactory0.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory6.copy();
        boolean boolean9 = slimTableFactory7.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory7.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory7.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory12.getTableType("");
        boolean boolean16 = slimTableFactory12.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap17 = slimTableFactory12.tableTypeArrays;
        slimTableFactory11.tableTypeArrays = strMap17;
        slimTableFactory0.tableTypeArrays = strMap17;
        boolean boolean21 = slimTableFactory0.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass24 = slimTableFactory22.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap25 = slimTableFactory22.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap25;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap27 = slimTableFactory0.tableTypes;
        java.lang.String str29 = slimTableFactory0.getFullTableName("hi!");
        java.lang.Class<?> wildcardClass30 = slimTableFactory0.getClass();
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(wildcardClass24);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test03809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03809");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory5.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass9 = slimTableFactory7.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory7.copy();
        boolean boolean12 = slimTableFactory7.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap13 = slimTableFactory7.tableTypeArrays;
        slimTableFactory5.tableTypeArrays = strMap13;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap15 = slimTableFactory5.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory5.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap17 = slimTableFactory16.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap18 = slimTableFactory16.tableTypeArrays;
        fitnesse.testsystems.slim.Table table19 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory16.parseDefineTableTypeRow(table19, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(strMap18);
    }

    @Test
    public void test03810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03810");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        boolean boolean4 = slimTableFactory0.hasColon("");
        java.lang.String str6 = slimTableFactory0.getFullTableName("hi!");
        fitnesse.testsystems.slim.Table table7 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext9 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable10 = slimTableFactory0.makeSlimTable(table7, "hi!", slimTestContext9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
    }

    @Test
    public void test03811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03811");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap5 = slimTableFactory1.tableTypeArrays;
        java.lang.String str7 = slimTableFactory1.getFullTableName("hi!");
        fitnesse.testsystems.slim.Table table8 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory1.parseDefineTableTypeRow(table8, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
    }

    @Test
    public void test03812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03812");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("hi!");
        java.lang.String str7 = slimTableFactory0.getFullTableName("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass9 = slimTableFactory0.getTableType("hi!");
        java.lang.String str11 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.Table table13 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory0.parseDefineTableTypeRow(table13, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(slimTableFactory12);
    }

    @Test
    public void test03813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03813");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        slimTableFactory0.tableTypeArrays = strMap2;
        boolean boolean5 = slimTableFactory0.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory0.tableTypeArrays;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass7 = strMap6.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(strMap6);
    }

    @Test
    public void test03814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03814");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory3.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory5.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory5.tableTypeArrays;
        slimTableFactory3.tableTypeArrays = strMap7;
        boolean boolean10 = slimTableFactory3.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory3.copy();
        java.lang.String str13 = slimTableFactory3.getFullTableName("");
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test03815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03815");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        boolean boolean5 = slimTableFactory0.hasColon("");
        java.lang.String str7 = slimTableFactory0.makeTableType("");
        java.lang.String str9 = slimTableFactory0.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.Table table11 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext13 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable14 = slimTableFactory0.makeSlimTable(table11, "hi!", slimTestContext13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(strMap10);
    }

    @Test
    public void test03816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03816");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        boolean boolean6 = slimTableFactory1.hasColon("hi!");
        boolean boolean8 = slimTableFactory1.hasColon("");
        java.lang.String str10 = slimTableFactory1.getFullTableName("");
        boolean boolean12 = slimTableFactory1.hasColon("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory1.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.Table table17 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable18 = slimTableFactory1.parseDefineTableTypeTable(table17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertNotNull(strMap16);
    }

    @Test
    public void test03817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03817");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("hi!");
        java.lang.String str7 = slimTableFactory0.getFullTableName("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass9 = slimTableFactory0.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory11.copy();
        boolean boolean14 = slimTableFactory12.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory12.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory12.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = slimTableFactory16.copy();
        boolean boolean19 = slimTableFactory16.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap20 = slimTableFactory16.tableTypeArrays;
        java.lang.String str22 = slimTableFactory16.getFullTableName("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass24 = slimTableFactory16.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass27 = slimTableFactory25.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = slimTableFactory25.copy();
        boolean boolean30 = slimTableFactory25.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass32 = slimTableFactory25.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap33 = slimTableFactory25.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory34 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory35 = slimTableFactory34.copy();
        boolean boolean37 = slimTableFactory35.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap38 = slimTableFactory35.tableTypeArrays;
        java.lang.String str40 = slimTableFactory35.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap41 = slimTableFactory35.tableTypeArrays;
        slimTableFactory25.tableTypeArrays = strMap41;
        slimTableFactory16.tableTypeArrays = strMap41;
        slimTableFactory0.tableTypeArrays = strMap41;
        java.lang.String str46 = slimTableFactory0.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory47 = slimTableFactory0.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass49 = slimTableFactory47.getTableType("");
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertNotNull(slimTableFactory17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertNull(wildcardClass24);
        org.junit.Assert.assertNull(wildcardClass27);
        org.junit.Assert.assertNotNull(slimTableFactory28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(wildcardClass32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(slimTableFactory35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hi!" + "'", str46, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory47);
        org.junit.Assert.assertNull(wildcardClass49);
    }

    @Test
    public void test03818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03818");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass4 = slimTableFactory1.getTableType("hi!");
        java.lang.String str6 = slimTableFactory1.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.Table table8 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext10 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable11 = slimTableFactory1.makeSlimTable(table8, "hi!", slimTestContext10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(slimTableFactory7);
    }

    @Test
    public void test03819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03819");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap5 = slimTableFactory1.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.Table table11 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable12 = slimTableFactory1.parseDefineTableTypeTable(table11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(strMap10);
    }

    @Test
    public void test03820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03820");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory5.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory6.tableTypeArrays;
        java.lang.Class<?> wildcardClass8 = slimTableFactory6.getClass();
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test03821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03821");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap4 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.Table table6 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext8 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable9 = slimTableFactory1.makeSlimTable(table6, "hi!", slimTestContext8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
    }

    @Test
    public void test03822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03822");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        boolean boolean4 = slimTableFactory0.hasColon("");
        java.lang.String str6 = slimTableFactory0.getFullTableName("hi!");
        java.lang.String str8 = slimTableFactory0.getFullTableName("");
        boolean boolean10 = slimTableFactory0.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap12 = slimTableFactory11.tableTypes;
        fitnesse.testsystems.slim.Table table13 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable14 = slimTableFactory11.parseDefineTableTypeTable(table13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNotNull(strMap12);
    }

    @Test
    public void test03823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03823");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        boolean boolean4 = slimTableFactory0.hasColon("");
        java.lang.String str6 = slimTableFactory0.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap8 = slimTableFactory0.tableTypes;
        boolean boolean10 = slimTableFactory0.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap12 = slimTableFactory0.tableTypeArrays;
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(strMap12);
    }

    @Test
    public void test03824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03824");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory1.tableTypeArrays;
        java.lang.String str6 = slimTableFactory1.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory7.copy();
        boolean boolean10 = slimTableFactory8.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory8.tableTypeArrays;
        java.lang.String str13 = slimTableFactory8.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory8.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap14;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory1.copy();
        java.lang.String str18 = slimTableFactory1.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap19 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = slimTableFactory20.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap22 = slimTableFactory21.tableTypes;
        boolean boolean24 = slimTableFactory21.hasColon("");
        boolean boolean26 = slimTableFactory21.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap27 = slimTableFactory21.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass30 = slimTableFactory28.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory31 = slimTableFactory28.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap32 = slimTableFactory31.tableTypeArrays;
        slimTableFactory21.tableTypeArrays = strMap32;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory34 = slimTableFactory21.copy();
        boolean boolean36 = slimTableFactory21.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap37 = slimTableFactory21.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory38 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass40 = slimTableFactory38.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap41 = slimTableFactory38.tableTypeArrays;
        java.lang.String str43 = slimTableFactory38.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory44 = slimTableFactory38.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap45 = slimTableFactory38.tableTypeArrays;
        slimTableFactory21.tableTypeArrays = strMap45;
        slimTableFactory1.tableTypeArrays = strMap45;
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(slimTableFactory21);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNull(wildcardClass30);
        org.junit.Assert.assertNotNull(slimTableFactory31);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(slimTableFactory34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNull(wildcardClass40);
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hi!" + "'", str43, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory44);
        org.junit.Assert.assertNotNull(strMap45);
    }

    @Test
    public void test03825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03825");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("hi!");
        java.lang.String str7 = slimTableFactory0.getFullTableName("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass9 = slimTableFactory0.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory0.tableTypeArrays;
        java.lang.String str13 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.Table table14 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory0.parseDefineTableTypeRow(table14, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test03826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03826");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory1.tableTypeArrays;
        java.lang.String str6 = slimTableFactory1.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory1.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass10 = slimTableFactory1.getTableType("hi!");
        java.lang.String str12 = slimTableFactory1.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory13.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap15 = null;
        slimTableFactory13.tableTypeArrays = strMap15;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass18 = slimTableFactory13.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory19.copy();
        boolean boolean22 = slimTableFactory20.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = slimTableFactory20.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = slimTableFactory20.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass27 = slimTableFactory25.getTableType("");
        boolean boolean29 = slimTableFactory25.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap30 = slimTableFactory25.tableTypeArrays;
        slimTableFactory24.tableTypeArrays = strMap30;
        slimTableFactory13.tableTypeArrays = strMap30;
        boolean boolean34 = slimTableFactory13.hasColon("");
        boolean boolean36 = slimTableFactory13.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory37 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass39 = slimTableFactory37.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory40 = slimTableFactory37.copy();
        boolean boolean42 = slimTableFactory37.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass44 = slimTableFactory37.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap45 = slimTableFactory37.tableTypeArrays;
        slimTableFactory13.tableTypeArrays = strMap45;
        slimTableFactory1.tableTypeArrays = strMap45;
        java.lang.String str49 = slimTableFactory1.makeTableType("hi!");
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertNotNull(slimTableFactory20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(slimTableFactory23);
        org.junit.Assert.assertNotNull(slimTableFactory24);
        org.junit.Assert.assertNull(wildcardClass27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(wildcardClass39);
        org.junit.Assert.assertNotNull(slimTableFactory40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(wildcardClass44);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hi!" + "'", str49, "hi!");
    }

    @Test
    public void test03827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03827");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory1.copy();
        boolean boolean8 = slimTableFactory6.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap9 = slimTableFactory6.tableTypes;
        java.lang.String str11 = slimTableFactory6.makeTableType("hi!");
        java.lang.String str13 = slimTableFactory6.getFullTableName("hi!");
        java.lang.String str15 = slimTableFactory6.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass18 = slimTableFactory16.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap19 = slimTableFactory16.tableTypeArrays;
        boolean boolean21 = slimTableFactory16.hasColon("");
        java.lang.String str23 = slimTableFactory16.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = slimTableFactory16.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = slimTableFactory24.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap26 = slimTableFactory25.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = slimTableFactory27.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = null;
        slimTableFactory27.tableTypeArrays = strMap29;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass32 = slimTableFactory27.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory33 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory34 = slimTableFactory33.copy();
        boolean boolean36 = slimTableFactory34.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory37 = slimTableFactory34.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory38 = slimTableFactory34.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory39 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass41 = slimTableFactory39.getTableType("");
        boolean boolean43 = slimTableFactory39.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap44 = slimTableFactory39.tableTypeArrays;
        slimTableFactory38.tableTypeArrays = strMap44;
        slimTableFactory27.tableTypeArrays = strMap44;
        boolean boolean48 = slimTableFactory27.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory49 = slimTableFactory27.copy();
        java.lang.String str51 = slimTableFactory27.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap52 = slimTableFactory27.tableTypes;
        boolean boolean54 = slimTableFactory27.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory55 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory56 = slimTableFactory55.copy();
        boolean boolean58 = slimTableFactory56.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory59 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass61 = slimTableFactory59.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory62 = slimTableFactory59.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory63 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory64 = slimTableFactory63.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap65 = slimTableFactory64.tableTypes;
        boolean boolean67 = slimTableFactory64.hasColon("");
        boolean boolean69 = slimTableFactory64.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap70 = slimTableFactory64.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory71 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass73 = slimTableFactory71.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory74 = slimTableFactory71.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap75 = slimTableFactory74.tableTypeArrays;
        slimTableFactory64.tableTypeArrays = strMap75;
        slimTableFactory59.tableTypeArrays = strMap75;
        slimTableFactory56.tableTypeArrays = strMap75;
        slimTableFactory27.tableTypeArrays = strMap75;
        slimTableFactory25.tableTypeArrays = strMap75;
        slimTableFactory6.tableTypeArrays = strMap75;
        java.lang.Class<?> wildcardClass82 = strMap75.getClass();
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(slimTableFactory24);
        org.junit.Assert.assertNotNull(slimTableFactory25);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(slimTableFactory28);
        org.junit.Assert.assertNull(wildcardClass32);
        org.junit.Assert.assertNotNull(slimTableFactory34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(slimTableFactory37);
        org.junit.Assert.assertNotNull(slimTableFactory38);
        org.junit.Assert.assertNull(wildcardClass41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(strMap44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(slimTableFactory49);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(strMap52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(slimTableFactory56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(wildcardClass61);
        org.junit.Assert.assertNotNull(slimTableFactory62);
        org.junit.Assert.assertNotNull(slimTableFactory64);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(strMap70);
        org.junit.Assert.assertNull(wildcardClass73);
        org.junit.Assert.assertNotNull(slimTableFactory74);
        org.junit.Assert.assertNotNull(strMap75);
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test03828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03828");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        boolean boolean4 = slimTableFactory0.hasColon("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass6 = slimTableFactory0.getTableType("hi!");
        java.lang.String str8 = slimTableFactory0.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory0.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass11 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap12 = slimTableFactory0.tableTypeArrays;
        java.lang.Class<?> wildcardClass13 = slimTableFactory0.getClass();
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test03829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03829");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory1.tableTypeArrays;
        java.lang.String str6 = slimTableFactory1.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory7.copy();
        boolean boolean10 = slimTableFactory8.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory8.tableTypeArrays;
        java.lang.String str13 = slimTableFactory8.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory8.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap14;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = slimTableFactory1.copy();
        boolean boolean19 = slimTableFactory1.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap20 = slimTableFactory1.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass22 = slimTableFactory1.getTableType("");
        fitnesse.testsystems.slim.Table table23 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext25 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable26 = slimTableFactory1.makeSlimTable(table23, "hi!", slimTestContext25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertNotNull(slimTableFactory17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNull(wildcardClass22);
    }

    @Test
    public void test03830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03830");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        boolean boolean5 = slimTableFactory0.hasColon("");
        java.lang.String str7 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory0.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass11 = slimTableFactory9.getTableType("");
        fitnesse.testsystems.slim.Table table12 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext14 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable15 = slimTableFactory9.makeSlimTable(table12, "", slimTestContext14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNull(wildcardClass11);
    }

    @Test
    public void test03831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03831");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory0.getTableType("hi!");
        java.lang.String str9 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass12 = slimTableFactory10.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory10.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory14.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap16 = slimTableFactory15.tableTypes;
        boolean boolean18 = slimTableFactory15.hasColon("");
        boolean boolean20 = slimTableFactory15.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap21 = slimTableFactory15.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass24 = slimTableFactory22.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = slimTableFactory22.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap26 = slimTableFactory25.tableTypeArrays;
        slimTableFactory15.tableTypeArrays = strMap26;
        slimTableFactory10.tableTypeArrays = strMap26;
        slimTableFactory0.tableTypeArrays = strMap26;
        java.lang.String str31 = slimTableFactory0.makeTableType("");
        java.lang.String str33 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.Table table34 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable35 = slimTableFactory0.parseDefineTableTypeTable(table34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNotNull(slimTableFactory13);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNull(wildcardClass24);
        org.junit.Assert.assertNotNull(slimTableFactory25);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
    }

    @Test
    public void test03832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03832");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap5 = slimTableFactory1.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory1.copy();
        java.lang.String str9 = slimTableFactory7.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap10 = slimTableFactory7.tableTypes;
        java.lang.Class<?> wildcardClass11 = strMap10.getClass();
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test03833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03833");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory0.hasColon("hi!");
        boolean boolean5 = slimTableFactory0.hasColon("hi!");
        fitnesse.testsystems.slim.Table table6 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable7 = slimTableFactory0.parseDefineTableTypeTable(table6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test03834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03834");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.lang.String str3 = slimTableFactory0.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.Table table5 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext7 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable8 = slimTableFactory4.makeSlimTable(table5, "hi!", slimTestContext7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!" + "'", str3, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory4);
    }

    @Test
    public void test03835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03835");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass5 = slimTableFactory0.getTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory0.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory0.copy();
        boolean boolean10 = slimTableFactory0.hasColon("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass12 = slimTableFactory0.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory0.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass15 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.Table table16 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory0.parseDefineTableTypeRow(table16, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNotNull(slimTableFactory13);
        org.junit.Assert.assertNull(wildcardClass15);
    }

    @Test
    public void test03836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03836");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        boolean boolean5 = slimTableFactory0.hasColon("");
        java.lang.String str7 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap10 = slimTableFactory8.tableTypes;
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(strMap10);
    }

    @Test
    public void test03837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03837");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        slimTableFactory0.tableTypeArrays = strMap2;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass5 = slimTableFactory0.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory6.copy();
        boolean boolean9 = slimTableFactory7.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory7.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory7.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory12.getTableType("");
        boolean boolean16 = slimTableFactory12.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap17 = slimTableFactory12.tableTypeArrays;
        slimTableFactory11.tableTypeArrays = strMap17;
        slimTableFactory0.tableTypeArrays = strMap17;
        boolean boolean21 = slimTableFactory0.hasColon("");
        java.lang.String str23 = slimTableFactory0.getFullTableName("");
        boolean boolean25 = slimTableFactory0.hasColon("");
        java.lang.String str27 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory29 = slimTableFactory28.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap30 = slimTableFactory29.tableTypes;
        boolean boolean32 = slimTableFactory29.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap33 = slimTableFactory29.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory34 = slimTableFactory29.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap35 = slimTableFactory34.tableTypeArrays;
        java.lang.String str37 = slimTableFactory34.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory38 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory39 = slimTableFactory38.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap40 = slimTableFactory39.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass42 = slimTableFactory39.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory43 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory44 = slimTableFactory43.copy();
        boolean boolean46 = slimTableFactory44.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory47 = slimTableFactory44.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap48 = slimTableFactory44.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory49 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory50 = slimTableFactory49.copy();
        boolean boolean52 = slimTableFactory50.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory53 = slimTableFactory50.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory54 = slimTableFactory50.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory55 = slimTableFactory50.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap56 = slimTableFactory55.tableTypeArrays;
        slimTableFactory44.tableTypeArrays = strMap56;
        slimTableFactory39.tableTypeArrays = strMap56;
        slimTableFactory34.tableTypeArrays = strMap56;
        slimTableFactory0.tableTypeArrays = strMap56;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory61 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.Table table62 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable63 = slimTableFactory0.parseDefineTableTypeTable(table62);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(slimTableFactory29);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(slimTableFactory34);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory39);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertNull(wildcardClass42);
        org.junit.Assert.assertNotNull(slimTableFactory44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(slimTableFactory47);
        org.junit.Assert.assertNotNull(strMap48);
        org.junit.Assert.assertNotNull(slimTableFactory50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(slimTableFactory53);
        org.junit.Assert.assertNotNull(slimTableFactory54);
        org.junit.Assert.assertNotNull(slimTableFactory55);
        org.junit.Assert.assertNotNull(strMap56);
        org.junit.Assert.assertNotNull(slimTableFactory61);
    }

    @Test
    public void test03838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03838");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass4 = slimTableFactory1.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap5 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory6.copy();
        java.lang.String str9 = slimTableFactory7.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory7.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory7.tableTypeArrays;
        java.lang.String str13 = slimTableFactory7.makeTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass15 = slimTableFactory7.getTableType("hi!");
        java.lang.String str17 = slimTableFactory7.makeTableType("");
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test03839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03839");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory3.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap5 = slimTableFactory4.tableTypes;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap6 = slimTableFactory4.tableTypes;
        fitnesse.testsystems.slim.Table table7 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory4.parseDefineTableTypeRow(table7, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strMap6);
    }

    @Test
    public void test03840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03840");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.Table table5 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory4.parseDefineTableTypeRow(table5, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
    }

    @Test
    public void test03841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03841");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap5 = slimTableFactory1.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory1.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = null;
        slimTableFactory8.tableTypeArrays = strMap10;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass13 = slimTableFactory8.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory14.copy();
        boolean boolean17 = slimTableFactory15.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory15.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory15.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass22 = slimTableFactory20.getTableType("");
        boolean boolean24 = slimTableFactory20.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap25 = slimTableFactory20.tableTypeArrays;
        slimTableFactory19.tableTypeArrays = strMap25;
        slimTableFactory8.tableTypeArrays = strMap25;
        boolean boolean29 = slimTableFactory8.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory30 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass32 = slimTableFactory30.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap33 = slimTableFactory30.tableTypeArrays;
        slimTableFactory8.tableTypeArrays = strMap33;
        slimTableFactory1.tableTypeArrays = strMap33;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory36 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory37 = slimTableFactory36.copy();
        boolean boolean39 = slimTableFactory37.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory40 = slimTableFactory37.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory41 = slimTableFactory37.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory42 = slimTableFactory41.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory43 = slimTableFactory41.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory44 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory45 = slimTableFactory44.copy();
        boolean boolean47 = slimTableFactory45.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory48 = slimTableFactory45.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory49 = slimTableFactory45.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory50 = slimTableFactory49.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory51 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory52 = slimTableFactory51.copy();
        boolean boolean54 = slimTableFactory52.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap55 = slimTableFactory52.tableTypeArrays;
        slimTableFactory50.tableTypeArrays = strMap55;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory57 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory58 = slimTableFactory57.copy();
        boolean boolean60 = slimTableFactory58.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap61 = slimTableFactory58.tableTypeArrays;
        java.lang.String str63 = slimTableFactory58.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory64 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory65 = slimTableFactory64.copy();
        boolean boolean67 = slimTableFactory65.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap68 = slimTableFactory65.tableTypeArrays;
        java.lang.String str70 = slimTableFactory65.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap71 = slimTableFactory65.tableTypeArrays;
        slimTableFactory58.tableTypeArrays = strMap71;
        java.util.Map<java.lang.String, java.lang.String> strMap73 = slimTableFactory58.tableTypeArrays;
        slimTableFactory50.tableTypeArrays = strMap73;
        slimTableFactory43.tableTypeArrays = strMap73;
        slimTableFactory1.tableTypeArrays = strMap73;
        java.lang.Class<?> wildcardClass77 = slimTableFactory1.getClass();
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(slimTableFactory18);
        org.junit.Assert.assertNotNull(slimTableFactory19);
        org.junit.Assert.assertNull(wildcardClass22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(wildcardClass32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(slimTableFactory37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(slimTableFactory40);
        org.junit.Assert.assertNotNull(slimTableFactory41);
        org.junit.Assert.assertNotNull(slimTableFactory42);
        org.junit.Assert.assertNotNull(slimTableFactory43);
        org.junit.Assert.assertNotNull(slimTableFactory45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(slimTableFactory48);
        org.junit.Assert.assertNotNull(slimTableFactory49);
        org.junit.Assert.assertNotNull(slimTableFactory50);
        org.junit.Assert.assertNotNull(slimTableFactory52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(strMap55);
        org.junit.Assert.assertNotNull(slimTableFactory58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(strMap61);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(slimTableFactory65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(strMap68);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(strMap71);
        org.junit.Assert.assertNotNull(strMap73);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test03842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03842");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        boolean boolean6 = slimTableFactory1.hasColon("hi!");
        boolean boolean8 = slimTableFactory1.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory1.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass11 = slimTableFactory9.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory9.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory12.getTableType("");
        java.lang.String str16 = slimTableFactory12.makeTableType("hi!");
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
    }

    @Test
    public void test03843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03843");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory0.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap9 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.Table table11 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory0.parseDefineTableTypeRow(table11, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(slimTableFactory10);
    }

    @Test
    public void test03844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03844");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory1.copy();
        java.lang.String str5 = slimTableFactory3.makeTableType("hi!");
        fitnesse.testsystems.slim.Table table6 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext8 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable9 = slimTableFactory3.makeSlimTable(table6, "", slimTestContext8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
    }

    @Test
    public void test03845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03845");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory0.copy();
        java.lang.String str6 = slimTableFactory4.getFullTableName("");
        fitnesse.testsystems.slim.Table table7 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable8 = slimTableFactory4.parseDefineTableTypeTable(table7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
    }

    @Test
    public void test03846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03846");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory8.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap10;
        java.lang.String str13 = slimTableFactory1.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory1.tableTypeArrays;
        java.lang.String str16 = slimTableFactory1.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap17 = slimTableFactory1.tableTypes;
        java.lang.String str19 = slimTableFactory1.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = slimTableFactory20.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap22 = slimTableFactory21.tableTypes;
        boolean boolean24 = slimTableFactory21.hasColon("");
        boolean boolean26 = slimTableFactory21.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap27 = slimTableFactory21.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass30 = slimTableFactory28.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory31 = slimTableFactory28.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap32 = slimTableFactory31.tableTypeArrays;
        slimTableFactory21.tableTypeArrays = strMap32;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory34 = slimTableFactory21.copy();
        boolean boolean36 = slimTableFactory21.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap37 = slimTableFactory21.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory38 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass40 = slimTableFactory38.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap41 = slimTableFactory38.tableTypeArrays;
        java.lang.String str43 = slimTableFactory38.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory44 = slimTableFactory38.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap45 = slimTableFactory38.tableTypeArrays;
        slimTableFactory21.tableTypeArrays = strMap45;
        java.lang.String str48 = slimTableFactory21.makeTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass50 = slimTableFactory21.getTableType("");
        java.lang.String str52 = slimTableFactory21.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap53 = slimTableFactory21.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap53;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap55 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.Table table56 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext58 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable59 = slimTableFactory1.makeSlimTable(table56, "", slimTestContext58);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(slimTableFactory21);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNull(wildcardClass30);
        org.junit.Assert.assertNotNull(slimTableFactory31);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(slimTableFactory34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNull(wildcardClass40);
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hi!" + "'", str43, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory44);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNull(wildcardClass50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "hi!" + "'", str52, "hi!");
        org.junit.Assert.assertNotNull(strMap53);
        org.junit.Assert.assertNotNull(strMap55);
    }

    @Test
    public void test03847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03847");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory8.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap10;
        java.util.Map<java.lang.String, java.lang.String> strMap12 = slimTableFactory1.tableTypeArrays;
        java.lang.String str14 = slimTableFactory1.getFullTableName("hi!");
        boolean boolean16 = slimTableFactory1.hasColon("");
        boolean boolean18 = slimTableFactory1.hasColon("hi!");
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test03848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03848");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory3.tableTypeArrays;
        java.lang.String str6 = slimTableFactory3.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory3.copy();
        java.lang.String str9 = slimTableFactory7.makeTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass11 = slimTableFactory7.getTableType("");
        fitnesse.testsystems.slim.Table table12 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable13 = slimTableFactory7.parseDefineTableTypeTable(table12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNull(wildcardClass11);
    }

    @Test
    public void test03849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03849");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory3.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap5 = slimTableFactory3.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap6 = slimTableFactory3.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory3.copy();
        java.lang.String str9 = slimTableFactory7.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory10.copy();
        java.lang.String str13 = slimTableFactory10.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap14 = slimTableFactory10.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory15.copy();
        boolean boolean18 = slimTableFactory16.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory16.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory16.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap21 = slimTableFactory20.tableTypeArrays;
        slimTableFactory10.tableTypeArrays = strMap21;
        slimTableFactory7.tableTypeArrays = strMap21;
        fitnesse.testsystems.slim.Table table24 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext26 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable27 = slimTableFactory7.makeSlimTable(table24, "hi!", slimTestContext26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(slimTableFactory19);
        org.junit.Assert.assertNotNull(slimTableFactory20);
        org.junit.Assert.assertNotNull(strMap21);
    }

    @Test
    public void test03850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03850");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        boolean boolean6 = slimTableFactory1.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = null;
        slimTableFactory8.tableTypeArrays = strMap10;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass13 = slimTableFactory8.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory14.copy();
        boolean boolean17 = slimTableFactory15.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory15.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory15.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass22 = slimTableFactory20.getTableType("");
        boolean boolean24 = slimTableFactory20.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap25 = slimTableFactory20.tableTypeArrays;
        slimTableFactory19.tableTypeArrays = strMap25;
        slimTableFactory8.tableTypeArrays = strMap25;
        boolean boolean29 = slimTableFactory8.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory30 = slimTableFactory8.copy();
        java.lang.String str32 = slimTableFactory8.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap33 = slimTableFactory8.tableTypes;
        boolean boolean35 = slimTableFactory8.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap36 = slimTableFactory8.tableTypeArrays;
        slimTableFactory7.tableTypeArrays = strMap36;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory38 = slimTableFactory7.copy();
        boolean boolean40 = slimTableFactory7.hasColon("hi!");
        java.lang.String str42 = slimTableFactory7.makeTableType("");
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(slimTableFactory18);
        org.junit.Assert.assertNotNull(slimTableFactory19);
        org.junit.Assert.assertNull(wildcardClass22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(slimTableFactory30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(slimTableFactory38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
    }

    @Test
    public void test03851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03851");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory3.copy();
        java.lang.String str6 = slimTableFactory3.makeTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory3.tableTypes;
        boolean boolean9 = slimTableFactory3.hasColon("hi!");
        boolean boolean11 = slimTableFactory3.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory12.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap14 = slimTableFactory13.tableTypes;
        boolean boolean16 = slimTableFactory13.hasColon("");
        boolean boolean18 = slimTableFactory13.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap19 = slimTableFactory13.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass22 = slimTableFactory20.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = slimTableFactory20.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap24 = slimTableFactory23.tableTypeArrays;
        slimTableFactory13.tableTypeArrays = strMap24;
        slimTableFactory3.tableTypeArrays = strMap24;
        boolean boolean28 = slimTableFactory3.hasColon("hi!");
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(slimTableFactory13);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNull(wildcardClass22);
        org.junit.Assert.assertNotNull(slimTableFactory23);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test03852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03852");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory1.tableTypeArrays;
        java.lang.String str6 = slimTableFactory1.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory7.copy();
        boolean boolean10 = slimTableFactory8.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory8.tableTypeArrays;
        java.lang.String str13 = slimTableFactory8.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory8.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap14;
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory1.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap17 = slimTableFactory1.tableTypes;
        java.lang.String str19 = slimTableFactory1.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = slimTableFactory21.copy();
        boolean boolean24 = slimTableFactory22.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = slimTableFactory22.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap26 = slimTableFactory22.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = slimTableFactory22.copy();
        boolean boolean29 = slimTableFactory27.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap30 = slimTableFactory27.tableTypeArrays;
        slimTableFactory20.tableTypeArrays = strMap30;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory32 = slimTableFactory20.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory33 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory34 = slimTableFactory33.copy();
        boolean boolean36 = slimTableFactory34.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory37 = slimTableFactory34.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory38 = slimTableFactory34.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory39 = slimTableFactory34.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap40 = slimTableFactory34.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory41 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory42 = slimTableFactory41.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap43 = null;
        slimTableFactory41.tableTypeArrays = strMap43;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass46 = slimTableFactory41.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory47 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory48 = slimTableFactory47.copy();
        boolean boolean50 = slimTableFactory48.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory51 = slimTableFactory48.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory52 = slimTableFactory48.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory53 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass55 = slimTableFactory53.getTableType("");
        boolean boolean57 = slimTableFactory53.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap58 = slimTableFactory53.tableTypeArrays;
        slimTableFactory52.tableTypeArrays = strMap58;
        slimTableFactory41.tableTypeArrays = strMap58;
        boolean boolean62 = slimTableFactory41.hasColon("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass64 = slimTableFactory41.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap65 = slimTableFactory41.tableTypeArrays;
        slimTableFactory34.tableTypeArrays = strMap65;
        slimTableFactory32.tableTypeArrays = strMap65;
        java.lang.String str69 = slimTableFactory32.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap70 = slimTableFactory32.tableTypeArrays;
        java.lang.Class<?> wildcardClass71 = strMap70.getClass();
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory20);
        org.junit.Assert.assertNotNull(slimTableFactory22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(slimTableFactory25);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(slimTableFactory27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(slimTableFactory32);
        org.junit.Assert.assertNotNull(slimTableFactory34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(slimTableFactory37);
        org.junit.Assert.assertNotNull(slimTableFactory38);
        org.junit.Assert.assertNotNull(slimTableFactory39);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertNotNull(slimTableFactory42);
        org.junit.Assert.assertNull(wildcardClass46);
        org.junit.Assert.assertNotNull(slimTableFactory48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(slimTableFactory51);
        org.junit.Assert.assertNotNull(slimTableFactory52);
        org.junit.Assert.assertNull(wildcardClass55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(strMap58);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(wildcardClass64);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(strMap70);
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test03853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03853");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        java.lang.String str5 = slimTableFactory0.makeTableType("hi!");
        boolean boolean7 = slimTableFactory0.hasColon("hi!");
        java.lang.String str9 = slimTableFactory0.getFullTableName("hi!");
        java.lang.String str11 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap12 = slimTableFactory0.tableTypes;
        java.lang.Class<?> wildcardClass13 = strMap12.getClass();
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test03854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03854");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory0.copy();
        java.lang.String str6 = slimTableFactory4.getFullTableName("");
        java.lang.Class<?> wildcardClass7 = slimTableFactory4.getClass();
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test03855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03855");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        boolean boolean6 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass10 = slimTableFactory8.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory8.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap12 = slimTableFactory11.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap12;
        java.lang.String str15 = slimTableFactory1.makeTableType("");
        java.lang.String str17 = slimTableFactory1.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory18.copy();
        boolean boolean21 = slimTableFactory19.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = slimTableFactory19.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = slimTableFactory19.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = slimTableFactory23.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = slimTableFactory25.copy();
        boolean boolean28 = slimTableFactory26.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap29 = slimTableFactory26.tableTypeArrays;
        slimTableFactory24.tableTypeArrays = strMap29;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory31 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory32 = slimTableFactory31.copy();
        boolean boolean34 = slimTableFactory32.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap35 = slimTableFactory32.tableTypeArrays;
        java.lang.String str37 = slimTableFactory32.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory38 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory39 = slimTableFactory38.copy();
        boolean boolean41 = slimTableFactory39.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap42 = slimTableFactory39.tableTypeArrays;
        java.lang.String str44 = slimTableFactory39.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap45 = slimTableFactory39.tableTypeArrays;
        slimTableFactory32.tableTypeArrays = strMap45;
        java.util.Map<java.lang.String, java.lang.String> strMap47 = slimTableFactory32.tableTypeArrays;
        slimTableFactory24.tableTypeArrays = strMap47;
        slimTableFactory1.tableTypeArrays = strMap47;
        java.lang.String str51 = slimTableFactory1.makeTableType("hi!");
        fitnesse.testsystems.slim.Table table52 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory1.parseDefineTableTypeRow(table52, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(slimTableFactory22);
        org.junit.Assert.assertNotNull(slimTableFactory23);
        org.junit.Assert.assertNotNull(slimTableFactory24);
        org.junit.Assert.assertNotNull(slimTableFactory26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(slimTableFactory32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(slimTableFactory39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(strMap42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "hi!" + "'", str51, "hi!");
    }

    @Test
    public void test03856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03856");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass5 = slimTableFactory3.getTableType("");
        boolean boolean7 = slimTableFactory3.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory3.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap8;
        java.lang.String str11 = slimTableFactory1.makeTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass13 = slimTableFactory1.getTableType("");
        boolean boolean15 = slimTableFactory1.hasColon("");
        java.lang.String str17 = slimTableFactory1.makeTableType("hi!");
        boolean boolean19 = slimTableFactory1.hasColon("hi!");
        java.lang.String str21 = slimTableFactory1.makeTableType("");
        java.lang.String str23 = slimTableFactory1.getFullTableName("hi!");
        java.lang.String str25 = slimTableFactory1.makeTableType("hi!");
        java.lang.String str27 = slimTableFactory1.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap28 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.Table table29 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext31 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable32 = slimTableFactory1.makeSlimTable(table29, "", slimTestContext31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNotNull(strMap28);
    }

    @Test
    public void test03857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03857");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        boolean boolean6 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass10 = slimTableFactory8.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory8.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap12 = slimTableFactory11.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap12;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory1.copy();
        java.lang.String str16 = slimTableFactory14.makeTableType("hi!");
        java.lang.String str18 = slimTableFactory14.getFullTableName("hi!");
        java.lang.String str20 = slimTableFactory14.getFullTableName("");
        java.lang.String str22 = slimTableFactory14.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap23 = slimTableFactory14.tableTypes;
        fitnesse.testsystems.slim.Table table24 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext26 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable27 = slimTableFactory14.makeSlimTable(table24, "", slimTestContext26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(strMap23);
    }

    @Test
    public void test03858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03858");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory3.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap5 = slimTableFactory3.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap6 = slimTableFactory3.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory3.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass10 = slimTableFactory8.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory8.copy();
        boolean boolean13 = slimTableFactory8.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass15 = slimTableFactory8.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory8.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap17 = slimTableFactory8.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap18 = slimTableFactory8.tableTypeArrays;
        slimTableFactory7.tableTypeArrays = strMap18;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory7.copy();
        java.lang.String str22 = slimTableFactory20.getFullTableName("");
        java.lang.Class<?> wildcardClass23 = slimTableFactory20.getClass();
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(slimTableFactory20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test03859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03859");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory5.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap8 = slimTableFactory5.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass11 = slimTableFactory9.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap12 = slimTableFactory9.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory9.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory9.tableTypeArrays;
        slimTableFactory5.tableTypeArrays = strMap14;
        java.lang.String str17 = slimTableFactory5.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory5.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory19.copy();
        boolean boolean22 = slimTableFactory20.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap23 = slimTableFactory20.tableTypeArrays;
        java.lang.String str25 = slimTableFactory20.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap26 = slimTableFactory20.tableTypeArrays;
        slimTableFactory5.tableTypeArrays = strMap26;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = slimTableFactory5.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = slimTableFactory28.tableTypeArrays;
        java.lang.String str31 = slimTableFactory28.getFullTableName("hi!");
        java.lang.String str33 = slimTableFactory28.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap34 = slimTableFactory28.tableTypes;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap35 = slimTableFactory28.tableTypes;
        fitnesse.testsystems.slim.Table table36 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory28.parseDefineTableTypeRow(table36, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(slimTableFactory13);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory18);
        org.junit.Assert.assertNotNull(slimTableFactory20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(slimTableFactory28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNotNull(strMap35);
    }

    @Test
    public void test03860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03860");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        boolean boolean6 = slimTableFactory1.hasColon("hi!");
        boolean boolean8 = slimTableFactory1.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap10 = slimTableFactory9.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory9.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory12.copy();
        boolean boolean15 = slimTableFactory13.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory13.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = slimTableFactory13.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory13.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap19 = slimTableFactory13.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory13.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap21 = slimTableFactory20.tableTypeArrays;
        slimTableFactory11.tableTypeArrays = strMap21;
        boolean boolean24 = slimTableFactory11.hasColon("");
        fitnesse.testsystems.slim.Table table25 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext27 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable28 = slimTableFactory11.makeSlimTable(table25, "hi!", slimTestContext27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNotNull(slimTableFactory13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertNotNull(slimTableFactory17);
        org.junit.Assert.assertNotNull(slimTableFactory18);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(slimTableFactory20);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test03861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03861");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory5.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass9 = slimTableFactory7.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory7.copy();
        boolean boolean12 = slimTableFactory7.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap13 = slimTableFactory7.tableTypeArrays;
        slimTableFactory5.tableTypeArrays = strMap13;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory15.copy();
        boolean boolean18 = slimTableFactory16.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory16.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory16.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = slimTableFactory16.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap22 = slimTableFactory16.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = slimTableFactory23.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap25 = slimTableFactory23.tableTypeArrays;
        slimTableFactory16.tableTypeArrays = strMap25;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass29 = slimTableFactory27.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory30 = slimTableFactory27.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap31 = slimTableFactory30.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap32 = slimTableFactory30.tableTypeArrays;
        slimTableFactory16.tableTypeArrays = strMap32;
        slimTableFactory5.tableTypeArrays = strMap32;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory35 = slimTableFactory5.copy();
        boolean boolean37 = slimTableFactory5.hasColon("");
        fitnesse.testsystems.slim.Table table38 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable39 = slimTableFactory5.parseDefineTableTypeTable(table38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(slimTableFactory19);
        org.junit.Assert.assertNotNull(slimTableFactory20);
        org.junit.Assert.assertNotNull(slimTableFactory21);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(slimTableFactory24);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNull(wildcardClass29);
        org.junit.Assert.assertNotNull(slimTableFactory30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(slimTableFactory35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test03862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03862");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory5.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory5.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass9 = slimTableFactory5.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory5.copy();
        java.lang.String str12 = slimTableFactory5.makeTableType("hi!");
        fitnesse.testsystems.slim.Table table13 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable14 = slimTableFactory5.parseDefineTableTypeTable(table13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
    }

    @Test
    public void test03863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03863");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        boolean boolean6 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory1.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass9 = slimTableFactory1.getTableType("hi!");
        java.lang.String str11 = slimTableFactory1.makeTableType("");
        java.lang.Class<?> wildcardClass12 = slimTableFactory1.getClass();
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test03864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03864");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        boolean boolean6 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass10 = slimTableFactory8.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory8.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap12 = slimTableFactory11.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap12;
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory1.copy();
        java.lang.Class<?> wildcardClass16 = slimTableFactory1.getClass();
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test03865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03865");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        boolean boolean5 = slimTableFactory0.hasColon("");
        boolean boolean7 = slimTableFactory0.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        boolean boolean11 = slimTableFactory9.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory9.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory9.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory13.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap14;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap16 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.Table table18 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable19 = slimTableFactory17.parseDefineTableTypeTable(table18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertNotNull(slimTableFactory13);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(slimTableFactory17);
    }

    @Test
    public void test03866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03866");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory5.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass9 = slimTableFactory7.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory7.copy();
        boolean boolean12 = slimTableFactory7.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap13 = slimTableFactory7.tableTypeArrays;
        slimTableFactory5.tableTypeArrays = strMap13;
        java.util.Map<java.lang.String, java.lang.String> strMap15 = slimTableFactory5.tableTypeArrays;
        java.lang.String str17 = slimTableFactory5.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory5.copy();
        java.lang.String str20 = slimTableFactory5.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = slimTableFactory5.copy();
        fitnesse.testsystems.slim.Table table22 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext24 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable25 = slimTableFactory21.makeSlimTable(table22, "hi!", slimTestContext24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(slimTableFactory18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory21);
    }

    @Test
    public void test03867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03867");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("hi!");
        java.lang.String str7 = slimTableFactory0.getFullTableName("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass9 = slimTableFactory0.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap11 = slimTableFactory0.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass13 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory0.copy();
        java.lang.String str17 = slimTableFactory15.makeTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap18 = slimTableFactory15.tableTypes;
        java.lang.String str20 = slimTableFactory15.makeTableType("");
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
    }

    @Test
    public void test03868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03868");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap5 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory6.copy();
        boolean boolean9 = slimTableFactory7.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory7.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory7.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory11.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass15 = slimTableFactory13.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory13.copy();
        boolean boolean18 = slimTableFactory13.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap19 = slimTableFactory13.tableTypeArrays;
        slimTableFactory11.tableTypeArrays = strMap19;
        slimTableFactory0.tableTypeArrays = strMap19;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass23 = slimTableFactory0.getTableType("hi!");
        boolean boolean25 = slimTableFactory0.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap26 = slimTableFactory0.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass28 = slimTableFactory0.getTableType("hi!");
        java.lang.String str30 = slimTableFactory0.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap31 = slimTableFactory0.tableTypes;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap32 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory33 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory34 = slimTableFactory33.copy();
        boolean boolean36 = slimTableFactory34.hasColon("hi!");
        java.lang.String str38 = slimTableFactory34.makeTableType("");
        boolean boolean40 = slimTableFactory34.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap41 = slimTableFactory34.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap41;
        java.lang.Class<?> wildcardClass43 = slimTableFactory0.getClass();
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNull(wildcardClass28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(slimTableFactory34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test03869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03869");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        slimTableFactory0.tableTypeArrays = strMap2;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass5 = slimTableFactory0.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory6.copy();
        boolean boolean9 = slimTableFactory7.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory7.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory7.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory12.getTableType("");
        boolean boolean16 = slimTableFactory12.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap17 = slimTableFactory12.tableTypeArrays;
        slimTableFactory11.tableTypeArrays = strMap17;
        slimTableFactory0.tableTypeArrays = strMap17;
        boolean boolean21 = slimTableFactory0.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = slimTableFactory0.copy();
        java.lang.String str24 = slimTableFactory0.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap25 = slimTableFactory0.tableTypes;
        boolean boolean27 = slimTableFactory0.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass30 = slimTableFactory28.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap31 = slimTableFactory28.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory32 = slimTableFactory28.copy();
        boolean boolean34 = slimTableFactory32.hasColon("");
        java.lang.String str36 = slimTableFactory32.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap37 = slimTableFactory32.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap37;
        fitnesse.testsystems.slim.Table table39 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable40 = slimTableFactory0.parseDefineTableTypeTable(table39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(slimTableFactory22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(wildcardClass30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(slimTableFactory32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(strMap37);
    }

    @Test
    public void test03870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03870");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory5.copy();
        boolean boolean8 = slimTableFactory5.hasColon("");
        boolean boolean10 = slimTableFactory5.hasColon("hi!");
        boolean boolean12 = slimTableFactory5.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap13 = slimTableFactory5.tableTypeArrays;
        java.lang.String str15 = slimTableFactory5.makeTableType("");
        java.lang.String str17 = slimTableFactory5.makeTableType("");
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test03871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03871");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory3.tableTypeArrays;
        java.lang.String str6 = slimTableFactory3.makeTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass8 = slimTableFactory3.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory3.copy();
        boolean boolean11 = slimTableFactory9.hasColon("hi!");
        fitnesse.testsystems.slim.Table table12 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext14 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable15 = slimTableFactory9.makeSlimTable(table12, "", slimTestContext14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test03872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03872");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        boolean boolean5 = slimTableFactory0.hasColon("");
        boolean boolean7 = slimTableFactory0.hasColon("hi!");
        boolean boolean9 = slimTableFactory0.hasColon("");
        java.lang.String str11 = slimTableFactory0.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap12 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory0.copy();
        boolean boolean15 = slimTableFactory13.hasColon("hi!");
        fitnesse.testsystems.slim.Table table16 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable17 = slimTableFactory13.parseDefineTableTypeTable(table16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(slimTableFactory13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test03873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03873");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap5 = slimTableFactory1.tableTypeArrays;
        java.lang.String str7 = slimTableFactory1.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory9.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap11 = slimTableFactory10.tableTypes;
        boolean boolean13 = slimTableFactory10.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap14 = slimTableFactory10.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap15 = slimTableFactory10.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap15;
        boolean boolean18 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.Table table19 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable20 = slimTableFactory1.parseDefineTableTypeTable(table19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test03874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03874");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory0.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap10 = slimTableFactory9.tableTypes;
        boolean boolean12 = slimTableFactory9.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap13 = slimTableFactory9.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory9.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory15.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap17 = slimTableFactory16.tableTypes;
        boolean boolean19 = slimTableFactory16.hasColon("");
        boolean boolean21 = slimTableFactory16.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap22 = slimTableFactory16.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass25 = slimTableFactory23.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = slimTableFactory23.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap27 = slimTableFactory26.tableTypeArrays;
        slimTableFactory16.tableTypeArrays = strMap27;
        slimTableFactory9.tableTypeArrays = strMap27;
        slimTableFactory0.tableTypeArrays = strMap27;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory31 = slimTableFactory0.copy();
        java.lang.String str33 = slimTableFactory31.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory34 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory35 = slimTableFactory34.copy();
        boolean boolean37 = slimTableFactory35.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory38 = slimTableFactory35.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory39 = slimTableFactory35.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory40 = slimTableFactory35.copy();
        boolean boolean42 = slimTableFactory40.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory43 = slimTableFactory40.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap44 = slimTableFactory43.tableTypeArrays;
        slimTableFactory31.tableTypeArrays = strMap44;
        java.util.Map<java.lang.String, java.lang.String> strMap46 = slimTableFactory31.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory47 = slimTableFactory31.copy();
        fitnesse.testsystems.slim.Table table48 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable49 = slimTableFactory31.parseDefineTableTypeTable(table48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNull(wildcardClass25);
        org.junit.Assert.assertNotNull(slimTableFactory26);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(slimTableFactory31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(slimTableFactory38);
        org.junit.Assert.assertNotNull(slimTableFactory39);
        org.junit.Assert.assertNotNull(slimTableFactory40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(slimTableFactory43);
        org.junit.Assert.assertNotNull(strMap44);
        org.junit.Assert.assertNotNull(strMap46);
        org.junit.Assert.assertNotNull(slimTableFactory47);
    }

    @Test
    public void test03875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03875");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory3.hasColon("");
        boolean boolean7 = slimTableFactory3.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory3.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap9 = slimTableFactory8.tableTypes;
        java.lang.String str11 = slimTableFactory8.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap12 = null;
        slimTableFactory8.tableTypeArrays = strMap12;
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
    }

    @Test
    public void test03876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03876");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory8.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap10;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap12 = slimTableFactory1.tableTypes;
        java.lang.String str14 = slimTableFactory1.makeTableType("");
        fitnesse.testsystems.slim.Table table15 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable16 = slimTableFactory1.parseDefineTableTypeTable(table15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test03877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03877");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass6 = slimTableFactory4.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory4.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap10 = slimTableFactory9.tableTypes;
        boolean boolean12 = slimTableFactory9.hasColon("");
        boolean boolean14 = slimTableFactory9.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap15 = slimTableFactory9.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass18 = slimTableFactory16.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory16.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap20 = slimTableFactory19.tableTypeArrays;
        slimTableFactory9.tableTypeArrays = strMap20;
        slimTableFactory4.tableTypeArrays = strMap20;
        slimTableFactory1.tableTypeArrays = strMap20;
        java.lang.String str25 = slimTableFactory1.makeTableType("");
        java.lang.String str27 = slimTableFactory1.getFullTableName("");
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertNotNull(slimTableFactory19);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
    }

    @Test
    public void test03878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03878");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory3.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory3.copy();
        boolean boolean7 = slimTableFactory5.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory5.tableTypeArrays;
        java.lang.String str10 = slimTableFactory5.getFullTableName("hi!");
        java.lang.Class<?> wildcardClass11 = slimTableFactory5.getClass();
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test03879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03879");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap5 = slimTableFactory1.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory9.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap11 = slimTableFactory10.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory12.getTableType("");
        boolean boolean16 = slimTableFactory12.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap17 = slimTableFactory12.tableTypeArrays;
        slimTableFactory10.tableTypeArrays = strMap17;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory19.copy();
        boolean boolean22 = slimTableFactory20.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = slimTableFactory20.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = slimTableFactory20.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = slimTableFactory24.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass28 = slimTableFactory26.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory29 = slimTableFactory26.copy();
        boolean boolean31 = slimTableFactory26.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap32 = slimTableFactory26.tableTypeArrays;
        slimTableFactory24.tableTypeArrays = strMap32;
        java.util.Map<java.lang.String, java.lang.String> strMap34 = slimTableFactory24.tableTypeArrays;
        slimTableFactory10.tableTypeArrays = strMap34;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory36 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory37 = slimTableFactory36.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap38 = slimTableFactory37.tableTypes;
        boolean boolean40 = slimTableFactory37.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap41 = slimTableFactory37.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap42 = slimTableFactory37.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory43 = slimTableFactory37.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap44 = slimTableFactory37.tableTypeArrays;
        slimTableFactory10.tableTypeArrays = strMap44;
        slimTableFactory1.tableTypeArrays = strMap44;
        java.lang.String str48 = slimTableFactory1.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory49 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory50 = slimTableFactory49.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap51 = slimTableFactory50.tableTypes;
        java.lang.String str53 = slimTableFactory50.getFullTableName("");
        fitnesse.testsystems.slim.Table table54 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext56 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable57 = slimTableFactory50.makeSlimTable(table54, "hi!", slimTestContext56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(slimTableFactory20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(slimTableFactory23);
        org.junit.Assert.assertNotNull(slimTableFactory24);
        org.junit.Assert.assertNotNull(slimTableFactory25);
        org.junit.Assert.assertNull(wildcardClass28);
        org.junit.Assert.assertNotNull(slimTableFactory29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNotNull(slimTableFactory37);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertNotNull(strMap42);
        org.junit.Assert.assertNotNull(slimTableFactory43);
        org.junit.Assert.assertNotNull(strMap44);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(slimTableFactory49);
        org.junit.Assert.assertNotNull(slimTableFactory50);
        org.junit.Assert.assertNotNull(strMap51);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
    }

    @Test
    public void test03880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03880");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        boolean boolean6 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory1.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass9 = slimTableFactory1.getTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap10 = slimTableFactory1.tableTypes;
        java.lang.String str12 = slimTableFactory1.makeTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory1.getTableType("hi!");
        fitnesse.testsystems.slim.Table table15 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext17 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable18 = slimTableFactory1.makeSlimTable(table15, "", slimTestContext17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNull(wildcardClass14);
    }

    @Test
    public void test03881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03881");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        boolean boolean5 = slimTableFactory0.hasColon("");
        java.lang.String str7 = slimTableFactory0.makeTableType("");
        java.lang.String str9 = slimTableFactory0.makeTableType("");
        java.lang.String str11 = slimTableFactory0.makeTableType("");
        java.lang.String str13 = slimTableFactory0.getFullTableName("");
        java.lang.String str15 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = slimTableFactory16.copy();
        boolean boolean19 = slimTableFactory17.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap20 = slimTableFactory17.tableTypeArrays;
        java.lang.String str22 = slimTableFactory17.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = slimTableFactory23.copy();
        boolean boolean26 = slimTableFactory24.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap27 = slimTableFactory24.tableTypeArrays;
        java.lang.String str29 = slimTableFactory24.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap30 = slimTableFactory24.tableTypeArrays;
        slimTableFactory17.tableTypeArrays = strMap30;
        slimTableFactory0.tableTypeArrays = strMap30;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass34 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap35 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory36 = slimTableFactory0.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass38 = slimTableFactory0.getTableType("hi!");
        boolean boolean40 = slimTableFactory0.hasColon("hi!");
        fitnesse.testsystems.slim.Table table41 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory0.parseDefineTableTypeRow(table41, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(slimTableFactory17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(slimTableFactory24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNull(wildcardClass34);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(slimTableFactory36);
        org.junit.Assert.assertNull(wildcardClass38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test03882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03882");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory5.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass9 = slimTableFactory7.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory7.copy();
        boolean boolean12 = slimTableFactory7.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap13 = slimTableFactory7.tableTypeArrays;
        slimTableFactory5.tableTypeArrays = strMap13;
        java.util.Map<java.lang.String, java.lang.String> strMap15 = slimTableFactory5.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass18 = slimTableFactory16.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory16.copy();
        boolean boolean21 = slimTableFactory16.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = slimTableFactory22.copy();
        boolean boolean25 = slimTableFactory23.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = slimTableFactory23.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = slimTableFactory23.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = slimTableFactory27.copy();
        boolean boolean30 = slimTableFactory27.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap31 = slimTableFactory27.tableTypeArrays;
        slimTableFactory16.tableTypeArrays = strMap31;
        slimTableFactory5.tableTypeArrays = strMap31;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass35 = slimTableFactory5.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory36 = slimTableFactory5.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory37 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory38 = slimTableFactory37.copy();
        java.lang.String str40 = slimTableFactory37.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory41 = slimTableFactory37.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap42 = slimTableFactory37.tableTypeArrays;
        slimTableFactory36.tableTypeArrays = strMap42;
        java.lang.String str45 = slimTableFactory36.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory46 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory47 = slimTableFactory46.copy();
        boolean boolean49 = slimTableFactory47.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap50 = slimTableFactory47.tableTypeArrays;
        java.lang.String str52 = slimTableFactory47.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory53 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory54 = slimTableFactory53.copy();
        boolean boolean56 = slimTableFactory54.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap57 = slimTableFactory54.tableTypeArrays;
        java.lang.String str59 = slimTableFactory54.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap60 = slimTableFactory54.tableTypeArrays;
        slimTableFactory47.tableTypeArrays = strMap60;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory62 = slimTableFactory47.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass64 = slimTableFactory62.getTableType("");
        boolean boolean66 = slimTableFactory62.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap67 = slimTableFactory62.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap68 = slimTableFactory62.tableTypeArrays;
        slimTableFactory36.tableTypeArrays = strMap68;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory70 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass72 = slimTableFactory70.getTableType("");
        boolean boolean74 = slimTableFactory70.hasColon("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass76 = slimTableFactory70.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory77 = slimTableFactory70.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap78 = slimTableFactory77.tableTypeArrays;
        slimTableFactory36.tableTypeArrays = strMap78;
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertNotNull(slimTableFactory19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(slimTableFactory23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(slimTableFactory26);
        org.junit.Assert.assertNotNull(slimTableFactory27);
        org.junit.Assert.assertNotNull(slimTableFactory28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNull(wildcardClass35);
        org.junit.Assert.assertNotNull(slimTableFactory36);
        org.junit.Assert.assertNotNull(slimTableFactory38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "hi!" + "'", str40, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory41);
        org.junit.Assert.assertNotNull(strMap42);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(slimTableFactory54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(strMap57);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(strMap60);
        org.junit.Assert.assertNotNull(slimTableFactory62);
        org.junit.Assert.assertNull(wildcardClass64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(strMap67);
        org.junit.Assert.assertNotNull(strMap68);
        org.junit.Assert.assertNull(wildcardClass72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNull(wildcardClass76);
        org.junit.Assert.assertNotNull(slimTableFactory77);
        org.junit.Assert.assertNotNull(strMap78);
    }

    @Test
    public void test03883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03883");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory1.tableTypeArrays;
        java.lang.String str6 = slimTableFactory1.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory7.copy();
        boolean boolean10 = slimTableFactory8.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory8.tableTypeArrays;
        java.lang.String str13 = slimTableFactory8.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory8.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap14;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory18.copy();
        boolean boolean21 = slimTableFactory19.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap22 = slimTableFactory19.tableTypeArrays;
        slimTableFactory17.tableTypeArrays = strMap22;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass25 = slimTableFactory17.getTableType("");
        java.lang.String str27 = slimTableFactory17.makeTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass29 = slimTableFactory17.getTableType("");
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertNotNull(slimTableFactory17);
        org.junit.Assert.assertNotNull(slimTableFactory19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNull(wildcardClass25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNull(wildcardClass29);
    }

    @Test
    public void test03884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03884");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory0.getTableType("hi!");
        java.lang.String str9 = slimTableFactory0.getFullTableName("");
        java.lang.String str11 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory12.copy();
        boolean boolean15 = slimTableFactory13.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory13.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap17 = slimTableFactory13.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory18.copy();
        boolean boolean21 = slimTableFactory19.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = slimTableFactory19.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = slimTableFactory19.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = slimTableFactory19.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap25 = slimTableFactory24.tableTypeArrays;
        slimTableFactory13.tableTypeArrays = strMap25;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass30 = slimTableFactory28.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory31 = slimTableFactory28.copy();
        boolean boolean33 = slimTableFactory28.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap34 = slimTableFactory28.tableTypeArrays;
        slimTableFactory27.tableTypeArrays = strMap34;
        slimTableFactory13.tableTypeArrays = strMap34;
        slimTableFactory0.tableTypeArrays = strMap34;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass39 = slimTableFactory0.getTableType("hi!");
        java.lang.String str41 = slimTableFactory0.makeTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap42 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory43 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory44 = slimTableFactory43.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap45 = slimTableFactory44.tableTypes;
        boolean boolean47 = slimTableFactory44.hasColon("");
        boolean boolean49 = slimTableFactory44.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap50 = slimTableFactory44.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory51 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass53 = slimTableFactory51.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory54 = slimTableFactory51.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap55 = slimTableFactory54.tableTypeArrays;
        slimTableFactory44.tableTypeArrays = strMap55;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory57 = slimTableFactory44.copy();
        boolean boolean59 = slimTableFactory44.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap60 = slimTableFactory44.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory61 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass63 = slimTableFactory61.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap64 = slimTableFactory61.tableTypeArrays;
        java.lang.String str66 = slimTableFactory61.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory67 = slimTableFactory61.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap68 = slimTableFactory61.tableTypeArrays;
        slimTableFactory44.tableTypeArrays = strMap68;
        slimTableFactory0.tableTypeArrays = strMap68;
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(slimTableFactory13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(slimTableFactory19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(slimTableFactory22);
        org.junit.Assert.assertNotNull(slimTableFactory23);
        org.junit.Assert.assertNotNull(slimTableFactory24);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNull(wildcardClass30);
        org.junit.Assert.assertNotNull(slimTableFactory31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNull(wildcardClass39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(strMap42);
        org.junit.Assert.assertNotNull(slimTableFactory44);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNull(wildcardClass53);
        org.junit.Assert.assertNotNull(slimTableFactory54);
        org.junit.Assert.assertNotNull(strMap55);
        org.junit.Assert.assertNotNull(slimTableFactory57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(strMap60);
        org.junit.Assert.assertNull(wildcardClass63);
        org.junit.Assert.assertNotNull(strMap64);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "hi!" + "'", str66, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory67);
        org.junit.Assert.assertNotNull(strMap68);
    }

    @Test
    public void test03885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03885");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory0.copy();
        boolean boolean6 = slimTableFactory4.hasColon("");
        java.lang.String str8 = slimTableFactory4.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory4.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass11 = slimTableFactory9.getTableType("hi!");
        fitnesse.testsystems.slim.Table table12 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable13 = slimTableFactory9.parseDefineTableTypeTable(table12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNull(wildcardClass11);
    }

    @Test
    public void test03886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03886");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        boolean boolean6 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass10 = slimTableFactory8.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory8.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap12 = slimTableFactory11.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap12;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory1.copy();
        boolean boolean16 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap17 = slimTableFactory1.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass19 = slimTableFactory1.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = slimTableFactory20.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap22 = slimTableFactory21.tableTypes;
        boolean boolean24 = slimTableFactory21.hasColon("");
        boolean boolean26 = slimTableFactory21.hasColon("hi!");
        boolean boolean28 = slimTableFactory21.hasColon("");
        java.lang.String str30 = slimTableFactory21.getFullTableName("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass32 = slimTableFactory21.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap33 = slimTableFactory21.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap33;
        java.util.Map<java.lang.String, java.lang.String> strMap35 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.Table table36 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory1.parseDefineTableTypeRow(table36, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(slimTableFactory21);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNull(wildcardClass32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(strMap35);
    }

    @Test
    public void test03887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03887");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory1.tableTypeArrays;
        java.lang.String str6 = slimTableFactory1.getFullTableName("");
        boolean boolean8 = slimTableFactory1.hasColon("");
        java.lang.String str10 = slimTableFactory1.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory1.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap12 = slimTableFactory1.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory1.getTableType("hi!");
        java.lang.String str16 = slimTableFactory1.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = slimTableFactory1.copy();
        java.lang.Class<?> wildcardClass18 = slimTableFactory17.getClass();
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(slimTableFactory17);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test03888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03888");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory4.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap6 = slimTableFactory5.tableTypes;
        boolean boolean8 = slimTableFactory5.hasColon("");
        boolean boolean10 = slimTableFactory5.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap11 = slimTableFactory5.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory12.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory12.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory15.tableTypeArrays;
        slimTableFactory5.tableTypeArrays = strMap16;
        slimTableFactory0.tableTypeArrays = strMap16;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap19 = slimTableFactory0.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap20 = slimTableFactory0.tableTypeArrays;
        boolean boolean22 = slimTableFactory0.hasColon("");
        java.lang.String str24 = slimTableFactory0.makeTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap25 = slimTableFactory0.tableTypes;
        java.lang.String str27 = slimTableFactory0.makeTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass29 = slimTableFactory0.getTableType("");
        java.lang.String str31 = slimTableFactory0.getFullTableName("hi!");
        fitnesse.testsystems.slim.Table table32 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext34 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable35 = slimTableFactory0.makeSlimTable(table32, "", slimTestContext34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNull(wildcardClass29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
    }

    @Test
    public void test03889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03889");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        boolean boolean6 = slimTableFactory1.hasColon("hi!");
        boolean boolean8 = slimTableFactory1.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory1.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass11 = slimTableFactory9.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory9.copy();
        java.lang.String str14 = slimTableFactory12.getFullTableName("hi!");
        fitnesse.testsystems.slim.Table table15 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory12.parseDefineTableTypeRow(table15, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
    }

    @Test
    public void test03890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03890");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass5 = slimTableFactory3.getTableType("");
        boolean boolean7 = slimTableFactory3.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory3.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap8;
        java.lang.String str11 = slimTableFactory1.makeTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap12 = slimTableFactory1.tableTypes;
        java.lang.String str14 = slimTableFactory1.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap15 = slimTableFactory1.tableTypes;
        java.lang.String str17 = slimTableFactory1.makeTableType("hi!");
        java.lang.Class<?> wildcardClass18 = slimTableFactory1.getClass();
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test03891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03891");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory0.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap9 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory0.tableTypeArrays;
        java.lang.String str12 = slimTableFactory0.makeTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory0.getTableType("");
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(wildcardClass14);
    }

    @Test
    public void test03892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03892");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory1.tableTypeArrays;
        java.lang.String str6 = slimTableFactory1.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory7.copy();
        boolean boolean10 = slimTableFactory8.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory8.tableTypeArrays;
        java.lang.String str13 = slimTableFactory8.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory8.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap14;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap18 = slimTableFactory17.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap19 = slimTableFactory17.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap20 = slimTableFactory17.tableTypeArrays;
        fitnesse.testsystems.slim.Table table21 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable22 = slimTableFactory17.parseDefineTableTypeTable(table21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertNotNull(slimTableFactory17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(strMap20);
    }

    @Test
    public void test03893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03893");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        boolean boolean5 = slimTableFactory0.hasColon("");
        boolean boolean7 = slimTableFactory0.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        boolean boolean11 = slimTableFactory9.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory9.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory9.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory13.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap14;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap16 = slimTableFactory0.tableTypes;
        java.lang.String str18 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.Table table19 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable20 = slimTableFactory0.parseDefineTableTypeTable(table19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertNotNull(slimTableFactory13);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
    }

    @Test
    public void test03894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03894");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory2 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap3 = slimTableFactory2.tableTypes;
        boolean boolean5 = slimTableFactory2.hasColon("");
        boolean boolean7 = slimTableFactory2.hasColon("hi!");
        boolean boolean9 = slimTableFactory2.hasColon("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass11 = slimTableFactory2.getTableType("hi!");
        java.lang.String str13 = slimTableFactory2.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory2.copy();
        boolean boolean16 = slimTableFactory2.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap17 = slimTableFactory2.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap17;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap19 = slimTableFactory0.tableTypes;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap20 = slimTableFactory0.tableTypes;
        java.lang.Class<?> wildcardClass21 = slimTableFactory0.getClass();
        org.junit.Assert.assertNotNull(slimTableFactory2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test03895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03895");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass5 = slimTableFactory3.getTableType("");
        boolean boolean7 = slimTableFactory3.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory3.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap8;
        java.lang.String str11 = slimTableFactory1.makeTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass13 = slimTableFactory1.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory1.copy();
        java.lang.String str16 = slimTableFactory1.getFullTableName("");
        boolean boolean18 = slimTableFactory1.hasColon("");
        java.lang.Class<?> wildcardClass19 = slimTableFactory1.getClass();
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test03896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03896");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        boolean boolean6 = slimTableFactory1.hasColon("hi!");
        boolean boolean8 = slimTableFactory1.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap10 = slimTableFactory9.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory9.copy();
        boolean boolean13 = slimTableFactory9.hasColon("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass15 = slimTableFactory9.getTableType("");
        java.lang.String str17 = slimTableFactory9.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory9.copy();
        fitnesse.testsystems.slim.Table table19 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext21 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable22 = slimTableFactory18.makeSlimTable(table19, "", slimTestContext21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(slimTableFactory18);
    }

    @Test
    public void test03897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03897");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        boolean boolean4 = slimTableFactory0.hasColon("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass6 = slimTableFactory0.getTableType("hi!");
        java.lang.String str8 = slimTableFactory0.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory0.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass11 = slimTableFactory9.getTableType("");
        fitnesse.testsystems.slim.Table table12 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory9.parseDefineTableTypeRow(table12, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNull(wildcardClass11);
    }

    @Test
    public void test03898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03898");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap9 = slimTableFactory8.tableTypeArrays;
        java.lang.String str11 = slimTableFactory8.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory12.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap15 = slimTableFactory12.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass17 = slimTableFactory12.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap18 = slimTableFactory12.tableTypes;
        java.lang.String str20 = slimTableFactory12.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap21 = slimTableFactory12.tableTypeArrays;
        slimTableFactory8.tableTypeArrays = strMap21;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass24 = slimTableFactory8.getTableType("");
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNull(wildcardClass17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNull(wildcardClass24);
    }

    @Test
    public void test03899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03899");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory0.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap10 = slimTableFactory9.tableTypes;
        boolean boolean12 = slimTableFactory9.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap13 = slimTableFactory9.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory9.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory15.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap17 = slimTableFactory16.tableTypes;
        boolean boolean19 = slimTableFactory16.hasColon("");
        boolean boolean21 = slimTableFactory16.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap22 = slimTableFactory16.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass25 = slimTableFactory23.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = slimTableFactory23.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap27 = slimTableFactory26.tableTypeArrays;
        slimTableFactory16.tableTypeArrays = strMap27;
        slimTableFactory9.tableTypeArrays = strMap27;
        slimTableFactory0.tableTypeArrays = strMap27;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory31 = slimTableFactory0.copy();
        java.lang.String str33 = slimTableFactory31.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory34 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory35 = slimTableFactory34.copy();
        boolean boolean37 = slimTableFactory35.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory38 = slimTableFactory35.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory39 = slimTableFactory35.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory40 = slimTableFactory35.copy();
        boolean boolean42 = slimTableFactory40.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory43 = slimTableFactory40.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap44 = slimTableFactory43.tableTypeArrays;
        slimTableFactory31.tableTypeArrays = strMap44;
        java.util.Map<java.lang.String, java.lang.String> strMap46 = slimTableFactory31.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory47 = slimTableFactory31.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap48 = slimTableFactory47.tableTypes;
        fitnesse.testsystems.slim.Table table49 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext51 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable52 = slimTableFactory47.makeSlimTable(table49, "", slimTestContext51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNull(wildcardClass25);
        org.junit.Assert.assertNotNull(slimTableFactory26);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(slimTableFactory31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(slimTableFactory38);
        org.junit.Assert.assertNotNull(slimTableFactory39);
        org.junit.Assert.assertNotNull(slimTableFactory40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(slimTableFactory43);
        org.junit.Assert.assertNotNull(strMap44);
        org.junit.Assert.assertNotNull(strMap46);
        org.junit.Assert.assertNotNull(slimTableFactory47);
        org.junit.Assert.assertNotNull(strMap48);
    }

    @Test
    public void test03900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03900");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        boolean boolean4 = slimTableFactory0.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap5 = slimTableFactory0.tableTypeArrays;
        java.lang.String str7 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass12 = slimTableFactory10.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory10.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory13.tableTypeArrays;
        java.lang.String str16 = slimTableFactory13.makeTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap17 = slimTableFactory13.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory18.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap20 = slimTableFactory19.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass22 = slimTableFactory19.getTableType("hi!");
        boolean boolean24 = slimTableFactory19.hasColon("");
        java.lang.String str26 = slimTableFactory19.makeTableType("hi!");
        boolean boolean28 = slimTableFactory19.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory29 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory30 = slimTableFactory29.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap31 = slimTableFactory30.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory32 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass34 = slimTableFactory32.getTableType("");
        boolean boolean36 = slimTableFactory32.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap37 = slimTableFactory32.tableTypeArrays;
        slimTableFactory30.tableTypeArrays = strMap37;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory39 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory40 = slimTableFactory39.copy();
        boolean boolean42 = slimTableFactory40.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory43 = slimTableFactory40.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory44 = slimTableFactory40.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory45 = slimTableFactory44.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory46 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass48 = slimTableFactory46.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory49 = slimTableFactory46.copy();
        boolean boolean51 = slimTableFactory46.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap52 = slimTableFactory46.tableTypeArrays;
        slimTableFactory44.tableTypeArrays = strMap52;
        java.util.Map<java.lang.String, java.lang.String> strMap54 = slimTableFactory44.tableTypeArrays;
        slimTableFactory30.tableTypeArrays = strMap54;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory56 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory57 = slimTableFactory56.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap58 = slimTableFactory57.tableTypes;
        boolean boolean60 = slimTableFactory57.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap61 = slimTableFactory57.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap62 = slimTableFactory57.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory63 = slimTableFactory57.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap64 = slimTableFactory57.tableTypeArrays;
        slimTableFactory30.tableTypeArrays = strMap64;
        java.lang.String str67 = slimTableFactory30.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap68 = slimTableFactory30.tableTypeArrays;
        slimTableFactory19.tableTypeArrays = strMap68;
        slimTableFactory13.tableTypeArrays = strMap68;
        slimTableFactory9.tableTypeArrays = strMap68;
        java.lang.Class<?> wildcardClass72 = strMap68.getClass();
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNotNull(slimTableFactory13);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(slimTableFactory19);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNull(wildcardClass22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(slimTableFactory30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNull(wildcardClass34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(slimTableFactory40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(slimTableFactory43);
        org.junit.Assert.assertNotNull(slimTableFactory44);
        org.junit.Assert.assertNotNull(slimTableFactory45);
        org.junit.Assert.assertNull(wildcardClass48);
        org.junit.Assert.assertNotNull(slimTableFactory49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(strMap52);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(slimTableFactory57);
        org.junit.Assert.assertNotNull(strMap58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(strMap61);
        org.junit.Assert.assertNotNull(strMap62);
        org.junit.Assert.assertNotNull(slimTableFactory63);
        org.junit.Assert.assertNotNull(strMap64);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(strMap68);
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test03901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03901");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory4.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap6 = slimTableFactory5.tableTypes;
        boolean boolean8 = slimTableFactory5.hasColon("");
        boolean boolean10 = slimTableFactory5.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap11 = slimTableFactory5.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory12.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory12.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory15.tableTypeArrays;
        slimTableFactory5.tableTypeArrays = strMap16;
        slimTableFactory0.tableTypeArrays = strMap16;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap19 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = slimTableFactory0.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass24 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.Table table25 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable26 = slimTableFactory0.parseDefineTableTypeTable(table25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(slimTableFactory20);
        org.junit.Assert.assertNotNull(slimTableFactory21);
        org.junit.Assert.assertNotNull(slimTableFactory22);
        org.junit.Assert.assertNull(wildcardClass24);
    }

    @Test
    public void test03902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03902");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory0.getTableType("hi!");
        java.lang.String str9 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory10.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap12 = slimTableFactory10.tableTypeArrays;
        java.lang.String str14 = slimTableFactory10.makeTableType("hi!");
        fitnesse.testsystems.slim.Table table15 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable16 = slimTableFactory10.parseDefineTableTypeTable(table15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
    }

    @Test
    public void test03903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03903");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory1.tableTypeArrays;
        java.lang.String str6 = slimTableFactory1.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory7.copy();
        boolean boolean10 = slimTableFactory8.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory8.tableTypeArrays;
        java.lang.String str13 = slimTableFactory8.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory8.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap14;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory1.copy();
        java.lang.String str18 = slimTableFactory1.getFullTableName("hi!");
        boolean boolean20 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = slimTableFactory21.copy();
        boolean boolean24 = slimTableFactory22.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap25 = slimTableFactory22.tableTypeArrays;
        java.lang.String str27 = slimTableFactory22.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap28 = slimTableFactory22.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory29 = slimTableFactory22.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass31 = slimTableFactory22.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap32 = slimTableFactory22.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap33 = slimTableFactory22.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass35 = slimTableFactory22.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap36 = slimTableFactory22.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap36;
        java.lang.Class<?> wildcardClass38 = strMap36.getClass();
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(slimTableFactory22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNotNull(slimTableFactory29);
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(wildcardClass35);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test03904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03904");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        boolean boolean6 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory1.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass9 = slimTableFactory1.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory10.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap12 = slimTableFactory11.tableTypes;
        boolean boolean14 = slimTableFactory11.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap15 = slimTableFactory11.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory11.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap17 = slimTableFactory16.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap17;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass20 = slimTableFactory1.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap21 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.Table table22 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext24 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable25 = slimTableFactory1.makeSlimTable(table22, "hi!", slimTestContext24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNull(wildcardClass20);
        org.junit.Assert.assertNotNull(strMap21);
    }

    @Test
    public void test03905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03905");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory1.tableTypeArrays;
        java.lang.String str6 = slimTableFactory1.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory7.copy();
        boolean boolean10 = slimTableFactory8.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory8.tableTypeArrays;
        java.lang.String str13 = slimTableFactory8.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory8.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap14;
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory1.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap17 = slimTableFactory1.tableTypes;
        java.lang.String str19 = slimTableFactory1.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = slimTableFactory21.copy();
        boolean boolean24 = slimTableFactory22.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = slimTableFactory22.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap26 = slimTableFactory22.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = slimTableFactory22.copy();
        boolean boolean29 = slimTableFactory27.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap30 = slimTableFactory27.tableTypeArrays;
        slimTableFactory20.tableTypeArrays = strMap30;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory32 = slimTableFactory20.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory33 = slimTableFactory20.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap34 = slimTableFactory20.tableTypeArrays;
        fitnesse.testsystems.slim.Table table35 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory20.parseDefineTableTypeRow(table35, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory20);
        org.junit.Assert.assertNotNull(slimTableFactory22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(slimTableFactory25);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(slimTableFactory27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(slimTableFactory32);
        org.junit.Assert.assertNotNull(slimTableFactory33);
        org.junit.Assert.assertNotNull(strMap34);
    }

    @Test
    public void test03906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03906");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory4.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap6 = slimTableFactory5.tableTypes;
        boolean boolean8 = slimTableFactory5.hasColon("");
        boolean boolean10 = slimTableFactory5.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap11 = slimTableFactory5.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory12.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory12.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory15.tableTypeArrays;
        slimTableFactory5.tableTypeArrays = strMap16;
        slimTableFactory0.tableTypeArrays = strMap16;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap19 = slimTableFactory0.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap20 = slimTableFactory0.tableTypeArrays;
        boolean boolean22 = slimTableFactory0.hasColon("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass24 = slimTableFactory0.getTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass26 = slimTableFactory0.getTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass28 = slimTableFactory0.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory29 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass31 = slimTableFactory29.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap32 = slimTableFactory29.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory33 = slimTableFactory29.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory34 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory35 = slimTableFactory34.copy();
        boolean boolean37 = slimTableFactory35.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory38 = slimTableFactory35.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory39 = slimTableFactory35.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory40 = slimTableFactory39.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory41 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass43 = slimTableFactory41.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory44 = slimTableFactory41.copy();
        boolean boolean46 = slimTableFactory41.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap47 = slimTableFactory41.tableTypeArrays;
        slimTableFactory39.tableTypeArrays = strMap47;
        slimTableFactory33.tableTypeArrays = strMap47;
        java.lang.String str51 = slimTableFactory33.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory52 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory53 = slimTableFactory52.copy();
        boolean boolean55 = slimTableFactory53.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap56 = slimTableFactory53.tableTypeArrays;
        java.lang.String str58 = slimTableFactory53.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory59 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory60 = slimTableFactory59.copy();
        boolean boolean62 = slimTableFactory60.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap63 = slimTableFactory60.tableTypeArrays;
        java.lang.String str65 = slimTableFactory60.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap66 = slimTableFactory60.tableTypeArrays;
        slimTableFactory53.tableTypeArrays = strMap66;
        java.util.Map<java.lang.String, java.lang.String> strMap68 = slimTableFactory53.tableTypeArrays;
        slimTableFactory33.tableTypeArrays = strMap68;
        slimTableFactory0.tableTypeArrays = strMap68;
        boolean boolean72 = slimTableFactory0.hasColon("");
        java.lang.String str74 = slimTableFactory0.getFullTableName("");
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(wildcardClass24);
        org.junit.Assert.assertNull(wildcardClass26);
        org.junit.Assert.assertNull(wildcardClass28);
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(slimTableFactory33);
        org.junit.Assert.assertNotNull(slimTableFactory35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(slimTableFactory38);
        org.junit.Assert.assertNotNull(slimTableFactory39);
        org.junit.Assert.assertNotNull(slimTableFactory40);
        org.junit.Assert.assertNull(wildcardClass43);
        org.junit.Assert.assertNotNull(slimTableFactory44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "hi!" + "'", str51, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(strMap56);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(slimTableFactory60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(strMap63);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strMap68);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
    }

    @Test
    public void test03907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03907");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        java.lang.String str5 = slimTableFactory0.makeTableType("hi!");
        java.lang.String str7 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap8 = slimTableFactory0.tableTypes;
        java.lang.String str10 = slimTableFactory0.makeTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass12 = slimTableFactory0.getTableType("hi!");
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNull(wildcardClass12);
    }

    @Test
    public void test03908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03908");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        boolean boolean4 = slimTableFactory0.hasColon("");
        java.lang.String str6 = slimTableFactory0.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory0.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass9 = slimTableFactory7.getTableType("hi!");
        java.lang.String str11 = slimTableFactory7.getFullTableName("");
        fitnesse.testsystems.slim.Table table12 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext14 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable15 = slimTableFactory7.makeSlimTable(table12, "", slimTestContext14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test03909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03909");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.lang.String str3 = slimTableFactory0.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap5 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory0.tableTypeArrays;
        java.lang.Class<?> wildcardClass7 = slimTableFactory0.getClass();
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!" + "'", str3, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test03910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03910");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        boolean boolean5 = slimTableFactory0.hasColon("");
        java.lang.String str7 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory0.copy();
        java.lang.String str12 = slimTableFactory10.getFullTableName("");
        fitnesse.testsystems.slim.Table table13 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable14 = slimTableFactory10.parseDefineTableTypeTable(table13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test03911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03911");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory1.tableTypeArrays;
        java.lang.String str6 = slimTableFactory1.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory7.copy();
        boolean boolean10 = slimTableFactory8.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory8.tableTypeArrays;
        java.lang.String str13 = slimTableFactory8.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory8.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap14;
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory1.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap17 = slimTableFactory1.tableTypes;
        java.lang.String str19 = slimTableFactory1.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = slimTableFactory21.copy();
        boolean boolean24 = slimTableFactory22.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = slimTableFactory22.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap26 = slimTableFactory22.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = slimTableFactory22.copy();
        boolean boolean29 = slimTableFactory27.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap30 = slimTableFactory27.tableTypeArrays;
        slimTableFactory20.tableTypeArrays = strMap30;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory32 = slimTableFactory20.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory33 = slimTableFactory20.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass35 = slimTableFactory20.getTableType("hi!");
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory20);
        org.junit.Assert.assertNotNull(slimTableFactory22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(slimTableFactory25);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(slimTableFactory27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(slimTableFactory32);
        org.junit.Assert.assertNotNull(slimTableFactory33);
        org.junit.Assert.assertNull(wildcardClass35);
    }

    @Test
    public void test03912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03912");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory3.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory5.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory5.tableTypeArrays;
        slimTableFactory3.tableTypeArrays = strMap7;
        boolean boolean10 = slimTableFactory3.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory3.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass13 = slimTableFactory3.getTableType("");
        java.lang.Class<?> wildcardClass14 = slimTableFactory3.getClass();
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test03913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03913");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory5.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory5.tableTypes;
        java.lang.String str9 = slimTableFactory5.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory5.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory5.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap12 = slimTableFactory5.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory5.getTableType("");
        boolean boolean16 = slimTableFactory5.hasColon("");
        java.lang.Class<?> wildcardClass17 = slimTableFactory5.getClass();
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test03914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03914");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("");
        java.lang.String str7 = slimTableFactory0.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory9.copy();
        boolean boolean12 = slimTableFactory10.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap13 = slimTableFactory10.tableTypeArrays;
        java.lang.String str15 = slimTableFactory10.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = slimTableFactory16.copy();
        boolean boolean19 = slimTableFactory17.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap20 = slimTableFactory17.tableTypeArrays;
        java.lang.String str22 = slimTableFactory17.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap23 = slimTableFactory17.tableTypeArrays;
        slimTableFactory10.tableTypeArrays = strMap23;
        java.util.Map<java.lang.String, java.lang.String> strMap25 = slimTableFactory10.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap26 = slimTableFactory10.tableTypes;
        java.lang.String str28 = slimTableFactory10.getFullTableName("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass30 = slimTableFactory10.getTableType("hi!");
        java.lang.String str32 = slimTableFactory10.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap33 = slimTableFactory10.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap33;
        java.lang.String str36 = slimTableFactory0.getFullTableName("");
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(slimTableFactory17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertNull(wildcardClass30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
    }

    @Test
    public void test03915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03915");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap6 = slimTableFactory0.tableTypes;
        java.lang.String str8 = slimTableFactory0.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory9.copy();
        boolean boolean12 = slimTableFactory10.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory10.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory10.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory15.copy();
        boolean boolean18 = slimTableFactory16.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory16.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory16.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = slimTableFactory16.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap22 = slimTableFactory21.tableTypeArrays;
        slimTableFactory10.tableTypeArrays = strMap22;
        slimTableFactory0.tableTypeArrays = strMap22;
        java.util.Map<java.lang.String, java.lang.String> strMap25 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = slimTableFactory26.copy();
        boolean boolean29 = slimTableFactory27.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory30 = slimTableFactory27.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap31 = slimTableFactory27.tableTypeArrays;
        boolean boolean33 = slimTableFactory27.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass35 = slimTableFactory27.getTableType("hi!");
        java.lang.String str37 = slimTableFactory27.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory38 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory39 = slimTableFactory38.copy();
        boolean boolean41 = slimTableFactory39.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory42 = slimTableFactory39.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory43 = slimTableFactory39.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory44 = slimTableFactory39.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap45 = slimTableFactory39.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory46 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory47 = slimTableFactory46.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap48 = slimTableFactory46.tableTypeArrays;
        slimTableFactory39.tableTypeArrays = strMap48;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory50 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass52 = slimTableFactory50.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory53 = slimTableFactory50.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap54 = slimTableFactory53.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap55 = slimTableFactory53.tableTypeArrays;
        slimTableFactory39.tableTypeArrays = strMap55;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap57 = slimTableFactory39.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass59 = slimTableFactory39.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory60 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory61 = slimTableFactory60.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap62 = slimTableFactory61.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass64 = slimTableFactory61.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap65 = slimTableFactory61.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory66 = slimTableFactory61.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory67 = slimTableFactory66.copy();
        java.lang.String str69 = slimTableFactory67.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap70 = slimTableFactory67.tableTypeArrays;
        slimTableFactory39.tableTypeArrays = strMap70;
        slimTableFactory27.tableTypeArrays = strMap70;
        slimTableFactory0.tableTypeArrays = strMap70;
        fitnesse.testsystems.slim.Table table74 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable75 = slimTableFactory0.parseDefineTableTypeTable(table74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(slimTableFactory13);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(slimTableFactory19);
        org.junit.Assert.assertNotNull(slimTableFactory20);
        org.junit.Assert.assertNotNull(slimTableFactory21);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(slimTableFactory27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(slimTableFactory30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(wildcardClass35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(slimTableFactory39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(slimTableFactory42);
        org.junit.Assert.assertNotNull(slimTableFactory43);
        org.junit.Assert.assertNotNull(slimTableFactory44);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNotNull(slimTableFactory47);
        org.junit.Assert.assertNotNull(strMap48);
        org.junit.Assert.assertNull(wildcardClass52);
        org.junit.Assert.assertNotNull(slimTableFactory53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(strMap55);
        org.junit.Assert.assertNotNull(strMap57);
        org.junit.Assert.assertNull(wildcardClass59);
        org.junit.Assert.assertNotNull(slimTableFactory61);
        org.junit.Assert.assertNotNull(strMap62);
        org.junit.Assert.assertNull(wildcardClass64);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(slimTableFactory66);
        org.junit.Assert.assertNotNull(slimTableFactory67);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "hi!" + "'", str69, "hi!");
        org.junit.Assert.assertNotNull(strMap70);
    }

    @Test
    public void test03916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03916");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory3.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory3.copy();
        java.lang.String str7 = slimTableFactory5.makeTableType("");
        fitnesse.testsystems.slim.Table table8 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory5.parseDefineTableTypeRow(table8, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
    }

    @Test
    public void test03917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03917");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.lang.String str3 = slimTableFactory0.getFullTableName("hi!");
        java.lang.String str5 = slimTableFactory0.makeTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory0.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap8 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory0.copy();
        java.lang.String str11 = slimTableFactory9.getFullTableName("");
        fitnesse.testsystems.slim.Table table12 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext14 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable15 = slimTableFactory9.makeSlimTable(table12, "hi!", slimTestContext14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!" + "'", str3, "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test03918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03918");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        java.lang.String str5 = slimTableFactory0.makeTableType("hi!");
        java.lang.String str7 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap9 = slimTableFactory0.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass11 = slimTableFactory0.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory0.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory0.getTableType("");
        boolean boolean16 = slimTableFactory0.hasColon("hi!");
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test03919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03919");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory3.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap5 = slimTableFactory4.tableTypes;
        java.lang.String str7 = slimTableFactory4.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory4.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap9 = slimTableFactory4.tableTypes;
        java.lang.Class<?> wildcardClass10 = strMap9.getClass();
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test03920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03920");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory3.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap5 = slimTableFactory3.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap6 = slimTableFactory3.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass8 = slimTableFactory3.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory3.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory10.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap12 = slimTableFactory11.tableTypes;
        boolean boolean14 = slimTableFactory11.hasColon("");
        boolean boolean16 = slimTableFactory11.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap17 = slimTableFactory11.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass20 = slimTableFactory18.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = slimTableFactory18.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap22 = slimTableFactory21.tableTypeArrays;
        slimTableFactory11.tableTypeArrays = strMap22;
        slimTableFactory9.tableTypeArrays = strMap22;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = slimTableFactory25.copy();
        boolean boolean28 = slimTableFactory26.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory29 = slimTableFactory26.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap30 = slimTableFactory26.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass32 = slimTableFactory26.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap33 = slimTableFactory26.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory34 = slimTableFactory26.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass36 = slimTableFactory26.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap37 = slimTableFactory26.tableTypeArrays;
        slimTableFactory9.tableTypeArrays = strMap37;
        java.lang.String str40 = slimTableFactory9.getFullTableName("hi!");
        fitnesse.testsystems.slim.Table table41 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory9.parseDefineTableTypeRow(table41, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNull(wildcardClass20);
        org.junit.Assert.assertNotNull(slimTableFactory21);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(slimTableFactory26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(slimTableFactory29);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNull(wildcardClass32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(slimTableFactory34);
        org.junit.Assert.assertNull(wildcardClass36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "hi!" + "'", str40, "hi!");
    }

    @Test
    public void test03921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03921");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        boolean boolean6 = slimTableFactory1.hasColon("hi!");
        boolean boolean8 = slimTableFactory1.hasColon("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass10 = slimTableFactory1.getTableType("hi!");
        java.lang.String str12 = slimTableFactory1.getFullTableName("");
        boolean boolean14 = slimTableFactory1.hasColon("hi!");
        java.lang.String str16 = slimTableFactory1.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory17.copy();
        boolean boolean20 = slimTableFactory18.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = slimTableFactory18.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap22 = slimTableFactory18.tableTypeArrays;
        boolean boolean24 = slimTableFactory18.hasColon("hi!");
        java.lang.String str26 = slimTableFactory18.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap27 = slimTableFactory18.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap27;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory29 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.Table table30 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext32 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable33 = slimTableFactory29.makeSlimTable(table30, "", slimTestContext32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(slimTableFactory18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(slimTableFactory21);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(slimTableFactory29);
    }

    @Test
    public void test03922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03922");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass5 = slimTableFactory3.getTableType("");
        boolean boolean7 = slimTableFactory3.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory3.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap8;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory10.copy();
        boolean boolean13 = slimTableFactory11.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory11.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory11.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory15.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass19 = slimTableFactory17.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory17.copy();
        boolean boolean22 = slimTableFactory17.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap23 = slimTableFactory17.tableTypeArrays;
        slimTableFactory15.tableTypeArrays = strMap23;
        java.util.Map<java.lang.String, java.lang.String> strMap25 = slimTableFactory15.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap25;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap28 = slimTableFactory27.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap29 = slimTableFactory27.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass31 = slimTableFactory27.getTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass33 = slimTableFactory27.getTableType("");
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(slimTableFactory20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(slimTableFactory27);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNull(wildcardClass33);
    }

    @Test
    public void test03923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03923");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass5 = slimTableFactory3.getTableType("");
        boolean boolean7 = slimTableFactory3.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory3.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap8;
        java.lang.String str11 = slimTableFactory1.makeTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass13 = slimTableFactory1.getTableType("");
        boolean boolean15 = slimTableFactory1.hasColon("");
        java.lang.String str17 = slimTableFactory1.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap18 = slimTableFactory1.tableTypeArrays;
        java.lang.Class<?> wildcardClass19 = strMap18.getClass();
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test03924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03924");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory5.copy();
        boolean boolean8 = slimTableFactory6.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory6.copy();
        fitnesse.testsystems.slim.Table table10 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory9.parseDefineTableTypeRow(table10, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(slimTableFactory9);
    }

    @Test
    public void test03925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03925");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.lang.String str3 = slimTableFactory0.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory0.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass6 = slimTableFactory0.getTableType("");
        java.lang.String str8 = slimTableFactory0.makeTableType("");
        java.lang.Class<?> wildcardClass9 = slimTableFactory0.getClass();
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!" + "'", str3, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test03926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03926");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory0.getTableType("hi!");
        java.lang.String str9 = slimTableFactory0.getFullTableName("");
        java.lang.String str11 = slimTableFactory0.makeTableType("hi!");
        java.lang.String str13 = slimTableFactory0.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass16 = slimTableFactory14.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = slimTableFactory14.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory18.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap20 = slimTableFactory19.tableTypes;
        boolean boolean22 = slimTableFactory19.hasColon("");
        boolean boolean24 = slimTableFactory19.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap25 = slimTableFactory19.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass28 = slimTableFactory26.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory29 = slimTableFactory26.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap30 = slimTableFactory29.tableTypeArrays;
        slimTableFactory19.tableTypeArrays = strMap30;
        slimTableFactory14.tableTypeArrays = strMap30;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory33 = slimTableFactory14.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory34 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory35 = slimTableFactory34.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap36 = null;
        slimTableFactory34.tableTypeArrays = strMap36;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass39 = slimTableFactory34.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory40 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory41 = slimTableFactory40.copy();
        boolean boolean43 = slimTableFactory41.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory44 = slimTableFactory41.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory45 = slimTableFactory41.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory46 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass48 = slimTableFactory46.getTableType("");
        boolean boolean50 = slimTableFactory46.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap51 = slimTableFactory46.tableTypeArrays;
        slimTableFactory45.tableTypeArrays = strMap51;
        slimTableFactory34.tableTypeArrays = strMap51;
        boolean boolean55 = slimTableFactory34.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory56 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass58 = slimTableFactory56.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap59 = slimTableFactory56.tableTypeArrays;
        slimTableFactory34.tableTypeArrays = strMap59;
        slimTableFactory33.tableTypeArrays = strMap59;
        slimTableFactory0.tableTypeArrays = strMap59;
        java.util.Map<java.lang.String, java.lang.String> strMap63 = slimTableFactory0.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass65 = slimTableFactory0.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap66 = slimTableFactory0.tableTypeArrays;
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNull(wildcardClass16);
        org.junit.Assert.assertNotNull(slimTableFactory17);
        org.junit.Assert.assertNotNull(slimTableFactory19);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNull(wildcardClass28);
        org.junit.Assert.assertNotNull(slimTableFactory29);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(slimTableFactory33);
        org.junit.Assert.assertNotNull(slimTableFactory35);
        org.junit.Assert.assertNull(wildcardClass39);
        org.junit.Assert.assertNotNull(slimTableFactory41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(slimTableFactory44);
        org.junit.Assert.assertNotNull(slimTableFactory45);
        org.junit.Assert.assertNull(wildcardClass48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(strMap51);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(wildcardClass58);
        org.junit.Assert.assertNotNull(strMap59);
        org.junit.Assert.assertNotNull(strMap63);
        org.junit.Assert.assertNull(wildcardClass65);
        org.junit.Assert.assertNotNull(strMap66);
    }

    @Test
    public void test03927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03927");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory3.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap5 = slimTableFactory3.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap6 = slimTableFactory3.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass8 = slimTableFactory3.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory3.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory3.tableTypeArrays;
        java.lang.String str12 = slimTableFactory3.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap13 = slimTableFactory3.tableTypes;
        fitnesse.testsystems.slim.Table table14 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory3.parseDefineTableTypeRow(table14, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNotNull(strMap13);
    }

    @Test
    public void test03928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03928");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap5 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory1.copy();
        boolean boolean8 = slimTableFactory6.hasColon("hi!");
        java.lang.String str10 = slimTableFactory6.makeTableType("hi!");
        boolean boolean12 = slimTableFactory6.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap13 = slimTableFactory6.tableTypes;
        boolean boolean15 = slimTableFactory6.hasColon("");
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test03929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03929");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory0.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap9 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory0.tableTypeArrays;
        boolean boolean12 = slimTableFactory0.hasColon("hi!");
        java.lang.String str14 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory15.copy();
        boolean boolean18 = slimTableFactory16.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory16.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory16.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = slimTableFactory20.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap22 = slimTableFactory20.tableTypes;
        java.lang.String str24 = slimTableFactory20.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap25 = slimTableFactory20.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap25;
        java.util.Map<java.lang.String, java.lang.String> strMap27 = slimTableFactory0.tableTypeArrays;
        java.lang.String str29 = slimTableFactory0.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap30 = slimTableFactory0.tableTypes;
        boolean boolean32 = slimTableFactory0.hasColon("");
        fitnesse.testsystems.slim.Table table33 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable34 = slimTableFactory0.parseDefineTableTypeTable(table33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(slimTableFactory19);
        org.junit.Assert.assertNotNull(slimTableFactory20);
        org.junit.Assert.assertNotNull(slimTableFactory21);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test03930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03930");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory8.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap10;
        java.lang.String str13 = slimTableFactory1.getFullTableName("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass15 = slimTableFactory1.getTableType("");
        boolean boolean17 = slimTableFactory1.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap18 = slimTableFactory1.tableTypes;
        java.lang.Class<?> wildcardClass19 = slimTableFactory1.getClass();
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test03931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03931");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        boolean boolean6 = slimTableFactory1.hasColon("hi!");
        boolean boolean8 = slimTableFactory1.hasColon("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass10 = slimTableFactory1.getTableType("hi!");
        java.lang.String str12 = slimTableFactory1.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory13.copy();
        boolean boolean16 = slimTableFactory14.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap17 = slimTableFactory14.tableTypeArrays;
        java.lang.String str19 = slimTableFactory14.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = slimTableFactory20.copy();
        boolean boolean23 = slimTableFactory21.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap24 = slimTableFactory21.tableTypeArrays;
        java.lang.String str26 = slimTableFactory21.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap27 = slimTableFactory21.tableTypeArrays;
        slimTableFactory14.tableTypeArrays = strMap27;
        java.util.Map<java.lang.String, java.lang.String> strMap29 = slimTableFactory14.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap30 = slimTableFactory14.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap31 = slimTableFactory14.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap31;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory33 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory34 = slimTableFactory33.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap35 = slimTableFactory34.tableTypes;
        boolean boolean37 = slimTableFactory34.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap38 = slimTableFactory34.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap39 = slimTableFactory34.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory40 = slimTableFactory34.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap41 = slimTableFactory34.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory42 = slimTableFactory34.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap43 = slimTableFactory34.tableTypeArrays;
        java.lang.String str45 = slimTableFactory34.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap46 = slimTableFactory34.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap46;
        java.lang.String str49 = slimTableFactory1.makeTableType("");
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(slimTableFactory21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(slimTableFactory34);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNotNull(slimTableFactory40);
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertNotNull(slimTableFactory42);
        org.junit.Assert.assertNotNull(strMap43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(strMap46);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
    }

    @Test
    public void test03932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03932");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory1.tableTypeArrays;
        java.lang.String str6 = slimTableFactory1.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory7.copy();
        boolean boolean10 = slimTableFactory8.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory8.tableTypeArrays;
        java.lang.String str13 = slimTableFactory8.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory8.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap14;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = slimTableFactory1.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap19 = slimTableFactory1.tableTypes;
        java.lang.String str21 = slimTableFactory1.makeTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass23 = slimTableFactory1.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = slimTableFactory24.copy();
        boolean boolean27 = slimTableFactory25.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap28 = slimTableFactory25.tableTypeArrays;
        java.lang.String str30 = slimTableFactory25.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap31 = slimTableFactory25.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory32 = slimTableFactory25.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap33 = slimTableFactory25.tableTypes;
        java.lang.String str35 = slimTableFactory25.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap36 = slimTableFactory25.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass38 = slimTableFactory25.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory39 = slimTableFactory25.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap40 = slimTableFactory25.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap40;
        fitnesse.testsystems.slim.Table table42 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext44 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable45 = slimTableFactory1.makeSlimTable(table42, "hi!", slimTestContext44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertNotNull(slimTableFactory17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertNull(wildcardClass23);
        org.junit.Assert.assertNotNull(slimTableFactory25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(slimTableFactory32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNull(wildcardClass38);
        org.junit.Assert.assertNotNull(slimTableFactory39);
        org.junit.Assert.assertNotNull(strMap40);
    }

    @Test
    public void test03933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03933");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass4 = slimTableFactory1.getTableType("hi!");
        boolean boolean6 = slimTableFactory1.hasColon("");
        java.lang.String str8 = slimTableFactory1.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap9 = slimTableFactory1.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap10 = slimTableFactory1.tableTypes;
        boolean boolean12 = slimTableFactory1.hasColon("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory1.getTableType("");
        fitnesse.testsystems.slim.Table table15 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory1.parseDefineTableTypeRow(table15, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(wildcardClass14);
    }

    @Test
    public void test03934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03934");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory0.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass6 = slimTableFactory4.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory7.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap9 = null;
        slimTableFactory7.tableTypeArrays = strMap9;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass12 = slimTableFactory7.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory13.copy();
        boolean boolean16 = slimTableFactory14.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = slimTableFactory14.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory14.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass21 = slimTableFactory19.getTableType("");
        boolean boolean23 = slimTableFactory19.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap24 = slimTableFactory19.tableTypeArrays;
        slimTableFactory18.tableTypeArrays = strMap24;
        slimTableFactory7.tableTypeArrays = strMap24;
        slimTableFactory4.tableTypeArrays = strMap24;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory29 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass31 = slimTableFactory29.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory32 = slimTableFactory29.copy();
        boolean boolean34 = slimTableFactory29.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap35 = slimTableFactory29.tableTypeArrays;
        slimTableFactory28.tableTypeArrays = strMap35;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory37 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory38 = slimTableFactory37.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap39 = slimTableFactory38.tableTypes;
        boolean boolean41 = slimTableFactory38.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap42 = slimTableFactory38.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap43 = slimTableFactory38.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap44 = slimTableFactory38.tableTypeArrays;
        slimTableFactory28.tableTypeArrays = strMap44;
        slimTableFactory4.tableTypeArrays = strMap44;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass48 = slimTableFactory4.getTableType("hi!");
        fitnesse.testsystems.slim.Table table49 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory4.parseDefineTableTypeRow(table49, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(slimTableFactory17);
        org.junit.Assert.assertNotNull(slimTableFactory18);
        org.junit.Assert.assertNull(wildcardClass21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNotNull(slimTableFactory32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(slimTableFactory38);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(strMap42);
        org.junit.Assert.assertNotNull(strMap43);
        org.junit.Assert.assertNotNull(strMap44);
        org.junit.Assert.assertNull(wildcardClass48);
    }

    @Test
    public void test03935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03935");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass4 = slimTableFactory1.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory5.copy();
        boolean boolean8 = slimTableFactory6.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory6.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory6.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory11.copy();
        boolean boolean14 = slimTableFactory12.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory12.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory12.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = slimTableFactory12.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = slimTableFactory17.tableTypeArrays;
        slimTableFactory6.tableTypeArrays = strMap18;
        slimTableFactory1.tableTypeArrays = strMap18;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap21 = slimTableFactory1.tableTypes;
        java.lang.String str23 = slimTableFactory1.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap24 = slimTableFactory1.tableTypeArrays;
        java.lang.String str26 = slimTableFactory1.makeTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass28 = slimTableFactory1.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap29 = slimTableFactory1.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap30 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.Table table31 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory1.parseDefineTableTypeRow(table31, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertNotNull(slimTableFactory17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNull(wildcardClass28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(strMap30);
    }

    @Test
    public void test03936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03936");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory5.copy();
        boolean boolean8 = slimTableFactory5.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap9 = slimTableFactory5.tableTypeArrays;
        java.lang.String str11 = slimTableFactory5.getFullTableName("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass13 = slimTableFactory5.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory5.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap15 = slimTableFactory5.tableTypeArrays;
        fitnesse.testsystems.slim.Table table16 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory5.parseDefineTableTypeRow(table16, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(strMap15);
    }

    @Test
    public void test03937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03937");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap5 = slimTableFactory1.tableTypes;
        boolean boolean7 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.Table table8 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable9 = slimTableFactory1.parseDefineTableTypeTable(table8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test03938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03938");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        boolean boolean6 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass10 = slimTableFactory8.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory8.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap12 = slimTableFactory11.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap12;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory1.copy();
        java.lang.String str16 = slimTableFactory14.makeTableType("hi!");
        java.lang.String str18 = slimTableFactory14.getFullTableName("hi!");
        java.lang.String str20 = slimTableFactory14.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = slimTableFactory14.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass23 = slimTableFactory14.getTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass25 = slimTableFactory14.getTableType("");
        fitnesse.testsystems.slim.Table table26 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable27 = slimTableFactory14.parseDefineTableTypeTable(table26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(slimTableFactory21);
        org.junit.Assert.assertNull(wildcardClass23);
        org.junit.Assert.assertNull(wildcardClass25);
    }

    @Test
    public void test03939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03939");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("hi!");
        java.lang.String str7 = slimTableFactory0.getFullTableName("");
        java.lang.String str9 = slimTableFactory0.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.Table table11 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable12 = slimTableFactory10.parseDefineTableTypeTable(table11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory10);
    }

    @Test
    public void test03940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03940");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap5 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass8 = slimTableFactory6.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap9 = slimTableFactory6.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass11 = slimTableFactory6.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory12.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory12.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory15.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory17.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap19 = slimTableFactory17.tableTypeArrays;
        slimTableFactory15.tableTypeArrays = strMap19;
        slimTableFactory6.tableTypeArrays = strMap19;
        slimTableFactory1.tableTypeArrays = strMap19;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass25 = slimTableFactory23.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = slimTableFactory23.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap27 = slimTableFactory26.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap28 = slimTableFactory26.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap28;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory30 = slimTableFactory1.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass32 = slimTableFactory30.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory33 = slimTableFactory30.copy();
        java.lang.Class<?> wildcardClass34 = slimTableFactory33.getClass();
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertNotNull(slimTableFactory18);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNull(wildcardClass25);
        org.junit.Assert.assertNotNull(slimTableFactory26);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNotNull(slimTableFactory30);
        org.junit.Assert.assertNull(wildcardClass32);
        org.junit.Assert.assertNotNull(slimTableFactory33);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test03941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03941");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass5 = slimTableFactory3.getTableType("");
        boolean boolean7 = slimTableFactory3.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory3.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap8;
        java.lang.String str11 = slimTableFactory1.makeTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass13 = slimTableFactory1.getTableType("");
        java.lang.String str15 = slimTableFactory1.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory1.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass18 = slimTableFactory16.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap19 = slimTableFactory16.tableTypes;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap20 = slimTableFactory16.tableTypes;
        boolean boolean22 = slimTableFactory16.hasColon("");
        java.lang.String str24 = slimTableFactory16.getFullTableName("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass26 = slimTableFactory16.getTableType("");
        fitnesse.testsystems.slim.Table table27 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory16.parseDefineTableTypeRow(table27, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNull(wildcardClass26);
    }

    @Test
    public void test03942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03942");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.lang.String str3 = slimTableFactory0.getFullTableName("hi!");
        java.lang.String str5 = slimTableFactory0.makeTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory0.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap8 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass11 = slimTableFactory9.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory9.copy();
        boolean boolean14 = slimTableFactory9.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass16 = slimTableFactory9.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory17.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap19 = slimTableFactory18.tableTypes;
        boolean boolean21 = slimTableFactory18.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap22 = slimTableFactory18.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap23 = slimTableFactory18.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = slimTableFactory24.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap26 = slimTableFactory25.tableTypes;
        boolean boolean28 = slimTableFactory25.hasColon("");
        boolean boolean30 = slimTableFactory25.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap31 = slimTableFactory25.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory32 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass34 = slimTableFactory32.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory35 = slimTableFactory32.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap36 = slimTableFactory35.tableTypeArrays;
        slimTableFactory25.tableTypeArrays = strMap36;
        slimTableFactory18.tableTypeArrays = strMap36;
        slimTableFactory9.tableTypeArrays = strMap36;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory40 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass42 = slimTableFactory40.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap43 = slimTableFactory40.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory44 = slimTableFactory40.copy();
        boolean boolean46 = slimTableFactory44.hasColon("");
        java.lang.String str48 = slimTableFactory44.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap49 = slimTableFactory44.tableTypeArrays;
        slimTableFactory9.tableTypeArrays = strMap49;
        slimTableFactory0.tableTypeArrays = strMap49;
        fitnesse.testsystems.slim.Table table52 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext54 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable55 = slimTableFactory0.makeSlimTable(table52, "", slimTestContext54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!" + "'", str3, "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(wildcardClass16);
        org.junit.Assert.assertNotNull(slimTableFactory18);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(slimTableFactory25);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNull(wildcardClass34);
        org.junit.Assert.assertNotNull(slimTableFactory35);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNull(wildcardClass42);
        org.junit.Assert.assertNotNull(strMap43);
        org.junit.Assert.assertNotNull(slimTableFactory44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(strMap49);
    }

    @Test
    public void test03943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03943");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory1.copy();
        boolean boolean8 = slimTableFactory1.hasColon("");
        boolean boolean10 = slimTableFactory1.hasColon("");
        java.lang.Class<?> wildcardClass11 = slimTableFactory1.getClass();
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test03944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03944");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory1.tableTypeArrays;
        java.lang.String str6 = slimTableFactory1.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory7.copy();
        boolean boolean10 = slimTableFactory8.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory8.tableTypeArrays;
        java.lang.String str13 = slimTableFactory8.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory8.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap14;
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory1.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap17 = slimTableFactory1.tableTypes;
        java.lang.String str19 = slimTableFactory1.getFullTableName("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass21 = slimTableFactory1.getTableType("hi!");
        java.lang.String str23 = slimTableFactory1.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap24 = slimTableFactory1.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap25 = null;
        slimTableFactory1.tableTypeArrays = strMap25;
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNull(wildcardClass21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertNotNull(strMap24);
    }

    @Test
    public void test03945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03945");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory5.getTableType("hi!");
        boolean boolean9 = slimTableFactory5.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass11 = slimTableFactory5.getTableType("hi!");
        java.lang.String str13 = slimTableFactory5.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory5.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap15 = slimTableFactory14.tableTypes;
        java.lang.Class<?> wildcardClass16 = slimTableFactory14.getClass();
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test03946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03946");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        boolean boolean6 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory1.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass9 = slimTableFactory1.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory10.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap12 = slimTableFactory11.tableTypes;
        boolean boolean14 = slimTableFactory11.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap15 = slimTableFactory11.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory11.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap17 = slimTableFactory16.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap17;
        java.util.Map<java.lang.String, java.lang.String> strMap19 = slimTableFactory1.tableTypeArrays;
        java.lang.String str21 = slimTableFactory1.makeTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass23 = slimTableFactory1.getTableType("");
        java.lang.String str25 = slimTableFactory1.makeTableType("");
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertNull(wildcardClass23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
    }

    @Test
    public void test03947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03947");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory1.tableTypeArrays;
        java.lang.String str6 = slimTableFactory1.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        boolean boolean11 = slimTableFactory9.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory9.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap13 = slimTableFactory9.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass16 = slimTableFactory14.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap17 = slimTableFactory14.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass19 = slimTableFactory14.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass22 = slimTableFactory20.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = slimTableFactory20.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = slimTableFactory23.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = slimTableFactory25.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap27 = slimTableFactory25.tableTypeArrays;
        slimTableFactory23.tableTypeArrays = strMap27;
        slimTableFactory14.tableTypeArrays = strMap27;
        slimTableFactory9.tableTypeArrays = strMap27;
        slimTableFactory1.tableTypeArrays = strMap27;
        java.lang.String str33 = slimTableFactory1.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory34 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap35 = slimTableFactory34.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory36 = slimTableFactory34.copy();
        java.lang.String str38 = slimTableFactory34.getFullTableName("hi!");
        java.lang.String str40 = slimTableFactory34.makeTableType("hi!");
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNull(wildcardClass16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNull(wildcardClass22);
        org.junit.Assert.assertNotNull(slimTableFactory23);
        org.junit.Assert.assertNotNull(slimTableFactory24);
        org.junit.Assert.assertNotNull(slimTableFactory26);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory34);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(slimTableFactory36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "hi!" + "'", str40, "hi!");
    }

    @Test
    public void test03948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03948");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory1.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap5 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory6.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap8 = null;
        slimTableFactory6.tableTypeArrays = strMap8;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass11 = slimTableFactory6.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap12 = slimTableFactory6.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory13.copy();
        boolean boolean16 = slimTableFactory14.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = slimTableFactory14.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory14.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass21 = slimTableFactory19.getTableType("");
        boolean boolean23 = slimTableFactory19.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap24 = slimTableFactory19.tableTypeArrays;
        slimTableFactory18.tableTypeArrays = strMap24;
        slimTableFactory6.tableTypeArrays = strMap24;
        slimTableFactory1.tableTypeArrays = strMap24;
        fitnesse.testsystems.slim.Table table28 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory1.parseDefineTableTypeRow(table28, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertNull(strMap12);
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(slimTableFactory17);
        org.junit.Assert.assertNotNull(slimTableFactory18);
        org.junit.Assert.assertNull(wildcardClass21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strMap24);
    }

    @Test
    public void test03949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03949");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap5 = slimTableFactory1.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory1.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.Table table10 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext12 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable13 = slimTableFactory9.makeSlimTable(table10, "", slimTestContext12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
    }

    @Test
    public void test03950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03950");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory0.hasColon("hi!");
        boolean boolean5 = slimTableFactory0.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.Table table8 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext10 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable11 = slimTableFactory0.makeSlimTable(table8, "hi!", slimTestContext10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardClass7);
    }

    @Test
    public void test03951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03951");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass4 = slimTableFactory1.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap5 = slimTableFactory1.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap6 = slimTableFactory1.tableTypes;
        boolean boolean8 = slimTableFactory1.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap9 = slimTableFactory1.tableTypes;
        boolean boolean11 = slimTableFactory1.hasColon("");
        java.lang.String str13 = slimTableFactory1.makeTableType("hi!");
        boolean boolean15 = slimTableFactory1.hasColon("hi!");
        java.lang.Class<?> wildcardClass16 = slimTableFactory1.getClass();
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test03952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03952");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory3.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory3.copy();
        boolean boolean7 = slimTableFactory5.hasColon("");
        fitnesse.testsystems.slim.Table table8 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory5.parseDefineTableTypeRow(table8, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test03953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03953");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap5 = slimTableFactory1.tableTypeArrays;
        java.lang.String str7 = slimTableFactory1.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory1.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass10 = slimTableFactory1.getTableType("");
        java.lang.String str12 = slimTableFactory1.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory1.copy();
        java.lang.Class<?> wildcardClass15 = slimTableFactory14.getClass();
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(slimTableFactory13);
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test03954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03954");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass6 = slimTableFactory1.getTableType("");
        java.lang.Class<?> wildcardClass7 = slimTableFactory1.getClass();
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test03955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03955");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory3.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap5 = slimTableFactory3.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass8 = slimTableFactory6.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap9 = slimTableFactory6.tableTypeArrays;
        boolean boolean11 = slimTableFactory6.hasColon("");
        java.lang.String str13 = slimTableFactory6.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory6.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory14.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass18 = slimTableFactory16.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory16.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap20 = slimTableFactory19.tableTypeArrays;
        slimTableFactory14.tableTypeArrays = strMap20;
        slimTableFactory3.tableTypeArrays = strMap20;
        java.util.Map<java.lang.String, java.lang.String> strMap23 = slimTableFactory3.tableTypeArrays;
        java.lang.String str25 = slimTableFactory3.makeTableType("hi!");
        java.lang.Class<?> wildcardClass26 = slimTableFactory3.getClass();
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertNotNull(slimTableFactory19);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test03956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03956");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory0.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory9.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap11 = slimTableFactory10.tableTypes;
        boolean boolean13 = slimTableFactory10.hasColon("");
        boolean boolean15 = slimTableFactory10.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap16 = slimTableFactory10.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass19 = slimTableFactory17.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory17.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap21 = slimTableFactory20.tableTypeArrays;
        slimTableFactory10.tableTypeArrays = strMap21;
        java.util.Map<java.lang.String, java.lang.String> strMap23 = slimTableFactory10.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap24 = slimTableFactory10.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap24;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass27 = slimTableFactory0.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory29 = slimTableFactory28.copy();
        java.lang.String str31 = slimTableFactory28.getFullTableName("hi!");
        java.lang.Class<?> wildcardClass32 = slimTableFactory28.getClass();
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(slimTableFactory20);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNull(wildcardClass27);
        org.junit.Assert.assertNotNull(slimTableFactory28);
        org.junit.Assert.assertNotNull(slimTableFactory29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test03957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03957");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory3.hasColon("");
        boolean boolean7 = slimTableFactory3.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory3.copy();
        java.lang.String str10 = slimTableFactory3.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap11 = slimTableFactory3.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory12.copy();
        boolean boolean15 = slimTableFactory13.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory13.tableTypeArrays;
        java.lang.String str18 = slimTableFactory13.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory19.copy();
        boolean boolean22 = slimTableFactory20.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap23 = slimTableFactory20.tableTypeArrays;
        java.lang.String str25 = slimTableFactory20.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap26 = slimTableFactory20.tableTypeArrays;
        slimTableFactory13.tableTypeArrays = strMap26;
        java.util.Map<java.lang.String, java.lang.String> strMap28 = slimTableFactory13.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap29 = slimTableFactory13.tableTypes;
        java.lang.String str31 = slimTableFactory13.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory32 = slimTableFactory13.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory33 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory34 = slimTableFactory33.copy();
        boolean boolean36 = slimTableFactory34.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory37 = slimTableFactory34.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap38 = slimTableFactory34.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory39 = slimTableFactory34.copy();
        boolean boolean41 = slimTableFactory39.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap42 = slimTableFactory39.tableTypeArrays;
        slimTableFactory32.tableTypeArrays = strMap42;
        slimTableFactory3.tableTypeArrays = strMap42;
        java.lang.String str46 = slimTableFactory3.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap47 = null;
        slimTableFactory3.tableTypeArrays = strMap47;
        fitnesse.testsystems.slim.Table table49 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory3.parseDefineTableTypeRow(table49, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(slimTableFactory13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(slimTableFactory20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory32);
        org.junit.Assert.assertNotNull(slimTableFactory34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(slimTableFactory37);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertNotNull(slimTableFactory39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(strMap42);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
    }

    @Test
    public void test03958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03958");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory0.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap10 = slimTableFactory9.tableTypes;
        boolean boolean12 = slimTableFactory9.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap13 = slimTableFactory9.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory9.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory15.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap17 = slimTableFactory16.tableTypes;
        boolean boolean19 = slimTableFactory16.hasColon("");
        boolean boolean21 = slimTableFactory16.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap22 = slimTableFactory16.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass25 = slimTableFactory23.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = slimTableFactory23.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap27 = slimTableFactory26.tableTypeArrays;
        slimTableFactory16.tableTypeArrays = strMap27;
        slimTableFactory9.tableTypeArrays = strMap27;
        slimTableFactory0.tableTypeArrays = strMap27;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory31 = slimTableFactory0.copy();
        java.lang.String str33 = slimTableFactory31.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory34 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory35 = slimTableFactory34.copy();
        boolean boolean37 = slimTableFactory35.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory38 = slimTableFactory35.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory39 = slimTableFactory35.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory40 = slimTableFactory35.copy();
        boolean boolean42 = slimTableFactory40.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory43 = slimTableFactory40.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap44 = slimTableFactory43.tableTypeArrays;
        slimTableFactory31.tableTypeArrays = strMap44;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass47 = slimTableFactory31.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory48 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass50 = slimTableFactory48.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory51 = slimTableFactory48.copy();
        boolean boolean53 = slimTableFactory48.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass55 = slimTableFactory48.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory56 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory57 = slimTableFactory56.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap58 = slimTableFactory57.tableTypes;
        boolean boolean60 = slimTableFactory57.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap61 = slimTableFactory57.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap62 = slimTableFactory57.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory63 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory64 = slimTableFactory63.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap65 = slimTableFactory64.tableTypes;
        boolean boolean67 = slimTableFactory64.hasColon("");
        boolean boolean69 = slimTableFactory64.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap70 = slimTableFactory64.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory71 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass73 = slimTableFactory71.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory74 = slimTableFactory71.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap75 = slimTableFactory74.tableTypeArrays;
        slimTableFactory64.tableTypeArrays = strMap75;
        slimTableFactory57.tableTypeArrays = strMap75;
        slimTableFactory48.tableTypeArrays = strMap75;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory79 = slimTableFactory48.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap80 = slimTableFactory79.tableTypeArrays;
        slimTableFactory31.tableTypeArrays = strMap80;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass83 = slimTableFactory31.getTableType("hi!");
        fitnesse.testsystems.slim.Table table84 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory31.parseDefineTableTypeRow(table84, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNull(wildcardClass25);
        org.junit.Assert.assertNotNull(slimTableFactory26);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(slimTableFactory31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(slimTableFactory38);
        org.junit.Assert.assertNotNull(slimTableFactory39);
        org.junit.Assert.assertNotNull(slimTableFactory40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(slimTableFactory43);
        org.junit.Assert.assertNotNull(strMap44);
        org.junit.Assert.assertNull(wildcardClass47);
        org.junit.Assert.assertNull(wildcardClass50);
        org.junit.Assert.assertNotNull(slimTableFactory51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(wildcardClass55);
        org.junit.Assert.assertNotNull(slimTableFactory57);
        org.junit.Assert.assertNotNull(strMap58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(strMap61);
        org.junit.Assert.assertNotNull(strMap62);
        org.junit.Assert.assertNotNull(slimTableFactory64);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(strMap70);
        org.junit.Assert.assertNull(wildcardClass73);
        org.junit.Assert.assertNotNull(slimTableFactory74);
        org.junit.Assert.assertNotNull(strMap75);
        org.junit.Assert.assertNotNull(slimTableFactory79);
        org.junit.Assert.assertNotNull(strMap80);
        org.junit.Assert.assertNull(wildcardClass83);
    }

    @Test
    public void test03959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03959");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        boolean boolean5 = slimTableFactory0.hasColon("");
        java.lang.String str7 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory8.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory8.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory8.copy();
        java.lang.String str14 = slimTableFactory8.makeTableType("");
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test03960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03960");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap6 = slimTableFactory0.tableTypes;
        java.lang.String str8 = slimTableFactory0.getFullTableName("hi!");
        java.lang.String str10 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.Table table11 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable12 = slimTableFactory0.parseDefineTableTypeTable(table11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test03961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03961");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory0.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory9.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap11 = slimTableFactory10.tableTypes;
        boolean boolean13 = slimTableFactory10.hasColon("");
        boolean boolean15 = slimTableFactory10.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap16 = slimTableFactory10.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass19 = slimTableFactory17.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory17.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap21 = slimTableFactory20.tableTypeArrays;
        slimTableFactory10.tableTypeArrays = strMap21;
        java.util.Map<java.lang.String, java.lang.String> strMap23 = slimTableFactory10.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap24 = slimTableFactory10.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap24;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass27 = slimTableFactory0.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory29 = slimTableFactory28.copy();
        boolean boolean31 = slimTableFactory28.hasColon("");
        fitnesse.testsystems.slim.Table table32 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory28.parseDefineTableTypeRow(table32, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(slimTableFactory20);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNull(wildcardClass27);
        org.junit.Assert.assertNotNull(slimTableFactory28);
        org.junit.Assert.assertNotNull(slimTableFactory29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test03962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03962");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        java.lang.String str5 = slimTableFactory0.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory0.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass8 = slimTableFactory0.getTableType("");
        java.lang.String str10 = slimTableFactory0.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap11 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.Table table12 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory0.parseDefineTableTypeRow(table12, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNotNull(strMap11);
    }

    @Test
    public void test03963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03963");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        boolean boolean4 = slimTableFactory0.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass8 = slimTableFactory6.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap9 = slimTableFactory6.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass11 = slimTableFactory6.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory6.copy();
        java.lang.String str14 = slimTableFactory6.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory15.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap17 = slimTableFactory16.tableTypes;
        boolean boolean19 = slimTableFactory16.hasColon("");
        boolean boolean21 = slimTableFactory16.hasColon("hi!");
        boolean boolean23 = slimTableFactory16.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = slimTableFactory16.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass26 = slimTableFactory24.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap27 = slimTableFactory24.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass30 = slimTableFactory28.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory31 = slimTableFactory28.copy();
        boolean boolean33 = slimTableFactory31.hasColon("");
        boolean boolean35 = slimTableFactory31.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory36 = slimTableFactory31.copy();
        java.lang.String str38 = slimTableFactory31.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap39 = slimTableFactory31.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory40 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory41 = slimTableFactory40.copy();
        boolean boolean43 = slimTableFactory41.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap44 = slimTableFactory41.tableTypeArrays;
        java.lang.String str46 = slimTableFactory41.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory47 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory48 = slimTableFactory47.copy();
        boolean boolean50 = slimTableFactory48.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap51 = slimTableFactory48.tableTypeArrays;
        java.lang.String str53 = slimTableFactory48.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap54 = slimTableFactory48.tableTypeArrays;
        slimTableFactory41.tableTypeArrays = strMap54;
        java.util.Map<java.lang.String, java.lang.String> strMap56 = slimTableFactory41.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap57 = slimTableFactory41.tableTypes;
        java.lang.String str59 = slimTableFactory41.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory60 = slimTableFactory41.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory61 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory62 = slimTableFactory61.copy();
        boolean boolean64 = slimTableFactory62.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory65 = slimTableFactory62.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap66 = slimTableFactory62.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory67 = slimTableFactory62.copy();
        boolean boolean69 = slimTableFactory67.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap70 = slimTableFactory67.tableTypeArrays;
        slimTableFactory60.tableTypeArrays = strMap70;
        slimTableFactory31.tableTypeArrays = strMap70;
        slimTableFactory24.tableTypeArrays = strMap70;
        boolean boolean75 = slimTableFactory24.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory76 = slimTableFactory24.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap77 = slimTableFactory76.tableTypeArrays;
        slimTableFactory6.tableTypeArrays = strMap77;
        slimTableFactory5.tableTypeArrays = strMap77;
        java.lang.Class<?> wildcardClass80 = strMap77.getClass();
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(slimTableFactory24);
        org.junit.Assert.assertNull(wildcardClass26);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNull(wildcardClass30);
        org.junit.Assert.assertNotNull(slimTableFactory31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(slimTableFactory36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNotNull(slimTableFactory41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(strMap44);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(slimTableFactory48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(strMap51);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(strMap56);
        org.junit.Assert.assertNotNull(strMap57);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "hi!" + "'", str59, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory60);
        org.junit.Assert.assertNotNull(slimTableFactory62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(slimTableFactory65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(slimTableFactory67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(strMap70);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(slimTableFactory76);
        org.junit.Assert.assertNotNull(strMap77);
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test03964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03964");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        boolean boolean6 = slimTableFactory1.hasColon("hi!");
        boolean boolean8 = slimTableFactory1.hasColon("");
        java.lang.String str10 = slimTableFactory1.makeTableType("");
        java.lang.String str12 = slimTableFactory1.makeTableType("");
        java.lang.String str14 = slimTableFactory1.getFullTableName("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass16 = slimTableFactory1.getTableType("");
        fitnesse.testsystems.slim.Table table17 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext19 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable20 = slimTableFactory1.makeSlimTable(table17, "", slimTestContext19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNull(wildcardClass16);
    }

    @Test
    public void test03965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03965");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap5 = slimTableFactory1.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory1.copy();
        java.lang.String str9 = slimTableFactory7.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap10 = slimTableFactory7.tableTypes;
        java.lang.String str12 = slimTableFactory7.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory7.copy();
        java.lang.String str15 = slimTableFactory13.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory13.copy();
        java.lang.String str18 = slimTableFactory16.getFullTableName("");
        fitnesse.testsystems.slim.Table table19 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory16.parseDefineTableTypeRow(table19, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
    }

    @Test
    public void test03966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03966");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        boolean boolean6 = slimTableFactory1.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = null;
        slimTableFactory8.tableTypeArrays = strMap10;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass13 = slimTableFactory8.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory14.copy();
        boolean boolean17 = slimTableFactory15.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory15.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory15.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass22 = slimTableFactory20.getTableType("");
        boolean boolean24 = slimTableFactory20.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap25 = slimTableFactory20.tableTypeArrays;
        slimTableFactory19.tableTypeArrays = strMap25;
        slimTableFactory8.tableTypeArrays = strMap25;
        boolean boolean29 = slimTableFactory8.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory30 = slimTableFactory8.copy();
        java.lang.String str32 = slimTableFactory8.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap33 = slimTableFactory8.tableTypes;
        boolean boolean35 = slimTableFactory8.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap36 = slimTableFactory8.tableTypeArrays;
        slimTableFactory7.tableTypeArrays = strMap36;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory38 = slimTableFactory7.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass40 = slimTableFactory38.getTableType("");
        java.lang.Class<?> wildcardClass41 = slimTableFactory38.getClass();
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(slimTableFactory18);
        org.junit.Assert.assertNotNull(slimTableFactory19);
        org.junit.Assert.assertNull(wildcardClass22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(slimTableFactory30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(slimTableFactory38);
        org.junit.Assert.assertNull(wildcardClass40);
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test03967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03967");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass3 = slimTableFactory1.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        boolean boolean6 = slimTableFactory1.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory1.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap7;
        boolean boolean10 = slimTableFactory0.hasColon("hi!");
        java.lang.String str12 = slimTableFactory0.makeTableType("");
        java.lang.String str14 = slimTableFactory0.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory0.copy();
        java.lang.Class<?> wildcardClass16 = slimTableFactory15.getClass();
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test03968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03968");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        boolean boolean4 = slimTableFactory0.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap5 = slimTableFactory0.tableTypeArrays;
        java.lang.String str7 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory0.copy();
        java.lang.String str10 = slimTableFactory0.getFullTableName("hi!");
        java.lang.String str12 = slimTableFactory0.getFullTableName("");
        boolean boolean14 = slimTableFactory0.hasColon("");
        java.lang.Class<?> wildcardClass15 = slimTableFactory0.getClass();
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test03969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03969");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory1.tableTypeArrays;
        java.lang.String str6 = slimTableFactory1.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory7.copy();
        boolean boolean10 = slimTableFactory8.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory8.tableTypeArrays;
        java.lang.String str13 = slimTableFactory8.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory8.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap14;
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory1.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap17 = slimTableFactory1.tableTypes;
        java.lang.String str19 = slimTableFactory1.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = slimTableFactory21.copy();
        boolean boolean24 = slimTableFactory22.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = slimTableFactory22.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap26 = slimTableFactory22.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = slimTableFactory22.copy();
        boolean boolean29 = slimTableFactory27.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap30 = slimTableFactory27.tableTypeArrays;
        slimTableFactory20.tableTypeArrays = strMap30;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory32 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass34 = slimTableFactory32.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap35 = slimTableFactory32.tableTypeArrays;
        slimTableFactory20.tableTypeArrays = strMap35;
        java.lang.String str38 = slimTableFactory20.getFullTableName("hi!");
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory20);
        org.junit.Assert.assertNotNull(slimTableFactory22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(slimTableFactory25);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(slimTableFactory27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNull(wildcardClass34);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
    }

    @Test
    public void test03970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03970");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory0.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass6 = slimTableFactory4.getTableType("hi!");
        java.lang.String str8 = slimTableFactory4.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory4.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory4.tableTypeArrays;
        fitnesse.testsystems.slim.Table table11 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable12 = slimTableFactory4.parseDefineTableTypeTable(table11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(strMap10);
    }

    @Test
    public void test03971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03971");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory5.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory5.tableTypes;
        java.lang.String str9 = slimTableFactory5.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory5.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory10.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap12 = slimTableFactory11.tableTypes;
        java.lang.String str14 = slimTableFactory11.getFullTableName("");
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test03972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03972");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory5.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory7.copy();
        boolean boolean10 = slimTableFactory8.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory8.tableTypeArrays;
        slimTableFactory6.tableTypeArrays = strMap11;
        java.lang.String str14 = slimTableFactory6.getFullTableName("hi!");
        java.lang.String str16 = slimTableFactory6.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap17 = slimTableFactory6.tableTypeArrays;
        boolean boolean19 = slimTableFactory6.hasColon("");
        boolean boolean21 = slimTableFactory6.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass24 = slimTableFactory22.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = slimTableFactory22.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap26 = slimTableFactory25.tableTypeArrays;
        java.lang.String str28 = slimTableFactory25.makeTableType("hi!");
        java.lang.String str30 = slimTableFactory25.makeTableType("hi!");
        java.lang.String str32 = slimTableFactory25.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap33 = slimTableFactory25.tableTypeArrays;
        slimTableFactory6.tableTypeArrays = strMap33;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap35 = slimTableFactory6.tableTypes;
        java.lang.Class<?> wildcardClass36 = slimTableFactory6.getClass();
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(wildcardClass24);
        org.junit.Assert.assertNotNull(slimTableFactory25);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test03973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03973");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass4 = slimTableFactory1.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap5 = slimTableFactory1.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory1.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass12 = slimTableFactory10.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory10.copy();
        boolean boolean15 = slimTableFactory10.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory10.tableTypeArrays;
        slimTableFactory9.tableTypeArrays = strMap16;
        boolean boolean19 = slimTableFactory9.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = slimTableFactory20.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap22 = slimTableFactory21.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass25 = slimTableFactory23.getTableType("");
        boolean boolean27 = slimTableFactory23.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap28 = slimTableFactory23.tableTypeArrays;
        slimTableFactory21.tableTypeArrays = strMap28;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory30 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory31 = slimTableFactory30.copy();
        boolean boolean33 = slimTableFactory31.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory34 = slimTableFactory31.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory35 = slimTableFactory31.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory36 = slimTableFactory35.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory37 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass39 = slimTableFactory37.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory40 = slimTableFactory37.copy();
        boolean boolean42 = slimTableFactory37.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap43 = slimTableFactory37.tableTypeArrays;
        slimTableFactory35.tableTypeArrays = strMap43;
        java.util.Map<java.lang.String, java.lang.String> strMap45 = slimTableFactory35.tableTypeArrays;
        slimTableFactory21.tableTypeArrays = strMap45;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory47 = slimTableFactory21.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory48 = slimTableFactory21.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory49 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass51 = slimTableFactory49.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory52 = slimTableFactory49.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory53 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory54 = slimTableFactory53.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap55 = slimTableFactory54.tableTypes;
        boolean boolean57 = slimTableFactory54.hasColon("");
        boolean boolean59 = slimTableFactory54.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap60 = slimTableFactory54.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory61 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass63 = slimTableFactory61.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory64 = slimTableFactory61.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap65 = slimTableFactory64.tableTypeArrays;
        slimTableFactory54.tableTypeArrays = strMap65;
        slimTableFactory49.tableTypeArrays = strMap65;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory68 = slimTableFactory49.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory69 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory70 = slimTableFactory69.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap71 = null;
        slimTableFactory69.tableTypeArrays = strMap71;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass74 = slimTableFactory69.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory75 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory76 = slimTableFactory75.copy();
        boolean boolean78 = slimTableFactory76.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory79 = slimTableFactory76.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory80 = slimTableFactory76.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory81 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass83 = slimTableFactory81.getTableType("");
        boolean boolean85 = slimTableFactory81.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap86 = slimTableFactory81.tableTypeArrays;
        slimTableFactory80.tableTypeArrays = strMap86;
        slimTableFactory69.tableTypeArrays = strMap86;
        boolean boolean90 = slimTableFactory69.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory91 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass93 = slimTableFactory91.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap94 = slimTableFactory91.tableTypeArrays;
        slimTableFactory69.tableTypeArrays = strMap94;
        slimTableFactory68.tableTypeArrays = strMap94;
        slimTableFactory48.tableTypeArrays = strMap94;
        slimTableFactory9.tableTypeArrays = strMap94;
        slimTableFactory8.tableTypeArrays = strMap94;
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNotNull(slimTableFactory13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(slimTableFactory21);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNull(wildcardClass25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNotNull(slimTableFactory31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(slimTableFactory34);
        org.junit.Assert.assertNotNull(slimTableFactory35);
        org.junit.Assert.assertNotNull(slimTableFactory36);
        org.junit.Assert.assertNull(wildcardClass39);
        org.junit.Assert.assertNotNull(slimTableFactory40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(strMap43);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNotNull(slimTableFactory47);
        org.junit.Assert.assertNotNull(slimTableFactory48);
        org.junit.Assert.assertNull(wildcardClass51);
        org.junit.Assert.assertNotNull(slimTableFactory52);
        org.junit.Assert.assertNotNull(slimTableFactory54);
        org.junit.Assert.assertNotNull(strMap55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(strMap60);
        org.junit.Assert.assertNull(wildcardClass63);
        org.junit.Assert.assertNotNull(slimTableFactory64);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(slimTableFactory68);
        org.junit.Assert.assertNotNull(slimTableFactory70);
        org.junit.Assert.assertNull(wildcardClass74);
        org.junit.Assert.assertNotNull(slimTableFactory76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(slimTableFactory79);
        org.junit.Assert.assertNotNull(slimTableFactory80);
        org.junit.Assert.assertNull(wildcardClass83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(strMap86);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNull(wildcardClass93);
        org.junit.Assert.assertNotNull(strMap94);
    }

    @Test
    public void test03974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03974");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap5 = slimTableFactory1.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory1.copy();
        boolean boolean11 = slimTableFactory9.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory9.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory9.getTableType("");
        java.lang.String str16 = slimTableFactory9.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = slimTableFactory9.copy();
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(slimTableFactory17);
    }

    @Test
    public void test03975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03975");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory5.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass9 = slimTableFactory7.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory7.copy();
        boolean boolean12 = slimTableFactory7.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap13 = slimTableFactory7.tableTypeArrays;
        slimTableFactory5.tableTypeArrays = strMap13;
        java.util.Map<java.lang.String, java.lang.String> strMap15 = slimTableFactory5.tableTypeArrays;
        boolean boolean17 = slimTableFactory5.hasColon("hi!");
        java.lang.Class<?> wildcardClass18 = slimTableFactory5.getClass();
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test03976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03976");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        slimTableFactory0.tableTypeArrays = strMap2;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass5 = slimTableFactory0.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory0.tableTypeArrays;
        boolean boolean8 = slimTableFactory0.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap9 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.Table table11 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable12 = slimTableFactory0.parseDefineTableTypeTable(table11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertNull(strMap6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(strMap9);
        org.junit.Assert.assertNull(strMap10);
    }

    @Test
    public void test03977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03977");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass5 = slimTableFactory3.getTableType("");
        boolean boolean7 = slimTableFactory3.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory3.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap8;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory10.copy();
        boolean boolean13 = slimTableFactory11.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory11.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory11.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory15.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass19 = slimTableFactory17.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory17.copy();
        boolean boolean22 = slimTableFactory17.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap23 = slimTableFactory17.tableTypeArrays;
        slimTableFactory15.tableTypeArrays = strMap23;
        java.util.Map<java.lang.String, java.lang.String> strMap25 = slimTableFactory15.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap25;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap28 = slimTableFactory27.tableTypeArrays;
        boolean boolean30 = slimTableFactory27.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap31 = slimTableFactory27.tableTypeArrays;
        fitnesse.testsystems.slim.Table table32 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory27.parseDefineTableTypeRow(table32, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(slimTableFactory20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(slimTableFactory27);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strMap31);
    }

    @Test
    public void test03978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03978");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap5 = slimTableFactory1.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap8 = slimTableFactory1.tableTypes;
        boolean boolean10 = slimTableFactory1.hasColon("");
        fitnesse.testsystems.slim.Table table11 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable12 = slimTableFactory1.parseDefineTableTypeTable(table11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test03979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03979");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory5.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory5.tableTypes;
        boolean boolean9 = slimTableFactory5.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory5.tableTypeArrays;
        java.lang.String str12 = slimTableFactory5.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap13 = slimTableFactory5.tableTypes;
        java.lang.String str15 = slimTableFactory5.makeTableType("hi!");
        fitnesse.testsystems.slim.Table table16 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext18 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable19 = slimTableFactory5.makeSlimTable(table16, "hi!", slimTestContext18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
    }

    @Test
    public void test03980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03980");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory2 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass4 = slimTableFactory2.getTableType("");
        boolean boolean6 = slimTableFactory2.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory2.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap7;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass10 = slimTableFactory0.getTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass12 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory14.copy();
        boolean boolean17 = slimTableFactory15.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory15.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory15.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory19.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = slimTableFactory21.copy();
        boolean boolean24 = slimTableFactory22.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap25 = slimTableFactory22.tableTypeArrays;
        slimTableFactory20.tableTypeArrays = strMap25;
        slimTableFactory13.tableTypeArrays = strMap25;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap28 = slimTableFactory13.tableTypes;
        java.lang.Class<?> wildcardClass29 = strMap28.getClass();
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNotNull(slimTableFactory13);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(slimTableFactory18);
        org.junit.Assert.assertNotNull(slimTableFactory19);
        org.junit.Assert.assertNotNull(slimTableFactory20);
        org.junit.Assert.assertNotNull(slimTableFactory22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test03981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03981");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory4.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap6 = slimTableFactory5.tableTypes;
        boolean boolean8 = slimTableFactory5.hasColon("");
        boolean boolean10 = slimTableFactory5.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap11 = slimTableFactory5.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory12.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory12.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory15.tableTypeArrays;
        slimTableFactory5.tableTypeArrays = strMap16;
        slimTableFactory0.tableTypeArrays = strMap16;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap19 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = slimTableFactory21.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap23 = slimTableFactory22.tableTypes;
        boolean boolean25 = slimTableFactory22.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap26 = slimTableFactory22.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap27 = slimTableFactory22.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = slimTableFactory22.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = slimTableFactory22.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory30 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory31 = slimTableFactory30.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap32 = slimTableFactory31.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory33 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass35 = slimTableFactory33.getTableType("");
        boolean boolean37 = slimTableFactory33.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap38 = slimTableFactory33.tableTypeArrays;
        slimTableFactory31.tableTypeArrays = strMap38;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory40 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory41 = slimTableFactory40.copy();
        boolean boolean43 = slimTableFactory41.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory44 = slimTableFactory41.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory45 = slimTableFactory41.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory46 = slimTableFactory45.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory47 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass49 = slimTableFactory47.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory50 = slimTableFactory47.copy();
        boolean boolean52 = slimTableFactory47.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap53 = slimTableFactory47.tableTypeArrays;
        slimTableFactory45.tableTypeArrays = strMap53;
        java.util.Map<java.lang.String, java.lang.String> strMap55 = slimTableFactory45.tableTypeArrays;
        slimTableFactory31.tableTypeArrays = strMap55;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory57 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory58 = slimTableFactory57.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap59 = slimTableFactory58.tableTypes;
        boolean boolean61 = slimTableFactory58.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap62 = slimTableFactory58.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap63 = slimTableFactory58.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory64 = slimTableFactory58.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap65 = slimTableFactory58.tableTypeArrays;
        slimTableFactory31.tableTypeArrays = strMap65;
        slimTableFactory22.tableTypeArrays = strMap65;
        slimTableFactory0.tableTypeArrays = strMap65;
        fitnesse.testsystems.slim.Table table69 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory0.parseDefineTableTypeRow(table69, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(slimTableFactory20);
        org.junit.Assert.assertNotNull(slimTableFactory22);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(slimTableFactory28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(slimTableFactory31);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNull(wildcardClass35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertNotNull(slimTableFactory41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(slimTableFactory44);
        org.junit.Assert.assertNotNull(slimTableFactory45);
        org.junit.Assert.assertNotNull(slimTableFactory46);
        org.junit.Assert.assertNull(wildcardClass49);
        org.junit.Assert.assertNotNull(slimTableFactory50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(strMap53);
        org.junit.Assert.assertNotNull(strMap55);
        org.junit.Assert.assertNotNull(slimTableFactory58);
        org.junit.Assert.assertNotNull(strMap59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(strMap62);
        org.junit.Assert.assertNotNull(strMap63);
        org.junit.Assert.assertNotNull(slimTableFactory64);
        org.junit.Assert.assertNotNull(strMap65);
    }

    @Test
    public void test03982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03982");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory3.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap5 = slimTableFactory3.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap6 = slimTableFactory3.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass8 = slimTableFactory3.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory3.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory10.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap12 = slimTableFactory11.tableTypes;
        boolean boolean14 = slimTableFactory11.hasColon("");
        boolean boolean16 = slimTableFactory11.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap17 = slimTableFactory11.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass20 = slimTableFactory18.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = slimTableFactory18.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap22 = slimTableFactory21.tableTypeArrays;
        slimTableFactory11.tableTypeArrays = strMap22;
        slimTableFactory9.tableTypeArrays = strMap22;
        java.lang.String str26 = slimTableFactory9.makeTableType("");
        java.lang.Class<?> wildcardClass27 = slimTableFactory9.getClass();
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNull(wildcardClass20);
        org.junit.Assert.assertNotNull(slimTableFactory21);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test03983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03983");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory1.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass9 = slimTableFactory1.getTableType("");
        boolean boolean11 = slimTableFactory1.hasColon("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass13 = slimTableFactory1.getTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass15 = slimTableFactory1.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory1.tableTypeArrays;
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertNotNull(strMap16);
    }

    @Test
    public void test03984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03984");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory3.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap5 = slimTableFactory3.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap6 = slimTableFactory3.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass8 = slimTableFactory3.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory3.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory3.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass12 = slimTableFactory3.getTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory3.getTableType("");
        boolean boolean16 = slimTableFactory3.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass19 = slimTableFactory17.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory17.copy();
        boolean boolean22 = slimTableFactory17.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap23 = slimTableFactory17.tableTypes;
        java.lang.String str25 = slimTableFactory17.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = slimTableFactory26.copy();
        boolean boolean29 = slimTableFactory27.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory30 = slimTableFactory27.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap31 = slimTableFactory27.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory32 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory33 = slimTableFactory32.copy();
        boolean boolean35 = slimTableFactory33.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory36 = slimTableFactory33.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory37 = slimTableFactory33.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory38 = slimTableFactory33.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap39 = slimTableFactory38.tableTypeArrays;
        slimTableFactory27.tableTypeArrays = strMap39;
        slimTableFactory17.tableTypeArrays = strMap39;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap42 = slimTableFactory17.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory43 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass45 = slimTableFactory43.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory46 = slimTableFactory43.copy();
        boolean boolean48 = slimTableFactory43.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass50 = slimTableFactory43.getTableType("hi!");
        java.lang.String str52 = slimTableFactory43.getFullTableName("");
        java.lang.String str54 = slimTableFactory43.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory55 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory56 = slimTableFactory55.copy();
        boolean boolean58 = slimTableFactory56.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory59 = slimTableFactory56.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap60 = slimTableFactory56.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory61 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory62 = slimTableFactory61.copy();
        boolean boolean64 = slimTableFactory62.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory65 = slimTableFactory62.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory66 = slimTableFactory62.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory67 = slimTableFactory62.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap68 = slimTableFactory67.tableTypeArrays;
        slimTableFactory56.tableTypeArrays = strMap68;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory70 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory71 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass73 = slimTableFactory71.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory74 = slimTableFactory71.copy();
        boolean boolean76 = slimTableFactory71.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap77 = slimTableFactory71.tableTypeArrays;
        slimTableFactory70.tableTypeArrays = strMap77;
        slimTableFactory56.tableTypeArrays = strMap77;
        slimTableFactory43.tableTypeArrays = strMap77;
        slimTableFactory17.tableTypeArrays = strMap77;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass83 = slimTableFactory17.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap84 = slimTableFactory17.tableTypeArrays;
        slimTableFactory3.tableTypeArrays = strMap84;
        java.lang.Class<?> wildcardClass86 = slimTableFactory3.getClass();
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(slimTableFactory20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(slimTableFactory30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(slimTableFactory33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(slimTableFactory36);
        org.junit.Assert.assertNotNull(slimTableFactory37);
        org.junit.Assert.assertNotNull(slimTableFactory38);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNotNull(strMap42);
        org.junit.Assert.assertNull(wildcardClass45);
        org.junit.Assert.assertNotNull(slimTableFactory46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(wildcardClass50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(slimTableFactory56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(slimTableFactory59);
        org.junit.Assert.assertNotNull(strMap60);
        org.junit.Assert.assertNotNull(slimTableFactory62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(slimTableFactory65);
        org.junit.Assert.assertNotNull(slimTableFactory66);
        org.junit.Assert.assertNotNull(slimTableFactory67);
        org.junit.Assert.assertNotNull(strMap68);
        org.junit.Assert.assertNull(wildcardClass73);
        org.junit.Assert.assertNotNull(slimTableFactory74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(strMap77);
        org.junit.Assert.assertNull(wildcardClass83);
        org.junit.Assert.assertNotNull(strMap84);
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test03985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03985");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory7.copy();
        java.lang.String str10 = slimTableFactory7.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory7.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory7.copy();
        java.lang.Class<?> wildcardClass13 = slimTableFactory7.getClass();
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test03986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03986");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        boolean boolean4 = slimTableFactory0.hasColon("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass6 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory7.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory7.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory7.copy();
        boolean boolean12 = slimTableFactory10.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory13.copy();
        boolean boolean16 = slimTableFactory14.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap17 = slimTableFactory14.tableTypeArrays;
        java.lang.String str19 = slimTableFactory14.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = slimTableFactory20.copy();
        boolean boolean23 = slimTableFactory21.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap24 = slimTableFactory21.tableTypeArrays;
        java.lang.String str26 = slimTableFactory21.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap27 = slimTableFactory21.tableTypeArrays;
        slimTableFactory14.tableTypeArrays = strMap27;
        java.util.Map<java.lang.String, java.lang.String> strMap29 = slimTableFactory14.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap30 = slimTableFactory14.tableTypes;
        java.lang.String str32 = slimTableFactory14.getFullTableName("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass34 = slimTableFactory14.getTableType("hi!");
        java.lang.String str36 = slimTableFactory14.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap37 = slimTableFactory14.tableTypeArrays;
        slimTableFactory10.tableTypeArrays = strMap37;
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(slimTableFactory21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
        org.junit.Assert.assertNull(wildcardClass34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertNotNull(strMap37);
    }

    @Test
    public void test03987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03987");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass4 = slimTableFactory1.getTableType("hi!");
        boolean boolean6 = slimTableFactory1.hasColon("");
        java.lang.String str8 = slimTableFactory1.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap9 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory10.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap12 = slimTableFactory11.tableTypes;
        boolean boolean14 = slimTableFactory11.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap15 = slimTableFactory11.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory11.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = slimTableFactory16.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory17.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory19.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap21 = slimTableFactory20.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass24 = slimTableFactory22.getTableType("");
        boolean boolean26 = slimTableFactory22.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap27 = slimTableFactory22.tableTypeArrays;
        slimTableFactory20.tableTypeArrays = strMap27;
        java.lang.String str30 = slimTableFactory20.makeTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass32 = slimTableFactory20.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory33 = slimTableFactory20.copy();
        java.lang.String str35 = slimTableFactory20.getFullTableName("");
        java.lang.String str37 = slimTableFactory20.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap38 = slimTableFactory20.tableTypeArrays;
        slimTableFactory18.tableTypeArrays = strMap38;
        slimTableFactory1.tableTypeArrays = strMap38;
        fitnesse.testsystems.slim.Table table41 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable42 = slimTableFactory1.parseDefineTableTypeTable(table41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertNotNull(slimTableFactory17);
        org.junit.Assert.assertNotNull(slimTableFactory18);
        org.junit.Assert.assertNotNull(slimTableFactory20);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNull(wildcardClass24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNull(wildcardClass32);
        org.junit.Assert.assertNotNull(slimTableFactory33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(strMap38);
    }

    @Test
    public void test03988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03988");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        boolean boolean6 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass10 = slimTableFactory8.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory8.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap12 = slimTableFactory11.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap12;
        java.lang.String str15 = slimTableFactory1.makeTableType("");
        fitnesse.testsystems.slim.Table table16 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory1.parseDefineTableTypeRow(table16, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test03989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03989");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory6.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        boolean boolean11 = slimTableFactory9.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory9.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory9.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory9.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap15 = slimTableFactory9.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = slimTableFactory16.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = slimTableFactory16.tableTypeArrays;
        slimTableFactory9.tableTypeArrays = strMap18;
        slimTableFactory6.tableTypeArrays = strMap18;
        java.util.Map<java.lang.String, java.lang.String> strMap21 = slimTableFactory6.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass23 = slimTableFactory6.getTableType("hi!");
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertNotNull(slimTableFactory13);
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(slimTableFactory17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNull(wildcardClass23);
    }

    @Test
    public void test03990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03990");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory4.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap6 = slimTableFactory5.tableTypes;
        boolean boolean8 = slimTableFactory5.hasColon("");
        boolean boolean10 = slimTableFactory5.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap11 = slimTableFactory5.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory12.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory12.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory15.tableTypeArrays;
        slimTableFactory5.tableTypeArrays = strMap16;
        slimTableFactory0.tableTypeArrays = strMap16;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap19 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap21 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.Table table22 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory0.parseDefineTableTypeRow(table22, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(slimTableFactory20);
        org.junit.Assert.assertNotNull(strMap21);
    }

    @Test
    public void test03991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03991");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory1.tableTypes;
        boolean boolean4 = slimTableFactory1.hasColon("");
        boolean boolean6 = slimTableFactory1.hasColon("hi!");
        boolean boolean8 = slimTableFactory1.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory1.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass11 = slimTableFactory9.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap12 = slimTableFactory9.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass15 = slimTableFactory13.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory13.copy();
        boolean boolean18 = slimTableFactory16.hasColon("");
        boolean boolean20 = slimTableFactory16.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = slimTableFactory16.copy();
        java.lang.String str23 = slimTableFactory16.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap24 = slimTableFactory16.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = slimTableFactory25.copy();
        boolean boolean28 = slimTableFactory26.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap29 = slimTableFactory26.tableTypeArrays;
        java.lang.String str31 = slimTableFactory26.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory32 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory33 = slimTableFactory32.copy();
        boolean boolean35 = slimTableFactory33.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap36 = slimTableFactory33.tableTypeArrays;
        java.lang.String str38 = slimTableFactory33.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap39 = slimTableFactory33.tableTypeArrays;
        slimTableFactory26.tableTypeArrays = strMap39;
        java.util.Map<java.lang.String, java.lang.String> strMap41 = slimTableFactory26.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap42 = slimTableFactory26.tableTypes;
        java.lang.String str44 = slimTableFactory26.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory45 = slimTableFactory26.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory46 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory47 = slimTableFactory46.copy();
        boolean boolean49 = slimTableFactory47.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory50 = slimTableFactory47.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap51 = slimTableFactory47.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory52 = slimTableFactory47.copy();
        boolean boolean54 = slimTableFactory52.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap55 = slimTableFactory52.tableTypeArrays;
        slimTableFactory45.tableTypeArrays = strMap55;
        slimTableFactory16.tableTypeArrays = strMap55;
        slimTableFactory9.tableTypeArrays = strMap55;
        boolean boolean60 = slimTableFactory9.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory61 = slimTableFactory9.copy();
        fitnesse.testsystems.slim.Table table62 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext64 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable65 = slimTableFactory61.makeSlimTable(table62, "hi!", slimTestContext64);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(slimTableFactory21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNotNull(slimTableFactory26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(slimTableFactory33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertNotNull(strMap42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi!" + "'", str44, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory45);
        org.junit.Assert.assertNotNull(slimTableFactory47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(slimTableFactory50);
        org.junit.Assert.assertNotNull(strMap51);
        org.junit.Assert.assertNotNull(slimTableFactory52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(strMap55);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(slimTableFactory61);
    }

    @Test
    public void test03992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03992");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory3.tableTypeArrays;
        java.lang.String str6 = slimTableFactory3.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory3.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        boolean boolean11 = slimTableFactory9.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap12 = slimTableFactory9.tableTypeArrays;
        java.lang.String str14 = slimTableFactory9.getFullTableName("");
        boolean boolean16 = slimTableFactory9.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = slimTableFactory9.copy();
        java.lang.String str19 = slimTableFactory9.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = slimTableFactory20.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap22 = slimTableFactory21.tableTypes;
        boolean boolean24 = slimTableFactory21.hasColon("");
        boolean boolean26 = slimTableFactory21.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap27 = slimTableFactory21.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass29 = slimTableFactory21.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory30 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory31 = slimTableFactory30.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap32 = slimTableFactory31.tableTypes;
        boolean boolean34 = slimTableFactory31.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap35 = slimTableFactory31.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory36 = slimTableFactory31.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = slimTableFactory36.tableTypeArrays;
        slimTableFactory21.tableTypeArrays = strMap37;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass40 = slimTableFactory21.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap41 = slimTableFactory21.tableTypeArrays;
        slimTableFactory9.tableTypeArrays = strMap41;
        slimTableFactory3.tableTypeArrays = strMap41;
        java.lang.Class<?> wildcardClass44 = strMap41.getClass();
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(slimTableFactory17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(slimTableFactory21);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNull(wildcardClass29);
        org.junit.Assert.assertNotNull(slimTableFactory31);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(slimTableFactory36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNull(wildcardClass40);
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test03993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03993");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        boolean boolean5 = slimTableFactory0.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory0.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory9.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap11 = slimTableFactory10.tableTypes;
        boolean boolean13 = slimTableFactory10.hasColon("");
        boolean boolean15 = slimTableFactory10.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap16 = slimTableFactory10.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass19 = slimTableFactory17.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory17.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap21 = slimTableFactory20.tableTypeArrays;
        slimTableFactory10.tableTypeArrays = strMap21;
        java.util.Map<java.lang.String, java.lang.String> strMap23 = slimTableFactory10.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap24 = slimTableFactory10.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap24;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass27 = slimTableFactory0.getTableType("hi!");
        java.lang.String str29 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory30 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory31 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass33 = slimTableFactory31.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory34 = slimTableFactory31.copy();
        boolean boolean36 = slimTableFactory31.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass38 = slimTableFactory31.getTableType("hi!");
        java.lang.String str40 = slimTableFactory31.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory41 = slimTableFactory31.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory42 = slimTableFactory41.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap43 = slimTableFactory41.tableTypeArrays;
        slimTableFactory30.tableTypeArrays = strMap43;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory45 = slimTableFactory30.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory46 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory47 = slimTableFactory46.copy();
        boolean boolean49 = slimTableFactory47.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory50 = slimTableFactory47.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory51 = slimTableFactory47.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory52 = slimTableFactory51.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory53 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass55 = slimTableFactory53.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory56 = slimTableFactory53.copy();
        boolean boolean58 = slimTableFactory53.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap59 = slimTableFactory53.tableTypeArrays;
        slimTableFactory51.tableTypeArrays = strMap59;
        java.util.Map<java.lang.String, java.lang.String> strMap61 = slimTableFactory51.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory62 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass64 = slimTableFactory62.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory65 = slimTableFactory62.copy();
        boolean boolean67 = slimTableFactory62.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory68 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory69 = slimTableFactory68.copy();
        boolean boolean71 = slimTableFactory69.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory72 = slimTableFactory69.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory73 = slimTableFactory69.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory74 = slimTableFactory73.copy();
        boolean boolean76 = slimTableFactory73.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap77 = slimTableFactory73.tableTypeArrays;
        slimTableFactory62.tableTypeArrays = strMap77;
        slimTableFactory51.tableTypeArrays = strMap77;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass81 = slimTableFactory51.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory82 = slimTableFactory51.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory83 = slimTableFactory51.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory84 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory85 = slimTableFactory84.copy();
        boolean boolean87 = slimTableFactory85.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory88 = slimTableFactory85.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap89 = slimTableFactory88.tableTypeArrays;
        slimTableFactory83.tableTypeArrays = strMap89;
        slimTableFactory45.tableTypeArrays = strMap89;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap92 = slimTableFactory45.tableTypes;
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(slimTableFactory20);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNull(wildcardClass27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(slimTableFactory30);
        org.junit.Assert.assertNull(wildcardClass33);
        org.junit.Assert.assertNotNull(slimTableFactory34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(wildcardClass38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(slimTableFactory41);
        org.junit.Assert.assertNotNull(slimTableFactory42);
        org.junit.Assert.assertNotNull(strMap43);
        org.junit.Assert.assertNotNull(slimTableFactory45);
        org.junit.Assert.assertNotNull(slimTableFactory47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(slimTableFactory50);
        org.junit.Assert.assertNotNull(slimTableFactory51);
        org.junit.Assert.assertNotNull(slimTableFactory52);
        org.junit.Assert.assertNull(wildcardClass55);
        org.junit.Assert.assertNotNull(slimTableFactory56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(strMap59);
        org.junit.Assert.assertNotNull(strMap61);
        org.junit.Assert.assertNull(wildcardClass64);
        org.junit.Assert.assertNotNull(slimTableFactory65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(slimTableFactory69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(slimTableFactory72);
        org.junit.Assert.assertNotNull(slimTableFactory73);
        org.junit.Assert.assertNotNull(slimTableFactory74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(strMap77);
        org.junit.Assert.assertNull(wildcardClass81);
        org.junit.Assert.assertNotNull(slimTableFactory82);
        org.junit.Assert.assertNotNull(slimTableFactory83);
        org.junit.Assert.assertNotNull(slimTableFactory85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(slimTableFactory88);
        org.junit.Assert.assertNotNull(strMap89);
        org.junit.Assert.assertNotNull(strMap92);
    }

    @Test
    public void test03994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03994");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory5.copy();
        boolean boolean8 = slimTableFactory5.hasColon("");
        boolean boolean10 = slimTableFactory5.hasColon("hi!");
        boolean boolean12 = slimTableFactory5.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap13 = slimTableFactory5.tableTypes;
        boolean boolean15 = slimTableFactory5.hasColon("");
        java.lang.Class<?> wildcardClass16 = slimTableFactory5.getClass();
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test03995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03995");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = null;
        slimTableFactory0.tableTypeArrays = strMap2;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass5 = slimTableFactory0.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory6.copy();
        boolean boolean9 = slimTableFactory7.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory7.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory7.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory12.getTableType("");
        boolean boolean16 = slimTableFactory12.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap17 = slimTableFactory12.tableTypeArrays;
        slimTableFactory11.tableTypeArrays = strMap17;
        slimTableFactory0.tableTypeArrays = strMap17;
        boolean boolean21 = slimTableFactory0.hasColon("");
        fitnesse.testsystems.slim.Table table22 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext24 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable25 = slimTableFactory0.makeSlimTable(table22, "", slimTestContext24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test03996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03996");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory5.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory7.copy();
        boolean boolean10 = slimTableFactory8.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory8.tableTypeArrays;
        slimTableFactory6.tableTypeArrays = strMap11;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory6.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory13.tableTypeArrays;
        boolean boolean16 = slimTableFactory13.hasColon("hi!");
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(slimTableFactory13);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test03997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03997");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory5.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory7.copy();
        boolean boolean10 = slimTableFactory8.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory8.tableTypeArrays;
        slimTableFactory6.tableTypeArrays = strMap11;
        java.lang.String str14 = slimTableFactory6.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory6.copy();
        java.lang.String str17 = slimTableFactory6.makeTableType("hi!");
        java.lang.String str19 = slimTableFactory6.getFullTableName("hi!");
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
    }

    @Test
    public void test03998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03998");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        boolean boolean5 = slimTableFactory0.hasColon("");
        java.lang.String str7 = slimTableFactory0.makeTableType("");
        java.lang.String str9 = slimTableFactory0.makeTableType("");
        java.lang.String str11 = slimTableFactory0.makeTableType("");
        java.lang.String str13 = slimTableFactory0.getFullTableName("");
        java.lang.String str15 = slimTableFactory0.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap18 = slimTableFactory17.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap19 = slimTableFactory17.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory17.copy();
        java.lang.Class<?> wildcardClass21 = slimTableFactory17.getClass();
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(slimTableFactory17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(slimTableFactory20);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test03999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test03999");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap4 = slimTableFactory3.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory5.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory5.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory9.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap11 = slimTableFactory10.tableTypes;
        boolean boolean13 = slimTableFactory10.hasColon("");
        boolean boolean15 = slimTableFactory10.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap16 = slimTableFactory10.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass19 = slimTableFactory17.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory17.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap21 = slimTableFactory20.tableTypeArrays;
        slimTableFactory10.tableTypeArrays = strMap21;
        slimTableFactory5.tableTypeArrays = strMap21;
        slimTableFactory3.tableTypeArrays = strMap21;
        boolean boolean26 = slimTableFactory3.hasColon("hi!");
        java.lang.String str28 = slimTableFactory3.makeTableType("hi!");
        fitnesse.testsystems.slim.Table table29 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable30 = slimTableFactory3.parseDefineTableTypeTable(table29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(slimTableFactory20);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
    }

    @Test
    public void test04000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest7.test04000");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        boolean boolean3 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory1.tableTypeArrays;
        java.lang.String str6 = slimTableFactory1.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory7.copy();
        boolean boolean10 = slimTableFactory8.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory8.tableTypeArrays;
        java.lang.String str13 = slimTableFactory8.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory8.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap14;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory1.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass18 = slimTableFactory16.getTableType("");
        boolean boolean20 = slimTableFactory16.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap21 = slimTableFactory16.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap22 = slimTableFactory16.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = slimTableFactory16.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap24 = slimTableFactory23.tableTypes;
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(slimTableFactory23);
        org.junit.Assert.assertNotNull(strMap24);
    }
}

