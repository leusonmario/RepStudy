/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 01 11:33:32 GMT 2021
 */

package fitnesse.testsystems.slim.tables;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import fitnesse.testsystems.ExecutionResult;
import fitnesse.testsystems.slim.HtmlTable;
import fitnesse.testsystems.slim.SlimTestContextImpl;
import fitnesse.testsystems.slim.Table;
import fitnesse.testsystems.slim.tables.ImportTable;
import fitnesse.testsystems.slim.tables.LibraryTable;
import fitnesse.testsystems.slim.tables.OrderedQueryTable;
import fitnesse.testsystems.slim.tables.QueryTable;
import fitnesse.testsystems.slim.tables.ScenarioAndDecisionTableExtensionTest;
import fitnesse.testsystems.slim.tables.ScenarioTable;
import fitnesse.testsystems.slim.tables.ScenarioTableExtensionTest;
import fitnesse.testsystems.slim.tables.SlimTableFactory;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.htmlparser.lexer.Page;
import org.htmlparser.tags.TableTag;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SlimTableFactory_ESTest extends SlimTableFactory_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test0()  throws Throwable  {
      Table table0 = null;
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      assertNotNull(slimTableFactory0);
      
      SlimTestContextImpl slimTestContextImpl0 = new SlimTestContextImpl();
      assertNotNull(slimTestContextImpl0);
      
      String string0 = "This evertscommit ";
      // Undeclared exception!
      try { 
        slimTableFactory0.makeSlimTable(table0, string0, slimTestContextImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.tables.SlimTableFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test1()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      assertNotNull(slimTableFactory0);
      
      String string0 = "ordered query:";
      Class<ScenarioAndDecisionTableExtensionTest.DiffScriptTable> class0 = ScenarioAndDecisionTableExtensionTest.DiffScriptTable.class;
      SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertNotSame(slimTableFactory1, slimTableFactory0);
      assertFalse(slimTableFactory1.equals((Object)slimTableFactory0));
      assertNotNull(slimTableFactory1);
      
      // Undeclared exception!
      try { 
        slimTableFactory0.addTableType(string0, class0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // A table type named 'ordered query:' already exists
         //
         verifyException("fitnesse.testsystems.slim.tables.SlimTableFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test2()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      assertNotNull(slimTableFactory0);
      
      String string0 = null;
      Class<LibraryTable> class0 = LibraryTable.class;
      // Undeclared exception!
      try { 
        slimTableFactory0.addTableType(string0, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.tables.SlimTableFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test3()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      assertNotNull(slimTableFactory0);
      
      SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertNotSame(slimTableFactory1, slimTableFactory0);
      assertFalse(slimTableFactory1.equals((Object)slimTableFactory0));
      assertNotNull(slimTableFactory1);
      
      SlimTableFactory slimTableFactory2 = slimTableFactory1.copy();
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertNotSame(slimTableFactory0, slimTableFactory2);
      assertNotSame(slimTableFactory1, slimTableFactory2);
      assertNotSame(slimTableFactory1, slimTableFactory0);
      assertNotSame(slimTableFactory2, slimTableFactory1);
      assertNotSame(slimTableFactory2, slimTableFactory0);
      assertFalse(slimTableFactory0.equals((Object)slimTableFactory1));
      assertFalse(slimTableFactory1.equals((Object)slimTableFactory0));
      assertFalse(slimTableFactory2.equals((Object)slimTableFactory1));
      assertFalse(slimTableFactory2.equals((Object)slimTableFactory0));
      assertNotNull(slimTableFactory2);
  }

  @Test(timeout = 11000)
  public void test4()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      assertNotNull(slimTableFactory0);
      
      String string0 = "";
      Class<ScenarioAndDecisionTableExtensionTest.DiffScriptTable> class0 = ScenarioAndDecisionTableExtensionTest.DiffScriptTable.class;
      slimTableFactory0.addTableType(string0, class0);
      // Undeclared exception!
      try { 
        slimTableFactory0.addTableType(string0, class0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // A table type named '' already exists
         //
         verifyException("fitnesse.testsystems.slim.tables.SlimTableFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test5()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      assertNotNull(slimTableFactory0);
      
      String string0 = "";
      Class<ImportTable> class0 = ImportTable.class;
      slimTableFactory0.addTableType(string0, class0);
      SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertNotSame(slimTableFactory1, slimTableFactory0);
      assertFalse(slimTableFactory1.equals((Object)slimTableFactory0));
      assertNotNull(slimTableFactory1);
      
      Class<QueryTable> class1 = QueryTable.class;
      // Undeclared exception!
      try { 
        slimTableFactory0.addTableType(string0, class1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // A table type named '' already exists
         //
         verifyException("fitnesse.testsystems.slim.tables.SlimTableFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test6()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      assertNotNull(slimTableFactory0);
      
      SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertNotSame(slimTableFactory1, slimTableFactory0);
      assertFalse(slimTableFactory1.equals((Object)slimTableFactory0));
      assertNotNull(slimTableFactory1);
      
      Table table0 = null;
      String string0 = "table:";
      SlimTestContextImpl slimTestContextImpl0 = new SlimTestContextImpl();
      assertNotNull(slimTestContextImpl0);
      
      // Undeclared exception!
      try { 
        slimTableFactory1.makeSlimTable(table0, string0, slimTestContextImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.tables.SlimTableFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test7()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      assertNotNull(slimTableFactory0);
      
      String string0 = "";
      Table table0 = null;
      String string1 = "A table type named '";
      SlimTestContextImpl slimTestContextImpl0 = new SlimTestContextImpl();
      assertNotNull(slimTestContextImpl0);
      
      ExecutionResult executionResult0 = ExecutionResult.PASS;
      String string2 = "1G";
      Class<ScenarioAndDecisionTableExtensionTest.DiffScriptTable> class0 = ScenarioAndDecisionTableExtensionTest.DiffScriptTable.class;
      slimTableFactory0.addTableType(string2, class0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      slimTestContextImpl0.increment(executionResult0);
      // Undeclared exception!
      try { 
        slimTableFactory0.makeSlimTable(table0, string1, slimTestContextImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.tables.SlimTableFactory", e);
      }
  }
}
