/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 02 04:44:02 GMT 2021
 */

package fitnesse.testsystems.slim.tables;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import fitnesse.testsystems.slim.HtmlTable;
import fitnesse.testsystems.slim.SlimTestContextImpl;
import fitnesse.testsystems.slim.Table;
import fitnesse.testsystems.slim.tables.DecisionTable;
import fitnesse.testsystems.slim.tables.ImportTable;
import fitnesse.testsystems.slim.tables.LibraryTable;
import fitnesse.testsystems.slim.tables.OrderedQueryTable;
import fitnesse.testsystems.slim.tables.QueryTable;
import fitnesse.testsystems.slim.tables.ScenarioAndDecisionTableExtensionTest;
import fitnesse.testsystems.slim.tables.ScenarioTableExtensionTest;
import fitnesse.testsystems.slim.tables.SlimTable;
import fitnesse.testsystems.slim.tables.SlimTableFactory;
import fitnesse.testsystems.slim.tables.SlimTableFactoryTest;
import fitnesse.testsystems.slim.tables.SubsetQueryTable;
import fitnesse.testsystems.slim.tables.TableTable;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.htmlparser.Attribute;
import org.htmlparser.tags.FormTag;
import org.htmlparser.tags.TableTag;
import org.htmlparser.util.NodeList;
import org.htmlparser.util.SimpleNodeIterator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SlimTableFactoryTest_ESTest extends SlimTableFactoryTest_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      SlimTableFactoryTest slimTableFactoryTest0 = new SlimTableFactoryTest();
      assertNotNull(slimTableFactoryTest0);
      
      Class<SubsetQueryTable> class0 = SubsetQueryTable.class;
      String string0 = "(+mC$o2xEQS]5?6";
      // Undeclared exception!
      try { 
        slimTableFactoryTest0.assertThatTableTypeImportWorks(string0, string0, string0, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.tables.SlimTableFactoryTest", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      SlimTableFactoryTest slimTableFactoryTest0 = new SlimTableFactoryTest();
      assertNotNull(slimTableFactoryTest0);
      
      Table table0 = slimTableFactoryTest0.gettable();
      assertNull(table0);
      
      Map<String, Class<? extends SlimTable>> map0 = slimTableFactoryTest0.getmap();
      assertNull(map0);
      
      slimTableFactoryTest0.setmap(map0);
      slimTableFactoryTest0.settable(slimTableFactoryTest0.table);
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      SlimTableFactoryTest slimTableFactoryTest0 = new SlimTableFactoryTest();
      assertNotNull(slimTableFactoryTest0);
      
      SlimTableFactory slimTableFactory0 = slimTableFactoryTest0.getslimTableFactory();
      assertNull(slimTableFactory0);
      
      slimTableFactoryTest0.setslimTableFactory(slimTableFactory0);
      String string0 = null;
      Class<OrderedQueryTable> class0 = OrderedQueryTable.class;
      // Undeclared exception!
      try { 
        slimTableFactoryTest0.assertThatTableTypeCreateSlimTableType(string0, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.tables.SlimTableFactoryTest", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      SlimTableFactoryTest slimTableFactoryTest0 = new SlimTableFactoryTest();
      assertNotNull(slimTableFactoryTest0);
      
      String string0 = "decision:";
      // Undeclared exception!
      try { 
        slimTableFactoryTest0.addTableTypeImport(string0, string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.tables.SlimTableFactoryTest", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      SlimTableFactoryTest slimTableFactoryTest0 = new SlimTableFactoryTest();
      assertNotNull(slimTableFactoryTest0);
      
      String string0 = "My script table";
      Class<QueryTable> class0 = QueryTable.class;
      // Undeclared exception!
      try { 
        slimTableFactoryTest0.assertThatTableTypeCreateSlimTableType(string0, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.tables.SlimTableFactoryTest", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      SlimTableFactoryTest slimTableFactoryTest0 = new SlimTableFactoryTest();
      assertNotNull(slimTableFactoryTest0);
      
      String string0 = "EEE MMM d HH:mm:ss yyyy Z";
      Class<ScenarioTableExtensionTest.AutoArgScenarioTable> class0 = ScenarioTableExtensionTest.AutoArgScenarioTable.class;
      // Undeclared exception!
      try { 
        slimTableFactoryTest0.assertThatTableTypeImportWorks(string0, string0, string0, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.tables.SlimTableFactoryTest", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      SlimTableFactoryTest slimTableFactoryTest0 = new SlimTableFactoryTest();
      assertNotNull(slimTableFactoryTest0);
      
      String string0 = "NGB,8UT;hM";
      // Undeclared exception!
      try { 
        slimTableFactoryTest0.addTableTypeImport(string0, string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.tables.SlimTableFactoryTest", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      SlimTableFactoryTest slimTableFactoryTest0 = new SlimTableFactoryTest();
      assertNotNull(slimTableFactoryTest0);
      
      String string0 = "";
      Class<LibraryTable> class0 = LibraryTable.class;
      // Undeclared exception!
      try { 
        slimTableFactoryTest0.assertThatTableTypeCreateSlimTableType(string0, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.tables.SlimTableFactoryTest", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      SlimTableFactoryTest slimTableFactoryTest0 = new SlimTableFactoryTest();
      assertNotNull(slimTableFactoryTest0);
      
      String string0 = "i~yCk7r(Ds]%;E=|{'5";
      String string1 = "[_C{)NfI0U`{m?i";
      Class<DecisionTable> class0 = DecisionTable.class;
      // Undeclared exception!
      try { 
        slimTableFactoryTest0.assertThatTableTypeImportWorks(string0, string1, string0, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.tables.SlimTableFactoryTest", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      SlimTableFactoryTest slimTableFactoryTest0 = new SlimTableFactoryTest();
      assertNotNull(slimTableFactoryTest0);
      
      String string0 = "";
      String string1 = "git-receive-pack";
      Class<OrderedQueryTable> class0 = OrderedQueryTable.class;
      // Undeclared exception!
      try { 
        slimTableFactoryTest0.assertThatTableTypeImportWorks(string0, string1, string1, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.tables.SlimTableFactoryTest", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      SlimTableFactoryTest slimTableFactoryTest0 = new SlimTableFactoryTest();
      assertNotNull(slimTableFactoryTest0);
      
      SlimTableFactory slimTableFactory0 = slimTableFactoryTest0.slimTableFactory;
      assertNull(slimTableFactory0);
      
      slimTableFactoryTest0.setslimTableFactory(slimTableFactory0);
      Table table0 = slimTableFactoryTest0.gettable();
      assertNull(table0);
      
      slimTableFactoryTest0.setslimTableFactory(slimTableFactory0);
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      SlimTableFactoryTest slimTableFactoryTest0 = new SlimTableFactoryTest();
      assertNotNull(slimTableFactoryTest0);
      
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      assertNotNull(slimTableFactory0);
      
      slimTableFactoryTest0.setslimTableFactory(slimTableFactory0);
      String string0 = null;
      Class<ScenarioAndDecisionTableExtensionTest.ScenarioTableWithDifferentScript> class0 = ScenarioAndDecisionTableExtensionTest.ScenarioTableWithDifferentScript.class;
      // Undeclared exception!
      try { 
        slimTableFactoryTest0.assertThatTableTypeCreateSlimTableType(string0, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.tables.SlimTableFactoryTest", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      SlimTableFactoryTest slimTableFactoryTest0 = new SlimTableFactoryTest();
      assertNotNull(slimTableFactoryTest0);
      
      Table table0 = slimTableFactoryTest0.table;
      assertNull(table0);
      
      slimTableFactoryTest0.settable(table0);
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      SlimTableFactoryTest slimTableFactoryTest0 = new SlimTableFactoryTest();
      assertNotNull(slimTableFactoryTest0);
      
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      assertNotNull(slimTableFactory0);
      
      slimTableFactoryTest0.slimTableFactory = slimTableFactory0;
      SlimTableFactory slimTableFactory1 = slimTableFactoryTest0.getslimTableFactory();
      assertNotNull(slimTableFactory1);
      assertSame(slimTableFactory1, slimTableFactory0);
      
      String string0 = "EJ`*N";
      Class<SubsetQueryTable> class0 = SubsetQueryTable.class;
      slimTableFactory1.addTableType(string0, class0);
      assertSame(slimTableFactory1, slimTableFactory0);
      
      slimTableFactoryTest0.setmap(slimTableFactory1.tableTypes);
      assertSame(slimTableFactory1, slimTableFactory0);
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      SlimTableFactoryTest slimTableFactoryTest0 = new SlimTableFactoryTest();
      assertNotNull(slimTableFactoryTest0);
      
      Table table0 = slimTableFactoryTest0.gettable();
      assertNull(table0);
      
      String string0 = null;
      String string1 = "";
      String string2 = "";
      Class<QueryTable> class0 = QueryTable.class;
      // Undeclared exception!
      try { 
        slimTableFactoryTest0.assertThatTableTypeImportWorks(string0, string1, string2, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.tables.SlimTableFactoryTest", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      SlimTableFactoryTest slimTableFactoryTest0 = new SlimTableFactoryTest();
      assertNotNull(slimTableFactoryTest0);
      
      Table table0 = null;
      SlimTableFactory slimTableFactory0 = slimTableFactoryTest0.getslimTableFactory();
      assertNull(slimTableFactory0);
      
      slimTableFactoryTest0.setslimTableFactory(slimTableFactory0);
      slimTableFactoryTest0.settable(table0);
      SlimTableFactory slimTableFactory1 = slimTableFactoryTest0.getslimTableFactory();
      assertNull(slimTableFactory1);
      
      SlimTableFactory slimTableFactory2 = slimTableFactoryTest0.getslimTableFactory();
      assertNull(slimTableFactory2);
      
      String string0 = null;
      Class<OrderedQueryTable> class0 = OrderedQueryTable.class;
      // Undeclared exception!
      try { 
        slimTableFactoryTest0.assertThatTableTypeCreateSlimTableType(string0, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.tables.SlimTableFactoryTest", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      SlimTableFactoryTest slimTableFactoryTest0 = new SlimTableFactoryTest();
      assertNotNull(slimTableFactoryTest0);
      
      Hashtable<String, Class<SubsetQueryTable>> hashtable0 = new Hashtable<String, Class<SubsetQueryTable>>();
      assertNotNull(hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      slimTableFactoryTest0.map = (Map<String, Class<? extends SlimTable>>) hashtable0;
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, slimTableFactoryTest0.map.size());
      assertTrue(slimTableFactoryTest0.map.isEmpty());
      
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      assertNotNull(slimTableFactory0);
      
      slimTableFactoryTest0.slimTableFactory = slimTableFactory0;
      Map<String, Class<? extends SlimTable>> map0 = slimTableFactoryTest0.getmap();
      assertNotNull(map0);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      Table table0 = slimTableFactoryTest0.gettable();
      assertNull(table0);
      
      slimTableFactoryTest0.settable(table0);
      String string0 = "";
      Class<SubsetQueryTable> class0 = SubsetQueryTable.class;
      Class<SubsetQueryTable> class1 = hashtable0.put(string0, class0);
      assertNull(class1);
      assertFalse(hashtable0.isEmpty());
      assertEquals(1, hashtable0.size());
      
      Table table1 = slimTableFactoryTest0.gettable();
      assertNull(table1);
      
      Table table2 = slimTableFactoryTest0.gettable();
      assertNull(table2);
      
      slimTableFactoryTest0.setmap(map0);
      assertFalse(map0.isEmpty());
      assertEquals(1, map0.size());
      
      Map<String, Class<? extends SlimTable>> map1 = slimTableFactoryTest0.getmap();
      assertNotNull(map1);
      assertFalse(map1.isEmpty());
      assertEquals(1, map1.size());
      assertSame(map1, map0);
      
      slimTableFactoryTest0.settable(table2);
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      SlimTableFactoryTest slimTableFactoryTest0 = new SlimTableFactoryTest();
      assertNotNull(slimTableFactoryTest0);
      
      TableTag tableTag0 = new TableTag();
      assertNotNull(tableTag0);
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getStartPosition());
      
      String string0 = "OverrideTable";
      Attribute attribute0 = new Attribute();
      assertNotNull(attribute0);
      assertEquals('\u0000', attribute0.getQuote());
      assertNull(attribute0.getName());
      assertTrue(attribute0.isWhitespace());
      assertEquals(0, attribute0.getLength());
      assertNull(attribute0.getValue());
      assertFalse(attribute0.isValued());
      assertNull(attribute0.getAssignment());
      assertFalse(attribute0.isStandAlone());
      assertFalse(attribute0.isEmpty());
      
      tableTag0.setAttribute(attribute0);
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals('\u0000', attribute0.getQuote());
      assertNull(attribute0.getName());
      assertTrue(attribute0.isWhitespace());
      assertEquals(0, attribute0.getLength());
      assertNull(attribute0.getValue());
      assertFalse(attribute0.isValued());
      assertNull(attribute0.getAssignment());
      assertFalse(attribute0.isStandAlone());
      assertFalse(attribute0.isEmpty());
      
      boolean boolean0 = false;
      NodeList nodeList0 = tableTag0.searchFor(string0, boolean0);
      assertNotNull(nodeList0);
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getStartPosition());
      
      tableTag0.setChildren(nodeList0);
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getStartPosition());
      
      SimpleNodeIterator simpleNodeIterator0 = tableTag0.elements();
      assertNotNull(simpleNodeIterator0);
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(simpleNodeIterator0.hasMoreNodes());
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean1 = true;
      boolean boolean2 = FileSystemHandling.setPermissions(evoSuiteFile0, boolean0, boolean0, boolean1);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      HtmlTable htmlTable0 = new HtmlTable(tableTag0);
      assertNotNull(htmlTable0);
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals(0, htmlTable0.getRowCount());
      
      slimTableFactoryTest0.settable(htmlTable0);
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals(0, htmlTable0.getRowCount());
      
      String string1 = "";
      Class<ScenarioTableExtensionTest.AutoArgScenarioTable> class0 = ScenarioTableExtensionTest.AutoArgScenarioTable.class;
      // Undeclared exception!
      try { 
        slimTableFactoryTest0.assertThatTableTypeCreateSlimTableType(string1, class0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      SlimTableFactoryTest slimTableFactoryTest0 = new SlimTableFactoryTest();
      assertNotNull(slimTableFactoryTest0);
      
      TableTag tableTag0 = new TableTag();
      assertNotNull(tableTag0);
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals((-1), tableTag0.getTagBegin());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      
      String string0 = tableTag0.getText();
      assertEquals("TABLE", string0);
      assertNotNull(string0);
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals((-1), tableTag0.getTagBegin());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      
      FormTag formTag0 = new FormTag();
      assertNotNull(formTag0);
      assertFalse(formTag0.isEmptyXmlTag());
      assertEquals("GET", formTag0.getFormMethod());
      assertEquals((-1), formTag0.getTagEnd());
      assertEquals((-1), formTag0.getTagBegin());
      assertEquals((-1), formTag0.getStartPosition());
      assertEquals((-1), formTag0.getEndPosition());
      assertEquals("FORM", formTag0.getRawTagName());
      assertNull(formTag0.getFormName());
      assertFalse(formTag0.isEndTag());
      
      NodeList nodeList0 = formTag0.getFormTextareas();
      assertNotNull(nodeList0);
      assertFalse(formTag0.isEmptyXmlTag());
      assertEquals("GET", formTag0.getFormMethod());
      assertEquals((-1), formTag0.getTagEnd());
      assertEquals((-1), formTag0.getTagBegin());
      assertEquals((-1), formTag0.getStartPosition());
      assertEquals((-1), formTag0.getEndPosition());
      assertEquals("FORM", formTag0.getRawTagName());
      assertNull(formTag0.getFormName());
      assertFalse(formTag0.isEndTag());
      
      tableTag0.setChildren(nodeList0);
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals((-1), tableTag0.getTagBegin());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(formTag0.isEmptyXmlTag());
      assertEquals("GET", formTag0.getFormMethod());
      assertEquals((-1), formTag0.getTagEnd());
      assertEquals((-1), formTag0.getTagBegin());
      assertEquals((-1), formTag0.getStartPosition());
      assertEquals((-1), formTag0.getEndPosition());
      assertEquals("FORM", formTag0.getRawTagName());
      assertNull(formTag0.getFormName());
      assertFalse(formTag0.isEndTag());
      
      HtmlTable htmlTable0 = new HtmlTable(tableTag0);
      assertNotNull(htmlTable0);
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals((-1), tableTag0.getTagBegin());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals(0, htmlTable0.getRowCount());
      
      slimTableFactoryTest0.settable(htmlTable0);
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals((-1), tableTag0.getTagBegin());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals(0, htmlTable0.getRowCount());
      
      String string1 = "org.eclipse.jgit.util.SystemReader$2";
      HashMap<String, Class<SubsetQueryTable>> hashMap0 = new HashMap<String, Class<SubsetQueryTable>>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Class<SubsetQueryTable> class0 = SubsetQueryTable.class;
      Class<SubsetQueryTable> class1 = hashMap0.put(string1, class0);
      assertFalse(string1.equals((Object)string0));
      assertNull(class1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNotSame(string1, string0);
      
      slimTableFactoryTest0.map = (Map<String, Class<? extends SlimTable>>) hashMap0;
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertFalse(slimTableFactoryTest0.map.isEmpty());
      assertEquals(1, slimTableFactoryTest0.map.size());
      
      String string2 = "GKENf6DJF";
      String string3 = "";
      // Undeclared exception!
      try { 
        slimTableFactoryTest0.addTableTypeImport(string2, string3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }
}
