/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 01 11:28:07 GMT 2021
 */

package fitnesse.testsystems.slim.tables;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import fitnesse.testsystems.slim.HtmlTable;
import fitnesse.testsystems.slim.SlimTestContextImpl;
import fitnesse.testsystems.slim.Table;
import fitnesse.testsystems.slim.tables.DecisionTable;
import fitnesse.testsystems.slim.tables.LibraryTable;
import fitnesse.testsystems.slim.tables.OrderedQueryTable;
import fitnesse.testsystems.slim.tables.QueryTable;
import fitnesse.testsystems.slim.tables.ScenarioAndDecisionTableExtensionTest;
import fitnesse.testsystems.slim.tables.ScenarioTable;
import fitnesse.testsystems.slim.tables.SlimTableFactory;
import fitnesse.testsystems.slim.tables.SubsetQueryTable;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.htmlparser.NodeFilter;
import org.htmlparser.filters.LinkRegexFilter;
import org.htmlparser.filters.LinkStringFilter;
import org.htmlparser.tags.TableHeader;
import org.htmlparser.tags.TableTag;
import org.htmlparser.util.NodeList;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SlimTableFactory_ESTest extends SlimTableFactory_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test0()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      assertNotNull(slimTableFactory0);
      
      SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertNotSame(slimTableFactory1, slimTableFactory0);
      assertNotNull(slimTableFactory1);
      assertFalse(slimTableFactory1.equals((Object)slimTableFactory0));
      
      String string0 = "scenario";
      Class<ScenarioTable> class0 = ScenarioTable.class;
      // Undeclared exception!
      try { 
        slimTableFactory0.addTableType(string0, class0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // A table type named 'scenario' already exists
         //
         verifyException("fitnesse.testsystems.slim.tables.SlimTableFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test1()  throws Throwable  {
      Table table0 = null;
      SlimTestContextImpl slimTestContextImpl0 = new SlimTestContextImpl();
      assertNotNull(slimTestContextImpl0);
      
      String string0 = ">`lrs{=~:-GI9^";
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      assertNotNull(slimTableFactory0);
      
      // Undeclared exception!
      try { 
        slimTableFactory0.makeSlimTable(table0, string0, slimTestContextImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.tables.SlimTableFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test2()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      assertNotNull(slimTableFactory0);
      
      SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertNotSame(slimTableFactory1, slimTableFactory0);
      assertNotNull(slimTableFactory1);
      assertFalse(slimTableFactory1.equals((Object)slimTableFactory0));
      
      String string0 = null;
      Class<OrderedQueryTable> class0 = OrderedQueryTable.class;
      // Undeclared exception!
      try { 
        slimTableFactory1.addTableType(string0, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.tables.SlimTableFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test3()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      assertNotNull(slimTableFactory0);
      
      String string0 = ";Qu'].*RY6z0eSLk0Y'";
      Class<ScenarioTable> class0 = ScenarioTable.class;
      slimTableFactory0.addTableType(string0, class0);
  }

  @Test(timeout = 11000)
  public void test4()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      assertNotNull(slimTableFactory0);
      
      String string0 = "table:";
      Class<SubsetQueryTable> class0 = SubsetQueryTable.class;
      // Undeclared exception!
      try { 
        slimTableFactory0.addTableType(string0, class0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // A table type named 'table:' already exists
         //
         verifyException("fitnesse.testsystems.slim.tables.SlimTableFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test5()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      assertNotNull(slimTableFactory0);
      
      Table table0 = null;
      String string0 = "]Q~r)Mi,}(i pH";
      SlimTestContextImpl slimTestContextImpl0 = new SlimTestContextImpl();
      assertNotNull(slimTestContextImpl0);
      
      // Undeclared exception!
      try { 
        slimTableFactory0.makeSlimTable(table0, string0, slimTestContextImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.tables.SlimTableFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test6()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      assertNotNull(slimTableFactory0);
      
      String string0 = "scenario";
      Class<DecisionTable> class0 = DecisionTable.class;
      // Undeclared exception!
      try { 
        slimTableFactory0.addTableType(string0, class0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // A table type named 'scenario' already exists
         //
         verifyException("fitnesse.testsystems.slim.tables.SlimTableFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test7()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      assertNotNull(slimTableFactory0);
      
      String string0 = "%<8CM%Ob!T";
      Class<QueryTable> class0 = QueryTable.class;
      slimTableFactory0.addTableType(string0, class0);
      Table table0 = null;
      String string1 = "org.eclipse.jgit.revwalk.filter.OrRevFilter$Binary";
      SlimTestContextImpl slimTestContextImpl0 = new SlimTestContextImpl();
      assertNotNull(slimTestContextImpl0);
      
      slimTestContextImpl0.clearTestSummary();
      // Undeclared exception!
      try { 
        slimTableFactory0.makeSlimTable(table0, string1, slimTestContextImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.tables.SlimTableFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test8()  throws Throwable  {
      long long0 = 2698L;
      System.setCurrentTimeMillis(long0);
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      assertNotNull(slimTableFactory0);
      
      SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertNotSame(slimTableFactory1, slimTableFactory0);
      assertNotNull(slimTableFactory1);
      assertFalse(slimTableFactory1.equals((Object)slimTableFactory0));
      
      TableTag tableTag0 = new TableTag();
      assertNotNull(tableTag0);
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEndTag());
      
      TableHeader tableHeader0 = new TableHeader();
      assertNotNull(tableHeader0);
      assertFalse(tableHeader0.isEmptyXmlTag());
      assertFalse(tableHeader0.isEndTag());
      assertEquals((-1), tableHeader0.getTagBegin());
      assertEquals("TH", tableHeader0.getRawTagName());
      assertEquals((-1), tableHeader0.getEndPosition());
      assertEquals((-1), tableHeader0.getTagEnd());
      assertEquals((-1), tableHeader0.getStartPosition());
      
      NodeList nodeList0 = new NodeList(tableHeader0);
      assertNotNull(nodeList0);
      assertFalse(tableHeader0.isEmptyXmlTag());
      assertFalse(tableHeader0.isEndTag());
      assertEquals((-1), tableHeader0.getTagBegin());
      assertEquals("TH", tableHeader0.getRawTagName());
      assertEquals((-1), tableHeader0.getEndPosition());
      assertEquals((-1), tableHeader0.getTagEnd());
      assertEquals((-1), tableHeader0.getStartPosition());
      
      String string0 = "";
      LinkRegexFilter linkRegexFilter0 = new LinkRegexFilter(string0);
      assertNotNull(linkRegexFilter0);
      
      boolean boolean0 = true;
      NodeList nodeList1 = nodeList0.extractAllNodesThatMatch((NodeFilter) linkRegexFilter0, boolean0);
      assertNotSame(nodeList0, nodeList1);
      assertNotSame(nodeList1, nodeList0);
      assertNotNull(nodeList1);
      assertFalse(tableHeader0.isEmptyXmlTag());
      assertFalse(tableHeader0.isEndTag());
      assertEquals((-1), tableHeader0.getTagBegin());
      assertEquals("TH", tableHeader0.getRawTagName());
      assertEquals((-1), tableHeader0.getEndPosition());
      assertEquals((-1), tableHeader0.getTagEnd());
      assertEquals((-1), tableHeader0.getStartPosition());
      assertFalse(nodeList1.equals((Object)nodeList0));
      
      int int0 = 28;
      StringBuffer stringBuffer0 = new StringBuffer(int0);
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      tableHeader0.toString(int0, stringBuffer0);
      assertFalse(tableHeader0.isEmptyXmlTag());
      assertFalse(tableHeader0.isEndTag());
      assertEquals((-1), tableHeader0.getTagBegin());
      assertEquals("TH", tableHeader0.getRawTagName());
      assertEquals((-1), tableHeader0.getEndPosition());
      assertEquals((-1), tableHeader0.getTagEnd());
      assertEquals((-1), tableHeader0.getStartPosition());
      assertEquals(82, stringBuffer0.length());
      assertEquals("                                                        Tag (-1[?,?],-1[?,?]): TH\n", stringBuffer0.toString());
      
      boolean boolean1 = true;
      String string1 = "";
      boolean boolean2 = false;
      LinkStringFilter linkStringFilter0 = new LinkStringFilter(string1, boolean2);
      assertNotNull(linkStringFilter0);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      nodeList1.keepAllNodesThatMatch((NodeFilter) linkStringFilter0);
      assertNotSame(nodeList0, nodeList1);
      assertSame(string0, string1);
      assertNotSame(nodeList1, nodeList0);
      assertSame(string1, string0);
      assertFalse(tableHeader0.isEmptyXmlTag());
      assertFalse(tableHeader0.isEndTag());
      assertEquals((-1), tableHeader0.getTagBegin());
      assertEquals("TH", tableHeader0.getRawTagName());
      assertEquals((-1), tableHeader0.getEndPosition());
      assertEquals((-1), tableHeader0.getTagEnd());
      assertEquals((-1), tableHeader0.getStartPosition());
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(nodeList0.equals((Object)nodeList1));
      assertFalse(boolean0 == boolean2);
      assertFalse(nodeList1.equals((Object)nodeList0));
      
      NodeList nodeList2 = nodeList1.extractAllNodesThatMatch((NodeFilter) linkRegexFilter0, boolean1);
      assertNotSame(nodeList2, nodeList0);
      assertNotSame(nodeList2, nodeList1);
      assertNotSame(nodeList0, nodeList1);
      assertNotSame(nodeList0, nodeList2);
      assertSame(string0, string1);
      assertNotSame(nodeList1, nodeList2);
      assertNotSame(nodeList1, nodeList0);
      assertNotNull(nodeList2);
      assertFalse(tableHeader0.isEmptyXmlTag());
      assertFalse(tableHeader0.isEndTag());
      assertEquals((-1), tableHeader0.getTagBegin());
      assertEquals("TH", tableHeader0.getRawTagName());
      assertEquals((-1), tableHeader0.getEndPosition());
      assertEquals((-1), tableHeader0.getTagEnd());
      assertEquals((-1), tableHeader0.getStartPosition());
      assertFalse(nodeList2.equals((Object)nodeList0));
      assertFalse(nodeList2.equals((Object)nodeList1));
      assertFalse(nodeList0.equals((Object)nodeList1));
      assertFalse(boolean0 == boolean2);
      assertFalse(nodeList1.equals((Object)nodeList0));
      assertFalse(boolean1 == boolean2);
      
      tableTag0.setChildren(nodeList1);
      assertNotSame(nodeList0, nodeList1);
      assertNotSame(nodeList0, nodeList2);
      assertSame(string0, string1);
      assertNotSame(nodeList1, nodeList2);
      assertNotSame(nodeList1, nodeList0);
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEndTag());
      assertFalse(tableHeader0.isEmptyXmlTag());
      assertFalse(tableHeader0.isEndTag());
      assertEquals((-1), tableHeader0.getTagBegin());
      assertEquals("TH", tableHeader0.getRawTagName());
      assertEquals((-1), tableHeader0.getEndPosition());
      assertEquals((-1), tableHeader0.getTagEnd());
      assertEquals((-1), tableHeader0.getStartPosition());
      assertFalse(nodeList0.equals((Object)nodeList1));
      assertFalse(nodeList0.equals((Object)nodeList2));
      assertFalse(boolean0 == boolean2);
      assertFalse(nodeList1.equals((Object)nodeList2));
      assertFalse(nodeList1.equals((Object)nodeList0));
      
      HtmlTable htmlTable0 = new HtmlTable(tableTag0);
      assertNotNull(htmlTable0);
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals(0, htmlTable0.getRowCount());
      
      String string2 = "9D9cO9ODgVr-k";
      SlimTestContextImpl slimTestContextImpl0 = new SlimTestContextImpl();
      assertNotNull(slimTestContextImpl0);
      
      // Undeclared exception!
      try { 
        slimTableFactory1.makeSlimTable(htmlTable0, string2, slimTestContextImpl0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }
}
