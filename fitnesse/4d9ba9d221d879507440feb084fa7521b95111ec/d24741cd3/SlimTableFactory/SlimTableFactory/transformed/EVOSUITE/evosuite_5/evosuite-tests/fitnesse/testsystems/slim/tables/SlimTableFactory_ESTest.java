/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 01 18:19:58 GMT 2021
 */

package fitnesse.testsystems.slim.tables;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import fitnesse.testsystems.ExecutionResult;
import fitnesse.testsystems.TestResult;
import fitnesse.testsystems.TestSummary;
import fitnesse.testsystems.slim.HtmlTable;
import fitnesse.testsystems.slim.SlimTestContext;
import fitnesse.testsystems.slim.SlimTestContextImpl;
import fitnesse.testsystems.slim.Table;
import fitnesse.testsystems.slim.results.SlimExceptionResult;
import fitnesse.testsystems.slim.results.SlimTestResult;
import fitnesse.testsystems.slim.tables.DecisionTable;
import fitnesse.testsystems.slim.tables.DynamicDecisionTable;
import fitnesse.testsystems.slim.tables.ImportTable;
import fitnesse.testsystems.slim.tables.LibraryTable;
import fitnesse.testsystems.slim.tables.OrderedQueryTable;
import fitnesse.testsystems.slim.tables.QueryTable;
import fitnesse.testsystems.slim.tables.ScenarioAndDecisionTableExtensionTest;
import fitnesse.testsystems.slim.tables.ScenarioTable;
import fitnesse.testsystems.slim.tables.ScenarioTableExtensionTest;
import fitnesse.testsystems.slim.tables.ScriptTable;
import fitnesse.testsystems.slim.tables.SlimTable;
import fitnesse.testsystems.slim.tables.SlimTableFactory;
import fitnesse.testsystems.slim.tables.SubsetQueryTable;
import fitnesse.testsystems.slim.tables.TableTable;
import java.time.ZoneId;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.ResourceBundle;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.htmlparser.Parser;
import org.htmlparser.filters.AndFilter;
import org.htmlparser.lexer.Lexer;
import org.htmlparser.tags.TableTag;
import org.htmlparser.util.NodeList;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SlimTableFactory_ESTest extends SlimTableFactory_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      assertNotNull(slimTableFactory0);
      
      Class<ScenarioTableExtensionTest.AutoArgScenarioTable> class0 = ScenarioTableExtensionTest.AutoArgScenarioTable.class;
      Table table0 = null;
      String string0 = ",Ra) =_EU";
      SlimTestContext slimTestContext0 = null;
      SlimTable slimTable0 = slimTableFactory0.newTableForType(class0, table0, string0, slimTestContext0);
      assertNotNull(slimTable0);
      assertEquals("UnknownTableType_,Ra) =_EU", slimTable0.getTableName());
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      assertNotNull(slimTableFactory0);
      
      TableTag tableTag0 = new TableTag();
      assertNotNull(tableTag0);
      assertEquals((-1), tableTag0.getTagBegin());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals("TABLE", tableTag0.getRawTagName());
      
      NodeList nodeList0 = new NodeList();
      assertNotNull(nodeList0);
      
      tableTag0.setChildren(nodeList0);
      assertEquals((-1), tableTag0.getTagBegin());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals("TABLE", tableTag0.getRawTagName());
      
      HtmlTable htmlTable0 = new HtmlTable(tableTag0);
      assertNotNull(htmlTable0);
      assertEquals((-1), tableTag0.getTagBegin());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals(0, htmlTable0.getRowCount());
      
      List<String> list0 = ResourceBundle.Control.FORMAT_DEFAULT;
      assertNotNull(list0);
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      
      int int0 = htmlTable0.addRow(list0);
      assertEquals(0, int0);
      assertEquals((-1), tableTag0.getTagBegin());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals(1, htmlTable0.getRowCount());
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      
      String string0 = "ashO";
      String string1 = tableTag0.getChildrenHTML();
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertEquals("<tr><td>java.class</td><td>java.properties</td></tr>", string1);
      assertEquals((-1), tableTag0.getTagBegin());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertFalse(string1.equals((Object)string0));
      
      String string2 = slimTableFactory0.makeTableType(string0);
      assertNotNull(string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertEquals("hO", string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      int int1 = htmlTable0.addRow(list0);
      assertFalse(list0.contains(string2));
      assertEquals(1, int1);
      assertEquals((-1), tableTag0.getTagBegin());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals(2, htmlTable0.getRowCount());
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(int1 == int0);
      
      SlimTable slimTable0 = slimTableFactory0.parseDefineTableTypeTable(htmlTable0);
      assertNull(slimTable0);
      assertEquals((-1), tableTag0.getTagBegin());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals(2, htmlTable0.getRowCount());
      
      SlimTestContextImpl slimTestContextImpl0 = new SlimTestContextImpl();
      assertNotNull(slimTestContextImpl0);
      
      SlimTable slimTable1 = slimTableFactory0.makeSlimTable(htmlTable0, string1, slimTestContextImpl0);
      assertNotNull(slimTable1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertEquals((-1), tableTag0.getTagBegin());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals(2, htmlTable0.getRowCount());
      assertEquals("UnknownTableType_<tr><td>java.class</td><td>java.properties</td></tr>", slimTable1.getTableName());
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      assertNotNull(slimTableFactory0);
      
      String string0 = "atrQ&='AmSVOM\"";
      String string1 = slimTableFactory0.makeTableType(string0);
      assertNotNull(string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("atrQ&='AmSVOM\"", string1);
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      assertNotNull(slimTableFactory0);
      
      TableTag tableTag0 = new TableTag();
      assertNotNull(tableTag0);
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEndTag());
      
      Lexer lexer0 = new Lexer();
      assertNotNull(lexer0);
      assertEquals(2.0, Lexer.VERSION_NUMBER, 0.01);
      assertTrue(Lexer.STRICT_REMARKS);
      assertEquals(0, lexer0.getPosition());
      assertEquals("2.0 (Release Build Sep 17, 2006)", lexer0.getVersion());
      
      Parser parser0 = new Parser();
      assertNotNull(parser0);
      assertEquals(2.0, Parser.VERSION_NUMBER, 0.01);
      assertNull(parser0.getURL());
      assertEquals(2.0, parser0.getVersionNumber(), 0.01);
      assertEquals("2.0 (Release Build Sep 17, 2006)", parser0.getVersion());
      
      AndFilter andFilter0 = new AndFilter();
      assertNotNull(andFilter0);
      
      NodeList nodeList0 = parser0.extractAllNodesThatMatch(andFilter0);
      assertNotNull(nodeList0);
      assertEquals(2.0, Parser.VERSION_NUMBER, 0.01);
      assertNull(parser0.getURL());
      assertEquals(2.0, parser0.getVersionNumber(), 0.01);
      assertEquals("2.0 (Release Build Sep 17, 2006)", parser0.getVersion());
      
      tableTag0.setChildren(nodeList0);
      assertEquals(2.0, Parser.VERSION_NUMBER, 0.01);
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEndTag());
      assertNull(parser0.getURL());
      assertEquals(2.0, parser0.getVersionNumber(), 0.01);
      assertEquals("2.0 (Release Build Sep 17, 2006)", parser0.getVersion());
      
      HtmlTable htmlTable0 = new HtmlTable(tableTag0);
      assertNotNull(htmlTable0);
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals(0, htmlTable0.getRowCount());
      
      List<String> list0 = ResourceBundle.Control.FORMAT_PROPERTIES;
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      
      int int0 = htmlTable0.addRow(list0);
      assertEquals(0, int0);
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals(1, htmlTable0.getRowCount());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      
      SlimTestContextImpl slimTestContextImpl0 = new SlimTestContextImpl();
      assertNotNull(slimTestContextImpl0);
      
      String string0 = "define table type";
      htmlTable0.substitute(int0, int0, string0);
      assertFalse(list0.contains(string0));
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals(1, htmlTable0.getRowCount());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      
      SlimTable slimTable0 = slimTableFactory0.makeSlimTable(htmlTable0, lexer0.VERSION_DATE, slimTestContextImpl0);
      assertNull(slimTable0);
      assertEquals(2.0, Lexer.VERSION_NUMBER, 0.01);
      assertTrue(Lexer.STRICT_REMARKS);
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals(0, lexer0.getPosition());
      assertEquals("2.0 (Release Build Sep 17, 2006)", lexer0.getVersion());
      assertEquals(1, htmlTable0.getRowCount());
      
      Class<DecisionTable> class0 = DecisionTable.class;
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      assertNotNull(slimTableFactory0);
      
      TableTag tableTag0 = new TableTag();
      assertNotNull(tableTag0);
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      
      Lexer lexer0 = new Lexer();
      assertNotNull(lexer0);
      assertTrue(Lexer.STRICT_REMARKS);
      assertEquals(2.0, Lexer.VERSION_NUMBER, 0.01);
      assertEquals("2.0 (Release Build Sep 17, 2006)", lexer0.getVersion());
      assertEquals(0, lexer0.getPosition());
      
      Parser parser0 = Parser.createParser(lexer0.VERSION_DATE, lexer0.VERSION_STRING);
      assertNotNull(parser0);
      assertTrue(Lexer.STRICT_REMARKS);
      assertEquals(2.0, Lexer.VERSION_NUMBER, 0.01);
      assertEquals(2.0, Parser.VERSION_NUMBER, 0.01);
      assertEquals("2.0 (Release Build Sep 17, 2006)", lexer0.getVersion());
      assertEquals(0, lexer0.getPosition());
      assertEquals(2.0, parser0.getVersionNumber(), 0.01);
      assertNull(parser0.getURL());
      assertEquals("2.0 (Release Build Sep 17, 2006)", parser0.getVersion());
      
      AndFilter andFilter0 = new AndFilter();
      assertNotNull(andFilter0);
      
      NodeList nodeList0 = parser0.extractAllNodesThatMatch(andFilter0);
      assertNotNull(nodeList0);
      assertTrue(Lexer.STRICT_REMARKS);
      assertEquals(2.0, Lexer.VERSION_NUMBER, 0.01);
      assertEquals(2.0, Parser.VERSION_NUMBER, 0.01);
      assertEquals("2.0 (Release Build Sep 17, 2006)", lexer0.getVersion());
      assertEquals(0, lexer0.getPosition());
      assertEquals(2.0, parser0.getVersionNumber(), 0.01);
      assertNull(parser0.getURL());
      assertEquals("2.0 (Release Build Sep 17, 2006)", parser0.getVersion());
      
      tableTag0.setChildren(nodeList0);
      assertTrue(Lexer.STRICT_REMARKS);
      assertEquals(2.0, Lexer.VERSION_NUMBER, 0.01);
      assertEquals(2.0, Parser.VERSION_NUMBER, 0.01);
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals("2.0 (Release Build Sep 17, 2006)", lexer0.getVersion());
      assertEquals(0, lexer0.getPosition());
      assertEquals(2.0, parser0.getVersionNumber(), 0.01);
      assertNull(parser0.getURL());
      assertEquals("2.0 (Release Build Sep 17, 2006)", parser0.getVersion());
      
      HtmlTable htmlTable0 = new HtmlTable(tableTag0);
      assertNotNull(htmlTable0);
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals(0, htmlTable0.getRowCount());
      
      List<String> list0 = ResourceBundle.Control.FORMAT_PROPERTIES;
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      
      int int0 = htmlTable0.addRow(list0);
      assertEquals(0, int0);
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals(1, htmlTable0.getRowCount());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      
      SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
      assertNotNull(slimTableFactory1);
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertNotSame(slimTableFactory1, slimTableFactory0);
      assertFalse(slimTableFactory1.equals((Object)slimTableFactory0));
      
      SlimTestContextImpl slimTestContextImpl0 = new SlimTestContextImpl();
      assertNotNull(slimTestContextImpl0);
      
      String string0 = "comment:sc1enario";
      htmlTable0.substitute(int0, int0, string0);
      assertFalse(list0.contains(string0));
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals(1, htmlTable0.getRowCount());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      
      SlimTable slimTable0 = slimTableFactory1.makeSlimTable(htmlTable0, lexer0.VERSION_STRING, slimTestContextImpl0);
      assertNull(slimTable0);
      assertTrue(Lexer.STRICT_REMARKS);
      assertEquals(2.0, Lexer.VERSION_NUMBER, 0.01);
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertNotSame(slimTableFactory1, slimTableFactory0);
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals("2.0 (Release Build Sep 17, 2006)", lexer0.getVersion());
      assertEquals(0, lexer0.getPosition());
      assertEquals(1, htmlTable0.getRowCount());
      assertFalse(slimTableFactory0.equals((Object)slimTableFactory1));
      assertFalse(slimTableFactory1.equals((Object)slimTableFactory0));
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      assertNotNull(slimTableFactory0);
      
      TableTag tableTag0 = new TableTag();
      assertNotNull(tableTag0);
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals("TABLE", tableTag0.getRawTagName());
      
      Lexer lexer0 = new Lexer();
      assertNotNull(lexer0);
      assertTrue(Lexer.STRICT_REMARKS);
      assertEquals(2.0, Lexer.VERSION_NUMBER, 0.01);
      assertEquals("2.0 (Release Build Sep 17, 2006)", lexer0.getVersion());
      assertEquals(0, lexer0.getPosition());
      
      Parser parser0 = Parser.createParser(lexer0.VERSION_DATE, lexer0.VERSION_STRING);
      assertNotNull(parser0);
      assertTrue(Lexer.STRICT_REMARKS);
      assertEquals(2.0, Lexer.VERSION_NUMBER, 0.01);
      assertEquals(2.0, Parser.VERSION_NUMBER, 0.01);
      assertEquals("2.0 (Release Build Sep 17, 2006)", lexer0.getVersion());
      assertEquals(0, lexer0.getPosition());
      assertEquals("2.0 (Release Build Sep 17, 2006)", parser0.getVersion());
      assertEquals(2.0, parser0.getVersionNumber(), 0.01);
      assertNull(parser0.getURL());
      
      AndFilter andFilter0 = new AndFilter();
      assertNotNull(andFilter0);
      
      NodeList nodeList0 = parser0.extractAllNodesThatMatch(andFilter0);
      assertNotNull(nodeList0);
      assertTrue(Lexer.STRICT_REMARKS);
      assertEquals(2.0, Lexer.VERSION_NUMBER, 0.01);
      assertEquals(2.0, Parser.VERSION_NUMBER, 0.01);
      assertEquals("2.0 (Release Build Sep 17, 2006)", lexer0.getVersion());
      assertEquals(0, lexer0.getPosition());
      assertEquals("2.0 (Release Build Sep 17, 2006)", parser0.getVersion());
      assertEquals(2.0, parser0.getVersionNumber(), 0.01);
      assertNull(parser0.getURL());
      
      tableTag0.setChildren(nodeList0);
      assertTrue(Lexer.STRICT_REMARKS);
      assertEquals(2.0, Lexer.VERSION_NUMBER, 0.01);
      assertEquals(2.0, Parser.VERSION_NUMBER, 0.01);
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals("2.0 (Release Build Sep 17, 2006)", lexer0.getVersion());
      assertEquals(0, lexer0.getPosition());
      assertEquals("2.0 (Release Build Sep 17, 2006)", parser0.getVersion());
      assertEquals(2.0, parser0.getVersionNumber(), 0.01);
      assertNull(parser0.getURL());
      
      HtmlTable htmlTable0 = new HtmlTable(tableTag0);
      assertNotNull(htmlTable0);
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals(0, htmlTable0.getRowCount());
      
      List<String> list0 = ResourceBundle.Control.FORMAT_PROPERTIES;
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      
      int int0 = htmlTable0.addRow(list0);
      assertEquals(0, int0);
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals(1, htmlTable0.getRowCount());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      
      SlimTestContextImpl slimTestContextImpl0 = new SlimTestContextImpl();
      assertNotNull(slimTestContextImpl0);
      
      String string0 = "script";
      htmlTable0.substitute(int0, int0, string0);
      assertFalse(list0.contains(string0));
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals(1, htmlTable0.getRowCount());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      
      slimTableFactory0.parseDefineTableTypeRow(htmlTable0, int0);
      assertFalse(list0.contains(string0));
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals(1, htmlTable0.getRowCount());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      
      SlimTable slimTable0 = slimTableFactory0.makeSlimTable(htmlTable0, lexer0.VERSION_DATE, slimTestContextImpl0);
      assertNotNull(slimTable0);
      assertTrue(Lexer.STRICT_REMARKS);
      assertEquals(2.0, Lexer.VERSION_NUMBER, 0.01);
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals("2.0 (Release Build Sep 17, 2006)", lexer0.getVersion());
      assertEquals(0, lexer0.getPosition());
      assertEquals(1, htmlTable0.getRowCount());
      assertEquals("scriptTable_Sep 17, 2006", slimTable0.getTableName());
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      assertNotNull(slimTableFactory0);
      
      String string0 = "dt:";
      Class<ImportTable> class0 = ImportTable.class;
      // Undeclared exception!
      try { 
        slimTableFactory0.addTableType(string0, class0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // A table type named 'dt:' already exists
         //
         verifyException("fitnesse.testsystems.slim.tables.SlimTableFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      assertNotNull(slimTableFactory0);
      
      TableTag tableTag0 = new TableTag();
      assertNotNull(tableTag0);
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals((-1), tableTag0.getTagBegin());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      
      Lexer lexer0 = new Lexer();
      assertNotNull(lexer0);
      assertTrue(Lexer.STRICT_REMARKS);
      assertEquals(2.0, Lexer.VERSION_NUMBER, 0.01);
      assertEquals(0, lexer0.getPosition());
      assertEquals("2.0 (Release Build Sep 17, 2006)", lexer0.getVersion());
      
      Parser parser0 = Parser.createParser(lexer0.VERSION_DATE, lexer0.VERSION_STRING);
      assertNotNull(parser0);
      assertTrue(Lexer.STRICT_REMARKS);
      assertEquals(2.0, Lexer.VERSION_NUMBER, 0.01);
      assertEquals(2.0, Parser.VERSION_NUMBER, 0.01);
      assertEquals(0, lexer0.getPosition());
      assertEquals("2.0 (Release Build Sep 17, 2006)", lexer0.getVersion());
      assertEquals(2.0, parser0.getVersionNumber(), 0.01);
      assertNull(parser0.getURL());
      assertEquals("2.0 (Release Build Sep 17, 2006)", parser0.getVersion());
      
      NodeList nodeList0 = new NodeList();
      assertNotNull(nodeList0);
      
      tableTag0.setChildren(nodeList0);
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals((-1), tableTag0.getTagBegin());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      
      HtmlTable htmlTable0 = new HtmlTable(tableTag0);
      assertNotNull(htmlTable0);
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals((-1), tableTag0.getTagBegin());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals(0, htmlTable0.getRowCount());
      
      List<String> list0 = ResourceBundle.Control.FORMAT_PROPERTIES;
      assertNotNull(list0);
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      
      int int0 = htmlTable0.addRow(list0);
      assertEquals(0, int0);
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals((-1), tableTag0.getTagBegin());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals(1, htmlTable0.getRowCount());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      
      SlimTestContextImpl slimTestContextImpl0 = new SlimTestContextImpl();
      assertNotNull(slimTestContextImpl0);
      
      String string0 = "fitness.testsystems.lim.tab,es.slimtablefactory";
      htmlTable0.substitute(int0, int0, string0);
      assertFalse(list0.contains(string0));
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals((-1), tableTag0.getTagBegin());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals(1, htmlTable0.getRowCount());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      
      SlimTable slimTable0 = slimTableFactory0.makeSlimTable(htmlTable0, lexer0.VERSION_DATE, slimTestContextImpl0);
      assertNotNull(slimTable0);
      assertTrue(Lexer.STRICT_REMARKS);
      assertEquals(2.0, Lexer.VERSION_NUMBER, 0.01);
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals((-1), tableTag0.getTagBegin());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals(0, lexer0.getPosition());
      assertEquals("2.0 (Release Build Sep 17, 2006)", lexer0.getVersion());
      assertEquals(1, htmlTable0.getRowCount());
      assertEquals("decisionTable_Sep 17, 2006", slimTable0.getTableName());
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      assertNotNull(slimTableFactory0);
      
      TableTag tableTag0 = new TableTag();
      assertNotNull(tableTag0);
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEndTag());
      
      Lexer lexer0 = new Lexer();
      assertNotNull(lexer0);
      assertTrue(Lexer.STRICT_REMARKS);
      assertEquals(2.0, Lexer.VERSION_NUMBER, 0.01);
      assertEquals("2.0 (Release Build Sep 17, 2006)", lexer0.getVersion());
      assertEquals(0, lexer0.getPosition());
      
      Parser parser0 = new Parser();
      assertNotNull(parser0);
      assertEquals(2.0, Parser.VERSION_NUMBER, 0.01);
      assertEquals("2.0 (Release Build Sep 17, 2006)", parser0.getVersion());
      assertEquals(2.0, parser0.getVersionNumber(), 0.01);
      assertNull(parser0.getURL());
      
      AndFilter andFilter0 = new AndFilter();
      assertNotNull(andFilter0);
      
      NodeList nodeList0 = parser0.extractAllNodesThatMatch(andFilter0);
      assertNotNull(nodeList0);
      assertEquals(2.0, Parser.VERSION_NUMBER, 0.01);
      assertEquals("2.0 (Release Build Sep 17, 2006)", parser0.getVersion());
      assertEquals(2.0, parser0.getVersionNumber(), 0.01);
      assertNull(parser0.getURL());
      
      tableTag0.setChildren(nodeList0);
      assertEquals(2.0, Parser.VERSION_NUMBER, 0.01);
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals("2.0 (Release Build Sep 17, 2006)", parser0.getVersion());
      assertEquals(2.0, parser0.getVersionNumber(), 0.01);
      assertNull(parser0.getURL());
      
      HtmlTable htmlTable0 = new HtmlTable(tableTag0);
      assertNotNull(htmlTable0);
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals(0, htmlTable0.getRowCount());
      
      List<String> list0 = ResourceBundle.Control.FORMAT_PROPERTIES;
      assertNotNull(list0);
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      
      int int0 = htmlTable0.addRow(list0);
      assertEquals(0, int0);
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals(1, htmlTable0.getRowCount());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      
      SlimTestContextImpl slimTestContextImpl0 = new SlimTestContextImpl();
      assertNotNull(slimTestContextImpl0);
      
      String string0 = "define table t:pe";
      htmlTable0.substitute(int0, int0, string0);
      assertFalse(list0.contains(string0));
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals(1, htmlTable0.getRowCount());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      
      SlimTable slimTable0 = slimTableFactory0.makeSlimTable(htmlTable0, lexer0.VERSION_DATE, slimTestContextImpl0);
      assertNotNull(slimTable0);
      assertTrue(Lexer.STRICT_REMARKS);
      assertEquals(2.0, Lexer.VERSION_NUMBER, 0.01);
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals("2.0 (Release Build Sep 17, 2006)", lexer0.getVersion());
      assertEquals(0, lexer0.getPosition());
      assertEquals(1, htmlTable0.getRowCount());
      assertEquals("UnknownTableType_Sep 17, 2006", slimTable0.getTableName());
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      assertNotNull(slimTableFactory0);
      
      SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
      assertNotNull(slimTableFactory1);
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertNotSame(slimTableFactory1, slimTableFactory0);
      assertFalse(slimTableFactory1.equals((Object)slimTableFactory0));
      
      String string0 = "iz7JkDu;-~/bn";
      String string1 = slimTableFactory1.getFullTableName(string0);
      assertNotNull(string1);
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertNotSame(slimTableFactory1, slimTableFactory0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("iz7JkDu;-~/bn", string1);
      assertFalse(slimTableFactory0.equals((Object)slimTableFactory1));
      assertFalse(slimTableFactory1.equals((Object)slimTableFactory0));
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      assertNotNull(slimTableFactory0);
      
      SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
      assertNotNull(slimTableFactory1);
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertNotSame(slimTableFactory1, slimTableFactory0);
      assertFalse(slimTableFactory1.equals((Object)slimTableFactory0));
      
      String string0 = "3+QyE&u1R%W2L&";
      String string1 = slimTableFactory1.makeTableType(string0);
      assertNotNull(string1);
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertNotSame(slimTableFactory1, slimTableFactory0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("3+QyE&u1R%W2L&", string1);
      assertFalse(slimTableFactory0.equals((Object)slimTableFactory1));
      assertFalse(slimTableFactory1.equals((Object)slimTableFactory0));
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      assertNotNull(slimTableFactory0);
      
      HashMap<String, Class<ImportTable>> hashMap0 = new HashMap<String, Class<ImportTable>>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      slimTableFactory0.tableTypes = (Map<String, Class<? extends SlimTable>>) hashMap0;
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(slimTableFactory0.tableTypes.isEmpty());
      assertEquals(0, slimTableFactory0.tableTypes.size());
      
      SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
      assertNotNull(slimTableFactory1);
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertNotSame(slimTableFactory1, slimTableFactory0);
      assertFalse(slimTableFactory1.equals((Object)slimTableFactory0));
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      assertNotNull(slimTableFactory0);
      
      SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
      assertNotNull(slimTableFactory1);
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertNotSame(slimTableFactory1, slimTableFactory0);
      assertFalse(slimTableFactory1.equals((Object)slimTableFactory0));
      
      String string0 = "'eHAv ].fGP]^>fSt";
      boolean boolean0 = slimTableFactory1.hasColon(string0);
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertNotSame(slimTableFactory1, slimTableFactory0);
      assertFalse(boolean0);
      assertFalse(slimTableFactory0.equals((Object)slimTableFactory1));
      assertFalse(slimTableFactory1.equals((Object)slimTableFactory0));
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      assertNotNull(slimTableFactory0);
      
      String string0 = "";
      Class<OrderedQueryTable> class0 = OrderedQueryTable.class;
      slimTableFactory0.addTableType(string0, class0);
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      assertNotNull(slimTableFactory0);
      
      SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
      assertNotNull(slimTableFactory1);
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertNotSame(slimTableFactory1, slimTableFactory0);
      assertFalse(slimTableFactory1.equals((Object)slimTableFactory0));
      
      TableTag tableTag0 = new TableTag();
      assertNotNull(tableTag0);
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals((-1), tableTag0.getTagBegin());
      
      String string0 = "table:";
      int int0 = 0;
      SlimTestContextImpl slimTestContextImpl0 = new SlimTestContextImpl();
      assertNotNull(slimTestContextImpl0);
      
      ExecutionResult executionResult0 = ExecutionResult.IGNORE;
      SlimTableFactory slimTableFactory2 = slimTableFactory0.copy();
      assertNotNull(slimTableFactory2);
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertNotSame(slimTableFactory0, slimTableFactory2);
      assertNotSame(slimTableFactory2, slimTableFactory0);
      assertNotSame(slimTableFactory2, slimTableFactory1);
      assertFalse(slimTableFactory0.equals((Object)slimTableFactory1));
      assertFalse(slimTableFactory2.equals((Object)slimTableFactory0));
      assertFalse(slimTableFactory2.equals((Object)slimTableFactory1));
      
      slimTestContextImpl0.increment(executionResult0);
      Class<QueryTable> class0 = QueryTable.class;
      String string1 = "";
      String string2 = slimTableFactory0.getFullTableName(string0);
      assertNotNull(string2);
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertNotSame(slimTableFactory0, slimTableFactory2);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertNotSame(string2, string1);
      assertSame(string2, string0);
      assertEquals("table:", string2);
      assertFalse(slimTableFactory0.equals((Object)slimTableFactory1));
      assertFalse(slimTableFactory0.equals((Object)slimTableFactory2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = "";
      String string4 = slimTableFactory1.getFullTableName(string3);
      assertNotNull(string4);
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertNotSame(slimTableFactory0, slimTableFactory2);
      assertNotSame(slimTableFactory1, slimTableFactory2);
      assertNotSame(slimTableFactory1, slimTableFactory0);
      assertSame(string3, string4);
      assertSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string4, string2);
      assertSame(string4, string3);
      assertNotSame(string4, string0);
      assertSame(string4, string1);
      assertEquals("", string4);
      assertFalse(slimTableFactory0.equals((Object)slimTableFactory1));
      assertFalse(slimTableFactory0.equals((Object)slimTableFactory2));
      assertFalse(slimTableFactory1.equals((Object)slimTableFactory2));
      assertFalse(slimTableFactory1.equals((Object)slimTableFactory0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      
      Class<DecisionTable> class1 = DecisionTable.class;
      SlimTableFactory slimTableFactory3 = slimTableFactory2.copy();
      assertNotNull(slimTableFactory3);
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertNotSame(slimTableFactory0, slimTableFactory2);
      assertNotSame(slimTableFactory0, slimTableFactory3);
      assertNotSame(slimTableFactory2, slimTableFactory0);
      assertNotSame(slimTableFactory2, slimTableFactory1);
      assertNotSame(slimTableFactory2, slimTableFactory3);
      assertNotSame(slimTableFactory3, slimTableFactory2);
      assertNotSame(slimTableFactory3, slimTableFactory1);
      assertNotSame(slimTableFactory3, slimTableFactory0);
      assertFalse(slimTableFactory0.equals((Object)slimTableFactory1));
      assertFalse(slimTableFactory0.equals((Object)slimTableFactory2));
      assertFalse(slimTableFactory2.equals((Object)slimTableFactory0));
      assertFalse(slimTableFactory2.equals((Object)slimTableFactory1));
      assertFalse(slimTableFactory3.equals((Object)slimTableFactory2));
      assertFalse(slimTableFactory3.equals((Object)slimTableFactory1));
      assertFalse(slimTableFactory3.equals((Object)slimTableFactory0));
      
      int int1 = 0;
      HtmlTable htmlTable0 = null;
      try {
        htmlTable0 = new HtmlTable(tableTag0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.HtmlTable", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      assertNotNull(slimTableFactory0);
      
      SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
      assertNotNull(slimTableFactory1);
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertNotSame(slimTableFactory1, slimTableFactory0);
      assertFalse(slimTableFactory1.equals((Object)slimTableFactory0));
      
      Class<LibraryTable> class0 = LibraryTable.class;
      String string0 = ">{sE:4";
      String string1 = slimTableFactory0.makeTableType(string0);
      assertNotNull(string1);
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals(">{sE 4", string1);
      assertFalse(slimTableFactory0.equals((Object)slimTableFactory1));
      assertFalse(string1.equals((Object)string0));
      
      TableTag tableTag0 = new TableTag();
      assertNotNull(tableTag0);
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getStartPosition());
      
      HtmlTable htmlTable0 = null;
      try {
        htmlTable0 = new HtmlTable(tableTag0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.HtmlTable", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      assertNotNull(slimTableFactory0);
      
      Table table0 = null;
      int int0 = 131072;
      // Undeclared exception!
      try { 
        slimTableFactory0.parseDefineTableTypeRow(table0, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.tables.SlimTableFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      assertNotNull(slimTableFactory0);
      
      String string0 = "yK4";
      String string1 = slimTableFactory0.makeTableType(string0);
      assertNotNull(string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("yK4", string1);
      
      Table table0 = null;
      int int0 = 0;
      // Undeclared exception!
      try { 
        slimTableFactory0.parseDefineTableTypeRow(table0, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.tables.SlimTableFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      assertNotNull(slimTableFactory0);
      
      String string0 = "decision:";
      boolean boolean0 = slimTableFactory0.hasColon(string0);
      assertTrue(boolean0);
      
      TableTag tableTag0 = new TableTag();
      assertNotNull(tableTag0);
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      
      HtmlTable htmlTable0 = null;
      try {
        htmlTable0 = new HtmlTable(tableTag0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.HtmlTable", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      assertNotNull(slimTableFactory0);
      
      SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
      assertNotNull(slimTableFactory1);
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertNotSame(slimTableFactory1, slimTableFactory0);
      assertFalse(slimTableFactory1.equals((Object)slimTableFactory0));
      
      Class<ScenarioTableExtensionTest.AutoArgScenarioTable> class0 = ScenarioTableExtensionTest.AutoArgScenarioTable.class;
      Table table0 = null;
      String string0 = "=,RF_) =_EU";
      SlimTestContext slimTestContext0 = null;
      SlimTable slimTable0 = slimTableFactory1.newTableForType(class0, table0, string0, slimTestContext0);
      assertNotNull(slimTable0);
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertNotSame(slimTableFactory1, slimTableFactory0);
      assertEquals("UnknownTableType_=,RF_) =_EU", slimTable0.getTableName());
      assertFalse(slimTableFactory0.equals((Object)slimTableFactory1));
      assertFalse(slimTableFactory1.equals((Object)slimTableFactory0));
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      assertNotNull(slimTableFactory0);
      
      String string0 = "METHOD";
      SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
      assertNotNull(slimTableFactory1);
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertNotSame(slimTableFactory1, slimTableFactory0);
      assertFalse(slimTableFactory1.equals((Object)slimTableFactory0));
      
      Class<ScriptTable> class0 = ScriptTable.class;
      slimTableFactory1.addTableType(string0, class0);
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertNotSame(slimTableFactory1, slimTableFactory0);
      assertFalse(slimTableFactory0.equals((Object)slimTableFactory1));
      assertFalse(slimTableFactory1.equals((Object)slimTableFactory0));
      
      Class<OrderedQueryTable> class1 = OrderedQueryTable.class;
      slimTableFactory0.addTableType(string0, class1);
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertFalse(slimTableFactory0.equals((Object)slimTableFactory1));
      
      String string1 = null;
      Class<QueryTable> class2 = QueryTable.class;
      // Undeclared exception!
      try { 
        slimTableFactory0.addTableType(string1, class2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.tables.SlimTableFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      assertNotNull(slimTableFactory0);
      
      String string0 = ":";
      Class<? extends SlimTable> class0 = slimTableFactory0.getTableType(string0);
      assertNull(class0);
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      assertNotNull(slimTableFactory0);
      
      String string0 = "";
      Class<? extends SlimTable> class0 = slimTableFactory0.getTableType(string0);
      assertNull(class0);
      
      String string1 = "as";
      boolean boolean0 = slimTableFactory0.hasColon(string1);
      assertNotSame(string1, string0);
      assertFalse(boolean0);
      assertFalse(string1.equals((Object)string0));
      
      SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
      assertNotNull(slimTableFactory1);
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertNotSame(slimTableFactory1, slimTableFactory0);
      assertFalse(slimTableFactory1.equals((Object)slimTableFactory0));
      
      String string2 = slimTableFactory1.makeTableType(string1);
      assertNotNull(string2);
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(slimTableFactory1, slimTableFactory0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertEquals("", string2);
      assertFalse(slimTableFactory0.equals((Object)slimTableFactory1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(slimTableFactory1.equals((Object)slimTableFactory0));
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      Class<LibraryTable> class1 = LibraryTable.class;
      TableTag tableTag0 = null;
      HtmlTable htmlTable0 = null;
      try {
        htmlTable0 = new HtmlTable(tableTag0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.HtmlTable", e);
      }
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      assertNotNull(slimTableFactory0);
      
      String string0 = null;
      // Undeclared exception!
      try { 
        slimTableFactory0.getFullTableName(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.tables.SlimTableFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      assertNotNull(slimTableFactory0);
      
      SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
      assertNotNull(slimTableFactory1);
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertNotSame(slimTableFactory1, slimTableFactory0);
      assertFalse(slimTableFactory1.equals((Object)slimTableFactory0));
      
      String string0 = "scenario";
      Class<? extends SlimTable> class0 = slimTableFactory1.getTableType(string0);
      assertNotNull(class0);
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertNotSame(slimTableFactory1, slimTableFactory0);
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1, class0.getModifiers());
      assertFalse(class0.isPrimitive());
      assertEquals("class fitnesse.testsystems.slim.tables.ScenarioTable", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(slimTableFactory0.equals((Object)slimTableFactory1));
      assertFalse(slimTableFactory1.equals((Object)slimTableFactory0));
      
      SlimTableFactory slimTableFactory2 = slimTableFactory1.copy();
      assertNotNull(slimTableFactory2);
      assertNotSame(slimTableFactory0, slimTableFactory2);
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertNotSame(slimTableFactory1, slimTableFactory0);
      assertNotSame(slimTableFactory1, slimTableFactory2);
      assertNotSame(slimTableFactory2, slimTableFactory0);
      assertNotSame(slimTableFactory2, slimTableFactory1);
      assertFalse(slimTableFactory0.equals((Object)slimTableFactory1));
      assertFalse(slimTableFactory1.equals((Object)slimTableFactory0));
      assertFalse(slimTableFactory2.equals((Object)slimTableFactory0));
      assertFalse(slimTableFactory2.equals((Object)slimTableFactory1));
      
      Table table0 = null;
      // Undeclared exception!
      try { 
        slimTableFactory1.parseDefineTableTypeTable(table0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.tables.SlimTableFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      assertNotNull(slimTableFactory0);
      
      SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
      assertNotNull(slimTableFactory1);
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertNotSame(slimTableFactory1, slimTableFactory0);
      assertFalse(slimTableFactory1.equals((Object)slimTableFactory0));
      
      Table table0 = null;
      // Undeclared exception!
      try { 
        slimTableFactory1.parseDefineTableTypeTable(table0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.tables.SlimTableFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      assertNotNull(slimTableFactory0);
      
      SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
      assertNotNull(slimTableFactory1);
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertNotSame(slimTableFactory1, slimTableFactory0);
      assertFalse(slimTableFactory1.equals((Object)slimTableFactory0));
      
      String string0 = "";
      String string1 = slimTableFactory1.makeTableType(string0);
      assertNotNull(string1);
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertNotSame(slimTableFactory1, slimTableFactory0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("", string1);
      assertFalse(slimTableFactory0.equals((Object)slimTableFactory1));
      assertFalse(slimTableFactory1.equals((Object)slimTableFactory0));
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      assertNotNull(slimTableFactory0);
      
      String string0 = null;
      // Undeclared exception!
      try { 
        slimTableFactory0.getTableType(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.tables.SlimTableFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      assertNotNull(slimTableFactory0);
      
      String string0 = "dt:";
      String string1 = "PICK";
      Class<? extends SlimTable> class0 = slimTableFactory0.getTableType(string1);
      assertNull(class0);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      
      Class<ImportTable> class1 = ImportTable.class;
      // Undeclared exception!
      try { 
        slimTableFactory0.addTableType(string0, class1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // A table type named 'dt:' already exists
         //
         verifyException("fitnesse.testsystems.slim.tables.SlimTableFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      assertNotNull(slimTableFactory0);
      
      String string0 = "B09$EYP>1Kz";
      String string1 = slimTableFactory0.makeTableType(string0);
      assertNotNull(string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("B09$EYP>1Kz", string1);
      
      boolean boolean0 = slimTableFactory0.hasColon(string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertFalse(boolean0);
      
      String string2 = "fitnesse.testsystems.slim.results.SlimExceptionResult";
      String string3 = slimTableFactory0.makeTableType(string2);
      assertNotNull(string3);
      assertNotSame(string2, string1);
      assertSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertSame(string3, string2);
      assertEquals("fitnesse.testsystems.slim.results.SlimExceptionResult", string3);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = null;
      // Undeclared exception!
      try { 
        slimTableFactory0.hasColon(string4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.tables.SlimTableFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      assertNotNull(slimTableFactory0);
      
      String string0 = "";
      Table table0 = null;
      SlimTestContextImpl slimTestContextImpl0 = new SlimTestContextImpl();
      assertNotNull(slimTestContextImpl0);
      
      slimTestContextImpl0.incrementErroredTestsCount();
      // Undeclared exception!
      try { 
        slimTableFactory0.makeSlimTable(table0, string0, slimTestContextImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.tables.SlimTableFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      assertNotNull(slimTableFactory0);
      
      SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
      assertNotNull(slimTableFactory1);
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertNotSame(slimTableFactory1, slimTableFactory0);
      assertFalse(slimTableFactory1.equals((Object)slimTableFactory0));
      
      String string0 = null;
      // Undeclared exception!
      try { 
        slimTableFactory1.makeTableType(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("fitnesse.testsystems.slim.tables.SlimTableFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      assertNotNull(slimTableFactory0);
      
      String string0 = "darbb3>rJ+1i;*_Dn(";
      TableTag tableTag0 = new TableTag();
      assertNotNull(tableTag0);
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getTagBegin());
      
      Class<? extends SlimTable> class0 = slimTableFactory0.getTableType(string0);
      assertNull(class0);
      
      Lexer lexer0 = new Lexer(string0);
      assertNotNull(lexer0);
      assertEquals(2.0, Lexer.VERSION_NUMBER, 0.01);
      assertTrue(Lexer.STRICT_REMARKS);
      assertEquals(0, lexer0.getPosition());
      assertEquals("2.0 (Release Build Sep 17, 2006)", lexer0.getVersion());
      
      Parser parser0 = new Parser(lexer0);
      assertNotNull(parser0);
      assertEquals(2.0, Lexer.VERSION_NUMBER, 0.01);
      assertTrue(Lexer.STRICT_REMARKS);
      assertEquals(2.0, Parser.VERSION_NUMBER, 0.01);
      assertEquals(0, lexer0.getPosition());
      assertEquals("2.0 (Release Build Sep 17, 2006)", lexer0.getVersion());
      assertEquals(2.0, parser0.getVersionNumber(), 0.01);
      assertNull(parser0.getURL());
      assertEquals("2.0 (Release Build Sep 17, 2006)", parser0.getVersion());
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = true;
      boolean boolean1 = FileSystemHandling.setPermissions(evoSuiteFile0, lexer0.STRICT_REMARKS, lexer0.STRICT_REMARKS, boolean0);
      assertEquals(2.0, Lexer.VERSION_NUMBER, 0.01);
      assertTrue(Lexer.STRICT_REMARKS);
      assertFalse(boolean1);
      assertEquals(0, lexer0.getPosition());
      assertEquals("2.0 (Release Build Sep 17, 2006)", lexer0.getVersion());
      assertFalse(boolean1 == boolean0);
      
      AndFilter andFilter0 = new AndFilter();
      assertNotNull(andFilter0);
      
      NodeList nodeList0 = parser0.extractAllNodesThatMatch(andFilter0);
      assertNotNull(nodeList0);
      assertEquals(2.0, Lexer.VERSION_NUMBER, 0.01);
      assertTrue(Lexer.STRICT_REMARKS);
      assertEquals(2.0, Parser.VERSION_NUMBER, 0.01);
      assertEquals(19, lexer0.getPosition());
      assertEquals("2.0 (Release Build Sep 17, 2006)", lexer0.getVersion());
      assertEquals(2.0, parser0.getVersionNumber(), 0.01);
      assertNull(parser0.getURL());
      assertEquals("2.0 (Release Build Sep 17, 2006)", parser0.getVersion());
      
      tableTag0.setChildren(nodeList0);
      assertEquals(2.0, Lexer.VERSION_NUMBER, 0.01);
      assertTrue(Lexer.STRICT_REMARKS);
      assertEquals(2.0, Parser.VERSION_NUMBER, 0.01);
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals(19, lexer0.getPosition());
      assertEquals("2.0 (Release Build Sep 17, 2006)", lexer0.getVersion());
      assertEquals(2.0, parser0.getVersionNumber(), 0.01);
      assertNull(parser0.getURL());
      assertEquals("2.0 (Release Build Sep 17, 2006)", parser0.getVersion());
      
      HtmlTable htmlTable0 = new HtmlTable(tableTag0);
      assertNotNull(htmlTable0);
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals(0, htmlTable0.getRowCount());
      
      SlimTable slimTable0 = slimTableFactory0.parseDefineTableTypeTable(htmlTable0);
      assertNull(slimTable0);
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals(0, htmlTable0.getRowCount());
      
      String string1 = slimTableFactory0.getFullTableName(string0);
      assertNotNull(string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("darbb3>rJ+1i;*_Dn(", string1);
      
      Class<? extends SlimTable> class1 = slimTableFactory0.getTableType(string0);
      assertNull(class1);
      assertSame(string0, string1);
      
      String string2 = slimTableFactory0.getFullTableName(string0);
      assertNotNull(string2);
      assertSame(string2, string1);
      assertSame(string2, string0);
      assertSame(string0, string2);
      assertSame(string0, string1);
      assertEquals("darbb3>rJ+1i;*_Dn(", string2);
      
      String string3 = "ashO";
      String string4 = slimTableFactory0.makeTableType(string3);
      assertNotNull(string4);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string4);
      assertNotSame(string4, string0);
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      assertNotSame(string4, string3);
      assertEquals("hO", string4);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      
      SlimTable slimTable1 = slimTableFactory0.parseDefineTableTypeTable(htmlTable0);
      assertNull(slimTable1);
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals(0, htmlTable0.getRowCount());
      
      String string5 = "asM| #hawl";
      Class<? extends SlimTable> class2 = slimTableFactory0.getTableType(string5);
      assertNull(class2);
      assertNotSame(string5, string3);
      assertNotSame(string5, string4);
      assertNotSame(string5, string0);
      assertNotSame(string5, string1);
      assertNotSame(string5, string2);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      
      String string6 = "-#gp*xE";
      SlimTestContextImpl slimTestContextImpl0 = new SlimTestContextImpl();
      assertNotNull(slimTestContextImpl0);
      
      SlimTable slimTable2 = slimTableFactory0.newTableForType(class2, htmlTable0, string6, slimTestContextImpl0);
      assertNotNull(slimTable2);
      assertNotSame(string5, string6);
      assertNotSame(string5, string3);
      assertNotSame(string5, string4);
      assertNotSame(string5, string0);
      assertNotSame(string5, string1);
      assertNotSame(string5, string2);
      assertNotSame(string6, string4);
      assertNotSame(string6, string2);
      assertNotSame(string6, string5);
      assertNotSame(string6, string0);
      assertNotSame(string6, string1);
      assertNotSame(string6, string3);
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals("UnknownTableType_-#gp*xE", slimTable2.getTableName());
      assertEquals(0, htmlTable0.getRowCount());
      assertFalse(string5.equals((Object)string6));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      
      String string7 = slimTableFactory0.makeTableType(string6);
      assertNotNull(string7);
      assertNotSame(string6, string4);
      assertSame(string6, string7);
      assertNotSame(string6, string2);
      assertNotSame(string6, string5);
      assertNotSame(string6, string0);
      assertNotSame(string6, string1);
      assertNotSame(string6, string3);
      assertSame(string7, string6);
      assertNotSame(string7, string0);
      assertNotSame(string7, string5);
      assertNotSame(string7, string2);
      assertNotSame(string7, string4);
      assertNotSame(string7, string1);
      assertNotSame(string7, string3);
      assertEquals("-#gp*xE", string7);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      assertNotNull(slimTableFactory0);
      
      String string0 = "darbb3>rJ+1i;*_Dn(";
      TableTag tableTag0 = new TableTag();
      assertNotNull(tableTag0);
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      
      Lexer lexer0 = new Lexer(string0);
      assertNotNull(lexer0);
      assertEquals(2.0, Lexer.VERSION_NUMBER, 0.01);
      assertTrue(Lexer.STRICT_REMARKS);
      assertEquals(0, lexer0.getPosition());
      assertEquals("2.0 (Release Build Sep 17, 2006)", lexer0.getVersion());
      
      Parser parser0 = new Parser(lexer0);
      assertNotNull(parser0);
      assertEquals(2.0, Lexer.VERSION_NUMBER, 0.01);
      assertTrue(Lexer.STRICT_REMARKS);
      assertEquals(2.0, Parser.VERSION_NUMBER, 0.01);
      assertEquals(0, lexer0.getPosition());
      assertEquals("2.0 (Release Build Sep 17, 2006)", lexer0.getVersion());
      assertNull(parser0.getURL());
      assertEquals(2.0, parser0.getVersionNumber(), 0.01);
      assertEquals("2.0 (Release Build Sep 17, 2006)", parser0.getVersion());
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = true;
      boolean boolean1 = FileSystemHandling.setPermissions(evoSuiteFile0, lexer0.STRICT_REMARKS, lexer0.STRICT_REMARKS, boolean0);
      assertEquals(2.0, Lexer.VERSION_NUMBER, 0.01);
      assertTrue(Lexer.STRICT_REMARKS);
      assertFalse(boolean1);
      assertEquals(0, lexer0.getPosition());
      assertEquals("2.0 (Release Build Sep 17, 2006)", lexer0.getVersion());
      assertFalse(boolean1 == boolean0);
      
      AndFilter andFilter0 = new AndFilter();
      assertNotNull(andFilter0);
      
      NodeList nodeList0 = parser0.extractAllNodesThatMatch(andFilter0);
      assertNotNull(nodeList0);
      assertEquals(2.0, Lexer.VERSION_NUMBER, 0.01);
      assertTrue(Lexer.STRICT_REMARKS);
      assertEquals(2.0, Parser.VERSION_NUMBER, 0.01);
      assertEquals("2.0 (Release Build Sep 17, 2006)", lexer0.getVersion());
      assertEquals(19, lexer0.getPosition());
      assertNull(parser0.getURL());
      assertEquals(2.0, parser0.getVersionNumber(), 0.01);
      assertEquals("2.0 (Release Build Sep 17, 2006)", parser0.getVersion());
      
      String string1 = nodeList0.toString();
      assertNotNull(string1);
      assertEquals(2.0, Lexer.VERSION_NUMBER, 0.01);
      assertTrue(Lexer.STRICT_REMARKS);
      assertEquals(2.0, Parser.VERSION_NUMBER, 0.01);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("Txt (0[0,0],19[0,19]): darbb3>rJ+1i;*_Dn(", string1);
      assertEquals("2.0 (Release Build Sep 17, 2006)", lexer0.getVersion());
      assertEquals(19, lexer0.getPosition());
      assertNull(parser0.getURL());
      assertEquals(2.0, parser0.getVersionNumber(), 0.01);
      assertEquals("2.0 (Release Build Sep 17, 2006)", parser0.getVersion());
      assertFalse(string1.equals((Object)string0));
      
      tableTag0.setChildren(nodeList0);
      assertEquals(2.0, Lexer.VERSION_NUMBER, 0.01);
      assertTrue(Lexer.STRICT_REMARKS);
      assertEquals(2.0, Parser.VERSION_NUMBER, 0.01);
      assertNotSame(string0, string1);
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertEquals("2.0 (Release Build Sep 17, 2006)", lexer0.getVersion());
      assertEquals(19, lexer0.getPosition());
      assertNull(parser0.getURL());
      assertEquals(2.0, parser0.getVersionNumber(), 0.01);
      assertEquals("2.0 (Release Build Sep 17, 2006)", parser0.getVersion());
      assertFalse(string0.equals((Object)string1));
      
      HtmlTable htmlTable0 = new HtmlTable(tableTag0);
      assertNotNull(htmlTable0);
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertEquals(0, htmlTable0.getRowCount());
      
      SlimTable slimTable0 = slimTableFactory0.parseDefineTableTypeTable(htmlTable0);
      assertNull(slimTable0);
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertEquals(0, htmlTable0.getRowCount());
      
      String string2 = slimTableFactory0.getFullTableName(string0);
      assertNotNull(string2);
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string1);
      assertSame(string2, string0);
      assertEquals("darbb3>rJ+1i;*_Dn(", string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      
      Class<? extends SlimTable> class0 = slimTableFactory0.getTableType(string0);
      assertNull(class0);
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertFalse(string0.equals((Object)string1));
      
      String string3 = slimTableFactory0.getFullTableName(string0);
      assertNotNull(string3);
      assertSame(string3, string0);
      assertSame(string3, string2);
      assertNotSame(string3, string1);
      assertSame(string0, string3);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertEquals("darbb3>rJ+1i;*_Dn(", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string0.equals((Object)string1));
      
      String string4 = "ashO";
      String string5 = slimTableFactory0.makeTableType(string4);
      assertNotNull(string5);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string2);
      assertNotSame(string4, string5);
      assertNotSame(string4, string3);
      assertNotSame(string5, string4);
      assertNotSame(string5, string0);
      assertNotSame(string5, string1);
      assertNotSame(string5, string3);
      assertNotSame(string5, string2);
      assertEquals("hO", string5);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      
      SlimTable slimTable1 = slimTableFactory0.parseDefineTableTypeTable(htmlTable0);
      assertNull(slimTable1);
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertEquals(0, htmlTable0.getRowCount());
      
      String string6 = "asM| #hawl";
      Class<? extends SlimTable> class1 = slimTableFactory0.getTableType(string6);
      assertNull(class1);
      assertNotSame(string6, string4);
      assertNotSame(string6, string5);
      assertNotSame(string6, string1);
      assertNotSame(string6, string0);
      assertNotSame(string6, string2);
      assertNotSame(string6, string3);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      
      String string7 = "-#gp*\\";
      SlimTestContextImpl slimTestContextImpl0 = new SlimTestContextImpl();
      assertNotNull(slimTestContextImpl0);
      
      SlimTable slimTable2 = slimTableFactory0.newTableForType(class1, htmlTable0, string7, slimTestContextImpl0);
      assertNotNull(slimTable2);
      assertNotSame(string6, string7);
      assertNotSame(string6, string4);
      assertNotSame(string6, string5);
      assertNotSame(string6, string1);
      assertNotSame(string6, string0);
      assertNotSame(string6, string2);
      assertNotSame(string6, string3);
      assertNotSame(string7, string0);
      assertNotSame(string7, string5);
      assertNotSame(string7, string1);
      assertNotSame(string7, string3);
      assertNotSame(string7, string6);
      assertNotSame(string7, string2);
      assertNotSame(string7, string4);
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertEquals("UnknownTableType_-#gp*\\", slimTable2.getTableName());
      assertEquals(0, htmlTable0.getRowCount());
      assertFalse(string6.equals((Object)string7));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      
      String string8 = slimTableFactory0.makeTableType(string7);
      assertNotNull(string8);
      assertNotSame(string7, string0);
      assertNotSame(string7, string5);
      assertNotSame(string7, string1);
      assertSame(string7, string8);
      assertNotSame(string7, string3);
      assertNotSame(string7, string6);
      assertNotSame(string7, string2);
      assertNotSame(string7, string4);
      assertNotSame(string8, string2);
      assertNotSame(string8, string5);
      assertNotSame(string8, string3);
      assertNotSame(string8, string0);
      assertNotSame(string8, string1);
      assertNotSame(string8, string6);
      assertNotSame(string8, string4);
      assertSame(string8, string7);
      assertEquals("-#gp*\\", string8);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string4));
      
      String string9 = "org.eclipse.jgit.storage.file.WindowCursor";
      // Undeclared exception!
      try { 
        slimTableFactory0.makeSlimTable(htmlTable0, string9, slimTestContextImpl0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 11000)
  public void test34()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      assertNotNull(slimTableFactory0);
      
      String string0 = "darbb3>rJ+1i;*_Dn(";
      TableTag tableTag0 = new TableTag();
      assertNotNull(tableTag0);
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      
      Class<? extends SlimTable> class0 = slimTableFactory0.getTableType(string0);
      assertNull(class0);
      
      Lexer lexer0 = new Lexer(string0);
      assertNotNull(lexer0);
      assertEquals(2.0, Lexer.VERSION_NUMBER, 0.01);
      assertTrue(Lexer.STRICT_REMARKS);
      assertEquals(0, lexer0.getPosition());
      assertEquals("2.0 (Release Build Sep 17, 2006)", lexer0.getVersion());
      
      Parser parser0 = new Parser(lexer0);
      assertNotNull(parser0);
      assertEquals(2.0, Lexer.VERSION_NUMBER, 0.01);
      assertTrue(Lexer.STRICT_REMARKS);
      assertEquals(2.0, Parser.VERSION_NUMBER, 0.01);
      assertEquals(0, lexer0.getPosition());
      assertEquals("2.0 (Release Build Sep 17, 2006)", lexer0.getVersion());
      assertEquals("2.0 (Release Build Sep 17, 2006)", parser0.getVersion());
      assertNull(parser0.getURL());
      assertEquals(2.0, parser0.getVersionNumber(), 0.01);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = true;
      boolean boolean1 = FileSystemHandling.setPermissions(evoSuiteFile0, lexer0.STRICT_REMARKS, lexer0.STRICT_REMARKS, boolean0);
      assertEquals(2.0, Lexer.VERSION_NUMBER, 0.01);
      assertTrue(Lexer.STRICT_REMARKS);
      assertFalse(boolean1);
      assertEquals(0, lexer0.getPosition());
      assertEquals("2.0 (Release Build Sep 17, 2006)", lexer0.getVersion());
      assertFalse(boolean1 == boolean0);
      
      AndFilter andFilter0 = new AndFilter();
      assertNotNull(andFilter0);
      
      NodeList nodeList0 = parser0.extractAllNodesThatMatch(andFilter0);
      assertNotNull(nodeList0);
      assertEquals(2.0, Lexer.VERSION_NUMBER, 0.01);
      assertTrue(Lexer.STRICT_REMARKS);
      assertEquals(2.0, Parser.VERSION_NUMBER, 0.01);
      assertEquals("2.0 (Release Build Sep 17, 2006)", lexer0.getVersion());
      assertEquals(19, lexer0.getPosition());
      assertEquals("2.0 (Release Build Sep 17, 2006)", parser0.getVersion());
      assertNull(parser0.getURL());
      assertEquals(2.0, parser0.getVersionNumber(), 0.01);
      
      tableTag0.setChildren(nodeList0);
      assertEquals(2.0, Lexer.VERSION_NUMBER, 0.01);
      assertTrue(Lexer.STRICT_REMARKS);
      assertEquals(2.0, Parser.VERSION_NUMBER, 0.01);
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals("2.0 (Release Build Sep 17, 2006)", lexer0.getVersion());
      assertEquals(19, lexer0.getPosition());
      assertEquals("2.0 (Release Build Sep 17, 2006)", parser0.getVersion());
      assertNull(parser0.getURL());
      assertEquals(2.0, parser0.getVersionNumber(), 0.01);
      
      HtmlTable htmlTable0 = new HtmlTable(tableTag0);
      assertNotNull(htmlTable0);
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals(0, htmlTable0.getRowCount());
      
      SlimTable slimTable0 = slimTableFactory0.parseDefineTableTypeTable(htmlTable0);
      assertNull(slimTable0);
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals(0, htmlTable0.getRowCount());
      
      String string1 = slimTableFactory0.makeTableType(string0);
      assertNotNull(string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("darbb3>rJ+1i;*_Dn(", string1);
      
      Class<? extends SlimTable> class1 = slimTableFactory0.getTableType(string0);
      assertNull(class1);
      assertSame(string0, string1);
      
      String string2 = slimTableFactory0.getFullTableName(string0);
      assertNotNull(string2);
      assertSame(string2, string1);
      assertSame(string2, string0);
      assertSame(string0, string1);
      assertSame(string0, string2);
      assertEquals("darbb3>rJ+1i;*_Dn(", string2);
      
      String string3 = "ashO";
      String string4 = slimTableFactory0.makeTableType(string3);
      assertNotNull(string4);
      assertNotSame(string3, string4);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string4, string2);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string3);
      assertEquals("hO", string4);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      
      SlimTable slimTable1 = slimTableFactory0.parseDefineTableTypeTable(htmlTable0);
      assertNull(slimTable1);
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals(0, htmlTable0.getRowCount());
      
      String string5 = "asM| #hawl";
      Class<? extends SlimTable> class2 = slimTableFactory0.getTableType(string5);
      assertNull(class2);
      assertNotSame(string5, string4);
      assertNotSame(string5, string3);
      assertNotSame(string5, string2);
      assertNotSame(string5, string1);
      assertNotSame(string5, string0);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      
      String string6 = "-#gp*xE";
      SlimTestContextImpl slimTestContextImpl0 = new SlimTestContextImpl();
      assertNotNull(slimTestContextImpl0);
      
      String string7 = "u4b+z^-@ss^d}v";
      String string8 = "org.eclipse.jgit.diff.DiffAlgorithm$SupportedAlgorithm";
      ScenarioTable scenarioTable0 = slimTestContextImpl0.getScenario(string8);
      assertNull(scenarioTable0);
      assertNotSame(string8, string7);
      assertNotSame(string8, string4);
      assertNotSame(string8, string0);
      assertNotSame(string8, string1);
      assertNotSame(string8, string2);
      assertNotSame(string8, string3);
      assertNotSame(string8, string5);
      assertNotSame(string8, string6);
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string6));
      
      slimTestContextImpl0.addScenario(string7, scenarioTable0);
      assertNotSame(string7, string1);
      assertNotSame(string7, string0);
      assertNotSame(string7, string5);
      assertNotSame(string7, string2);
      assertNotSame(string7, string8);
      assertNotSame(string7, string6);
      assertNotSame(string7, string3);
      assertNotSame(string7, string4);
      assertNotSame(string8, string7);
      assertNotSame(string8, string4);
      assertNotSame(string8, string0);
      assertNotSame(string8, string1);
      assertNotSame(string8, string2);
      assertNotSame(string8, string3);
      assertNotSame(string8, string5);
      assertNotSame(string8, string6);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string8));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string6));
      
      SlimTable slimTable2 = slimTableFactory0.newTableForType(class2, htmlTable0, string6, slimTestContextImpl0);
      assertNotNull(slimTable2);
      assertNotSame(string5, string6);
      assertNotSame(string5, string8);
      assertNotSame(string5, string4);
      assertNotSame(string5, string7);
      assertNotSame(string5, string2);
      assertNotSame(string5, string3);
      assertNotSame(string5, string1);
      assertNotSame(string5, string0);
      assertNotSame(string6, string5);
      assertNotSame(string6, string4);
      assertNotSame(string6, string7);
      assertNotSame(string6, string2);
      assertNotSame(string6, string0);
      assertNotSame(string6, string8);
      assertNotSame(string6, string3);
      assertNotSame(string6, string1);
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals("UnknownTableType_-#gp*xE", slimTable2.getTableName());
      assertEquals(0, htmlTable0.getRowCount());
      assertFalse(string5.equals((Object)string6));
      assertFalse(string5.equals((Object)string8));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string7));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string7));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string8));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      
      int int0 = 1327;
      // Undeclared exception!
      try { 
        slimTableFactory0.parseDefineTableTypeRow(htmlTable0, int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1327, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 11000)
  public void test35()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      assertNotNull(slimTableFactory0);
      
      Map<String, String> map0 = null;
      slimTableFactory0.tableTypeArrays = map0;
      // Undeclared exception!
      try { 
        slimTableFactory0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 11000)
  public void test36()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      assertNotNull(slimTableFactory0);
      
      String string0 = "darbb3>rJ+1i;*_Dn(";
      TableTag tableTag0 = new TableTag();
      assertNotNull(tableTag0);
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals("TABLE", tableTag0.getRawTagName());
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean0);
      
      Class<? extends SlimTable> class0 = slimTableFactory0.getTableType(string0);
      assertNull(class0);
      
      Lexer lexer0 = new Lexer(string0);
      assertNotNull(lexer0);
      assertEquals(2.0, Lexer.VERSION_NUMBER, 0.01);
      assertTrue(Lexer.STRICT_REMARKS);
      assertEquals(0, lexer0.getPosition());
      assertEquals("2.0 (Release Build Sep 17, 2006)", lexer0.getVersion());
      
      Parser parser0 = new Parser(lexer0);
      assertNotNull(parser0);
      assertEquals(2.0, Lexer.VERSION_NUMBER, 0.01);
      assertTrue(Lexer.STRICT_REMARKS);
      assertEquals(2.0, Parser.VERSION_NUMBER, 0.01);
      assertEquals(0, lexer0.getPosition());
      assertEquals("2.0 (Release Build Sep 17, 2006)", lexer0.getVersion());
      assertEquals("2.0 (Release Build Sep 17, 2006)", parser0.getVersion());
      assertEquals(2.0, parser0.getVersionNumber(), 0.01);
      assertNull(parser0.getURL());
      
      EvoSuiteFile evoSuiteFile1 = null;
      boolean boolean1 = true;
      boolean boolean2 = FileSystemHandling.setPermissions(evoSuiteFile1, lexer0.STRICT_REMARKS, lexer0.STRICT_REMARKS, boolean1);
      assertEquals(2.0, Lexer.VERSION_NUMBER, 0.01);
      assertTrue(Lexer.STRICT_REMARKS);
      assertFalse(boolean2);
      assertEquals(0, lexer0.getPosition());
      assertEquals("2.0 (Release Build Sep 17, 2006)", lexer0.getVersion());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      AndFilter andFilter0 = new AndFilter();
      assertNotNull(andFilter0);
      
      NodeList nodeList0 = parser0.extractAllNodesThatMatch(andFilter0);
      assertNotNull(nodeList0);
      assertEquals(2.0, Lexer.VERSION_NUMBER, 0.01);
      assertTrue(Lexer.STRICT_REMARKS);
      assertEquals(2.0, Parser.VERSION_NUMBER, 0.01);
      assertEquals("2.0 (Release Build Sep 17, 2006)", lexer0.getVersion());
      assertEquals(19, lexer0.getPosition());
      assertEquals("2.0 (Release Build Sep 17, 2006)", parser0.getVersion());
      assertEquals(2.0, parser0.getVersionNumber(), 0.01);
      assertNull(parser0.getURL());
      
      tableTag0.setChildren(nodeList0);
      assertEquals(2.0, Lexer.VERSION_NUMBER, 0.01);
      assertTrue(Lexer.STRICT_REMARKS);
      assertEquals(2.0, Parser.VERSION_NUMBER, 0.01);
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals("2.0 (Release Build Sep 17, 2006)", lexer0.getVersion());
      assertEquals(19, lexer0.getPosition());
      assertEquals("2.0 (Release Build Sep 17, 2006)", parser0.getVersion());
      assertEquals(2.0, parser0.getVersionNumber(), 0.01);
      assertNull(parser0.getURL());
      
      HtmlTable htmlTable0 = new HtmlTable(tableTag0);
      assertNotNull(htmlTable0);
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals(0, htmlTable0.getRowCount());
      
      SlimTable slimTable0 = slimTableFactory0.parseDefineTableTypeTable(htmlTable0);
      assertNull(slimTable0);
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals(0, htmlTable0.getRowCount());
      
      String string1 = slimTableFactory0.makeTableType(string0);
      assertNotNull(string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("darbb3>rJ+1i;*_Dn(", string1);
      
      Class<? extends SlimTable> class1 = slimTableFactory0.getTableType(string0);
      assertNull(class1);
      assertSame(string0, string1);
      
      String string2 = slimTableFactory0.getFullTableName(string0);
      assertNotNull(string2);
      assertSame(string0, string2);
      assertSame(string0, string1);
      assertSame(string2, string1);
      assertSame(string2, string0);
      assertEquals("darbb3>rJ+1i;*_Dn(", string2);
      
      String string3 = "ashO";
      String string4 = slimTableFactory0.makeTableType(string3);
      assertNotNull(string4);
      assertNotSame(string3, string1);
      assertNotSame(string3, string4);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string4, string3);
      assertNotSame(string4, string2);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertEquals("hO", string4);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      
      SlimTable slimTable1 = slimTableFactory0.parseDefineTableTypeTable(htmlTable0);
      assertNull(slimTable1);
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals(0, htmlTable0.getRowCount());
      
      String string5 = "asM| #hawl";
      Class<? extends SlimTable> class2 = slimTableFactory0.getTableType(string5);
      assertNull(class2);
      assertNotSame(string5, string0);
      assertNotSame(string5, string1);
      assertNotSame(string5, string2);
      assertNotSame(string5, string3);
      assertNotSame(string5, string4);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      
      String string6 = "-#gp*xE";
      String string7 = slimTableFactory0.makeTableType(string6);
      assertNotNull(string7);
      assertNotSame(string6, string1);
      assertNotSame(string6, string0);
      assertSame(string6, string7);
      assertNotSame(string6, string4);
      assertNotSame(string6, string3);
      assertNotSame(string6, string5);
      assertNotSame(string6, string2);
      assertNotSame(string7, string4);
      assertSame(string7, string6);
      assertNotSame(string7, string5);
      assertNotSame(string7, string2);
      assertNotSame(string7, string3);
      assertNotSame(string7, string1);
      assertNotSame(string7, string0);
      assertEquals("-#gp*xE", string7);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      
      int int0 = (-1692);
      // Undeclared exception!
      try { 
        slimTableFactory0.parseDefineTableTypeRow(htmlTable0, int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 11000)
  public void test37()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      assertNotNull(slimTableFactory0);
      
      String string0 = "darbb3>rJ+1i;*_Dn(";
      TableTag tableTag0 = new TableTag();
      assertNotNull(tableTag0);
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals("TABLE", tableTag0.getRawTagName());
      
      EvoSuiteFile evoSuiteFile0 = null;
      Class<? extends SlimTable> class0 = slimTableFactory0.getTableType(string0);
      assertNull(class0);
      
      Lexer lexer0 = new Lexer();
      assertNotNull(lexer0);
      assertEquals(2.0, Lexer.VERSION_NUMBER, 0.01);
      assertTrue(Lexer.STRICT_REMARKS);
      assertEquals(0, lexer0.getPosition());
      assertEquals("2.0 (Release Build Sep 17, 2006)", lexer0.getVersion());
      
      Parser parser0 = new Parser(lexer0);
      assertNotNull(parser0);
      assertEquals(2.0, Lexer.VERSION_NUMBER, 0.01);
      assertTrue(Lexer.STRICT_REMARKS);
      assertEquals(2.0, Parser.VERSION_NUMBER, 0.01);
      assertEquals(0, lexer0.getPosition());
      assertEquals("2.0 (Release Build Sep 17, 2006)", lexer0.getVersion());
      assertNull(parser0.getURL());
      assertEquals(2.0, parser0.getVersionNumber(), 0.01);
      assertEquals("2.0 (Release Build Sep 17, 2006)", parser0.getVersion());
      
      AndFilter andFilter0 = new AndFilter();
      assertNotNull(andFilter0);
      
      NodeList nodeList0 = parser0.extractAllNodesThatMatch(andFilter0);
      assertNotNull(nodeList0);
      assertEquals(2.0, Lexer.VERSION_NUMBER, 0.01);
      assertTrue(Lexer.STRICT_REMARKS);
      assertEquals(2.0, Parser.VERSION_NUMBER, 0.01);
      assertEquals(0, lexer0.getPosition());
      assertEquals("2.0 (Release Build Sep 17, 2006)", lexer0.getVersion());
      assertNull(parser0.getURL());
      assertEquals(2.0, parser0.getVersionNumber(), 0.01);
      assertEquals("2.0 (Release Build Sep 17, 2006)", parser0.getVersion());
      
      tableTag0.setChildren(nodeList0);
      assertEquals(2.0, Lexer.VERSION_NUMBER, 0.01);
      assertTrue(Lexer.STRICT_REMARKS);
      assertEquals(2.0, Parser.VERSION_NUMBER, 0.01);
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals(0, lexer0.getPosition());
      assertEquals("2.0 (Release Build Sep 17, 2006)", lexer0.getVersion());
      assertNull(parser0.getURL());
      assertEquals(2.0, parser0.getVersionNumber(), 0.01);
      assertEquals("2.0 (Release Build Sep 17, 2006)", parser0.getVersion());
      
      HtmlTable htmlTable0 = new HtmlTable(tableTag0);
      assertNotNull(htmlTable0);
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals(0, htmlTable0.getRowCount());
      
      SlimTable slimTable0 = slimTableFactory0.parseDefineTableTypeTable(htmlTable0);
      assertNull(slimTable0);
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals(0, htmlTable0.getRowCount());
      
      List<String> list0 = ResourceBundle.Control.FORMAT_PROPERTIES;
      assertNotNull(list0);
      assertFalse(list0.contains(string0));
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      
      int int0 = htmlTable0.addRow(list0);
      assertFalse(list0.contains(string0));
      assertEquals(0, int0);
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals(1, htmlTable0.getRowCount());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      
      String string1 = slimTableFactory0.getFullTableName(string0);
      assertNotNull(string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("darbb3>rJ+1i;*_Dn(", string1);
      
      String string2 = "ashO";
      String string3 = slimTableFactory0.makeTableType(string2);
      assertNotNull(string3);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertEquals("hO", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      SlimTable slimTable1 = slimTableFactory0.parseDefineTableTypeTable(htmlTable0);
      assertNull(slimTable1);
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals(1, htmlTable0.getRowCount());
      
      String string4 = "asM| #hawl";
      String string5 = "-#gp*xE";
      String string6 = slimTableFactory0.getFullTableName(string2);
      assertNotNull(string6);
      assertNotSame(string6, string5);
      assertNotSame(string6, string4);
      assertNotSame(string6, string3);
      assertNotSame(string6, string1);
      assertNotSame(string6, string0);
      assertSame(string6, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertNotSame(string2, string4);
      assertNotSame(string2, string5);
      assertSame(string2, string6);
      assertNotSame(string2, string1);
      assertEquals("ashO", string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string1));
      
      SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
      assertNotNull(slimTableFactory1);
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertNotSame(slimTableFactory1, slimTableFactory0);
      assertFalse(slimTableFactory1.equals((Object)slimTableFactory0));
  }

  @Test(timeout = 11000)
  public void test38()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      assertNotNull(slimTableFactory0);
      
      String string0 = "darbb3>rJ+1i;*_Dn(";
      TableTag tableTag0 = new TableTag();
      assertNotNull(tableTag0);
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEndTag());
      
      EvoSuiteFile evoSuiteFile0 = null;
      Class<? extends SlimTable> class0 = slimTableFactory0.getTableType(string0);
      assertNull(class0);
      
      Lexer lexer0 = new Lexer();
      assertNotNull(lexer0);
      assertTrue(Lexer.STRICT_REMARKS);
      assertEquals(2.0, Lexer.VERSION_NUMBER, 0.01);
      assertEquals("2.0 (Release Build Sep 17, 2006)", lexer0.getVersion());
      assertEquals(0, lexer0.getPosition());
      
      Parser parser0 = new Parser(lexer0);
      assertNotNull(parser0);
      assertTrue(Lexer.STRICT_REMARKS);
      assertEquals(2.0, Lexer.VERSION_NUMBER, 0.01);
      assertEquals(2.0, Parser.VERSION_NUMBER, 0.01);
      assertEquals("2.0 (Release Build Sep 17, 2006)", lexer0.getVersion());
      assertEquals(0, lexer0.getPosition());
      assertEquals(2.0, parser0.getVersionNumber(), 0.01);
      assertNull(parser0.getURL());
      assertEquals("2.0 (Release Build Sep 17, 2006)", parser0.getVersion());
      
      AndFilter andFilter0 = new AndFilter();
      assertNotNull(andFilter0);
      
      NodeList nodeList0 = parser0.extractAllNodesThatMatch(andFilter0);
      assertNotNull(nodeList0);
      assertTrue(Lexer.STRICT_REMARKS);
      assertEquals(2.0, Lexer.VERSION_NUMBER, 0.01);
      assertEquals(2.0, Parser.VERSION_NUMBER, 0.01);
      assertEquals("2.0 (Release Build Sep 17, 2006)", lexer0.getVersion());
      assertEquals(0, lexer0.getPosition());
      assertEquals(2.0, parser0.getVersionNumber(), 0.01);
      assertNull(parser0.getURL());
      assertEquals("2.0 (Release Build Sep 17, 2006)", parser0.getVersion());
      
      tableTag0.setChildren(nodeList0);
      assertTrue(Lexer.STRICT_REMARKS);
      assertEquals(2.0, Lexer.VERSION_NUMBER, 0.01);
      assertEquals(2.0, Parser.VERSION_NUMBER, 0.01);
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals("2.0 (Release Build Sep 17, 2006)", lexer0.getVersion());
      assertEquals(0, lexer0.getPosition());
      assertEquals(2.0, parser0.getVersionNumber(), 0.01);
      assertNull(parser0.getURL());
      assertEquals("2.0 (Release Build Sep 17, 2006)", parser0.getVersion());
      
      HtmlTable htmlTable0 = new HtmlTable(tableTag0);
      assertNotNull(htmlTable0);
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals(0, htmlTable0.getRowCount());
      
      SlimTable slimTable0 = slimTableFactory0.parseDefineTableTypeTable(htmlTable0);
      assertNull(slimTable0);
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals(0, htmlTable0.getRowCount());
      
      List<String> list0 = ResourceBundle.Control.FORMAT_PROPERTIES;
      assertNotNull(list0);
      assertFalse(list0.contains(string0));
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      
      int int0 = htmlTable0.addRow(list0);
      assertFalse(list0.contains(string0));
      assertEquals(0, int0);
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals(1, htmlTable0.getRowCount());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      
      String string1 = slimTableFactory0.getFullTableName(string0);
      assertNotNull(string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("darbb3>rJ+1i;*_Dn(", string1);
      
      String string2 = "ashO";
      String string3 = slimTableFactory0.makeTableType(string2);
      assertNotNull(string3);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertEquals("hO", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      SlimTable slimTable1 = slimTableFactory0.parseDefineTableTypeTable(htmlTable0);
      assertNull(slimTable1);
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals(1, htmlTable0.getRowCount());
      
      String string4 = "asM| #qhawl";
      String string5 = "-#gp*xE";
      String string6 = slimTableFactory0.getFullTableName(string2);
      assertNotNull(string6);
      assertNotSame(string6, string4);
      assertNotSame(string6, string1);
      assertNotSame(string6, string0);
      assertNotSame(string6, string5);
      assertNotSame(string6, string3);
      assertSame(string6, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string5);
      assertNotSame(string2, string4);
      assertNotSame(string2, string3);
      assertSame(string2, string6);
      assertEquals("ashO", string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string3));
      
      SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
      assertNotNull(slimTableFactory1);
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertNotSame(slimTableFactory1, slimTableFactory0);
      assertFalse(slimTableFactory1.equals((Object)slimTableFactory0));
      
      SlimTestContextImpl slimTestContextImpl0 = new SlimTestContextImpl();
      assertNotNull(slimTestContextImpl0);
      
      ScenarioTableExtensionTest.AutoArgScenarioTable scenarioTableExtensionTest_AutoArgScenarioTable0 = new ScenarioTableExtensionTest.AutoArgScenarioTable(htmlTable0, parser0.VERSION_DATE, slimTestContextImpl0);
      assertNotNull(scenarioTableExtensionTest_AutoArgScenarioTable0);
      assertTrue(Lexer.STRICT_REMARKS);
      assertEquals(2.0, Lexer.VERSION_NUMBER, 0.01);
      assertEquals(2.0, Parser.VERSION_NUMBER, 0.01);
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals("2.0 (Release Build Sep 17, 2006)", lexer0.getVersion());
      assertEquals(0, lexer0.getPosition());
      assertEquals(2.0, parser0.getVersionNumber(), 0.01);
      assertNull(parser0.getURL());
      assertEquals("2.0 (Release Build Sep 17, 2006)", parser0.getVersion());
      assertNull(scenarioTableExtensionTest_AutoArgScenarioTable0.getName());
      assertEquals("scenarioTable_Sep 17, 2006", scenarioTableExtensionTest_AutoArgScenarioTable0.getTableName());
      assertFalse(scenarioTableExtensionTest_AutoArgScenarioTable0.isParameterized());
      assertEquals(1, htmlTable0.getRowCount());
      
      ScenarioTable.ScenarioTestContext scenarioTable_ScenarioTestContext0 = scenarioTableExtensionTest_AutoArgScenarioTable0.new ScenarioTestContext(slimTestContextImpl0);
      assertNotNull(scenarioTable_ScenarioTestContext0);
      assertTrue(Lexer.STRICT_REMARKS);
      assertEquals(2.0, Lexer.VERSION_NUMBER, 0.01);
      assertEquals(2.0, Parser.VERSION_NUMBER, 0.01);
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals("2.0 (Release Build Sep 17, 2006)", lexer0.getVersion());
      assertEquals(0, lexer0.getPosition());
      assertEquals(2.0, parser0.getVersionNumber(), 0.01);
      assertNull(parser0.getURL());
      assertEquals("2.0 (Release Build Sep 17, 2006)", parser0.getVersion());
      assertNull(scenarioTableExtensionTest_AutoArgScenarioTable0.getName());
      assertEquals("scenarioTable_Sep 17, 2006", scenarioTableExtensionTest_AutoArgScenarioTable0.getTableName());
      assertFalse(scenarioTableExtensionTest_AutoArgScenarioTable0.isParameterized());
      assertEquals(1, htmlTable0.getRowCount());
      
      SlimTable slimTable2 = slimTableFactory1.makeSlimTable(htmlTable0, parser0.VERSION_DATE, scenarioTable_ScenarioTestContext0);
      assertNotNull(slimTable2);
      assertTrue(Lexer.STRICT_REMARKS);
      assertEquals(2.0, Lexer.VERSION_NUMBER, 0.01);
      assertEquals(2.0, Parser.VERSION_NUMBER, 0.01);
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertNotSame(slimTableFactory1, slimTableFactory0);
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals("2.0 (Release Build Sep 17, 2006)", lexer0.getVersion());
      assertEquals(0, lexer0.getPosition());
      assertEquals(2.0, parser0.getVersionNumber(), 0.01);
      assertNull(parser0.getURL());
      assertEquals("2.0 (Release Build Sep 17, 2006)", parser0.getVersion());
      assertNull(scenarioTableExtensionTest_AutoArgScenarioTable0.getName());
      assertEquals("scenarioTable_Sep 17, 2006", scenarioTableExtensionTest_AutoArgScenarioTable0.getTableName());
      assertFalse(scenarioTableExtensionTest_AutoArgScenarioTable0.isParameterized());
      assertEquals("decisionTable_Sep 17, 2006", slimTable2.getTableName());
      assertEquals(1, htmlTable0.getRowCount());
      assertFalse(slimTableFactory0.equals((Object)slimTableFactory1));
      assertFalse(slimTableFactory1.equals((Object)slimTableFactory0));
      
      slimTableFactory1.parseDefineTableTypeRow(htmlTable0, int0);
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertNotSame(slimTableFactory1, slimTableFactory0);
      assertFalse(list0.contains(string5));
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals(1, htmlTable0.getRowCount());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(slimTableFactory0.equals((Object)slimTableFactory1));
      assertFalse(slimTableFactory1.equals((Object)slimTableFactory0));
      
      String string7 = "Os^jUDcGGwE,@2/a`";
      SlimTable slimTable3 = slimTableFactory1.newTableForType(class0, htmlTable0, string7, scenarioTable_ScenarioTestContext0);
      assertNotNull(slimTable3);
      assertTrue(Lexer.STRICT_REMARKS);
      assertEquals(2.0, Lexer.VERSION_NUMBER, 0.01);
      assertEquals(2.0, Parser.VERSION_NUMBER, 0.01);
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertNotSame(string0, string6);
      assertNotSame(string0, string5);
      assertSame(string0, string1);
      assertNotSame(string0, string7);
      assertNotSame(slimTableFactory1, slimTableFactory0);
      assertNotSame(string7, string3);
      assertNotSame(string7, string4);
      assertNotSame(string7, string2);
      assertNotSame(string7, string6);
      assertNotSame(string7, string5);
      assertNotSame(string7, string0);
      assertNotSame(string7, string1);
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals("2.0 (Release Build Sep 17, 2006)", lexer0.getVersion());
      assertEquals(0, lexer0.getPosition());
      assertEquals(2.0, parser0.getVersionNumber(), 0.01);
      assertNull(parser0.getURL());
      assertEquals("2.0 (Release Build Sep 17, 2006)", parser0.getVersion());
      assertNull(scenarioTableExtensionTest_AutoArgScenarioTable0.getName());
      assertEquals("scenarioTable_Sep 17, 2006", scenarioTableExtensionTest_AutoArgScenarioTable0.getTableName());
      assertFalse(scenarioTableExtensionTest_AutoArgScenarioTable0.isParameterized());
      assertEquals(1, htmlTable0.getRowCount());
      assertEquals("UnknownTableType_Os^jUDcGGwE,@2/a`", slimTable3.getTableName());
      assertFalse(slimTableFactory0.equals((Object)slimTableFactory1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string7));
      assertFalse(slimTableFactory1.equals((Object)slimTableFactory0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
  }

  @Test(timeout = 11000)
  public void test39()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      assertNotNull(slimTableFactory0);
      
      String string0 = "darbb3>rJ+1i;*_Dn(";
      TableTag tableTag0 = new TableTag();
      assertNotNull(tableTag0);
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      
      EvoSuiteFile evoSuiteFile0 = null;
      Class<? extends SlimTable> class0 = slimTableFactory0.getTableType(string0);
      assertNull(class0);
      
      Lexer lexer0 = new Lexer();
      assertNotNull(lexer0);
      assertEquals(2.0, Lexer.VERSION_NUMBER, 0.01);
      assertTrue(Lexer.STRICT_REMARKS);
      assertEquals("2.0 (Release Build Sep 17, 2006)", lexer0.getVersion());
      assertEquals(0, lexer0.getPosition());
      
      Parser parser0 = new Parser(lexer0);
      assertNotNull(parser0);
      assertEquals(2.0, Lexer.VERSION_NUMBER, 0.01);
      assertTrue(Lexer.STRICT_REMARKS);
      assertEquals(2.0, Parser.VERSION_NUMBER, 0.01);
      assertEquals("2.0 (Release Build Sep 17, 2006)", lexer0.getVersion());
      assertEquals(0, lexer0.getPosition());
      assertEquals("2.0 (Release Build Sep 17, 2006)", parser0.getVersion());
      assertNull(parser0.getURL());
      assertEquals(2.0, parser0.getVersionNumber(), 0.01);
      
      AndFilter andFilter0 = new AndFilter();
      assertNotNull(andFilter0);
      
      NodeList nodeList0 = parser0.extractAllNodesThatMatch(andFilter0);
      assertNotNull(nodeList0);
      assertEquals(2.0, Lexer.VERSION_NUMBER, 0.01);
      assertTrue(Lexer.STRICT_REMARKS);
      assertEquals(2.0, Parser.VERSION_NUMBER, 0.01);
      assertEquals("2.0 (Release Build Sep 17, 2006)", lexer0.getVersion());
      assertEquals(0, lexer0.getPosition());
      assertEquals("2.0 (Release Build Sep 17, 2006)", parser0.getVersion());
      assertNull(parser0.getURL());
      assertEquals(2.0, parser0.getVersionNumber(), 0.01);
      
      tableTag0.setChildren(nodeList0);
      assertEquals(2.0, Lexer.VERSION_NUMBER, 0.01);
      assertTrue(Lexer.STRICT_REMARKS);
      assertEquals(2.0, Parser.VERSION_NUMBER, 0.01);
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals("2.0 (Release Build Sep 17, 2006)", lexer0.getVersion());
      assertEquals(0, lexer0.getPosition());
      assertEquals("2.0 (Release Build Sep 17, 2006)", parser0.getVersion());
      assertNull(parser0.getURL());
      assertEquals(2.0, parser0.getVersionNumber(), 0.01);
      
      HtmlTable htmlTable0 = new HtmlTable(tableTag0);
      assertNotNull(htmlTable0);
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals(0, htmlTable0.getRowCount());
      
      SlimTable slimTable0 = slimTableFactory0.parseDefineTableTypeTable(htmlTable0);
      assertNull(slimTable0);
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals(0, htmlTable0.getRowCount());
      
      List<String> list0 = ResourceBundle.Control.FORMAT_PROPERTIES;
      assertNotNull(list0);
      assertFalse(list0.contains(string0));
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      
      int int0 = htmlTable0.addRow(list0);
      assertFalse(list0.contains(string0));
      assertEquals(0, int0);
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals(1, htmlTable0.getRowCount());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      
      String string1 = slimTableFactory0.getFullTableName(string0);
      assertNotNull(string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("darbb3>rJ+1i;*_Dn(", string1);
      
      String string2 = "ashO";
      String string3 = slimTableFactory0.makeTableType(string2);
      assertNotNull(string3);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertEquals("hO", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      int int1 = htmlTable0.addRow(list0);
      assertFalse(list0.contains(string0));
      assertEquals(1, int1);
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals(2, htmlTable0.getRowCount());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(int1 == int0);
      
      SlimTable slimTable1 = slimTableFactory0.parseDefineTableTypeTable(htmlTable0);
      assertNull(slimTable1);
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals(2, htmlTable0.getRowCount());
      
      String string4 = "asM| #qhawl";
      String string5 = "-#gp*xE";
      String string6 = slimTableFactory0.getFullTableName(string2);
      assertNotNull(string6);
      assertNotSame(string6, string4);
      assertNotSame(string6, string5);
      assertSame(string6, string2);
      assertNotSame(string6, string1);
      assertNotSame(string6, string0);
      assertNotSame(string6, string3);
      assertNotSame(string2, string5);
      assertSame(string2, string6);
      assertNotSame(string2, string3);
      assertNotSame(string2, string4);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertEquals("ashO", string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
      assertNotNull(slimTableFactory1);
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertNotSame(slimTableFactory1, slimTableFactory0);
      assertFalse(slimTableFactory1.equals((Object)slimTableFactory0));
      
      SlimTestContextImpl slimTestContextImpl0 = new SlimTestContextImpl();
      assertNotNull(slimTestContextImpl0);
      
      ScenarioTableExtensionTest.AutoArgScenarioTable scenarioTableExtensionTest_AutoArgScenarioTable0 = new ScenarioTableExtensionTest.AutoArgScenarioTable(htmlTable0, parser0.VERSION_DATE, slimTestContextImpl0);
      assertNotNull(scenarioTableExtensionTest_AutoArgScenarioTable0);
      assertEquals(2.0, Lexer.VERSION_NUMBER, 0.01);
      assertTrue(Lexer.STRICT_REMARKS);
      assertEquals(2.0, Parser.VERSION_NUMBER, 0.01);
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals("2.0 (Release Build Sep 17, 2006)", lexer0.getVersion());
      assertEquals(0, lexer0.getPosition());
      assertEquals("2.0 (Release Build Sep 17, 2006)", parser0.getVersion());
      assertNull(parser0.getURL());
      assertEquals(2.0, parser0.getVersionNumber(), 0.01);
      assertEquals("scenarioTable_Sep 17, 2006", scenarioTableExtensionTest_AutoArgScenarioTable0.getTableName());
      assertFalse(scenarioTableExtensionTest_AutoArgScenarioTable0.isParameterized());
      assertNull(scenarioTableExtensionTest_AutoArgScenarioTable0.getName());
      assertEquals(2, htmlTable0.getRowCount());
      
      ScenarioTable.ScenarioTestContext scenarioTable_ScenarioTestContext0 = scenarioTableExtensionTest_AutoArgScenarioTable0.new ScenarioTestContext(slimTestContextImpl0);
      assertNotNull(scenarioTable_ScenarioTestContext0);
      assertEquals(2.0, Lexer.VERSION_NUMBER, 0.01);
      assertTrue(Lexer.STRICT_REMARKS);
      assertEquals(2.0, Parser.VERSION_NUMBER, 0.01);
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals("2.0 (Release Build Sep 17, 2006)", lexer0.getVersion());
      assertEquals(0, lexer0.getPosition());
      assertEquals("2.0 (Release Build Sep 17, 2006)", parser0.getVersion());
      assertNull(parser0.getURL());
      assertEquals(2.0, parser0.getVersionNumber(), 0.01);
      assertEquals("scenarioTable_Sep 17, 2006", scenarioTableExtensionTest_AutoArgScenarioTable0.getTableName());
      assertFalse(scenarioTableExtensionTest_AutoArgScenarioTable0.isParameterized());
      assertNull(scenarioTableExtensionTest_AutoArgScenarioTable0.getName());
      assertEquals(2, htmlTable0.getRowCount());
      
      SlimTable slimTable2 = slimTableFactory1.makeSlimTable(htmlTable0, parser0.VERSION_DATE, scenarioTable_ScenarioTestContext0);
      assertNotNull(slimTable2);
      assertEquals(2.0, Lexer.VERSION_NUMBER, 0.01);
      assertTrue(Lexer.STRICT_REMARKS);
      assertEquals(2.0, Parser.VERSION_NUMBER, 0.01);
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertNotSame(slimTableFactory1, slimTableFactory0);
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals("2.0 (Release Build Sep 17, 2006)", lexer0.getVersion());
      assertEquals(0, lexer0.getPosition());
      assertEquals("2.0 (Release Build Sep 17, 2006)", parser0.getVersion());
      assertNull(parser0.getURL());
      assertEquals(2.0, parser0.getVersionNumber(), 0.01);
      assertEquals("scenarioTable_Sep 17, 2006", scenarioTableExtensionTest_AutoArgScenarioTable0.getTableName());
      assertFalse(scenarioTableExtensionTest_AutoArgScenarioTable0.isParameterized());
      assertNull(scenarioTableExtensionTest_AutoArgScenarioTable0.getName());
      assertEquals("decisionTable_Sep 17, 2006", slimTable2.getTableName());
      assertEquals(2, htmlTable0.getRowCount());
      assertFalse(slimTableFactory0.equals((Object)slimTableFactory1));
      assertFalse(slimTableFactory1.equals((Object)slimTableFactory0));
  }

  @Test(timeout = 11000)
  public void test40()  throws Throwable  {
      String string0 = "assceF:Qnario";
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      assertNotNull(slimTableFactory0);
      
      SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
      assertNotNull(slimTableFactory1);
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertNotSame(slimTableFactory1, slimTableFactory0);
      assertFalse(slimTableFactory1.equals((Object)slimTableFactory0));
      
      String string1 = slimTableFactory0.makeTableType(string0);
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertNotSame(string1, string0);
      assertEquals("sceF Qnario", string1);
      assertFalse(slimTableFactory0.equals((Object)slimTableFactory1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 11000)
  public void test41()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      assertNotNull(slimTableFactory0);
      
      TableTag tableTag0 = new TableTag();
      assertNotNull(tableTag0);
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      
      EvoSuiteFile evoSuiteFile0 = null;
      Lexer lexer0 = new Lexer();
      assertNotNull(lexer0);
      assertTrue(Lexer.STRICT_REMARKS);
      assertEquals(2.0, Lexer.VERSION_NUMBER, 0.01);
      assertEquals(0, lexer0.getPosition());
      assertEquals("2.0 (Release Build Sep 17, 2006)", lexer0.getVersion());
      
      Parser parser0 = new Parser(lexer0);
      assertNotNull(parser0);
      assertTrue(Lexer.STRICT_REMARKS);
      assertEquals(2.0, Lexer.VERSION_NUMBER, 0.01);
      assertEquals(2.0, Parser.VERSION_NUMBER, 0.01);
      assertEquals(0, lexer0.getPosition());
      assertEquals("2.0 (Release Build Sep 17, 2006)", lexer0.getVersion());
      assertEquals("2.0 (Release Build Sep 17, 2006)", parser0.getVersion());
      assertEquals(2.0, parser0.getVersionNumber(), 0.01);
      assertNull(parser0.getURL());
      
      AndFilter andFilter0 = new AndFilter();
      assertNotNull(andFilter0);
      
      NodeList nodeList0 = parser0.extractAllNodesThatMatch(andFilter0);
      assertNotNull(nodeList0);
      assertTrue(Lexer.STRICT_REMARKS);
      assertEquals(2.0, Lexer.VERSION_NUMBER, 0.01);
      assertEquals(2.0, Parser.VERSION_NUMBER, 0.01);
      assertEquals(0, lexer0.getPosition());
      assertEquals("2.0 (Release Build Sep 17, 2006)", lexer0.getVersion());
      assertEquals("2.0 (Release Build Sep 17, 2006)", parser0.getVersion());
      assertEquals(2.0, parser0.getVersionNumber(), 0.01);
      assertNull(parser0.getURL());
      
      tableTag0.setChildren(nodeList0);
      assertTrue(Lexer.STRICT_REMARKS);
      assertEquals(2.0, Lexer.VERSION_NUMBER, 0.01);
      assertEquals(2.0, Parser.VERSION_NUMBER, 0.01);
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals(0, lexer0.getPosition());
      assertEquals("2.0 (Release Build Sep 17, 2006)", lexer0.getVersion());
      assertEquals("2.0 (Release Build Sep 17, 2006)", parser0.getVersion());
      assertEquals(2.0, parser0.getVersionNumber(), 0.01);
      assertNull(parser0.getURL());
      
      HtmlTable htmlTable0 = new HtmlTable(tableTag0);
      assertNotNull(htmlTable0);
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals(0, htmlTable0.getRowCount());
      
      List<String> list0 = ResourceBundle.Control.FORMAT_DEFAULT;
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      
      int int0 = htmlTable0.addRow(list0);
      assertEquals(0, int0);
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals(1, htmlTable0.getRowCount());
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      
      String string0 = "ashO";
      String string1 = slimTableFactory0.makeTableType(string0);
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("hO", string1);
      assertFalse(string1.equals((Object)string0));
      
      int int1 = htmlTable0.addRow(list0);
      assertFalse(list0.contains(string1));
      assertEquals(1, int1);
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals(2, htmlTable0.getRowCount());
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertFalse(int1 == int0);
      
      SlimTable slimTable0 = slimTableFactory0.parseDefineTableTypeTable(htmlTable0);
      assertNull(slimTable0);
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals(2, htmlTable0.getRowCount());
      
      String string2 = "asM| #qhawl";
      slimTableFactory0.parseDefineTableTypeRow(htmlTable0, int1);
      assertFalse(list0.contains(string0));
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals(2, htmlTable0.getRowCount());
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertFalse(int1 == int0);
      
      SlimTableFactory slimTableFactory1 = new SlimTableFactory();
      assertNotNull(slimTableFactory1);
      assertFalse(slimTableFactory1.equals((Object)slimTableFactory0));
      
      SlimTestContextImpl slimTestContextImpl0 = new SlimTestContextImpl();
      assertNotNull(slimTestContextImpl0);
      
      ScenarioTableExtensionTest.AutoArgScenarioTable scenarioTableExtensionTest_AutoArgScenarioTable0 = new ScenarioTableExtensionTest.AutoArgScenarioTable(htmlTable0, parser0.VERSION_DATE, slimTestContextImpl0);
      assertNotNull(scenarioTableExtensionTest_AutoArgScenarioTable0);
      assertTrue(Lexer.STRICT_REMARKS);
      assertEquals(2.0, Lexer.VERSION_NUMBER, 0.01);
      assertEquals(2.0, Parser.VERSION_NUMBER, 0.01);
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals("scenarioTable_Sep 17, 2006", scenarioTableExtensionTest_AutoArgScenarioTable0.getTableName());
      assertNull(scenarioTableExtensionTest_AutoArgScenarioTable0.getName());
      assertFalse(scenarioTableExtensionTest_AutoArgScenarioTable0.isParameterized());
      assertEquals(0, lexer0.getPosition());
      assertEquals("2.0 (Release Build Sep 17, 2006)", lexer0.getVersion());
      assertEquals("2.0 (Release Build Sep 17, 2006)", parser0.getVersion());
      assertEquals(2.0, parser0.getVersionNumber(), 0.01);
      assertNull(parser0.getURL());
      assertEquals(2, htmlTable0.getRowCount());
      
      ScenarioTable.ScenarioTestContext scenarioTable_ScenarioTestContext0 = scenarioTableExtensionTest_AutoArgScenarioTable0.new ScenarioTestContext(slimTestContextImpl0);
      assertNotNull(scenarioTable_ScenarioTestContext0);
      assertTrue(Lexer.STRICT_REMARKS);
      assertEquals(2.0, Lexer.VERSION_NUMBER, 0.01);
      assertEquals(2.0, Parser.VERSION_NUMBER, 0.01);
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals("scenarioTable_Sep 17, 2006", scenarioTableExtensionTest_AutoArgScenarioTable0.getTableName());
      assertNull(scenarioTableExtensionTest_AutoArgScenarioTable0.getName());
      assertFalse(scenarioTableExtensionTest_AutoArgScenarioTable0.isParameterized());
      assertEquals(0, lexer0.getPosition());
      assertEquals("2.0 (Release Build Sep 17, 2006)", lexer0.getVersion());
      assertEquals("2.0 (Release Build Sep 17, 2006)", parser0.getVersion());
      assertEquals(2.0, parser0.getVersionNumber(), 0.01);
      assertNull(parser0.getURL());
      assertEquals(2, htmlTable0.getRowCount());
      
      SlimTable slimTable1 = slimTableFactory1.makeSlimTable(htmlTable0, parser0.VERSION_DATE, scenarioTable_ScenarioTestContext0);
      assertNotNull(slimTable1);
      assertTrue(Lexer.STRICT_REMARKS);
      assertEquals(2.0, Lexer.VERSION_NUMBER, 0.01);
      assertEquals(2.0, Parser.VERSION_NUMBER, 0.01);
      assertNotSame(slimTableFactory1, slimTableFactory0);
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals("scenarioTable_Sep 17, 2006", scenarioTableExtensionTest_AutoArgScenarioTable0.getTableName());
      assertNull(scenarioTableExtensionTest_AutoArgScenarioTable0.getName());
      assertFalse(scenarioTableExtensionTest_AutoArgScenarioTable0.isParameterized());
      assertEquals(0, lexer0.getPosition());
      assertEquals("2.0 (Release Build Sep 17, 2006)", lexer0.getVersion());
      assertEquals("2.0 (Release Build Sep 17, 2006)", parser0.getVersion());
      assertEquals(2.0, parser0.getVersionNumber(), 0.01);
      assertNull(parser0.getURL());
      assertEquals("decisionTable_Sep 17, 2006", slimTable1.getTableName());
      assertEquals(2, htmlTable0.getRowCount());
      assertFalse(slimTableFactory1.equals((Object)slimTableFactory0));
      
      SlimTable slimTable2 = slimTableFactory0.makeSlimTable(htmlTable0, lexer0.VERSION_DATE, scenarioTable_ScenarioTestContext0);
      assertNotNull(slimTable2);
      assertTrue(Lexer.STRICT_REMARKS);
      assertEquals(2.0, Lexer.VERSION_NUMBER, 0.01);
      assertEquals(2.0, Parser.VERSION_NUMBER, 0.01);
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals((-1), tableTag0.getStartPosition());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals("scenarioTable_Sep 17, 2006", scenarioTableExtensionTest_AutoArgScenarioTable0.getTableName());
      assertNull(scenarioTableExtensionTest_AutoArgScenarioTable0.getName());
      assertFalse(scenarioTableExtensionTest_AutoArgScenarioTable0.isParameterized());
      assertEquals(0, lexer0.getPosition());
      assertEquals("2.0 (Release Build Sep 17, 2006)", lexer0.getVersion());
      assertEquals("2.0 (Release Build Sep 17, 2006)", parser0.getVersion());
      assertEquals(2.0, parser0.getVersionNumber(), 0.01);
      assertNull(parser0.getURL());
      assertEquals("UnknownTableType_Sep 17, 2006", slimTable2.getTableName());
      assertEquals(2, htmlTable0.getRowCount());
      assertFalse(slimTableFactory0.equals((Object)slimTableFactory1));
      
      SlimTableFactory slimTableFactory2 = slimTableFactory0.copy();
      assertNotNull(slimTableFactory2);
      assertNotSame(slimTableFactory0, slimTableFactory2);
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertNotSame(slimTableFactory2, slimTableFactory0);
      assertNotSame(slimTableFactory2, slimTableFactory1);
      assertFalse(slimTableFactory0.equals((Object)slimTableFactory1));
      assertFalse(slimTableFactory2.equals((Object)slimTableFactory0));
      assertFalse(slimTableFactory2.equals((Object)slimTableFactory1));
  }

  @Test(timeout = 11000)
  public void test42()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      assertNotNull(slimTableFactory0);
      
      String string0 = "darbb3>rJ+1i;*_Dn(";
      TableTag tableTag0 = new TableTag();
      assertNotNull(tableTag0);
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEndTag());
      
      Lexer lexer0 = new Lexer();
      assertNotNull(lexer0);
      assertTrue(Lexer.STRICT_REMARKS);
      assertEquals(2.0, Lexer.VERSION_NUMBER, 0.01);
      assertEquals(0, lexer0.getPosition());
      assertEquals("2.0 (Release Build Sep 17, 2006)", lexer0.getVersion());
      
      Parser parser0 = Parser.createParser(lexer0.VERSION_DATE, lexer0.VERSION_STRING);
      assertNotNull(parser0);
      assertTrue(Lexer.STRICT_REMARKS);
      assertEquals(2.0, Lexer.VERSION_NUMBER, 0.01);
      assertEquals(2.0, Parser.VERSION_NUMBER, 0.01);
      assertEquals(0, lexer0.getPosition());
      assertEquals("2.0 (Release Build Sep 17, 2006)", lexer0.getVersion());
      assertEquals("2.0 (Release Build Sep 17, 2006)", parser0.getVersion());
      assertNull(parser0.getURL());
      assertEquals(2.0, parser0.getVersionNumber(), 0.01);
      
      AndFilter andFilter0 = new AndFilter();
      assertNotNull(andFilter0);
      
      NodeList nodeList0 = parser0.extractAllNodesThatMatch(andFilter0);
      assertNotNull(nodeList0);
      assertTrue(Lexer.STRICT_REMARKS);
      assertEquals(2.0, Lexer.VERSION_NUMBER, 0.01);
      assertEquals(2.0, Parser.VERSION_NUMBER, 0.01);
      assertEquals(0, lexer0.getPosition());
      assertEquals("2.0 (Release Build Sep 17, 2006)", lexer0.getVersion());
      assertEquals("2.0 (Release Build Sep 17, 2006)", parser0.getVersion());
      assertNull(parser0.getURL());
      assertEquals(2.0, parser0.getVersionNumber(), 0.01);
      
      tableTag0.setChildren(nodeList0);
      assertTrue(Lexer.STRICT_REMARKS);
      assertEquals(2.0, Lexer.VERSION_NUMBER, 0.01);
      assertEquals(2.0, Parser.VERSION_NUMBER, 0.01);
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals(0, lexer0.getPosition());
      assertEquals("2.0 (Release Build Sep 17, 2006)", lexer0.getVersion());
      assertEquals("2.0 (Release Build Sep 17, 2006)", parser0.getVersion());
      assertNull(parser0.getURL());
      assertEquals(2.0, parser0.getVersionNumber(), 0.01);
      
      HtmlTable htmlTable0 = new HtmlTable(tableTag0);
      assertNotNull(htmlTable0);
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals(0, htmlTable0.getRowCount());
      
      List<String> list0 = ResourceBundle.Control.FORMAT_PROPERTIES;
      assertNotNull(list0);
      assertFalse(list0.contains(string0));
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      
      int int0 = htmlTable0.addRow(list0);
      assertFalse(list0.contains(string0));
      assertEquals(0, int0);
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals(1, htmlTable0.getRowCount());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      
      String string1 = slimTableFactory0.getFullTableName(string0);
      assertNotNull(string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("darbb3>rJ+1i;*_Dn(", string1);
      
      String string2 = "ashO";
      SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
      assertNotNull(slimTableFactory1);
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertNotSame(slimTableFactory1, slimTableFactory0);
      assertFalse(slimTableFactory1.equals((Object)slimTableFactory0));
      
      SlimTestContextImpl slimTestContextImpl0 = new SlimTestContextImpl();
      assertNotNull(slimTestContextImpl0);
      
      String string3 = "comment:java.properties:java.class";
      htmlTable0.substitute(int0, int0, string3);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertFalse(list0.contains(string2));
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals(1, htmlTable0.getRowCount());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      ScenarioTableExtensionTest.AutoArgScenarioTable scenarioTableExtensionTest_AutoArgScenarioTable0 = new ScenarioTableExtensionTest.AutoArgScenarioTable(htmlTable0, parser0.VERSION_DATE, slimTestContextImpl0);
      assertNotNull(scenarioTableExtensionTest_AutoArgScenarioTable0);
      assertTrue(Lexer.STRICT_REMARKS);
      assertEquals(2.0, Lexer.VERSION_NUMBER, 0.01);
      assertEquals(2.0, Parser.VERSION_NUMBER, 0.01);
      assertFalse(scenarioTableExtensionTest_AutoArgScenarioTable0.isParameterized());
      assertEquals("scenarioTable_Sep 17, 2006", scenarioTableExtensionTest_AutoArgScenarioTable0.getTableName());
      assertNull(scenarioTableExtensionTest_AutoArgScenarioTable0.getName());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals(0, lexer0.getPosition());
      assertEquals("2.0 (Release Build Sep 17, 2006)", lexer0.getVersion());
      assertEquals("2.0 (Release Build Sep 17, 2006)", parser0.getVersion());
      assertNull(parser0.getURL());
      assertEquals(2.0, parser0.getVersionNumber(), 0.01);
      assertEquals(1, htmlTable0.getRowCount());
      
      slimTableFactory1.parseDefineTableTypeRow(htmlTable0, int0);
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertNotSame(slimTableFactory1, slimTableFactory0);
      assertFalse(list0.contains(string2));
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals(1, htmlTable0.getRowCount());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(slimTableFactory0.equals((Object)slimTableFactory1));
      assertFalse(slimTableFactory1.equals((Object)slimTableFactory0));
      
      SlimTable slimTable0 = slimTableFactory1.makeSlimTable(htmlTable0, string1, slimTestContextImpl0);
      assertNull(slimTable0);
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertSame(string1, string0);
      assertNotSame(slimTableFactory1, slimTableFactory0);
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals(1, htmlTable0.getRowCount());
      assertFalse(slimTableFactory0.equals((Object)slimTableFactory1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(slimTableFactory1.equals((Object)slimTableFactory0));
      
      Class<DecisionTable> class0 = DecisionTable.class;
      String string4 = "";
      SlimTable slimTable1 = slimTableFactory1.newTableForType(class0, htmlTable0, string4, slimTestContextImpl0);
      assertNotNull(slimTable1);
      assertNotSame(slimTableFactory0, slimTableFactory1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string3);
      assertNotSame(string4, string2);
      assertNotSame(string4, string1);
      assertNotSame(slimTableFactory1, slimTableFactory0);
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals("decisionTable_", slimTable1.getTableName());
      assertEquals(1, htmlTable0.getRowCount());
      assertFalse(slimTableFactory0.equals((Object)slimTableFactory1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(slimTableFactory1.equals((Object)slimTableFactory0));
  }

  @Test(timeout = 11000)
  public void test43()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      assertNotNull(slimTableFactory0);
      
      String string0 = "r";
      TableTag tableTag0 = new TableTag();
      assertNotNull(tableTag0);
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEndTag());
      
      Lexer lexer0 = new Lexer();
      assertNotNull(lexer0);
      assertEquals(2.0, Lexer.VERSION_NUMBER, 0.01);
      assertTrue(Lexer.STRICT_REMARKS);
      assertEquals(0, lexer0.getPosition());
      assertEquals("2.0 (Release Build Sep 17, 2006)", lexer0.getVersion());
      
      Parser parser0 = Parser.createParser(lexer0.VERSION_DATE, lexer0.VERSION_STRING);
      assertNotNull(parser0);
      assertEquals(2.0, Lexer.VERSION_NUMBER, 0.01);
      assertTrue(Lexer.STRICT_REMARKS);
      assertEquals(2.0, Parser.VERSION_NUMBER, 0.01);
      assertEquals(0, lexer0.getPosition());
      assertEquals("2.0 (Release Build Sep 17, 2006)", lexer0.getVersion());
      assertEquals(2.0, parser0.getVersionNumber(), 0.01);
      assertNull(parser0.getURL());
      assertEquals("2.0 (Release Build Sep 17, 2006)", parser0.getVersion());
      
      AndFilter andFilter0 = new AndFilter();
      assertNotNull(andFilter0);
      
      NodeList nodeList0 = parser0.extractAllNodesThatMatch(andFilter0);
      assertNotNull(nodeList0);
      assertEquals(2.0, Lexer.VERSION_NUMBER, 0.01);
      assertTrue(Lexer.STRICT_REMARKS);
      assertEquals(2.0, Parser.VERSION_NUMBER, 0.01);
      assertEquals(0, lexer0.getPosition());
      assertEquals("2.0 (Release Build Sep 17, 2006)", lexer0.getVersion());
      assertEquals(2.0, parser0.getVersionNumber(), 0.01);
      assertNull(parser0.getURL());
      assertEquals("2.0 (Release Build Sep 17, 2006)", parser0.getVersion());
      
      tableTag0.setChildren(nodeList0);
      assertEquals(2.0, Lexer.VERSION_NUMBER, 0.01);
      assertTrue(Lexer.STRICT_REMARKS);
      assertEquals(2.0, Parser.VERSION_NUMBER, 0.01);
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals(0, lexer0.getPosition());
      assertEquals("2.0 (Release Build Sep 17, 2006)", lexer0.getVersion());
      assertEquals(2.0, parser0.getVersionNumber(), 0.01);
      assertNull(parser0.getURL());
      assertEquals("2.0 (Release Build Sep 17, 2006)", parser0.getVersion());
      
      HtmlTable htmlTable0 = new HtmlTable(tableTag0);
      assertNotNull(htmlTable0);
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals(0, htmlTable0.getRowCount());
      
      List<String> list0 = ResourceBundle.Control.FORMAT_PROPERTIES;
      assertNotNull(list0);
      assertFalse(list0.contains(string0));
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      
      int int0 = htmlTable0.addRow(list0);
      assertFalse(list0.contains(string0));
      assertEquals(0, int0);
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals(1, htmlTable0.getRowCount());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      
      String string1 = slimTableFactory0.makeTableType(lexer0.VERSION_DATE);
      assertNotNull(string1);
      assertEquals(2.0, Lexer.VERSION_NUMBER, 0.01);
      assertTrue(Lexer.STRICT_REMARKS);
      assertNotSame(string1, string0);
      assertEquals("Sep 17, 2006", string1);
      assertEquals(0, lexer0.getPosition());
      assertEquals("2.0 (Release Build Sep 17, 2006)", lexer0.getVersion());
      assertFalse(string1.equals((Object)string0));
      
      SlimTestContextImpl slimTestContextImpl0 = new SlimTestContextImpl();
      assertNotNull(slimTestContextImpl0);
      
      String string2 = "script";
      htmlTable0.substitute(int0, int0, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(list0.contains(string2));
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals(1, htmlTable0.getRowCount());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      slimTableFactory0.parseDefineTableTypeRow(htmlTable0, int0);
      assertFalse(list0.contains(string2));
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals(1, htmlTable0.getRowCount());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      
      SlimTable slimTable0 = slimTableFactory0.makeSlimTable(htmlTable0, lexer0.VERSION_DATE, slimTestContextImpl0);
      assertNotNull(slimTable0);
      assertEquals(2.0, Lexer.VERSION_NUMBER, 0.01);
      assertTrue(Lexer.STRICT_REMARKS);
      assertEquals("scriptTable_Sep 17, 2006", slimTable0.getTableName());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getTagEnd());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals(0, lexer0.getPosition());
      assertEquals("2.0 (Release Build Sep 17, 2006)", lexer0.getVersion());
      assertEquals(1, htmlTable0.getRowCount());
      
      Class<DecisionTable> class0 = DecisionTable.class;
  }

  @Test(timeout = 11000)
  public void test44()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      assertNotNull(slimTableFactory0);
      
      String string0 = "DGVeb:wQ";
      TableTag tableTag0 = new TableTag();
      assertNotNull(tableTag0);
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getEndPosition());
      
      Lexer lexer0 = new Lexer();
      assertNotNull(lexer0);
      assertEquals(2.0, Lexer.VERSION_NUMBER, 0.01);
      assertTrue(Lexer.STRICT_REMARKS);
      assertEquals(0, lexer0.getPosition());
      assertEquals("2.0 (Release Build Sep 17, 2006)", lexer0.getVersion());
      
      Parser parser0 = new Parser();
      assertNotNull(parser0);
      assertEquals(2.0, Parser.VERSION_NUMBER, 0.01);
      assertNull(parser0.getURL());
      assertEquals("2.0 (Release Build Sep 17, 2006)", parser0.getVersion());
      assertEquals(2.0, parser0.getVersionNumber(), 0.01);
      
      AndFilter andFilter0 = new AndFilter();
      assertNotNull(andFilter0);
      
      NodeList nodeList0 = parser0.extractAllNodesThatMatch(andFilter0);
      assertNotNull(nodeList0);
      assertEquals(2.0, Parser.VERSION_NUMBER, 0.01);
      assertNull(parser0.getURL());
      assertEquals("2.0 (Release Build Sep 17, 2006)", parser0.getVersion());
      assertEquals(2.0, parser0.getVersionNumber(), 0.01);
      
      tableTag0.setChildren(nodeList0);
      assertEquals(2.0, Parser.VERSION_NUMBER, 0.01);
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getEndPosition());
      assertNull(parser0.getURL());
      assertEquals("2.0 (Release Build Sep 17, 2006)", parser0.getVersion());
      assertEquals(2.0, parser0.getVersionNumber(), 0.01);
      
      HtmlTable htmlTable0 = new HtmlTable(tableTag0);
      assertNotNull(htmlTable0);
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals(0, htmlTable0.getRowCount());
      
      List<String> list0 = ResourceBundle.Control.FORMAT_DEFAULT;
      assertNotNull(list0);
      assertFalse(list0.contains(string0));
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      
      int int0 = htmlTable0.addRow(list0);
      assertFalse(list0.contains(string0));
      assertEquals(0, int0);
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals(1, htmlTable0.getRowCount());
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      
      SlimTestContextImpl slimTestContextImpl0 = new SlimTestContextImpl();
      assertNotNull(slimTestContextImpl0);
      
      String string1 = "^\\P\\zC-=~=DXY-E&*";
      slimTestContextImpl0.incrementIgnoredTestsCount();
      htmlTable0.substitute(int0, int0, string1);
      assertNotSame(string1, string0);
      assertFalse(list0.contains(string1));
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals(1, htmlTable0.getRowCount());
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertFalse(string1.equals((Object)string0));
      
      slimTableFactory0.parseDefineTableTypeRow(htmlTable0, int0);
      assertFalse(list0.contains(string1));
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals(1, htmlTable0.getRowCount());
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      
      SlimTable slimTable0 = slimTableFactory0.makeSlimTable(htmlTable0, lexer0.VERSION_DATE, slimTestContextImpl0);
      assertNotNull(slimTable0);
      assertEquals(2.0, Lexer.VERSION_NUMBER, 0.01);
      assertTrue(Lexer.STRICT_REMARKS);
      assertEquals("UnknownTableType_Sep 17, 2006", slimTable0.getTableName());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals(0, lexer0.getPosition());
      assertEquals("2.0 (Release Build Sep 17, 2006)", lexer0.getVersion());
      assertEquals(1, htmlTable0.getRowCount());
      
      Class<DecisionTable> class0 = DecisionTable.class;
      int int1 = (-1740712619);
      // Undeclared exception!
      try { 
        slimTableFactory0.parseDefineTableTypeRow(htmlTable0, int1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 11000)
  public void test45()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      assertNotNull(slimTableFactory0);
      
      TableTag tableTag0 = new TableTag();
      assertNotNull(tableTag0);
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getEndPosition());
      
      Lexer lexer0 = new Lexer();
      assertNotNull(lexer0);
      assertTrue(Lexer.STRICT_REMARKS);
      assertEquals(2.0, Lexer.VERSION_NUMBER, 0.01);
      assertEquals("2.0 (Release Build Sep 17, 2006)", lexer0.getVersion());
      assertEquals(0, lexer0.getPosition());
      
      Parser parser0 = new Parser(lexer0);
      assertNotNull(parser0);
      assertTrue(Lexer.STRICT_REMARKS);
      assertEquals(2.0, Lexer.VERSION_NUMBER, 0.01);
      assertEquals(2.0, Parser.VERSION_NUMBER, 0.01);
      assertEquals("2.0 (Release Build Sep 17, 2006)", lexer0.getVersion());
      assertEquals(0, lexer0.getPosition());
      assertEquals("2.0 (Release Build Sep 17, 2006)", parser0.getVersion());
      assertEquals(2.0, parser0.getVersionNumber(), 0.01);
      assertNull(parser0.getURL());
      
      AndFilter andFilter0 = new AndFilter();
      assertNotNull(andFilter0);
      
      NodeList nodeList0 = parser0.extractAllNodesThatMatch(andFilter0);
      assertNotNull(nodeList0);
      assertTrue(Lexer.STRICT_REMARKS);
      assertEquals(2.0, Lexer.VERSION_NUMBER, 0.01);
      assertEquals(2.0, Parser.VERSION_NUMBER, 0.01);
      assertEquals("2.0 (Release Build Sep 17, 2006)", lexer0.getVersion());
      assertEquals(0, lexer0.getPosition());
      assertEquals("2.0 (Release Build Sep 17, 2006)", parser0.getVersion());
      assertEquals(2.0, parser0.getVersionNumber(), 0.01);
      assertNull(parser0.getURL());
      
      tableTag0.setChildren(nodeList0);
      assertTrue(Lexer.STRICT_REMARKS);
      assertEquals(2.0, Lexer.VERSION_NUMBER, 0.01);
      assertEquals(2.0, Parser.VERSION_NUMBER, 0.01);
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals("2.0 (Release Build Sep 17, 2006)", lexer0.getVersion());
      assertEquals(0, lexer0.getPosition());
      assertEquals("2.0 (Release Build Sep 17, 2006)", parser0.getVersion());
      assertEquals(2.0, parser0.getVersionNumber(), 0.01);
      assertNull(parser0.getURL());
      
      HtmlTable htmlTable0 = new HtmlTable(tableTag0);
      assertNotNull(htmlTable0);
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals(0, htmlTable0.getRowCount());
      
      List<String> list0 = ResourceBundle.Control.FORMAT_DEFAULT;
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      
      int int0 = htmlTable0.addRow(list0);
      assertEquals(0, int0);
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals(1, htmlTable0.getRowCount());
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      
      String string0 = "ashO";
      String string1 = slimTableFactory0.makeTableType(string0);
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("hO", string1);
      assertFalse(string1.equals((Object)string0));
      
      int int1 = htmlTable0.addRow(list0);
      assertFalse(list0.contains(string0));
      assertEquals(1, int1);
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals(2, htmlTable0.getRowCount());
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertFalse(int1 == int0);
      
      SlimTable slimTable0 = slimTableFactory0.parseDefineTableTypeTable(htmlTable0);
      assertNull(slimTable0);
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals(2, htmlTable0.getRowCount());
      
      SlimTestContextImpl slimTestContextImpl0 = new SlimTestContextImpl();
      assertNotNull(slimTestContextImpl0);
      
      ScenarioTableExtensionTest.AutoArgScenarioTable scenarioTableExtensionTest_AutoArgScenarioTable0 = new ScenarioTableExtensionTest.AutoArgScenarioTable(htmlTable0, parser0.VERSION_DATE, slimTestContextImpl0);
      assertNotNull(scenarioTableExtensionTest_AutoArgScenarioTable0);
      assertTrue(Lexer.STRICT_REMARKS);
      assertEquals(2.0, Lexer.VERSION_NUMBER, 0.01);
      assertEquals(2.0, Parser.VERSION_NUMBER, 0.01);
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals("2.0 (Release Build Sep 17, 2006)", lexer0.getVersion());
      assertEquals(0, lexer0.getPosition());
      assertEquals("2.0 (Release Build Sep 17, 2006)", parser0.getVersion());
      assertEquals(2.0, parser0.getVersionNumber(), 0.01);
      assertNull(parser0.getURL());
      assertEquals(2, htmlTable0.getRowCount());
      assertNull(scenarioTableExtensionTest_AutoArgScenarioTable0.getName());
      assertFalse(scenarioTableExtensionTest_AutoArgScenarioTable0.isParameterized());
      assertEquals("scenarioTable_Sep 17, 2006", scenarioTableExtensionTest_AutoArgScenarioTable0.getTableName());
      
      ScenarioTable.ScenarioTestContext scenarioTable_ScenarioTestContext0 = scenarioTableExtensionTest_AutoArgScenarioTable0.new ScenarioTestContext(slimTestContextImpl0);
      assertNotNull(scenarioTable_ScenarioTestContext0);
      assertTrue(Lexer.STRICT_REMARKS);
      assertEquals(2.0, Lexer.VERSION_NUMBER, 0.01);
      assertEquals(2.0, Parser.VERSION_NUMBER, 0.01);
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals("2.0 (Release Build Sep 17, 2006)", lexer0.getVersion());
      assertEquals(0, lexer0.getPosition());
      assertEquals("2.0 (Release Build Sep 17, 2006)", parser0.getVersion());
      assertEquals(2.0, parser0.getVersionNumber(), 0.01);
      assertNull(parser0.getURL());
      assertEquals(2, htmlTable0.getRowCount());
      assertNull(scenarioTableExtensionTest_AutoArgScenarioTable0.getName());
      assertFalse(scenarioTableExtensionTest_AutoArgScenarioTable0.isParameterized());
      assertEquals("scenarioTable_Sep 17, 2006", scenarioTableExtensionTest_AutoArgScenarioTable0.getTableName());
      
      SlimTable slimTable1 = slimTableFactory0.makeSlimTable(htmlTable0, lexer0.VERSION_DATE, scenarioTable_ScenarioTestContext0);
      assertNotNull(slimTable1);
      assertTrue(Lexer.STRICT_REMARKS);
      assertEquals(2.0, Lexer.VERSION_NUMBER, 0.01);
      assertEquals(2.0, Parser.VERSION_NUMBER, 0.01);
      assertEquals("UnknownTableType_Sep 17, 2006", slimTable1.getTableName());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getEndPosition());
      assertEquals("2.0 (Release Build Sep 17, 2006)", lexer0.getVersion());
      assertEquals(0, lexer0.getPosition());
      assertEquals("2.0 (Release Build Sep 17, 2006)", parser0.getVersion());
      assertEquals(2.0, parser0.getVersionNumber(), 0.01);
      assertNull(parser0.getURL());
      assertEquals(2, htmlTable0.getRowCount());
      assertNull(scenarioTableExtensionTest_AutoArgScenarioTable0.getName());
      assertFalse(scenarioTableExtensionTest_AutoArgScenarioTable0.isParameterized());
      assertEquals("scenarioTable_Sep 17, 2006", scenarioTableExtensionTest_AutoArgScenarioTable0.getTableName());
      
      String string2 = "query:";
      Class<? extends SlimTable> class0 = slimTableFactory0.getTableType(string2);
      assertNotNull(class0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1, class0.getModifiers());
      assertFalse(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertEquals("class fitnesse.testsystems.slim.tables.QueryTable", class0.toString());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = "java.class";
      String string4 = slimTableFactory0.getFullTableName(string3);
      assertNotNull(string4);
      assertNotSame(string3, string0);
      assertNotSame(string3, string4);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string4, string3);
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      assertNotSame(string4, string0);
      assertEquals("java.properties:java.class", string4);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
  }

  @Test(timeout = 11000)
  public void test46()  throws Throwable  {
      SlimTableFactory slimTableFactory0 = new SlimTableFactory();
      assertNotNull(slimTableFactory0);
      
      TableTag tableTag0 = new TableTag();
      assertNotNull(tableTag0);
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals("TABLE", tableTag0.getRawTagName());
      
      Lexer lexer0 = new Lexer();
      assertNotNull(lexer0);
      assertEquals(2.0, Lexer.VERSION_NUMBER, 0.01);
      assertTrue(Lexer.STRICT_REMARKS);
      assertEquals(0, lexer0.getPosition());
      assertEquals("2.0 (Release Build Sep 17, 2006)", lexer0.getVersion());
      
      Parser parser0 = new Parser(lexer0);
      assertNotNull(parser0);
      assertEquals(2.0, Lexer.VERSION_NUMBER, 0.01);
      assertTrue(Lexer.STRICT_REMARKS);
      assertEquals(2.0, Parser.VERSION_NUMBER, 0.01);
      assertEquals(0, lexer0.getPosition());
      assertEquals("2.0 (Release Build Sep 17, 2006)", lexer0.getVersion());
      assertEquals("2.0 (Release Build Sep 17, 2006)", parser0.getVersion());
      assertEquals(2.0, parser0.getVersionNumber(), 0.01);
      assertNull(parser0.getURL());
      
      AndFilter andFilter0 = new AndFilter();
      assertNotNull(andFilter0);
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertNotNull(map0);
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      
      slimTableFactory0.tableTypeArrays = map0;
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      assertEquals(28, slimTableFactory0.tableTypeArrays.size());
      assertFalse(slimTableFactory0.tableTypeArrays.isEmpty());
      
      NodeList nodeList0 = parser0.extractAllNodesThatMatch(andFilter0);
      assertNotNull(nodeList0);
      assertEquals(2.0, Lexer.VERSION_NUMBER, 0.01);
      assertTrue(Lexer.STRICT_REMARKS);
      assertEquals(2.0, Parser.VERSION_NUMBER, 0.01);
      assertEquals(0, lexer0.getPosition());
      assertEquals("2.0 (Release Build Sep 17, 2006)", lexer0.getVersion());
      assertEquals("2.0 (Release Build Sep 17, 2006)", parser0.getVersion());
      assertEquals(2.0, parser0.getVersionNumber(), 0.01);
      assertNull(parser0.getURL());
      
      tableTag0.setChildren(nodeList0);
      assertEquals(2.0, Lexer.VERSION_NUMBER, 0.01);
      assertTrue(Lexer.STRICT_REMARKS);
      assertEquals(2.0, Parser.VERSION_NUMBER, 0.01);
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals(0, lexer0.getPosition());
      assertEquals("2.0 (Release Build Sep 17, 2006)", lexer0.getVersion());
      assertEquals("2.0 (Release Build Sep 17, 2006)", parser0.getVersion());
      assertEquals(2.0, parser0.getVersionNumber(), 0.01);
      assertNull(parser0.getURL());
      
      HtmlTable htmlTable0 = new HtmlTable(tableTag0);
      assertNotNull(htmlTable0);
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals(0, htmlTable0.getRowCount());
      
      List<String> list0 = ResourceBundle.Control.FORMAT_DEFAULT;
      assertNotNull(list0);
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      
      int int0 = htmlTable0.addRow(list0);
      assertEquals(0, int0);
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals(1, htmlTable0.getRowCount());
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      
      String string0 = "ashO";
      String string1 = slimTableFactory0.makeTableType(string0);
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("hO", string1);
      assertFalse(string1.equals((Object)string0));
      
      int int1 = htmlTable0.addRow(list0);
      assertFalse(list0.contains(string1));
      assertEquals(1, int1);
      assertEquals((-1), tableTag0.getTagBegin());
      assertEquals((-1), tableTag0.getEndPosition());
      assertFalse(tableTag0.isEndTag());
      assertEquals((-1), tableTag0.getStartPosition());
      assertEquals((-1), tableTag0.getTagEnd());
      assertFalse(tableTag0.isEmptyXmlTag());
      assertEquals("TABLE", tableTag0.getRawTagName());
      assertEquals(2, htmlTable0.getRowCount());
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try { 
        slimTableFactory0.parseDefineTableTypeTable(htmlTable0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableMap", e);
      }
  }
}
