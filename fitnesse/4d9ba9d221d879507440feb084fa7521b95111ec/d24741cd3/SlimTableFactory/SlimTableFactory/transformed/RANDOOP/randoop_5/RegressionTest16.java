import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest16 {

    public static boolean debug = false;

    @Test
    public void test08001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08001");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        boolean boolean4 = slimTableFactory0.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap5 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.Table table8 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory7.parseDefineTableTypeRow(table8, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(slimTableFactory7);
    }

    @Test
    public void test08002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08002");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.lang.String str4 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory0.copy();
        java.lang.String str7 = slimTableFactory5.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap8 = slimTableFactory5.tableTypes;
        fitnesse.testsystems.slim.Table table9 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext11 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable12 = slimTableFactory5.makeSlimTable(table9, "", slimTestContext11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNotNull(strMap8);
    }

    @Test
    public void test08003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08003");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory0.copy();
        java.lang.String str7 = slimTableFactory5.makeTableType("hi!");
        boolean boolean9 = slimTableFactory5.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory5.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory5.copy();
        java.lang.String str13 = slimTableFactory11.makeTableType("");
        java.lang.String str15 = slimTableFactory11.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory11.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory17.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass20 = slimTableFactory18.getTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass22 = slimTableFactory18.getTableType("hi!");
        boolean boolean24 = slimTableFactory18.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap25 = slimTableFactory18.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = slimTableFactory18.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = slimTableFactory18.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass29 = slimTableFactory18.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory30 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str32 = slimTableFactory30.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap33 = slimTableFactory30.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory34 = slimTableFactory30.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap35 = slimTableFactory34.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory36 = slimTableFactory34.copy();
        java.lang.String str38 = slimTableFactory36.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap39 = slimTableFactory36.tableTypeArrays;
        slimTableFactory18.tableTypeArrays = strMap39;
        slimTableFactory11.tableTypeArrays = strMap39;
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertNotNull(slimTableFactory18);
        org.junit.Assert.assertNull(wildcardClass20);
        org.junit.Assert.assertNull(wildcardClass22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(slimTableFactory26);
        org.junit.Assert.assertNotNull(slimTableFactory27);
        org.junit.Assert.assertNull(wildcardClass29);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(slimTableFactory34);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(slimTableFactory36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertNotNull(strMap39);
    }

    @Test
    public void test08004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08004");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass3 = slimTableFactory1.getTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass5 = slimTableFactory1.getTableType("hi!");
        boolean boolean7 = slimTableFactory1.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory1.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass10 = slimTableFactory1.getTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass12 = slimTableFactory1.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass17 = slimTableFactory15.getTableType("");
        java.lang.String str19 = slimTableFactory15.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap20 = slimTableFactory15.tableTypeArrays;
        slimTableFactory14.tableTypeArrays = strMap20;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = slimTableFactory14.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = slimTableFactory14.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap24 = slimTableFactory23.tableTypeArrays;
        slimTableFactory13.tableTypeArrays = strMap24;
        java.lang.Class<?> wildcardClass26 = slimTableFactory13.getClass();
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNotNull(slimTableFactory13);
        org.junit.Assert.assertNull(wildcardClass17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(slimTableFactory22);
        org.junit.Assert.assertNotNull(slimTableFactory23);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test08005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08005");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory0.copy();
        boolean boolean6 = slimTableFactory0.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap9 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory10.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory10.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory10.getTableType("hi!");
        java.lang.String str16 = slimTableFactory10.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap17 = slimTableFactory10.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap17;
        boolean boolean20 = slimTableFactory0.hasColon("hi!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test08006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08006");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.lang.String str4 = slimTableFactory0.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap5 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory0.tableTypeArrays;
        java.lang.String str10 = slimTableFactory0.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap11 = slimTableFactory0.tableTypes;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap12 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.Table table13 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext15 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable16 = slimTableFactory0.makeSlimTable(table13, "hi!", slimTestContext15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(strMap12);
    }

    @Test
    public void test08007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08007");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass5 = slimTableFactory3.getTableType("");
        java.lang.String str7 = slimTableFactory3.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory3.copy();
        boolean boolean10 = slimTableFactory3.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory3.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap12 = slimTableFactory3.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap12;
        boolean boolean15 = slimTableFactory0.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap16 = slimTableFactory0.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass18 = slimTableFactory0.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory19.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = slimTableFactory19.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass23 = slimTableFactory19.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap24 = slimTableFactory19.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap24;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap26 = slimTableFactory0.tableTypes;
        java.lang.String str28 = slimTableFactory0.makeTableType("");
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertNotNull(slimTableFactory20);
        org.junit.Assert.assertNotNull(slimTableFactory21);
        org.junit.Assert.assertNull(wildcardClass23);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
    }

    @Test
    public void test08008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08008");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.lang.String str4 = slimTableFactory0.makeTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap5 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory0.copy();
        java.lang.String str8 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str11 = slimTableFactory9.getFullTableName("hi!");
        java.lang.String str13 = slimTableFactory9.makeTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap14 = slimTableFactory9.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory9.copy();
        java.lang.String str17 = slimTableFactory9.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str20 = slimTableFactory18.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap21 = slimTableFactory18.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str24 = slimTableFactory22.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap25 = slimTableFactory22.tableTypeArrays;
        slimTableFactory18.tableTypeArrays = strMap25;
        java.lang.String str28 = slimTableFactory18.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap29 = slimTableFactory18.tableTypeArrays;
        slimTableFactory9.tableTypeArrays = strMap29;
        slimTableFactory0.tableTypeArrays = strMap29;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory32 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory33 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str35 = slimTableFactory33.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap36 = slimTableFactory33.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory37 = slimTableFactory33.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap38 = slimTableFactory37.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory39 = slimTableFactory37.copy();
        java.lang.String str41 = slimTableFactory39.getFullTableName("hi!");
        java.lang.String str43 = slimTableFactory39.makeTableType("hi!");
        java.lang.String str45 = slimTableFactory39.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap46 = slimTableFactory39.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap46;
        java.lang.String str49 = slimTableFactory0.makeTableType("hi!");
        java.lang.String str51 = slimTableFactory0.makeTableType("hi!");
        boolean boolean53 = slimTableFactory0.hasColon("hi!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(slimTableFactory32);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(slimTableFactory37);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertNotNull(slimTableFactory39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hi!" + "'", str43, "hi!");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
        org.junit.Assert.assertNotNull(strMap46);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hi!" + "'", str49, "hi!");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "hi!" + "'", str51, "hi!");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test08009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08009");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass3 = slimTableFactory1.getTableType("hi!");
        boolean boolean5 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory7.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass10 = slimTableFactory8.getTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass12 = slimTableFactory8.getTableType("hi!");
        boolean boolean14 = slimTableFactory8.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass18 = slimTableFactory16.getTableType("");
        java.lang.String str20 = slimTableFactory16.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap21 = slimTableFactory16.tableTypeArrays;
        slimTableFactory15.tableTypeArrays = strMap21;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = slimTableFactory15.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = slimTableFactory23.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap25 = slimTableFactory24.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass28 = slimTableFactory26.getTableType("");
        java.lang.String str30 = slimTableFactory26.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory31 = slimTableFactory26.copy();
        boolean boolean33 = slimTableFactory26.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap34 = slimTableFactory26.tableTypeArrays;
        slimTableFactory24.tableTypeArrays = strMap34;
        java.lang.String str37 = slimTableFactory24.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory38 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory39 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass41 = slimTableFactory39.getTableType("");
        java.lang.String str43 = slimTableFactory39.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap44 = slimTableFactory39.tableTypeArrays;
        slimTableFactory38.tableTypeArrays = strMap44;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory46 = slimTableFactory38.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory47 = slimTableFactory46.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap48 = slimTableFactory47.tableTypeArrays;
        java.lang.String str50 = slimTableFactory47.makeTableType("hi!");
        boolean boolean52 = slimTableFactory47.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap53 = slimTableFactory47.tableTypeArrays;
        slimTableFactory24.tableTypeArrays = strMap53;
        java.util.Map<java.lang.String, java.lang.String> strMap55 = slimTableFactory24.tableTypeArrays;
        slimTableFactory8.tableTypeArrays = strMap55;
        slimTableFactory1.tableTypeArrays = strMap55;
        boolean boolean59 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap60 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.Table table61 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable62 = slimTableFactory1.parseDefineTableTypeTable(table61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(slimTableFactory23);
        org.junit.Assert.assertNotNull(slimTableFactory24);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNull(wildcardClass28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(slimTableFactory31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertNull(wildcardClass41);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(strMap44);
        org.junit.Assert.assertNotNull(slimTableFactory46);
        org.junit.Assert.assertNotNull(slimTableFactory47);
        org.junit.Assert.assertNotNull(strMap48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hi!" + "'", str50, "hi!");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(strMap53);
        org.junit.Assert.assertNotNull(strMap55);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(strMap60);
    }

    @Test
    public void test08010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08010");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass3 = slimTableFactory1.getTableType("");
        java.lang.String str5 = slimTableFactory1.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory1.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap6;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap8 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str11 = slimTableFactory9.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap12 = slimTableFactory9.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory9.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap14 = slimTableFactory13.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory13.copy();
        java.lang.String str17 = slimTableFactory15.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap18 = slimTableFactory15.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap18;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory0.copy();
        java.lang.String str22 = slimTableFactory0.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str25 = slimTableFactory23.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap26 = slimTableFactory23.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = slimTableFactory23.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = slimTableFactory23.copy();
        java.lang.String str30 = slimTableFactory28.makeTableType("hi!");
        boolean boolean32 = slimTableFactory28.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap33 = slimTableFactory28.tableTypes;
        java.lang.String str35 = slimTableFactory28.makeTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass37 = slimTableFactory28.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap38 = slimTableFactory28.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap38;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass41 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory42 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory43 = slimTableFactory42.copy();
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(slimTableFactory13);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(slimTableFactory20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(slimTableFactory27);
        org.junit.Assert.assertNotNull(slimTableFactory28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNull(wildcardClass37);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertNull(wildcardClass41);
        org.junit.Assert.assertNotNull(slimTableFactory42);
        org.junit.Assert.assertNotNull(slimTableFactory43);
    }

    @Test
    public void test08011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08011");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory2 = slimTableFactory0.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass4 = slimTableFactory0.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str7 = slimTableFactory5.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory5.tableTypeArrays;
        java.lang.String str10 = slimTableFactory5.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory5.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap11;
        java.util.Map<java.lang.String, java.lang.String> strMap13 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap14 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory15.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass18 = slimTableFactory15.getTableType("");
        java.lang.String str20 = slimTableFactory15.makeTableType("");
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(slimTableFactory2);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
    }

    @Test
    public void test08012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08012");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass3 = slimTableFactory1.getTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass5 = slimTableFactory1.getTableType("hi!");
        boolean boolean7 = slimTableFactory1.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory1.copy();
        boolean boolean11 = slimTableFactory1.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str15 = slimTableFactory13.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory13.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = slimTableFactory13.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = slimTableFactory13.tableTypeArrays;
        slimTableFactory12.tableTypeArrays = strMap18;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap20 = slimTableFactory12.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass22 = slimTableFactory12.getTableType("");
        java.lang.String str24 = slimTableFactory12.getFullTableName("");
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(slimTableFactory17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNull(wildcardClass22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
    }

    @Test
    public void test08013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08013");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        boolean boolean4 = slimTableFactory0.hasColon("");
        boolean boolean6 = slimTableFactory0.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass8 = slimTableFactory0.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str11 = slimTableFactory9.getFullTableName("hi!");
        java.lang.String str13 = slimTableFactory9.makeTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap14 = slimTableFactory9.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass17 = slimTableFactory15.getTableType("");
        java.lang.String str19 = slimTableFactory15.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap20 = slimTableFactory15.tableTypeArrays;
        slimTableFactory9.tableTypeArrays = strMap20;
        slimTableFactory0.tableTypeArrays = strMap20;
        boolean boolean24 = slimTableFactory0.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = slimTableFactory0.copy();
        java.lang.String str27 = slimTableFactory25.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass30 = slimTableFactory28.getTableType("");
        java.lang.String str32 = slimTableFactory28.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory33 = slimTableFactory28.copy();
        boolean boolean35 = slimTableFactory28.hasColon("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass37 = slimTableFactory28.getTableType("");
        java.lang.String str39 = slimTableFactory28.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory40 = slimTableFactory28.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory41 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory42 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass44 = slimTableFactory42.getTableType("");
        java.lang.String str46 = slimTableFactory42.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap47 = slimTableFactory42.tableTypeArrays;
        slimTableFactory41.tableTypeArrays = strMap47;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory49 = slimTableFactory41.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory50 = slimTableFactory49.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory51 = slimTableFactory49.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory52 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory53 = slimTableFactory52.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass55 = slimTableFactory53.getTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass57 = slimTableFactory53.getTableType("hi!");
        boolean boolean59 = slimTableFactory53.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap60 = slimTableFactory53.tableTypeArrays;
        slimTableFactory51.tableTypeArrays = strMap60;
        slimTableFactory28.tableTypeArrays = strMap60;
        java.util.Map<java.lang.String, java.lang.String> strMap63 = slimTableFactory28.tableTypeArrays;
        slimTableFactory25.tableTypeArrays = strMap63;
        java.lang.String str66 = slimTableFactory25.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory67 = slimTableFactory25.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory68 = slimTableFactory67.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory69 = slimTableFactory68.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory70 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass72 = slimTableFactory70.getTableType("");
        java.lang.String str74 = slimTableFactory70.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory75 = slimTableFactory70.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap76 = slimTableFactory75.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory77 = slimTableFactory75.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory78 = slimTableFactory75.copy();
        boolean boolean80 = slimTableFactory78.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap81 = slimTableFactory78.tableTypeArrays;
        slimTableFactory69.tableTypeArrays = strMap81;
        fitnesse.testsystems.slim.Table table83 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext85 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable86 = slimTableFactory69.makeSlimTable(table83, "", slimTestContext85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNull(wildcardClass17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(slimTableFactory25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNull(wildcardClass30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(slimTableFactory33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(wildcardClass37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(slimTableFactory40);
        org.junit.Assert.assertNull(wildcardClass44);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNotNull(slimTableFactory49);
        org.junit.Assert.assertNotNull(slimTableFactory50);
        org.junit.Assert.assertNotNull(slimTableFactory51);
        org.junit.Assert.assertNotNull(slimTableFactory53);
        org.junit.Assert.assertNull(wildcardClass55);
        org.junit.Assert.assertNull(wildcardClass57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(strMap60);
        org.junit.Assert.assertNotNull(strMap63);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "hi!" + "'", str66, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory67);
        org.junit.Assert.assertNotNull(slimTableFactory68);
        org.junit.Assert.assertNotNull(slimTableFactory69);
        org.junit.Assert.assertNull(wildcardClass72);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(slimTableFactory75);
        org.junit.Assert.assertNotNull(strMap76);
        org.junit.Assert.assertNotNull(slimTableFactory77);
        org.junit.Assert.assertNotNull(slimTableFactory78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(strMap81);
    }

    @Test
    public void test08014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08014");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str6 = slimTableFactory4.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory4.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap7;
        java.lang.String str10 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap12 = slimTableFactory0.tableTypes;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap13 = slimTableFactory0.tableTypes;
        boolean boolean15 = slimTableFactory0.hasColon("hi!");
        java.lang.String str17 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass23 = slimTableFactory21.getTableType("");
        java.lang.String str25 = slimTableFactory21.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap26 = slimTableFactory21.tableTypeArrays;
        slimTableFactory20.tableTypeArrays = strMap26;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = slimTableFactory20.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory29 = slimTableFactory28.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory30 = slimTableFactory28.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory31 = slimTableFactory28.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory32 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory33 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass35 = slimTableFactory33.getTableType("");
        java.lang.String str37 = slimTableFactory33.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap38 = slimTableFactory33.tableTypeArrays;
        slimTableFactory32.tableTypeArrays = strMap38;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory40 = slimTableFactory32.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory41 = slimTableFactory40.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory42 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str44 = slimTableFactory42.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap45 = slimTableFactory42.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap46 = slimTableFactory42.tableTypeArrays;
        slimTableFactory41.tableTypeArrays = strMap46;
        slimTableFactory31.tableTypeArrays = strMap46;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap49 = slimTableFactory31.tableTypes;
        java.lang.String str51 = slimTableFactory31.getFullTableName("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass53 = slimTableFactory31.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory54 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str56 = slimTableFactory54.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap57 = slimTableFactory54.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory58 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str60 = slimTableFactory58.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap61 = slimTableFactory58.tableTypeArrays;
        slimTableFactory54.tableTypeArrays = strMap61;
        java.lang.String str64 = slimTableFactory54.makeTableType("");
        java.lang.String str66 = slimTableFactory54.makeTableType("hi!");
        boolean boolean68 = slimTableFactory54.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap69 = slimTableFactory54.tableTypeArrays;
        slimTableFactory31.tableTypeArrays = strMap69;
        java.util.Map<java.lang.String, java.lang.String> strMap71 = slimTableFactory31.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap72 = slimTableFactory31.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory73 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str75 = slimTableFactory73.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap76 = slimTableFactory73.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory77 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str79 = slimTableFactory77.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap80 = slimTableFactory77.tableTypeArrays;
        slimTableFactory73.tableTypeArrays = strMap80;
        java.lang.String str83 = slimTableFactory73.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap84 = slimTableFactory73.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory85 = slimTableFactory73.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap86 = slimTableFactory73.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass88 = slimTableFactory73.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap89 = slimTableFactory73.tableTypeArrays;
        slimTableFactory31.tableTypeArrays = strMap89;
        slimTableFactory0.tableTypeArrays = strMap89;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass93 = slimTableFactory0.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory94 = slimTableFactory0.copy();
        java.lang.Class<?> wildcardClass95 = slimTableFactory94.getClass();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(slimTableFactory18);
        org.junit.Assert.assertNotNull(slimTableFactory19);
        org.junit.Assert.assertNull(wildcardClass23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(slimTableFactory28);
        org.junit.Assert.assertNotNull(slimTableFactory29);
        org.junit.Assert.assertNotNull(slimTableFactory30);
        org.junit.Assert.assertNotNull(slimTableFactory31);
        org.junit.Assert.assertNull(wildcardClass35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertNotNull(slimTableFactory40);
        org.junit.Assert.assertNotNull(slimTableFactory41);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi!" + "'", str44, "hi!");
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNotNull(strMap46);
        org.junit.Assert.assertNotNull(strMap49);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNull(wildcardClass53);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hi!" + "'", str56, "hi!");
        org.junit.Assert.assertNotNull(strMap57);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "hi!" + "'", str60, "hi!");
        org.junit.Assert.assertNotNull(strMap61);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "hi!" + "'", str66, "hi!");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(strMap69);
        org.junit.Assert.assertNotNull(strMap71);
        org.junit.Assert.assertNotNull(strMap72);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "hi!" + "'", str75, "hi!");
        org.junit.Assert.assertNotNull(strMap76);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "hi!" + "'", str79, "hi!");
        org.junit.Assert.assertNotNull(strMap80);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertNotNull(strMap84);
        org.junit.Assert.assertNotNull(slimTableFactory85);
        org.junit.Assert.assertNotNull(strMap86);
        org.junit.Assert.assertNull(wildcardClass88);
        org.junit.Assert.assertNotNull(strMap89);
        org.junit.Assert.assertNull(wildcardClass93);
        org.junit.Assert.assertNotNull(slimTableFactory94);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test08015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08015");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.lang.String str4 = slimTableFactory0.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap5 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap6 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str9 = slimTableFactory7.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory7.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory7.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap12 = slimTableFactory11.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory11.copy();
        java.lang.String str15 = slimTableFactory13.getFullTableName("hi!");
        java.lang.String str17 = slimTableFactory13.makeTableType("hi!");
        java.lang.String str19 = slimTableFactory13.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap20 = slimTableFactory13.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap20;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = slimTableFactory22.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap24 = slimTableFactory22.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap25 = slimTableFactory22.tableTypeArrays;
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(slimTableFactory13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(slimTableFactory22);
        org.junit.Assert.assertNotNull(slimTableFactory23);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNotNull(strMap25);
    }

    @Test
    public void test08016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08016");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.lang.String str4 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory0.copy();
        java.lang.String str7 = slimTableFactory5.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap8 = slimTableFactory5.tableTypes;
        java.lang.String str10 = slimTableFactory5.makeTableType("hi!");
        java.lang.String str12 = slimTableFactory5.getFullTableName("");
        boolean boolean14 = slimTableFactory5.hasColon("hi!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test08017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08017");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.lang.String str3 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap5 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory0.copy();
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!" + "'", str3, "hi!");
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
    }

    @Test
    public void test08018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08018");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        java.lang.String str5 = slimTableFactory0.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory0.tableTypeArrays;
        boolean boolean8 = slimTableFactory0.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap9 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory0.copy();
        boolean boolean12 = slimTableFactory10.hasColon("");
        java.lang.Class<?> wildcardClass13 = slimTableFactory10.getClass();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test08019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08019");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap5 = slimTableFactory4.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory4.copy();
        java.lang.String str8 = slimTableFactory6.getFullTableName("hi!");
        java.lang.String str10 = slimTableFactory6.makeTableType("hi!");
        java.lang.String str12 = slimTableFactory6.getFullTableName("");
        fitnesse.testsystems.slim.Table table13 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable14 = slimTableFactory6.parseDefineTableTypeTable(table13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test08020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08020");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap5 = slimTableFactory4.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory4.copy();
        java.lang.String str8 = slimTableFactory6.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap9 = slimTableFactory6.tableTypes;
        java.lang.String str11 = slimTableFactory6.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory6.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str15 = slimTableFactory13.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory13.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str19 = slimTableFactory17.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap20 = slimTableFactory17.tableTypeArrays;
        slimTableFactory13.tableTypeArrays = strMap20;
        java.lang.String str23 = slimTableFactory13.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = slimTableFactory13.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap25 = slimTableFactory13.tableTypes;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap26 = slimTableFactory13.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass28 = slimTableFactory13.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap29 = slimTableFactory13.tableTypeArrays;
        slimTableFactory6.tableTypeArrays = strMap29;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory31 = slimTableFactory6.copy();
        java.lang.String str33 = slimTableFactory31.makeTableType("hi!");
        boolean boolean35 = slimTableFactory31.hasColon("");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(slimTableFactory24);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNull(wildcardClass28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(slimTableFactory31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test08021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08021");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        boolean boolean4 = slimTableFactory0.hasColon("");
        boolean boolean6 = slimTableFactory0.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass8 = slimTableFactory0.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str11 = slimTableFactory9.getFullTableName("hi!");
        java.lang.String str13 = slimTableFactory9.makeTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap14 = slimTableFactory9.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass17 = slimTableFactory15.getTableType("");
        java.lang.String str19 = slimTableFactory15.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap20 = slimTableFactory15.tableTypeArrays;
        slimTableFactory9.tableTypeArrays = strMap20;
        slimTableFactory0.tableTypeArrays = strMap20;
        boolean boolean24 = slimTableFactory0.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str28 = slimTableFactory26.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap29 = slimTableFactory26.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory30 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str32 = slimTableFactory30.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap33 = slimTableFactory30.tableTypeArrays;
        slimTableFactory26.tableTypeArrays = strMap33;
        java.lang.String str36 = slimTableFactory26.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory37 = slimTableFactory26.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap38 = slimTableFactory26.tableTypes;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap39 = slimTableFactory26.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass41 = slimTableFactory26.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap42 = slimTableFactory26.tableTypeArrays;
        slimTableFactory25.tableTypeArrays = strMap42;
        java.lang.String str45 = slimTableFactory25.makeTableType("");
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNull(wildcardClass17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(slimTableFactory25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(slimTableFactory37);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNull(wildcardClass41);
        org.junit.Assert.assertNotNull(strMap42);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
    }

    @Test
    public void test08022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08022");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str6 = slimTableFactory4.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory4.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap7;
        java.lang.String str10 = slimTableFactory0.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap11 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory0.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass15 = slimTableFactory13.getTableType("");
        java.lang.String str17 = slimTableFactory13.getFullTableName("hi!");
        fitnesse.testsystems.slim.Table table18 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory13.parseDefineTableTypeRow(table18, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertNotNull(slimTableFactory13);
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
    }

    @Test
    public void test08023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08023");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap5 = slimTableFactory0.tableTypeArrays;
        java.lang.String str7 = slimTableFactory0.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap9 = slimTableFactory0.tableTypes;
        boolean boolean11 = slimTableFactory0.hasColon("");
        fitnesse.testsystems.slim.Table table12 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext14 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable15 = slimTableFactory0.makeSlimTable(table12, "", slimTestContext14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test08024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08024");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        boolean boolean4 = slimTableFactory0.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory0.tableTypeArrays;
        boolean boolean8 = slimTableFactory0.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass11 = slimTableFactory9.getTableType("");
        java.lang.String str13 = slimTableFactory9.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory9.copy();
        boolean boolean16 = slimTableFactory9.hasColon("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass18 = slimTableFactory9.getTableType("");
        java.lang.String str20 = slimTableFactory9.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = slimTableFactory9.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass25 = slimTableFactory23.getTableType("");
        java.lang.String str27 = slimTableFactory23.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap28 = slimTableFactory23.tableTypeArrays;
        slimTableFactory22.tableTypeArrays = strMap28;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory30 = slimTableFactory22.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory31 = slimTableFactory30.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap32 = slimTableFactory31.tableTypeArrays;
        slimTableFactory21.tableTypeArrays = strMap32;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass35 = slimTableFactory21.getTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass37 = slimTableFactory21.getTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass39 = slimTableFactory21.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory40 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory41 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass43 = slimTableFactory41.getTableType("");
        java.lang.String str45 = slimTableFactory41.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap46 = slimTableFactory41.tableTypeArrays;
        slimTableFactory40.tableTypeArrays = strMap46;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory48 = slimTableFactory40.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory49 = slimTableFactory48.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass51 = slimTableFactory49.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap52 = slimTableFactory49.tableTypeArrays;
        slimTableFactory21.tableTypeArrays = strMap52;
        slimTableFactory0.tableTypeArrays = strMap52;
        java.lang.String str56 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap57 = slimTableFactory0.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap58 = null;
        slimTableFactory0.tableTypeArrays = strMap58;
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(slimTableFactory21);
        org.junit.Assert.assertNull(wildcardClass25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNotNull(slimTableFactory30);
        org.junit.Assert.assertNotNull(slimTableFactory31);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNull(wildcardClass35);
        org.junit.Assert.assertNull(wildcardClass37);
        org.junit.Assert.assertNull(wildcardClass39);
        org.junit.Assert.assertNull(wildcardClass43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(strMap46);
        org.junit.Assert.assertNotNull(slimTableFactory48);
        org.junit.Assert.assertNotNull(slimTableFactory49);
        org.junit.Assert.assertNull(wildcardClass51);
        org.junit.Assert.assertNotNull(strMap52);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hi!" + "'", str56, "hi!");
        org.junit.Assert.assertNotNull(strMap57);
    }

    @Test
    public void test08025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08025");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str6 = slimTableFactory4.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory4.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap7;
        java.lang.String str10 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap12 = slimTableFactory0.tableTypes;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap13 = slimTableFactory0.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass15 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = slimTableFactory0.copy();
        java.lang.String str19 = slimTableFactory0.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap20 = slimTableFactory0.tableTypeArrays;
        boolean boolean22 = slimTableFactory0.hasColon("");
        java.lang.String str24 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.Table table25 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable26 = slimTableFactory0.parseDefineTableTypeTable(table25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(slimTableFactory17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
    }

    @Test
    public void test08026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08026");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass5 = slimTableFactory3.getTableType("");
        java.lang.String str7 = slimTableFactory3.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory3.copy();
        boolean boolean10 = slimTableFactory3.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory3.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap12 = slimTableFactory3.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap12;
        boolean boolean15 = slimTableFactory0.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap16 = slimTableFactory0.tableTypes;
        java.lang.String str18 = slimTableFactory0.makeTableType("");
        java.lang.String str20 = slimTableFactory0.makeTableType("hi!");
        boolean boolean22 = slimTableFactory0.hasColon("");
        java.lang.Class<?> wildcardClass23 = slimTableFactory0.getClass();
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test08027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08027");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.lang.String str4 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory0.copy();
        boolean boolean7 = slimTableFactory0.hasColon("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass9 = slimTableFactory0.getTableType("");
        java.lang.String str11 = slimTableFactory0.makeTableType("");
        java.lang.String str13 = slimTableFactory0.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap14 = slimTableFactory0.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass16 = slimTableFactory0.getTableType("hi!");
        boolean boolean18 = slimTableFactory0.hasColon("");
        boolean boolean20 = slimTableFactory0.hasColon("");
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNull(wildcardClass16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test08028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08028");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str6 = slimTableFactory4.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory4.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap7;
        java.lang.String str10 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap12 = slimTableFactory0.tableTypes;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap13 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass17 = slimTableFactory15.getTableType("");
        java.lang.String str19 = slimTableFactory15.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap20 = slimTableFactory15.tableTypeArrays;
        slimTableFactory14.tableTypeArrays = strMap20;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = slimTableFactory14.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = slimTableFactory22.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass25 = slimTableFactory23.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap26 = slimTableFactory23.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap26;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass29 = slimTableFactory0.getTableType("hi!");
        fitnesse.testsystems.slim.Table table30 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext32 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable33 = slimTableFactory0.makeSlimTable(table30, "hi!", slimTestContext32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNull(wildcardClass17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(slimTableFactory22);
        org.junit.Assert.assertNotNull(slimTableFactory23);
        org.junit.Assert.assertNull(wildcardClass25);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNull(wildcardClass29);
    }

    @Test
    public void test08029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08029");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory0.copy();
        boolean boolean6 = slimTableFactory0.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap9 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory0.copy();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(slimTableFactory10);
    }

    @Test
    public void test08030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08030");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.lang.String str4 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory0.copy();
        boolean boolean7 = slimTableFactory0.hasColon("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass9 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap11 = slimTableFactory0.tableTypes;
        java.lang.String str13 = slimTableFactory0.getFullTableName("");
        boolean boolean15 = slimTableFactory0.hasColon("");
        java.lang.String str17 = slimTableFactory0.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory0.copy();
        boolean boolean20 = slimTableFactory0.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass22 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.Table table23 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext25 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable26 = slimTableFactory0.makeSlimTable(table23, "hi!", slimTestContext25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(wildcardClass22);
    }

    @Test
    public void test08031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08031");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        boolean boolean4 = slimTableFactory0.hasColon("");
        boolean boolean6 = slimTableFactory0.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass8 = slimTableFactory0.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str11 = slimTableFactory9.getFullTableName("hi!");
        java.lang.String str13 = slimTableFactory9.makeTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap14 = slimTableFactory9.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass17 = slimTableFactory15.getTableType("");
        java.lang.String str19 = slimTableFactory15.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap20 = slimTableFactory15.tableTypeArrays;
        slimTableFactory9.tableTypeArrays = strMap20;
        slimTableFactory0.tableTypeArrays = strMap20;
        boolean boolean24 = slimTableFactory0.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str28 = slimTableFactory26.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap29 = slimTableFactory26.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory30 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str32 = slimTableFactory30.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap33 = slimTableFactory30.tableTypeArrays;
        slimTableFactory26.tableTypeArrays = strMap33;
        java.lang.String str36 = slimTableFactory26.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory37 = slimTableFactory26.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap38 = slimTableFactory26.tableTypes;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap39 = slimTableFactory26.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass41 = slimTableFactory26.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap42 = slimTableFactory26.tableTypeArrays;
        slimTableFactory25.tableTypeArrays = strMap42;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap44 = slimTableFactory25.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap45 = slimTableFactory25.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory46 = slimTableFactory25.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap47 = slimTableFactory46.tableTypeArrays;
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNull(wildcardClass17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(slimTableFactory25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(slimTableFactory37);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNull(wildcardClass41);
        org.junit.Assert.assertNotNull(strMap42);
        org.junit.Assert.assertNotNull(strMap44);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNotNull(slimTableFactory46);
        org.junit.Assert.assertNotNull(strMap47);
    }

    @Test
    public void test08032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08032");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str6 = slimTableFactory4.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory4.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap7;
        java.lang.String str10 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap12 = slimTableFactory0.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap13 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory0.tableTypeArrays;
        java.lang.String str16 = slimTableFactory0.getFullTableName("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass18 = slimTableFactory0.getTableType("");
        java.lang.String str20 = slimTableFactory0.getFullTableName("");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
    }

    @Test
    public void test08033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08033");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass5 = slimTableFactory3.getTableType("");
        java.lang.String str7 = slimTableFactory3.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory3.copy();
        boolean boolean10 = slimTableFactory3.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory3.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap12 = slimTableFactory3.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap12;
        boolean boolean15 = slimTableFactory0.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap16 = slimTableFactory0.tableTypes;
        java.lang.String str18 = slimTableFactory0.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap19 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap20 = slimTableFactory0.tableTypeArrays;
        java.lang.String str22 = slimTableFactory0.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap23 = slimTableFactory0.tableTypes;
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(strMap23);
    }

    @Test
    public void test08034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08034");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass3 = slimTableFactory1.getTableType("");
        java.lang.String str5 = slimTableFactory1.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory1.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap6;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory9.tableTypeArrays;
        java.lang.String str12 = slimTableFactory9.makeTableType("hi!");
        java.lang.String str14 = slimTableFactory9.getFullTableName("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass16 = slimTableFactory9.getTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap17 = slimTableFactory9.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str20 = slimTableFactory18.getFullTableName("hi!");
        java.lang.String str22 = slimTableFactory18.makeTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap23 = slimTableFactory18.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = slimTableFactory18.copy();
        java.lang.String str26 = slimTableFactory18.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap27 = slimTableFactory18.tableTypeArrays;
        slimTableFactory9.tableTypeArrays = strMap27;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory29 = slimTableFactory9.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap30 = slimTableFactory9.tableTypes;
        java.lang.String str32 = slimTableFactory9.makeTableType("");
        java.lang.String str34 = slimTableFactory9.makeTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap35 = slimTableFactory9.tableTypes;
        boolean boolean37 = slimTableFactory9.hasColon("");
        java.lang.String str39 = slimTableFactory9.getFullTableName("");
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertNull(wildcardClass16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(slimTableFactory24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(slimTableFactory29);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
    }

    @Test
    public void test08035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08035");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.lang.String str3 = slimTableFactory0.makeTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass5 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap6 = slimTableFactory0.tableTypes;
        java.lang.String str8 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.Table table9 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory0.parseDefineTableTypeRow(table9, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!" + "'", str3, "hi!");
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }

    @Test
    public void test08036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08036");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        java.lang.String str5 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass8 = slimTableFactory6.getTableType("");
        boolean boolean10 = slimTableFactory6.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory6.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap11;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass16 = slimTableFactory14.getTableType("");
        java.lang.String str18 = slimTableFactory14.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap19 = slimTableFactory14.tableTypeArrays;
        slimTableFactory13.tableTypeArrays = strMap19;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = slimTableFactory13.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = slimTableFactory21.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap23 = slimTableFactory22.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap23;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass26 = slimTableFactory0.getTableType("");
        java.lang.String str28 = slimTableFactory0.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap29 = slimTableFactory0.tableTypes;
        java.lang.Class<?> wildcardClass30 = strMap29.getClass();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNull(wildcardClass16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(slimTableFactory21);
        org.junit.Assert.assertNotNull(slimTableFactory22);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNull(wildcardClass26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test08037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08037");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.lang.String str4 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory0.copy();
        boolean boolean7 = slimTableFactory0.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap9 = slimTableFactory8.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass13 = slimTableFactory11.getTableType("");
        java.lang.String str15 = slimTableFactory11.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory11.tableTypeArrays;
        slimTableFactory10.tableTypeArrays = strMap16;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory10.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap19 = slimTableFactory10.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str22 = slimTableFactory20.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap23 = slimTableFactory20.tableTypeArrays;
        java.lang.String str25 = slimTableFactory20.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap26 = slimTableFactory20.tableTypeArrays;
        slimTableFactory10.tableTypeArrays = strMap26;
        slimTableFactory8.tableTypeArrays = strMap26;
        java.lang.String str30 = slimTableFactory8.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory31 = slimTableFactory8.copy();
        fitnesse.testsystems.slim.Table table32 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable33 = slimTableFactory8.parseDefineTableTypeTable(table32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(slimTableFactory18);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(slimTableFactory31);
    }

    @Test
    public void test08038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08038");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.lang.String str4 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory0.copy();
        boolean boolean7 = slimTableFactory0.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory0.tableTypeArrays;
        java.lang.String str10 = slimTableFactory0.getFullTableName("hi!");
        java.lang.String str12 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap13 = slimTableFactory0.tableTypeArrays;
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNotNull(strMap13);
    }

    @Test
    public void test08039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08039");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap5 = slimTableFactory4.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory4.copy();
        boolean boolean8 = slimTableFactory4.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory4.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap10 = slimTableFactory9.tableTypes;
        java.lang.Class<?> wildcardClass11 = strMap10.getClass();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test08040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08040");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap5 = slimTableFactory4.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory4.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory6.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory6.tableTypeArrays;
        java.lang.String str10 = slimTableFactory6.getFullTableName("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass12 = slimTableFactory6.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass15 = slimTableFactory13.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass18 = slimTableFactory16.getTableType("");
        java.lang.String str20 = slimTableFactory16.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = slimTableFactory16.copy();
        boolean boolean23 = slimTableFactory16.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap24 = slimTableFactory16.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap25 = slimTableFactory16.tableTypeArrays;
        slimTableFactory13.tableTypeArrays = strMap25;
        boolean boolean28 = slimTableFactory13.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass30 = slimTableFactory13.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap31 = slimTableFactory13.tableTypeArrays;
        slimTableFactory6.tableTypeArrays = strMap31;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap33 = slimTableFactory6.tableTypes;
        java.lang.String str35 = slimTableFactory6.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap36 = null;
        slimTableFactory6.tableTypeArrays = strMap36;
        fitnesse.testsystems.slim.Table table38 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable39 = slimTableFactory6.parseDefineTableTypeTable(table38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(slimTableFactory21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(wildcardClass30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
    }

    @Test
    public void test08041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08041");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap5 = slimTableFactory4.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory4.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory4.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass9 = slimTableFactory4.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory10.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass13 = slimTableFactory11.getTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass15 = slimTableFactory11.getTableType("hi!");
        boolean boolean17 = slimTableFactory11.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap18 = slimTableFactory11.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory11.copy();
        java.lang.String str21 = slimTableFactory11.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap22 = slimTableFactory11.tableTypeArrays;
        slimTableFactory4.tableTypeArrays = strMap22;
        java.lang.String str25 = slimTableFactory4.makeTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass27 = slimTableFactory4.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory29 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass31 = slimTableFactory29.getTableType("");
        java.lang.String str33 = slimTableFactory29.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap34 = slimTableFactory29.tableTypeArrays;
        slimTableFactory28.tableTypeArrays = strMap34;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory36 = slimTableFactory28.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory37 = slimTableFactory36.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory38 = slimTableFactory36.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory39 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory40 = slimTableFactory39.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass42 = slimTableFactory40.getTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass44 = slimTableFactory40.getTableType("hi!");
        boolean boolean46 = slimTableFactory40.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap47 = slimTableFactory40.tableTypeArrays;
        slimTableFactory38.tableTypeArrays = strMap47;
        java.lang.String str50 = slimTableFactory38.makeTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass52 = slimTableFactory38.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory53 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory54 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass56 = slimTableFactory54.getTableType("");
        java.lang.String str58 = slimTableFactory54.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap59 = slimTableFactory54.tableTypeArrays;
        slimTableFactory53.tableTypeArrays = strMap59;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory61 = slimTableFactory53.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap62 = slimTableFactory53.tableTypes;
        java.lang.String str64 = slimTableFactory53.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap65 = slimTableFactory53.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap66 = slimTableFactory53.tableTypeArrays;
        slimTableFactory38.tableTypeArrays = strMap66;
        slimTableFactory4.tableTypeArrays = strMap66;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass70 = slimTableFactory4.getTableType("hi!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(slimTableFactory19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNull(wildcardClass27);
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNotNull(slimTableFactory36);
        org.junit.Assert.assertNotNull(slimTableFactory37);
        org.junit.Assert.assertNotNull(slimTableFactory38);
        org.junit.Assert.assertNotNull(slimTableFactory40);
        org.junit.Assert.assertNull(wildcardClass42);
        org.junit.Assert.assertNull(wildcardClass44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNull(wildcardClass52);
        org.junit.Assert.assertNull(wildcardClass56);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(strMap59);
        org.junit.Assert.assertNotNull(slimTableFactory61);
        org.junit.Assert.assertNotNull(strMap62);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "hi!" + "'", str64, "hi!");
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNull(wildcardClass70);
    }

    @Test
    public void test08042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08042");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass3 = slimTableFactory1.getTableType("");
        java.lang.String str5 = slimTableFactory1.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory1.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap6;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory0.copy();
        java.lang.String str10 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory0.tableTypeArrays;
        java.lang.String str13 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory0.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass17 = slimTableFactory15.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap18 = slimTableFactory15.tableTypes;
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertNull(wildcardClass17);
        org.junit.Assert.assertNotNull(strMap18);
    }

    @Test
    public void test08043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08043");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        boolean boolean4 = slimTableFactory0.hasColon("");
        boolean boolean6 = slimTableFactory0.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass8 = slimTableFactory0.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str11 = slimTableFactory9.getFullTableName("hi!");
        java.lang.String str13 = slimTableFactory9.makeTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap14 = slimTableFactory9.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass17 = slimTableFactory15.getTableType("");
        java.lang.String str19 = slimTableFactory15.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap20 = slimTableFactory15.tableTypeArrays;
        slimTableFactory9.tableTypeArrays = strMap20;
        slimTableFactory0.tableTypeArrays = strMap20;
        boolean boolean24 = slimTableFactory0.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap25 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap26 = slimTableFactory0.tableTypeArrays;
        java.lang.String str28 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory29 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.Table table30 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable31 = slimTableFactory29.parseDefineTableTypeTable(table30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNull(wildcardClass17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(slimTableFactory29);
    }

    @Test
    public void test08044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08044");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass3 = slimTableFactory1.getTableType("");
        java.lang.String str5 = slimTableFactory1.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory1.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap6;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory8.copy();
        java.lang.String str12 = slimTableFactory8.makeTableType("");
        java.lang.String str14 = slimTableFactory8.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap15 = slimTableFactory8.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str18 = slimTableFactory16.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap19 = slimTableFactory16.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory16.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap21 = slimTableFactory20.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = slimTableFactory20.copy();
        java.lang.String str24 = slimTableFactory22.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = slimTableFactory22.copy();
        java.lang.String str27 = slimTableFactory22.getFullTableName("hi!");
        boolean boolean29 = slimTableFactory22.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory30 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass32 = slimTableFactory30.getTableType("");
        java.lang.String str34 = slimTableFactory30.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap35 = slimTableFactory30.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap36 = slimTableFactory30.tableTypeArrays;
        java.lang.String str38 = slimTableFactory30.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory39 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str41 = slimTableFactory39.getFullTableName("hi!");
        java.lang.String str43 = slimTableFactory39.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory44 = slimTableFactory39.copy();
        java.lang.String str46 = slimTableFactory39.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory47 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str49 = slimTableFactory47.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap50 = slimTableFactory47.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory51 = slimTableFactory47.copy();
        boolean boolean53 = slimTableFactory47.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap54 = slimTableFactory47.tableTypeArrays;
        slimTableFactory39.tableTypeArrays = strMap54;
        slimTableFactory30.tableTypeArrays = strMap54;
        java.util.Map<java.lang.String, java.lang.String> strMap57 = slimTableFactory30.tableTypeArrays;
        slimTableFactory22.tableTypeArrays = strMap57;
        slimTableFactory8.tableTypeArrays = strMap57;
        java.lang.Class<?> wildcardClass60 = strMap57.getClass();
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(slimTableFactory20);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(slimTableFactory22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(wildcardClass32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(slimTableFactory44);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hi!" + "'", str49, "hi!");
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNotNull(slimTableFactory51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(strMap57);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test08045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08045");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory0.copy();
        boolean boolean7 = slimTableFactory0.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap9 = slimTableFactory8.tableTypes;
        boolean boolean11 = slimTableFactory8.hasColon("");
        boolean boolean13 = slimTableFactory8.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory8.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory8.copy();
        fitnesse.testsystems.slim.Table table16 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable17 = slimTableFactory8.parseDefineTableTypeTable(table16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertNotNull(slimTableFactory15);
    }

    @Test
    public void test08046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08046");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.lang.String str4 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory0.copy();
        boolean boolean7 = slimTableFactory0.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory9.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass12 = slimTableFactory10.getTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory10.getTableType("hi!");
        boolean boolean16 = slimTableFactory10.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap17 = slimTableFactory10.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap17;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass22 = slimTableFactory20.getTableType("");
        java.lang.String str24 = slimTableFactory20.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap25 = slimTableFactory20.tableTypeArrays;
        slimTableFactory19.tableTypeArrays = strMap25;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = slimTableFactory19.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = slimTableFactory27.copy();
        boolean boolean30 = slimTableFactory27.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap31 = slimTableFactory27.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass33 = slimTableFactory27.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory34 = slimTableFactory27.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap35 = slimTableFactory34.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap35;
        java.lang.String str38 = slimTableFactory0.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory39 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap40 = slimTableFactory39.tableTypeArrays;
        boolean boolean42 = slimTableFactory39.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap43 = slimTableFactory39.tableTypes;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap44 = slimTableFactory39.tableTypes;
        fitnesse.testsystems.slim.Table table45 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory39.parseDefineTableTypeRow(table45, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNull(wildcardClass22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(slimTableFactory27);
        org.junit.Assert.assertNotNull(slimTableFactory28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNull(wildcardClass33);
        org.junit.Assert.assertNotNull(slimTableFactory34);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory39);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(strMap43);
        org.junit.Assert.assertNotNull(strMap44);
    }

    @Test
    public void test08047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08047");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.lang.String str3 = slimTableFactory0.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap4 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory5.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory6.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory6.tableTypeArrays;
        java.lang.String str10 = slimTableFactory6.getFullTableName("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass12 = slimTableFactory6.getTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory6.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap15 = slimTableFactory6.tableTypes;
        java.lang.String str17 = slimTableFactory6.getFullTableName("");
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!" + "'", str3, "hi!");
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test08048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08048");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass3 = slimTableFactory1.getTableType("");
        java.lang.String str5 = slimTableFactory1.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory1.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap6;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory9.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass13 = slimTableFactory11.getTableType("");
        java.lang.String str15 = slimTableFactory11.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory11.copy();
        boolean boolean18 = slimTableFactory11.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap19 = slimTableFactory11.tableTypeArrays;
        slimTableFactory9.tableTypeArrays = strMap19;
        java.lang.String str22 = slimTableFactory9.getFullTableName("hi!");
        java.lang.String str24 = slimTableFactory9.makeTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass26 = slimTableFactory9.getTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass28 = slimTableFactory9.getTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass30 = slimTableFactory9.getTableType("hi!");
        java.lang.String str32 = slimTableFactory9.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory33 = slimTableFactory9.copy();
        fitnesse.testsystems.slim.Table table34 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory33.parseDefineTableTypeRow(table34, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNull(wildcardClass26);
        org.junit.Assert.assertNull(wildcardClass28);
        org.junit.Assert.assertNull(wildcardClass30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory33);
    }

    @Test
    public void test08049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08049");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass3 = slimTableFactory1.getTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass5 = slimTableFactory1.getTableType("hi!");
        boolean boolean7 = slimTableFactory1.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory1.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass10 = slimTableFactory1.getTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass12 = slimTableFactory1.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass15 = slimTableFactory13.getTableType("");
        boolean boolean17 = slimTableFactory13.hasColon("");
        boolean boolean19 = slimTableFactory13.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass21 = slimTableFactory13.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str24 = slimTableFactory22.getFullTableName("hi!");
        java.lang.String str26 = slimTableFactory22.makeTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap27 = slimTableFactory22.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass30 = slimTableFactory28.getTableType("");
        java.lang.String str32 = slimTableFactory28.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap33 = slimTableFactory28.tableTypeArrays;
        slimTableFactory22.tableTypeArrays = strMap33;
        slimTableFactory13.tableTypeArrays = strMap33;
        java.lang.String str37 = slimTableFactory13.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap38 = slimTableFactory13.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap38;
        java.lang.Class<?> wildcardClass40 = slimTableFactory1.getClass();
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(wildcardClass21);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNull(wildcardClass30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test08050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08050");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass3 = slimTableFactory1.getTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass5 = slimTableFactory1.getTableType("hi!");
        boolean boolean7 = slimTableFactory1.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.Table table10 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable11 = slimTableFactory9.parseDefineTableTypeTable(table10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
    }

    @Test
    public void test08051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08051");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory0.copy();
        boolean boolean6 = slimTableFactory0.hasColon("hi!");
        boolean boolean8 = slimTableFactory0.hasColon("");
        java.lang.String str10 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str13 = slimTableFactory11.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory11.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory11.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap16 = slimTableFactory15.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = slimTableFactory15.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = slimTableFactory17.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap19 = slimTableFactory17.tableTypeArrays;
        java.lang.String str21 = slimTableFactory17.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass25 = slimTableFactory23.getTableType("");
        java.lang.String str27 = slimTableFactory23.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap28 = slimTableFactory23.tableTypeArrays;
        slimTableFactory22.tableTypeArrays = strMap28;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap30 = slimTableFactory22.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory31 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str33 = slimTableFactory31.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap34 = slimTableFactory31.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory35 = slimTableFactory31.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap36 = slimTableFactory35.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory37 = slimTableFactory35.copy();
        java.lang.String str39 = slimTableFactory37.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap40 = slimTableFactory37.tableTypeArrays;
        slimTableFactory22.tableTypeArrays = strMap40;
        slimTableFactory17.tableTypeArrays = strMap40;
        slimTableFactory0.tableTypeArrays = strMap40;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory44 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str46 = slimTableFactory44.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap47 = slimTableFactory44.tableTypeArrays;
        java.lang.String str49 = slimTableFactory44.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory50 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass52 = slimTableFactory50.getTableType("");
        boolean boolean54 = slimTableFactory50.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap55 = slimTableFactory50.tableTypeArrays;
        slimTableFactory44.tableTypeArrays = strMap55;
        slimTableFactory0.tableTypeArrays = strMap55;
        boolean boolean59 = slimTableFactory0.hasColon("");
        java.lang.String str61 = slimTableFactory0.getFullTableName("hi!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(slimTableFactory17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertNull(wildcardClass25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNotNull(slimTableFactory35);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(slimTableFactory37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hi!" + "'", str39, "hi!");
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hi!" + "'", str46, "hi!");
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNull(wildcardClass52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(strMap55);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "hi!" + "'", str61, "hi!");
    }

    @Test
    public void test08052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08052");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap5 = slimTableFactory4.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory4.copy();
        java.lang.String str8 = slimTableFactory6.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory6.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory9.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap11 = slimTableFactory9.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass13 = slimTableFactory9.getTableType("hi!");
        java.lang.String str15 = slimTableFactory9.makeTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass17 = slimTableFactory9.getTableType("hi!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNull(wildcardClass17);
    }

    @Test
    public void test08053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08053");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.lang.String str4 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory0.copy();
        boolean boolean7 = slimTableFactory0.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap9 = slimTableFactory8.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass13 = slimTableFactory11.getTableType("");
        java.lang.String str15 = slimTableFactory11.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory11.tableTypeArrays;
        slimTableFactory10.tableTypeArrays = strMap16;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory10.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap19 = slimTableFactory10.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str22 = slimTableFactory20.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap23 = slimTableFactory20.tableTypeArrays;
        java.lang.String str25 = slimTableFactory20.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap26 = slimTableFactory20.tableTypeArrays;
        slimTableFactory10.tableTypeArrays = strMap26;
        slimTableFactory8.tableTypeArrays = strMap26;
        java.lang.String str30 = slimTableFactory8.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory31 = slimTableFactory8.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory32 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass34 = slimTableFactory32.getTableType("");
        java.lang.String str36 = slimTableFactory32.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap37 = slimTableFactory32.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap38 = slimTableFactory32.tableTypeArrays;
        java.lang.String str40 = slimTableFactory32.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory41 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory42 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass44 = slimTableFactory42.getTableType("");
        java.lang.String str46 = slimTableFactory42.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap47 = slimTableFactory42.tableTypeArrays;
        slimTableFactory41.tableTypeArrays = strMap47;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory49 = slimTableFactory41.copy();
        java.lang.String str51 = slimTableFactory41.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap52 = slimTableFactory41.tableTypeArrays;
        slimTableFactory32.tableTypeArrays = strMap52;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap54 = slimTableFactory32.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass56 = slimTableFactory32.getTableType("hi!");
        boolean boolean58 = slimTableFactory32.hasColon("hi!");
        java.lang.String str60 = slimTableFactory32.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap61 = slimTableFactory32.tableTypeArrays;
        slimTableFactory31.tableTypeArrays = strMap61;
        fitnesse.testsystems.slim.Table table63 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext65 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable66 = slimTableFactory31.makeSlimTable(table63, "", slimTestContext65);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(slimTableFactory18);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(slimTableFactory31);
        org.junit.Assert.assertNull(wildcardClass34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "hi!" + "'", str40, "hi!");
        org.junit.Assert.assertNull(wildcardClass44);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNotNull(slimTableFactory49);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "hi!" + "'", str51, "hi!");
        org.junit.Assert.assertNotNull(strMap52);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNull(wildcardClass56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "hi!" + "'", str60, "hi!");
        org.junit.Assert.assertNotNull(strMap61);
    }

    @Test
    public void test08054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08054");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str6 = slimTableFactory4.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory4.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap7;
        java.lang.String str10 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap12 = slimTableFactory0.tableTypes;
        boolean boolean14 = slimTableFactory0.hasColon("hi!");
        boolean boolean16 = slimTableFactory0.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap17 = slimTableFactory0.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass19 = slimTableFactory0.getTableType("hi!");
        boolean boolean21 = slimTableFactory0.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap22 = slimTableFactory0.tableTypeArrays;
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strMap22);
    }

    @Test
    public void test08055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08055");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.lang.String str4 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory5.copy();
        java.lang.String str8 = slimTableFactory5.makeTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass10 = slimTableFactory5.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory5.copy();
        java.lang.String str13 = slimTableFactory11.getFullTableName("hi!");
        java.lang.Class<?> wildcardClass14 = slimTableFactory11.getClass();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test08056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08056");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap5 = slimTableFactory4.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory4.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory6.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory6.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass11 = slimTableFactory9.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory12.getTableType("");
        java.lang.String str16 = slimTableFactory12.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = slimTableFactory12.copy();
        boolean boolean19 = slimTableFactory12.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap20 = slimTableFactory12.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap21 = slimTableFactory12.tableTypeArrays;
        slimTableFactory9.tableTypeArrays = strMap21;
        slimTableFactory6.tableTypeArrays = strMap21;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str26 = slimTableFactory24.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap27 = slimTableFactory24.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = slimTableFactory24.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = slimTableFactory24.tableTypeArrays;
        slimTableFactory6.tableTypeArrays = strMap29;
        java.util.Map<java.lang.String, java.lang.String> strMap31 = slimTableFactory6.tableTypeArrays;
        fitnesse.testsystems.slim.Table table32 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory6.parseDefineTableTypeRow(table32, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(slimTableFactory17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(slimTableFactory28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(strMap31);
    }

    @Test
    public void test08057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08057");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass5 = slimTableFactory3.getTableType("");
        java.lang.String str7 = slimTableFactory3.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory3.copy();
        boolean boolean10 = slimTableFactory3.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory3.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap12 = slimTableFactory3.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap12;
        boolean boolean15 = slimTableFactory0.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap16 = slimTableFactory0.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass18 = slimTableFactory0.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory19.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass22 = slimTableFactory20.getTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass24 = slimTableFactory20.getTableType("hi!");
        boolean boolean26 = slimTableFactory20.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap27 = slimTableFactory20.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = slimTableFactory20.copy();
        java.lang.String str30 = slimTableFactory20.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap31 = slimTableFactory20.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap31;
        java.util.Map<java.lang.String, java.lang.String> strMap33 = slimTableFactory0.tableTypeArrays;
        boolean boolean35 = slimTableFactory0.hasColon("hi!");
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertNotNull(slimTableFactory20);
        org.junit.Assert.assertNull(wildcardClass22);
        org.junit.Assert.assertNull(wildcardClass24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(slimTableFactory28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test08058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08058");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory0.copy();
        boolean boolean6 = slimTableFactory0.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap9 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap10 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.Table table13 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext15 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable16 = slimTableFactory0.makeSlimTable(table13, "", slimTestContext15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNotNull(slimTableFactory12);
    }

    @Test
    public void test08059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08059");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.lang.String str4 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory0.copy();
        java.lang.String str7 = slimTableFactory0.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap9 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory0.copy();
        boolean boolean12 = slimTableFactory10.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory10.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass15 = slimTableFactory10.getTableType("");
        java.lang.Class<?> wildcardClass16 = slimTableFactory10.getClass();
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(slimTableFactory13);
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test08060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08060");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass5 = slimTableFactory3.getTableType("");
        java.lang.String str7 = slimTableFactory3.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory3.copy();
        boolean boolean10 = slimTableFactory3.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory3.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap12 = slimTableFactory3.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap12;
        boolean boolean15 = slimTableFactory0.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap16 = slimTableFactory0.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass18 = slimTableFactory0.getTableType("");
        java.lang.String str20 = slimTableFactory0.getFullTableName("hi!");
        java.lang.String str22 = slimTableFactory0.makeTableType("");
        java.lang.Class<?> wildcardClass23 = slimTableFactory0.getClass();
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test08061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08061");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        boolean boolean4 = slimTableFactory0.hasColon("");
        boolean boolean6 = slimTableFactory0.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass8 = slimTableFactory0.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str11 = slimTableFactory9.getFullTableName("hi!");
        java.lang.String str13 = slimTableFactory9.makeTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap14 = slimTableFactory9.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass17 = slimTableFactory15.getTableType("");
        java.lang.String str19 = slimTableFactory15.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap20 = slimTableFactory15.tableTypeArrays;
        slimTableFactory9.tableTypeArrays = strMap20;
        slimTableFactory0.tableTypeArrays = strMap20;
        boolean boolean24 = slimTableFactory0.hasColon("");
        java.lang.String str26 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap27 = slimTableFactory0.tableTypes;
        java.lang.String str29 = slimTableFactory0.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory30 = slimTableFactory0.copy();
        java.lang.String str32 = slimTableFactory30.makeTableType("");
        fitnesse.testsystems.slim.Table table33 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory30.parseDefineTableTypeRow(table33, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNull(wildcardClass17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
    }

    @Test
    public void test08062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08062");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.lang.String str4 = slimTableFactory0.makeTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap5 = slimTableFactory0.tableTypes;
        java.lang.String str7 = slimTableFactory0.makeTableType("hi!");
        java.lang.String str9 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.Table table10 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory0.parseDefineTableTypeRow(table10, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test08063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08063");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.lang.String str4 = slimTableFactory0.makeTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap5 = slimTableFactory0.tableTypes;
        java.lang.String str7 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str10 = slimTableFactory8.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory8.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory8.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap13 = slimTableFactory12.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory12.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap15 = slimTableFactory14.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory14.tableTypeArrays;
        java.lang.String str18 = slimTableFactory14.getFullTableName("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass20 = slimTableFactory14.getTableType("hi!");
        boolean boolean22 = slimTableFactory14.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str25 = slimTableFactory23.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap26 = slimTableFactory23.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = slimTableFactory23.copy();
        boolean boolean29 = slimTableFactory23.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap30 = slimTableFactory23.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap31 = slimTableFactory23.tableTypeArrays;
        slimTableFactory14.tableTypeArrays = strMap31;
        slimTableFactory0.tableTypeArrays = strMap31;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap34 = slimTableFactory0.tableTypes;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap35 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory36 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory37 = slimTableFactory36.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory38 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory39 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass41 = slimTableFactory39.getTableType("");
        java.lang.String str43 = slimTableFactory39.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap44 = slimTableFactory39.tableTypeArrays;
        slimTableFactory38.tableTypeArrays = strMap44;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory46 = slimTableFactory38.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory47 = slimTableFactory38.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap48 = slimTableFactory47.tableTypeArrays;
        slimTableFactory37.tableTypeArrays = strMap48;
        slimTableFactory0.tableTypeArrays = strMap48;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass52 = slimTableFactory0.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap53 = slimTableFactory0.tableTypeArrays;
        java.lang.String str55 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap56 = slimTableFactory0.tableTypeArrays;
        java.lang.Class<?> wildcardClass57 = slimTableFactory0.getClass();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(slimTableFactory27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(slimTableFactory37);
        org.junit.Assert.assertNull(wildcardClass41);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(strMap44);
        org.junit.Assert.assertNotNull(slimTableFactory46);
        org.junit.Assert.assertNotNull(slimTableFactory47);
        org.junit.Assert.assertNotNull(strMap48);
        org.junit.Assert.assertNull(wildcardClass52);
        org.junit.Assert.assertNotNull(strMap53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hi!" + "'", str55, "hi!");
        org.junit.Assert.assertNotNull(strMap56);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test08064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08064");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.lang.String str4 = slimTableFactory0.makeTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap5 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory0.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass8 = slimTableFactory0.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap9 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.Table table10 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext12 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable13 = slimTableFactory0.makeSlimTable(table10, "", slimTestContext12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertNotNull(strMap9);
    }

    @Test
    public void test08065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08065");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.lang.String str4 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap6 = slimTableFactory0.tableTypes;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory0.tableTypes;
        java.lang.String str9 = slimTableFactory0.makeTableType("hi!");
        java.lang.String str11 = slimTableFactory0.getFullTableName("");
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test08066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08066");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory0.copy();
        boolean boolean6 = slimTableFactory0.hasColon("hi!");
        boolean boolean8 = slimTableFactory0.hasColon("");
        java.lang.String str10 = slimTableFactory0.makeTableType("");
        java.lang.String str12 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory13.tableTypeArrays;
        java.lang.String str16 = slimTableFactory13.getFullTableName("hi!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(slimTableFactory13);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
    }

    @Test
    public void test08067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08067");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass3 = slimTableFactory1.getTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass5 = slimTableFactory1.getTableType("hi!");
        boolean boolean7 = slimTableFactory1.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory1.tableTypeArrays;
        java.lang.String str10 = slimTableFactory1.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str13 = slimTableFactory11.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory11.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory11.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap16 = slimTableFactory15.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = slimTableFactory15.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass19 = slimTableFactory15.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap20 = slimTableFactory15.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = slimTableFactory21.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = slimTableFactory21.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass25 = slimTableFactory21.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str28 = slimTableFactory26.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap29 = slimTableFactory26.tableTypeArrays;
        java.lang.String str31 = slimTableFactory26.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap32 = slimTableFactory26.tableTypeArrays;
        slimTableFactory21.tableTypeArrays = strMap32;
        java.util.Map<java.lang.String, java.lang.String> strMap34 = slimTableFactory21.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory35 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass37 = slimTableFactory35.getTableType("");
        boolean boolean39 = slimTableFactory35.hasColon("");
        boolean boolean41 = slimTableFactory35.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass43 = slimTableFactory35.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory44 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str46 = slimTableFactory44.getFullTableName("hi!");
        java.lang.String str48 = slimTableFactory44.makeTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap49 = slimTableFactory44.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory50 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass52 = slimTableFactory50.getTableType("");
        java.lang.String str54 = slimTableFactory50.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap55 = slimTableFactory50.tableTypeArrays;
        slimTableFactory44.tableTypeArrays = strMap55;
        slimTableFactory35.tableTypeArrays = strMap55;
        boolean boolean59 = slimTableFactory35.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap60 = slimTableFactory35.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap61 = slimTableFactory35.tableTypeArrays;
        slimTableFactory21.tableTypeArrays = strMap61;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory63 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str65 = slimTableFactory63.getFullTableName("hi!");
        java.lang.String str67 = slimTableFactory63.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap68 = null;
        slimTableFactory63.tableTypeArrays = strMap68;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory70 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str72 = slimTableFactory70.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap73 = slimTableFactory70.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory74 = slimTableFactory70.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap75 = slimTableFactory74.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory76 = slimTableFactory74.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap77 = slimTableFactory76.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap78 = slimTableFactory76.tableTypeArrays;
        slimTableFactory63.tableTypeArrays = strMap78;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory80 = slimTableFactory63.copy();
        java.lang.String str82 = slimTableFactory63.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory83 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass85 = slimTableFactory83.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap86 = slimTableFactory83.tableTypeArrays;
        slimTableFactory63.tableTypeArrays = strMap86;
        slimTableFactory21.tableTypeArrays = strMap86;
        slimTableFactory15.tableTypeArrays = strMap86;
        slimTableFactory1.tableTypeArrays = strMap86;
        java.lang.String str92 = slimTableFactory1.getFullTableName("");
        java.lang.String str94 = slimTableFactory1.makeTableType("hi!");
        java.lang.String str96 = slimTableFactory1.makeTableType("");
        java.lang.String str98 = slimTableFactory1.getFullTableName("");
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(slimTableFactory17);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(slimTableFactory22);
        org.junit.Assert.assertNotNull(slimTableFactory23);
        org.junit.Assert.assertNull(wildcardClass25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNull(wildcardClass37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(wildcardClass43);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hi!" + "'", str46, "hi!");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(strMap49);
        org.junit.Assert.assertNull(wildcardClass52);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(strMap55);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(strMap60);
        org.junit.Assert.assertNotNull(strMap61);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "hi!" + "'", str65, "hi!");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "hi!" + "'", str72, "hi!");
        org.junit.Assert.assertNotNull(strMap73);
        org.junit.Assert.assertNotNull(slimTableFactory74);
        org.junit.Assert.assertNotNull(strMap75);
        org.junit.Assert.assertNotNull(slimTableFactory76);
        org.junit.Assert.assertNotNull(strMap77);
        org.junit.Assert.assertNotNull(strMap78);
        org.junit.Assert.assertNotNull(slimTableFactory80);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertNull(wildcardClass85);
        org.junit.Assert.assertNotNull(strMap86);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "hi!" + "'", str94, "hi!");
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "" + "'", str96, "");
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "" + "'", str98, "");
    }

    @Test
    public void test08068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08068");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory0.copy();
        boolean boolean7 = slimTableFactory0.hasColon("");
        java.lang.String str9 = slimTableFactory0.getFullTableName("hi!");
        boolean boolean11 = slimTableFactory0.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory12.getTableType("");
        java.lang.String str16 = slimTableFactory12.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = slimTableFactory12.copy();
        boolean boolean19 = slimTableFactory12.hasColon("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass21 = slimTableFactory12.getTableType("");
        java.lang.String str23 = slimTableFactory12.makeTableType("");
        java.lang.String str25 = slimTableFactory12.makeTableType("hi!");
        java.lang.String str27 = slimTableFactory12.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass30 = slimTableFactory28.getTableType("");
        java.lang.String str32 = slimTableFactory28.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory33 = slimTableFactory28.copy();
        boolean boolean35 = slimTableFactory28.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap36 = slimTableFactory28.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap37 = slimTableFactory28.tableTypeArrays;
        slimTableFactory12.tableTypeArrays = strMap37;
        slimTableFactory0.tableTypeArrays = strMap37;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass41 = slimTableFactory0.getTableType("hi!");
        java.lang.String str43 = slimTableFactory0.makeTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass45 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.Table table46 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory0.parseDefineTableTypeRow(table46, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(slimTableFactory17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(wildcardClass21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNull(wildcardClass30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(slimTableFactory33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNull(wildcardClass41);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNull(wildcardClass45);
    }

    @Test
    public void test08069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08069");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.lang.String str4 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory5.getTableType("");
        java.lang.String str9 = slimTableFactory5.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory5.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap11 = slimTableFactory5.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str14 = slimTableFactory12.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap15 = slimTableFactory12.tableTypeArrays;
        java.lang.String str17 = slimTableFactory12.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap18 = slimTableFactory12.tableTypeArrays;
        java.lang.String str20 = slimTableFactory12.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap21 = slimTableFactory12.tableTypeArrays;
        slimTableFactory5.tableTypeArrays = strMap21;
        java.util.Map<java.lang.String, java.lang.String> strMap23 = slimTableFactory5.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap23;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass26 = slimTableFactory0.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.Table table29 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext31 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable32 = slimTableFactory28.makeSlimTable(table29, "hi!", slimTestContext31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNull(wildcardClass26);
        org.junit.Assert.assertNotNull(slimTableFactory27);
        org.junit.Assert.assertNotNull(slimTableFactory28);
    }

    @Test
    public void test08070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08070");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        java.lang.String str5 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass8 = slimTableFactory6.getTableType("");
        boolean boolean10 = slimTableFactory6.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory6.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap11;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass16 = slimTableFactory14.getTableType("");
        java.lang.String str18 = slimTableFactory14.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap19 = slimTableFactory14.tableTypeArrays;
        slimTableFactory13.tableTypeArrays = strMap19;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = slimTableFactory13.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = slimTableFactory21.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap23 = slimTableFactory22.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap23;
        java.util.Map<java.lang.String, java.lang.String> strMap25 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap26 = slimTableFactory0.tableTypes;
        java.lang.String str28 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.Table table29 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory0.parseDefineTableTypeRow(table29, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNull(wildcardClass16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(slimTableFactory21);
        org.junit.Assert.assertNotNull(slimTableFactory22);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
    }

    @Test
    public void test08071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08071");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.lang.String str4 = slimTableFactory0.makeTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap5 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory0.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass8 = slimTableFactory0.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap9 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory0.copy();
        java.lang.String str12 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory13.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass16 = slimTableFactory14.getTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass18 = slimTableFactory14.getTableType("hi!");
        boolean boolean20 = slimTableFactory14.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap21 = slimTableFactory14.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap21;
        fitnesse.testsystems.slim.Table table23 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory0.parseDefineTableTypeRow(table23, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertNull(wildcardClass16);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strMap21);
    }

    @Test
    public void test08072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08072");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory2 = slimTableFactory0.copy();
        boolean boolean4 = slimTableFactory2.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory2.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory2.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap8 = slimTableFactory2.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap9 = slimTableFactory2.tableTypeArrays;
        boolean boolean11 = slimTableFactory2.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass13 = slimTableFactory2.getTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass15 = slimTableFactory2.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap16 = null;
        slimTableFactory2.tableTypeArrays = strMap16;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap18 = slimTableFactory2.tableTypes;
        java.lang.Class<?> wildcardClass19 = strMap18.getClass();
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(slimTableFactory2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test08073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08073");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass3 = slimTableFactory1.getTableType("");
        java.lang.String str5 = slimTableFactory1.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory1.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap6;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory0.copy();
        java.lang.String str10 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str15 = slimTableFactory13.getFullTableName("hi!");
        java.lang.String str17 = slimTableFactory13.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory13.copy();
        java.lang.String str20 = slimTableFactory13.makeTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass22 = slimTableFactory13.getTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass24 = slimTableFactory13.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = slimTableFactory13.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass28 = slimTableFactory26.getTableType("");
        java.lang.String str30 = slimTableFactory26.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory31 = slimTableFactory26.copy();
        boolean boolean33 = slimTableFactory26.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap34 = slimTableFactory26.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap35 = slimTableFactory26.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory36 = slimTableFactory26.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory37 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str39 = slimTableFactory37.getFullTableName("hi!");
        java.lang.String str41 = slimTableFactory37.makeTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap42 = slimTableFactory37.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory43 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass45 = slimTableFactory43.getTableType("");
        java.lang.String str47 = slimTableFactory43.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap48 = slimTableFactory43.tableTypeArrays;
        slimTableFactory37.tableTypeArrays = strMap48;
        slimTableFactory36.tableTypeArrays = strMap48;
        java.lang.String str52 = slimTableFactory36.makeTableType("");
        boolean boolean54 = slimTableFactory36.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory55 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass57 = slimTableFactory55.getTableType("");
        java.lang.String str59 = slimTableFactory55.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory60 = slimTableFactory55.copy();
        boolean boolean62 = slimTableFactory55.hasColon("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass64 = slimTableFactory55.getTableType("");
        java.lang.String str66 = slimTableFactory55.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory67 = slimTableFactory55.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory68 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory69 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass71 = slimTableFactory69.getTableType("");
        java.lang.String str73 = slimTableFactory69.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap74 = slimTableFactory69.tableTypeArrays;
        slimTableFactory68.tableTypeArrays = strMap74;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory76 = slimTableFactory68.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory77 = slimTableFactory76.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory78 = slimTableFactory76.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory79 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory80 = slimTableFactory79.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass82 = slimTableFactory80.getTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass84 = slimTableFactory80.getTableType("hi!");
        boolean boolean86 = slimTableFactory80.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap87 = slimTableFactory80.tableTypeArrays;
        slimTableFactory78.tableTypeArrays = strMap87;
        slimTableFactory55.tableTypeArrays = strMap87;
        java.util.Map<java.lang.String, java.lang.String> strMap90 = slimTableFactory55.tableTypeArrays;
        slimTableFactory36.tableTypeArrays = strMap90;
        slimTableFactory25.tableTypeArrays = strMap90;
        slimTableFactory0.tableTypeArrays = strMap90;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory94 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.Table table95 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable96 = slimTableFactory0.parseDefineTableTypeTable(table95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(slimTableFactory18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNull(wildcardClass22);
        org.junit.Assert.assertNull(wildcardClass24);
        org.junit.Assert.assertNotNull(slimTableFactory25);
        org.junit.Assert.assertNull(wildcardClass28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(slimTableFactory31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(slimTableFactory36);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hi!" + "'", str39, "hi!");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(strMap42);
        org.junit.Assert.assertNull(wildcardClass45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(strMap48);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(wildcardClass57);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(slimTableFactory60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(wildcardClass64);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(slimTableFactory67);
        org.junit.Assert.assertNull(wildcardClass71);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(strMap74);
        org.junit.Assert.assertNotNull(slimTableFactory76);
        org.junit.Assert.assertNotNull(slimTableFactory77);
        org.junit.Assert.assertNotNull(slimTableFactory78);
        org.junit.Assert.assertNotNull(slimTableFactory80);
        org.junit.Assert.assertNull(wildcardClass82);
        org.junit.Assert.assertNull(wildcardClass84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(strMap87);
        org.junit.Assert.assertNotNull(strMap90);
        org.junit.Assert.assertNotNull(slimTableFactory94);
    }

    @Test
    public void test08074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08074");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.lang.String str4 = slimTableFactory0.makeTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap5 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory0.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass8 = slimTableFactory0.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap9 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory0.copy();
        java.lang.String str12 = slimTableFactory10.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap13 = slimTableFactory10.tableTypes;
        java.lang.String str15 = slimTableFactory10.getFullTableName("");
        fitnesse.testsystems.slim.Table table16 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext18 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable19 = slimTableFactory10.makeSlimTable(table16, "hi!", slimTestContext18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test08075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08075");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory2 = slimTableFactory0.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass4 = slimTableFactory0.getTableType("hi!");
        java.lang.String str6 = slimTableFactory0.makeTableType("hi!");
        fitnesse.testsystems.slim.Table table7 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable8 = slimTableFactory0.parseDefineTableTypeTable(table7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(slimTableFactory2);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
    }

    @Test
    public void test08076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08076");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass3 = slimTableFactory1.getTableType("");
        java.lang.String str5 = slimTableFactory1.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory1.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap6;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory9.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass13 = slimTableFactory11.getTableType("");
        java.lang.String str15 = slimTableFactory11.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory11.copy();
        boolean boolean18 = slimTableFactory11.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap19 = slimTableFactory11.tableTypeArrays;
        slimTableFactory9.tableTypeArrays = strMap19;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = slimTableFactory9.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = slimTableFactory21.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap23 = slimTableFactory22.tableTypeArrays;
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(slimTableFactory21);
        org.junit.Assert.assertNotNull(slimTableFactory22);
        org.junit.Assert.assertNotNull(strMap23);
    }

    @Test
    public void test08077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08077");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap5 = slimTableFactory4.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory4.copy();
        java.lang.String str8 = slimTableFactory6.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory6.copy();
        java.lang.String str11 = slimTableFactory6.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str14 = slimTableFactory12.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap15 = slimTableFactory12.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str18 = slimTableFactory16.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap19 = slimTableFactory16.tableTypeArrays;
        slimTableFactory12.tableTypeArrays = strMap19;
        java.lang.String str22 = slimTableFactory12.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = slimTableFactory12.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass25 = slimTableFactory23.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass28 = slimTableFactory26.getTableType("");
        boolean boolean30 = slimTableFactory26.hasColon("");
        boolean boolean32 = slimTableFactory26.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass34 = slimTableFactory26.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory35 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str37 = slimTableFactory35.getFullTableName("hi!");
        java.lang.String str39 = slimTableFactory35.makeTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap40 = slimTableFactory35.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory41 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass43 = slimTableFactory41.getTableType("");
        java.lang.String str45 = slimTableFactory41.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap46 = slimTableFactory41.tableTypeArrays;
        slimTableFactory35.tableTypeArrays = strMap46;
        slimTableFactory26.tableTypeArrays = strMap46;
        slimTableFactory23.tableTypeArrays = strMap46;
        slimTableFactory6.tableTypeArrays = strMap46;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass52 = slimTableFactory6.getTableType("hi!");
        fitnesse.testsystems.slim.Table table53 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory6.parseDefineTableTypeRow(table53, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(slimTableFactory23);
        org.junit.Assert.assertNull(wildcardClass25);
        org.junit.Assert.assertNull(wildcardClass28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(wildcardClass34);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertNull(wildcardClass43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(strMap46);
        org.junit.Assert.assertNull(wildcardClass52);
    }

    @Test
    public void test08078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08078");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        java.lang.String str5 = slimTableFactory0.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory0.tableTypeArrays;
        java.lang.String str8 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory0.copy();
        boolean boolean11 = slimTableFactory9.hasColon("hi!");
        boolean boolean13 = slimTableFactory9.hasColon("hi!");
        java.lang.String str15 = slimTableFactory9.makeTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass17 = slimTableFactory9.getTableType("hi!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNull(wildcardClass17);
    }

    @Test
    public void test08079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08079");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.lang.String str4 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory0.copy();
        java.lang.String str7 = slimTableFactory0.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap9 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory0.copy();
        boolean boolean12 = slimTableFactory10.hasColon("");
        java.lang.String str14 = slimTableFactory10.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory10.copy();
        java.lang.String str17 = slimTableFactory15.makeTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass19 = slimTableFactory15.getTableType("");
        java.lang.String str21 = slimTableFactory15.getFullTableName("");
        boolean boolean23 = slimTableFactory15.hasColon("hi!");
        fitnesse.testsystems.slim.Table table24 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext26 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable27 = slimTableFactory15.makeSlimTable(table24, "", slimTestContext26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test08080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08080");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str6 = slimTableFactory4.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory4.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap7;
        java.lang.String str10 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory12.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass15 = slimTableFactory13.getTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass17 = slimTableFactory13.getTableType("hi!");
        boolean boolean19 = slimTableFactory13.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str22 = slimTableFactory20.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap23 = slimTableFactory20.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str26 = slimTableFactory24.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap27 = slimTableFactory24.tableTypeArrays;
        slimTableFactory20.tableTypeArrays = strMap27;
        java.lang.String str30 = slimTableFactory20.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory31 = slimTableFactory20.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass33 = slimTableFactory31.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory34 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass36 = slimTableFactory34.getTableType("");
        boolean boolean38 = slimTableFactory34.hasColon("");
        boolean boolean40 = slimTableFactory34.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass42 = slimTableFactory34.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory43 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str45 = slimTableFactory43.getFullTableName("hi!");
        java.lang.String str47 = slimTableFactory43.makeTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap48 = slimTableFactory43.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory49 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass51 = slimTableFactory49.getTableType("");
        java.lang.String str53 = slimTableFactory49.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap54 = slimTableFactory49.tableTypeArrays;
        slimTableFactory43.tableTypeArrays = strMap54;
        slimTableFactory34.tableTypeArrays = strMap54;
        slimTableFactory31.tableTypeArrays = strMap54;
        slimTableFactory13.tableTypeArrays = strMap54;
        java.lang.String str60 = slimTableFactory13.makeTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass62 = slimTableFactory13.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap63 = slimTableFactory13.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap63;
        java.util.Map<java.lang.String, java.lang.String> strMap65 = slimTableFactory0.tableTypeArrays;
        boolean boolean67 = slimTableFactory0.hasColon("");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNotNull(slimTableFactory13);
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertNull(wildcardClass17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(slimTableFactory31);
        org.junit.Assert.assertNull(wildcardClass33);
        org.junit.Assert.assertNull(wildcardClass36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(wildcardClass42);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(strMap48);
        org.junit.Assert.assertNull(wildcardClass51);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNull(wildcardClass62);
        org.junit.Assert.assertNotNull(strMap63);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test08081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08081");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str6 = slimTableFactory4.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory4.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap7;
        java.lang.String str10 = slimTableFactory0.makeTableType("hi!");
        boolean boolean12 = slimTableFactory0.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory13.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap15 = slimTableFactory13.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory13.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap17 = slimTableFactory16.tableTypes;
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(slimTableFactory13);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertNotNull(strMap17);
    }

    @Test
    public void test08082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08082");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str6 = slimTableFactory4.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory4.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap7;
        java.lang.String str10 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap12 = slimTableFactory0.tableTypes;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap13 = slimTableFactory0.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap15 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory0.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass18 = slimTableFactory16.getTableType("hi!");
        fitnesse.testsystems.slim.Table table19 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory16.parseDefineTableTypeRow(table19, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertNull(wildcardClass18);
    }

    @Test
    public void test08083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08083");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory2 = slimTableFactory0.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass4 = slimTableFactory0.getTableType("hi!");
        java.lang.String str6 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory0.copy();
        boolean boolean10 = slimTableFactory8.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory8.copy();
        fitnesse.testsystems.slim.Table table12 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext14 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable15 = slimTableFactory8.makeSlimTable(table12, "", slimTestContext14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(slimTableFactory2);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(slimTableFactory11);
    }

    @Test
    public void test08084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08084");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.lang.String str4 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory0.copy();
        boolean boolean7 = slimTableFactory0.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap9 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str13 = slimTableFactory11.getFullTableName("hi!");
        java.lang.String str15 = slimTableFactory11.makeTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap16 = slimTableFactory11.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass19 = slimTableFactory17.getTableType("");
        java.lang.String str21 = slimTableFactory17.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap22 = slimTableFactory17.tableTypeArrays;
        slimTableFactory11.tableTypeArrays = strMap22;
        slimTableFactory10.tableTypeArrays = strMap22;
        java.lang.String str26 = slimTableFactory10.makeTableType("");
        boolean boolean28 = slimTableFactory10.hasColon("hi!");
        java.lang.String str30 = slimTableFactory10.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap31 = slimTableFactory10.tableTypeArrays;
        java.lang.String str33 = slimTableFactory10.getFullTableName("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass35 = slimTableFactory10.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap36 = slimTableFactory10.tableTypeArrays;
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNull(wildcardClass35);
        org.junit.Assert.assertNotNull(strMap36);
    }

    @Test
    public void test08085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08085");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.lang.String str4 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory0.copy();
        boolean boolean7 = slimTableFactory0.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap9 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str13 = slimTableFactory11.getFullTableName("hi!");
        java.lang.String str15 = slimTableFactory11.makeTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap16 = slimTableFactory11.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass19 = slimTableFactory17.getTableType("");
        java.lang.String str21 = slimTableFactory17.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap22 = slimTableFactory17.tableTypeArrays;
        slimTableFactory11.tableTypeArrays = strMap22;
        slimTableFactory10.tableTypeArrays = strMap22;
        java.lang.String str26 = slimTableFactory10.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap27 = slimTableFactory10.tableTypeArrays;
        boolean boolean29 = slimTableFactory10.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory30 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str32 = slimTableFactory30.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap33 = slimTableFactory30.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory34 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str36 = slimTableFactory34.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap37 = slimTableFactory34.tableTypeArrays;
        slimTableFactory30.tableTypeArrays = strMap37;
        java.lang.String str40 = slimTableFactory30.makeTableType("hi!");
        boolean boolean42 = slimTableFactory30.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory43 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory44 = slimTableFactory43.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass46 = slimTableFactory44.getTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass48 = slimTableFactory44.getTableType("hi!");
        boolean boolean50 = slimTableFactory44.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap51 = slimTableFactory44.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory52 = slimTableFactory44.copy();
        java.lang.String str54 = slimTableFactory44.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap55 = slimTableFactory44.tableTypeArrays;
        slimTableFactory30.tableTypeArrays = strMap55;
        slimTableFactory10.tableTypeArrays = strMap55;
        java.util.Map<java.lang.String, java.lang.String> strMap58 = slimTableFactory10.tableTypeArrays;
        fitnesse.testsystems.slim.Table table59 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory10.parseDefineTableTypeRow(table59, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "hi!" + "'", str40, "hi!");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(slimTableFactory44);
        org.junit.Assert.assertNull(wildcardClass46);
        org.junit.Assert.assertNull(wildcardClass48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(strMap51);
        org.junit.Assert.assertNotNull(slimTableFactory52);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(strMap55);
        org.junit.Assert.assertNotNull(strMap58);
    }

    @Test
    public void test08086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08086");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.lang.String str3 = slimTableFactory0.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap4 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory0.copy();
        boolean boolean7 = slimTableFactory5.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass9 = slimTableFactory5.getTableType("hi!");
        fitnesse.testsystems.slim.Table table10 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable11 = slimTableFactory5.parseDefineTableTypeTable(table10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!" + "'", str3, "hi!");
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardClass9);
    }

    @Test
    public void test08087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08087");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass3 = slimTableFactory1.getTableType("");
        java.lang.String str5 = slimTableFactory1.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory1.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap6;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory9.tableTypeArrays;
        java.lang.String str12 = slimTableFactory9.makeTableType("hi!");
        java.lang.String str14 = slimTableFactory9.getFullTableName("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass16 = slimTableFactory9.getTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap17 = slimTableFactory9.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str20 = slimTableFactory18.getFullTableName("hi!");
        java.lang.String str22 = slimTableFactory18.makeTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap23 = slimTableFactory18.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = slimTableFactory18.copy();
        java.lang.String str26 = slimTableFactory18.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap27 = slimTableFactory18.tableTypeArrays;
        slimTableFactory9.tableTypeArrays = strMap27;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory29 = slimTableFactory9.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap30 = slimTableFactory9.tableTypes;
        java.lang.String str32 = slimTableFactory9.makeTableType("");
        java.lang.String str34 = slimTableFactory9.makeTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap35 = slimTableFactory9.tableTypes;
        boolean boolean37 = slimTableFactory9.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory38 = slimTableFactory9.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap39 = slimTableFactory38.tableTypes;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap40 = slimTableFactory38.tableTypes;
        fitnesse.testsystems.slim.Table table41 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory38.parseDefineTableTypeRow(table41, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertNull(wildcardClass16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(slimTableFactory24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(slimTableFactory29);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(slimTableFactory38);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNotNull(strMap40);
    }

    @Test
    public void test08088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08088");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.lang.String str4 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory0.copy();
        java.lang.String str7 = slimTableFactory0.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap9 = slimTableFactory0.tableTypes;
        java.lang.String str11 = slimTableFactory0.getFullTableName("hi!");
        java.lang.String str13 = slimTableFactory0.makeTableType("");
        boolean boolean15 = slimTableFactory0.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap16 = slimTableFactory0.tableTypes;
        boolean boolean18 = slimTableFactory0.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap19 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.Table table20 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext22 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable23 = slimTableFactory0.makeSlimTable(table20, "", slimTestContext22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strMap19);
    }

    @Test
    public void test08089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08089");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap5 = slimTableFactory4.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory4.copy();
        java.lang.String str8 = slimTableFactory6.getFullTableName("hi!");
        java.lang.String str10 = slimTableFactory6.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory6.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass13 = slimTableFactory11.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory11.tableTypeArrays;
        java.lang.Class<?> wildcardClass15 = strMap14.getClass();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test08090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08090");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass3 = slimTableFactory1.getTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass5 = slimTableFactory1.getTableType("hi!");
        boolean boolean7 = slimTableFactory1.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory1.copy();
        java.lang.String str11 = slimTableFactory1.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap12 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory1.copy();
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(slimTableFactory13);
    }

    @Test
    public void test08091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08091");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.lang.String str4 = slimTableFactory0.makeTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap5 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory0.copy();
        java.lang.String str8 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str11 = slimTableFactory9.getFullTableName("hi!");
        java.lang.String str13 = slimTableFactory9.makeTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap14 = slimTableFactory9.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory9.copy();
        java.lang.String str17 = slimTableFactory9.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str20 = slimTableFactory18.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap21 = slimTableFactory18.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str24 = slimTableFactory22.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap25 = slimTableFactory22.tableTypeArrays;
        slimTableFactory18.tableTypeArrays = strMap25;
        java.lang.String str28 = slimTableFactory18.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap29 = slimTableFactory18.tableTypeArrays;
        slimTableFactory9.tableTypeArrays = strMap29;
        slimTableFactory0.tableTypeArrays = strMap29;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass33 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap34 = slimTableFactory0.tableTypes;
        java.lang.Class<?> wildcardClass35 = slimTableFactory0.getClass();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNull(wildcardClass33);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test08092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08092");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass3 = slimTableFactory1.getTableType("");
        java.lang.String str5 = slimTableFactory1.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory1.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap6;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        boolean boolean11 = slimTableFactory8.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap12 = slimTableFactory8.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory8.getTableType("hi!");
        java.lang.String str16 = slimTableFactory8.getFullTableName("");
        java.lang.String str18 = slimTableFactory8.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory8.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass21 = slimTableFactory8.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = slimTableFactory8.copy();
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(slimTableFactory19);
        org.junit.Assert.assertNull(wildcardClass21);
        org.junit.Assert.assertNotNull(slimTableFactory22);
    }

    @Test
    public void test08093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08093");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass3 = slimTableFactory1.getTableType("");
        java.lang.String str5 = slimTableFactory1.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory1.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap6;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory0.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass11 = slimTableFactory9.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap12 = slimTableFactory9.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory9.copy();
        boolean boolean15 = slimTableFactory13.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory13.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap17 = slimTableFactory13.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass19 = slimTableFactory13.getTableType("");
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(slimTableFactory13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNull(wildcardClass19);
    }

    @Test
    public void test08094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08094");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.lang.String str3 = slimTableFactory0.makeTableType("hi!");
        java.lang.String str5 = slimTableFactory0.makeTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory0.getTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass9 = slimTableFactory0.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory0.copy();
        boolean boolean12 = slimTableFactory10.hasColon("");
        java.lang.String str14 = slimTableFactory10.makeTableType("hi!");
        java.lang.String str16 = slimTableFactory10.getFullTableName("hi!");
        fitnesse.testsystems.slim.Table table17 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable18 = slimTableFactory10.parseDefineTableTypeTable(table17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!" + "'", str3, "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
    }

    @Test
    public void test08095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08095");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass3 = slimTableFactory1.getTableType("");
        java.lang.String str5 = slimTableFactory1.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory1.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap6;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass11 = slimTableFactory9.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory9.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory9.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass15 = slimTableFactory13.getTableType("hi!");
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertNotNull(slimTableFactory13);
        org.junit.Assert.assertNull(wildcardClass15);
    }

    @Test
    public void test08096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08096");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.lang.String str4 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap6 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str9 = slimTableFactory7.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory7.tableTypeArrays;
        java.lang.String str12 = slimTableFactory7.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap13 = slimTableFactory7.tableTypeArrays;
        java.lang.String str15 = slimTableFactory7.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory7.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap16;
        java.util.Map<java.lang.String, java.lang.String> strMap18 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass22 = slimTableFactory20.getTableType("");
        java.lang.String str24 = slimTableFactory20.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap25 = slimTableFactory20.tableTypeArrays;
        slimTableFactory19.tableTypeArrays = strMap25;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = slimTableFactory19.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = slimTableFactory19.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass30 = slimTableFactory28.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap31 = slimTableFactory28.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory32 = slimTableFactory28.copy();
        boolean boolean34 = slimTableFactory32.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap35 = slimTableFactory32.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap35;
        java.util.Map<java.lang.String, java.lang.String> strMap37 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap38 = slimTableFactory0.tableTypeArrays;
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNull(wildcardClass22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(slimTableFactory27);
        org.junit.Assert.assertNotNull(slimTableFactory28);
        org.junit.Assert.assertNull(wildcardClass30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(slimTableFactory32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(strMap38);
    }

    @Test
    public void test08097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08097");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.lang.String str4 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory0.copy();
        java.lang.String str7 = slimTableFactory0.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap9 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory0.copy();
        boolean boolean12 = slimTableFactory10.hasColon("");
        java.lang.String str14 = slimTableFactory10.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory10.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass18 = slimTableFactory16.getTableType("");
        java.lang.String str20 = slimTableFactory16.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap21 = slimTableFactory16.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap22 = slimTableFactory16.tableTypeArrays;
        java.lang.String str24 = slimTableFactory16.makeTableType("hi!");
        java.lang.String str26 = slimTableFactory16.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap27 = slimTableFactory16.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass30 = slimTableFactory28.getTableType("");
        java.lang.String str32 = slimTableFactory28.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory33 = slimTableFactory28.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap34 = slimTableFactory33.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory35 = slimTableFactory33.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass37 = slimTableFactory35.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap38 = slimTableFactory35.tableTypeArrays;
        slimTableFactory16.tableTypeArrays = strMap38;
        slimTableFactory15.tableTypeArrays = strMap38;
        java.util.Map<java.lang.String, java.lang.String> strMap41 = slimTableFactory15.tableTypeArrays;
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNull(wildcardClass30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(slimTableFactory33);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNotNull(slimTableFactory35);
        org.junit.Assert.assertNull(wildcardClass37);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertNotNull(strMap41);
    }

    @Test
    public void test08098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08098");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.lang.String str4 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory0.copy();
        boolean boolean7 = slimTableFactory0.hasColon("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass9 = slimTableFactory0.getTableType("");
        java.lang.String str11 = slimTableFactory0.makeTableType("");
        java.lang.String str13 = slimTableFactory0.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap14 = slimTableFactory0.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass16 = slimTableFactory0.getTableType("hi!");
        boolean boolean18 = slimTableFactory0.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory0.copy();
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNull(wildcardClass16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(slimTableFactory19);
    }

    @Test
    public void test08099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08099");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.lang.String str4 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory0.copy();
        java.lang.String str7 = slimTableFactory0.makeTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass9 = slimTableFactory0.getTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass11 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass15 = slimTableFactory13.getTableType("");
        java.lang.String str17 = slimTableFactory13.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory13.copy();
        boolean boolean20 = slimTableFactory13.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap21 = slimTableFactory13.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap22 = slimTableFactory13.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = slimTableFactory13.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str26 = slimTableFactory24.getFullTableName("hi!");
        java.lang.String str28 = slimTableFactory24.makeTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap29 = slimTableFactory24.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory30 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass32 = slimTableFactory30.getTableType("");
        java.lang.String str34 = slimTableFactory30.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap35 = slimTableFactory30.tableTypeArrays;
        slimTableFactory24.tableTypeArrays = strMap35;
        slimTableFactory23.tableTypeArrays = strMap35;
        java.lang.String str39 = slimTableFactory23.makeTableType("");
        boolean boolean41 = slimTableFactory23.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory42 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass44 = slimTableFactory42.getTableType("");
        java.lang.String str46 = slimTableFactory42.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory47 = slimTableFactory42.copy();
        boolean boolean49 = slimTableFactory42.hasColon("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass51 = slimTableFactory42.getTableType("");
        java.lang.String str53 = slimTableFactory42.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory54 = slimTableFactory42.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory55 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory56 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass58 = slimTableFactory56.getTableType("");
        java.lang.String str60 = slimTableFactory56.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap61 = slimTableFactory56.tableTypeArrays;
        slimTableFactory55.tableTypeArrays = strMap61;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory63 = slimTableFactory55.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory64 = slimTableFactory63.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory65 = slimTableFactory63.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory66 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory67 = slimTableFactory66.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass69 = slimTableFactory67.getTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass71 = slimTableFactory67.getTableType("hi!");
        boolean boolean73 = slimTableFactory67.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap74 = slimTableFactory67.tableTypeArrays;
        slimTableFactory65.tableTypeArrays = strMap74;
        slimTableFactory42.tableTypeArrays = strMap74;
        java.util.Map<java.lang.String, java.lang.String> strMap77 = slimTableFactory42.tableTypeArrays;
        slimTableFactory23.tableTypeArrays = strMap77;
        slimTableFactory12.tableTypeArrays = strMap77;
        java.lang.String str81 = slimTableFactory12.makeTableType("");
        fitnesse.testsystems.slim.Table table82 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory12.parseDefineTableTypeRow(table82, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(slimTableFactory18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(slimTableFactory23);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNull(wildcardClass32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(wildcardClass44);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(slimTableFactory47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(wildcardClass51);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(slimTableFactory54);
        org.junit.Assert.assertNull(wildcardClass58);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(strMap61);
        org.junit.Assert.assertNotNull(slimTableFactory63);
        org.junit.Assert.assertNotNull(slimTableFactory64);
        org.junit.Assert.assertNotNull(slimTableFactory65);
        org.junit.Assert.assertNotNull(slimTableFactory67);
        org.junit.Assert.assertNull(wildcardClass69);
        org.junit.Assert.assertNull(wildcardClass71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(strMap74);
        org.junit.Assert.assertNotNull(strMap77);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
    }

    @Test
    public void test08100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08100");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.lang.String str4 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory0.copy();
        java.lang.String str7 = slimTableFactory0.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap9 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory0.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass12 = slimTableFactory0.getTableType("hi!");
        java.lang.String str14 = slimTableFactory0.getFullTableName("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass16 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap17 = slimTableFactory0.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass19 = slimTableFactory0.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap20 = slimTableFactory0.tableTypes;
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertNull(wildcardClass16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(strMap20);
    }

    @Test
    public void test08101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08101");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.lang.String str4 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory5.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory6.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass9 = slimTableFactory6.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory10.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass13 = slimTableFactory11.getTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass15 = slimTableFactory11.getTableType("hi!");
        boolean boolean17 = slimTableFactory11.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap18 = slimTableFactory11.tableTypeArrays;
        slimTableFactory6.tableTypeArrays = strMap18;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str22 = slimTableFactory20.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap23 = slimTableFactory20.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = slimTableFactory20.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap25 = slimTableFactory24.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = slimTableFactory24.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap27 = slimTableFactory26.tableTypeArrays;
        slimTableFactory6.tableTypeArrays = strMap27;
        java.util.Map<java.lang.String, java.lang.String> strMap29 = slimTableFactory6.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap30 = slimTableFactory6.tableTypeArrays;
        java.lang.String str32 = slimTableFactory6.getFullTableName("");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(slimTableFactory24);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(slimTableFactory26);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
    }

    @Test
    public void test08102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08102");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.lang.String str4 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory0.copy();
        java.lang.String str7 = slimTableFactory5.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap8 = slimTableFactory5.tableTypes;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap9 = slimTableFactory5.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory5.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory5.copy();
        java.lang.String str13 = slimTableFactory5.getFullTableName("");
        boolean boolean15 = slimTableFactory5.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap16 = slimTableFactory5.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass20 = slimTableFactory18.getTableType("");
        java.lang.String str22 = slimTableFactory18.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap23 = slimTableFactory18.tableTypeArrays;
        slimTableFactory17.tableTypeArrays = strMap23;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = slimTableFactory17.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = slimTableFactory25.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = slimTableFactory25.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = slimTableFactory25.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory29 = slimTableFactory25.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap30 = slimTableFactory25.tableTypeArrays;
        java.lang.String str32 = slimTableFactory25.makeTableType("hi!");
        java.lang.String str34 = slimTableFactory25.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory35 = slimTableFactory25.copy();
        java.lang.String str37 = slimTableFactory35.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap38 = slimTableFactory35.tableTypeArrays;
        slimTableFactory5.tableTypeArrays = strMap38;
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNull(wildcardClass20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(slimTableFactory25);
        org.junit.Assert.assertNotNull(slimTableFactory26);
        org.junit.Assert.assertNotNull(slimTableFactory27);
        org.junit.Assert.assertNotNull(slimTableFactory28);
        org.junit.Assert.assertNotNull(slimTableFactory29);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(strMap38);
    }

    @Test
    public void test08103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08103");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass3 = slimTableFactory1.getTableType("");
        java.lang.String str5 = slimTableFactory1.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory1.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap6;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory0.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass11 = slimTableFactory9.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap12 = slimTableFactory9.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory9.copy();
        boolean boolean15 = slimTableFactory13.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory13.copy();
        fitnesse.testsystems.slim.Table table17 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory13.parseDefineTableTypeRow(table17, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(slimTableFactory13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(slimTableFactory16);
    }

    @Test
    public void test08104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08104");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap5 = slimTableFactory4.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory4.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory6.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory6.tableTypeArrays;
        java.lang.String str10 = slimTableFactory6.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory12.getTableType("");
        java.lang.String str16 = slimTableFactory12.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap17 = slimTableFactory12.tableTypeArrays;
        slimTableFactory11.tableTypeArrays = strMap17;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap19 = slimTableFactory11.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str22 = slimTableFactory20.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap23 = slimTableFactory20.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = slimTableFactory20.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap25 = slimTableFactory24.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = slimTableFactory24.copy();
        java.lang.String str28 = slimTableFactory26.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap29 = slimTableFactory26.tableTypeArrays;
        slimTableFactory11.tableTypeArrays = strMap29;
        slimTableFactory6.tableTypeArrays = strMap29;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory32 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory33 = slimTableFactory32.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass35 = slimTableFactory33.getTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass37 = slimTableFactory33.getTableType("hi!");
        boolean boolean39 = slimTableFactory33.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory40 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str42 = slimTableFactory40.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap43 = slimTableFactory40.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory44 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str46 = slimTableFactory44.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap47 = slimTableFactory44.tableTypeArrays;
        slimTableFactory40.tableTypeArrays = strMap47;
        java.lang.String str50 = slimTableFactory40.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory51 = slimTableFactory40.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass53 = slimTableFactory51.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory54 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass56 = slimTableFactory54.getTableType("");
        boolean boolean58 = slimTableFactory54.hasColon("");
        boolean boolean60 = slimTableFactory54.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass62 = slimTableFactory54.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory63 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str65 = slimTableFactory63.getFullTableName("hi!");
        java.lang.String str67 = slimTableFactory63.makeTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap68 = slimTableFactory63.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory69 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass71 = slimTableFactory69.getTableType("");
        java.lang.String str73 = slimTableFactory69.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap74 = slimTableFactory69.tableTypeArrays;
        slimTableFactory63.tableTypeArrays = strMap74;
        slimTableFactory54.tableTypeArrays = strMap74;
        slimTableFactory51.tableTypeArrays = strMap74;
        slimTableFactory33.tableTypeArrays = strMap74;
        java.lang.String str80 = slimTableFactory33.makeTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass82 = slimTableFactory33.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap83 = slimTableFactory33.tableTypeArrays;
        slimTableFactory6.tableTypeArrays = strMap83;
        java.util.Map<java.lang.String, java.lang.String> strMap85 = slimTableFactory6.tableTypeArrays;
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(slimTableFactory24);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(slimTableFactory26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(slimTableFactory33);
        org.junit.Assert.assertNull(wildcardClass35);
        org.junit.Assert.assertNull(wildcardClass37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "hi!" + "'", str42, "hi!");
        org.junit.Assert.assertNotNull(strMap43);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hi!" + "'", str46, "hi!");
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(slimTableFactory51);
        org.junit.Assert.assertNull(wildcardClass53);
        org.junit.Assert.assertNull(wildcardClass56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(wildcardClass62);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "hi!" + "'", str65, "hi!");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(strMap68);
        org.junit.Assert.assertNull(wildcardClass71);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(strMap74);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertNull(wildcardClass82);
        org.junit.Assert.assertNotNull(strMap83);
        org.junit.Assert.assertNotNull(strMap85);
    }

    @Test
    public void test08105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08105");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.lang.String str4 = slimTableFactory0.makeTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap5 = slimTableFactory0.tableTypes;
        java.lang.String str7 = slimTableFactory0.getFullTableName("");
        boolean boolean9 = slimTableFactory0.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory0.tableTypeArrays;
        java.lang.String str13 = slimTableFactory0.makeTableType("");
        java.lang.String str15 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.Table table16 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext18 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable19 = slimTableFactory0.makeSlimTable(table16, "", slimTestContext18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test08106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08106");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass3 = slimTableFactory1.getTableType("");
        java.lang.String str5 = slimTableFactory1.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory1.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap6;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass11 = slimTableFactory9.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory9.copy();
        boolean boolean14 = slimTableFactory9.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory9.copy();
        fitnesse.testsystems.slim.Table table16 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory15.parseDefineTableTypeRow(table16, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(slimTableFactory15);
    }

    @Test
    public void test08107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08107");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap2 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str5 = slimTableFactory3.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory3.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str9 = slimTableFactory7.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory7.tableTypeArrays;
        slimTableFactory3.tableTypeArrays = strMap10;
        java.lang.String str13 = slimTableFactory3.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory3.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str17 = slimTableFactory15.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap18 = slimTableFactory15.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory15.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap20 = slimTableFactory19.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = slimTableFactory19.copy();
        java.lang.String str23 = slimTableFactory21.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap24 = slimTableFactory21.tableTypeArrays;
        slimTableFactory3.tableTypeArrays = strMap24;
        java.lang.String str27 = slimTableFactory3.makeTableType("");
        java.lang.String str29 = slimTableFactory3.getFullTableName("");
        boolean boolean31 = slimTableFactory3.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap32 = slimTableFactory3.tableTypes;
        boolean boolean34 = slimTableFactory3.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap35 = slimTableFactory3.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory36 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str38 = slimTableFactory36.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap39 = slimTableFactory36.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory40 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str42 = slimTableFactory40.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap43 = slimTableFactory40.tableTypeArrays;
        slimTableFactory36.tableTypeArrays = strMap43;
        java.lang.String str46 = slimTableFactory36.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap47 = slimTableFactory36.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory48 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str50 = slimTableFactory48.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap51 = slimTableFactory48.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory52 = slimTableFactory48.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap53 = slimTableFactory52.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory54 = slimTableFactory52.copy();
        java.lang.String str56 = slimTableFactory54.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap57 = slimTableFactory54.tableTypeArrays;
        slimTableFactory36.tableTypeArrays = strMap57;
        java.lang.String str60 = slimTableFactory36.makeTableType("");
        java.lang.String str62 = slimTableFactory36.getFullTableName("");
        boolean boolean64 = slimTableFactory36.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap65 = slimTableFactory36.tableTypeArrays;
        slimTableFactory3.tableTypeArrays = strMap65;
        slimTableFactory0.tableTypeArrays = strMap65;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass69 = slimTableFactory0.getTableType("hi!");
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(slimTableFactory19);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(slimTableFactory21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "hi!" + "'", str42, "hi!");
        org.junit.Assert.assertNotNull(strMap43);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hi!" + "'", str50, "hi!");
        org.junit.Assert.assertNotNull(strMap51);
        org.junit.Assert.assertNotNull(slimTableFactory52);
        org.junit.Assert.assertNotNull(strMap53);
        org.junit.Assert.assertNotNull(slimTableFactory54);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hi!" + "'", str56, "hi!");
        org.junit.Assert.assertNotNull(strMap57);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNull(wildcardClass69);
    }

    @Test
    public void test08108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08108");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.lang.String str4 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory0.copy();
        boolean boolean7 = slimTableFactory0.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory0.copy();
        java.lang.String str10 = slimTableFactory8.getFullTableName("hi!");
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
    }

    @Test
    public void test08109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08109");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.lang.String str4 = slimTableFactory0.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap5 = null;
        slimTableFactory0.tableTypeArrays = strMap5;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str9 = slimTableFactory7.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory7.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory7.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap12 = slimTableFactory11.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory11.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory13.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap15 = slimTableFactory13.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap15;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap18 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.Table table19 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory0.parseDefineTableTypeRow(table19, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(slimTableFactory13);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(slimTableFactory17);
        org.junit.Assert.assertNotNull(strMap18);
    }

    @Test
    public void test08110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08110");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass3 = slimTableFactory1.getTableType("");
        java.lang.String str5 = slimTableFactory1.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory1.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap6;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass11 = slimTableFactory9.getTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass13 = slimTableFactory9.getTableType("");
        java.lang.String str15 = slimTableFactory9.getFullTableName("hi!");
        java.lang.Class<?> wildcardClass16 = slimTableFactory9.getClass();
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test08111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08111");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass3 = slimTableFactory1.getTableType("");
        java.lang.String str5 = slimTableFactory1.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory1.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap6;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory8.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory8.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory11.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory12.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass15 = slimTableFactory12.getTableType("");
        java.lang.String str17 = slimTableFactory12.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap18 = slimTableFactory12.tableTypes;
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertNotNull(slimTableFactory13);
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNotNull(strMap18);
    }

    @Test
    public void test08112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08112");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.lang.String str4 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap6 = slimTableFactory0.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory0.tableTypeArrays;
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(strMap7);
    }

    @Test
    public void test08113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08113");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass3 = slimTableFactory1.getTableType("");
        java.lang.String str5 = slimTableFactory1.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory1.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap6;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory0.copy();
        java.lang.String str10 = slimTableFactory0.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap12 = slimTableFactory0.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory0.getTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass16 = slimTableFactory0.getTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass18 = slimTableFactory0.getTableType("");
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertNull(wildcardClass16);
        org.junit.Assert.assertNull(wildcardClass18);
    }

    @Test
    public void test08114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08114");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap5 = slimTableFactory4.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory4.copy();
        java.lang.String str8 = slimTableFactory6.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap9 = slimTableFactory6.tableTypes;
        java.lang.String str11 = slimTableFactory6.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap12 = slimTableFactory6.tableTypes;
        fitnesse.testsystems.slim.Table table13 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable14 = slimTableFactory6.parseDefineTableTypeTable(table13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNotNull(strMap12);
    }

    @Test
    public void test08115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08115");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.lang.String str4 = slimTableFactory0.makeTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap5 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory0.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass8 = slimTableFactory0.getTableType("hi!");
        java.lang.String str10 = slimTableFactory0.makeTableType("");
        boolean boolean12 = slimTableFactory0.hasColon("");
        java.lang.String str14 = slimTableFactory0.makeTableType("hi!");
        java.lang.String str16 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str19 = slimTableFactory17.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap20 = slimTableFactory17.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str23 = slimTableFactory21.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap24 = slimTableFactory21.tableTypeArrays;
        slimTableFactory17.tableTypeArrays = strMap24;
        slimTableFactory0.tableTypeArrays = strMap24;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass29 = slimTableFactory27.getTableType("");
        java.lang.String str31 = slimTableFactory27.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory32 = slimTableFactory27.copy();
        java.lang.String str34 = slimTableFactory27.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap35 = slimTableFactory27.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap36 = slimTableFactory27.tableTypes;
        java.lang.String str38 = slimTableFactory27.getFullTableName("hi!");
        java.lang.String str40 = slimTableFactory27.makeTableType("");
        boolean boolean42 = slimTableFactory27.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap43 = slimTableFactory27.tableTypes;
        boolean boolean45 = slimTableFactory27.hasColon("");
        boolean boolean47 = slimTableFactory27.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory48 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass50 = slimTableFactory48.getTableType("");
        java.lang.String str52 = slimTableFactory48.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory53 = slimTableFactory48.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap54 = slimTableFactory53.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory55 = slimTableFactory53.copy();
        java.lang.String str57 = slimTableFactory55.getFullTableName("");
        java.lang.String str59 = slimTableFactory55.makeTableType("");
        boolean boolean61 = slimTableFactory55.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory62 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass64 = slimTableFactory62.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory65 = slimTableFactory62.copy();
        java.lang.String str67 = slimTableFactory65.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory68 = slimTableFactory65.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory69 = slimTableFactory68.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap70 = slimTableFactory68.tableTypeArrays;
        slimTableFactory55.tableTypeArrays = strMap70;
        slimTableFactory27.tableTypeArrays = strMap70;
        slimTableFactory0.tableTypeArrays = strMap70;
        java.lang.String str75 = slimTableFactory0.getFullTableName("hi!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNull(wildcardClass29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(slimTableFactory32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(strMap43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(wildcardClass50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(slimTableFactory53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(slimTableFactory55);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(wildcardClass64);
        org.junit.Assert.assertNotNull(slimTableFactory65);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "hi!" + "'", str67, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory68);
        org.junit.Assert.assertNotNull(slimTableFactory69);
        org.junit.Assert.assertNotNull(strMap70);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "hi!" + "'", str75, "hi!");
    }

    @Test
    public void test08116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08116");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass3 = slimTableFactory1.getTableType("");
        java.lang.String str5 = slimTableFactory1.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory1.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap6;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory0.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass11 = slimTableFactory9.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap12 = slimTableFactory9.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory9.copy();
        boolean boolean15 = slimTableFactory13.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap16 = slimTableFactory13.tableTypes;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap17 = slimTableFactory13.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap18 = slimTableFactory13.tableTypeArrays;
        java.lang.String str20 = slimTableFactory13.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = slimTableFactory13.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass23 = slimTableFactory21.getTableType("hi!");
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(slimTableFactory13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(slimTableFactory21);
        org.junit.Assert.assertNull(wildcardClass23);
    }

    @Test
    public void test08117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08117");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.lang.String str4 = slimTableFactory0.makeTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap5 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory0.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass8 = slimTableFactory0.getTableType("hi!");
        java.lang.String str10 = slimTableFactory0.makeTableType("");
        boolean boolean12 = slimTableFactory0.hasColon("");
        java.lang.String str14 = slimTableFactory0.makeTableType("hi!");
        java.lang.String str16 = slimTableFactory0.getFullTableName("hi!");
        java.lang.String str18 = slimTableFactory0.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.Table table20 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory0.parseDefineTableTypeRow(table20, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory19);
    }

    @Test
    public void test08118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08118");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass3 = slimTableFactory1.getTableType("");
        java.lang.String str5 = slimTableFactory1.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory1.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap6;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory9.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass13 = slimTableFactory11.getTableType("");
        java.lang.String str15 = slimTableFactory11.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory11.copy();
        boolean boolean18 = slimTableFactory11.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap19 = slimTableFactory11.tableTypeArrays;
        slimTableFactory9.tableTypeArrays = strMap19;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = slimTableFactory9.copy();
        boolean boolean23 = slimTableFactory21.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap24 = slimTableFactory21.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str27 = slimTableFactory25.getFullTableName("hi!");
        java.lang.String str29 = slimTableFactory25.makeTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap30 = slimTableFactory25.tableTypes;
        java.lang.String str32 = slimTableFactory25.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap33 = slimTableFactory25.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap34 = slimTableFactory25.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap35 = slimTableFactory25.tableTypeArrays;
        java.lang.String str37 = slimTableFactory25.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory38 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass40 = slimTableFactory38.getTableType("");
        java.lang.String str42 = slimTableFactory38.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory43 = slimTableFactory38.copy();
        boolean boolean45 = slimTableFactory38.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory46 = slimTableFactory38.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap47 = slimTableFactory46.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory48 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory49 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass51 = slimTableFactory49.getTableType("");
        java.lang.String str53 = slimTableFactory49.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap54 = slimTableFactory49.tableTypeArrays;
        slimTableFactory48.tableTypeArrays = strMap54;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory56 = slimTableFactory48.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap57 = slimTableFactory48.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory58 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str60 = slimTableFactory58.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap61 = slimTableFactory58.tableTypeArrays;
        java.lang.String str63 = slimTableFactory58.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap64 = slimTableFactory58.tableTypeArrays;
        slimTableFactory48.tableTypeArrays = strMap64;
        slimTableFactory46.tableTypeArrays = strMap64;
        java.util.Map<java.lang.String, java.lang.String> strMap67 = slimTableFactory46.tableTypeArrays;
        slimTableFactory25.tableTypeArrays = strMap67;
        slimTableFactory21.tableTypeArrays = strMap67;
        java.lang.Class<?> wildcardClass70 = strMap67.getClass();
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(slimTableFactory21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNull(wildcardClass40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(slimTableFactory43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(slimTableFactory46);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNull(wildcardClass51);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(slimTableFactory56);
        org.junit.Assert.assertNotNull(strMap57);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "hi!" + "'", str60, "hi!");
        org.junit.Assert.assertNotNull(strMap61);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(strMap64);
        org.junit.Assert.assertNotNull(strMap67);
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test08119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08119");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.lang.String str4 = slimTableFactory0.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap5 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory0.tableTypeArrays;
        java.lang.String str8 = slimTableFactory0.makeTableType("hi!");
        java.lang.String str10 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap11 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory12.getTableType("");
        java.lang.String str16 = slimTableFactory12.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = slimTableFactory12.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap18 = slimTableFactory17.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory17.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass21 = slimTableFactory19.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap22 = slimTableFactory19.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap22;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap24 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = slimTableFactory0.copy();
        java.lang.String str27 = slimTableFactory25.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap28 = slimTableFactory25.tableTypeArrays;
        fitnesse.testsystems.slim.Table table29 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable30 = slimTableFactory25.parseDefineTableTypeTable(table29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(slimTableFactory17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(slimTableFactory19);
        org.junit.Assert.assertNull(wildcardClass21);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNotNull(slimTableFactory25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(strMap28);
    }

    @Test
    public void test08120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08120");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory0.tableTypeArrays;
        java.lang.String str6 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory0.copy();
        java.lang.String str9 = slimTableFactory0.getFullTableName("hi!");
        boolean boolean11 = slimTableFactory0.hasColon("hi!");
        fitnesse.testsystems.slim.Table table12 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable13 = slimTableFactory0.parseDefineTableTypeTable(table12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test08121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08121");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.lang.String str4 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory0.copy();
        boolean boolean7 = slimTableFactory0.hasColon("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass9 = slimTableFactory0.getTableType("");
        java.lang.String str11 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap13 = slimTableFactory12.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass15 = slimTableFactory12.getTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass17 = slimTableFactory12.getTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass19 = slimTableFactory12.getTableType("");
        fitnesse.testsystems.slim.Table table20 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory12.parseDefineTableTypeRow(table20, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertNull(wildcardClass17);
        org.junit.Assert.assertNull(wildcardClass19);
    }

    @Test
    public void test08122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08122");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory0.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass6 = slimTableFactory4.getTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory4.tableTypes;
        java.lang.String str9 = slimTableFactory4.makeTableType("hi!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
    }

    @Test
    public void test08123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08123");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap5 = slimTableFactory4.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory4.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass8 = slimTableFactory4.getTableType("hi!");
        java.lang.String str10 = slimTableFactory4.getFullTableName("hi!");
        boolean boolean12 = slimTableFactory4.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory4.copy();
        java.lang.String str15 = slimTableFactory13.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str18 = slimTableFactory16.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap19 = slimTableFactory16.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str22 = slimTableFactory20.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap23 = slimTableFactory20.tableTypeArrays;
        slimTableFactory16.tableTypeArrays = strMap23;
        java.lang.String str26 = slimTableFactory16.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = slimTableFactory16.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap28 = slimTableFactory16.tableTypes;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap29 = slimTableFactory16.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass31 = slimTableFactory16.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap32 = slimTableFactory16.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory33 = slimTableFactory16.copy();
        java.lang.String str35 = slimTableFactory16.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap36 = slimTableFactory16.tableTypeArrays;
        slimTableFactory13.tableTypeArrays = strMap36;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap38 = slimTableFactory13.tableTypes;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap39 = slimTableFactory13.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass41 = slimTableFactory13.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap42 = slimTableFactory13.tableTypeArrays;
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(slimTableFactory13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(slimTableFactory27);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(slimTableFactory33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNull(wildcardClass41);
        org.junit.Assert.assertNotNull(strMap42);
    }

    @Test
    public void test08124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08124");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass3 = slimTableFactory1.getTableType("");
        java.lang.String str5 = slimTableFactory1.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory1.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap6;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass11 = slimTableFactory9.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory9.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap13 = slimTableFactory9.tableTypes;
        boolean boolean15 = slimTableFactory9.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory9.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass18 = slimTableFactory9.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap19 = slimTableFactory9.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap20 = slimTableFactory9.tableTypes;
        boolean boolean22 = slimTableFactory9.hasColon("");
        java.lang.String str24 = slimTableFactory9.getFullTableName("");
        boolean boolean26 = slimTableFactory9.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass28 = slimTableFactory9.getTableType("");
        java.lang.String str30 = slimTableFactory9.makeTableType("hi!");
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(wildcardClass28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
    }

    @Test
    public void test08125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08125");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str6 = slimTableFactory4.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory4.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap7;
        java.lang.String str10 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap12 = slimTableFactory0.tableTypes;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap13 = slimTableFactory0.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass15 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = slimTableFactory0.copy();
        java.lang.String str19 = slimTableFactory0.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap20 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = slimTableFactory21.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass24 = slimTableFactory21.getTableType("");
        fitnesse.testsystems.slim.Table table25 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext27 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable28 = slimTableFactory21.makeSlimTable(table25, "hi!", slimTestContext27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(slimTableFactory17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(slimTableFactory21);
        org.junit.Assert.assertNotNull(slimTableFactory22);
        org.junit.Assert.assertNull(wildcardClass24);
    }

    @Test
    public void test08126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08126");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass3 = slimTableFactory1.getTableType("");
        java.lang.String str5 = slimTableFactory1.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory1.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap6;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory9.tableTypeArrays;
        java.lang.String str12 = slimTableFactory9.makeTableType("hi!");
        java.lang.String str14 = slimTableFactory9.getFullTableName("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass16 = slimTableFactory9.getTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap17 = slimTableFactory9.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory9.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass20 = slimTableFactory18.getTableType("");
        java.lang.String str22 = slimTableFactory18.makeTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass24 = slimTableFactory18.getTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap25 = slimTableFactory18.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass28 = slimTableFactory26.getTableType("");
        java.lang.String str30 = slimTableFactory26.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory31 = slimTableFactory26.copy();
        boolean boolean33 = slimTableFactory26.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap34 = slimTableFactory26.tableTypes;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap35 = slimTableFactory26.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory36 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str38 = slimTableFactory36.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap39 = slimTableFactory36.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory40 = slimTableFactory36.copy();
        boolean boolean42 = slimTableFactory36.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap43 = slimTableFactory36.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap44 = slimTableFactory36.tableTypeArrays;
        boolean boolean46 = slimTableFactory36.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory47 = slimTableFactory36.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap48 = slimTableFactory47.tableTypeArrays;
        slimTableFactory26.tableTypeArrays = strMap48;
        slimTableFactory18.tableTypeArrays = strMap48;
        fitnesse.testsystems.slim.Table table51 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory18.parseDefineTableTypeRow(table51, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertNull(wildcardClass16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(slimTableFactory18);
        org.junit.Assert.assertNull(wildcardClass20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNull(wildcardClass24);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNull(wildcardClass28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(slimTableFactory31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNotNull(slimTableFactory40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(strMap43);
        org.junit.Assert.assertNotNull(strMap44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(slimTableFactory47);
        org.junit.Assert.assertNotNull(strMap48);
    }

    @Test
    public void test08127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08127");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.lang.String str4 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap6 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str9 = slimTableFactory7.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory7.tableTypeArrays;
        java.lang.String str12 = slimTableFactory7.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap13 = slimTableFactory7.tableTypeArrays;
        java.lang.String str15 = slimTableFactory7.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory7.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap16;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap19 = slimTableFactory0.tableTypes;
        java.lang.String str21 = slimTableFactory0.makeTableType("hi!");
        java.lang.String str23 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.Table table24 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable25 = slimTableFactory0.parseDefineTableTypeTable(table24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(slimTableFactory18);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
    }

    @Test
    public void test08128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08128");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str6 = slimTableFactory4.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory4.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap7;
        java.lang.String str10 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.Table table12 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext14 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable15 = slimTableFactory0.makeSlimTable(table12, "hi!", slimTestContext14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(slimTableFactory11);
    }

    @Test
    public void test08129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08129");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str6 = slimTableFactory4.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory4.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap7;
        java.lang.String str10 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap12 = slimTableFactory0.tableTypes;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap13 = slimTableFactory0.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass15 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = slimTableFactory0.copy();
        java.lang.String str19 = slimTableFactory0.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap20 = slimTableFactory0.tableTypeArrays;
        boolean boolean22 = slimTableFactory0.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap23 = slimTableFactory0.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass25 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.Table table26 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable27 = slimTableFactory0.parseDefineTableTypeTable(table26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(slimTableFactory17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNull(wildcardClass25);
    }

    @Test
    public void test08130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08130");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str6 = slimTableFactory4.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory4.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap7;
        java.lang.String str10 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap12 = slimTableFactory0.tableTypes;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap13 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory0.copy();
        java.lang.String str16 = slimTableFactory0.getFullTableName("");
        java.lang.String str18 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.Table table19 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable20 = slimTableFactory0.parseDefineTableTypeTable(table19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
    }

    @Test
    public void test08131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08131");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass3 = slimTableFactory1.getTableType("");
        java.lang.String str5 = slimTableFactory1.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory1.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap6;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory9.tableTypeArrays;
        java.lang.String str12 = slimTableFactory9.makeTableType("hi!");
        java.lang.String str14 = slimTableFactory9.getFullTableName("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass16 = slimTableFactory9.getTableType("");
        fitnesse.testsystems.slim.Table table17 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory9.parseDefineTableTypeRow(table17, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertNull(wildcardClass16);
    }

    @Test
    public void test08132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08132");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.lang.String str4 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory0.copy();
        java.lang.String str7 = slimTableFactory0.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap9 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory0.copy();
        java.lang.String str12 = slimTableFactory10.makeTableType("hi!");
        java.lang.String str14 = slimTableFactory10.getFullTableName("");
        java.lang.String str16 = slimTableFactory10.makeTableType("hi!");
        boolean boolean18 = slimTableFactory10.hasColon("hi!");
        boolean boolean20 = slimTableFactory10.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass22 = slimTableFactory10.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = slimTableFactory10.copy();
        fitnesse.testsystems.slim.Table table24 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext26 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable27 = slimTableFactory10.makeSlimTable(table24, "", slimTestContext26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(wildcardClass22);
        org.junit.Assert.assertNotNull(slimTableFactory23);
    }

    @Test
    public void test08133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08133");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.lang.String str4 = slimTableFactory0.makeTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap5 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory0.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass8 = slimTableFactory0.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap9 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str12 = slimTableFactory10.getFullTableName("hi!");
        java.lang.String str14 = slimTableFactory10.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory10.copy();
        java.lang.String str17 = slimTableFactory10.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str20 = slimTableFactory18.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap21 = slimTableFactory18.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = slimTableFactory18.copy();
        boolean boolean24 = slimTableFactory18.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap25 = slimTableFactory18.tableTypeArrays;
        slimTableFactory10.tableTypeArrays = strMap25;
        slimTableFactory0.tableTypeArrays = strMap25;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str30 = slimTableFactory28.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap31 = slimTableFactory28.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory32 = slimTableFactory28.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap33 = slimTableFactory32.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory34 = slimTableFactory32.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap35 = slimTableFactory34.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap36 = slimTableFactory34.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory37 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass39 = slimTableFactory37.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory40 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass42 = slimTableFactory40.getTableType("");
        java.lang.String str44 = slimTableFactory40.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory45 = slimTableFactory40.copy();
        boolean boolean47 = slimTableFactory40.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap48 = slimTableFactory40.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap49 = slimTableFactory40.tableTypeArrays;
        slimTableFactory37.tableTypeArrays = strMap49;
        slimTableFactory34.tableTypeArrays = strMap49;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory52 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str54 = slimTableFactory52.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap55 = slimTableFactory52.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory56 = slimTableFactory52.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap57 = slimTableFactory52.tableTypeArrays;
        slimTableFactory34.tableTypeArrays = strMap57;
        java.util.Map<java.lang.String, java.lang.String> strMap59 = slimTableFactory34.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap59;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory61 = slimTableFactory0.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass63 = slimTableFactory61.getTableType("");
        java.lang.Class<?> wildcardClass64 = slimTableFactory61.getClass();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(slimTableFactory22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(slimTableFactory32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(slimTableFactory34);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNull(wildcardClass39);
        org.junit.Assert.assertNull(wildcardClass42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(slimTableFactory45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strMap48);
        org.junit.Assert.assertNotNull(strMap49);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!");
        org.junit.Assert.assertNotNull(strMap55);
        org.junit.Assert.assertNotNull(slimTableFactory56);
        org.junit.Assert.assertNotNull(strMap57);
        org.junit.Assert.assertNotNull(strMap59);
        org.junit.Assert.assertNotNull(slimTableFactory61);
        org.junit.Assert.assertNull(wildcardClass63);
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test08134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08134");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory0.copy();
        boolean boolean6 = slimTableFactory0.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap9 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap10 = slimTableFactory0.tableTypes;
        java.lang.String str12 = slimTableFactory0.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap13 = slimTableFactory0.tableTypeArrays;
        java.lang.String str15 = slimTableFactory0.getFullTableName("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass17 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.Table table19 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory0.parseDefineTableTypeRow(table19, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNull(wildcardClass17);
        org.junit.Assert.assertNotNull(slimTableFactory18);
    }

    @Test
    public void test08135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08135");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str6 = slimTableFactory4.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory4.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap7;
        java.lang.String str10 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap12 = slimTableFactory0.tableTypes;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap13 = slimTableFactory0.tableTypes;
        boolean boolean15 = slimTableFactory0.hasColon("hi!");
        java.lang.String str17 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory0.copy();
        boolean boolean20 = slimTableFactory18.hasColon("hi!");
        java.lang.String str22 = slimTableFactory18.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = slimTableFactory18.copy();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(slimTableFactory18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(slimTableFactory23);
    }

    @Test
    public void test08136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08136");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        java.lang.String str5 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass8 = slimTableFactory6.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory6.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory6.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap10;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap13 = slimTableFactory12.tableTypes;
        java.lang.Class<?> wildcardClass14 = strMap13.getClass();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test08137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08137");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str6 = slimTableFactory4.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory4.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap7;
        java.lang.String str10 = slimTableFactory0.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap11 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.Table table12 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable13 = slimTableFactory0.parseDefineTableTypeTable(table12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNotNull(strMap11);
    }

    @Test
    public void test08138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08138");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass3 = slimTableFactory1.getTableType("");
        java.lang.String str5 = slimTableFactory1.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory1.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap6;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        boolean boolean11 = slimTableFactory9.hasColon("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass13 = slimTableFactory9.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory9.copy();
        java.lang.String str16 = slimTableFactory14.makeTableType("");
        java.lang.String str18 = slimTableFactory14.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory14.copy();
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(slimTableFactory19);
    }

    @Test
    public void test08139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08139");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str6 = slimTableFactory4.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory4.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap7;
        java.lang.String str10 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap12 = slimTableFactory0.tableTypes;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap13 = slimTableFactory0.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass18 = slimTableFactory16.getTableType("");
        java.lang.String str20 = slimTableFactory16.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap21 = slimTableFactory16.tableTypeArrays;
        slimTableFactory15.tableTypeArrays = strMap21;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = slimTableFactory15.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = slimTableFactory23.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = slimTableFactory23.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = slimTableFactory23.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = slimTableFactory23.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = slimTableFactory27.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory29 = slimTableFactory28.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory30 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str32 = slimTableFactory30.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap33 = slimTableFactory30.tableTypeArrays;
        java.lang.String str35 = slimTableFactory30.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap36 = slimTableFactory30.tableTypeArrays;
        java.lang.String str38 = slimTableFactory30.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory39 = slimTableFactory30.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap40 = slimTableFactory30.tableTypeArrays;
        slimTableFactory29.tableTypeArrays = strMap40;
        slimTableFactory0.tableTypeArrays = strMap40;
        fitnesse.testsystems.slim.Table table43 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable44 = slimTableFactory0.parseDefineTableTypeTable(table43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(slimTableFactory23);
        org.junit.Assert.assertNotNull(slimTableFactory24);
        org.junit.Assert.assertNotNull(slimTableFactory25);
        org.junit.Assert.assertNotNull(slimTableFactory26);
        org.junit.Assert.assertNotNull(slimTableFactory27);
        org.junit.Assert.assertNotNull(slimTableFactory28);
        org.junit.Assert.assertNotNull(slimTableFactory29);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(slimTableFactory39);
        org.junit.Assert.assertNotNull(strMap40);
    }

    @Test
    public void test08140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08140");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass3 = slimTableFactory1.getTableType("");
        java.lang.String str5 = slimTableFactory1.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory1.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap6;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory8.copy();
        boolean boolean12 = slimTableFactory10.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory10.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory10.copy();
        boolean boolean16 = slimTableFactory14.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap17 = slimTableFactory14.tableTypeArrays;
        java.lang.String str19 = slimTableFactory14.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap20 = slimTableFactory14.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str23 = slimTableFactory21.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap24 = slimTableFactory21.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = slimTableFactory21.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap26 = slimTableFactory25.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = slimTableFactory25.copy();
        java.lang.String str29 = slimTableFactory27.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap30 = slimTableFactory27.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass32 = slimTableFactory27.getTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass34 = slimTableFactory27.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap35 = slimTableFactory27.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap36 = slimTableFactory27.tableTypeArrays;
        slimTableFactory14.tableTypeArrays = strMap36;
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(slimTableFactory13);
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNotNull(slimTableFactory25);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(slimTableFactory27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNull(wildcardClass32);
        org.junit.Assert.assertNull(wildcardClass34);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(strMap36);
    }

    @Test
    public void test08141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08141");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str6 = slimTableFactory4.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory4.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap7;
        java.lang.String str10 = slimTableFactory0.getFullTableName("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass12 = slimTableFactory0.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap13 = slimTableFactory0.tableTypeArrays;
        java.lang.String str15 = slimTableFactory0.getFullTableName("");
        java.lang.String str17 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap19 = slimTableFactory18.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap20 = slimTableFactory18.tableTypeArrays;
        fitnesse.testsystems.slim.Table table21 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable22 = slimTableFactory18.parseDefineTableTypeTable(table21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(slimTableFactory18);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(strMap20);
    }

    @Test
    public void test08142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08142");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.lang.String str4 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory5.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory6.tableTypes;
        java.lang.String str9 = slimTableFactory6.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass12 = slimTableFactory10.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass15 = slimTableFactory13.getTableType("");
        java.lang.String str17 = slimTableFactory13.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory13.copy();
        boolean boolean20 = slimTableFactory13.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap21 = slimTableFactory13.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap22 = slimTableFactory13.tableTypeArrays;
        slimTableFactory10.tableTypeArrays = strMap22;
        slimTableFactory6.tableTypeArrays = strMap22;
        java.util.Map<java.lang.String, java.lang.String> strMap25 = slimTableFactory6.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = slimTableFactory6.copy();
        java.lang.String str28 = slimTableFactory26.makeTableType("");
        fitnesse.testsystems.slim.Table table29 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext31 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable32 = slimTableFactory26.makeSlimTable(table29, "", slimTestContext31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(slimTableFactory18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(slimTableFactory26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
    }

    @Test
    public void test08143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08143");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap5 = slimTableFactory4.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory4.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory6.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory6.tableTypeArrays;
        java.lang.String str10 = slimTableFactory6.getFullTableName("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass12 = slimTableFactory6.getTableType("hi!");
        boolean boolean14 = slimTableFactory6.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str17 = slimTableFactory15.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap18 = slimTableFactory15.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory15.copy();
        boolean boolean21 = slimTableFactory15.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap22 = slimTableFactory15.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap23 = slimTableFactory15.tableTypeArrays;
        slimTableFactory6.tableTypeArrays = strMap23;
        boolean boolean26 = slimTableFactory6.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = slimTableFactory6.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str30 = slimTableFactory28.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap31 = slimTableFactory28.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory32 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str34 = slimTableFactory32.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap35 = slimTableFactory32.tableTypeArrays;
        slimTableFactory28.tableTypeArrays = strMap35;
        java.lang.String str38 = slimTableFactory28.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory39 = slimTableFactory28.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap40 = slimTableFactory28.tableTypes;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap41 = slimTableFactory28.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap42 = slimTableFactory28.tableTypeArrays;
        slimTableFactory6.tableTypeArrays = strMap42;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory44 = slimTableFactory6.copy();
        boolean boolean46 = slimTableFactory44.hasColon("hi!");
        java.lang.String str48 = slimTableFactory44.getFullTableName("");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(slimTableFactory19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(slimTableFactory27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(slimTableFactory39);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertNotNull(strMap42);
        org.junit.Assert.assertNotNull(slimTableFactory44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
    }

    @Test
    public void test08144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08144");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.lang.String str3 = slimTableFactory0.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap4 = slimTableFactory0.tableTypes;
        boolean boolean6 = slimTableFactory0.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory0.tableTypes;
        boolean boolean9 = slimTableFactory0.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory0.copy();
        java.lang.Class<?> wildcardClass11 = slimTableFactory10.getClass();
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!" + "'", str3, "hi!");
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test08145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08145");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass3 = slimTableFactory1.getTableType("");
        java.lang.String str5 = slimTableFactory1.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory1.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap6;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory8.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory8.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory8.copy();
        java.lang.String str14 = slimTableFactory12.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap15 = slimTableFactory12.tableTypeArrays;
        fitnesse.testsystems.slim.Table table16 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory12.parseDefineTableTypeRow(table16, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(strMap15);
    }

    @Test
    public void test08146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08146");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass3 = slimTableFactory1.getTableType("");
        java.lang.String str5 = slimTableFactory1.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory1.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap6;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory9.tableTypeArrays;
        java.lang.String str12 = slimTableFactory9.makeTableType("hi!");
        boolean boolean14 = slimTableFactory9.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap15 = slimTableFactory9.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = slimTableFactory16.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = slimTableFactory16.tableTypeArrays;
        slimTableFactory9.tableTypeArrays = strMap18;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap20 = slimTableFactory9.tableTypes;
        java.lang.String str22 = slimTableFactory9.makeTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass24 = slimTableFactory9.getTableType("hi!");
        java.lang.String str26 = slimTableFactory9.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap27 = slimTableFactory9.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap28 = slimTableFactory9.tableTypeArrays;
        java.lang.String str30 = slimTableFactory9.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory31 = slimTableFactory9.copy();
        java.lang.String str33 = slimTableFactory9.getFullTableName("hi!");
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(slimTableFactory17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNull(wildcardClass24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(slimTableFactory31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
    }

    @Test
    public void test08147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08147");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.lang.String str4 = slimTableFactory0.makeTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap5 = slimTableFactory0.tableTypes;
        java.lang.String str7 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str10 = slimTableFactory8.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory8.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory8.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap13 = slimTableFactory12.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory12.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap15 = slimTableFactory14.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory14.tableTypeArrays;
        java.lang.String str18 = slimTableFactory14.getFullTableName("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass20 = slimTableFactory14.getTableType("hi!");
        boolean boolean22 = slimTableFactory14.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str25 = slimTableFactory23.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap26 = slimTableFactory23.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = slimTableFactory23.copy();
        boolean boolean29 = slimTableFactory23.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap30 = slimTableFactory23.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap31 = slimTableFactory23.tableTypeArrays;
        slimTableFactory14.tableTypeArrays = strMap31;
        slimTableFactory0.tableTypeArrays = strMap31;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap34 = slimTableFactory0.tableTypes;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap35 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory36 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory37 = slimTableFactory36.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory38 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory39 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass41 = slimTableFactory39.getTableType("");
        java.lang.String str43 = slimTableFactory39.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap44 = slimTableFactory39.tableTypeArrays;
        slimTableFactory38.tableTypeArrays = strMap44;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory46 = slimTableFactory38.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory47 = slimTableFactory38.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap48 = slimTableFactory47.tableTypeArrays;
        slimTableFactory37.tableTypeArrays = strMap48;
        slimTableFactory0.tableTypeArrays = strMap48;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap51 = slimTableFactory0.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass53 = slimTableFactory0.getTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass55 = slimTableFactory0.getTableType("hi!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(slimTableFactory27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(slimTableFactory37);
        org.junit.Assert.assertNull(wildcardClass41);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(strMap44);
        org.junit.Assert.assertNotNull(slimTableFactory46);
        org.junit.Assert.assertNotNull(slimTableFactory47);
        org.junit.Assert.assertNotNull(strMap48);
        org.junit.Assert.assertNotNull(strMap51);
        org.junit.Assert.assertNull(wildcardClass53);
        org.junit.Assert.assertNull(wildcardClass55);
    }

    @Test
    public void test08148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08148");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.lang.String str4 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory0.copy();
        boolean boolean7 = slimTableFactory0.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap9 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str13 = slimTableFactory11.getFullTableName("hi!");
        java.lang.String str15 = slimTableFactory11.makeTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap16 = slimTableFactory11.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass19 = slimTableFactory17.getTableType("");
        java.lang.String str21 = slimTableFactory17.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap22 = slimTableFactory17.tableTypeArrays;
        slimTableFactory11.tableTypeArrays = strMap22;
        slimTableFactory10.tableTypeArrays = strMap22;
        java.lang.String str26 = slimTableFactory10.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap27 = slimTableFactory10.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = slimTableFactory10.copy();
        fitnesse.testsystems.slim.Table table29 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable30 = slimTableFactory28.parseDefineTableTypeTable(table29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(slimTableFactory28);
    }

    @Test
    public void test08149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08149");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap5 = slimTableFactory4.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory4.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory6.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory6.tableTypeArrays;
        java.lang.String str10 = slimTableFactory6.getFullTableName("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass12 = slimTableFactory6.getTableType("hi!");
        java.lang.String str14 = slimTableFactory6.makeTableType("hi!");
        java.lang.String str16 = slimTableFactory6.makeTableType("");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test08150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08150");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass3 = slimTableFactory1.getTableType("");
        java.lang.String str5 = slimTableFactory1.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory1.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap6;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory0.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass11 = slimTableFactory9.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap12 = slimTableFactory9.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory9.copy();
        boolean boolean15 = slimTableFactory13.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap16 = slimTableFactory13.tableTypes;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap17 = slimTableFactory13.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap18 = slimTableFactory13.tableTypeArrays;
        java.lang.String str20 = slimTableFactory13.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = slimTableFactory13.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass23 = slimTableFactory21.getTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass25 = slimTableFactory21.getTableType("hi!");
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(slimTableFactory13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(slimTableFactory21);
        org.junit.Assert.assertNull(wildcardClass23);
        org.junit.Assert.assertNull(wildcardClass25);
    }

    @Test
    public void test08151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08151");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.lang.String str4 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory5.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory6.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass9 = slimTableFactory6.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory10.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass13 = slimTableFactory11.getTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass15 = slimTableFactory11.getTableType("hi!");
        boolean boolean17 = slimTableFactory11.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap18 = slimTableFactory11.tableTypeArrays;
        slimTableFactory6.tableTypeArrays = strMap18;
        java.lang.String str21 = slimTableFactory6.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = slimTableFactory22.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass25 = slimTableFactory23.getTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass27 = slimTableFactory23.getTableType("hi!");
        boolean boolean29 = slimTableFactory23.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory30 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str32 = slimTableFactory30.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap33 = slimTableFactory30.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory34 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str36 = slimTableFactory34.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap37 = slimTableFactory34.tableTypeArrays;
        slimTableFactory30.tableTypeArrays = strMap37;
        java.lang.String str40 = slimTableFactory30.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory41 = slimTableFactory30.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass43 = slimTableFactory41.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory44 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass46 = slimTableFactory44.getTableType("");
        boolean boolean48 = slimTableFactory44.hasColon("");
        boolean boolean50 = slimTableFactory44.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass52 = slimTableFactory44.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory53 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str55 = slimTableFactory53.getFullTableName("hi!");
        java.lang.String str57 = slimTableFactory53.makeTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap58 = slimTableFactory53.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory59 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass61 = slimTableFactory59.getTableType("");
        java.lang.String str63 = slimTableFactory59.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap64 = slimTableFactory59.tableTypeArrays;
        slimTableFactory53.tableTypeArrays = strMap64;
        slimTableFactory44.tableTypeArrays = strMap64;
        slimTableFactory41.tableTypeArrays = strMap64;
        slimTableFactory23.tableTypeArrays = strMap64;
        java.util.Map<java.lang.String, java.lang.String> strMap69 = slimTableFactory23.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap70 = slimTableFactory23.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory71 = slimTableFactory23.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory72 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory73 = slimTableFactory72.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass75 = slimTableFactory73.getTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass77 = slimTableFactory73.getTableType("hi!");
        boolean boolean79 = slimTableFactory73.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap80 = slimTableFactory73.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory81 = slimTableFactory73.copy();
        boolean boolean83 = slimTableFactory81.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap84 = slimTableFactory81.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory85 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str87 = slimTableFactory85.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap88 = slimTableFactory85.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory89 = slimTableFactory85.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap90 = slimTableFactory89.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory91 = slimTableFactory89.copy();
        java.lang.String str93 = slimTableFactory91.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory94 = slimTableFactory91.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap95 = slimTableFactory91.tableTypeArrays;
        slimTableFactory81.tableTypeArrays = strMap95;
        slimTableFactory23.tableTypeArrays = strMap95;
        slimTableFactory6.tableTypeArrays = strMap95;
        java.lang.Class<?> wildcardClass99 = strMap95.getClass();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(slimTableFactory23);
        org.junit.Assert.assertNull(wildcardClass25);
        org.junit.Assert.assertNull(wildcardClass27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(slimTableFactory41);
        org.junit.Assert.assertNull(wildcardClass43);
        org.junit.Assert.assertNull(wildcardClass46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(wildcardClass52);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hi!" + "'", str55, "hi!");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(strMap58);
        org.junit.Assert.assertNull(wildcardClass61);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(strMap64);
        org.junit.Assert.assertNotNull(strMap69);
        org.junit.Assert.assertNotNull(strMap70);
        org.junit.Assert.assertNotNull(slimTableFactory71);
        org.junit.Assert.assertNotNull(slimTableFactory73);
        org.junit.Assert.assertNull(wildcardClass75);
        org.junit.Assert.assertNull(wildcardClass77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(strMap80);
        org.junit.Assert.assertNotNull(slimTableFactory81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(strMap84);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "hi!" + "'", str87, "hi!");
        org.junit.Assert.assertNotNull(strMap88);
        org.junit.Assert.assertNotNull(slimTableFactory89);
        org.junit.Assert.assertNotNull(strMap90);
        org.junit.Assert.assertNotNull(slimTableFactory91);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "hi!" + "'", str93, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory94);
        org.junit.Assert.assertNotNull(strMap95);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test08152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08152");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.lang.String str4 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory0.copy();
        java.lang.String str7 = slimTableFactory0.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap9 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str12 = slimTableFactory10.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap13 = slimTableFactory10.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap13;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.Table table16 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory0.parseDefineTableTypeRow(table16, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(slimTableFactory15);
    }

    @Test
    public void test08153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08153");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.lang.String str4 = slimTableFactory0.makeTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap5 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory0.copy();
        java.lang.String str8 = slimTableFactory0.makeTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap9 = slimTableFactory0.tableTypes;
        java.lang.String str11 = slimTableFactory0.getFullTableName("");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test08154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08154");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass3 = slimTableFactory1.getTableType("");
        java.lang.String str5 = slimTableFactory1.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory1.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap6;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory9.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass13 = slimTableFactory11.getTableType("");
        java.lang.String str15 = slimTableFactory11.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory11.copy();
        boolean boolean18 = slimTableFactory11.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap19 = slimTableFactory11.tableTypeArrays;
        slimTableFactory9.tableTypeArrays = strMap19;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = slimTableFactory9.copy();
        java.lang.String str23 = slimTableFactory21.makeTableType("hi!");
        boolean boolean25 = slimTableFactory21.hasColon("");
        java.lang.String str27 = slimTableFactory21.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap28 = slimTableFactory21.tableTypes;
        java.lang.Class<?> wildcardClass29 = strMap28.getClass();
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(slimTableFactory21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test08155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08155");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap5 = slimTableFactory4.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory4.copy();
        java.lang.String str8 = slimTableFactory6.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory6.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory9.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap11 = slimTableFactory10.tableTypes;
        java.lang.Class<?> wildcardClass12 = slimTableFactory10.getClass();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test08156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08156");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.lang.String str4 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory0.copy();
        boolean boolean7 = slimTableFactory0.hasColon("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass9 = slimTableFactory0.getTableType("");
        java.lang.String str11 = slimTableFactory0.makeTableType("");
        java.lang.String str13 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap15 = slimTableFactory14.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass17 = slimTableFactory14.getTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass19 = slimTableFactory14.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap20 = slimTableFactory14.tableTypeArrays;
        java.lang.String str22 = slimTableFactory14.makeTableType("");
        java.lang.String str24 = slimTableFactory14.makeTableType("");
        java.lang.Class<?> wildcardClass25 = slimTableFactory14.getClass();
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNull(wildcardClass17);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test08157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08157");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        boolean boolean4 = slimTableFactory0.hasColon("");
        boolean boolean6 = slimTableFactory0.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass8 = slimTableFactory0.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str11 = slimTableFactory9.getFullTableName("hi!");
        java.lang.String str13 = slimTableFactory9.makeTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap14 = slimTableFactory9.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass17 = slimTableFactory15.getTableType("");
        java.lang.String str19 = slimTableFactory15.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap20 = slimTableFactory15.tableTypeArrays;
        slimTableFactory9.tableTypeArrays = strMap20;
        slimTableFactory0.tableTypeArrays = strMap20;
        boolean boolean24 = slimTableFactory0.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = slimTableFactory0.copy();
        java.lang.String str27 = slimTableFactory25.getFullTableName("hi!");
        boolean boolean29 = slimTableFactory25.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap30 = slimTableFactory25.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory31 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str33 = slimTableFactory31.getFullTableName("hi!");
        java.lang.String str35 = slimTableFactory31.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap36 = null;
        slimTableFactory31.tableTypeArrays = strMap36;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory38 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str40 = slimTableFactory38.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap41 = slimTableFactory38.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory42 = slimTableFactory38.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap43 = slimTableFactory42.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory44 = slimTableFactory42.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap45 = slimTableFactory44.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap46 = slimTableFactory44.tableTypeArrays;
        slimTableFactory31.tableTypeArrays = strMap46;
        slimTableFactory25.tableTypeArrays = strMap46;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass50 = slimTableFactory25.getTableType("hi!");
        java.lang.String str52 = slimTableFactory25.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory53 = slimTableFactory25.copy();
        java.lang.String str55 = slimTableFactory53.getFullTableName("hi!");
        boolean boolean57 = slimTableFactory53.hasColon("");
        java.lang.Class<?> wildcardClass58 = slimTableFactory53.getClass();
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNull(wildcardClass17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(slimTableFactory25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "hi!" + "'", str40, "hi!");
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertNotNull(slimTableFactory42);
        org.junit.Assert.assertNotNull(strMap43);
        org.junit.Assert.assertNotNull(slimTableFactory44);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNotNull(strMap46);
        org.junit.Assert.assertNull(wildcardClass50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(slimTableFactory53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hi!" + "'", str55, "hi!");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test08158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08158");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.lang.String str4 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory0.copy();
        boolean boolean7 = slimTableFactory0.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap9 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory0.copy();
        boolean boolean12 = slimTableFactory10.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap13 = slimTableFactory10.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory10.copy();
        java.lang.String str16 = slimTableFactory14.getFullTableName("hi!");
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
    }

    @Test
    public void test08159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08159");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.makeTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass4 = slimTableFactory0.getTableType("");
        java.lang.String str6 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory0.copy();
        boolean boolean9 = slimTableFactory0.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory0.tableTypeArrays;
        java.lang.String str12 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap13 = slimTableFactory0.tableTypeArrays;
        boolean boolean15 = slimTableFactory0.hasColon("hi!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test08160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08160");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap5 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory0.copy();
        boolean boolean8 = slimTableFactory6.hasColon("hi!");
        fitnesse.testsystems.slim.Table table9 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext11 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable12 = slimTableFactory6.makeSlimTable(table9, "", slimTestContext11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test08161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08161");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass3 = slimTableFactory1.getTableType("");
        java.lang.String str5 = slimTableFactory1.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory1.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap6;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory8.copy();
        boolean boolean12 = slimTableFactory10.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory10.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass15 = slimTableFactory10.getTableType("");
        java.lang.Class<?> wildcardClass16 = slimTableFactory10.getClass();
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(slimTableFactory13);
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test08162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08162");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.lang.String str4 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory0.copy();
        boolean boolean7 = slimTableFactory0.hasColon("");
        boolean boolean9 = slimTableFactory0.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.Table table11 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable12 = slimTableFactory0.parseDefineTableTypeTable(table11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strMap10);
    }

    @Test
    public void test08163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08163");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.lang.String str4 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap6 = slimTableFactory5.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory5.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass9 = slimTableFactory7.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory7.tableTypeArrays;
        java.lang.String str12 = slimTableFactory7.makeTableType("hi!");
        java.lang.String str14 = slimTableFactory7.getFullTableName("");
        java.lang.String str16 = slimTableFactory7.getFullTableName("");
        fitnesse.testsystems.slim.Table table17 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory7.parseDefineTableTypeRow(table17, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test08164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08164");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.lang.String str4 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory0.copy();
        java.lang.String str7 = slimTableFactory0.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str10 = slimTableFactory8.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory8.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str14 = slimTableFactory12.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap15 = slimTableFactory12.tableTypeArrays;
        slimTableFactory8.tableTypeArrays = strMap15;
        java.lang.String str18 = slimTableFactory8.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str21 = slimTableFactory19.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap22 = slimTableFactory19.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str25 = slimTableFactory23.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap26 = slimTableFactory23.tableTypeArrays;
        slimTableFactory19.tableTypeArrays = strMap26;
        slimTableFactory8.tableTypeArrays = strMap26;
        slimTableFactory0.tableTypeArrays = strMap26;
        java.util.Map<java.lang.String, java.lang.String> strMap30 = slimTableFactory0.tableTypeArrays;
        java.lang.String str32 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap33 = slimTableFactory0.tableTypeArrays;
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
        org.junit.Assert.assertNotNull(strMap33);
    }

    @Test
    public void test08165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08165");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.lang.String str4 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory0.copy();
        java.lang.String str7 = slimTableFactory0.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str10 = slimTableFactory8.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory8.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str14 = slimTableFactory12.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap15 = slimTableFactory12.tableTypeArrays;
        slimTableFactory8.tableTypeArrays = strMap15;
        java.lang.String str18 = slimTableFactory8.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str21 = slimTableFactory19.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap22 = slimTableFactory19.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str25 = slimTableFactory23.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap26 = slimTableFactory23.tableTypeArrays;
        slimTableFactory19.tableTypeArrays = strMap26;
        slimTableFactory8.tableTypeArrays = strMap26;
        slimTableFactory0.tableTypeArrays = strMap26;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory30 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap31 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory32 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory33 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass35 = slimTableFactory33.getTableType("");
        java.lang.String str37 = slimTableFactory33.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap38 = slimTableFactory33.tableTypeArrays;
        slimTableFactory32.tableTypeArrays = strMap38;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory40 = slimTableFactory32.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory41 = slimTableFactory40.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory42 = slimTableFactory40.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory43 = slimTableFactory40.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory44 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory45 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass47 = slimTableFactory45.getTableType("");
        java.lang.String str49 = slimTableFactory45.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap50 = slimTableFactory45.tableTypeArrays;
        slimTableFactory44.tableTypeArrays = strMap50;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory52 = slimTableFactory44.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory53 = slimTableFactory52.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory54 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str56 = slimTableFactory54.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap57 = slimTableFactory54.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap58 = slimTableFactory54.tableTypeArrays;
        slimTableFactory53.tableTypeArrays = strMap58;
        slimTableFactory43.tableTypeArrays = strMap58;
        slimTableFactory0.tableTypeArrays = strMap58;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory62 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap63 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap64 = slimTableFactory0.tableTypes;
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(slimTableFactory30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNull(wildcardClass35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertNotNull(slimTableFactory40);
        org.junit.Assert.assertNotNull(slimTableFactory41);
        org.junit.Assert.assertNotNull(slimTableFactory42);
        org.junit.Assert.assertNotNull(slimTableFactory43);
        org.junit.Assert.assertNull(wildcardClass47);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNotNull(slimTableFactory52);
        org.junit.Assert.assertNotNull(slimTableFactory53);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hi!" + "'", str56, "hi!");
        org.junit.Assert.assertNotNull(strMap57);
        org.junit.Assert.assertNotNull(strMap58);
        org.junit.Assert.assertNotNull(slimTableFactory62);
        org.junit.Assert.assertNotNull(strMap63);
        org.junit.Assert.assertNotNull(strMap64);
    }

    @Test
    public void test08166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08166");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str6 = slimTableFactory4.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory4.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap7;
        java.lang.String str10 = slimTableFactory0.makeTableType("");
        java.lang.String str12 = slimTableFactory0.makeTableType("hi!");
        boolean boolean14 = slimTableFactory0.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap15 = slimTableFactory0.tableTypes;
        boolean boolean17 = slimTableFactory0.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory0.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass20 = slimTableFactory0.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap21 = slimTableFactory0.tableTypeArrays;
        boolean boolean23 = slimTableFactory0.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = slimTableFactory0.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass26 = slimTableFactory24.getTableType("hi!");
        fitnesse.testsystems.slim.Table table27 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable28 = slimTableFactory24.parseDefineTableTypeTable(table27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(slimTableFactory18);
        org.junit.Assert.assertNull(wildcardClass20);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(slimTableFactory24);
        org.junit.Assert.assertNull(wildcardClass26);
    }

    @Test
    public void test08167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08167");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory0.tableTypeArrays;
        java.lang.String str6 = slimTableFactory0.makeTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass8 = slimTableFactory0.getTableType("");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNull(wildcardClass8);
    }

    @Test
    public void test08168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08168");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str6 = slimTableFactory4.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory4.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap7;
        java.lang.String str10 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory0.copy();
        java.lang.String str13 = slimTableFactory11.makeTableType("hi!");
        java.lang.String str15 = slimTableFactory11.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory11.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass18 = slimTableFactory16.getTableType("");
        java.lang.String str20 = slimTableFactory16.getFullTableName("hi!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
    }

    @Test
    public void test08169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08169");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass3 = slimTableFactory1.getTableType("");
        java.lang.String str5 = slimTableFactory1.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory1.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap6;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory9.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory9.copy();
        java.lang.String str13 = slimTableFactory11.makeTableType("hi!");
        fitnesse.testsystems.slim.Table table14 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable15 = slimTableFactory11.parseDefineTableTypeTable(table14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
    }

    @Test
    public void test08170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08170");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass3 = slimTableFactory1.getTableType("");
        java.lang.String str5 = slimTableFactory1.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory1.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap6;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory9.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass13 = slimTableFactory11.getTableType("");
        java.lang.String str15 = slimTableFactory11.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory11.copy();
        boolean boolean18 = slimTableFactory11.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap19 = slimTableFactory11.tableTypeArrays;
        slimTableFactory9.tableTypeArrays = strMap19;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = slimTableFactory9.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass23 = slimTableFactory21.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = slimTableFactory21.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap25 = slimTableFactory24.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass27 = slimTableFactory24.getTableType("");
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(slimTableFactory21);
        org.junit.Assert.assertNull(wildcardClass23);
        org.junit.Assert.assertNotNull(slimTableFactory24);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNull(wildcardClass27);
    }

    @Test
    public void test08171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08171");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str6 = slimTableFactory4.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory4.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap7;
        java.lang.String str10 = slimTableFactory0.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap11 = slimTableFactory0.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass13 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap14 = slimTableFactory0.tableTypes;
        java.lang.Class<?> wildcardClass15 = strMap14.getClass();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test08172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08172");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap2 = slimTableFactory0.tableTypeArrays;
        java.lang.String str4 = slimTableFactory0.makeTableType("");
        boolean boolean6 = slimTableFactory0.hasColon("hi!");
        boolean boolean8 = slimTableFactory0.hasColon("hi!");
        boolean boolean10 = slimTableFactory0.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory0.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass13 = slimTableFactory11.getTableType("hi!");
        fitnesse.testsystems.slim.Table table14 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable15 = slimTableFactory11.parseDefineTableTypeTable(table14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNull(wildcardClass13);
    }

    @Test
    public void test08173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08173");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory0.copy();
        boolean boolean6 = slimTableFactory0.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap9 = slimTableFactory0.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass11 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap12 = slimTableFactory0.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory0.getTableType("hi!");
        boolean boolean16 = slimTableFactory0.hasColon("");
        fitnesse.testsystems.slim.Table table17 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext19 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable20 = slimTableFactory0.makeSlimTable(table17, "hi!", slimTestContext19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test08174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08174");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass3 = slimTableFactory1.getTableType("");
        java.lang.String str5 = slimTableFactory1.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory1.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap6;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory0.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass11 = slimTableFactory9.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap12 = slimTableFactory9.tableTypes;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap13 = slimTableFactory9.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass15 = slimTableFactory9.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str18 = slimTableFactory16.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap19 = slimTableFactory16.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory16.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap21 = slimTableFactory16.tableTypeArrays;
        java.lang.String str23 = slimTableFactory16.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap24 = slimTableFactory16.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap25 = slimTableFactory16.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = slimTableFactory26.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass29 = slimTableFactory27.getTableType("hi!");
        boolean boolean31 = slimTableFactory27.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap32 = slimTableFactory27.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap33 = slimTableFactory27.tableTypeArrays;
        slimTableFactory16.tableTypeArrays = strMap33;
        slimTableFactory9.tableTypeArrays = strMap33;
        java.lang.String str37 = slimTableFactory9.makeTableType("hi!");
        java.lang.String str39 = slimTableFactory9.getFullTableName("");
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(slimTableFactory20);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(slimTableFactory27);
        org.junit.Assert.assertNull(wildcardClass29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
    }

    @Test
    public void test08175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08175");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap5 = slimTableFactory4.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory4.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory6.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory6.tableTypeArrays;
        java.lang.String str10 = slimTableFactory6.getFullTableName("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass12 = slimTableFactory6.getTableType("hi!");
        boolean boolean14 = slimTableFactory6.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str17 = slimTableFactory15.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap18 = slimTableFactory15.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory15.copy();
        boolean boolean21 = slimTableFactory15.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap22 = slimTableFactory15.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap23 = slimTableFactory15.tableTypeArrays;
        slimTableFactory6.tableTypeArrays = strMap23;
        java.lang.String str26 = slimTableFactory6.makeTableType("hi!");
        java.lang.String str28 = slimTableFactory6.getFullTableName("hi!");
        java.lang.String str30 = slimTableFactory6.getFullTableName("");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(slimTableFactory19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
    }

    @Test
    public void test08176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08176");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.lang.String str4 = slimTableFactory0.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap5 = null;
        slimTableFactory0.tableTypeArrays = strMap5;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str9 = slimTableFactory7.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory7.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory7.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap12 = slimTableFactory11.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory11.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory13.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap15 = slimTableFactory13.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap15;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = slimTableFactory0.copy();
        java.lang.String str19 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str22 = slimTableFactory20.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap23 = slimTableFactory20.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = slimTableFactory20.copy();
        boolean boolean26 = slimTableFactory20.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass28 = slimTableFactory20.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory29 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str31 = slimTableFactory29.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap32 = slimTableFactory29.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory33 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str35 = slimTableFactory33.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap36 = slimTableFactory33.tableTypeArrays;
        slimTableFactory29.tableTypeArrays = strMap36;
        java.lang.String str39 = slimTableFactory29.getFullTableName("");
        boolean boolean41 = slimTableFactory29.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory42 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory43 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass45 = slimTableFactory43.getTableType("");
        java.lang.String str47 = slimTableFactory43.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap48 = slimTableFactory43.tableTypeArrays;
        slimTableFactory42.tableTypeArrays = strMap48;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory50 = slimTableFactory42.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory51 = slimTableFactory42.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap52 = slimTableFactory51.tableTypeArrays;
        slimTableFactory29.tableTypeArrays = strMap52;
        slimTableFactory20.tableTypeArrays = strMap52;
        slimTableFactory0.tableTypeArrays = strMap52;
        java.lang.Class<?> wildcardClass56 = strMap52.getClass();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(slimTableFactory13);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(slimTableFactory17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(slimTableFactory24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(wildcardClass28);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(wildcardClass45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(strMap48);
        org.junit.Assert.assertNotNull(slimTableFactory50);
        org.junit.Assert.assertNotNull(slimTableFactory51);
        org.junit.Assert.assertNotNull(strMap52);
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test08177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08177");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory0.copy();
        boolean boolean6 = slimTableFactory0.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap9 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory10.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory10.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory10.getTableType("hi!");
        java.lang.String str16 = slimTableFactory10.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap17 = slimTableFactory10.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap17;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass21 = slimTableFactory19.getTableType("");
        boolean boolean23 = slimTableFactory19.hasColon("");
        boolean boolean25 = slimTableFactory19.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass27 = slimTableFactory19.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str30 = slimTableFactory28.getFullTableName("hi!");
        java.lang.String str32 = slimTableFactory28.makeTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap33 = slimTableFactory28.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory34 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass36 = slimTableFactory34.getTableType("");
        java.lang.String str38 = slimTableFactory34.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap39 = slimTableFactory34.tableTypeArrays;
        slimTableFactory28.tableTypeArrays = strMap39;
        slimTableFactory19.tableTypeArrays = strMap39;
        boolean boolean43 = slimTableFactory19.hasColon("");
        boolean boolean45 = slimTableFactory19.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory46 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str48 = slimTableFactory46.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap49 = slimTableFactory46.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory50 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str52 = slimTableFactory50.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap53 = slimTableFactory50.tableTypeArrays;
        slimTableFactory46.tableTypeArrays = strMap53;
        java.lang.String str56 = slimTableFactory46.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap57 = slimTableFactory46.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass59 = slimTableFactory46.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory60 = slimTableFactory46.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory61 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass63 = slimTableFactory61.getTableType("");
        java.lang.String str65 = slimTableFactory61.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory66 = slimTableFactory61.copy();
        boolean boolean68 = slimTableFactory61.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap69 = slimTableFactory61.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap70 = slimTableFactory61.tableTypeArrays;
        slimTableFactory46.tableTypeArrays = strMap70;
        slimTableFactory19.tableTypeArrays = strMap70;
        slimTableFactory0.tableTypeArrays = strMap70;
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNull(wildcardClass21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(wildcardClass27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(wildcardClass36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "hi!" + "'", str48, "hi!");
        org.junit.Assert.assertNotNull(strMap49);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "hi!" + "'", str52, "hi!");
        org.junit.Assert.assertNotNull(strMap53);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(strMap57);
        org.junit.Assert.assertNull(wildcardClass59);
        org.junit.Assert.assertNotNull(slimTableFactory60);
        org.junit.Assert.assertNull(wildcardClass63);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(slimTableFactory66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(strMap69);
        org.junit.Assert.assertNotNull(strMap70);
    }

    @Test
    public void test08178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08178");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.lang.String str4 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory5.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory6.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass9 = slimTableFactory6.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory6.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass12 = slimTableFactory6.getTableType("hi!");
        java.lang.Class<?> wildcardClass13 = slimTableFactory6.getClass();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test08179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08179");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.lang.String str3 = slimTableFactory0.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap4 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str8 = slimTableFactory6.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap9 = slimTableFactory6.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str12 = slimTableFactory10.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap13 = slimTableFactory10.tableTypeArrays;
        slimTableFactory6.tableTypeArrays = strMap13;
        java.lang.String str16 = slimTableFactory6.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = slimTableFactory6.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap18 = slimTableFactory6.tableTypes;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap19 = slimTableFactory6.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass21 = slimTableFactory6.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap22 = slimTableFactory6.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = slimTableFactory23.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass26 = slimTableFactory24.getTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass28 = slimTableFactory24.getTableType("hi!");
        boolean boolean30 = slimTableFactory24.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap31 = slimTableFactory24.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory32 = slimTableFactory24.copy();
        java.lang.String str34 = slimTableFactory24.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap35 = slimTableFactory24.tableTypeArrays;
        slimTableFactory6.tableTypeArrays = strMap35;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory37 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass39 = slimTableFactory37.getTableType("");
        java.lang.String str41 = slimTableFactory37.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory42 = slimTableFactory37.copy();
        java.lang.String str44 = slimTableFactory37.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap45 = slimTableFactory37.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap46 = slimTableFactory37.tableTypes;
        java.lang.String str48 = slimTableFactory37.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory49 = slimTableFactory37.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap50 = slimTableFactory49.tableTypes;
        java.lang.String str52 = slimTableFactory49.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory53 = slimTableFactory49.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory54 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory55 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass57 = slimTableFactory55.getTableType("");
        java.lang.String str59 = slimTableFactory55.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap60 = slimTableFactory55.tableTypeArrays;
        slimTableFactory54.tableTypeArrays = strMap60;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory62 = slimTableFactory54.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory63 = slimTableFactory62.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory64 = slimTableFactory62.copy();
        java.lang.String str66 = slimTableFactory62.makeTableType("");
        java.lang.String str68 = slimTableFactory62.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap69 = slimTableFactory62.tableTypeArrays;
        slimTableFactory53.tableTypeArrays = strMap69;
        slimTableFactory6.tableTypeArrays = strMap69;
        slimTableFactory5.tableTypeArrays = strMap69;
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!" + "'", str3, "hi!");
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(slimTableFactory17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNull(wildcardClass21);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(slimTableFactory24);
        org.junit.Assert.assertNull(wildcardClass26);
        org.junit.Assert.assertNull(wildcardClass28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(slimTableFactory32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNull(wildcardClass39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(slimTableFactory42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi!" + "'", str44, "hi!");
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNotNull(strMap46);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "hi!" + "'", str48, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "hi!" + "'", str52, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory53);
        org.junit.Assert.assertNull(wildcardClass57);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(strMap60);
        org.junit.Assert.assertNotNull(slimTableFactory62);
        org.junit.Assert.assertNotNull(slimTableFactory63);
        org.junit.Assert.assertNotNull(slimTableFactory64);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(strMap69);
    }

    @Test
    public void test08180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08180");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.lang.String str4 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory0.copy();
        boolean boolean7 = slimTableFactory0.hasColon("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass9 = slimTableFactory0.getTableType("");
        java.lang.String str11 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap13 = slimTableFactory0.tableTypes;
        java.lang.String str15 = slimTableFactory0.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap16 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass20 = slimTableFactory18.getTableType("");
        java.lang.String str22 = slimTableFactory18.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap23 = slimTableFactory18.tableTypeArrays;
        slimTableFactory17.tableTypeArrays = strMap23;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = slimTableFactory17.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = slimTableFactory25.copy();
        boolean boolean28 = slimTableFactory25.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap29 = slimTableFactory25.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass31 = slimTableFactory25.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory32 = slimTableFactory25.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = slimTableFactory32.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap34 = slimTableFactory32.tableTypeArrays;
        java.lang.String str36 = slimTableFactory32.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap37 = slimTableFactory32.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap37;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass40 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap41 = slimTableFactory0.tableTypes;
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNull(wildcardClass20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(slimTableFactory25);
        org.junit.Assert.assertNotNull(slimTableFactory26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertNotNull(slimTableFactory32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNull(wildcardClass40);
        org.junit.Assert.assertNotNull(strMap41);
    }

    @Test
    public void test08181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08181");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str6 = slimTableFactory4.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory4.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap7;
        java.lang.String str10 = slimTableFactory0.getFullTableName("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass12 = slimTableFactory0.getTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory0.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap16 = slimTableFactory15.tableTypes;
        java.lang.String str18 = slimTableFactory15.makeTableType("");
        fitnesse.testsystems.slim.Table table19 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext21 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable22 = slimTableFactory15.makeSlimTable(table19, "", slimTestContext21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
    }

    @Test
    public void test08182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08182");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory2 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass5 = slimTableFactory3.getTableType("");
        java.lang.String str7 = slimTableFactory3.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory3.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap9 = slimTableFactory3.tableTypeArrays;
        java.lang.String str11 = slimTableFactory3.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass15 = slimTableFactory13.getTableType("");
        java.lang.String str17 = slimTableFactory13.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap18 = slimTableFactory13.tableTypeArrays;
        slimTableFactory12.tableTypeArrays = strMap18;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory12.copy();
        java.lang.String str22 = slimTableFactory12.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap23 = slimTableFactory12.tableTypeArrays;
        slimTableFactory3.tableTypeArrays = strMap23;
        slimTableFactory1.tableTypeArrays = strMap23;
        java.lang.String str27 = slimTableFactory1.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory29 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass31 = slimTableFactory29.getTableType("");
        java.lang.String str33 = slimTableFactory29.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap34 = slimTableFactory29.tableTypeArrays;
        slimTableFactory28.tableTypeArrays = strMap34;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory36 = slimTableFactory28.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap37 = slimTableFactory28.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory38 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str40 = slimTableFactory38.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap41 = slimTableFactory38.tableTypeArrays;
        java.lang.String str43 = slimTableFactory38.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap44 = slimTableFactory38.tableTypeArrays;
        slimTableFactory28.tableTypeArrays = strMap44;
        slimTableFactory1.tableTypeArrays = strMap44;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap47 = slimTableFactory1.tableTypes;
        java.lang.String str49 = slimTableFactory1.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory50 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str52 = slimTableFactory50.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap53 = slimTableFactory50.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory54 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str56 = slimTableFactory54.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap57 = slimTableFactory54.tableTypeArrays;
        slimTableFactory50.tableTypeArrays = strMap57;
        java.lang.String str60 = slimTableFactory50.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory61 = slimTableFactory50.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory62 = slimTableFactory61.copy();
        java.lang.String str64 = slimTableFactory61.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap65 = slimTableFactory61.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap65;
        java.util.Map<java.lang.String, java.lang.String> strMap67 = slimTableFactory1.tableTypeArrays;
        boolean boolean69 = slimTableFactory1.hasColon("");
        fitnesse.testsystems.slim.Table table70 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable71 = slimTableFactory1.parseDefineTableTypeTable(table70);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(slimTableFactory2);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(slimTableFactory20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNotNull(slimTableFactory36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "hi!" + "'", str40, "hi!");
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(strMap44);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hi!" + "'", str49, "hi!");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "hi!" + "'", str52, "hi!");
        org.junit.Assert.assertNotNull(strMap53);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hi!" + "'", str56, "hi!");
        org.junit.Assert.assertNotNull(strMap57);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(slimTableFactory61);
        org.junit.Assert.assertNotNull(slimTableFactory62);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "hi!" + "'", str64, "hi!");
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertNotNull(strMap67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test08183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08183");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.lang.String str4 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap6 = slimTableFactory5.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory5.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory5.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass10 = slimTableFactory5.getTableType("hi!");
        java.lang.String str12 = slimTableFactory5.getFullTableName("");
        fitnesse.testsystems.slim.Table table13 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext15 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable16 = slimTableFactory5.makeSlimTable(table13, "hi!", slimTestContext15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test08184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08184");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.lang.String str4 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory0.copy();
        java.lang.String str7 = slimTableFactory0.makeTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass9 = slimTableFactory0.getTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass11 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap12 = slimTableFactory0.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.Table table15 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory0.parseDefineTableTypeRow(table15, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNull(wildcardClass14);
    }

    @Test
    public void test08185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08185");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap5 = slimTableFactory4.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory4.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory6.copy();
        java.lang.String str9 = slimTableFactory7.makeTableType("");
        java.lang.String str11 = slimTableFactory7.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap12 = slimTableFactory7.tableTypes;
        java.lang.String str14 = slimTableFactory7.getFullTableName("hi!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
    }

    @Test
    public void test08186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08186");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass5 = slimTableFactory3.getTableType("");
        java.lang.String str7 = slimTableFactory3.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory3.copy();
        boolean boolean10 = slimTableFactory3.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory3.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap12 = slimTableFactory3.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap12;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str16 = slimTableFactory14.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap17 = slimTableFactory14.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory14.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap19 = slimTableFactory18.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory18.copy();
        java.lang.String str22 = slimTableFactory20.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap23 = slimTableFactory20.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str26 = slimTableFactory24.getFullTableName("hi!");
        java.lang.String str28 = slimTableFactory24.makeTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap29 = slimTableFactory24.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory30 = slimTableFactory24.copy();
        java.lang.String str32 = slimTableFactory24.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap33 = slimTableFactory24.tableTypeArrays;
        slimTableFactory20.tableTypeArrays = strMap33;
        slimTableFactory0.tableTypeArrays = strMap33;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap36 = slimTableFactory0.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass38 = slimTableFactory0.getTableType("");
        java.lang.String str40 = slimTableFactory0.getFullTableName("");
        boolean boolean42 = slimTableFactory0.hasColon("hi!");
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(slimTableFactory18);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(slimTableFactory20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(slimTableFactory30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNull(wildcardClass38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test08187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08187");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory2 = slimTableFactory0.copy();
        boolean boolean4 = slimTableFactory2.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory2.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory5.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str9 = slimTableFactory7.getFullTableName("hi!");
        java.lang.String str11 = slimTableFactory7.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap12 = null;
        slimTableFactory7.tableTypeArrays = strMap12;
        boolean boolean15 = slimTableFactory7.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory7.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap17 = slimTableFactory7.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str20 = slimTableFactory18.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap21 = slimTableFactory18.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str24 = slimTableFactory22.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap25 = slimTableFactory22.tableTypeArrays;
        slimTableFactory18.tableTypeArrays = strMap25;
        java.lang.String str28 = slimTableFactory18.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory29 = slimTableFactory18.copy();
        boolean boolean31 = slimTableFactory29.hasColon("hi!");
        java.lang.String str33 = slimTableFactory29.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap34 = slimTableFactory29.tableTypeArrays;
        slimTableFactory7.tableTypeArrays = strMap34;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap36 = slimTableFactory7.tableTypes;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap37 = slimTableFactory7.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory38 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory39 = slimTableFactory38.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory40 = slimTableFactory38.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass42 = slimTableFactory38.getTableType("hi!");
        java.lang.String str44 = slimTableFactory38.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory45 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str47 = slimTableFactory45.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap48 = slimTableFactory45.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory49 = slimTableFactory45.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap50 = slimTableFactory49.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory51 = slimTableFactory49.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory52 = slimTableFactory51.copy();
        boolean boolean54 = slimTableFactory52.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap55 = slimTableFactory52.tableTypeArrays;
        slimTableFactory38.tableTypeArrays = strMap55;
        slimTableFactory7.tableTypeArrays = strMap55;
        slimTableFactory6.tableTypeArrays = strMap55;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory59 = slimTableFactory6.copy();
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(slimTableFactory2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(strMap16);
        org.junit.Assert.assertNull(strMap17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(slimTableFactory29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(slimTableFactory39);
        org.junit.Assert.assertNotNull(slimTableFactory40);
        org.junit.Assert.assertNull(wildcardClass42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi!" + "'", str44, "hi!");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hi!" + "'", str47, "hi!");
        org.junit.Assert.assertNotNull(strMap48);
        org.junit.Assert.assertNotNull(slimTableFactory49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNotNull(slimTableFactory51);
        org.junit.Assert.assertNotNull(slimTableFactory52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(strMap55);
        org.junit.Assert.assertNotNull(slimTableFactory59);
    }

    @Test
    public void test08188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08188");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.lang.String str4 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap6 = slimTableFactory5.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory5.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass9 = slimTableFactory7.getTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass11 = slimTableFactory7.getTableType("");
        java.lang.String str13 = slimTableFactory7.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass16 = slimTableFactory14.getTableType("");
        java.lang.String str18 = slimTableFactory14.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory14.copy();
        boolean boolean21 = slimTableFactory14.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap22 = slimTableFactory14.tableTypes;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap23 = slimTableFactory14.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = slimTableFactory24.copy();
        java.lang.String str27 = slimTableFactory24.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap28 = slimTableFactory24.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass30 = slimTableFactory24.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap31 = slimTableFactory24.tableTypeArrays;
        slimTableFactory14.tableTypeArrays = strMap31;
        java.lang.String str34 = slimTableFactory14.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory35 = slimTableFactory14.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass37 = slimTableFactory35.getTableType("");
        java.lang.String str39 = slimTableFactory35.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory40 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str42 = slimTableFactory40.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap43 = slimTableFactory40.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory44 = slimTableFactory40.copy();
        boolean boolean46 = slimTableFactory40.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap47 = slimTableFactory40.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap48 = slimTableFactory40.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap49 = slimTableFactory40.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap50 = slimTableFactory40.tableTypes;
        java.lang.String str52 = slimTableFactory40.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap53 = slimTableFactory40.tableTypeArrays;
        slimTableFactory35.tableTypeArrays = strMap53;
        slimTableFactory7.tableTypeArrays = strMap53;
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNull(wildcardClass16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(slimTableFactory19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(slimTableFactory25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNull(wildcardClass30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(slimTableFactory35);
        org.junit.Assert.assertNull(wildcardClass37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "hi!" + "'", str42, "hi!");
        org.junit.Assert.assertNotNull(strMap43);
        org.junit.Assert.assertNotNull(slimTableFactory44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNotNull(strMap48);
        org.junit.Assert.assertNotNull(strMap49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "hi!" + "'", str52, "hi!");
        org.junit.Assert.assertNotNull(strMap53);
    }

    @Test
    public void test08189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08189");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass3 = slimTableFactory1.getTableType("");
        java.lang.String str5 = slimTableFactory1.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory1.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap6;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory9.tableTypeArrays;
        java.lang.String str12 = slimTableFactory9.makeTableType("hi!");
        boolean boolean14 = slimTableFactory9.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap15 = slimTableFactory9.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = slimTableFactory16.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = slimTableFactory16.tableTypeArrays;
        slimTableFactory9.tableTypeArrays = strMap18;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap20 = slimTableFactory9.tableTypes;
        java.lang.String str22 = slimTableFactory9.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap23 = slimTableFactory9.tableTypeArrays;
        boolean boolean25 = slimTableFactory9.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass29 = slimTableFactory27.getTableType("");
        java.lang.String str31 = slimTableFactory27.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap32 = slimTableFactory27.tableTypeArrays;
        slimTableFactory26.tableTypeArrays = strMap32;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory34 = slimTableFactory26.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory35 = slimTableFactory34.copy();
        boolean boolean37 = slimTableFactory34.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass39 = slimTableFactory34.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap40 = slimTableFactory34.tableTypeArrays;
        slimTableFactory9.tableTypeArrays = strMap40;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap42 = slimTableFactory9.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory43 = slimTableFactory9.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap44 = slimTableFactory43.tableTypes;
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(slimTableFactory17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(wildcardClass29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(slimTableFactory34);
        org.junit.Assert.assertNotNull(slimTableFactory35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(wildcardClass39);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertNotNull(strMap42);
        org.junit.Assert.assertNotNull(slimTableFactory43);
        org.junit.Assert.assertNotNull(strMap44);
    }

    @Test
    public void test08190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08190");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass3 = slimTableFactory1.getTableType("");
        java.lang.String str5 = slimTableFactory1.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory1.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap6;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory0.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass11 = slimTableFactory9.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap12 = slimTableFactory9.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str15 = slimTableFactory13.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory13.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = slimTableFactory13.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap18 = slimTableFactory17.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory17.copy();
        java.lang.String str21 = slimTableFactory19.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = slimTableFactory19.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap23 = slimTableFactory19.tableTypeArrays;
        slimTableFactory9.tableTypeArrays = strMap23;
        java.util.Map<java.lang.String, java.lang.String> strMap25 = slimTableFactory9.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = slimTableFactory9.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = slimTableFactory9.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = slimTableFactory27.copy();
        boolean boolean30 = slimTableFactory28.hasColon("");
        boolean boolean32 = slimTableFactory28.hasColon("");
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(slimTableFactory17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(slimTableFactory19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory22);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(slimTableFactory26);
        org.junit.Assert.assertNotNull(slimTableFactory27);
        org.junit.Assert.assertNotNull(slimTableFactory28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test08191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08191");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.lang.String str4 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory0.copy();
        java.lang.String str7 = slimTableFactory0.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str10 = slimTableFactory8.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory8.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str14 = slimTableFactory12.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap15 = slimTableFactory12.tableTypeArrays;
        slimTableFactory8.tableTypeArrays = strMap15;
        java.lang.String str18 = slimTableFactory8.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str21 = slimTableFactory19.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap22 = slimTableFactory19.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str25 = slimTableFactory23.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap26 = slimTableFactory23.tableTypeArrays;
        slimTableFactory19.tableTypeArrays = strMap26;
        slimTableFactory8.tableTypeArrays = strMap26;
        slimTableFactory0.tableTypeArrays = strMap26;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory30 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory31 = slimTableFactory30.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory32 = slimTableFactory30.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory33 = slimTableFactory32.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap34 = slimTableFactory33.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass36 = slimTableFactory33.getTableType("hi!");
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(slimTableFactory30);
        org.junit.Assert.assertNotNull(slimTableFactory31);
        org.junit.Assert.assertNotNull(slimTableFactory32);
        org.junit.Assert.assertNotNull(slimTableFactory33);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNull(wildcardClass36);
    }

    @Test
    public void test08192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08192");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass8 = slimTableFactory6.getTableType("");
        java.lang.String str10 = slimTableFactory6.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory6.tableTypeArrays;
        slimTableFactory5.tableTypeArrays = strMap11;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory5.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory13.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory13.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory13.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap16;
        java.lang.String str19 = slimTableFactory0.getFullTableName("hi!");
        boolean boolean21 = slimTableFactory0.hasColon("");
        java.lang.String str23 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap24 = slimTableFactory0.tableTypeArrays;
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(slimTableFactory13);
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertNotNull(strMap24);
    }

    @Test
    public void test08193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08193");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str6 = slimTableFactory4.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory4.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap7;
        java.lang.String str10 = slimTableFactory0.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap11 = slimTableFactory0.tableTypes;
        java.lang.String str13 = slimTableFactory0.getFullTableName("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass15 = slimTableFactory0.getTableType("hi!");
        boolean boolean17 = slimTableFactory0.hasColon("hi!");
        fitnesse.testsystems.slim.Table table18 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable19 = slimTableFactory0.parseDefineTableTypeTable(table18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test08194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08194");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass3 = slimTableFactory1.getTableType("");
        java.lang.String str5 = slimTableFactory1.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory1.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap6;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory0.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass11 = slimTableFactory9.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap12 = slimTableFactory9.tableTypes;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap13 = slimTableFactory9.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory14.copy();
        java.lang.String str17 = slimTableFactory14.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap18 = slimTableFactory14.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass20 = slimTableFactory14.getTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass22 = slimTableFactory14.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass25 = slimTableFactory23.getTableType("");
        java.lang.String str27 = slimTableFactory23.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = slimTableFactory23.copy();
        boolean boolean30 = slimTableFactory23.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap31 = slimTableFactory23.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory32 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory33 = slimTableFactory32.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass35 = slimTableFactory33.getTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass37 = slimTableFactory33.getTableType("hi!");
        boolean boolean39 = slimTableFactory33.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap40 = slimTableFactory33.tableTypeArrays;
        slimTableFactory23.tableTypeArrays = strMap40;
        slimTableFactory14.tableTypeArrays = strMap40;
        slimTableFactory9.tableTypeArrays = strMap40;
        boolean boolean45 = slimTableFactory9.hasColon("hi!");
        java.lang.String str47 = slimTableFactory9.makeTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass49 = slimTableFactory9.getTableType("");
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNull(wildcardClass20);
        org.junit.Assert.assertNull(wildcardClass22);
        org.junit.Assert.assertNull(wildcardClass25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(slimTableFactory28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(slimTableFactory33);
        org.junit.Assert.assertNull(wildcardClass35);
        org.junit.Assert.assertNull(wildcardClass37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hi!" + "'", str47, "hi!");
        org.junit.Assert.assertNull(wildcardClass49);
    }

    @Test
    public void test08195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08195");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str6 = slimTableFactory4.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory4.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap7;
        java.lang.String str10 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory0.copy();
        java.lang.String str13 = slimTableFactory11.makeTableType("hi!");
        java.lang.String str15 = slimTableFactory11.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory11.copy();
        boolean boolean18 = slimTableFactory16.hasColon("");
        java.lang.Class<?> wildcardClass19 = slimTableFactory16.getClass();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test08196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08196");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.lang.String str4 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.Table table7 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext9 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable10 = slimTableFactory0.makeSlimTable(table7, "hi!", slimTestContext9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
    }

    @Test
    public void test08197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08197");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap5 = slimTableFactory0.tableTypeArrays;
        java.lang.String str7 = slimTableFactory0.makeTableType("hi!");
        boolean boolean9 = slimTableFactory0.hasColon("");
        boolean boolean11 = slimTableFactory0.hasColon("hi!");
        java.lang.String str13 = slimTableFactory0.makeTableType("");
        java.lang.String str15 = slimTableFactory0.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap16 = slimTableFactory0.tableTypes;
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNotNull(strMap16);
    }

    @Test
    public void test08198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08198");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str6 = slimTableFactory4.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory4.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap7;
        java.lang.String str10 = slimTableFactory0.getFullTableName("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass12 = slimTableFactory0.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap13 = slimTableFactory0.tableTypeArrays;
        java.lang.String str15 = slimTableFactory0.getFullTableName("");
        java.lang.String str17 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap19 = slimTableFactory18.tableTypes;
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(slimTableFactory18);
        org.junit.Assert.assertNotNull(strMap19);
    }

    @Test
    public void test08199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08199");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.lang.String str4 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory0.copy();
        boolean boolean7 = slimTableFactory0.hasColon("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass9 = slimTableFactory0.getTableType("");
        java.lang.String str11 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory0.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap15 = slimTableFactory0.tableTypeArrays;
        java.lang.String str17 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.Table table18 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext20 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable21 = slimTableFactory0.makeSlimTable(table18, "hi!", slimTestContext20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test08200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08200");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        boolean boolean4 = slimTableFactory0.hasColon("");
        boolean boolean6 = slimTableFactory0.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass8 = slimTableFactory0.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str11 = slimTableFactory9.getFullTableName("hi!");
        java.lang.String str13 = slimTableFactory9.makeTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap14 = slimTableFactory9.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass17 = slimTableFactory15.getTableType("");
        java.lang.String str19 = slimTableFactory15.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap20 = slimTableFactory15.tableTypeArrays;
        slimTableFactory9.tableTypeArrays = strMap20;
        slimTableFactory0.tableTypeArrays = strMap20;
        boolean boolean24 = slimTableFactory0.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = slimTableFactory0.copy();
        boolean boolean27 = slimTableFactory25.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap28 = slimTableFactory25.tableTypes;
        boolean boolean30 = slimTableFactory25.hasColon("");
        fitnesse.testsystems.slim.Table table31 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory25.parseDefineTableTypeRow(table31, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNull(wildcardClass17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(slimTableFactory25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test08201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08201");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str6 = slimTableFactory4.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory4.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap7;
        java.lang.String str10 = slimTableFactory0.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap11 = slimTableFactory0.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass13 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory0.copy();
        java.lang.String str16 = slimTableFactory14.makeTableType("");
        fitnesse.testsystems.slim.Table table17 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory14.parseDefineTableTypeRow(table17, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test08202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08202");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap5 = slimTableFactory4.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory4.copy();
        java.lang.String str8 = slimTableFactory6.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap9 = slimTableFactory6.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass11 = slimTableFactory6.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap12 = slimTableFactory6.tableTypeArrays;
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertNotNull(strMap12);
    }

    @Test
    public void test08203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08203");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass8 = slimTableFactory6.getTableType("");
        java.lang.String str10 = slimTableFactory6.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory6.tableTypeArrays;
        slimTableFactory5.tableTypeArrays = strMap11;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory5.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory13.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory13.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory13.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap16;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory0.copy();
        java.lang.String str20 = slimTableFactory18.makeTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass22 = slimTableFactory18.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = slimTableFactory18.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass26 = slimTableFactory24.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap27 = slimTableFactory24.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str30 = slimTableFactory28.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap31 = slimTableFactory28.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory32 = slimTableFactory28.copy();
        boolean boolean34 = slimTableFactory28.hasColon("hi!");
        boolean boolean36 = slimTableFactory28.hasColon("");
        java.lang.String str38 = slimTableFactory28.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory39 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory40 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass42 = slimTableFactory40.getTableType("");
        java.lang.String str44 = slimTableFactory40.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap45 = slimTableFactory40.tableTypeArrays;
        slimTableFactory39.tableTypeArrays = strMap45;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory47 = slimTableFactory39.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory48 = slimTableFactory47.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap49 = slimTableFactory48.tableTypeArrays;
        java.lang.String str51 = slimTableFactory48.makeTableType("hi!");
        boolean boolean53 = slimTableFactory48.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap54 = slimTableFactory48.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory55 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory56 = slimTableFactory55.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap57 = slimTableFactory55.tableTypeArrays;
        slimTableFactory48.tableTypeArrays = strMap57;
        slimTableFactory28.tableTypeArrays = strMap57;
        slimTableFactory24.tableTypeArrays = strMap57;
        java.util.Map<java.lang.String, java.lang.String> strMap61 = slimTableFactory24.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap62 = slimTableFactory24.tableTypeArrays;
        slimTableFactory18.tableTypeArrays = strMap62;
        fitnesse.testsystems.slim.Table table64 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable65 = slimTableFactory18.parseDefineTableTypeTable(table64);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(slimTableFactory13);
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(slimTableFactory18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNull(wildcardClass22);
        org.junit.Assert.assertNotNull(slimTableFactory23);
        org.junit.Assert.assertNull(wildcardClass26);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(slimTableFactory32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertNull(wildcardClass42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNotNull(slimTableFactory47);
        org.junit.Assert.assertNotNull(slimTableFactory48);
        org.junit.Assert.assertNotNull(strMap49);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "hi!" + "'", str51, "hi!");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(slimTableFactory56);
        org.junit.Assert.assertNotNull(strMap57);
        org.junit.Assert.assertNotNull(strMap61);
        org.junit.Assert.assertNotNull(strMap62);
    }

    @Test
    public void test08204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08204");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass3 = slimTableFactory1.getTableType("");
        java.lang.String str5 = slimTableFactory1.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory1.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap6;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str12 = slimTableFactory10.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap13 = slimTableFactory10.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory10.tableTypeArrays;
        slimTableFactory9.tableTypeArrays = strMap14;
        boolean boolean17 = slimTableFactory9.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap18 = slimTableFactory9.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap19 = slimTableFactory9.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass21 = slimTableFactory9.getTableType("hi!");
        fitnesse.testsystems.slim.Table table22 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext24 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable25 = slimTableFactory9.makeSlimTable(table22, "", slimTestContext24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNull(wildcardClass21);
    }

    @Test
    public void test08205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08205");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass3 = slimTableFactory1.getTableType("");
        java.lang.String str5 = slimTableFactory1.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory1.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap6;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory9.tableTypeArrays;
        java.lang.String str12 = slimTableFactory9.makeTableType("hi!");
        java.lang.String str14 = slimTableFactory9.getFullTableName("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass16 = slimTableFactory9.getTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap17 = slimTableFactory9.tableTypes;
        java.lang.String str19 = slimTableFactory9.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap20 = slimTableFactory9.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = slimTableFactory9.copy();
        fitnesse.testsystems.slim.Table table22 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory9.parseDefineTableTypeRow(table22, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertNull(wildcardClass16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(slimTableFactory21);
    }

    @Test
    public void test08206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08206");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.lang.String str4 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory0.copy();
        boolean boolean7 = slimTableFactory0.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap9 = slimTableFactory8.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass13 = slimTableFactory11.getTableType("");
        java.lang.String str15 = slimTableFactory11.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory11.tableTypeArrays;
        slimTableFactory10.tableTypeArrays = strMap16;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory10.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap19 = slimTableFactory10.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str22 = slimTableFactory20.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap23 = slimTableFactory20.tableTypeArrays;
        java.lang.String str25 = slimTableFactory20.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap26 = slimTableFactory20.tableTypeArrays;
        slimTableFactory10.tableTypeArrays = strMap26;
        slimTableFactory8.tableTypeArrays = strMap26;
        boolean boolean30 = slimTableFactory8.hasColon("hi!");
        boolean boolean32 = slimTableFactory8.hasColon("");
        fitnesse.testsystems.slim.Table table33 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable34 = slimTableFactory8.parseDefineTableTypeTable(table33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(slimTableFactory18);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test08207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08207");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str6 = slimTableFactory4.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory4.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap7;
        java.lang.String str10 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap12 = slimTableFactory0.tableTypes;
        boolean boolean14 = slimTableFactory0.hasColon("hi!");
        boolean boolean16 = slimTableFactory0.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap17 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap18 = slimTableFactory0.tableTypes;
        java.lang.String str20 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass24 = slimTableFactory22.getTableType("");
        java.lang.String str26 = slimTableFactory22.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap27 = slimTableFactory22.tableTypeArrays;
        slimTableFactory21.tableTypeArrays = strMap27;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory29 = slimTableFactory21.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory30 = slimTableFactory29.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap31 = slimTableFactory30.tableTypeArrays;
        java.lang.String str33 = slimTableFactory30.makeTableType("hi!");
        java.lang.String str35 = slimTableFactory30.getFullTableName("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass37 = slimTableFactory30.getTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap38 = slimTableFactory30.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory39 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str41 = slimTableFactory39.getFullTableName("hi!");
        java.lang.String str43 = slimTableFactory39.makeTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap44 = slimTableFactory39.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory45 = slimTableFactory39.copy();
        java.lang.String str47 = slimTableFactory39.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap48 = slimTableFactory39.tableTypeArrays;
        slimTableFactory30.tableTypeArrays = strMap48;
        java.lang.String str51 = slimTableFactory30.makeTableType("hi!");
        boolean boolean53 = slimTableFactory30.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory54 = slimTableFactory30.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory55 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str57 = slimTableFactory55.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap58 = slimTableFactory55.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory59 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str61 = slimTableFactory59.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap62 = slimTableFactory59.tableTypeArrays;
        slimTableFactory55.tableTypeArrays = strMap62;
        java.lang.String str65 = slimTableFactory55.getFullTableName("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass67 = slimTableFactory55.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap68 = slimTableFactory55.tableTypeArrays;
        slimTableFactory54.tableTypeArrays = strMap68;
        slimTableFactory0.tableTypeArrays = strMap68;
        java.lang.String str72 = slimTableFactory0.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap73 = slimTableFactory0.tableTypes;
        java.lang.Class<?> wildcardClass74 = slimTableFactory0.getClass();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNull(wildcardClass24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(slimTableFactory29);
        org.junit.Assert.assertNotNull(slimTableFactory30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNull(wildcardClass37);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(strMap44);
        org.junit.Assert.assertNotNull(slimTableFactory45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(strMap48);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "hi!" + "'", str51, "hi!");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(slimTableFactory54);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "hi!" + "'", str57, "hi!");
        org.junit.Assert.assertNotNull(strMap58);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "hi!" + "'", str61, "hi!");
        org.junit.Assert.assertNotNull(strMap62);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNull(wildcardClass67);
        org.junit.Assert.assertNotNull(strMap68);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(strMap73);
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test08208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08208");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory0.copy();
        java.lang.String str7 = slimTableFactory5.makeTableType("hi!");
        boolean boolean9 = slimTableFactory5.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory5.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str13 = slimTableFactory11.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory11.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str17 = slimTableFactory15.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap18 = slimTableFactory15.tableTypeArrays;
        slimTableFactory11.tableTypeArrays = strMap18;
        java.lang.String str21 = slimTableFactory11.makeTableType("hi!");
        java.lang.String str23 = slimTableFactory11.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap24 = slimTableFactory11.tableTypeArrays;
        slimTableFactory5.tableTypeArrays = strMap24;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = slimTableFactory5.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = slimTableFactory5.copy();
        java.lang.String str29 = slimTableFactory5.getFullTableName("");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNotNull(slimTableFactory26);
        org.junit.Assert.assertNotNull(slimTableFactory27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
    }

    @Test
    public void test08209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08209");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.lang.String str4 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory0.copy();
        java.lang.String str7 = slimTableFactory0.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap9 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory0.copy();
        java.lang.String str12 = slimTableFactory10.makeTableType("hi!");
        java.lang.String str14 = slimTableFactory10.getFullTableName("");
        java.lang.String str16 = slimTableFactory10.makeTableType("hi!");
        java.lang.String str18 = slimTableFactory10.getFullTableName("hi!");
        fitnesse.testsystems.slim.Table table19 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable20 = slimTableFactory10.parseDefineTableTypeTable(table19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
    }

    @Test
    public void test08210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08210");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass3 = slimTableFactory1.getTableType("");
        java.lang.String str5 = slimTableFactory1.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory1.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap6;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory0.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass11 = slimTableFactory9.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap12 = slimTableFactory9.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory9.copy();
        boolean boolean15 = slimTableFactory13.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory13.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = slimTableFactory13.copy();
        java.lang.Class<?> wildcardClass18 = slimTableFactory13.getClass();
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(slimTableFactory13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(slimTableFactory17);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test08211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08211");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        boolean boolean4 = slimTableFactory0.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap5 = slimTableFactory0.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory0.getTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass9 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory10.copy();
        java.lang.String str13 = slimTableFactory10.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap14 = slimTableFactory10.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory10.copy();
        java.lang.String str17 = slimTableFactory10.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass20 = slimTableFactory18.getTableType("");
        java.lang.String str22 = slimTableFactory18.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = slimTableFactory18.copy();
        boolean boolean25 = slimTableFactory18.hasColon("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass27 = slimTableFactory18.getTableType("");
        java.lang.String str29 = slimTableFactory18.makeTableType("");
        java.lang.String str31 = slimTableFactory18.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap32 = slimTableFactory18.tableTypeArrays;
        java.lang.String str34 = slimTableFactory18.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap35 = slimTableFactory18.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap36 = slimTableFactory18.tableTypeArrays;
        slimTableFactory10.tableTypeArrays = strMap36;
        slimTableFactory0.tableTypeArrays = strMap36;
        java.lang.Class<?> wildcardClass39 = strMap36.getClass();
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNull(wildcardClass20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(slimTableFactory23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(wildcardClass27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test08212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08212");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str6 = slimTableFactory4.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory4.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap7;
        java.lang.String str10 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap12 = slimTableFactory0.tableTypes;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap13 = slimTableFactory0.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass15 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = slimTableFactory0.copy();
        java.lang.String str19 = slimTableFactory0.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap20 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap22 = slimTableFactory0.tableTypes;
        java.lang.String str24 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = slimTableFactory0.copy();
        java.lang.String str27 = slimTableFactory0.makeTableType("");
        java.lang.String str29 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.Table table30 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable31 = slimTableFactory0.parseDefineTableTypeTable(table30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(slimTableFactory17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(slimTableFactory21);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(slimTableFactory25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
    }

    @Test
    public void test08213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08213");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.lang.String str4 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory0.copy();
        boolean boolean7 = slimTableFactory0.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory0.copy();
        java.lang.String str10 = slimTableFactory0.makeTableType("hi!");
        boolean boolean12 = slimTableFactory0.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory0.copy();
        boolean boolean15 = slimTableFactory13.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory13.tableTypeArrays;
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(slimTableFactory13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strMap16);
    }

    @Test
    public void test08214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08214");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass3 = slimTableFactory1.getTableType("");
        java.lang.String str5 = slimTableFactory1.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory1.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap6;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory9.tableTypeArrays;
        java.lang.String str12 = slimTableFactory9.makeTableType("hi!");
        boolean boolean14 = slimTableFactory9.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap15 = slimTableFactory9.tableTypes;
        boolean boolean17 = slimTableFactory9.hasColon("");
        boolean boolean19 = slimTableFactory9.hasColon("hi!");
        boolean boolean21 = slimTableFactory9.hasColon("");
        fitnesse.testsystems.slim.Table table22 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable23 = slimTableFactory9.parseDefineTableTypeTable(table22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test08215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08215");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        boolean boolean4 = slimTableFactory0.hasColon("");
        boolean boolean6 = slimTableFactory0.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass8 = slimTableFactory0.getTableType("hi!");
        java.lang.String str10 = slimTableFactory0.makeTableType("hi!");
        boolean boolean12 = slimTableFactory0.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap13 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap15 = slimTableFactory0.tableTypes;
        java.lang.String str17 = slimTableFactory0.makeTableType("hi!");
        fitnesse.testsystems.slim.Table table18 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory0.parseDefineTableTypeRow(table18, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
    }

    @Test
    public void test08216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08216");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.lang.String str4 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory0.copy();
        java.lang.String str7 = slimTableFactory0.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap9 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str12 = slimTableFactory10.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap13 = slimTableFactory10.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap13;
        java.lang.String str16 = slimTableFactory0.getFullTableName("hi!");
        boolean boolean18 = slimTableFactory0.hasColon("");
        java.lang.String str20 = slimTableFactory0.makeTableType("");
        java.lang.String str22 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str25 = slimTableFactory23.makeTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass27 = slimTableFactory23.getTableType("");
        java.lang.String str29 = slimTableFactory23.getFullTableName("");
        java.lang.String str31 = slimTableFactory23.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory32 = slimTableFactory23.copy();
        boolean boolean34 = slimTableFactory23.hasColon("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass36 = slimTableFactory23.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory37 = slimTableFactory23.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap38 = slimTableFactory23.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap38;
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNull(wildcardClass27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(slimTableFactory32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(wildcardClass36);
        org.junit.Assert.assertNotNull(slimTableFactory37);
        org.junit.Assert.assertNotNull(strMap38);
    }

    @Test
    public void test08217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08217");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str6 = slimTableFactory4.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory4.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap7;
        java.lang.String str10 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap12 = slimTableFactory0.tableTypes;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap13 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory0.copy();
        java.lang.String str16 = slimTableFactory14.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = slimTableFactory14.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = slimTableFactory14.tableTypeArrays;
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory17);
        org.junit.Assert.assertNotNull(strMap18);
    }

    @Test
    public void test08218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08218");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.lang.String str4 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory0.copy();
        boolean boolean7 = slimTableFactory0.hasColon("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass9 = slimTableFactory0.getTableType("");
        java.lang.String str11 = slimTableFactory0.makeTableType("");
        java.lang.String str13 = slimTableFactory0.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory0.tableTypeArrays;
        boolean boolean16 = slimTableFactory0.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = slimTableFactory0.copy();
        java.lang.String str19 = slimTableFactory17.getFullTableName("");
        java.lang.String str21 = slimTableFactory17.makeTableType("");
        java.lang.String str23 = slimTableFactory17.getFullTableName("hi!");
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(slimTableFactory17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
    }

    @Test
    public void test08219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08219");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str6 = slimTableFactory4.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory4.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap7;
        java.lang.String str10 = slimTableFactory0.makeTableType("");
        java.lang.String str12 = slimTableFactory0.makeTableType("hi!");
        boolean boolean14 = slimTableFactory0.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap15 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass19 = slimTableFactory17.getTableType("");
        java.lang.String str21 = slimTableFactory17.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap22 = slimTableFactory17.tableTypeArrays;
        slimTableFactory16.tableTypeArrays = strMap22;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = slimTableFactory16.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = slimTableFactory16.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass27 = slimTableFactory25.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap28 = slimTableFactory25.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory29 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str31 = slimTableFactory29.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap32 = slimTableFactory29.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory33 = slimTableFactory29.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap34 = slimTableFactory33.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory35 = slimTableFactory33.copy();
        java.lang.String str37 = slimTableFactory35.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory38 = slimTableFactory35.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap39 = slimTableFactory35.tableTypeArrays;
        slimTableFactory25.tableTypeArrays = strMap39;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap41 = slimTableFactory25.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap42 = slimTableFactory25.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap42;
        java.util.Map<java.lang.String, java.lang.String> strMap44 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory45 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str47 = slimTableFactory45.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap48 = slimTableFactory45.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory49 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str51 = slimTableFactory49.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap52 = slimTableFactory49.tableTypeArrays;
        slimTableFactory45.tableTypeArrays = strMap52;
        java.lang.String str55 = slimTableFactory45.makeTableType("");
        java.lang.String str57 = slimTableFactory45.makeTableType("hi!");
        boolean boolean59 = slimTableFactory45.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap60 = slimTableFactory45.tableTypes;
        java.lang.String str62 = slimTableFactory45.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap63 = slimTableFactory45.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap64 = slimTableFactory45.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap64;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory66 = slimTableFactory0.copy();
        java.lang.Class<?> wildcardClass67 = slimTableFactory66.getClass();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(slimTableFactory24);
        org.junit.Assert.assertNotNull(slimTableFactory25);
        org.junit.Assert.assertNull(wildcardClass27);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(slimTableFactory33);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNotNull(slimTableFactory35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory38);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertNotNull(strMap42);
        org.junit.Assert.assertNotNull(strMap44);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hi!" + "'", str47, "hi!");
        org.junit.Assert.assertNotNull(strMap48);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "hi!" + "'", str51, "hi!");
        org.junit.Assert.assertNotNull(strMap52);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "hi!" + "'", str57, "hi!");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(strMap60);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "hi!" + "'", str62, "hi!");
        org.junit.Assert.assertNotNull(strMap63);
        org.junit.Assert.assertNotNull(strMap64);
        org.junit.Assert.assertNotNull(slimTableFactory66);
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test08220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08220");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory2 = slimTableFactory0.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass4 = slimTableFactory0.getTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass6 = slimTableFactory0.getTableType("hi!");
        java.lang.String str8 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.Table table9 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory0.parseDefineTableTypeRow(table9, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(slimTableFactory2);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }

    @Test
    public void test08221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08221");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        java.lang.String str5 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass8 = slimTableFactory6.getTableType("");
        boolean boolean10 = slimTableFactory6.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory6.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap11;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass16 = slimTableFactory14.getTableType("");
        java.lang.String str18 = slimTableFactory14.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap19 = slimTableFactory14.tableTypeArrays;
        slimTableFactory13.tableTypeArrays = strMap19;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = slimTableFactory13.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = slimTableFactory21.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap23 = slimTableFactory22.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap23;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass26 = slimTableFactory0.getTableType("");
        boolean boolean28 = slimTableFactory0.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap29 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory30 = slimTableFactory0.copy();
        java.lang.String str32 = slimTableFactory0.getFullTableName("hi!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNull(wildcardClass16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(slimTableFactory21);
        org.junit.Assert.assertNotNull(slimTableFactory22);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNull(wildcardClass26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(slimTableFactory30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
    }

    @Test
    public void test08222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08222");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        java.lang.String str5 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass8 = slimTableFactory6.getTableType("");
        boolean boolean10 = slimTableFactory6.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory6.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap11;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass16 = slimTableFactory14.getTableType("");
        java.lang.String str18 = slimTableFactory14.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap19 = slimTableFactory14.tableTypeArrays;
        slimTableFactory13.tableTypeArrays = strMap19;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = slimTableFactory13.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = slimTableFactory21.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap23 = slimTableFactory22.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap23;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass26 = slimTableFactory0.getTableType("");
        java.lang.String str28 = slimTableFactory0.makeTableType("hi!");
        boolean boolean30 = slimTableFactory0.hasColon("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass32 = slimTableFactory0.getTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass34 = slimTableFactory0.getTableType("");
        java.lang.String str36 = slimTableFactory0.makeTableType("");
        java.lang.String str38 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory39 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.Table table40 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory39.parseDefineTableTypeRow(table40, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNull(wildcardClass16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(slimTableFactory21);
        org.junit.Assert.assertNotNull(slimTableFactory22);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNull(wildcardClass26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(wildcardClass32);
        org.junit.Assert.assertNull(wildcardClass34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(slimTableFactory39);
    }

    @Test
    public void test08223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08223");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass3 = slimTableFactory1.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory1.copy();
        boolean boolean6 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass11 = slimTableFactory9.getTableType("");
        java.lang.String str13 = slimTableFactory9.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory9.tableTypeArrays;
        slimTableFactory8.tableTypeArrays = strMap14;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory8.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = slimTableFactory16.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = slimTableFactory17.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass21 = slimTableFactory19.getTableType("");
        java.lang.String str23 = slimTableFactory19.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = slimTableFactory19.copy();
        boolean boolean26 = slimTableFactory19.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap27 = slimTableFactory19.tableTypeArrays;
        slimTableFactory17.tableTypeArrays = strMap27;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory29 = slimTableFactory17.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory30 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory31 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass33 = slimTableFactory31.getTableType("");
        java.lang.String str35 = slimTableFactory31.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap36 = slimTableFactory31.tableTypeArrays;
        slimTableFactory30.tableTypeArrays = strMap36;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory38 = slimTableFactory30.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory39 = slimTableFactory38.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap40 = slimTableFactory39.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory41 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass43 = slimTableFactory41.getTableType("");
        java.lang.String str45 = slimTableFactory41.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory46 = slimTableFactory41.copy();
        boolean boolean48 = slimTableFactory41.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap49 = slimTableFactory41.tableTypeArrays;
        slimTableFactory39.tableTypeArrays = strMap49;
        java.lang.String str52 = slimTableFactory39.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory53 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory54 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass56 = slimTableFactory54.getTableType("");
        java.lang.String str58 = slimTableFactory54.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap59 = slimTableFactory54.tableTypeArrays;
        slimTableFactory53.tableTypeArrays = strMap59;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory61 = slimTableFactory53.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory62 = slimTableFactory61.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap63 = slimTableFactory62.tableTypeArrays;
        java.lang.String str65 = slimTableFactory62.makeTableType("hi!");
        boolean boolean67 = slimTableFactory62.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap68 = slimTableFactory62.tableTypeArrays;
        slimTableFactory39.tableTypeArrays = strMap68;
        java.util.Map<java.lang.String, java.lang.String> strMap70 = slimTableFactory39.tableTypeArrays;
        slimTableFactory29.tableTypeArrays = strMap70;
        slimTableFactory1.tableTypeArrays = strMap70;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass74 = slimTableFactory1.getTableType("");
        java.lang.String str76 = slimTableFactory1.getFullTableName("");
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertNotNull(slimTableFactory17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNull(wildcardClass21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(slimTableFactory24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(slimTableFactory29);
        org.junit.Assert.assertNull(wildcardClass33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(slimTableFactory38);
        org.junit.Assert.assertNotNull(slimTableFactory39);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertNull(wildcardClass43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(slimTableFactory46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(strMap49);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "hi!" + "'", str52, "hi!");
        org.junit.Assert.assertNull(wildcardClass56);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(strMap59);
        org.junit.Assert.assertNotNull(slimTableFactory61);
        org.junit.Assert.assertNotNull(slimTableFactory62);
        org.junit.Assert.assertNotNull(strMap63);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "hi!" + "'", str65, "hi!");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(strMap68);
        org.junit.Assert.assertNotNull(strMap70);
        org.junit.Assert.assertNull(wildcardClass74);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
    }

    @Test
    public void test08224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08224");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str6 = slimTableFactory4.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory4.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap7;
        java.lang.String str10 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory11.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory12.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory13.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap15 = slimTableFactory13.tableTypeArrays;
        java.lang.String str17 = slimTableFactory13.makeTableType("hi!");
        fitnesse.testsystems.slim.Table table18 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory13.parseDefineTableTypeRow(table18, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertNotNull(slimTableFactory13);
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
    }

    @Test
    public void test08225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08225");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.lang.String str4 = slimTableFactory0.makeTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap5 = slimTableFactory0.tableTypes;
        java.lang.String str7 = slimTableFactory0.makeTableType("hi!");
        java.lang.String str9 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass13 = slimTableFactory11.getTableType("");
        java.lang.String str15 = slimTableFactory11.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory11.tableTypeArrays;
        slimTableFactory10.tableTypeArrays = strMap16;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory10.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory10.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass21 = slimTableFactory19.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap22 = slimTableFactory19.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = slimTableFactory19.copy();
        boolean boolean25 = slimTableFactory23.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap26 = slimTableFactory23.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass30 = slimTableFactory28.getTableType("");
        java.lang.String str32 = slimTableFactory28.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap33 = slimTableFactory28.tableTypeArrays;
        slimTableFactory27.tableTypeArrays = strMap33;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory35 = slimTableFactory27.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory36 = slimTableFactory35.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory37 = slimTableFactory35.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory38 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory39 = slimTableFactory38.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass41 = slimTableFactory39.getTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass43 = slimTableFactory39.getTableType("hi!");
        boolean boolean45 = slimTableFactory39.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap46 = slimTableFactory39.tableTypeArrays;
        slimTableFactory37.tableTypeArrays = strMap46;
        slimTableFactory23.tableTypeArrays = strMap46;
        slimTableFactory0.tableTypeArrays = strMap46;
        boolean boolean51 = slimTableFactory0.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory52 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str54 = slimTableFactory52.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap55 = slimTableFactory52.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory56 = slimTableFactory52.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap57 = slimTableFactory56.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory58 = slimTableFactory56.copy();
        java.lang.String str60 = slimTableFactory58.getFullTableName("hi!");
        java.lang.String str62 = slimTableFactory58.makeTableType("hi!");
        java.lang.String str64 = slimTableFactory58.getFullTableName("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass66 = slimTableFactory58.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory67 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory68 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass70 = slimTableFactory68.getTableType("");
        java.lang.String str72 = slimTableFactory68.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap73 = slimTableFactory68.tableTypeArrays;
        slimTableFactory67.tableTypeArrays = strMap73;
        slimTableFactory58.tableTypeArrays = strMap73;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory76 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory77 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass79 = slimTableFactory77.getTableType("");
        java.lang.String str81 = slimTableFactory77.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap82 = slimTableFactory77.tableTypeArrays;
        slimTableFactory76.tableTypeArrays = strMap82;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap84 = slimTableFactory76.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap85 = slimTableFactory76.tableTypeArrays;
        slimTableFactory58.tableTypeArrays = strMap85;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory87 = slimTableFactory58.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap88 = slimTableFactory58.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory89 = slimTableFactory58.copy();
        boolean boolean91 = slimTableFactory58.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap92 = slimTableFactory58.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap92;
        fitnesse.testsystems.slim.Table table94 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext96 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable97 = slimTableFactory0.makeSlimTable(table94, "", slimTestContext96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(slimTableFactory18);
        org.junit.Assert.assertNotNull(slimTableFactory19);
        org.junit.Assert.assertNull(wildcardClass21);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(slimTableFactory23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNull(wildcardClass30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(slimTableFactory35);
        org.junit.Assert.assertNotNull(slimTableFactory36);
        org.junit.Assert.assertNotNull(slimTableFactory37);
        org.junit.Assert.assertNotNull(slimTableFactory39);
        org.junit.Assert.assertNull(wildcardClass41);
        org.junit.Assert.assertNull(wildcardClass43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(strMap46);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!");
        org.junit.Assert.assertNotNull(strMap55);
        org.junit.Assert.assertNotNull(slimTableFactory56);
        org.junit.Assert.assertNotNull(strMap57);
        org.junit.Assert.assertNotNull(slimTableFactory58);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "hi!" + "'", str60, "hi!");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "hi!" + "'", str62, "hi!");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "hi!" + "'", str64, "hi!");
        org.junit.Assert.assertNull(wildcardClass66);
        org.junit.Assert.assertNull(wildcardClass70);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(strMap73);
        org.junit.Assert.assertNull(wildcardClass79);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertNotNull(strMap82);
        org.junit.Assert.assertNotNull(strMap84);
        org.junit.Assert.assertNotNull(strMap85);
        org.junit.Assert.assertNotNull(slimTableFactory87);
        org.junit.Assert.assertNotNull(strMap88);
        org.junit.Assert.assertNotNull(slimTableFactory89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(strMap92);
    }

    @Test
    public void test08226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08226");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap5 = slimTableFactory4.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory4.copy();
        java.lang.String str8 = slimTableFactory6.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory6.copy();
        boolean boolean11 = slimTableFactory9.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass15 = slimTableFactory13.getTableType("");
        java.lang.String str17 = slimTableFactory13.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap18 = slimTableFactory13.tableTypeArrays;
        slimTableFactory12.tableTypeArrays = strMap18;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory12.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = slimTableFactory20.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap22 = slimTableFactory21.tableTypeArrays;
        slimTableFactory9.tableTypeArrays = strMap22;
        java.lang.String str25 = slimTableFactory9.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap26 = slimTableFactory9.tableTypeArrays;
        java.lang.String str28 = slimTableFactory9.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory29 = slimTableFactory9.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass31 = slimTableFactory29.getTableType("");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(slimTableFactory20);
        org.junit.Assert.assertNotNull(slimTableFactory21);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory29);
        org.junit.Assert.assertNull(wildcardClass31);
    }

    @Test
    public void test08227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08227");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.lang.String str4 = slimTableFactory0.makeTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap5 = slimTableFactory0.tableTypes;
        java.lang.String str7 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str10 = slimTableFactory8.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory8.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory8.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap13 = slimTableFactory12.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory12.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap15 = slimTableFactory14.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory14.tableTypeArrays;
        java.lang.String str18 = slimTableFactory14.getFullTableName("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass20 = slimTableFactory14.getTableType("hi!");
        boolean boolean22 = slimTableFactory14.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str25 = slimTableFactory23.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap26 = slimTableFactory23.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = slimTableFactory23.copy();
        boolean boolean29 = slimTableFactory23.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap30 = slimTableFactory23.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap31 = slimTableFactory23.tableTypeArrays;
        slimTableFactory14.tableTypeArrays = strMap31;
        slimTableFactory0.tableTypeArrays = strMap31;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap34 = slimTableFactory0.tableTypes;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap35 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory36 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory37 = slimTableFactory36.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory38 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory39 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass41 = slimTableFactory39.getTableType("");
        java.lang.String str43 = slimTableFactory39.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap44 = slimTableFactory39.tableTypeArrays;
        slimTableFactory38.tableTypeArrays = strMap44;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory46 = slimTableFactory38.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory47 = slimTableFactory38.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap48 = slimTableFactory47.tableTypeArrays;
        slimTableFactory37.tableTypeArrays = strMap48;
        slimTableFactory0.tableTypeArrays = strMap48;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass52 = slimTableFactory0.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap53 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap54 = slimTableFactory0.tableTypes;
        boolean boolean56 = slimTableFactory0.hasColon("hi!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(slimTableFactory27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(slimTableFactory37);
        org.junit.Assert.assertNull(wildcardClass41);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(strMap44);
        org.junit.Assert.assertNotNull(slimTableFactory46);
        org.junit.Assert.assertNotNull(slimTableFactory47);
        org.junit.Assert.assertNotNull(strMap48);
        org.junit.Assert.assertNull(wildcardClass52);
        org.junit.Assert.assertNotNull(strMap53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test08228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08228");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass5 = slimTableFactory3.getTableType("");
        java.lang.String str7 = slimTableFactory3.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory3.copy();
        boolean boolean10 = slimTableFactory3.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory3.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap12 = slimTableFactory3.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap12;
        boolean boolean15 = slimTableFactory0.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap16 = slimTableFactory0.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass18 = slimTableFactory0.getTableType("");
        java.lang.String str20 = slimTableFactory0.getFullTableName("hi!");
        java.lang.String str22 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str25 = slimTableFactory23.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap26 = slimTableFactory23.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str29 = slimTableFactory27.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap30 = slimTableFactory27.tableTypeArrays;
        slimTableFactory23.tableTypeArrays = strMap30;
        java.lang.String str33 = slimTableFactory23.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory34 = slimTableFactory23.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap35 = slimTableFactory23.tableTypes;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap36 = slimTableFactory23.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass38 = slimTableFactory23.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap39 = slimTableFactory23.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory40 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory41 = slimTableFactory40.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass43 = slimTableFactory41.getTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass45 = slimTableFactory41.getTableType("hi!");
        boolean boolean47 = slimTableFactory41.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap48 = slimTableFactory41.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory49 = slimTableFactory41.copy();
        java.lang.String str51 = slimTableFactory41.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap52 = slimTableFactory41.tableTypeArrays;
        slimTableFactory23.tableTypeArrays = strMap52;
        slimTableFactory0.tableTypeArrays = strMap52;
        fitnesse.testsystems.slim.Table table55 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable56 = slimTableFactory0.parseDefineTableTypeTable(table55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(slimTableFactory34);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNull(wildcardClass38);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNotNull(slimTableFactory41);
        org.junit.Assert.assertNull(wildcardClass43);
        org.junit.Assert.assertNull(wildcardClass45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strMap48);
        org.junit.Assert.assertNotNull(slimTableFactory49);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(strMap52);
    }

    @Test
    public void test08229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08229");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass3 = slimTableFactory1.getTableType("");
        java.lang.String str5 = slimTableFactory1.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory1.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap6;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap8 = slimTableFactory0.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap9 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap10 = slimTableFactory0.tableTypes;
        java.lang.String str12 = slimTableFactory0.getFullTableName("hi!");
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
    }

    @Test
    public void test08230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08230");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.lang.String str4 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory0.copy();
        java.lang.String str7 = slimTableFactory5.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap8 = slimTableFactory5.tableTypes;
        java.lang.Class<?> wildcardClass9 = strMap8.getClass();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test08231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08231");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.lang.String str4 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory5.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory6.tableTypes;
        java.lang.String str9 = slimTableFactory6.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass12 = slimTableFactory10.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass15 = slimTableFactory13.getTableType("");
        java.lang.String str17 = slimTableFactory13.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory13.copy();
        boolean boolean20 = slimTableFactory13.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap21 = slimTableFactory13.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap22 = slimTableFactory13.tableTypeArrays;
        slimTableFactory10.tableTypeArrays = strMap22;
        slimTableFactory6.tableTypeArrays = strMap22;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass26 = slimTableFactory6.getTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap27 = slimTableFactory6.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap28 = slimTableFactory6.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory29 = slimTableFactory6.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory30 = slimTableFactory6.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap31 = slimTableFactory30.tableTypeArrays;
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(slimTableFactory18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNull(wildcardClass26);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNotNull(slimTableFactory29);
        org.junit.Assert.assertNotNull(slimTableFactory30);
        org.junit.Assert.assertNotNull(strMap31);
    }

    @Test
    public void test08232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08232");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str6 = slimTableFactory4.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory4.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory4.copy();
        boolean boolean10 = slimTableFactory4.hasColon("hi!");
        boolean boolean12 = slimTableFactory4.hasColon("");
        java.lang.String str14 = slimTableFactory4.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass18 = slimTableFactory16.getTableType("");
        java.lang.String str20 = slimTableFactory16.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap21 = slimTableFactory16.tableTypeArrays;
        slimTableFactory15.tableTypeArrays = strMap21;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = slimTableFactory15.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = slimTableFactory23.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap25 = slimTableFactory24.tableTypeArrays;
        java.lang.String str27 = slimTableFactory24.makeTableType("hi!");
        boolean boolean29 = slimTableFactory24.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap30 = slimTableFactory24.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory31 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory32 = slimTableFactory31.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = slimTableFactory31.tableTypeArrays;
        slimTableFactory24.tableTypeArrays = strMap33;
        slimTableFactory4.tableTypeArrays = strMap33;
        slimTableFactory0.tableTypeArrays = strMap33;
        java.lang.String str38 = slimTableFactory0.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap39 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.Table table40 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable41 = slimTableFactory0.parseDefineTableTypeTable(table40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(slimTableFactory23);
        org.junit.Assert.assertNotNull(slimTableFactory24);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(slimTableFactory32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(strMap39);
    }

    @Test
    public void test08233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08233");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap5 = slimTableFactory4.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory4.copy();
        java.lang.String str8 = slimTableFactory6.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory6.copy();
        java.lang.String str11 = slimTableFactory6.getFullTableName("hi!");
        boolean boolean13 = slimTableFactory6.hasColon("");
        java.lang.String str15 = slimTableFactory6.makeTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass17 = slimTableFactory6.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory18.copy();
        java.lang.String str21 = slimTableFactory18.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap22 = slimTableFactory18.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass24 = slimTableFactory18.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap25 = slimTableFactory18.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass27 = slimTableFactory18.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str30 = slimTableFactory28.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap31 = slimTableFactory28.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap32 = slimTableFactory28.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap33 = slimTableFactory28.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory34 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str36 = slimTableFactory34.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap37 = slimTableFactory34.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory38 = slimTableFactory34.copy();
        boolean boolean40 = slimTableFactory34.hasColon("hi!");
        boolean boolean42 = slimTableFactory34.hasColon("");
        java.lang.String str44 = slimTableFactory34.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory45 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str47 = slimTableFactory45.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap48 = slimTableFactory45.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory49 = slimTableFactory45.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap50 = slimTableFactory49.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory51 = slimTableFactory49.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap52 = slimTableFactory51.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap53 = slimTableFactory51.tableTypeArrays;
        java.lang.String str55 = slimTableFactory51.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory56 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory57 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass59 = slimTableFactory57.getTableType("");
        java.lang.String str61 = slimTableFactory57.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap62 = slimTableFactory57.tableTypeArrays;
        slimTableFactory56.tableTypeArrays = strMap62;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap64 = slimTableFactory56.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory65 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str67 = slimTableFactory65.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap68 = slimTableFactory65.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory69 = slimTableFactory65.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap70 = slimTableFactory69.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory71 = slimTableFactory69.copy();
        java.lang.String str73 = slimTableFactory71.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap74 = slimTableFactory71.tableTypeArrays;
        slimTableFactory56.tableTypeArrays = strMap74;
        slimTableFactory51.tableTypeArrays = strMap74;
        slimTableFactory34.tableTypeArrays = strMap74;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory78 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str80 = slimTableFactory78.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap81 = slimTableFactory78.tableTypeArrays;
        java.lang.String str83 = slimTableFactory78.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory84 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass86 = slimTableFactory84.getTableType("");
        boolean boolean88 = slimTableFactory84.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap89 = slimTableFactory84.tableTypeArrays;
        slimTableFactory78.tableTypeArrays = strMap89;
        slimTableFactory34.tableTypeArrays = strMap89;
        slimTableFactory28.tableTypeArrays = strMap89;
        slimTableFactory18.tableTypeArrays = strMap89;
        slimTableFactory6.tableTypeArrays = strMap89;
        fitnesse.testsystems.slim.Table table95 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext97 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable98 = slimTableFactory6.makeSlimTable(table95, "", slimTestContext97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNull(wildcardClass17);
        org.junit.Assert.assertNotNull(slimTableFactory19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNull(wildcardClass24);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNull(wildcardClass27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(slimTableFactory38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hi!" + "'", str47, "hi!");
        org.junit.Assert.assertNotNull(strMap48);
        org.junit.Assert.assertNotNull(slimTableFactory49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNotNull(slimTableFactory51);
        org.junit.Assert.assertNotNull(strMap52);
        org.junit.Assert.assertNotNull(strMap53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hi!" + "'", str55, "hi!");
        org.junit.Assert.assertNull(wildcardClass59);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(strMap62);
        org.junit.Assert.assertNotNull(strMap64);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "hi!" + "'", str67, "hi!");
        org.junit.Assert.assertNotNull(strMap68);
        org.junit.Assert.assertNotNull(slimTableFactory69);
        org.junit.Assert.assertNotNull(strMap70);
        org.junit.Assert.assertNotNull(slimTableFactory71);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "hi!" + "'", str73, "hi!");
        org.junit.Assert.assertNotNull(strMap74);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "hi!" + "'", str80, "hi!");
        org.junit.Assert.assertNotNull(strMap81);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertNull(wildcardClass86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(strMap89);
    }

    @Test
    public void test08234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08234");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap5 = slimTableFactory4.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory4.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory6.copy();
        boolean boolean9 = slimTableFactory7.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory7.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass12 = slimTableFactory7.getTableType("hi!");
        java.lang.String str14 = slimTableFactory7.makeTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass16 = slimTableFactory7.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = slimTableFactory7.copy();
        fitnesse.testsystems.slim.Table table18 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable19 = slimTableFactory7.parseDefineTableTypeTable(table18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNull(wildcardClass16);
        org.junit.Assert.assertNotNull(slimTableFactory17);
    }

    @Test
    public void test08235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08235");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str6 = slimTableFactory4.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory4.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap7;
        java.lang.String str10 = slimTableFactory0.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str14 = slimTableFactory12.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap15 = slimTableFactory12.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory12.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap17 = slimTableFactory16.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory16.copy();
        java.lang.String str20 = slimTableFactory18.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap21 = slimTableFactory18.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap21;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass26 = slimTableFactory24.getTableType("");
        java.lang.String str28 = slimTableFactory24.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap29 = slimTableFactory24.tableTypeArrays;
        slimTableFactory23.tableTypeArrays = strMap29;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap31 = slimTableFactory23.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap32 = slimTableFactory23.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap32;
        java.lang.String str35 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap36 = slimTableFactory0.tableTypes;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap37 = slimTableFactory0.tableTypes;
        java.lang.String str39 = slimTableFactory0.makeTableType("hi!");
        fitnesse.testsystems.slim.Table table40 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable41 = slimTableFactory0.parseDefineTableTypeTable(table40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(slimTableFactory18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNull(wildcardClass26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hi!" + "'", str39, "hi!");
    }

    @Test
    public void test08236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08236");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str6 = slimTableFactory4.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory4.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap7;
        java.lang.String str10 = slimTableFactory0.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory0.tableTypeArrays;
        boolean boolean13 = slimTableFactory0.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str16 = slimTableFactory14.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap17 = slimTableFactory14.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str20 = slimTableFactory18.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap21 = slimTableFactory18.tableTypeArrays;
        slimTableFactory14.tableTypeArrays = strMap21;
        java.lang.String str24 = slimTableFactory14.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = slimTableFactory14.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap26 = slimTableFactory14.tableTypes;
        boolean boolean28 = slimTableFactory14.hasColon("hi!");
        boolean boolean30 = slimTableFactory14.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap31 = slimTableFactory14.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap31;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory33 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap34 = slimTableFactory0.tableTypes;
        java.lang.Class<?> wildcardClass35 = strMap34.getClass();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(slimTableFactory25);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(slimTableFactory33);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test08237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08237");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str6 = slimTableFactory4.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory4.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap7;
        java.lang.String str10 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap12 = slimTableFactory0.tableTypes;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap13 = slimTableFactory0.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass15 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory17.copy();
        boolean boolean20 = slimTableFactory18.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = slimTableFactory18.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap22 = slimTableFactory18.tableTypeArrays;
        fitnesse.testsystems.slim.Table table23 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory18.parseDefineTableTypeRow(table23, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(slimTableFactory17);
        org.junit.Assert.assertNotNull(slimTableFactory18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(slimTableFactory21);
        org.junit.Assert.assertNotNull(strMap22);
    }

    @Test
    public void test08238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08238");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.lang.String str4 = slimTableFactory0.makeTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap5 = slimTableFactory0.tableTypes;
        java.lang.String str7 = slimTableFactory0.makeTableType("hi!");
        java.lang.String str9 = slimTableFactory0.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap10 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.Table table12 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory11.parseDefineTableTypeRow(table12, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(slimTableFactory11);
    }

    @Test
    public void test08239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08239");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.lang.String str4 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory0.copy();
        java.lang.String str7 = slimTableFactory0.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap9 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory0.copy();
        boolean boolean12 = slimTableFactory10.hasColon("");
        java.lang.String str14 = slimTableFactory10.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap15 = slimTableFactory10.tableTypeArrays;
        java.lang.String str17 = slimTableFactory10.getFullTableName("hi!");
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
    }

    @Test
    public void test08240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08240");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap5 = slimTableFactory4.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory4.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory6.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory6.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass10 = slimTableFactory6.getTableType("");
        boolean boolean12 = slimTableFactory6.hasColon("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory6.getTableType("hi!");
        java.lang.String str16 = slimTableFactory6.getFullTableName("");
        fitnesse.testsystems.slim.Table table17 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable18 = slimTableFactory6.parseDefineTableTypeTable(table17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test08241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08241");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.lang.String str4 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory0.copy();
        boolean boolean7 = slimTableFactory0.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory9.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass12 = slimTableFactory10.getTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory10.getTableType("hi!");
        boolean boolean16 = slimTableFactory10.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap17 = slimTableFactory10.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap17;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap20 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.Table table21 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory0.parseDefineTableTypeRow(table21, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(slimTableFactory19);
        org.junit.Assert.assertNotNull(strMap20);
    }

    @Test
    public void test08242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08242");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.lang.String str4 = slimTableFactory0.makeTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap5 = slimTableFactory0.tableTypes;
        java.lang.String str7 = slimTableFactory0.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap8 = slimTableFactory0.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap9 = slimTableFactory0.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass11 = slimTableFactory0.getTableType("");
        java.lang.String str13 = slimTableFactory0.makeTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass15 = slimTableFactory0.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory0.tableTypeArrays;
        java.lang.String str18 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.Table table19 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable20 = slimTableFactory0.parseDefineTableTypeTable(table19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
    }

    @Test
    public void test08243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08243");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.lang.String str4 = slimTableFactory0.makeTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap5 = slimTableFactory0.tableTypes;
        java.lang.String str7 = slimTableFactory0.makeTableType("hi!");
        java.lang.String str9 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.Table table10 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable11 = slimTableFactory0.parseDefineTableTypeTable(table10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test08244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08244");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory0.copy();
        boolean boolean6 = slimTableFactory0.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap9 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str12 = slimTableFactory10.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap13 = slimTableFactory10.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str16 = slimTableFactory14.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap17 = slimTableFactory14.tableTypeArrays;
        slimTableFactory10.tableTypeArrays = strMap17;
        java.lang.String str20 = slimTableFactory10.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = slimTableFactory10.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap22 = slimTableFactory10.tableTypes;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap23 = slimTableFactory10.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap24 = slimTableFactory10.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap24;
        boolean boolean27 = slimTableFactory0.hasColon("");
        fitnesse.testsystems.slim.Table table28 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext30 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable31 = slimTableFactory0.makeSlimTable(table28, "hi!", slimTestContext30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(slimTableFactory21);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test08245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08245");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap5 = slimTableFactory4.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory4.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory6.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory6.tableTypeArrays;
        boolean boolean10 = slimTableFactory6.hasColon("");
        java.lang.String str12 = slimTableFactory6.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory6.copy();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory13);
    }

    @Test
    public void test08246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08246");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.lang.String str4 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory0.copy();
        java.lang.String str7 = slimTableFactory0.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap9 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory0.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass12 = slimTableFactory0.getTableType("hi!");
        java.lang.String str14 = slimTableFactory0.getFullTableName("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass16 = slimTableFactory0.getTableType("");
        boolean boolean18 = slimTableFactory0.hasColon("");
        boolean boolean20 = slimTableFactory0.hasColon("");
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertNull(wildcardClass16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test08247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08247");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap5 = slimTableFactory4.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory4.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory4.tableTypeArrays;
        java.lang.String str9 = slimTableFactory4.makeTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap10 = slimTableFactory4.tableTypes;
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(strMap10);
    }

    @Test
    public void test08248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08248");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass3 = slimTableFactory1.getTableType("");
        java.lang.String str5 = slimTableFactory1.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory1.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap6;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory9.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass13 = slimTableFactory11.getTableType("");
        java.lang.String str15 = slimTableFactory11.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory11.copy();
        boolean boolean18 = slimTableFactory11.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap19 = slimTableFactory11.tableTypeArrays;
        slimTableFactory9.tableTypeArrays = strMap19;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = slimTableFactory9.copy();
        boolean boolean23 = slimTableFactory21.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap24 = slimTableFactory21.tableTypeArrays;
        java.lang.Class<?> wildcardClass25 = slimTableFactory21.getClass();
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(slimTableFactory21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test08249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08249");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str6 = slimTableFactory4.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory4.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap7;
        java.lang.String str10 = slimTableFactory0.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap11 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory13.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap15 = slimTableFactory14.tableTypeArrays;
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertNotNull(slimTableFactory13);
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertNotNull(strMap15);
    }

    @Test
    public void test08250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08250");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str6 = slimTableFactory4.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory4.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap7;
        java.lang.String str10 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory11.copy();
        java.lang.String str14 = slimTableFactory11.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory11.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory15.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass20 = slimTableFactory18.getTableType("");
        java.lang.String str22 = slimTableFactory18.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap23 = slimTableFactory18.tableTypeArrays;
        slimTableFactory17.tableTypeArrays = strMap23;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = slimTableFactory17.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = slimTableFactory25.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap27 = slimTableFactory26.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass30 = slimTableFactory28.getTableType("");
        java.lang.String str32 = slimTableFactory28.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory33 = slimTableFactory28.copy();
        boolean boolean35 = slimTableFactory28.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap36 = slimTableFactory28.tableTypeArrays;
        slimTableFactory26.tableTypeArrays = strMap36;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory38 = slimTableFactory26.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap39 = slimTableFactory38.tableTypeArrays;
        slimTableFactory16.tableTypeArrays = strMap39;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory41 = slimTableFactory16.copy();
        fitnesse.testsystems.slim.Table table42 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext44 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable45 = slimTableFactory41.makeSlimTable(table42, "hi!", slimTestContext44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertNull(wildcardClass20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(slimTableFactory25);
        org.junit.Assert.assertNotNull(slimTableFactory26);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNull(wildcardClass30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(slimTableFactory33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(slimTableFactory38);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNotNull(slimTableFactory41);
    }

    @Test
    public void test08251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08251");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass3 = slimTableFactory1.getTableType("");
        java.lang.String str5 = slimTableFactory1.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory1.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap6;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap8 = slimTableFactory0.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap9 = slimTableFactory0.tableTypeArrays;
        java.lang.String str11 = slimTableFactory0.getFullTableName("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass13 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory0.tableTypeArrays;
        java.lang.String str16 = slimTableFactory0.getFullTableName("hi!");
        java.lang.Class<?> wildcardClass17 = slimTableFactory0.getClass();
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test08252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08252");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass3 = slimTableFactory1.getTableType("");
        java.lang.String str5 = slimTableFactory1.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory1.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap6;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        boolean boolean11 = slimTableFactory9.hasColon("");
        java.lang.String str13 = slimTableFactory9.makeTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap14 = slimTableFactory9.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap15 = slimTableFactory9.tableTypeArrays;
        java.lang.String str17 = slimTableFactory9.makeTableType("hi!");
        java.lang.String str19 = slimTableFactory9.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory9.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap21 = slimTableFactory9.tableTypeArrays;
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory20);
        org.junit.Assert.assertNotNull(strMap21);
    }

    @Test
    public void test08253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08253");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass5 = slimTableFactory3.getTableType("");
        java.lang.String str7 = slimTableFactory3.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory3.copy();
        boolean boolean10 = slimTableFactory3.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory3.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap12 = slimTableFactory3.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap12;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str16 = slimTableFactory14.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap17 = slimTableFactory14.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory14.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap19 = slimTableFactory18.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory18.copy();
        java.lang.String str22 = slimTableFactory20.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap23 = slimTableFactory20.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str26 = slimTableFactory24.getFullTableName("hi!");
        java.lang.String str28 = slimTableFactory24.makeTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap29 = slimTableFactory24.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory30 = slimTableFactory24.copy();
        java.lang.String str32 = slimTableFactory24.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap33 = slimTableFactory24.tableTypeArrays;
        slimTableFactory20.tableTypeArrays = strMap33;
        slimTableFactory0.tableTypeArrays = strMap33;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap36 = slimTableFactory0.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass38 = slimTableFactory0.getTableType("");
        java.lang.String str40 = slimTableFactory0.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap41 = slimTableFactory0.tableTypeArrays;
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(slimTableFactory18);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(slimTableFactory20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(slimTableFactory30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNull(wildcardClass38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(strMap41);
    }

    @Test
    public void test08254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08254");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.lang.String str4 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory0.copy();
        boolean boolean7 = slimTableFactory0.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap9 = slimTableFactory8.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass13 = slimTableFactory11.getTableType("");
        java.lang.String str15 = slimTableFactory11.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory11.tableTypeArrays;
        slimTableFactory10.tableTypeArrays = strMap16;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory10.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap19 = slimTableFactory10.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str22 = slimTableFactory20.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap23 = slimTableFactory20.tableTypeArrays;
        java.lang.String str25 = slimTableFactory20.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap26 = slimTableFactory20.tableTypeArrays;
        slimTableFactory10.tableTypeArrays = strMap26;
        slimTableFactory8.tableTypeArrays = strMap26;
        boolean boolean30 = slimTableFactory8.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap31 = slimTableFactory8.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory32 = slimTableFactory8.copy();
        java.lang.String str34 = slimTableFactory8.makeTableType("hi!");
        boolean boolean36 = slimTableFactory8.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory37 = slimTableFactory8.copy();
        boolean boolean39 = slimTableFactory37.hasColon("");
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(slimTableFactory18);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(slimTableFactory32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(slimTableFactory37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test08255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08255");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap4 = slimTableFactory0.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass6 = slimTableFactory0.getTableType("hi!");
        java.lang.String str8 = slimTableFactory0.getFullTableName("");
        boolean boolean10 = slimTableFactory0.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap11 = slimTableFactory0.tableTypes;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap12 = slimTableFactory0.tableTypes;
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(strMap12);
    }

    @Test
    public void test08256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08256");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory2 = slimTableFactory0.copy();
        boolean boolean4 = slimTableFactory2.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory2.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory2.copy();
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(slimTableFactory2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
    }

    @Test
    public void test08257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08257");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        boolean boolean4 = slimTableFactory0.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap5 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory0.copy();
        java.lang.String str8 = slimTableFactory6.makeTableType("");
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }

    @Test
    public void test08258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08258");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str6 = slimTableFactory4.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory4.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap7;
        java.lang.String str10 = slimTableFactory0.makeTableType("");
        java.lang.String str12 = slimTableFactory0.makeTableType("hi!");
        boolean boolean14 = slimTableFactory0.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap15 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass19 = slimTableFactory17.getTableType("");
        java.lang.String str21 = slimTableFactory17.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap22 = slimTableFactory17.tableTypeArrays;
        slimTableFactory16.tableTypeArrays = strMap22;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = slimTableFactory16.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = slimTableFactory16.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass27 = slimTableFactory25.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap28 = slimTableFactory25.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory29 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str31 = slimTableFactory29.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap32 = slimTableFactory29.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory33 = slimTableFactory29.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap34 = slimTableFactory33.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory35 = slimTableFactory33.copy();
        java.lang.String str37 = slimTableFactory35.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory38 = slimTableFactory35.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap39 = slimTableFactory35.tableTypeArrays;
        slimTableFactory25.tableTypeArrays = strMap39;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap41 = slimTableFactory25.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap42 = slimTableFactory25.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap42;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass45 = slimTableFactory0.getTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass47 = slimTableFactory0.getTableType("");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(slimTableFactory24);
        org.junit.Assert.assertNotNull(slimTableFactory25);
        org.junit.Assert.assertNull(wildcardClass27);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(slimTableFactory33);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNotNull(slimTableFactory35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory38);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertNotNull(strMap42);
        org.junit.Assert.assertNull(wildcardClass45);
        org.junit.Assert.assertNull(wildcardClass47);
    }

    @Test
    public void test08259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08259");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass3 = slimTableFactory1.getTableType("");
        java.lang.String str5 = slimTableFactory1.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory1.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap6;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory9.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass13 = slimTableFactory11.getTableType("");
        java.lang.String str15 = slimTableFactory11.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory11.copy();
        boolean boolean18 = slimTableFactory11.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap19 = slimTableFactory11.tableTypeArrays;
        slimTableFactory9.tableTypeArrays = strMap19;
        java.lang.String str22 = slimTableFactory9.getFullTableName("hi!");
        java.lang.String str24 = slimTableFactory9.makeTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass26 = slimTableFactory9.getTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass28 = slimTableFactory9.getTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass30 = slimTableFactory9.getTableType("hi!");
        java.lang.String str32 = slimTableFactory9.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap33 = slimTableFactory9.tableTypes;
        fitnesse.testsystems.slim.Table table34 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable35 = slimTableFactory9.parseDefineTableTypeTable(table34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNull(wildcardClass26);
        org.junit.Assert.assertNull(wildcardClass28);
        org.junit.Assert.assertNull(wildcardClass30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
        org.junit.Assert.assertNotNull(strMap33);
    }

    @Test
    public void test08260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08260");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass3 = slimTableFactory1.getTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass5 = slimTableFactory1.getTableType("hi!");
        boolean boolean7 = slimTableFactory1.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory1.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass12 = slimTableFactory1.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str15 = slimTableFactory13.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory13.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = slimTableFactory13.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap18 = slimTableFactory17.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory17.copy();
        java.lang.String str21 = slimTableFactory19.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap22 = slimTableFactory19.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap22;
        java.lang.String str25 = slimTableFactory1.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap26 = slimTableFactory1.tableTypes;
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(slimTableFactory17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(slimTableFactory19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(strMap26);
    }

    @Test
    public void test08261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08261");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        boolean boolean4 = slimTableFactory0.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap6 = slimTableFactory5.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass8 = slimTableFactory5.getTableType("");
        java.lang.String str10 = slimTableFactory5.getFullTableName("");
        java.lang.String str12 = slimTableFactory5.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory5.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str16 = slimTableFactory14.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap17 = slimTableFactory14.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory14.copy();
        boolean boolean20 = slimTableFactory14.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap21 = slimTableFactory14.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap22 = slimTableFactory14.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap23 = slimTableFactory14.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap24 = slimTableFactory14.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = slimTableFactory14.copy();
        java.lang.String str27 = slimTableFactory14.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap28 = slimTableFactory14.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap29 = slimTableFactory14.tableTypeArrays;
        slimTableFactory13.tableTypeArrays = strMap29;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap31 = slimTableFactory13.tableTypes;
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(slimTableFactory18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNotNull(slimTableFactory25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(strMap31);
    }

    @Test
    public void test08262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08262");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str7 = slimTableFactory5.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory5.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory5.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap10 = slimTableFactory9.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory9.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap12 = slimTableFactory11.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap13 = slimTableFactory11.tableTypeArrays;
        java.lang.String str15 = slimTableFactory11.getFullTableName("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass17 = slimTableFactory11.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass20 = slimTableFactory18.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass23 = slimTableFactory21.getTableType("");
        java.lang.String str25 = slimTableFactory21.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = slimTableFactory21.copy();
        boolean boolean28 = slimTableFactory21.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap29 = slimTableFactory21.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap30 = slimTableFactory21.tableTypeArrays;
        slimTableFactory18.tableTypeArrays = strMap30;
        boolean boolean33 = slimTableFactory18.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass35 = slimTableFactory18.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap36 = slimTableFactory18.tableTypeArrays;
        slimTableFactory11.tableTypeArrays = strMap36;
        slimTableFactory4.tableTypeArrays = strMap36;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory39 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass41 = slimTableFactory39.getTableType("");
        boolean boolean43 = slimTableFactory39.hasColon("");
        boolean boolean45 = slimTableFactory39.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass47 = slimTableFactory39.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory48 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str50 = slimTableFactory48.getFullTableName("hi!");
        java.lang.String str52 = slimTableFactory48.makeTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap53 = slimTableFactory48.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory54 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass56 = slimTableFactory54.getTableType("");
        java.lang.String str58 = slimTableFactory54.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap59 = slimTableFactory54.tableTypeArrays;
        slimTableFactory48.tableTypeArrays = strMap59;
        slimTableFactory39.tableTypeArrays = strMap59;
        boolean boolean63 = slimTableFactory39.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap64 = slimTableFactory39.tableTypeArrays;
        slimTableFactory4.tableTypeArrays = strMap64;
        java.util.Map<java.lang.String, java.lang.String> strMap66 = slimTableFactory4.tableTypeArrays;
        java.lang.String str68 = slimTableFactory4.makeTableType("");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNull(wildcardClass17);
        org.junit.Assert.assertNull(wildcardClass20);
        org.junit.Assert.assertNull(wildcardClass23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(slimTableFactory26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(wildcardClass35);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNull(wildcardClass41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(wildcardClass47);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hi!" + "'", str50, "hi!");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(strMap53);
        org.junit.Assert.assertNull(wildcardClass56);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(strMap59);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(strMap64);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
    }

    @Test
    public void test08263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08263");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.lang.String str4 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory0.copy();
        java.lang.String str7 = slimTableFactory0.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap9 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory10.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory10.copy();
        java.lang.String str14 = slimTableFactory12.getFullTableName("hi!");
        java.lang.String str16 = slimTableFactory12.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap17 = slimTableFactory12.tableTypeArrays;
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(strMap17);
    }

    @Test
    public void test08264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08264");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        boolean boolean4 = slimTableFactory0.hasColon("");
        boolean boolean6 = slimTableFactory0.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass8 = slimTableFactory0.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str11 = slimTableFactory9.getFullTableName("hi!");
        java.lang.String str13 = slimTableFactory9.makeTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap14 = slimTableFactory9.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass17 = slimTableFactory15.getTableType("");
        java.lang.String str19 = slimTableFactory15.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap20 = slimTableFactory15.tableTypeArrays;
        slimTableFactory9.tableTypeArrays = strMap20;
        slimTableFactory0.tableTypeArrays = strMap20;
        boolean boolean24 = slimTableFactory0.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str28 = slimTableFactory26.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap29 = slimTableFactory26.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory30 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str32 = slimTableFactory30.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap33 = slimTableFactory30.tableTypeArrays;
        slimTableFactory26.tableTypeArrays = strMap33;
        java.lang.String str36 = slimTableFactory26.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory37 = slimTableFactory26.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap38 = slimTableFactory26.tableTypes;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap39 = slimTableFactory26.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass41 = slimTableFactory26.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap42 = slimTableFactory26.tableTypeArrays;
        slimTableFactory25.tableTypeArrays = strMap42;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap44 = slimTableFactory25.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap45 = slimTableFactory25.tableTypeArrays;
        java.lang.Class<?> wildcardClass46 = slimTableFactory25.getClass();
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNull(wildcardClass17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(slimTableFactory25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(slimTableFactory37);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNull(wildcardClass41);
        org.junit.Assert.assertNotNull(strMap42);
        org.junit.Assert.assertNotNull(strMap44);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test08265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08265");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass3 = slimTableFactory1.getTableType("");
        java.lang.String str5 = slimTableFactory1.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory1.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap6;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory0.copy();
        java.lang.String str10 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass15 = slimTableFactory13.getTableType("");
        boolean boolean17 = slimTableFactory13.hasColon("");
        boolean boolean19 = slimTableFactory13.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass21 = slimTableFactory13.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str24 = slimTableFactory22.getFullTableName("hi!");
        java.lang.String str26 = slimTableFactory22.makeTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap27 = slimTableFactory22.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass30 = slimTableFactory28.getTableType("");
        java.lang.String str32 = slimTableFactory28.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap33 = slimTableFactory28.tableTypeArrays;
        slimTableFactory22.tableTypeArrays = strMap33;
        slimTableFactory13.tableTypeArrays = strMap33;
        boolean boolean37 = slimTableFactory13.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap38 = slimTableFactory13.tableTypeArrays;
        slimTableFactory12.tableTypeArrays = strMap38;
        java.util.Map<java.lang.String, java.lang.String> strMap40 = slimTableFactory12.tableTypeArrays;
        fitnesse.testsystems.slim.Table table41 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext43 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable44 = slimTableFactory12.makeSlimTable(table41, "", slimTestContext43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(wildcardClass21);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNull(wildcardClass30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertNotNull(strMap40);
    }

    @Test
    public void test08266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08266");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.lang.String str4 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory0.copy();
        boolean boolean7 = slimTableFactory0.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap9 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory0.copy();
        java.lang.String str12 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory13.copy();
        java.lang.String str16 = slimTableFactory13.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = slimTableFactory13.copy();
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(slimTableFactory13);
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory17);
    }

    @Test
    public void test08267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08267");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        boolean boolean4 = slimTableFactory0.hasColon("");
        boolean boolean6 = slimTableFactory0.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass8 = slimTableFactory0.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str11 = slimTableFactory9.getFullTableName("hi!");
        java.lang.String str13 = slimTableFactory9.makeTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap14 = slimTableFactory9.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass17 = slimTableFactory15.getTableType("");
        java.lang.String str19 = slimTableFactory15.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap20 = slimTableFactory15.tableTypeArrays;
        slimTableFactory9.tableTypeArrays = strMap20;
        slimTableFactory0.tableTypeArrays = strMap20;
        boolean boolean24 = slimTableFactory0.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = slimTableFactory0.copy();
        java.lang.String str27 = slimTableFactory25.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass30 = slimTableFactory28.getTableType("");
        java.lang.String str32 = slimTableFactory28.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory33 = slimTableFactory28.copy();
        boolean boolean35 = slimTableFactory28.hasColon("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass37 = slimTableFactory28.getTableType("");
        java.lang.String str39 = slimTableFactory28.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory40 = slimTableFactory28.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory41 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory42 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass44 = slimTableFactory42.getTableType("");
        java.lang.String str46 = slimTableFactory42.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap47 = slimTableFactory42.tableTypeArrays;
        slimTableFactory41.tableTypeArrays = strMap47;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory49 = slimTableFactory41.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory50 = slimTableFactory49.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory51 = slimTableFactory49.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory52 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory53 = slimTableFactory52.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass55 = slimTableFactory53.getTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass57 = slimTableFactory53.getTableType("hi!");
        boolean boolean59 = slimTableFactory53.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap60 = slimTableFactory53.tableTypeArrays;
        slimTableFactory51.tableTypeArrays = strMap60;
        slimTableFactory28.tableTypeArrays = strMap60;
        java.util.Map<java.lang.String, java.lang.String> strMap63 = slimTableFactory28.tableTypeArrays;
        slimTableFactory25.tableTypeArrays = strMap63;
        java.lang.String str66 = slimTableFactory25.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap67 = slimTableFactory25.tableTypeArrays;
        fitnesse.testsystems.slim.Table table68 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext70 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable71 = slimTableFactory25.makeSlimTable(table68, "", slimTestContext70);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNull(wildcardClass17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(slimTableFactory25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNull(wildcardClass30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(slimTableFactory33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(wildcardClass37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(slimTableFactory40);
        org.junit.Assert.assertNull(wildcardClass44);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNotNull(slimTableFactory49);
        org.junit.Assert.assertNotNull(slimTableFactory50);
        org.junit.Assert.assertNotNull(slimTableFactory51);
        org.junit.Assert.assertNotNull(slimTableFactory53);
        org.junit.Assert.assertNull(wildcardClass55);
        org.junit.Assert.assertNull(wildcardClass57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(strMap60);
        org.junit.Assert.assertNotNull(strMap63);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(strMap67);
    }

    @Test
    public void test08268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08268");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory0.copy();
        boolean boolean7 = slimTableFactory0.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap9 = slimTableFactory8.tableTypes;
        boolean boolean11 = slimTableFactory8.hasColon("");
        boolean boolean13 = slimTableFactory8.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory8.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory8.copy();
        java.lang.String str17 = slimTableFactory8.getFullTableName("");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test08269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08269");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        boolean boolean4 = slimTableFactory0.hasColon("");
        boolean boolean6 = slimTableFactory0.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass8 = slimTableFactory0.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str11 = slimTableFactory9.getFullTableName("hi!");
        java.lang.String str13 = slimTableFactory9.makeTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap14 = slimTableFactory9.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass17 = slimTableFactory15.getTableType("");
        java.lang.String str19 = slimTableFactory15.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap20 = slimTableFactory15.tableTypeArrays;
        slimTableFactory9.tableTypeArrays = strMap20;
        slimTableFactory0.tableTypeArrays = strMap20;
        boolean boolean24 = slimTableFactory0.hasColon("");
        java.lang.String str26 = slimTableFactory0.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str29 = slimTableFactory27.getFullTableName("hi!");
        java.lang.String str31 = slimTableFactory27.makeTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap32 = slimTableFactory27.tableTypes;
        java.lang.String str34 = slimTableFactory27.makeTableType("hi!");
        java.lang.String str36 = slimTableFactory27.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory37 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory38 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass40 = slimTableFactory38.getTableType("");
        java.lang.String str42 = slimTableFactory38.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap43 = slimTableFactory38.tableTypeArrays;
        slimTableFactory37.tableTypeArrays = strMap43;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory45 = slimTableFactory37.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory46 = slimTableFactory37.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass48 = slimTableFactory46.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap49 = slimTableFactory46.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory50 = slimTableFactory46.copy();
        boolean boolean52 = slimTableFactory50.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap53 = slimTableFactory50.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory54 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory55 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass57 = slimTableFactory55.getTableType("");
        java.lang.String str59 = slimTableFactory55.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap60 = slimTableFactory55.tableTypeArrays;
        slimTableFactory54.tableTypeArrays = strMap60;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory62 = slimTableFactory54.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory63 = slimTableFactory62.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory64 = slimTableFactory62.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory65 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory66 = slimTableFactory65.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass68 = slimTableFactory66.getTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass70 = slimTableFactory66.getTableType("hi!");
        boolean boolean72 = slimTableFactory66.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap73 = slimTableFactory66.tableTypeArrays;
        slimTableFactory64.tableTypeArrays = strMap73;
        slimTableFactory50.tableTypeArrays = strMap73;
        slimTableFactory27.tableTypeArrays = strMap73;
        slimTableFactory0.tableTypeArrays = strMap73;
        fitnesse.testsystems.slim.Table table78 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable79 = slimTableFactory0.parseDefineTableTypeTable(table78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNull(wildcardClass17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNull(wildcardClass40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(strMap43);
        org.junit.Assert.assertNotNull(slimTableFactory45);
        org.junit.Assert.assertNotNull(slimTableFactory46);
        org.junit.Assert.assertNull(wildcardClass48);
        org.junit.Assert.assertNotNull(strMap49);
        org.junit.Assert.assertNotNull(slimTableFactory50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(strMap53);
        org.junit.Assert.assertNull(wildcardClass57);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(strMap60);
        org.junit.Assert.assertNotNull(slimTableFactory62);
        org.junit.Assert.assertNotNull(slimTableFactory63);
        org.junit.Assert.assertNotNull(slimTableFactory64);
        org.junit.Assert.assertNotNull(slimTableFactory66);
        org.junit.Assert.assertNull(wildcardClass68);
        org.junit.Assert.assertNull(wildcardClass70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(strMap73);
    }

    @Test
    public void test08270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08270");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.lang.String str4 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory0.copy();
        java.lang.String str7 = slimTableFactory0.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap9 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory0.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass12 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap13 = slimTableFactory0.tableTypes;
        boolean boolean15 = slimTableFactory0.hasColon("hi!");
        java.lang.String str17 = slimTableFactory0.getFullTableName("hi!");
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
    }

    @Test
    public void test08271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08271");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.lang.String str4 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory0.copy();
        boolean boolean7 = slimTableFactory0.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap9 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str13 = slimTableFactory11.getFullTableName("hi!");
        java.lang.String str15 = slimTableFactory11.makeTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap16 = slimTableFactory11.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass19 = slimTableFactory17.getTableType("");
        java.lang.String str21 = slimTableFactory17.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap22 = slimTableFactory17.tableTypeArrays;
        slimTableFactory11.tableTypeArrays = strMap22;
        slimTableFactory10.tableTypeArrays = strMap22;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = slimTableFactory10.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = slimTableFactory25.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap27 = slimTableFactory25.tableTypeArrays;
        java.lang.Class<?> wildcardClass28 = strMap27.getClass();
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(slimTableFactory25);
        org.junit.Assert.assertNotNull(slimTableFactory26);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test08272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08272");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory0.copy();
        boolean boolean6 = slimTableFactory0.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap9 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap10 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory12.copy();
        java.lang.String str15 = slimTableFactory13.makeTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap16 = slimTableFactory13.tableTypes;
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertNotNull(slimTableFactory13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(strMap16);
    }

    @Test
    public void test08273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08273");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.lang.String str4 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory0.copy();
        java.lang.String str7 = slimTableFactory0.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap9 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory0.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass12 = slimTableFactory0.getTableType("hi!");
        java.lang.String str14 = slimTableFactory0.getFullTableName("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass16 = slimTableFactory0.getTableType("");
        boolean boolean18 = slimTableFactory0.hasColon("");
        boolean boolean20 = slimTableFactory0.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = slimTableFactory21.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass24 = slimTableFactory22.getTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass26 = slimTableFactory22.getTableType("hi!");
        boolean boolean28 = slimTableFactory22.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap29 = slimTableFactory22.tableTypeArrays;
        java.lang.String str31 = slimTableFactory22.makeTableType("");
        boolean boolean33 = slimTableFactory22.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap34 = slimTableFactory22.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory35 = slimTableFactory22.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap36 = slimTableFactory22.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap36;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory38 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.Table table39 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable40 = slimTableFactory38.parseDefineTableTypeTable(table39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertNull(wildcardClass16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(slimTableFactory22);
        org.junit.Assert.assertNull(wildcardClass24);
        org.junit.Assert.assertNull(wildcardClass26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNotNull(slimTableFactory35);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(slimTableFactory38);
    }

    @Test
    public void test08274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08274");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str6 = slimTableFactory4.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory4.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap7;
        java.lang.String str10 = slimTableFactory0.makeTableType("");
        boolean boolean12 = slimTableFactory0.hasColon("hi!");
        boolean boolean14 = slimTableFactory0.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap15 = slimTableFactory0.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass17 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.Table table18 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory0.parseDefineTableTypeRow(table18, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNull(wildcardClass17);
    }

    @Test
    public void test08275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08275");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str7 = slimTableFactory5.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory5.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory5.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap10 = slimTableFactory9.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory9.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap12 = slimTableFactory11.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap13 = slimTableFactory11.tableTypeArrays;
        java.lang.String str15 = slimTableFactory11.getFullTableName("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass17 = slimTableFactory11.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass20 = slimTableFactory18.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass23 = slimTableFactory21.getTableType("");
        java.lang.String str25 = slimTableFactory21.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = slimTableFactory21.copy();
        boolean boolean28 = slimTableFactory21.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap29 = slimTableFactory21.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap30 = slimTableFactory21.tableTypeArrays;
        slimTableFactory18.tableTypeArrays = strMap30;
        boolean boolean33 = slimTableFactory18.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass35 = slimTableFactory18.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap36 = slimTableFactory18.tableTypeArrays;
        slimTableFactory11.tableTypeArrays = strMap36;
        slimTableFactory4.tableTypeArrays = strMap36;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory39 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass41 = slimTableFactory39.getTableType("");
        boolean boolean43 = slimTableFactory39.hasColon("");
        boolean boolean45 = slimTableFactory39.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass47 = slimTableFactory39.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory48 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str50 = slimTableFactory48.getFullTableName("hi!");
        java.lang.String str52 = slimTableFactory48.makeTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap53 = slimTableFactory48.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory54 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass56 = slimTableFactory54.getTableType("");
        java.lang.String str58 = slimTableFactory54.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap59 = slimTableFactory54.tableTypeArrays;
        slimTableFactory48.tableTypeArrays = strMap59;
        slimTableFactory39.tableTypeArrays = strMap59;
        boolean boolean63 = slimTableFactory39.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap64 = slimTableFactory39.tableTypeArrays;
        slimTableFactory4.tableTypeArrays = strMap64;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap66 = slimTableFactory4.tableTypes;
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNull(wildcardClass17);
        org.junit.Assert.assertNull(wildcardClass20);
        org.junit.Assert.assertNull(wildcardClass23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(slimTableFactory26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(wildcardClass35);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNull(wildcardClass41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(wildcardClass47);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hi!" + "'", str50, "hi!");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(strMap53);
        org.junit.Assert.assertNull(wildcardClass56);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(strMap59);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(strMap64);
        org.junit.Assert.assertNotNull(strMap66);
    }

    @Test
    public void test08276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08276");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory2 = slimTableFactory0.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass4 = slimTableFactory0.getTableType("hi!");
        java.lang.String str6 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory0.copy();
        java.lang.String str10 = slimTableFactory0.makeTableType("");
        java.lang.String str12 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.Table table13 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext15 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable16 = slimTableFactory0.makeSlimTable(table13, "", slimTestContext15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(slimTableFactory2);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test08277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08277");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.lang.String str4 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory0.copy();
        java.lang.String str7 = slimTableFactory0.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap9 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str12 = slimTableFactory10.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap13 = slimTableFactory10.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap13;
        java.lang.String str16 = slimTableFactory0.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap18 = slimTableFactory0.tableTypes;
        java.lang.String str20 = slimTableFactory0.getFullTableName("hi!");
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
    }

    @Test
    public void test08278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08278");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str3 = slimTableFactory1.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory1.copy();
        boolean boolean7 = slimTableFactory1.hasColon("hi!");
        boolean boolean9 = slimTableFactory1.hasColon("");
        boolean boolean11 = slimTableFactory1.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass15 = slimTableFactory13.getTableType("");
        java.lang.String str17 = slimTableFactory13.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap18 = slimTableFactory13.tableTypeArrays;
        slimTableFactory12.tableTypeArrays = strMap18;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory12.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = slimTableFactory20.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = slimTableFactory20.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = slimTableFactory20.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = slimTableFactory20.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap25 = slimTableFactory20.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap25;
        slimTableFactory0.tableTypeArrays = strMap25;
        java.util.Map<java.lang.String, java.lang.String> strMap28 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap29 = slimTableFactory0.tableTypeArrays;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!" + "'", str3, "hi!");
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(slimTableFactory20);
        org.junit.Assert.assertNotNull(slimTableFactory21);
        org.junit.Assert.assertNotNull(slimTableFactory22);
        org.junit.Assert.assertNotNull(slimTableFactory23);
        org.junit.Assert.assertNotNull(slimTableFactory24);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNotNull(strMap29);
    }

    @Test
    public void test08279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08279");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str6 = slimTableFactory4.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory4.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap7;
        java.lang.String str10 = slimTableFactory0.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap11 = slimTableFactory0.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass13 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.Table table15 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable16 = slimTableFactory0.parseDefineTableTypeTable(table15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertNotNull(slimTableFactory14);
    }

    @Test
    public void test08280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08280");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap5 = slimTableFactory4.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory4.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory6.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory6.copy();
        java.lang.String str10 = slimTableFactory8.makeTableType("hi!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
    }

    @Test
    public void test08281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08281");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.makeTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass4 = slimTableFactory0.getTableType("");
        java.lang.String str6 = slimTableFactory0.getFullTableName("");
        java.lang.String str8 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory9.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory10.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory12.getTableType("");
        java.lang.String str16 = slimTableFactory12.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap17 = slimTableFactory12.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap18 = slimTableFactory12.tableTypeArrays;
        java.lang.String str20 = slimTableFactory12.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass24 = slimTableFactory22.getTableType("");
        java.lang.String str26 = slimTableFactory22.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap27 = slimTableFactory22.tableTypeArrays;
        slimTableFactory21.tableTypeArrays = strMap27;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory29 = slimTableFactory21.copy();
        java.lang.String str31 = slimTableFactory21.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap32 = slimTableFactory21.tableTypeArrays;
        slimTableFactory12.tableTypeArrays = strMap32;
        slimTableFactory10.tableTypeArrays = strMap32;
        java.lang.String str36 = slimTableFactory10.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory37 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory38 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass40 = slimTableFactory38.getTableType("");
        java.lang.String str42 = slimTableFactory38.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap43 = slimTableFactory38.tableTypeArrays;
        slimTableFactory37.tableTypeArrays = strMap43;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory45 = slimTableFactory37.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap46 = slimTableFactory37.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory47 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str49 = slimTableFactory47.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap50 = slimTableFactory47.tableTypeArrays;
        java.lang.String str52 = slimTableFactory47.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap53 = slimTableFactory47.tableTypeArrays;
        slimTableFactory37.tableTypeArrays = strMap53;
        slimTableFactory10.tableTypeArrays = strMap53;
        slimTableFactory0.tableTypeArrays = strMap53;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap57 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory58 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass60 = slimTableFactory58.getTableType("");
        java.lang.String str62 = slimTableFactory58.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory63 = slimTableFactory58.copy();
        java.lang.String str65 = slimTableFactory58.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap66 = slimTableFactory58.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap67 = slimTableFactory58.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass69 = slimTableFactory58.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap70 = slimTableFactory58.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap70;
        java.lang.String str73 = slimTableFactory0.getFullTableName("");
        java.lang.String str75 = slimTableFactory0.getFullTableName("");
        boolean boolean77 = slimTableFactory0.hasColon("");
        java.lang.String str79 = slimTableFactory0.getFullTableName("");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertNull(wildcardClass24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(slimTableFactory29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertNull(wildcardClass40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(strMap43);
        org.junit.Assert.assertNotNull(slimTableFactory45);
        org.junit.Assert.assertNotNull(strMap46);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hi!" + "'", str49, "hi!");
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(strMap53);
        org.junit.Assert.assertNotNull(strMap57);
        org.junit.Assert.assertNull(wildcardClass60);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(slimTableFactory63);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "hi!" + "'", str65, "hi!");
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strMap67);
        org.junit.Assert.assertNull(wildcardClass69);
        org.junit.Assert.assertNotNull(strMap70);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
    }

    @Test
    public void test08282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08282");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.lang.String str4 = slimTableFactory0.makeTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap5 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory0.copy();
        java.lang.String str8 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str11 = slimTableFactory9.getFullTableName("hi!");
        java.lang.String str13 = slimTableFactory9.makeTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap14 = slimTableFactory9.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory9.copy();
        java.lang.String str17 = slimTableFactory9.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str20 = slimTableFactory18.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap21 = slimTableFactory18.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str24 = slimTableFactory22.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap25 = slimTableFactory22.tableTypeArrays;
        slimTableFactory18.tableTypeArrays = strMap25;
        java.lang.String str28 = slimTableFactory18.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap29 = slimTableFactory18.tableTypeArrays;
        slimTableFactory9.tableTypeArrays = strMap29;
        slimTableFactory0.tableTypeArrays = strMap29;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass33 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap34 = slimTableFactory0.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass36 = slimTableFactory0.getTableType("hi!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNull(wildcardClass33);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNull(wildcardClass36);
    }

    @Test
    public void test08283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08283");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        boolean boolean4 = slimTableFactory0.hasColon("");
        boolean boolean6 = slimTableFactory0.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass8 = slimTableFactory0.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str11 = slimTableFactory9.getFullTableName("hi!");
        java.lang.String str13 = slimTableFactory9.makeTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap14 = slimTableFactory9.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass17 = slimTableFactory15.getTableType("");
        java.lang.String str19 = slimTableFactory15.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap20 = slimTableFactory15.tableTypeArrays;
        slimTableFactory9.tableTypeArrays = strMap20;
        slimTableFactory0.tableTypeArrays = strMap20;
        boolean boolean24 = slimTableFactory0.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = slimTableFactory0.copy();
        boolean boolean27 = slimTableFactory25.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = slimTableFactory25.copy();
        fitnesse.testsystems.slim.Table table29 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable30 = slimTableFactory28.parseDefineTableTypeTable(table29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNull(wildcardClass17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(slimTableFactory25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(slimTableFactory28);
    }

    @Test
    public void test08284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08284");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass3 = slimTableFactory1.getTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass5 = slimTableFactory1.getTableType("hi!");
        boolean boolean7 = slimTableFactory1.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory1.copy();
        boolean boolean11 = slimTableFactory1.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap13 = slimTableFactory12.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass15 = slimTableFactory12.getTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass17 = slimTableFactory12.getTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass19 = slimTableFactory12.getTableType("hi!");
        boolean boolean21 = slimTableFactory12.hasColon("hi!");
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertNull(wildcardClass17);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test08285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08285");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str6 = slimTableFactory4.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory4.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap7;
        java.lang.String str10 = slimTableFactory0.getFullTableName("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass12 = slimTableFactory0.getTableType("hi!");
        java.lang.String str14 = slimTableFactory0.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory0.copy();
        boolean boolean17 = slimTableFactory15.hasColon("hi!");
        fitnesse.testsystems.slim.Table table18 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory15.parseDefineTableTypeRow(table18, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test08286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08286");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.makeTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass4 = slimTableFactory0.getTableType("");
        java.lang.String str6 = slimTableFactory0.getFullTableName("");
        java.lang.String str8 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory9.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory10.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory12.getTableType("");
        java.lang.String str16 = slimTableFactory12.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap17 = slimTableFactory12.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap18 = slimTableFactory12.tableTypeArrays;
        java.lang.String str20 = slimTableFactory12.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass24 = slimTableFactory22.getTableType("");
        java.lang.String str26 = slimTableFactory22.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap27 = slimTableFactory22.tableTypeArrays;
        slimTableFactory21.tableTypeArrays = strMap27;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory29 = slimTableFactory21.copy();
        java.lang.String str31 = slimTableFactory21.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap32 = slimTableFactory21.tableTypeArrays;
        slimTableFactory12.tableTypeArrays = strMap32;
        slimTableFactory10.tableTypeArrays = strMap32;
        java.lang.String str36 = slimTableFactory10.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory37 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory38 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass40 = slimTableFactory38.getTableType("");
        java.lang.String str42 = slimTableFactory38.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap43 = slimTableFactory38.tableTypeArrays;
        slimTableFactory37.tableTypeArrays = strMap43;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory45 = slimTableFactory37.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap46 = slimTableFactory37.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory47 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str49 = slimTableFactory47.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap50 = slimTableFactory47.tableTypeArrays;
        java.lang.String str52 = slimTableFactory47.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap53 = slimTableFactory47.tableTypeArrays;
        slimTableFactory37.tableTypeArrays = strMap53;
        slimTableFactory10.tableTypeArrays = strMap53;
        slimTableFactory0.tableTypeArrays = strMap53;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap57 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory58 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass60 = slimTableFactory58.getTableType("");
        java.lang.String str62 = slimTableFactory58.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory63 = slimTableFactory58.copy();
        java.lang.String str65 = slimTableFactory58.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap66 = slimTableFactory58.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap67 = slimTableFactory58.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass69 = slimTableFactory58.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap70 = slimTableFactory58.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap70;
        java.lang.String str73 = slimTableFactory0.getFullTableName("");
        java.lang.String str75 = slimTableFactory0.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap76 = slimTableFactory0.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap77 = slimTableFactory0.tableTypeArrays;
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertNull(wildcardClass24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(slimTableFactory29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertNull(wildcardClass40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(strMap43);
        org.junit.Assert.assertNotNull(slimTableFactory45);
        org.junit.Assert.assertNotNull(strMap46);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hi!" + "'", str49, "hi!");
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(strMap53);
        org.junit.Assert.assertNotNull(strMap57);
        org.junit.Assert.assertNull(wildcardClass60);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(slimTableFactory63);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "hi!" + "'", str65, "hi!");
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(strMap67);
        org.junit.Assert.assertNull(wildcardClass69);
        org.junit.Assert.assertNotNull(strMap70);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "hi!" + "'", str75, "hi!");
        org.junit.Assert.assertNotNull(strMap76);
        org.junit.Assert.assertNotNull(strMap77);
    }

    @Test
    public void test08287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08287");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str6 = slimTableFactory4.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory4.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap7;
        java.lang.String str10 = slimTableFactory0.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.Table table12 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable13 = slimTableFactory0.parseDefineTableTypeTable(table12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(strMap11);
    }

    @Test
    public void test08288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08288");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.lang.String str3 = slimTableFactory0.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap4 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory5.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory5.tableTypes;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap8 = slimTableFactory5.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory5.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass11 = slimTableFactory9.getTableType("");
        fitnesse.testsystems.slim.Table table12 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory9.parseDefineTableTypeRow(table12, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!" + "'", str3, "hi!");
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNull(wildcardClass11);
    }

    @Test
    public void test08289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08289");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.lang.String str4 = slimTableFactory0.makeTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap5 = slimTableFactory0.tableTypes;
        java.lang.String str7 = slimTableFactory0.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap8 = slimTableFactory0.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap9 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory0.tableTypeArrays;
        java.lang.String str12 = slimTableFactory0.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap13 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str16 = slimTableFactory14.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap17 = slimTableFactory14.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory14.copy();
        boolean boolean20 = slimTableFactory14.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap21 = slimTableFactory14.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap22 = slimTableFactory14.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap23 = slimTableFactory14.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap24 = slimTableFactory14.tableTypes;
        java.lang.String str26 = slimTableFactory14.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap27 = slimTableFactory14.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap27;
        fitnesse.testsystems.slim.Table table29 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory0.parseDefineTableTypeRow(table29, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(slimTableFactory18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
        org.junit.Assert.assertNotNull(strMap27);
    }

    @Test
    public void test08290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08290");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass5 = slimTableFactory3.getTableType("");
        java.lang.String str7 = slimTableFactory3.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory3.copy();
        boolean boolean10 = slimTableFactory3.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory3.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap12 = slimTableFactory3.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap12;
        boolean boolean15 = slimTableFactory0.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass17 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap18 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory19.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap21 = slimTableFactory19.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = slimTableFactory19.copy();
        java.lang.String str24 = slimTableFactory22.getFullTableName("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass26 = slimTableFactory22.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap27 = slimTableFactory22.tableTypes;
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(wildcardClass17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(slimTableFactory19);
        org.junit.Assert.assertNotNull(slimTableFactory20);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(slimTableFactory22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNull(wildcardClass26);
        org.junit.Assert.assertNotNull(strMap27);
    }

    @Test
    public void test08291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08291");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str6 = slimTableFactory4.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory4.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap7;
        java.lang.String str10 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap12 = slimTableFactory0.tableTypes;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap13 = slimTableFactory0.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass15 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory17.copy();
        boolean boolean20 = slimTableFactory18.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap21 = slimTableFactory18.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap22 = slimTableFactory18.tableTypes;
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(slimTableFactory17);
        org.junit.Assert.assertNotNull(slimTableFactory18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(strMap22);
    }

    @Test
    public void test08292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08292");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str6 = slimTableFactory4.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory4.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap7;
        java.lang.String str10 = slimTableFactory0.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap12 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap13 = slimTableFactory0.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass15 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.Table table16 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext18 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable19 = slimTableFactory0.makeSlimTable(table16, "hi!", slimTestContext18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNull(wildcardClass15);
    }

    @Test
    public void test08293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08293");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass3 = slimTableFactory1.getTableType("hi!");
        java.lang.String str5 = slimTableFactory1.makeTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory1.getTableType("hi!");
        java.lang.String str9 = slimTableFactory1.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap10 = slimTableFactory1.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory1.tableTypeArrays;
        boolean boolean13 = slimTableFactory1.hasColon("");
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test08294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08294");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str6 = slimTableFactory4.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory4.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap7;
        java.lang.String str10 = slimTableFactory0.getFullTableName("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass12 = slimTableFactory0.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap13 = slimTableFactory0.tableTypeArrays;
        java.lang.String str15 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = slimTableFactory16.copy();
        java.lang.String str19 = slimTableFactory16.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap20 = slimTableFactory16.tableTypes;
        boolean boolean22 = slimTableFactory16.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap23 = slimTableFactory16.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap23;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass26 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.Table table27 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable28 = slimTableFactory0.parseDefineTableTypeTable(table27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(slimTableFactory17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNull(wildcardClass26);
    }

    @Test
    public void test08295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08295");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.lang.String str4 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory0.copy();
        java.lang.String str7 = slimTableFactory5.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap8 = slimTableFactory5.tableTypes;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap9 = slimTableFactory5.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory5.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory5.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory11.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory11.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str17 = slimTableFactory15.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap18 = slimTableFactory15.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str21 = slimTableFactory19.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap22 = slimTableFactory19.tableTypeArrays;
        slimTableFactory15.tableTypeArrays = strMap22;
        java.lang.String str25 = slimTableFactory15.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = slimTableFactory15.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap27 = slimTableFactory15.tableTypes;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap28 = slimTableFactory15.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass30 = slimTableFactory15.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap31 = slimTableFactory15.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory32 = slimTableFactory15.copy();
        java.lang.String str34 = slimTableFactory15.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap35 = slimTableFactory15.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory36 = slimTableFactory15.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap37 = slimTableFactory15.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory38 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory39 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass41 = slimTableFactory39.getTableType("");
        java.lang.String str43 = slimTableFactory39.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap44 = slimTableFactory39.tableTypeArrays;
        slimTableFactory38.tableTypeArrays = strMap44;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory46 = slimTableFactory38.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory47 = slimTableFactory46.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory48 = slimTableFactory46.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory49 = slimTableFactory46.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory50 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory51 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass53 = slimTableFactory51.getTableType("");
        java.lang.String str55 = slimTableFactory51.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap56 = slimTableFactory51.tableTypeArrays;
        slimTableFactory50.tableTypeArrays = strMap56;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory58 = slimTableFactory50.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory59 = slimTableFactory58.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory60 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str62 = slimTableFactory60.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap63 = slimTableFactory60.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap64 = slimTableFactory60.tableTypeArrays;
        slimTableFactory59.tableTypeArrays = strMap64;
        slimTableFactory49.tableTypeArrays = strMap64;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap67 = slimTableFactory49.tableTypes;
        java.lang.String str69 = slimTableFactory49.getFullTableName("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass71 = slimTableFactory49.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory72 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str74 = slimTableFactory72.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap75 = slimTableFactory72.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory76 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str78 = slimTableFactory76.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap79 = slimTableFactory76.tableTypeArrays;
        slimTableFactory72.tableTypeArrays = strMap79;
        java.lang.String str82 = slimTableFactory72.makeTableType("");
        java.lang.String str84 = slimTableFactory72.makeTableType("hi!");
        boolean boolean86 = slimTableFactory72.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap87 = slimTableFactory72.tableTypeArrays;
        slimTableFactory49.tableTypeArrays = strMap87;
        slimTableFactory15.tableTypeArrays = strMap87;
        slimTableFactory11.tableTypeArrays = strMap87;
        java.lang.String str92 = slimTableFactory11.getFullTableName("");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(slimTableFactory26);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNull(wildcardClass30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(slimTableFactory32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(slimTableFactory36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNull(wildcardClass41);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(strMap44);
        org.junit.Assert.assertNotNull(slimTableFactory46);
        org.junit.Assert.assertNotNull(slimTableFactory47);
        org.junit.Assert.assertNotNull(slimTableFactory48);
        org.junit.Assert.assertNotNull(slimTableFactory49);
        org.junit.Assert.assertNull(wildcardClass53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(strMap56);
        org.junit.Assert.assertNotNull(slimTableFactory58);
        org.junit.Assert.assertNotNull(slimTableFactory59);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "hi!" + "'", str62, "hi!");
        org.junit.Assert.assertNotNull(strMap63);
        org.junit.Assert.assertNotNull(strMap64);
        org.junit.Assert.assertNotNull(strMap67);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNull(wildcardClass71);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "hi!" + "'", str74, "hi!");
        org.junit.Assert.assertNotNull(strMap75);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "hi!" + "'", str78, "hi!");
        org.junit.Assert.assertNotNull(strMap79);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "hi!" + "'", str84, "hi!");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(strMap87);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
    }

    @Test
    public void test08296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08296");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.lang.String str4 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory0.copy();
        java.lang.String str7 = slimTableFactory0.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap9 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory0.copy();
        java.lang.String str12 = slimTableFactory10.makeTableType("hi!");
        java.lang.String str14 = slimTableFactory10.getFullTableName("");
        java.lang.String str16 = slimTableFactory10.makeTableType("");
        java.lang.String str18 = slimTableFactory10.makeTableType("hi!");
        boolean boolean20 = slimTableFactory10.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap21 = slimTableFactory10.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = slimTableFactory10.copy();
        boolean boolean24 = slimTableFactory22.hasColon("hi!");
        java.lang.String str26 = slimTableFactory22.makeTableType("hi!");
        fitnesse.testsystems.slim.Table table27 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable28 = slimTableFactory22.parseDefineTableTypeTable(table27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(slimTableFactory22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
    }

    @Test
    public void test08297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08297");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        boolean boolean4 = slimTableFactory0.hasColon("");
        boolean boolean6 = slimTableFactory0.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass8 = slimTableFactory0.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str11 = slimTableFactory9.getFullTableName("hi!");
        java.lang.String str13 = slimTableFactory9.makeTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap14 = slimTableFactory9.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass17 = slimTableFactory15.getTableType("");
        java.lang.String str19 = slimTableFactory15.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap20 = slimTableFactory15.tableTypeArrays;
        slimTableFactory9.tableTypeArrays = strMap20;
        slimTableFactory0.tableTypeArrays = strMap20;
        boolean boolean24 = slimTableFactory0.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = slimTableFactory0.copy();
        java.lang.String str27 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = slimTableFactory0.copy();
        boolean boolean30 = slimTableFactory28.hasColon("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass32 = slimTableFactory28.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory33 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str35 = slimTableFactory33.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap36 = slimTableFactory33.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory37 = slimTableFactory33.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap38 = slimTableFactory37.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory39 = slimTableFactory37.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory40 = slimTableFactory39.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory41 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory42 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass44 = slimTableFactory42.getTableType("");
        java.lang.String str46 = slimTableFactory42.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap47 = slimTableFactory42.tableTypeArrays;
        slimTableFactory41.tableTypeArrays = strMap47;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory49 = slimTableFactory41.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory50 = slimTableFactory41.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass52 = slimTableFactory50.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap53 = slimTableFactory50.tableTypes;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap54 = slimTableFactory50.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory55 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory56 = slimTableFactory55.copy();
        java.lang.String str58 = slimTableFactory55.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap59 = slimTableFactory55.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass61 = slimTableFactory55.getTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass63 = slimTableFactory55.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory64 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass66 = slimTableFactory64.getTableType("");
        java.lang.String str68 = slimTableFactory64.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory69 = slimTableFactory64.copy();
        boolean boolean71 = slimTableFactory64.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap72 = slimTableFactory64.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory73 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory74 = slimTableFactory73.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass76 = slimTableFactory74.getTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass78 = slimTableFactory74.getTableType("hi!");
        boolean boolean80 = slimTableFactory74.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap81 = slimTableFactory74.tableTypeArrays;
        slimTableFactory64.tableTypeArrays = strMap81;
        slimTableFactory55.tableTypeArrays = strMap81;
        slimTableFactory50.tableTypeArrays = strMap81;
        slimTableFactory40.tableTypeArrays = strMap81;
        slimTableFactory28.tableTypeArrays = strMap81;
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNull(wildcardClass17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(slimTableFactory25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(slimTableFactory28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(wildcardClass32);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(slimTableFactory37);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertNotNull(slimTableFactory39);
        org.junit.Assert.assertNotNull(slimTableFactory40);
        org.junit.Assert.assertNull(wildcardClass44);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNotNull(slimTableFactory49);
        org.junit.Assert.assertNotNull(slimTableFactory50);
        org.junit.Assert.assertNull(wildcardClass52);
        org.junit.Assert.assertNotNull(strMap53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(slimTableFactory56);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "hi!" + "'", str58, "hi!");
        org.junit.Assert.assertNotNull(strMap59);
        org.junit.Assert.assertNull(wildcardClass61);
        org.junit.Assert.assertNull(wildcardClass63);
        org.junit.Assert.assertNull(wildcardClass66);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(slimTableFactory69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(strMap72);
        org.junit.Assert.assertNotNull(slimTableFactory74);
        org.junit.Assert.assertNull(wildcardClass76);
        org.junit.Assert.assertNull(wildcardClass78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(strMap81);
    }

    @Test
    public void test08298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08298");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.lang.String str4 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory0.copy();
        boolean boolean7 = slimTableFactory0.hasColon("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass9 = slimTableFactory0.getTableType("");
        java.lang.String str11 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap14 = slimTableFactory0.tableTypes;
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertNotNull(slimTableFactory13);
        org.junit.Assert.assertNotNull(strMap14);
    }

    @Test
    public void test08299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08299");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        boolean boolean4 = slimTableFactory0.hasColon("");
        boolean boolean6 = slimTableFactory0.hasColon("hi!");
        java.lang.Class<?> wildcardClass7 = slimTableFactory0.getClass();
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test08300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08300");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.lang.String str4 = slimTableFactory0.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap5 = slimTableFactory0.tableTypes;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap6 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str9 = slimTableFactory7.getFullTableName("hi!");
        java.lang.String str11 = slimTableFactory7.makeTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap12 = slimTableFactory7.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory7.copy();
        java.lang.String str15 = slimTableFactory7.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str18 = slimTableFactory16.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap19 = slimTableFactory16.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str22 = slimTableFactory20.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap23 = slimTableFactory20.tableTypeArrays;
        slimTableFactory16.tableTypeArrays = strMap23;
        java.lang.String str26 = slimTableFactory16.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap27 = slimTableFactory16.tableTypeArrays;
        slimTableFactory7.tableTypeArrays = strMap27;
        slimTableFactory0.tableTypeArrays = strMap27;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap30 = slimTableFactory0.tableTypes;
        java.lang.String str32 = slimTableFactory0.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory33 = slimTableFactory0.copy();
        java.lang.String str35 = slimTableFactory33.makeTableType("hi!");
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(slimTableFactory13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
    }

    @Test
    public void test08301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08301");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory0.copy();
        boolean boolean6 = slimTableFactory0.hasColon("hi!");
        boolean boolean8 = slimTableFactory0.hasColon("");
        java.lang.String str10 = slimTableFactory0.makeTableType("");
        java.lang.String str12 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory0.copy();
        java.lang.String str15 = slimTableFactory13.makeTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap16 = slimTableFactory13.tableTypes;
        java.lang.Class<?> wildcardClass17 = strMap16.getClass();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(slimTableFactory13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test08302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08302");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.lang.String str4 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory0.copy();
        java.lang.String str7 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory0.copy();
        java.lang.String str11 = slimTableFactory9.makeTableType("hi!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
    }

    @Test
    public void test08303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08303");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass3 = slimTableFactory1.getTableType("");
        java.lang.String str5 = slimTableFactory1.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory1.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap6;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory9.tableTypeArrays;
        java.lang.String str12 = slimTableFactory9.makeTableType("hi!");
        boolean boolean14 = slimTableFactory9.hasColon("hi!");
        java.lang.String str16 = slimTableFactory9.makeTableType("hi!");
        boolean boolean18 = slimTableFactory9.hasColon("hi!");
        java.lang.String str20 = slimTableFactory9.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = slimTableFactory9.copy();
        boolean boolean23 = slimTableFactory9.hasColon("");
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(slimTableFactory21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test08304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08304");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory2 = slimTableFactory0.copy();
        boolean boolean4 = slimTableFactory2.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory2.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory2.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap8 = slimTableFactory2.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap9 = slimTableFactory2.tableTypeArrays;
        boolean boolean11 = slimTableFactory2.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass13 = slimTableFactory2.getTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass15 = slimTableFactory2.getTableType("hi!");
        java.lang.String str17 = slimTableFactory2.makeTableType("");
        fitnesse.testsystems.slim.Table table18 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory2.parseDefineTableTypeRow(table18, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(slimTableFactory2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test08305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08305");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.lang.String str4 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str8 = slimTableFactory6.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap9 = slimTableFactory6.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str12 = slimTableFactory10.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap13 = slimTableFactory10.tableTypeArrays;
        slimTableFactory6.tableTypeArrays = strMap13;
        java.lang.String str16 = slimTableFactory6.getFullTableName("");
        boolean boolean18 = slimTableFactory6.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass22 = slimTableFactory20.getTableType("");
        java.lang.String str24 = slimTableFactory20.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap25 = slimTableFactory20.tableTypeArrays;
        slimTableFactory19.tableTypeArrays = strMap25;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = slimTableFactory19.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = slimTableFactory19.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = slimTableFactory28.tableTypeArrays;
        slimTableFactory6.tableTypeArrays = strMap29;
        slimTableFactory5.tableTypeArrays = strMap29;
        boolean boolean33 = slimTableFactory5.hasColon("hi!");
        fitnesse.testsystems.slim.Table table34 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable35 = slimTableFactory5.parseDefineTableTypeTable(table34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(wildcardClass22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(slimTableFactory27);
        org.junit.Assert.assertNotNull(slimTableFactory28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test08306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08306");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass3 = slimTableFactory1.getTableType("");
        java.lang.String str5 = slimTableFactory1.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory1.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap6;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory9.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass13 = slimTableFactory11.getTableType("");
        java.lang.String str15 = slimTableFactory11.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory11.copy();
        boolean boolean18 = slimTableFactory11.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap19 = slimTableFactory11.tableTypeArrays;
        slimTableFactory9.tableTypeArrays = strMap19;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = slimTableFactory9.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass23 = slimTableFactory21.getTableType("hi!");
        java.lang.String str25 = slimTableFactory21.makeTableType("hi!");
        java.lang.String str27 = slimTableFactory21.getFullTableName("hi!");
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(slimTableFactory21);
        org.junit.Assert.assertNull(wildcardClass23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
    }

    @Test
    public void test08307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08307");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass3 = slimTableFactory1.getTableType("");
        java.lang.String str5 = slimTableFactory1.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory1.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap6;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory8.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory8.copy();
        java.lang.String str13 = slimTableFactory8.makeTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap14 = slimTableFactory8.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass16 = slimTableFactory8.getTableType("hi!");
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNull(wildcardClass16);
    }

    @Test
    public void test08308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08308");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory0.copy();
        boolean boolean7 = slimTableFactory0.hasColon("");
        java.lang.String str9 = slimTableFactory0.getFullTableName("hi!");
        boolean boolean11 = slimTableFactory0.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory12.getTableType("");
        java.lang.String str16 = slimTableFactory12.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = slimTableFactory12.copy();
        boolean boolean19 = slimTableFactory12.hasColon("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass21 = slimTableFactory12.getTableType("");
        java.lang.String str23 = slimTableFactory12.makeTableType("");
        java.lang.String str25 = slimTableFactory12.makeTableType("hi!");
        java.lang.String str27 = slimTableFactory12.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass30 = slimTableFactory28.getTableType("");
        java.lang.String str32 = slimTableFactory28.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory33 = slimTableFactory28.copy();
        boolean boolean35 = slimTableFactory28.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap36 = slimTableFactory28.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap37 = slimTableFactory28.tableTypeArrays;
        slimTableFactory12.tableTypeArrays = strMap37;
        slimTableFactory0.tableTypeArrays = strMap37;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass41 = slimTableFactory0.getTableType("hi!");
        java.lang.String str43 = slimTableFactory0.makeTableType("");
        boolean boolean45 = slimTableFactory0.hasColon("hi!");
        java.lang.String str47 = slimTableFactory0.getFullTableName("");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(slimTableFactory17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(wildcardClass21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNull(wildcardClass30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(slimTableFactory33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNull(wildcardClass41);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
    }

    @Test
    public void test08309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08309");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str6 = slimTableFactory4.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory4.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap7;
        java.lang.String str10 = slimTableFactory0.makeTableType("");
        java.lang.String str12 = slimTableFactory0.makeTableType("hi!");
        boolean boolean14 = slimTableFactory0.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap15 = slimTableFactory0.tableTypes;
        boolean boolean17 = slimTableFactory0.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory0.copy();
        java.lang.String str20 = slimTableFactory18.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = slimTableFactory18.copy();
        fitnesse.testsystems.slim.Table table22 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable23 = slimTableFactory21.parseDefineTableTypeTable(table22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(slimTableFactory18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(slimTableFactory21);
    }

    @Test
    public void test08310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08310");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.lang.String str4 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory0.copy();
        java.lang.String str7 = slimTableFactory5.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap8 = slimTableFactory5.tableTypes;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap9 = slimTableFactory5.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory5.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory5.copy();
        java.lang.String str13 = slimTableFactory5.getFullTableName("");
        boolean boolean15 = slimTableFactory5.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory5.copy();
        fitnesse.testsystems.slim.Table table17 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext19 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable20 = slimTableFactory5.makeSlimTable(table17, "hi!", slimTestContext19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(slimTableFactory16);
    }

    @Test
    public void test08311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08311");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str6 = slimTableFactory4.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory4.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap7;
        java.lang.String str10 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory0.copy();
        java.lang.String str13 = slimTableFactory11.makeTableType("hi!");
        java.lang.String str15 = slimTableFactory11.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory11.copy();
        java.lang.String str18 = slimTableFactory11.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass21 = slimTableFactory19.getTableType("");
        java.lang.String str23 = slimTableFactory19.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = slimTableFactory19.copy();
        java.lang.String str26 = slimTableFactory19.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap27 = slimTableFactory19.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap28 = slimTableFactory19.tableTypes;
        java.lang.String str30 = slimTableFactory19.getFullTableName("hi!");
        java.lang.String str32 = slimTableFactory19.makeTableType("");
        boolean boolean34 = slimTableFactory19.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap35 = slimTableFactory19.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory36 = slimTableFactory19.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory37 = slimTableFactory19.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory38 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory39 = slimTableFactory38.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory40 = slimTableFactory38.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass42 = slimTableFactory38.getTableType("hi!");
        java.lang.String str44 = slimTableFactory38.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory45 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str47 = slimTableFactory45.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap48 = slimTableFactory45.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory49 = slimTableFactory45.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap50 = slimTableFactory49.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory51 = slimTableFactory49.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory52 = slimTableFactory51.copy();
        boolean boolean54 = slimTableFactory52.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap55 = slimTableFactory52.tableTypeArrays;
        slimTableFactory38.tableTypeArrays = strMap55;
        slimTableFactory37.tableTypeArrays = strMap55;
        slimTableFactory11.tableTypeArrays = strMap55;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap59 = slimTableFactory11.tableTypes;
        java.lang.Class<?> wildcardClass60 = slimTableFactory11.getClass();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertNull(wildcardClass21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(slimTableFactory24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(slimTableFactory36);
        org.junit.Assert.assertNotNull(slimTableFactory37);
        org.junit.Assert.assertNotNull(slimTableFactory39);
        org.junit.Assert.assertNotNull(slimTableFactory40);
        org.junit.Assert.assertNull(wildcardClass42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi!" + "'", str44, "hi!");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hi!" + "'", str47, "hi!");
        org.junit.Assert.assertNotNull(strMap48);
        org.junit.Assert.assertNotNull(slimTableFactory49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNotNull(slimTableFactory51);
        org.junit.Assert.assertNotNull(slimTableFactory52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(strMap55);
        org.junit.Assert.assertNotNull(strMap59);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test08312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08312");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str6 = slimTableFactory4.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory4.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap7;
        java.lang.String str10 = slimTableFactory0.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap11 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap13 = slimTableFactory0.tableTypeArrays;
        java.lang.String str15 = slimTableFactory0.getFullTableName("");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test08313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08313");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass3 = slimTableFactory1.getTableType("");
        java.lang.String str5 = slimTableFactory1.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory1.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap6;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap8 = slimTableFactory0.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap9 = slimTableFactory0.tableTypeArrays;
        java.lang.String str11 = slimTableFactory0.getFullTableName("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass13 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str16 = slimTableFactory14.getFullTableName("hi!");
        java.lang.String str18 = slimTableFactory14.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory14.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory19.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap21 = slimTableFactory20.tableTypes;
        java.lang.String str23 = slimTableFactory20.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass26 = slimTableFactory24.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass29 = slimTableFactory27.getTableType("");
        java.lang.String str31 = slimTableFactory27.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory32 = slimTableFactory27.copy();
        boolean boolean34 = slimTableFactory27.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap35 = slimTableFactory27.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap36 = slimTableFactory27.tableTypeArrays;
        slimTableFactory24.tableTypeArrays = strMap36;
        slimTableFactory20.tableTypeArrays = strMap36;
        java.util.Map<java.lang.String, java.lang.String> strMap39 = slimTableFactory20.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory40 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory41 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass43 = slimTableFactory41.getTableType("");
        java.lang.String str45 = slimTableFactory41.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap46 = slimTableFactory41.tableTypeArrays;
        slimTableFactory40.tableTypeArrays = strMap46;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory48 = slimTableFactory40.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory49 = slimTableFactory48.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = slimTableFactory49.tableTypeArrays;
        java.lang.String str52 = slimTableFactory49.makeTableType("hi!");
        java.lang.String str54 = slimTableFactory49.getFullTableName("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass56 = slimTableFactory49.getTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap57 = slimTableFactory49.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory58 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str60 = slimTableFactory58.getFullTableName("hi!");
        java.lang.String str62 = slimTableFactory58.makeTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap63 = slimTableFactory58.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory64 = slimTableFactory58.copy();
        java.lang.String str66 = slimTableFactory58.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap67 = slimTableFactory58.tableTypeArrays;
        slimTableFactory49.tableTypeArrays = strMap67;
        slimTableFactory20.tableTypeArrays = strMap67;
        slimTableFactory0.tableTypeArrays = strMap67;
        boolean boolean72 = slimTableFactory0.hasColon("");
        java.lang.String str74 = slimTableFactory0.makeTableType("");
        boolean boolean76 = slimTableFactory0.hasColon("");
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(slimTableFactory19);
        org.junit.Assert.assertNotNull(slimTableFactory20);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertNull(wildcardClass26);
        org.junit.Assert.assertNull(wildcardClass29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(slimTableFactory32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNull(wildcardClass43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(strMap46);
        org.junit.Assert.assertNotNull(slimTableFactory48);
        org.junit.Assert.assertNotNull(slimTableFactory49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "hi!" + "'", str52, "hi!");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!");
        org.junit.Assert.assertNull(wildcardClass56);
        org.junit.Assert.assertNotNull(strMap57);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "hi!" + "'", str60, "hi!");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(strMap63);
        org.junit.Assert.assertNotNull(slimTableFactory64);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(strMap67);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test08314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08314");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap5 = slimTableFactory4.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory4.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory6.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory6.tableTypeArrays;
        boolean boolean10 = slimTableFactory6.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass12 = slimTableFactory6.getTableType("");
        java.lang.String str14 = slimTableFactory6.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap15 = slimTableFactory6.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass17 = slimTableFactory6.getTableType("hi!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNull(wildcardClass17);
    }

    @Test
    public void test08315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08315");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap5 = slimTableFactory4.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory4.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory6.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory6.copy();
        boolean boolean10 = slimTableFactory6.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory6.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap12 = slimTableFactory11.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str15 = slimTableFactory13.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory13.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = slimTableFactory13.copy();
        boolean boolean19 = slimTableFactory13.hasColon("hi!");
        java.lang.String str21 = slimTableFactory13.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass25 = slimTableFactory23.getTableType("");
        java.lang.String str27 = slimTableFactory23.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap28 = slimTableFactory23.tableTypeArrays;
        slimTableFactory22.tableTypeArrays = strMap28;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory30 = slimTableFactory22.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory31 = slimTableFactory30.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap32 = slimTableFactory31.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory33 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass35 = slimTableFactory33.getTableType("");
        java.lang.String str37 = slimTableFactory33.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory38 = slimTableFactory33.copy();
        boolean boolean40 = slimTableFactory33.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap41 = slimTableFactory33.tableTypeArrays;
        slimTableFactory31.tableTypeArrays = strMap41;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory43 = slimTableFactory31.copy();
        java.lang.String str45 = slimTableFactory43.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory46 = slimTableFactory43.copy();
        java.lang.String str48 = slimTableFactory43.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory49 = slimTableFactory43.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory50 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory51 = slimTableFactory50.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory52 = slimTableFactory51.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory53 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass55 = slimTableFactory53.getTableType("");
        java.lang.String str57 = slimTableFactory53.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap58 = slimTableFactory53.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap59 = slimTableFactory53.tableTypeArrays;
        java.lang.String str61 = slimTableFactory53.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory62 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory63 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass65 = slimTableFactory63.getTableType("");
        java.lang.String str67 = slimTableFactory63.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap68 = slimTableFactory63.tableTypeArrays;
        slimTableFactory62.tableTypeArrays = strMap68;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory70 = slimTableFactory62.copy();
        java.lang.String str72 = slimTableFactory62.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap73 = slimTableFactory62.tableTypeArrays;
        slimTableFactory53.tableTypeArrays = strMap73;
        slimTableFactory51.tableTypeArrays = strMap73;
        java.lang.String str77 = slimTableFactory51.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory78 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory79 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass81 = slimTableFactory79.getTableType("");
        java.lang.String str83 = slimTableFactory79.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap84 = slimTableFactory79.tableTypeArrays;
        slimTableFactory78.tableTypeArrays = strMap84;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory86 = slimTableFactory78.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap87 = slimTableFactory78.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory88 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str90 = slimTableFactory88.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap91 = slimTableFactory88.tableTypeArrays;
        java.lang.String str93 = slimTableFactory88.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap94 = slimTableFactory88.tableTypeArrays;
        slimTableFactory78.tableTypeArrays = strMap94;
        slimTableFactory51.tableTypeArrays = strMap94;
        slimTableFactory49.tableTypeArrays = strMap94;
        slimTableFactory13.tableTypeArrays = strMap94;
        slimTableFactory11.tableTypeArrays = strMap94;
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(slimTableFactory17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertNull(wildcardClass25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNotNull(slimTableFactory30);
        org.junit.Assert.assertNotNull(slimTableFactory31);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNull(wildcardClass35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(slimTableFactory38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertNotNull(slimTableFactory43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory46);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "hi!" + "'", str48, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory49);
        org.junit.Assert.assertNotNull(slimTableFactory51);
        org.junit.Assert.assertNotNull(slimTableFactory52);
        org.junit.Assert.assertNull(wildcardClass55);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(strMap58);
        org.junit.Assert.assertNotNull(strMap59);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "hi!" + "'", str61, "hi!");
        org.junit.Assert.assertNull(wildcardClass65);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(strMap68);
        org.junit.Assert.assertNotNull(slimTableFactory70);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "hi!" + "'", str72, "hi!");
        org.junit.Assert.assertNotNull(strMap73);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "hi!" + "'", str77, "hi!");
        org.junit.Assert.assertNull(wildcardClass81);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertNotNull(strMap84);
        org.junit.Assert.assertNotNull(slimTableFactory86);
        org.junit.Assert.assertNotNull(strMap87);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "hi!" + "'", str90, "hi!");
        org.junit.Assert.assertNotNull(strMap91);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "" + "'", str93, "");
        org.junit.Assert.assertNotNull(strMap94);
    }

    @Test
    public void test08316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08316");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass3 = slimTableFactory1.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap4 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str7 = slimTableFactory5.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory5.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory5.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap10 = slimTableFactory9.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory9.copy();
        java.lang.String str13 = slimTableFactory11.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory11.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap15 = slimTableFactory11.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap15;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = slimTableFactory1.copy();
        boolean boolean19 = slimTableFactory17.hasColon("hi!");
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(slimTableFactory17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test08317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08317");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.lang.String str4 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory0.copy();
        boolean boolean7 = slimTableFactory0.hasColon("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass9 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap11 = slimTableFactory0.tableTypes;
        java.lang.String str13 = slimTableFactory0.makeTableType("");
        boolean boolean15 = slimTableFactory0.hasColon("hi!");
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test08318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08318");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass3 = slimTableFactory1.getTableType("");
        java.lang.String str5 = slimTableFactory1.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory1.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap6;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap8 = slimTableFactory0.tableTypes;
        boolean boolean10 = slimTableFactory0.hasColon("hi!");
        java.lang.String str12 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass15 = slimTableFactory13.getTableType("");
        java.lang.String str17 = slimTableFactory13.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory13.copy();
        java.lang.String str20 = slimTableFactory13.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap21 = slimTableFactory13.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap22 = slimTableFactory13.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = slimTableFactory13.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass25 = slimTableFactory13.getTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass27 = slimTableFactory13.getTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap28 = slimTableFactory13.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory29 = slimTableFactory13.copy();
        java.lang.String str31 = slimTableFactory13.getFullTableName("");
        java.lang.String str33 = slimTableFactory13.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap34 = slimTableFactory13.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap34;
        java.util.Map<java.lang.String, java.lang.String> strMap36 = slimTableFactory0.tableTypeArrays;
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(slimTableFactory18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(slimTableFactory23);
        org.junit.Assert.assertNull(wildcardClass25);
        org.junit.Assert.assertNull(wildcardClass27);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNotNull(slimTableFactory29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNotNull(strMap36);
    }

    @Test
    public void test08319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08319");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str6 = slimTableFactory4.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory4.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap7;
        java.lang.String str10 = slimTableFactory0.makeTableType("hi!");
        boolean boolean12 = slimTableFactory0.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory13.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap15 = slimTableFactory13.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory13.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = slimTableFactory16.copy();
        fitnesse.testsystems.slim.Table table18 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable19 = slimTableFactory16.parseDefineTableTypeTable(table18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(slimTableFactory13);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertNotNull(slimTableFactory17);
    }

    @Test
    public void test08320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08320");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.lang.String str4 = slimTableFactory0.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap5 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory0.copy();
        java.lang.String str8 = slimTableFactory0.makeTableType("hi!");
        boolean boolean10 = slimTableFactory0.hasColon("hi!");
        java.lang.String str12 = slimTableFactory0.makeTableType("hi!");
        fitnesse.testsystems.slim.Table table13 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory0.parseDefineTableTypeRow(table13, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
    }

    @Test
    public void test08321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08321");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory0.copy();
        boolean boolean6 = slimTableFactory0.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap9 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str12 = slimTableFactory10.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap13 = slimTableFactory10.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str16 = slimTableFactory14.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap17 = slimTableFactory14.tableTypeArrays;
        slimTableFactory10.tableTypeArrays = strMap17;
        java.lang.String str20 = slimTableFactory10.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = slimTableFactory10.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap22 = slimTableFactory10.tableTypes;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap23 = slimTableFactory10.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap24 = slimTableFactory10.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap24;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = slimTableFactory0.copy();
        java.lang.String str28 = slimTableFactory26.getFullTableName("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass30 = slimTableFactory26.getTableType("hi!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(slimTableFactory21);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNotNull(slimTableFactory26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertNull(wildcardClass30);
    }

    @Test
    public void test08322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08322");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.lang.String str4 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory0.copy();
        boolean boolean7 = slimTableFactory0.hasColon("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass9 = slimTableFactory0.getTableType("");
        java.lang.String str11 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap13 = slimTableFactory12.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass15 = slimTableFactory12.getTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass17 = slimTableFactory12.getTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass19 = slimTableFactory12.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory12.copy();
        boolean boolean22 = slimTableFactory12.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = slimTableFactory12.copy();
        fitnesse.testsystems.slim.Table table24 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable25 = slimTableFactory12.parseDefineTableTypeTable(table24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertNull(wildcardClass17);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(slimTableFactory20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(slimTableFactory23);
    }

    @Test
    public void test08323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08323");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass3 = slimTableFactory1.getTableType("");
        java.lang.String str5 = slimTableFactory1.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory1.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap6;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory8.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory8.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory8.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap13 = slimTableFactory8.tableTypeArrays;
        java.lang.String str15 = slimTableFactory8.makeTableType("hi!");
        java.lang.String str17 = slimTableFactory8.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap18 = slimTableFactory8.tableTypeArrays;
        java.lang.String str20 = slimTableFactory8.makeTableType("");
        boolean boolean22 = slimTableFactory8.hasColon("hi!");
        fitnesse.testsystems.slim.Table table23 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable24 = slimTableFactory8.parseDefineTableTypeTable(table23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test08324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08324");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        boolean boolean5 = slimTableFactory0.hasColon("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory0.getTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass9 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory0.copy();
        boolean boolean12 = slimTableFactory0.hasColon("hi!");
        java.lang.String str14 = slimTableFactory0.getFullTableName("hi!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
    }

    @Test
    public void test08325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08325");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass3 = slimTableFactory1.getTableType("");
        java.lang.String str5 = slimTableFactory1.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory1.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap6;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap8 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str11 = slimTableFactory9.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap12 = slimTableFactory9.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory9.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap14 = slimTableFactory13.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory13.copy();
        java.lang.String str17 = slimTableFactory15.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap18 = slimTableFactory15.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap18;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory0.copy();
        java.lang.String str22 = slimTableFactory0.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str25 = slimTableFactory23.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap26 = slimTableFactory23.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = slimTableFactory23.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = slimTableFactory23.copy();
        java.lang.String str30 = slimTableFactory28.makeTableType("hi!");
        boolean boolean32 = slimTableFactory28.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap33 = slimTableFactory28.tableTypes;
        java.lang.String str35 = slimTableFactory28.makeTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass37 = slimTableFactory28.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap38 = slimTableFactory28.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap38;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass41 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap42 = slimTableFactory0.tableTypes;
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(slimTableFactory13);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(slimTableFactory20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(slimTableFactory27);
        org.junit.Assert.assertNotNull(slimTableFactory28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNull(wildcardClass37);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertNull(wildcardClass41);
        org.junit.Assert.assertNotNull(strMap42);
    }

    @Test
    public void test08326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08326");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str6 = slimTableFactory4.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory4.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap7;
        java.lang.String str10 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory0.copy();
        java.lang.String str13 = slimTableFactory11.makeTableType("hi!");
        java.lang.String str15 = slimTableFactory11.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory11.copy();
        boolean boolean18 = slimTableFactory11.hasColon("");
        fitnesse.testsystems.slim.Table table19 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext21 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable22 = slimTableFactory11.makeSlimTable(table19, "", slimTestContext21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test08327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08327");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory2 = slimTableFactory0.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass4 = slimTableFactory0.getTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass6 = slimTableFactory0.getTableType("hi!");
        java.lang.String str8 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap10 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.Table table11 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext13 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable14 = slimTableFactory0.makeSlimTable(table11, "hi!", slimTestContext13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(slimTableFactory2);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(strMap10);
    }

    @Test
    public void test08328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08328");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str6 = slimTableFactory4.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory4.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap7;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass10 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory0.copy();
        java.lang.String str13 = slimTableFactory0.getFullTableName("hi!");
        java.lang.String str15 = slimTableFactory0.makeTableType("");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test08329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08329");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.lang.String str4 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory0.copy();
        boolean boolean7 = slimTableFactory0.hasColon("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass9 = slimTableFactory0.getTableType("");
        java.lang.String str11 = slimTableFactory0.makeTableType("");
        java.lang.String str13 = slimTableFactory0.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.Table table15 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext17 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable18 = slimTableFactory0.makeSlimTable(table15, "", slimTestContext17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory14);
    }

    @Test
    public void test08330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08330");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        boolean boolean4 = slimTableFactory0.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap5 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory0.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass9 = slimTableFactory0.getTableType("hi!");
        boolean boolean11 = slimTableFactory0.hasColon("");
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test08331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08331");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.lang.String str4 = slimTableFactory0.makeTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap5 = slimTableFactory0.tableTypes;
        java.lang.String str7 = slimTableFactory0.makeTableType("hi!");
        java.lang.String str9 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory0.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass12 = slimTableFactory0.getTableType("");
        java.lang.String str14 = slimTableFactory0.getFullTableName("hi!");
        boolean boolean16 = slimTableFactory0.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = slimTableFactory0.copy();
        java.lang.String str19 = slimTableFactory17.makeTableType("");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(slimTableFactory17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
    }

    @Test
    public void test08332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08332");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass3 = slimTableFactory1.getTableType("hi!");
        boolean boolean5 = slimTableFactory1.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory1.copy();
        boolean boolean8 = slimTableFactory6.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap9 = slimTableFactory6.tableTypes;
        boolean boolean11 = slimTableFactory6.hasColon("");
        java.lang.String str13 = slimTableFactory6.makeTableType("hi!");
        fitnesse.testsystems.slim.Table table14 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable15 = slimTableFactory6.parseDefineTableTypeTable(table14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
    }

    @Test
    public void test08333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08333");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory0.copy();
        boolean boolean6 = slimTableFactory0.hasColon("hi!");
        boolean boolean8 = slimTableFactory0.hasColon("");
        java.lang.String str10 = slimTableFactory0.makeTableType("");
        java.lang.String str12 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory0.copy();
        boolean boolean16 = slimTableFactory14.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap17 = slimTableFactory14.tableTypes;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap18 = slimTableFactory14.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass20 = slimTableFactory14.getTableType("hi!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(slimTableFactory13);
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNull(wildcardClass20);
    }

    @Test
    public void test08334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08334");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass3 = slimTableFactory1.getTableType("");
        java.lang.String str5 = slimTableFactory1.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory1.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap6;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory8.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory11.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory12.getTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass16 = slimTableFactory12.getTableType("hi!");
        boolean boolean18 = slimTableFactory12.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap19 = slimTableFactory12.tableTypeArrays;
        slimTableFactory10.tableTypeArrays = strMap19;
        java.lang.String str22 = slimTableFactory10.getFullTableName("");
        java.lang.String str24 = slimTableFactory10.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap25 = slimTableFactory10.tableTypes;
        java.lang.String str27 = slimTableFactory10.getFullTableName("");
        boolean boolean29 = slimTableFactory10.hasColon("");
        fitnesse.testsystems.slim.Table table30 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext32 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable33 = slimTableFactory10.makeSlimTable(table30, "hi!", slimTestContext32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertNull(wildcardClass16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test08335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08335");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.lang.String str4 = slimTableFactory0.makeTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap5 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory0.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass8 = slimTableFactory0.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap9 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str12 = slimTableFactory10.getFullTableName("hi!");
        java.lang.String str14 = slimTableFactory10.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory10.copy();
        java.lang.String str17 = slimTableFactory10.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str20 = slimTableFactory18.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap21 = slimTableFactory18.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = slimTableFactory18.copy();
        boolean boolean24 = slimTableFactory18.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap25 = slimTableFactory18.tableTypeArrays;
        slimTableFactory10.tableTypeArrays = strMap25;
        slimTableFactory0.tableTypeArrays = strMap25;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = slimTableFactory0.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass30 = slimTableFactory0.getTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass32 = slimTableFactory0.getTableType("");
        java.lang.String str34 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory35 = slimTableFactory0.copy();
        java.lang.String str37 = slimTableFactory0.makeTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass39 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.Table table40 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext42 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable43 = slimTableFactory0.makeSlimTable(table40, "hi!", slimTestContext42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(slimTableFactory22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(slimTableFactory28);
        org.junit.Assert.assertNull(wildcardClass30);
        org.junit.Assert.assertNull(wildcardClass32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(slimTableFactory35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNull(wildcardClass39);
    }

    @Test
    public void test08336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08336");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass3 = slimTableFactory1.getTableType("hi!");
        java.lang.String str5 = slimTableFactory1.makeTableType("hi!");
        java.lang.String str7 = slimTableFactory1.makeTableType("hi!");
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
    }

    @Test
    public void test08337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08337");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap5 = slimTableFactory4.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory4.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory6.copy();
        java.lang.String str9 = slimTableFactory7.makeTableType("hi!");
        boolean boolean11 = slimTableFactory7.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap12 = slimTableFactory7.tableTypes;
        java.lang.String str14 = slimTableFactory7.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory7.copy();
        boolean boolean17 = slimTableFactory15.hasColon("");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test08338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08338");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory0.copy();
        boolean boolean7 = slimTableFactory0.hasColon("");
        java.lang.String str9 = slimTableFactory0.getFullTableName("hi!");
        boolean boolean11 = slimTableFactory0.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory12.getTableType("");
        java.lang.String str16 = slimTableFactory12.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = slimTableFactory12.copy();
        boolean boolean19 = slimTableFactory12.hasColon("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass21 = slimTableFactory12.getTableType("");
        java.lang.String str23 = slimTableFactory12.makeTableType("");
        java.lang.String str25 = slimTableFactory12.makeTableType("hi!");
        java.lang.String str27 = slimTableFactory12.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass30 = slimTableFactory28.getTableType("");
        java.lang.String str32 = slimTableFactory28.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory33 = slimTableFactory28.copy();
        boolean boolean35 = slimTableFactory28.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap36 = slimTableFactory28.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap37 = slimTableFactory28.tableTypeArrays;
        slimTableFactory12.tableTypeArrays = strMap37;
        slimTableFactory0.tableTypeArrays = strMap37;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass41 = slimTableFactory0.getTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass43 = slimTableFactory0.getTableType("");
        java.lang.String str45 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap46 = slimTableFactory0.tableTypes;
        java.lang.Class<?> wildcardClass47 = strMap46.getClass();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(slimTableFactory17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(wildcardClass21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNull(wildcardClass30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(slimTableFactory33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNull(wildcardClass41);
        org.junit.Assert.assertNull(wildcardClass43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
        org.junit.Assert.assertNotNull(strMap46);
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test08339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08339");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str6 = slimTableFactory4.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory4.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap7;
        java.lang.String str10 = slimTableFactory0.makeTableType("");
        java.lang.String str12 = slimTableFactory0.makeTableType("hi!");
        java.lang.String str14 = slimTableFactory0.getFullTableName("hi!");
        boolean boolean16 = slimTableFactory0.hasColon("hi!");
        java.lang.String str18 = slimTableFactory0.getFullTableName("");
        java.lang.String str20 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str23 = slimTableFactory21.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap24 = slimTableFactory21.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str27 = slimTableFactory25.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap28 = slimTableFactory25.tableTypeArrays;
        slimTableFactory21.tableTypeArrays = strMap28;
        java.lang.String str31 = slimTableFactory21.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap32 = slimTableFactory21.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory33 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str35 = slimTableFactory33.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap36 = slimTableFactory33.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory37 = slimTableFactory33.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap38 = slimTableFactory37.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory39 = slimTableFactory37.copy();
        java.lang.String str41 = slimTableFactory39.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap42 = slimTableFactory39.tableTypeArrays;
        slimTableFactory21.tableTypeArrays = strMap42;
        java.util.Map<java.lang.String, java.lang.String> strMap44 = slimTableFactory21.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap44;
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(slimTableFactory37);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertNotNull(slimTableFactory39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertNotNull(strMap42);
        org.junit.Assert.assertNotNull(strMap44);
    }

    @Test
    public void test08340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08340");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass3 = slimTableFactory1.getTableType("");
        java.lang.String str5 = slimTableFactory1.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory1.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap6;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        boolean boolean11 = slimTableFactory8.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap12 = slimTableFactory8.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory8.getTableType("hi!");
        java.lang.String str16 = slimTableFactory8.getFullTableName("");
        java.lang.String str18 = slimTableFactory8.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory8.copy();
        java.lang.String str21 = slimTableFactory8.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap22 = slimTableFactory8.tableTypeArrays;
        java.lang.String str24 = slimTableFactory8.getFullTableName("");
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(slimTableFactory19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
    }

    @Test
    public void test08341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08341");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str6 = slimTableFactory4.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory4.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap7;
        java.lang.String str10 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory11.copy();
        java.lang.String str14 = slimTableFactory11.getFullTableName("");
        java.lang.String str16 = slimTableFactory11.getFullTableName("");
        java.lang.String str18 = slimTableFactory11.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap19 = slimTableFactory11.tableTypeArrays;
        java.lang.Class<?> wildcardClass20 = slimTableFactory11.getClass();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test08342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08342");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        boolean boolean2 = slimTableFactory0.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strMap3);
    }

    @Test
    public void test08343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08343");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap5 = slimTableFactory4.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory4.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory6.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory6.tableTypeArrays;
        boolean boolean10 = slimTableFactory6.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass12 = slimTableFactory6.getTableType("");
        java.lang.String str14 = slimTableFactory6.getFullTableName("");
        fitnesse.testsystems.slim.Table table15 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable16 = slimTableFactory6.parseDefineTableTypeTable(table15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test08344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08344");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.lang.String str4 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory0.copy();
        java.lang.String str7 = slimTableFactory0.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str10 = slimTableFactory8.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory8.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str14 = slimTableFactory12.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap15 = slimTableFactory12.tableTypeArrays;
        slimTableFactory8.tableTypeArrays = strMap15;
        java.lang.String str18 = slimTableFactory8.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str21 = slimTableFactory19.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap22 = slimTableFactory19.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str25 = slimTableFactory23.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap26 = slimTableFactory23.tableTypeArrays;
        slimTableFactory19.tableTypeArrays = strMap26;
        slimTableFactory8.tableTypeArrays = strMap26;
        slimTableFactory0.tableTypeArrays = strMap26;
        java.util.Map<java.lang.String, java.lang.String> strMap30 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap31 = slimTableFactory0.tableTypeArrays;
        java.lang.Class<?> wildcardClass32 = strMap31.getClass();
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test08345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08345");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.lang.String str4 = slimTableFactory0.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap5 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory0.tableTypeArrays;
        java.lang.String str8 = slimTableFactory0.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass12 = slimTableFactory10.getTableType("");
        java.lang.String str14 = slimTableFactory10.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap15 = slimTableFactory10.tableTypeArrays;
        slimTableFactory9.tableTypeArrays = strMap15;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = slimTableFactory9.copy();
        java.lang.String str19 = slimTableFactory9.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap20 = slimTableFactory9.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap20;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap22 = slimTableFactory0.tableTypes;
        java.lang.String str24 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.Table table26 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory0.parseDefineTableTypeRow(table26, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(slimTableFactory17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(slimTableFactory25);
    }

    @Test
    public void test08346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08346");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory0.copy();
        boolean boolean6 = slimTableFactory0.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory0.tableTypeArrays;
        java.lang.String str9 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass12 = slimTableFactory10.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass15 = slimTableFactory13.getTableType("");
        java.lang.String str17 = slimTableFactory13.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory13.copy();
        boolean boolean20 = slimTableFactory13.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap21 = slimTableFactory13.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap22 = slimTableFactory13.tableTypeArrays;
        slimTableFactory10.tableTypeArrays = strMap22;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str26 = slimTableFactory24.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap27 = slimTableFactory24.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = slimTableFactory24.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap29 = slimTableFactory28.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory30 = slimTableFactory28.copy();
        java.lang.String str32 = slimTableFactory30.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap33 = slimTableFactory30.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory34 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str36 = slimTableFactory34.getFullTableName("hi!");
        java.lang.String str38 = slimTableFactory34.makeTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap39 = slimTableFactory34.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory40 = slimTableFactory34.copy();
        java.lang.String str42 = slimTableFactory34.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap43 = slimTableFactory34.tableTypeArrays;
        slimTableFactory30.tableTypeArrays = strMap43;
        slimTableFactory10.tableTypeArrays = strMap43;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap46 = slimTableFactory10.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass48 = slimTableFactory10.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory49 = slimTableFactory10.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap50 = slimTableFactory49.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap50;
        java.lang.String str53 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap54 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.Table table55 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable56 = slimTableFactory0.parseDefineTableTypeTable(table55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(slimTableFactory18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(slimTableFactory28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(slimTableFactory30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNotNull(slimTableFactory40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(strMap43);
        org.junit.Assert.assertNotNull(strMap46);
        org.junit.Assert.assertNull(wildcardClass48);
        org.junit.Assert.assertNotNull(slimTableFactory49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "hi!" + "'", str53, "hi!");
        org.junit.Assert.assertNotNull(strMap54);
    }

    @Test
    public void test08347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08347");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        boolean boolean4 = slimTableFactory0.hasColon("");
        boolean boolean6 = slimTableFactory0.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass8 = slimTableFactory0.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap10 = slimTableFactory0.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory0.tableTypeArrays;
        boolean boolean13 = slimTableFactory0.hasColon("");
        fitnesse.testsystems.slim.Table table14 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable15 = slimTableFactory0.parseDefineTableTypeTable(table14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test08348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08348");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory2 = slimTableFactory0.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass4 = slimTableFactory0.getTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass6 = slimTableFactory0.getTableType("hi!");
        java.lang.String str8 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.Table table10 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory0.parseDefineTableTypeRow(table10, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(slimTableFactory2);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(slimTableFactory9);
    }

    @Test
    public void test08349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08349");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass3 = slimTableFactory1.getTableType("");
        java.lang.String str5 = slimTableFactory1.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory1.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap6;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory9.tableTypeArrays;
        java.lang.String str12 = slimTableFactory9.makeTableType("hi!");
        boolean boolean14 = slimTableFactory9.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap15 = slimTableFactory9.tableTypeArrays;
        boolean boolean17 = slimTableFactory9.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory9.copy();
        java.lang.String str20 = slimTableFactory18.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str23 = slimTableFactory21.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap24 = slimTableFactory21.tableTypeArrays;
        java.lang.String str26 = slimTableFactory21.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass29 = slimTableFactory27.getTableType("");
        boolean boolean31 = slimTableFactory27.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap32 = slimTableFactory27.tableTypeArrays;
        slimTableFactory21.tableTypeArrays = strMap32;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory34 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory35 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass37 = slimTableFactory35.getTableType("");
        java.lang.String str39 = slimTableFactory35.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap40 = slimTableFactory35.tableTypeArrays;
        slimTableFactory34.tableTypeArrays = strMap40;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory42 = slimTableFactory34.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory43 = slimTableFactory42.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap44 = slimTableFactory43.tableTypeArrays;
        slimTableFactory21.tableTypeArrays = strMap44;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass47 = slimTableFactory21.getTableType("");
        java.lang.String str49 = slimTableFactory21.makeTableType("hi!");
        boolean boolean51 = slimTableFactory21.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap52 = slimTableFactory21.tableTypeArrays;
        slimTableFactory18.tableTypeArrays = strMap52;
        java.lang.Class<?> wildcardClass54 = slimTableFactory18.getClass();
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(slimTableFactory18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNull(wildcardClass29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNull(wildcardClass37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertNotNull(slimTableFactory42);
        org.junit.Assert.assertNotNull(slimTableFactory43);
        org.junit.Assert.assertNotNull(strMap44);
        org.junit.Assert.assertNull(wildcardClass47);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hi!" + "'", str49, "hi!");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(strMap52);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test08350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08350");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.lang.String str4 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory0.copy();
        boolean boolean7 = slimTableFactory0.hasColon("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass9 = slimTableFactory0.getTableType("");
        java.lang.String str11 = slimTableFactory0.makeTableType("");
        java.lang.String str13 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap15 = slimTableFactory14.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass17 = slimTableFactory14.getTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass19 = slimTableFactory14.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap20 = slimTableFactory14.tableTypeArrays;
        java.lang.String str22 = slimTableFactory14.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = slimTableFactory14.copy();
        fitnesse.testsystems.slim.Table table24 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable25 = slimTableFactory23.parseDefineTableTypeTable(table24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNull(wildcardClass17);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(slimTableFactory23);
    }

    @Test
    public void test08351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08351");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass3 = slimTableFactory1.getTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass5 = slimTableFactory1.getTableType("hi!");
        boolean boolean7 = slimTableFactory1.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory1.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass10 = slimTableFactory1.getTableType("hi!");
        java.lang.String str12 = slimTableFactory1.getFullTableName("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory1.getTableType("");
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(wildcardClass14);
    }

    @Test
    public void test08352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08352");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        boolean boolean4 = slimTableFactory0.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap6 = slimTableFactory5.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap7 = null;
        slimTableFactory5.tableTypeArrays = strMap7;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap9 = slimTableFactory5.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass12 = slimTableFactory10.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory10.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap14 = slimTableFactory10.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory10.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap16 = slimTableFactory15.tableTypes;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap17 = slimTableFactory15.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass20 = slimTableFactory18.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass23 = slimTableFactory21.getTableType("");
        java.lang.String str25 = slimTableFactory21.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = slimTableFactory21.copy();
        boolean boolean28 = slimTableFactory21.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap29 = slimTableFactory21.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap30 = slimTableFactory21.tableTypeArrays;
        slimTableFactory18.tableTypeArrays = strMap30;
        boolean boolean33 = slimTableFactory18.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap34 = slimTableFactory18.tableTypes;
        boolean boolean36 = slimTableFactory18.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory37 = slimTableFactory18.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory38 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory39 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass41 = slimTableFactory39.getTableType("");
        java.lang.String str43 = slimTableFactory39.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap44 = slimTableFactory39.tableTypeArrays;
        slimTableFactory38.tableTypeArrays = strMap44;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap46 = slimTableFactory38.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap47 = slimTableFactory38.tableTypeArrays;
        slimTableFactory18.tableTypeArrays = strMap47;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass50 = slimTableFactory18.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory51 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str53 = slimTableFactory51.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap54 = slimTableFactory51.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory55 = slimTableFactory51.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap56 = slimTableFactory55.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory57 = slimTableFactory55.copy();
        java.lang.String str59 = slimTableFactory57.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory60 = slimTableFactory57.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap61 = null;
        slimTableFactory60.tableTypeArrays = strMap61;
        boolean boolean64 = slimTableFactory60.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass66 = slimTableFactory60.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory67 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str69 = slimTableFactory67.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap70 = slimTableFactory67.tableTypeArrays;
        java.lang.String str72 = slimTableFactory67.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap73 = slimTableFactory67.tableTypeArrays;
        java.lang.String str75 = slimTableFactory67.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap76 = slimTableFactory67.tableTypeArrays;
        slimTableFactory60.tableTypeArrays = strMap76;
        slimTableFactory18.tableTypeArrays = strMap76;
        slimTableFactory15.tableTypeArrays = strMap76;
        slimTableFactory5.tableTypeArrays = strMap76;
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNotNull(slimTableFactory13);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNull(wildcardClass20);
        org.junit.Assert.assertNull(wildcardClass23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(slimTableFactory26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(slimTableFactory37);
        org.junit.Assert.assertNull(wildcardClass41);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(strMap44);
        org.junit.Assert.assertNotNull(strMap46);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNull(wildcardClass50);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "hi!" + "'", str53, "hi!");
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(slimTableFactory55);
        org.junit.Assert.assertNotNull(strMap56);
        org.junit.Assert.assertNotNull(slimTableFactory57);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "hi!" + "'", str59, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory60);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(wildcardClass66);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "hi!" + "'", str69, "hi!");
        org.junit.Assert.assertNotNull(strMap70);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(strMap73);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNotNull(strMap76);
    }

    @Test
    public void test08353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08353");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.lang.String str4 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory0.copy();
        java.lang.String str7 = slimTableFactory5.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap8 = slimTableFactory5.tableTypes;
        java.lang.String str10 = slimTableFactory5.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory12.getTableType("");
        java.lang.String str16 = slimTableFactory12.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap17 = slimTableFactory12.tableTypeArrays;
        slimTableFactory11.tableTypeArrays = strMap17;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory11.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap20 = slimTableFactory11.tableTypes;
        java.lang.String str22 = slimTableFactory11.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass26 = slimTableFactory24.getTableType("");
        java.lang.String str28 = slimTableFactory24.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap29 = slimTableFactory24.tableTypeArrays;
        slimTableFactory23.tableTypeArrays = strMap29;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory31 = slimTableFactory23.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory32 = slimTableFactory31.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = slimTableFactory32.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory34 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass36 = slimTableFactory34.getTableType("");
        java.lang.String str38 = slimTableFactory34.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory39 = slimTableFactory34.copy();
        boolean boolean41 = slimTableFactory34.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap42 = slimTableFactory34.tableTypeArrays;
        slimTableFactory32.tableTypeArrays = strMap42;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory44 = slimTableFactory32.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap45 = slimTableFactory44.tableTypeArrays;
        slimTableFactory11.tableTypeArrays = strMap45;
        slimTableFactory5.tableTypeArrays = strMap45;
        java.lang.String str49 = slimTableFactory5.getFullTableName("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass51 = slimTableFactory5.getTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass53 = slimTableFactory5.getTableType("");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(slimTableFactory19);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertNull(wildcardClass26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(slimTableFactory31);
        org.junit.Assert.assertNotNull(slimTableFactory32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(wildcardClass36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(slimTableFactory39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(strMap42);
        org.junit.Assert.assertNotNull(slimTableFactory44);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNull(wildcardClass51);
        org.junit.Assert.assertNull(wildcardClass53);
    }

    @Test
    public void test08354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08354");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass3 = slimTableFactory1.getTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass5 = slimTableFactory1.getTableType("hi!");
        boolean boolean7 = slimTableFactory1.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.Table table12 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable13 = slimTableFactory1.parseDefineTableTypeTable(table12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNotNull(strMap11);
    }

    @Test
    public void test08355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08355");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass3 = slimTableFactory1.getTableType("");
        java.lang.String str5 = slimTableFactory1.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory1.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap6;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory8.copy();
        boolean boolean12 = slimTableFactory10.hasColon("");
        java.lang.String str14 = slimTableFactory10.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory15.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap17 = slimTableFactory15.tableTypeArrays;
        java.lang.String str19 = slimTableFactory15.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap20 = slimTableFactory15.tableTypeArrays;
        slimTableFactory10.tableTypeArrays = strMap20;
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(strMap20);
    }

    @Test
    public void test08356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08356");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass5 = slimTableFactory3.getTableType("");
        java.lang.String str7 = slimTableFactory3.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory3.copy();
        boolean boolean10 = slimTableFactory3.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory3.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap12 = slimTableFactory3.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap12;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass15 = slimTableFactory0.getTableType("hi!");
        java.lang.Class<?> wildcardClass16 = slimTableFactory0.getClass();
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test08357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08357");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory2 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass5 = slimTableFactory3.getTableType("");
        java.lang.String str7 = slimTableFactory3.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory3.tableTypeArrays;
        slimTableFactory2.tableTypeArrays = strMap8;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory2.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory2.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap12 = slimTableFactory11.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap12;
        boolean boolean15 = slimTableFactory1.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap16 = slimTableFactory1.tableTypes;
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strMap16);
    }

    @Test
    public void test08358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08358");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.lang.String str4 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory0.copy();
        boolean boolean7 = slimTableFactory0.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap9 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap11 = slimTableFactory10.tableTypes;
        fitnesse.testsystems.slim.Table table12 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext14 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable15 = slimTableFactory10.makeSlimTable(table12, "hi!", slimTestContext14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNotNull(strMap11);
    }

    @Test
    public void test08359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08359");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str6 = slimTableFactory4.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory4.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap7;
        java.lang.String str10 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str13 = slimTableFactory11.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory11.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str17 = slimTableFactory15.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap18 = slimTableFactory15.tableTypeArrays;
        slimTableFactory11.tableTypeArrays = strMap18;
        slimTableFactory0.tableTypeArrays = strMap18;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str23 = slimTableFactory21.getFullTableName("hi!");
        java.lang.String str25 = slimTableFactory21.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = slimTableFactory21.copy();
        java.lang.String str28 = slimTableFactory21.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory29 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str31 = slimTableFactory29.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap32 = slimTableFactory29.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory33 = slimTableFactory29.copy();
        boolean boolean35 = slimTableFactory29.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap36 = slimTableFactory29.tableTypeArrays;
        slimTableFactory21.tableTypeArrays = strMap36;
        slimTableFactory0.tableTypeArrays = strMap36;
        java.lang.String str40 = slimTableFactory0.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory41 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap42 = slimTableFactory41.tableTypes;
        java.lang.String str44 = slimTableFactory41.makeTableType("");
        java.lang.Class<?> wildcardClass45 = slimTableFactory41.getClass();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(slimTableFactory26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(slimTableFactory33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "hi!" + "'", str40, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory41);
        org.junit.Assert.assertNotNull(strMap42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test08360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08360");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.lang.String str4 = slimTableFactory0.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap5 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory0.tableTypeArrays;
        java.lang.String str8 = slimTableFactory0.makeTableType("hi!");
        java.lang.String str10 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap11 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory12.getTableType("");
        java.lang.String str16 = slimTableFactory12.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = slimTableFactory12.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap18 = slimTableFactory17.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory17.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass21 = slimTableFactory19.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap22 = slimTableFactory19.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap22;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap24 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = slimTableFactory0.copy();
        java.lang.String str27 = slimTableFactory25.getFullTableName("");
        boolean boolean29 = slimTableFactory25.hasColon("");
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(slimTableFactory17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(slimTableFactory19);
        org.junit.Assert.assertNull(wildcardClass21);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNotNull(slimTableFactory25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test08361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08361");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass3 = slimTableFactory1.getTableType("");
        java.lang.String str5 = slimTableFactory1.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory1.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap6;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory9.tableTypeArrays;
        java.lang.String str12 = slimTableFactory9.makeTableType("hi!");
        java.lang.String str14 = slimTableFactory9.getFullTableName("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass16 = slimTableFactory9.getTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap17 = slimTableFactory9.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str20 = slimTableFactory18.getFullTableName("hi!");
        java.lang.String str22 = slimTableFactory18.makeTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap23 = slimTableFactory18.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = slimTableFactory18.copy();
        java.lang.String str26 = slimTableFactory18.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap27 = slimTableFactory18.tableTypeArrays;
        slimTableFactory9.tableTypeArrays = strMap27;
        java.lang.String str30 = slimTableFactory9.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap31 = slimTableFactory9.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap32 = slimTableFactory9.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory33 = slimTableFactory9.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap34 = null;
        slimTableFactory33.tableTypeArrays = strMap34;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap36 = slimTableFactory33.tableTypes;
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertNull(wildcardClass16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(slimTableFactory24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(slimTableFactory33);
        org.junit.Assert.assertNotNull(strMap36);
    }

    @Test
    public void test08362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08362");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.lang.String str4 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory0.copy();
        boolean boolean7 = slimTableFactory0.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory9.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass12 = slimTableFactory10.getTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory10.getTableType("hi!");
        boolean boolean16 = slimTableFactory10.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap17 = slimTableFactory10.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap17;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass22 = slimTableFactory20.getTableType("");
        java.lang.String str24 = slimTableFactory20.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap25 = slimTableFactory20.tableTypeArrays;
        slimTableFactory19.tableTypeArrays = strMap25;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = slimTableFactory19.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = slimTableFactory27.copy();
        boolean boolean30 = slimTableFactory27.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap31 = slimTableFactory27.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass33 = slimTableFactory27.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory34 = slimTableFactory27.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap35 = slimTableFactory34.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap35;
        java.lang.String str38 = slimTableFactory0.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory39 = slimTableFactory0.copy();
        boolean boolean41 = slimTableFactory0.hasColon("hi!");
        fitnesse.testsystems.slim.Table table42 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory0.parseDefineTableTypeRow(table42, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNull(wildcardClass22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(slimTableFactory27);
        org.junit.Assert.assertNotNull(slimTableFactory28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNull(wildcardClass33);
        org.junit.Assert.assertNotNull(slimTableFactory34);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test08363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08363");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.lang.String str3 = slimTableFactory0.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap4 = slimTableFactory0.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass6 = slimTableFactory0.getTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass8 = slimTableFactory0.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.Table table10 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable11 = slimTableFactory0.parseDefineTableTypeTable(table10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!" + "'", str3, "hi!");
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
    }

    @Test
    public void test08364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08364");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory2 = slimTableFactory0.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass4 = slimTableFactory0.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str7 = slimTableFactory5.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory5.tableTypeArrays;
        java.lang.String str10 = slimTableFactory5.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory5.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap11;
        java.util.Map<java.lang.String, java.lang.String> strMap13 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass16 = slimTableFactory14.getTableType("");
        boolean boolean18 = slimTableFactory14.hasColon("");
        boolean boolean20 = slimTableFactory14.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass22 = slimTableFactory14.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str25 = slimTableFactory23.getFullTableName("hi!");
        java.lang.String str27 = slimTableFactory23.makeTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap28 = slimTableFactory23.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory29 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass31 = slimTableFactory29.getTableType("");
        java.lang.String str33 = slimTableFactory29.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap34 = slimTableFactory29.tableTypeArrays;
        slimTableFactory23.tableTypeArrays = strMap34;
        slimTableFactory14.tableTypeArrays = strMap34;
        boolean boolean38 = slimTableFactory14.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap39 = slimTableFactory14.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap40 = slimTableFactory14.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap40;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory42 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str44 = slimTableFactory42.getFullTableName("hi!");
        java.lang.String str46 = slimTableFactory42.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap47 = null;
        slimTableFactory42.tableTypeArrays = strMap47;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory49 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str51 = slimTableFactory49.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap52 = slimTableFactory49.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory53 = slimTableFactory49.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap54 = slimTableFactory53.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory55 = slimTableFactory53.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap56 = slimTableFactory55.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap57 = slimTableFactory55.tableTypeArrays;
        slimTableFactory42.tableTypeArrays = strMap57;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory59 = slimTableFactory42.copy();
        java.lang.String str61 = slimTableFactory42.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory62 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass64 = slimTableFactory62.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap65 = slimTableFactory62.tableTypeArrays;
        slimTableFactory42.tableTypeArrays = strMap65;
        slimTableFactory0.tableTypeArrays = strMap65;
        java.lang.String str69 = slimTableFactory0.getFullTableName("hi!");
        java.lang.String str71 = slimTableFactory0.makeTableType("");
        java.lang.Class<?> wildcardClass72 = slimTableFactory0.getClass();
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(slimTableFactory2);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNull(wildcardClass16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(wildcardClass22);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi!" + "'", str44, "hi!");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "hi!" + "'", str51, "hi!");
        org.junit.Assert.assertNotNull(strMap52);
        org.junit.Assert.assertNotNull(slimTableFactory53);
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertNotNull(slimTableFactory55);
        org.junit.Assert.assertNotNull(strMap56);
        org.junit.Assert.assertNotNull(strMap57);
        org.junit.Assert.assertNotNull(slimTableFactory59);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNull(wildcardClass64);
        org.junit.Assert.assertNotNull(strMap65);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "hi!" + "'", str69, "hi!");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test08365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08365");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass3 = slimTableFactory1.getTableType("");
        java.lang.String str5 = slimTableFactory1.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory1.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap6;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory8.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory8.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory8.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap13 = slimTableFactory8.tableTypeArrays;
        java.lang.String str15 = slimTableFactory8.makeTableType("hi!");
        java.lang.String str17 = slimTableFactory8.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap18 = slimTableFactory8.tableTypeArrays;
        java.lang.String str20 = slimTableFactory8.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = slimTableFactory8.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = slimTableFactory8.copy();
        fitnesse.testsystems.slim.Table table23 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext25 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable26 = slimTableFactory8.makeSlimTable(table23, "", slimTestContext25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory21);
        org.junit.Assert.assertNotNull(slimTableFactory22);
    }

    @Test
    public void test08366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08366");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap4 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass8 = slimTableFactory6.getTableType("");
        java.lang.String str10 = slimTableFactory6.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory6.tableTypeArrays;
        slimTableFactory5.tableTypeArrays = strMap11;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory5.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory13.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory13.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory13.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap16;
        java.lang.String str19 = slimTableFactory0.getFullTableName("hi!");
        boolean boolean21 = slimTableFactory0.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap22 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.Table table23 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory0.parseDefineTableTypeRow(table23, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(slimTableFactory3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(slimTableFactory13);
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strMap22);
    }

    @Test
    public void test08367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08367");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.lang.String str4 = slimTableFactory0.makeTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap5 = slimTableFactory0.tableTypes;
        java.lang.String str7 = slimTableFactory0.makeTableType("hi!");
        java.lang.String str9 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap11 = slimTableFactory10.tableTypes;
        java.lang.String str13 = slimTableFactory10.makeTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass15 = slimTableFactory10.getTableType("");
        java.lang.String str17 = slimTableFactory10.makeTableType("");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test08368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08368");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.lang.String str3 = slimTableFactory0.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap4 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory5.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory6.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap8 = slimTableFactory7.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory7.copy();
        boolean boolean11 = slimTableFactory7.hasColon("hi!");
        boolean boolean13 = slimTableFactory7.hasColon("hi!");
        java.lang.String str15 = slimTableFactory7.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap16 = slimTableFactory7.tableTypes;
        boolean boolean18 = slimTableFactory7.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap19 = slimTableFactory7.tableTypes;
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!" + "'", str3, "hi!");
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strMap19);
    }

    @Test
    public void test08369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08369");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass3 = slimTableFactory1.getTableType("");
        java.lang.String str5 = slimTableFactory1.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory1.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap6;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory9.tableTypeArrays;
        java.lang.String str12 = slimTableFactory9.makeTableType("hi!");
        boolean boolean14 = slimTableFactory9.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap15 = slimTableFactory9.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = slimTableFactory16.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = slimTableFactory16.tableTypeArrays;
        slimTableFactory9.tableTypeArrays = strMap18;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap20 = slimTableFactory9.tableTypes;
        java.lang.String str22 = slimTableFactory9.makeTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass24 = slimTableFactory9.getTableType("hi!");
        java.lang.String str26 = slimTableFactory9.getFullTableName("");
        fitnesse.testsystems.slim.Table table27 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory9.parseDefineTableTypeRow(table27, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(slimTableFactory17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNull(wildcardClass24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
    }

    @Test
    public void test08370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08370");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        java.lang.String str5 = slimTableFactory0.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory0.tableTypeArrays;
        java.lang.String str8 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory0.copy();
        java.lang.String str11 = slimTableFactory0.getFullTableName("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass13 = slimTableFactory0.getTableType("");
        java.lang.String str15 = slimTableFactory0.makeTableType("hi!");
        fitnesse.testsystems.slim.Table table16 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext18 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable19 = slimTableFactory0.makeSlimTable(table16, "hi!", slimTestContext18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
    }

    @Test
    public void test08371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08371");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory0.copy();
        boolean boolean6 = slimTableFactory0.hasColon("hi!");
        java.lang.String str8 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap9 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap10 = slimTableFactory0.tableTypes;
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
    }

    @Test
    public void test08372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08372");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.lang.String str3 = slimTableFactory0.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap4 = slimTableFactory0.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass6 = slimTableFactory0.getTableType("");
        boolean boolean8 = slimTableFactory0.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory9.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap11 = slimTableFactory10.tableTypes;
        java.lang.String str13 = slimTableFactory10.makeTableType("hi!");
        fitnesse.testsystems.slim.Table table14 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable15 = slimTableFactory10.parseDefineTableTypeTable(table14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!" + "'", str3, "hi!");
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
    }

    @Test
    public void test08373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08373");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass3 = slimTableFactory1.getTableType("");
        java.lang.String str5 = slimTableFactory1.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory1.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap6;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory9.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory9.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap12 = slimTableFactory9.tableTypeArrays;
        java.lang.String str14 = slimTableFactory9.makeTableType("hi!");
        fitnesse.testsystems.slim.Table table15 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext17 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable18 = slimTableFactory9.makeSlimTable(table15, "hi!", slimTestContext17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
    }

    @Test
    public void test08374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08374");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str6 = slimTableFactory4.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory4.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap7;
        java.lang.String str10 = slimTableFactory0.makeTableType("");
        java.lang.String str12 = slimTableFactory0.makeTableType("hi!");
        boolean boolean14 = slimTableFactory0.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap15 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass19 = slimTableFactory17.getTableType("");
        java.lang.String str21 = slimTableFactory17.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap22 = slimTableFactory17.tableTypeArrays;
        slimTableFactory16.tableTypeArrays = strMap22;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = slimTableFactory16.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = slimTableFactory16.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass27 = slimTableFactory25.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap28 = slimTableFactory25.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory29 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str31 = slimTableFactory29.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap32 = slimTableFactory29.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory33 = slimTableFactory29.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap34 = slimTableFactory33.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory35 = slimTableFactory33.copy();
        java.lang.String str37 = slimTableFactory35.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory38 = slimTableFactory35.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap39 = slimTableFactory35.tableTypeArrays;
        slimTableFactory25.tableTypeArrays = strMap39;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap41 = slimTableFactory25.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap42 = slimTableFactory25.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap42;
        boolean boolean45 = slimTableFactory0.hasColon("");
        java.lang.String str47 = slimTableFactory0.getFullTableName("hi!");
        boolean boolean49 = slimTableFactory0.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap50 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.Table table51 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory0.parseDefineTableTypeRow(table51, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(slimTableFactory24);
        org.junit.Assert.assertNotNull(slimTableFactory25);
        org.junit.Assert.assertNull(wildcardClass27);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(slimTableFactory33);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNotNull(slimTableFactory35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory38);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertNotNull(strMap42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hi!" + "'", str47, "hi!");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(strMap50);
    }

    @Test
    public void test08375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08375");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap5 = slimTableFactory4.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory4.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory6.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory6.tableTypeArrays;
        java.lang.String str10 = slimTableFactory6.getFullTableName("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass12 = slimTableFactory6.getTableType("hi!");
        boolean boolean14 = slimTableFactory6.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str17 = slimTableFactory15.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap18 = slimTableFactory15.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory15.copy();
        boolean boolean21 = slimTableFactory15.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap22 = slimTableFactory15.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap23 = slimTableFactory15.tableTypeArrays;
        slimTableFactory6.tableTypeArrays = strMap23;
        boolean boolean26 = slimTableFactory6.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = slimTableFactory6.copy();
        java.lang.String str29 = slimTableFactory6.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory30 = slimTableFactory6.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass32 = slimTableFactory30.getTableType("");
        fitnesse.testsystems.slim.Table table33 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext35 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable36 = slimTableFactory30.makeSlimTable(table33, "hi!", slimTestContext35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(slimTableFactory19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(slimTableFactory27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(slimTableFactory30);
        org.junit.Assert.assertNull(wildcardClass32);
    }

    @Test
    public void test08376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08376");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass3 = slimTableFactory1.getTableType("");
        java.lang.String str5 = slimTableFactory1.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory1.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap6;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap8 = slimTableFactory0.tableTypes;
        boolean boolean10 = slimTableFactory0.hasColon("hi!");
        java.lang.String str12 = slimTableFactory0.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap13 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str16 = slimTableFactory14.getFullTableName("hi!");
        java.lang.String str18 = slimTableFactory14.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory14.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory19.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap21 = slimTableFactory20.tableTypes;
        java.lang.String str23 = slimTableFactory20.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass26 = slimTableFactory24.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass29 = slimTableFactory27.getTableType("");
        java.lang.String str31 = slimTableFactory27.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory32 = slimTableFactory27.copy();
        boolean boolean34 = slimTableFactory27.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap35 = slimTableFactory27.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap36 = slimTableFactory27.tableTypeArrays;
        slimTableFactory24.tableTypeArrays = strMap36;
        slimTableFactory20.tableTypeArrays = strMap36;
        java.util.Map<java.lang.String, java.lang.String> strMap39 = slimTableFactory20.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap39;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory41 = slimTableFactory0.copy();
        java.lang.String str43 = slimTableFactory0.makeTableType("");
        java.lang.Class<?> wildcardClass44 = slimTableFactory0.getClass();
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(slimTableFactory19);
        org.junit.Assert.assertNotNull(slimTableFactory20);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertNull(wildcardClass26);
        org.junit.Assert.assertNull(wildcardClass29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(slimTableFactory32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNotNull(slimTableFactory41);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test08377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08377");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str6 = slimTableFactory4.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory4.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap7;
        java.lang.String str10 = slimTableFactory0.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str14 = slimTableFactory12.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap15 = slimTableFactory12.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory12.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap17 = slimTableFactory16.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory16.copy();
        java.lang.String str20 = slimTableFactory18.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap21 = slimTableFactory18.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap21;
        java.lang.String str24 = slimTableFactory0.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap25 = slimTableFactory0.tableTypeArrays;
        java.lang.String str27 = slimTableFactory0.getFullTableName("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass29 = slimTableFactory0.getTableType("hi!");
        java.lang.String str31 = slimTableFactory0.getFullTableName("hi!");
        java.lang.String str33 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory34 = slimTableFactory0.copy();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(slimTableFactory18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNull(wildcardClass29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(slimTableFactory34);
    }

    @Test
    public void test08378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08378");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str6 = slimTableFactory4.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory4.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap7;
        java.lang.String str10 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap12 = slimTableFactory0.tableTypes;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap13 = slimTableFactory0.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass15 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory17.copy();
        java.lang.String str20 = slimTableFactory17.getFullTableName("hi!");
        fitnesse.testsystems.slim.Table table21 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable22 = slimTableFactory17.parseDefineTableTypeTable(table21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(slimTableFactory17);
        org.junit.Assert.assertNotNull(slimTableFactory18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
    }

    @Test
    public void test08379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08379");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass3 = slimTableFactory1.getTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass5 = slimTableFactory1.getTableType("hi!");
        boolean boolean7 = slimTableFactory1.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory1.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass12 = slimTableFactory1.getTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory1.getTableType("hi!");
        java.lang.String str16 = slimTableFactory1.makeTableType("hi!");
        java.lang.String str18 = slimTableFactory1.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap19 = slimTableFactory1.tableTypes;
        boolean boolean21 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap22 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass25 = slimTableFactory23.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass28 = slimTableFactory26.getTableType("");
        java.lang.String str30 = slimTableFactory26.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory31 = slimTableFactory26.copy();
        boolean boolean33 = slimTableFactory26.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap34 = slimTableFactory26.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap35 = slimTableFactory26.tableTypeArrays;
        slimTableFactory23.tableTypeArrays = strMap35;
        boolean boolean38 = slimTableFactory23.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap39 = slimTableFactory23.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass41 = slimTableFactory23.getTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass43 = slimTableFactory23.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory44 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass46 = slimTableFactory44.getTableType("");
        java.lang.String str48 = slimTableFactory44.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory49 = slimTableFactory44.copy();
        boolean boolean51 = slimTableFactory44.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap52 = slimTableFactory44.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap53 = slimTableFactory44.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory54 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass56 = slimTableFactory54.getTableType("");
        java.lang.String str58 = slimTableFactory54.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap59 = slimTableFactory54.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap60 = slimTableFactory54.tableTypeArrays;
        slimTableFactory44.tableTypeArrays = strMap60;
        slimTableFactory23.tableTypeArrays = strMap60;
        slimTableFactory1.tableTypeArrays = strMap60;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory64 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory65 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory66 = slimTableFactory1.copy();
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNull(wildcardClass25);
        org.junit.Assert.assertNull(wildcardClass28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(slimTableFactory31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNull(wildcardClass41);
        org.junit.Assert.assertNull(wildcardClass43);
        org.junit.Assert.assertNull(wildcardClass46);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(slimTableFactory49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(strMap52);
        org.junit.Assert.assertNotNull(strMap53);
        org.junit.Assert.assertNull(wildcardClass56);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(strMap59);
        org.junit.Assert.assertNotNull(strMap60);
        org.junit.Assert.assertNotNull(slimTableFactory64);
        org.junit.Assert.assertNotNull(slimTableFactory65);
        org.junit.Assert.assertNotNull(slimTableFactory66);
    }

    @Test
    public void test08380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08380");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap5 = slimTableFactory4.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory4.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory6.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory6.tableTypeArrays;
        java.lang.String str10 = slimTableFactory6.getFullTableName("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass12 = slimTableFactory6.getTableType("hi!");
        boolean boolean14 = slimTableFactory6.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str17 = slimTableFactory15.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap18 = slimTableFactory15.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory15.copy();
        boolean boolean21 = slimTableFactory15.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap22 = slimTableFactory15.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap23 = slimTableFactory15.tableTypeArrays;
        slimTableFactory6.tableTypeArrays = strMap23;
        boolean boolean26 = slimTableFactory6.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = slimTableFactory6.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str30 = slimTableFactory28.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap31 = slimTableFactory28.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory32 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str34 = slimTableFactory32.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap35 = slimTableFactory32.tableTypeArrays;
        slimTableFactory28.tableTypeArrays = strMap35;
        java.lang.String str38 = slimTableFactory28.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory39 = slimTableFactory28.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap40 = slimTableFactory28.tableTypes;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap41 = slimTableFactory28.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap42 = slimTableFactory28.tableTypeArrays;
        slimTableFactory6.tableTypeArrays = strMap42;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory44 = slimTableFactory6.copy();
        java.lang.String str46 = slimTableFactory6.makeTableType("hi!");
        boolean boolean48 = slimTableFactory6.hasColon("");
        fitnesse.testsystems.slim.Table table49 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext51 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable52 = slimTableFactory6.makeSlimTable(table49, "hi!", slimTestContext51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(slimTableFactory19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(slimTableFactory27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(slimTableFactory39);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertNotNull(strMap42);
        org.junit.Assert.assertNotNull(slimTableFactory44);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hi!" + "'", str46, "hi!");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test08381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08381");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap5 = slimTableFactory4.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory4.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory6.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap8 = slimTableFactory6.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str11 = slimTableFactory9.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap12 = slimTableFactory9.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory9.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory9.copy();
        boolean boolean16 = slimTableFactory9.hasColon("");
        java.lang.String str18 = slimTableFactory9.makeTableType("");
        java.lang.String str20 = slimTableFactory9.getFullTableName("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass22 = slimTableFactory9.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap23 = slimTableFactory9.tableTypeArrays;
        slimTableFactory6.tableTypeArrays = strMap23;
        java.lang.Class<?> wildcardClass25 = strMap23.getClass();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(slimTableFactory13);
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertNull(wildcardClass22);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test08382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08382");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass3 = slimTableFactory1.getTableType("");
        java.lang.String str5 = slimTableFactory1.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory1.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap6;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        boolean boolean11 = slimTableFactory8.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap12 = slimTableFactory8.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory8.getTableType("hi!");
        java.lang.String str16 = slimTableFactory8.getFullTableName("");
        java.lang.String str18 = slimTableFactory8.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory8.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory19.copy();
        fitnesse.testsystems.slim.Table table21 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext23 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable24 = slimTableFactory19.makeSlimTable(table21, "", slimTestContext23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(slimTableFactory19);
        org.junit.Assert.assertNotNull(slimTableFactory20);
    }

    @Test
    public void test08383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08383");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str6 = slimTableFactory4.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory4.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap7;
        java.lang.String str10 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap13 = slimTableFactory0.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass15 = slimTableFactory0.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = slimTableFactory16.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory17.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass21 = slimTableFactory19.getTableType("");
        java.lang.String str23 = slimTableFactory19.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap24 = slimTableFactory19.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap25 = slimTableFactory19.tableTypeArrays;
        java.lang.String str27 = slimTableFactory19.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory29 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass31 = slimTableFactory29.getTableType("");
        java.lang.String str33 = slimTableFactory29.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap34 = slimTableFactory29.tableTypeArrays;
        slimTableFactory28.tableTypeArrays = strMap34;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory36 = slimTableFactory28.copy();
        java.lang.String str38 = slimTableFactory28.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap39 = slimTableFactory28.tableTypeArrays;
        slimTableFactory19.tableTypeArrays = strMap39;
        slimTableFactory17.tableTypeArrays = strMap39;
        slimTableFactory0.tableTypeArrays = strMap39;
        fitnesse.testsystems.slim.Table table43 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext45 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable46 = slimTableFactory0.makeSlimTable(table43, "", slimTestContext45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertNotNull(slimTableFactory17);
        org.junit.Assert.assertNotNull(slimTableFactory18);
        org.junit.Assert.assertNull(wildcardClass21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNotNull(slimTableFactory36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertNotNull(strMap39);
    }

    @Test
    public void test08384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08384");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str6 = slimTableFactory4.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory4.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap7;
        java.lang.String str10 = slimTableFactory0.makeTableType("hi!");
        boolean boolean12 = slimTableFactory0.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory13.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap15 = slimTableFactory13.tableTypes;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap16 = slimTableFactory13.tableTypes;
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(slimTableFactory13);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(strMap16);
    }

    @Test
    public void test08385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08385");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass3 = slimTableFactory1.getTableType("");
        java.lang.String str5 = slimTableFactory1.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory1.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap6;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory0.copy();
        java.lang.String str10 = slimTableFactory0.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap12 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.Table table14 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable15 = slimTableFactory0.parseDefineTableTypeTable(table14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(slimTableFactory13);
    }

    @Test
    public void test08386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08386");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap5 = slimTableFactory4.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory4.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory6.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory6.copy();
        java.lang.String str10 = slimTableFactory6.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str13 = slimTableFactory11.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory11.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str17 = slimTableFactory15.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap18 = slimTableFactory15.tableTypeArrays;
        slimTableFactory11.tableTypeArrays = strMap18;
        java.lang.String str21 = slimTableFactory11.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap22 = slimTableFactory11.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = slimTableFactory11.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap24 = slimTableFactory11.tableTypeArrays;
        slimTableFactory6.tableTypeArrays = strMap24;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = slimTableFactory6.copy();
        fitnesse.testsystems.slim.Table table27 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext29 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable30 = slimTableFactory26.makeSlimTable(table27, "", slimTestContext29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(slimTableFactory23);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNotNull(slimTableFactory26);
    }

    @Test
    public void test08387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08387");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass3 = slimTableFactory1.getTableType("");
        java.lang.String str5 = slimTableFactory1.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory1.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap6;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory9.tableTypeArrays;
        java.lang.String str12 = slimTableFactory9.makeTableType("hi!");
        boolean boolean14 = slimTableFactory9.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap15 = slimTableFactory9.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = slimTableFactory16.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = slimTableFactory16.tableTypeArrays;
        slimTableFactory9.tableTypeArrays = strMap18;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap20 = slimTableFactory9.tableTypes;
        java.lang.String str22 = slimTableFactory9.makeTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass24 = slimTableFactory9.getTableType("hi!");
        java.lang.String str26 = slimTableFactory9.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = slimTableFactory9.copy();
        java.lang.String str29 = slimTableFactory27.makeTableType("");
        boolean boolean31 = slimTableFactory27.hasColon("");
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(slimTableFactory17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNull(wildcardClass24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(slimTableFactory27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test08388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08388");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.lang.String str3 = slimTableFactory0.makeTableType("hi!");
        java.lang.String str5 = slimTableFactory0.makeTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory0.getTableType("hi!");
        boolean boolean9 = slimTableFactory0.hasColon("hi!");
        java.lang.String str11 = slimTableFactory0.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory0.copy();
        boolean boolean14 = slimTableFactory0.hasColon("");
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!" + "'", str3, "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test08389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08389");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.lang.String str4 = slimTableFactory0.makeTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap5 = slimTableFactory0.tableTypes;
        java.lang.String str7 = slimTableFactory0.makeTableType("hi!");
        java.lang.String str9 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap11 = slimTableFactory10.tableTypes;
        java.lang.String str13 = slimTableFactory10.makeTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass15 = slimTableFactory10.getTableType("");
        java.lang.Class<?> wildcardClass16 = slimTableFactory10.getClass();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test08390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08390");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.lang.String str4 = slimTableFactory0.makeTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap5 = slimTableFactory0.tableTypes;
        java.lang.String str7 = slimTableFactory0.makeTableType("hi!");
        java.lang.String str9 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap11 = slimTableFactory10.tableTypes;
        java.lang.String str13 = slimTableFactory10.makeTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass15 = slimTableFactory10.getTableType("");
        fitnesse.testsystems.slim.Table table16 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory10.parseDefineTableTypeRow(table16, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNull(wildcardClass15);
    }

    @Test
    public void test08391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08391");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str6 = slimTableFactory4.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory4.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap7;
        java.lang.String str10 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap12 = slimTableFactory0.tableTypes;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap13 = slimTableFactory0.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass15 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass21 = slimTableFactory19.getTableType("");
        java.lang.String str23 = slimTableFactory19.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap24 = slimTableFactory19.tableTypeArrays;
        slimTableFactory18.tableTypeArrays = strMap24;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = slimTableFactory18.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = slimTableFactory26.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = slimTableFactory26.copy();
        boolean boolean30 = slimTableFactory28.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory31 = slimTableFactory28.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory32 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass34 = slimTableFactory32.getTableType("");
        java.lang.String str36 = slimTableFactory32.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap37 = slimTableFactory32.tableTypeArrays;
        slimTableFactory28.tableTypeArrays = strMap37;
        slimTableFactory0.tableTypeArrays = strMap37;
        java.util.Map<java.lang.String, java.lang.String> strMap40 = slimTableFactory0.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass42 = slimTableFactory0.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap43 = slimTableFactory0.tableTypeArrays;
        java.lang.Class<?> wildcardClass44 = slimTableFactory0.getClass();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(slimTableFactory17);
        org.junit.Assert.assertNull(wildcardClass21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNotNull(slimTableFactory26);
        org.junit.Assert.assertNotNull(slimTableFactory27);
        org.junit.Assert.assertNotNull(slimTableFactory28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(slimTableFactory31);
        org.junit.Assert.assertNull(wildcardClass34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertNull(wildcardClass42);
        org.junit.Assert.assertNotNull(strMap43);
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test08392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08392");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        boolean boolean4 = slimTableFactory0.hasColon("");
        boolean boolean6 = slimTableFactory0.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass8 = slimTableFactory0.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str11 = slimTableFactory9.getFullTableName("hi!");
        java.lang.String str13 = slimTableFactory9.makeTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap14 = slimTableFactory9.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass17 = slimTableFactory15.getTableType("");
        java.lang.String str19 = slimTableFactory15.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap20 = slimTableFactory15.tableTypeArrays;
        slimTableFactory9.tableTypeArrays = strMap20;
        slimTableFactory0.tableTypeArrays = strMap20;
        boolean boolean24 = slimTableFactory0.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap25 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = slimTableFactory26.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap28 = slimTableFactory26.tableTypeArrays;
        boolean boolean30 = slimTableFactory26.hasColon("");
        fitnesse.testsystems.slim.Table table31 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable32 = slimTableFactory26.parseDefineTableTypeTable(table31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNull(wildcardClass17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(slimTableFactory26);
        org.junit.Assert.assertNotNull(slimTableFactory27);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test08393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08393");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str6 = slimTableFactory4.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory4.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap7;
        java.lang.String str10 = slimTableFactory0.getFullTableName("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass12 = slimTableFactory0.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap13 = slimTableFactory0.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass15 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory0.copy();
        java.lang.String str18 = slimTableFactory16.makeTableType("");
        fitnesse.testsystems.slim.Table table19 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory16.parseDefineTableTypeRow(table19, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
    }

    @Test
    public void test08394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08394");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str6 = slimTableFactory4.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory4.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap7;
        java.lang.String str10 = slimTableFactory0.getFullTableName("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass12 = slimTableFactory0.getTableType("hi!");
        java.lang.String str14 = slimTableFactory0.getFullTableName("hi!");
        java.lang.String str16 = slimTableFactory0.getFullTableName("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass18 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap19 = slimTableFactory0.tableTypeArrays;
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertNotNull(strMap19);
    }

    @Test
    public void test08395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08395");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass3 = slimTableFactory1.getTableType("");
        java.lang.String str5 = slimTableFactory1.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory1.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap6;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory9.tableTypeArrays;
        java.lang.String str12 = slimTableFactory9.makeTableType("hi!");
        boolean boolean14 = slimTableFactory9.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap15 = slimTableFactory9.tableTypes;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap16 = slimTableFactory9.tableTypes;
        fitnesse.testsystems.slim.Table table17 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory9.parseDefineTableTypeRow(table17, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(strMap16);
    }

    @Test
    public void test08396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08396");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.lang.String str4 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory0.copy();
        boolean boolean7 = slimTableFactory0.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap9 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str13 = slimTableFactory11.getFullTableName("hi!");
        java.lang.String str15 = slimTableFactory11.makeTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap16 = slimTableFactory11.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass19 = slimTableFactory17.getTableType("");
        java.lang.String str21 = slimTableFactory17.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap22 = slimTableFactory17.tableTypeArrays;
        slimTableFactory11.tableTypeArrays = strMap22;
        slimTableFactory10.tableTypeArrays = strMap22;
        java.lang.String str26 = slimTableFactory10.makeTableType("");
        boolean boolean28 = slimTableFactory10.hasColon("hi!");
        java.lang.String str30 = slimTableFactory10.getFullTableName("");
        java.lang.Class<?> wildcardClass31 = slimTableFactory10.getClass();
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test08397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08397");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap5 = slimTableFactory4.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory4.copy();
        java.lang.String str8 = slimTableFactory6.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory6.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory9.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory9.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap12 = slimTableFactory9.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory9.getTableType("");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNull(wildcardClass14);
    }

    @Test
    public void test08398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08398");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str6 = slimTableFactory4.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory4.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap7;
        java.lang.String str10 = slimTableFactory0.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str14 = slimTableFactory12.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap15 = slimTableFactory12.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory12.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap17 = slimTableFactory16.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory16.copy();
        java.lang.String str20 = slimTableFactory18.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap21 = slimTableFactory18.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap21;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass26 = slimTableFactory24.getTableType("");
        java.lang.String str28 = slimTableFactory24.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap29 = slimTableFactory24.tableTypeArrays;
        slimTableFactory23.tableTypeArrays = strMap29;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap31 = slimTableFactory23.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap32 = slimTableFactory23.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap32;
        java.lang.String str35 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap36 = slimTableFactory0.tableTypes;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap37 = slimTableFactory0.tableTypes;
        java.lang.String str39 = slimTableFactory0.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory40 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap41 = slimTableFactory40.tableTypeArrays;
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(slimTableFactory18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNull(wildcardClass26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hi!" + "'", str39, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory40);
        org.junit.Assert.assertNotNull(strMap41);
    }

    @Test
    public void test08399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08399");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.lang.String str4 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory0.copy();
        boolean boolean7 = slimTableFactory0.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory9.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass12 = slimTableFactory10.getTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory10.getTableType("hi!");
        boolean boolean16 = slimTableFactory10.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap17 = slimTableFactory10.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap17;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory0.copy();
        boolean boolean21 = slimTableFactory0.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass23 = slimTableFactory0.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.Table table26 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext28 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable29 = slimTableFactory0.makeSlimTable(table26, "", slimTestContext28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(slimTableFactory19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(wildcardClass23);
        org.junit.Assert.assertNotNull(slimTableFactory24);
        org.junit.Assert.assertNotNull(slimTableFactory25);
    }

    @Test
    public void test08400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08400");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.lang.String str3 = slimTableFactory0.makeTableType("hi!");
        java.lang.String str5 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory6.copy();
        java.lang.String str9 = slimTableFactory6.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory10.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory10.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory10.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap15 = slimTableFactory10.tableTypeArrays;
        java.lang.String str17 = slimTableFactory10.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass20 = slimTableFactory18.getTableType("");
        java.lang.String str22 = slimTableFactory18.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = slimTableFactory18.copy();
        java.lang.String str25 = slimTableFactory18.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap26 = slimTableFactory18.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap27 = slimTableFactory18.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass29 = slimTableFactory18.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap30 = slimTableFactory18.tableTypeArrays;
        java.lang.String str32 = slimTableFactory18.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap33 = slimTableFactory18.tableTypeArrays;
        slimTableFactory10.tableTypeArrays = strMap33;
        slimTableFactory6.tableTypeArrays = strMap33;
        boolean boolean37 = slimTableFactory6.hasColon("");
        fitnesse.testsystems.slim.Table table38 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable39 = slimTableFactory6.parseDefineTableTypeTable(table38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!" + "'", str3, "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNull(wildcardClass20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(slimTableFactory23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNull(wildcardClass29);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test08401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08401");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        boolean boolean4 = slimTableFactory0.hasColon("");
        boolean boolean6 = slimTableFactory0.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass8 = slimTableFactory0.getTableType("hi!");
        java.lang.String str10 = slimTableFactory0.makeTableType("hi!");
        boolean boolean12 = slimTableFactory0.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap13 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass18 = slimTableFactory16.getTableType("");
        boolean boolean20 = slimTableFactory16.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str23 = slimTableFactory21.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap24 = slimTableFactory21.tableTypeArrays;
        slimTableFactory16.tableTypeArrays = strMap24;
        slimTableFactory0.tableTypeArrays = strMap24;
        boolean boolean28 = slimTableFactory0.hasColon("hi!");
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test08402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08402");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.lang.String str4 = slimTableFactory0.makeTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap5 = slimTableFactory0.tableTypes;
        java.lang.String str7 = slimTableFactory0.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap8 = slimTableFactory0.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap9 = slimTableFactory0.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass11 = slimTableFactory0.getTableType("");
        java.lang.String str13 = slimTableFactory0.makeTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass15 = slimTableFactory0.getTableType("hi!");
        java.lang.String str17 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap18 = slimTableFactory0.tableTypes;
        boolean boolean20 = slimTableFactory0.hasColon("");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test08403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08403");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.lang.String str4 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory0.copy();
        java.lang.String str7 = slimTableFactory5.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap8 = slimTableFactory5.tableTypes;
        java.lang.String str10 = slimTableFactory5.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory12.getTableType("");
        java.lang.String str16 = slimTableFactory12.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap17 = slimTableFactory12.tableTypeArrays;
        slimTableFactory11.tableTypeArrays = strMap17;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory11.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap20 = slimTableFactory11.tableTypes;
        java.lang.String str22 = slimTableFactory11.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass26 = slimTableFactory24.getTableType("");
        java.lang.String str28 = slimTableFactory24.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap29 = slimTableFactory24.tableTypeArrays;
        slimTableFactory23.tableTypeArrays = strMap29;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory31 = slimTableFactory23.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory32 = slimTableFactory31.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = slimTableFactory32.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory34 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass36 = slimTableFactory34.getTableType("");
        java.lang.String str38 = slimTableFactory34.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory39 = slimTableFactory34.copy();
        boolean boolean41 = slimTableFactory34.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap42 = slimTableFactory34.tableTypeArrays;
        slimTableFactory32.tableTypeArrays = strMap42;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory44 = slimTableFactory32.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap45 = slimTableFactory44.tableTypeArrays;
        slimTableFactory11.tableTypeArrays = strMap45;
        slimTableFactory5.tableTypeArrays = strMap45;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap48 = slimTableFactory5.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass50 = slimTableFactory5.getTableType("hi!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(slimTableFactory19);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertNull(wildcardClass26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(slimTableFactory31);
        org.junit.Assert.assertNotNull(slimTableFactory32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(wildcardClass36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(slimTableFactory39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(strMap42);
        org.junit.Assert.assertNotNull(slimTableFactory44);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNotNull(strMap48);
        org.junit.Assert.assertNull(wildcardClass50);
    }

    @Test
    public void test08404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08404");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str6 = slimTableFactory4.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory4.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap7;
        java.lang.String str10 = slimTableFactory0.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap12 = slimTableFactory0.tableTypes;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap13 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass16 = slimTableFactory14.getTableType("");
        java.lang.String str18 = slimTableFactory14.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory14.copy();
        java.lang.String str21 = slimTableFactory14.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap22 = slimTableFactory14.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap23 = slimTableFactory14.tableTypes;
        java.lang.String str25 = slimTableFactory14.getFullTableName("hi!");
        java.lang.String str27 = slimTableFactory14.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap28 = slimTableFactory14.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap28;
        java.util.Map<java.lang.String, java.lang.String> strMap30 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory31 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass33 = slimTableFactory31.getTableType("");
        boolean boolean35 = slimTableFactory31.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory36 = slimTableFactory31.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap37 = slimTableFactory31.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory38 = slimTableFactory31.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory39 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory40 = slimTableFactory39.copy();
        java.lang.String str42 = slimTableFactory39.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap43 = slimTableFactory39.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass45 = slimTableFactory39.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap46 = slimTableFactory39.tableTypeArrays;
        slimTableFactory31.tableTypeArrays = strMap46;
        slimTableFactory0.tableTypeArrays = strMap46;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory49 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.Table table50 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext52 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable53 = slimTableFactory49.makeSlimTable(table50, "hi!", slimTestContext52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNull(wildcardClass16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(slimTableFactory19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNull(wildcardClass33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(slimTableFactory36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(slimTableFactory38);
        org.junit.Assert.assertNotNull(slimTableFactory40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "hi!" + "'", str42, "hi!");
        org.junit.Assert.assertNotNull(strMap43);
        org.junit.Assert.assertNull(wildcardClass45);
        org.junit.Assert.assertNotNull(strMap46);
        org.junit.Assert.assertNotNull(slimTableFactory49);
    }

    @Test
    public void test08405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08405");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass3 = slimTableFactory1.getTableType("");
        java.lang.String str5 = slimTableFactory1.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory1.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap6;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory9.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass13 = slimTableFactory11.getTableType("");
        java.lang.String str15 = slimTableFactory11.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory11.copy();
        boolean boolean18 = slimTableFactory11.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap19 = slimTableFactory11.tableTypeArrays;
        slimTableFactory9.tableTypeArrays = strMap19;
        java.lang.String str22 = slimTableFactory9.getFullTableName("hi!");
        java.lang.String str24 = slimTableFactory9.makeTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass26 = slimTableFactory9.getTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass28 = slimTableFactory9.getTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass30 = slimTableFactory9.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory31 = slimTableFactory9.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory32 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str34 = slimTableFactory32.getFullTableName("hi!");
        java.lang.String str36 = slimTableFactory32.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap37 = null;
        slimTableFactory32.tableTypeArrays = strMap37;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory39 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str41 = slimTableFactory39.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap42 = slimTableFactory39.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory43 = slimTableFactory39.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap44 = slimTableFactory43.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory45 = slimTableFactory43.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap46 = slimTableFactory45.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap47 = slimTableFactory45.tableTypeArrays;
        slimTableFactory32.tableTypeArrays = strMap47;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory49 = slimTableFactory32.copy();
        java.lang.String str51 = slimTableFactory32.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory52 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str54 = slimTableFactory52.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap55 = slimTableFactory52.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory56 = slimTableFactory52.copy();
        boolean boolean58 = slimTableFactory52.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass60 = slimTableFactory52.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory61 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str63 = slimTableFactory61.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap64 = slimTableFactory61.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory65 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str67 = slimTableFactory65.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap68 = slimTableFactory65.tableTypeArrays;
        slimTableFactory61.tableTypeArrays = strMap68;
        java.lang.String str71 = slimTableFactory61.getFullTableName("");
        boolean boolean73 = slimTableFactory61.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory74 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory75 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass77 = slimTableFactory75.getTableType("");
        java.lang.String str79 = slimTableFactory75.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap80 = slimTableFactory75.tableTypeArrays;
        slimTableFactory74.tableTypeArrays = strMap80;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory82 = slimTableFactory74.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory83 = slimTableFactory74.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap84 = slimTableFactory83.tableTypeArrays;
        slimTableFactory61.tableTypeArrays = strMap84;
        slimTableFactory52.tableTypeArrays = strMap84;
        slimTableFactory32.tableTypeArrays = strMap84;
        slimTableFactory9.tableTypeArrays = strMap84;
        java.lang.Class<?> wildcardClass89 = slimTableFactory9.getClass();
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNull(wildcardClass26);
        org.junit.Assert.assertNull(wildcardClass28);
        org.junit.Assert.assertNull(wildcardClass30);
        org.junit.Assert.assertNotNull(slimTableFactory31);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertNotNull(strMap42);
        org.junit.Assert.assertNotNull(slimTableFactory43);
        org.junit.Assert.assertNotNull(strMap44);
        org.junit.Assert.assertNotNull(slimTableFactory45);
        org.junit.Assert.assertNotNull(strMap46);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNotNull(slimTableFactory49);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!");
        org.junit.Assert.assertNotNull(strMap55);
        org.junit.Assert.assertNotNull(slimTableFactory56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(wildcardClass60);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "hi!" + "'", str63, "hi!");
        org.junit.Assert.assertNotNull(strMap64);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "hi!" + "'", str67, "hi!");
        org.junit.Assert.assertNotNull(strMap68);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNull(wildcardClass77);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNotNull(strMap80);
        org.junit.Assert.assertNotNull(slimTableFactory82);
        org.junit.Assert.assertNotNull(slimTableFactory83);
        org.junit.Assert.assertNotNull(strMap84);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test08406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08406");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.lang.String str4 = slimTableFactory0.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap5 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass9 = slimTableFactory7.getTableType("");
        java.lang.String str11 = slimTableFactory7.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory7.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap13 = slimTableFactory12.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory12.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap15 = slimTableFactory12.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap15;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap17 = slimTableFactory0.tableTypes;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap18 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.Table table19 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable20 = slimTableFactory0.parseDefineTableTypeTable(table19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(strMap18);
    }

    @Test
    public void test08407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08407");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str6 = slimTableFactory4.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory4.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap7;
        java.lang.String str10 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap12 = slimTableFactory0.tableTypes;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap13 = slimTableFactory0.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass15 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory17.copy();
        boolean boolean20 = slimTableFactory18.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = slimTableFactory18.copy();
        java.lang.String str23 = slimTableFactory18.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = slimTableFactory18.copy();
        java.lang.String str26 = slimTableFactory24.makeTableType("hi!");
        java.lang.String str28 = slimTableFactory24.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap29 = slimTableFactory24.tableTypes;
        fitnesse.testsystems.slim.Table table30 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext32 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable33 = slimTableFactory24.makeSlimTable(table30, "hi!", slimTestContext32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(slimTableFactory17);
        org.junit.Assert.assertNotNull(slimTableFactory18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(slimTableFactory21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(slimTableFactory24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(strMap29);
    }

    @Test
    public void test08408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08408");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.lang.String str4 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory0.copy();
        java.lang.String str7 = slimTableFactory5.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap8 = slimTableFactory5.tableTypes;
        java.lang.String str10 = slimTableFactory5.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass13 = slimTableFactory11.getTableType("");
        java.lang.String str15 = slimTableFactory11.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory11.copy();
        boolean boolean18 = slimTableFactory11.hasColon("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass20 = slimTableFactory11.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = slimTableFactory11.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap22 = slimTableFactory11.tableTypes;
        java.lang.String str24 = slimTableFactory11.getFullTableName("");
        boolean boolean26 = slimTableFactory11.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass29 = slimTableFactory27.getTableType("");
        java.lang.String str31 = slimTableFactory27.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory32 = slimTableFactory27.copy();
        java.lang.String str34 = slimTableFactory27.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap35 = slimTableFactory27.tableTypeArrays;
        slimTableFactory11.tableTypeArrays = strMap35;
        boolean boolean38 = slimTableFactory11.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory39 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass41 = slimTableFactory39.getTableType("");
        boolean boolean43 = slimTableFactory39.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory44 = slimTableFactory39.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap45 = slimTableFactory39.tableTypeArrays;
        slimTableFactory11.tableTypeArrays = strMap45;
        java.util.Map<java.lang.String, java.lang.String> strMap47 = slimTableFactory11.tableTypeArrays;
        slimTableFactory5.tableTypeArrays = strMap47;
        java.util.Map<java.lang.String, java.lang.String> strMap49 = slimTableFactory5.tableTypeArrays;
        boolean boolean51 = slimTableFactory5.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory52 = slimTableFactory5.copy();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(wildcardClass20);
        org.junit.Assert.assertNotNull(slimTableFactory21);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(wildcardClass29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(slimTableFactory32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(wildcardClass41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(slimTableFactory44);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNotNull(strMap49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(slimTableFactory52);
    }

    @Test
    public void test08409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08409");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        java.lang.String str5 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass8 = slimTableFactory6.getTableType("");
        boolean boolean10 = slimTableFactory6.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory6.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap11;
        fitnesse.testsystems.slim.Table table13 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory0.parseDefineTableTypeRow(table13, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
    }

    @Test
    public void test08410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08410");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap5 = slimTableFactory4.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory4.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory6.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory6.tableTypeArrays;
        java.lang.String str10 = slimTableFactory6.getFullTableName("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass12 = slimTableFactory6.getTableType("hi!");
        boolean boolean14 = slimTableFactory6.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str17 = slimTableFactory15.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap18 = slimTableFactory15.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory15.copy();
        boolean boolean21 = slimTableFactory15.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap22 = slimTableFactory15.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap23 = slimTableFactory15.tableTypeArrays;
        slimTableFactory6.tableTypeArrays = strMap23;
        boolean boolean26 = slimTableFactory6.hasColon("hi!");
        boolean boolean28 = slimTableFactory6.hasColon("");
        java.lang.Class<?> wildcardClass29 = slimTableFactory6.getClass();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(slimTableFactory19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test08411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08411");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        boolean boolean4 = slimTableFactory0.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap5 = slimTableFactory0.tableTypeArrays;
        java.lang.String str7 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory8.copy();
        java.lang.String str12 = slimTableFactory10.makeTableType("");
        fitnesse.testsystems.slim.Table table13 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable14 = slimTableFactory10.parseDefineTableTypeTable(table13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test08412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08412");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.lang.String str3 = slimTableFactory0.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap4 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory5.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory6.copy();
        java.lang.String str9 = slimTableFactory6.getFullTableName("hi!");
        java.lang.String str11 = slimTableFactory6.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap12 = slimTableFactory6.tableTypes;
        java.lang.Class<?> wildcardClass13 = slimTableFactory6.getClass();
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!" + "'", str3, "hi!");
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test08413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08413");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass3 = slimTableFactory1.getTableType("");
        java.lang.String str5 = slimTableFactory1.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory1.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap6;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap8 = slimTableFactory0.tableTypes;
        boolean boolean10 = slimTableFactory0.hasColon("hi!");
        java.lang.String str12 = slimTableFactory0.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap13 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str16 = slimTableFactory14.getFullTableName("hi!");
        java.lang.String str18 = slimTableFactory14.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory14.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory19.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap21 = slimTableFactory20.tableTypes;
        java.lang.String str23 = slimTableFactory20.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass26 = slimTableFactory24.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass29 = slimTableFactory27.getTableType("");
        java.lang.String str31 = slimTableFactory27.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory32 = slimTableFactory27.copy();
        boolean boolean34 = slimTableFactory27.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap35 = slimTableFactory27.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap36 = slimTableFactory27.tableTypeArrays;
        slimTableFactory24.tableTypeArrays = strMap36;
        slimTableFactory20.tableTypeArrays = strMap36;
        java.util.Map<java.lang.String, java.lang.String> strMap39 = slimTableFactory20.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap39;
        java.util.Map<java.lang.String, java.lang.String> strMap41 = slimTableFactory0.tableTypeArrays;
        java.lang.String str43 = slimTableFactory0.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap44 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory45 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.Table table46 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable47 = slimTableFactory0.parseDefineTableTypeTable(table46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(slimTableFactory19);
        org.junit.Assert.assertNotNull(slimTableFactory20);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertNull(wildcardClass26);
        org.junit.Assert.assertNull(wildcardClass29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(slimTableFactory32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(strMap44);
        org.junit.Assert.assertNotNull(slimTableFactory45);
    }

    @Test
    public void test08414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08414");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.lang.String str4 = slimTableFactory0.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap5 = null;
        slimTableFactory0.tableTypeArrays = strMap5;
        boolean boolean8 = slimTableFactory0.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap9 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str13 = slimTableFactory11.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory11.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str17 = slimTableFactory15.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap18 = slimTableFactory15.tableTypeArrays;
        slimTableFactory11.tableTypeArrays = strMap18;
        java.lang.String str21 = slimTableFactory11.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = slimTableFactory11.copy();
        boolean boolean24 = slimTableFactory22.hasColon("hi!");
        java.lang.String str26 = slimTableFactory22.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap27 = slimTableFactory22.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap27;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap29 = slimTableFactory0.tableTypes;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap30 = slimTableFactory0.tableTypes;
        boolean boolean32 = slimTableFactory0.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap33 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory34 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str36 = slimTableFactory34.getFullTableName("hi!");
        java.lang.String str38 = slimTableFactory34.makeTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap39 = slimTableFactory34.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory40 = slimTableFactory34.copy();
        java.lang.String str42 = slimTableFactory34.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory43 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str45 = slimTableFactory43.getFullTableName("hi!");
        java.lang.String str47 = slimTableFactory43.makeTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap48 = slimTableFactory43.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory49 = slimTableFactory43.copy();
        java.lang.String str51 = slimTableFactory43.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory52 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str54 = slimTableFactory52.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap55 = slimTableFactory52.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory56 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str58 = slimTableFactory56.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap59 = slimTableFactory56.tableTypeArrays;
        slimTableFactory52.tableTypeArrays = strMap59;
        java.lang.String str62 = slimTableFactory52.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap63 = slimTableFactory52.tableTypeArrays;
        slimTableFactory43.tableTypeArrays = strMap63;
        slimTableFactory34.tableTypeArrays = strMap63;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory66 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory67 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass69 = slimTableFactory67.getTableType("");
        java.lang.String str71 = slimTableFactory67.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap72 = slimTableFactory67.tableTypeArrays;
        slimTableFactory66.tableTypeArrays = strMap72;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory74 = slimTableFactory66.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory75 = slimTableFactory74.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap76 = slimTableFactory75.tableTypeArrays;
        java.lang.String str78 = slimTableFactory75.makeTableType("hi!");
        java.lang.String str80 = slimTableFactory75.getFullTableName("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass82 = slimTableFactory75.getTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap83 = slimTableFactory75.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory84 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str86 = slimTableFactory84.getFullTableName("hi!");
        java.lang.String str88 = slimTableFactory84.makeTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap89 = slimTableFactory84.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory90 = slimTableFactory84.copy();
        java.lang.String str92 = slimTableFactory84.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap93 = slimTableFactory84.tableTypeArrays;
        slimTableFactory75.tableTypeArrays = strMap93;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory95 = slimTableFactory75.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap96 = slimTableFactory75.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap97 = slimTableFactory75.tableTypeArrays;
        slimTableFactory34.tableTypeArrays = strMap97;
        slimTableFactory0.tableTypeArrays = strMap97;
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(strMap9);
        org.junit.Assert.assertNull(strMap10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(slimTableFactory22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNotNull(slimTableFactory40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(strMap48);
        org.junit.Assert.assertNotNull(slimTableFactory49);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!");
        org.junit.Assert.assertNotNull(strMap55);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "hi!" + "'", str58, "hi!");
        org.junit.Assert.assertNotNull(strMap59);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(strMap63);
        org.junit.Assert.assertNull(wildcardClass69);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(strMap72);
        org.junit.Assert.assertNotNull(slimTableFactory74);
        org.junit.Assert.assertNotNull(slimTableFactory75);
        org.junit.Assert.assertNotNull(strMap76);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "hi!" + "'", str78, "hi!");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "hi!" + "'", str80, "hi!");
        org.junit.Assert.assertNull(wildcardClass82);
        org.junit.Assert.assertNotNull(strMap83);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "hi!" + "'", str86, "hi!");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertNotNull(strMap89);
        org.junit.Assert.assertNotNull(slimTableFactory90);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
        org.junit.Assert.assertNotNull(strMap93);
        org.junit.Assert.assertNotNull(slimTableFactory95);
        org.junit.Assert.assertNotNull(strMap96);
        org.junit.Assert.assertNotNull(strMap97);
    }

    @Test
    public void test08415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08415");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        boolean boolean4 = slimTableFactory0.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap5 = slimTableFactory0.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory0.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory0.tableTypeArrays;
        java.lang.String str10 = slimTableFactory0.getFullTableName("");
        java.lang.String str12 = slimTableFactory0.getFullTableName("");
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test08416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08416");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory0.copy();
        boolean boolean6 = slimTableFactory0.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap9 = slimTableFactory0.tableTypeArrays;
        java.lang.String str11 = slimTableFactory0.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str15 = slimTableFactory13.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory13.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = slimTableFactory13.copy();
        boolean boolean19 = slimTableFactory13.hasColon("hi!");
        boolean boolean21 = slimTableFactory13.hasColon("");
        java.lang.String str23 = slimTableFactory13.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = slimTableFactory13.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap25 = slimTableFactory24.tableTypeArrays;
        slimTableFactory12.tableTypeArrays = strMap25;
        java.lang.String str28 = slimTableFactory12.makeTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap29 = slimTableFactory12.tableTypes;
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(slimTableFactory17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(slimTableFactory24);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(strMap29);
    }

    @Test
    public void test08417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08417");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass3 = slimTableFactory1.getTableType("");
        java.lang.String str5 = slimTableFactory1.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory1.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap6;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory9.tableTypeArrays;
        java.lang.String str12 = slimTableFactory9.makeTableType("hi!");
        boolean boolean14 = slimTableFactory9.hasColon("hi!");
        java.lang.String str16 = slimTableFactory9.makeTableType("hi!");
        boolean boolean18 = slimTableFactory9.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory9.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap20 = slimTableFactory19.tableTypes;
        fitnesse.testsystems.slim.Table table21 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory19.parseDefineTableTypeRow(table21, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(slimTableFactory19);
        org.junit.Assert.assertNotNull(strMap20);
    }

    @Test
    public void test08418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08418");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        fitnesse.testsystems.slim.Table table3 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory0.parseDefineTableTypeRow(table3, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
    }

    @Test
    public void test08419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08419");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass3 = slimTableFactory1.getTableType("");
        java.lang.String str5 = slimTableFactory1.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory1.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap6;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory8.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory11.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory12.getTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass16 = slimTableFactory12.getTableType("hi!");
        boolean boolean18 = slimTableFactory12.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap19 = slimTableFactory12.tableTypeArrays;
        slimTableFactory10.tableTypeArrays = strMap19;
        boolean boolean22 = slimTableFactory10.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap23 = slimTableFactory10.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = slimTableFactory10.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass26 = slimTableFactory24.getTableType("");
        java.lang.String str28 = slimTableFactory24.getFullTableName("");
        java.lang.String str30 = slimTableFactory24.getFullTableName("");
        boolean boolean32 = slimTableFactory24.hasColon("hi!");
        java.lang.String str34 = slimTableFactory24.makeTableType("hi!");
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertNull(wildcardClass16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(slimTableFactory24);
        org.junit.Assert.assertNull(wildcardClass26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
    }

    @Test
    public void test08420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08420");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str6 = slimTableFactory4.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory4.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap7;
        java.lang.String str10 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory11.copy();
        java.lang.String str14 = slimTableFactory11.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap15 = slimTableFactory11.tableTypeArrays;
        fitnesse.testsystems.slim.Table table16 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable17 = slimTableFactory11.parseDefineTableTypeTable(table16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertNotNull(strMap15);
    }

    @Test
    public void test08421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08421");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap5 = slimTableFactory4.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory4.copy();
        java.lang.String str8 = slimTableFactory6.getFullTableName("hi!");
        java.lang.String str10 = slimTableFactory6.makeTableType("hi!");
        java.lang.String str12 = slimTableFactory6.getFullTableName("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory6.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass18 = slimTableFactory16.getTableType("");
        java.lang.String str20 = slimTableFactory16.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap21 = slimTableFactory16.tableTypeArrays;
        slimTableFactory15.tableTypeArrays = strMap21;
        slimTableFactory6.tableTypeArrays = strMap21;
        java.lang.String str25 = slimTableFactory6.makeTableType("");
        boolean boolean27 = slimTableFactory6.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass29 = slimTableFactory6.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap30 = slimTableFactory6.tableTypeArrays;
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(wildcardClass29);
        org.junit.Assert.assertNotNull(strMap30);
    }

    @Test
    public void test08422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08422");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.lang.String str4 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap6 = slimTableFactory5.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory5.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory5.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str11 = slimTableFactory9.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap12 = slimTableFactory9.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory9.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap14 = slimTableFactory13.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory13.copy();
        java.lang.String str17 = slimTableFactory15.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap18 = slimTableFactory15.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str21 = slimTableFactory19.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap22 = slimTableFactory19.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str25 = slimTableFactory23.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap26 = slimTableFactory23.tableTypeArrays;
        slimTableFactory19.tableTypeArrays = strMap26;
        java.lang.String str29 = slimTableFactory19.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap30 = slimTableFactory19.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap31 = slimTableFactory19.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory32 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str34 = slimTableFactory32.getFullTableName("hi!");
        java.lang.String str36 = slimTableFactory32.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory37 = slimTableFactory32.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory38 = slimTableFactory37.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory39 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass41 = slimTableFactory39.getTableType("");
        java.lang.String str43 = slimTableFactory39.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory44 = slimTableFactory39.copy();
        boolean boolean46 = slimTableFactory39.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory47 = slimTableFactory39.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap48 = slimTableFactory47.tableTypeArrays;
        slimTableFactory37.tableTypeArrays = strMap48;
        slimTableFactory19.tableTypeArrays = strMap48;
        slimTableFactory15.tableTypeArrays = strMap48;
        slimTableFactory5.tableTypeArrays = strMap48;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap53 = slimTableFactory5.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass55 = slimTableFactory5.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap56 = slimTableFactory5.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory57 = slimTableFactory5.copy();
        fitnesse.testsystems.slim.Table table58 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable59 = slimTableFactory57.parseDefineTableTypeTable(table58);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(slimTableFactory13);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(slimTableFactory37);
        org.junit.Assert.assertNotNull(slimTableFactory38);
        org.junit.Assert.assertNull(wildcardClass41);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(slimTableFactory44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(slimTableFactory47);
        org.junit.Assert.assertNotNull(strMap48);
        org.junit.Assert.assertNotNull(strMap53);
        org.junit.Assert.assertNull(wildcardClass55);
        org.junit.Assert.assertNotNull(strMap56);
        org.junit.Assert.assertNotNull(slimTableFactory57);
    }

    @Test
    public void test08423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08423");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory2 = slimTableFactory0.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass4 = slimTableFactory0.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str7 = slimTableFactory5.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory5.tableTypeArrays;
        java.lang.String str10 = slimTableFactory5.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory5.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap11;
        java.util.Map<java.lang.String, java.lang.String> strMap13 = slimTableFactory0.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass15 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap16 = slimTableFactory0.tableTypes;
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(slimTableFactory2);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertNotNull(strMap16);
    }

    @Test
    public void test08424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08424");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.lang.String str4 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory0.copy();
        java.lang.String str7 = slimTableFactory0.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap9 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory0.copy();
        boolean boolean12 = slimTableFactory10.hasColon("");
        java.lang.String str14 = slimTableFactory10.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory10.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass17 = slimTableFactory15.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass21 = slimTableFactory19.getTableType("");
        java.lang.String str23 = slimTableFactory19.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap24 = slimTableFactory19.tableTypeArrays;
        slimTableFactory18.tableTypeArrays = strMap24;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = slimTableFactory18.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = slimTableFactory26.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = slimTableFactory26.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory29 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory30 = slimTableFactory29.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass32 = slimTableFactory30.getTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass34 = slimTableFactory30.getTableType("hi!");
        boolean boolean36 = slimTableFactory30.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap37 = slimTableFactory30.tableTypeArrays;
        slimTableFactory28.tableTypeArrays = strMap37;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory39 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str41 = slimTableFactory39.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap42 = slimTableFactory39.tableTypeArrays;
        java.lang.String str44 = slimTableFactory39.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap45 = slimTableFactory39.tableTypeArrays;
        slimTableFactory28.tableTypeArrays = strMap45;
        slimTableFactory15.tableTypeArrays = strMap45;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory48 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str50 = slimTableFactory48.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap51 = slimTableFactory48.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory52 = slimTableFactory48.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory53 = slimTableFactory48.copy();
        boolean boolean55 = slimTableFactory48.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap56 = slimTableFactory48.tableTypeArrays;
        slimTableFactory15.tableTypeArrays = strMap56;
        java.lang.String str59 = slimTableFactory15.getFullTableName("");
        java.lang.Class<?> wildcardClass60 = slimTableFactory15.getClass();
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertNull(wildcardClass17);
        org.junit.Assert.assertNull(wildcardClass21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNotNull(slimTableFactory26);
        org.junit.Assert.assertNotNull(slimTableFactory27);
        org.junit.Assert.assertNotNull(slimTableFactory28);
        org.junit.Assert.assertNotNull(slimTableFactory30);
        org.junit.Assert.assertNull(wildcardClass32);
        org.junit.Assert.assertNull(wildcardClass34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertNotNull(strMap42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hi!" + "'", str50, "hi!");
        org.junit.Assert.assertNotNull(strMap51);
        org.junit.Assert.assertNotNull(slimTableFactory52);
        org.junit.Assert.assertNotNull(slimTableFactory53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(strMap56);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test08425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08425");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        java.lang.String str5 = slimTableFactory0.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory0.tableTypeArrays;
        java.lang.String str8 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory0.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass11 = slimTableFactory9.getTableType("");
        java.lang.String str13 = slimTableFactory9.makeTableType("");
        fitnesse.testsystems.slim.Table table14 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory9.parseDefineTableTypeRow(table14, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test08426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08426");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str6 = slimTableFactory4.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory4.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap7;
        java.lang.String str10 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap12 = slimTableFactory0.tableTypes;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap13 = slimTableFactory0.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass15 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory0.copy();
        java.lang.String str18 = slimTableFactory16.getFullTableName("hi!");
        java.lang.Class<?> wildcardClass19 = slimTableFactory16.getClass();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test08427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08427");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap5 = slimTableFactory4.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory4.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory6.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory6.tableTypeArrays;
        java.lang.String str10 = slimTableFactory6.getFullTableName("hi!");
        boolean boolean12 = slimTableFactory6.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory6.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory6.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory14.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory15.tableTypeArrays;
        java.lang.Class<?> wildcardClass17 = slimTableFactory15.getClass();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(slimTableFactory13);
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test08428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08428");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass3 = slimTableFactory1.getTableType("");
        java.lang.String str5 = slimTableFactory1.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory1.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap6;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory8.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory8.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory8.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory12.copy();
        java.lang.String str15 = slimTableFactory13.makeTableType("");
        java.lang.String str17 = slimTableFactory13.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass20 = slimTableFactory18.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass23 = slimTableFactory21.getTableType("");
        java.lang.String str25 = slimTableFactory21.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = slimTableFactory21.copy();
        boolean boolean28 = slimTableFactory21.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap29 = slimTableFactory21.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap30 = slimTableFactory21.tableTypeArrays;
        slimTableFactory18.tableTypeArrays = strMap30;
        boolean boolean33 = slimTableFactory18.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap34 = slimTableFactory18.tableTypes;
        boolean boolean36 = slimTableFactory18.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap37 = slimTableFactory18.tableTypeArrays;
        slimTableFactory13.tableTypeArrays = strMap37;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap39 = slimTableFactory13.tableTypes;
        java.lang.String str41 = slimTableFactory13.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap42 = slimTableFactory13.tableTypes;
        java.lang.String str44 = slimTableFactory13.getFullTableName("");
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertNotNull(slimTableFactory13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNull(wildcardClass20);
        org.junit.Assert.assertNull(wildcardClass23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(slimTableFactory26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertNotNull(strMap42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
    }

    @Test
    public void test08429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08429");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str6 = slimTableFactory4.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory4.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap7;
        java.lang.String str10 = slimTableFactory0.makeTableType("");
        java.lang.String str12 = slimTableFactory0.makeTableType("hi!");
        boolean boolean14 = slimTableFactory0.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap15 = slimTableFactory0.tableTypes;
        java.lang.String str17 = slimTableFactory0.getFullTableName("");
        java.lang.String str19 = slimTableFactory0.makeTableType("hi!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
    }

    @Test
    public void test08430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08430");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap5 = slimTableFactory4.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory4.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory6.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory6.tableTypeArrays;
        java.lang.String str10 = slimTableFactory6.getFullTableName("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass12 = slimTableFactory6.getTableType("hi!");
        boolean boolean14 = slimTableFactory6.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str17 = slimTableFactory15.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap18 = slimTableFactory15.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory15.copy();
        boolean boolean21 = slimTableFactory15.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap22 = slimTableFactory15.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap23 = slimTableFactory15.tableTypeArrays;
        slimTableFactory6.tableTypeArrays = strMap23;
        boolean boolean26 = slimTableFactory6.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = slimTableFactory6.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass29 = slimTableFactory6.getTableType("");
        boolean boolean31 = slimTableFactory6.hasColon("");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(slimTableFactory19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(slimTableFactory27);
        org.junit.Assert.assertNull(wildcardClass29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test08431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08431");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory0.copy();
        boolean boolean7 = slimTableFactory0.hasColon("");
        java.lang.String str9 = slimTableFactory0.makeTableType("");
        java.lang.String str11 = slimTableFactory0.getFullTableName("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass13 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap15 = slimTableFactory14.tableTypes;
        fitnesse.testsystems.slim.Table table16 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable17 = slimTableFactory14.parseDefineTableTypeTable(table16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertNotNull(strMap15);
    }

    @Test
    public void test08432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08432");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.lang.String str4 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory0.copy();
        boolean boolean7 = slimTableFactory0.hasColon("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass9 = slimTableFactory0.getTableType("");
        java.lang.String str11 = slimTableFactory0.makeTableType("");
        java.lang.String str13 = slimTableFactory0.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory0.copy();
        java.lang.String str16 = slimTableFactory14.getFullTableName("hi!");
        boolean boolean18 = slimTableFactory14.hasColon("hi!");
        java.lang.String str20 = slimTableFactory14.makeTableType("hi!");
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
    }

    @Test
    public void test08433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08433");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.lang.String str4 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory5.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory6.tableTypes;
        java.lang.String str9 = slimTableFactory6.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass12 = slimTableFactory10.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass15 = slimTableFactory13.getTableType("");
        java.lang.String str17 = slimTableFactory13.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory13.copy();
        boolean boolean20 = slimTableFactory13.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap21 = slimTableFactory13.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap22 = slimTableFactory13.tableTypeArrays;
        slimTableFactory10.tableTypeArrays = strMap22;
        slimTableFactory6.tableTypeArrays = strMap22;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass26 = slimTableFactory6.getTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap27 = slimTableFactory6.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap28 = slimTableFactory6.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap29 = slimTableFactory6.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap30 = slimTableFactory6.tableTypeArrays;
        boolean boolean32 = slimTableFactory6.hasColon("");
        java.lang.String str34 = slimTableFactory6.makeTableType("hi!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(slimTableFactory18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNull(wildcardClass26);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
    }

    @Test
    public void test08434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08434");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass3 = slimTableFactory1.getTableType("");
        java.lang.String str5 = slimTableFactory1.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory1.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap6;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory0.copy();
        java.lang.String str10 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str15 = slimTableFactory13.getFullTableName("hi!");
        java.lang.String str17 = slimTableFactory13.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory13.copy();
        java.lang.String str20 = slimTableFactory13.makeTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass22 = slimTableFactory13.getTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass24 = slimTableFactory13.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = slimTableFactory13.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass28 = slimTableFactory26.getTableType("");
        java.lang.String str30 = slimTableFactory26.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory31 = slimTableFactory26.copy();
        boolean boolean33 = slimTableFactory26.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap34 = slimTableFactory26.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap35 = slimTableFactory26.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory36 = slimTableFactory26.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory37 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str39 = slimTableFactory37.getFullTableName("hi!");
        java.lang.String str41 = slimTableFactory37.makeTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap42 = slimTableFactory37.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory43 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass45 = slimTableFactory43.getTableType("");
        java.lang.String str47 = slimTableFactory43.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap48 = slimTableFactory43.tableTypeArrays;
        slimTableFactory37.tableTypeArrays = strMap48;
        slimTableFactory36.tableTypeArrays = strMap48;
        java.lang.String str52 = slimTableFactory36.makeTableType("");
        boolean boolean54 = slimTableFactory36.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory55 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass57 = slimTableFactory55.getTableType("");
        java.lang.String str59 = slimTableFactory55.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory60 = slimTableFactory55.copy();
        boolean boolean62 = slimTableFactory55.hasColon("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass64 = slimTableFactory55.getTableType("");
        java.lang.String str66 = slimTableFactory55.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory67 = slimTableFactory55.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory68 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory69 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass71 = slimTableFactory69.getTableType("");
        java.lang.String str73 = slimTableFactory69.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap74 = slimTableFactory69.tableTypeArrays;
        slimTableFactory68.tableTypeArrays = strMap74;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory76 = slimTableFactory68.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory77 = slimTableFactory76.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory78 = slimTableFactory76.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory79 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory80 = slimTableFactory79.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass82 = slimTableFactory80.getTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass84 = slimTableFactory80.getTableType("hi!");
        boolean boolean86 = slimTableFactory80.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap87 = slimTableFactory80.tableTypeArrays;
        slimTableFactory78.tableTypeArrays = strMap87;
        slimTableFactory55.tableTypeArrays = strMap87;
        java.util.Map<java.lang.String, java.lang.String> strMap90 = slimTableFactory55.tableTypeArrays;
        slimTableFactory36.tableTypeArrays = strMap90;
        slimTableFactory25.tableTypeArrays = strMap90;
        slimTableFactory0.tableTypeArrays = strMap90;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory94 = slimTableFactory0.copy();
        java.lang.String str96 = slimTableFactory0.makeTableType("");
        java.lang.String str98 = slimTableFactory0.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap99 = slimTableFactory0.tableTypeArrays;
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(slimTableFactory18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNull(wildcardClass22);
        org.junit.Assert.assertNull(wildcardClass24);
        org.junit.Assert.assertNotNull(slimTableFactory25);
        org.junit.Assert.assertNull(wildcardClass28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(slimTableFactory31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(slimTableFactory36);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hi!" + "'", str39, "hi!");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(strMap42);
        org.junit.Assert.assertNull(wildcardClass45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(strMap48);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(wildcardClass57);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(slimTableFactory60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(wildcardClass64);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(slimTableFactory67);
        org.junit.Assert.assertNull(wildcardClass71);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(strMap74);
        org.junit.Assert.assertNotNull(slimTableFactory76);
        org.junit.Assert.assertNotNull(slimTableFactory77);
        org.junit.Assert.assertNotNull(slimTableFactory78);
        org.junit.Assert.assertNotNull(slimTableFactory80);
        org.junit.Assert.assertNull(wildcardClass82);
        org.junit.Assert.assertNull(wildcardClass84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(strMap87);
        org.junit.Assert.assertNotNull(strMap90);
        org.junit.Assert.assertNotNull(slimTableFactory94);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "" + "'", str96, "");
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "hi!" + "'", str98, "hi!");
        org.junit.Assert.assertNotNull(strMap99);
    }

    @Test
    public void test08435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08435");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass3 = slimTableFactory1.getTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass5 = slimTableFactory1.getTableType("hi!");
        boolean boolean7 = slimTableFactory1.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory1.copy();
        boolean boolean11 = slimTableFactory1.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap12 = slimTableFactory1.tableTypes;
        java.lang.String str14 = slimTableFactory1.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.Table table16 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory1.parseDefineTableTypeRow(table16, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(slimTableFactory15);
    }

    @Test
    public void test08436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08436");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.lang.String str4 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory0.copy();
        java.lang.String str7 = slimTableFactory0.makeTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass9 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory0.copy();
        java.lang.String str12 = slimTableFactory0.makeTableType("hi!");
        java.lang.String str14 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.Table table17 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory0.parseDefineTableTypeRow(table17, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertNotNull(strMap16);
    }

    @Test
    public void test08437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08437");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        boolean boolean4 = slimTableFactory0.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap5 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.Table table6 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory0.parseDefineTableTypeRow(table6, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strMap5);
    }

    @Test
    public void test08438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08438");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.lang.String str4 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory5.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap7 = slimTableFactory6.tableTypes;
        java.lang.String str9 = slimTableFactory6.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass12 = slimTableFactory10.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass15 = slimTableFactory13.getTableType("");
        java.lang.String str17 = slimTableFactory13.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory13.copy();
        boolean boolean20 = slimTableFactory13.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap21 = slimTableFactory13.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap22 = slimTableFactory13.tableTypeArrays;
        slimTableFactory10.tableTypeArrays = strMap22;
        slimTableFactory6.tableTypeArrays = strMap22;
        java.util.Map<java.lang.String, java.lang.String> strMap25 = slimTableFactory6.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass29 = slimTableFactory27.getTableType("");
        java.lang.String str31 = slimTableFactory27.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap32 = slimTableFactory27.tableTypeArrays;
        slimTableFactory26.tableTypeArrays = strMap32;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory34 = slimTableFactory26.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory35 = slimTableFactory34.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap36 = slimTableFactory35.tableTypeArrays;
        java.lang.String str38 = slimTableFactory35.makeTableType("hi!");
        java.lang.String str40 = slimTableFactory35.getFullTableName("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass42 = slimTableFactory35.getTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap43 = slimTableFactory35.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory44 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str46 = slimTableFactory44.getFullTableName("hi!");
        java.lang.String str48 = slimTableFactory44.makeTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap49 = slimTableFactory44.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory50 = slimTableFactory44.copy();
        java.lang.String str52 = slimTableFactory44.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap53 = slimTableFactory44.tableTypeArrays;
        slimTableFactory35.tableTypeArrays = strMap53;
        slimTableFactory6.tableTypeArrays = strMap53;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory56 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory57 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass59 = slimTableFactory57.getTableType("");
        java.lang.String str61 = slimTableFactory57.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap62 = slimTableFactory57.tableTypeArrays;
        slimTableFactory56.tableTypeArrays = strMap62;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory64 = slimTableFactory56.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory65 = slimTableFactory56.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap66 = slimTableFactory65.tableTypeArrays;
        slimTableFactory6.tableTypeArrays = strMap66;
        java.lang.String str69 = slimTableFactory6.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory70 = slimTableFactory6.copy();
        fitnesse.testsystems.slim.Table table71 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable72 = slimTableFactory6.parseDefineTableTypeTable(table71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(slimTableFactory18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNull(wildcardClass29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(slimTableFactory34);
        org.junit.Assert.assertNotNull(slimTableFactory35);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "hi!" + "'", str40, "hi!");
        org.junit.Assert.assertNull(wildcardClass42);
        org.junit.Assert.assertNotNull(strMap43);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hi!" + "'", str46, "hi!");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(strMap49);
        org.junit.Assert.assertNotNull(slimTableFactory50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(strMap53);
        org.junit.Assert.assertNull(wildcardClass59);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(strMap62);
        org.junit.Assert.assertNotNull(slimTableFactory64);
        org.junit.Assert.assertNotNull(slimTableFactory65);
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "hi!" + "'", str69, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory70);
    }

    @Test
    public void test08439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08439");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.lang.String str4 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory0.copy();
        java.lang.String str7 = slimTableFactory0.makeTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap8 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory0.copy();
        java.lang.String str11 = slimTableFactory0.getFullTableName("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass13 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.Table table14 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext16 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable17 = slimTableFactory0.makeSlimTable(table14, "", slimTestContext16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNull(wildcardClass13);
    }

    @Test
    public void test08440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08440");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.lang.String str3 = slimTableFactory0.makeTableType("hi!");
        java.lang.String str5 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory6.copy();
        java.lang.String str9 = slimTableFactory6.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory10.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory10.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory10.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap15 = slimTableFactory10.tableTypeArrays;
        java.lang.String str17 = slimTableFactory10.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass20 = slimTableFactory18.getTableType("");
        java.lang.String str22 = slimTableFactory18.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = slimTableFactory18.copy();
        java.lang.String str25 = slimTableFactory18.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap26 = slimTableFactory18.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap27 = slimTableFactory18.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass29 = slimTableFactory18.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap30 = slimTableFactory18.tableTypeArrays;
        java.lang.String str32 = slimTableFactory18.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap33 = slimTableFactory18.tableTypeArrays;
        slimTableFactory10.tableTypeArrays = strMap33;
        slimTableFactory6.tableTypeArrays = strMap33;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory36 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory37 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass39 = slimTableFactory37.getTableType("");
        java.lang.String str41 = slimTableFactory37.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap42 = slimTableFactory37.tableTypeArrays;
        slimTableFactory36.tableTypeArrays = strMap42;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory44 = slimTableFactory36.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory45 = slimTableFactory44.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory46 = slimTableFactory44.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory47 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory48 = slimTableFactory47.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass50 = slimTableFactory48.getTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass52 = slimTableFactory48.getTableType("hi!");
        boolean boolean54 = slimTableFactory48.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap55 = slimTableFactory48.tableTypeArrays;
        slimTableFactory46.tableTypeArrays = strMap55;
        boolean boolean58 = slimTableFactory46.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap59 = slimTableFactory46.tableTypes;
        boolean boolean61 = slimTableFactory46.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory62 = slimTableFactory46.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap63 = slimTableFactory46.tableTypeArrays;
        slimTableFactory6.tableTypeArrays = strMap63;
        fitnesse.testsystems.slim.Table table65 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory6.parseDefineTableTypeRow(table65, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!" + "'", str3, "hi!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNull(wildcardClass20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(slimTableFactory23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNull(wildcardClass29);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNull(wildcardClass39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(strMap42);
        org.junit.Assert.assertNotNull(slimTableFactory44);
        org.junit.Assert.assertNotNull(slimTableFactory45);
        org.junit.Assert.assertNotNull(slimTableFactory46);
        org.junit.Assert.assertNotNull(slimTableFactory48);
        org.junit.Assert.assertNull(wildcardClass50);
        org.junit.Assert.assertNull(wildcardClass52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(strMap55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(strMap59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(slimTableFactory62);
        org.junit.Assert.assertNotNull(strMap63);
    }

    @Test
    public void test08441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08441");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap5 = slimTableFactory4.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory4.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory6.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory6.tableTypeArrays;
        java.lang.String str10 = slimTableFactory6.getFullTableName("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass12 = slimTableFactory6.getTableType("hi!");
        boolean boolean14 = slimTableFactory6.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str17 = slimTableFactory15.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap18 = slimTableFactory15.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory15.copy();
        boolean boolean21 = slimTableFactory15.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap22 = slimTableFactory15.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap23 = slimTableFactory15.tableTypeArrays;
        slimTableFactory6.tableTypeArrays = strMap23;
        java.lang.String str26 = slimTableFactory6.makeTableType("hi!");
        java.lang.String str28 = slimTableFactory6.getFullTableName("hi!");
        fitnesse.testsystems.slim.Table table29 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable30 = slimTableFactory6.parseDefineTableTypeTable(table29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(slimTableFactory19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
    }

    @Test
    public void test08442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08442");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.lang.String str4 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory0.copy();
        boolean boolean7 = slimTableFactory0.hasColon("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass9 = slimTableFactory0.getTableType("");
        java.lang.String str11 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory13.tableTypeArrays;
        fitnesse.testsystems.slim.Table table15 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext17 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable18 = slimTableFactory13.makeSlimTable(table15, "hi!", slimTestContext17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertNotNull(slimTableFactory13);
        org.junit.Assert.assertNotNull(strMap14);
    }

    @Test
    public void test08443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08443");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.lang.String str4 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass7 = slimTableFactory5.getTableType("");
        java.lang.String str9 = slimTableFactory5.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory5.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap11 = slimTableFactory5.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str14 = slimTableFactory12.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap15 = slimTableFactory12.tableTypeArrays;
        java.lang.String str17 = slimTableFactory12.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap18 = slimTableFactory12.tableTypeArrays;
        java.lang.String str20 = slimTableFactory12.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap21 = slimTableFactory12.tableTypeArrays;
        slimTableFactory5.tableTypeArrays = strMap21;
        java.util.Map<java.lang.String, java.lang.String> strMap23 = slimTableFactory5.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap23;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass26 = slimTableFactory0.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = slimTableFactory0.copy();
        boolean boolean29 = slimTableFactory27.hasColon("");
        java.lang.String str31 = slimTableFactory27.makeTableType("hi!");
        boolean boolean33 = slimTableFactory27.hasColon("");
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(wildcardClass7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNull(wildcardClass26);
        org.junit.Assert.assertNotNull(slimTableFactory27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test08444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08444");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory2 = slimTableFactory0.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass4 = slimTableFactory0.getTableType("hi!");
        java.lang.String str6 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str10 = slimTableFactory8.getFullTableName("hi!");
        java.lang.String str12 = slimTableFactory8.makeTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap13 = slimTableFactory8.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory8.copy();
        java.lang.String str16 = slimTableFactory8.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str19 = slimTableFactory17.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap20 = slimTableFactory17.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str23 = slimTableFactory21.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap24 = slimTableFactory21.tableTypeArrays;
        slimTableFactory17.tableTypeArrays = strMap24;
        java.lang.String str27 = slimTableFactory17.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap28 = slimTableFactory17.tableTypeArrays;
        slimTableFactory8.tableTypeArrays = strMap28;
        slimTableFactory0.tableTypeArrays = strMap28;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory31 = slimTableFactory0.copy();
        java.lang.String str33 = slimTableFactory31.getFullTableName("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass35 = slimTableFactory31.getTableType("");
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(slimTableFactory2);
        org.junit.Assert.assertNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNotNull(slimTableFactory31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNull(wildcardClass35);
    }

    @Test
    public void test08445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08445");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.lang.String str4 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap6 = slimTableFactory5.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory5.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory5.tableTypeArrays;
        java.lang.String str10 = slimTableFactory5.makeTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass12 = slimTableFactory5.getTableType("");
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(wildcardClass12);
    }

    @Test
    public void test08446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08446");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap5 = slimTableFactory4.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory4.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory6.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory6.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass11 = slimTableFactory9.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory12.getTableType("");
        java.lang.String str16 = slimTableFactory12.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = slimTableFactory12.copy();
        boolean boolean19 = slimTableFactory12.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap20 = slimTableFactory12.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap21 = slimTableFactory12.tableTypeArrays;
        slimTableFactory9.tableTypeArrays = strMap21;
        slimTableFactory6.tableTypeArrays = strMap21;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass26 = slimTableFactory24.getTableType("");
        java.lang.String str28 = slimTableFactory24.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory29 = slimTableFactory24.copy();
        boolean boolean31 = slimTableFactory24.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap32 = slimTableFactory24.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory33 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory34 = slimTableFactory33.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass36 = slimTableFactory34.getTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass38 = slimTableFactory34.getTableType("hi!");
        boolean boolean40 = slimTableFactory34.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap41 = slimTableFactory34.tableTypeArrays;
        slimTableFactory24.tableTypeArrays = strMap41;
        slimTableFactory6.tableTypeArrays = strMap41;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap44 = slimTableFactory6.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap45 = slimTableFactory6.tableTypeArrays;
        fitnesse.testsystems.slim.Table table46 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext48 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable49 = slimTableFactory6.makeSlimTable(table46, "hi!", slimTestContext48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(slimTableFactory17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNull(wildcardClass26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(slimTableFactory29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(slimTableFactory34);
        org.junit.Assert.assertNull(wildcardClass36);
        org.junit.Assert.assertNull(wildcardClass38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertNotNull(strMap44);
        org.junit.Assert.assertNotNull(strMap45);
    }

    @Test
    public void test08447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08447");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.lang.String str4 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory0.copy();
        java.lang.String str7 = slimTableFactory0.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap9 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory0.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass12 = slimTableFactory0.getTableType("hi!");
        java.lang.String str14 = slimTableFactory0.getFullTableName("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass16 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.Table table17 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory0.parseDefineTableTypeRow(table17, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertNull(wildcardClass16);
    }

    @Test
    public void test08448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08448");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.lang.String str4 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory0.copy();
        boolean boolean7 = slimTableFactory0.hasColon("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass9 = slimTableFactory0.getTableType("");
        java.lang.String str11 = slimTableFactory0.makeTableType("");
        boolean boolean13 = slimTableFactory0.hasColon("hi!");
        java.lang.String str15 = slimTableFactory0.makeTableType("hi!");
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
    }

    @Test
    public void test08449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08449");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.lang.String str4 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory0.copy();
        boolean boolean7 = slimTableFactory0.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory0.tableTypeArrays;
        java.lang.String str10 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap12 = slimTableFactory0.tableTypes;
        java.lang.String str14 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.Table table16 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable17 = slimTableFactory0.parseDefineTableTypeTable(table16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(slimTableFactory15);
    }

    @Test
    public void test08450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08450");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap5 = slimTableFactory4.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory4.copy();
        java.lang.String str8 = slimTableFactory6.getFullTableName("hi!");
        java.lang.String str10 = slimTableFactory6.makeTableType("hi!");
        java.lang.String str12 = slimTableFactory6.getFullTableName("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory6.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass18 = slimTableFactory16.getTableType("");
        java.lang.String str20 = slimTableFactory16.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap21 = slimTableFactory16.tableTypeArrays;
        slimTableFactory15.tableTypeArrays = strMap21;
        slimTableFactory6.tableTypeArrays = strMap21;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass27 = slimTableFactory25.getTableType("");
        java.lang.String str29 = slimTableFactory25.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap30 = slimTableFactory25.tableTypeArrays;
        slimTableFactory24.tableTypeArrays = strMap30;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory32 = slimTableFactory24.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory33 = slimTableFactory24.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap34 = slimTableFactory33.tableTypeArrays;
        slimTableFactory6.tableTypeArrays = strMap34;
        java.lang.String str37 = slimTableFactory6.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory38 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str40 = slimTableFactory38.getFullTableName("hi!");
        java.lang.String str42 = slimTableFactory38.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory43 = slimTableFactory38.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap44 = slimTableFactory43.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory45 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass47 = slimTableFactory45.getTableType("");
        java.lang.String str49 = slimTableFactory45.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap50 = slimTableFactory45.tableTypeArrays;
        slimTableFactory43.tableTypeArrays = strMap50;
        slimTableFactory6.tableTypeArrays = strMap50;
        java.lang.String str54 = slimTableFactory6.makeTableType("");
        java.lang.String str56 = slimTableFactory6.getFullTableName("");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNull(wildcardClass27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(slimTableFactory32);
        org.junit.Assert.assertNotNull(slimTableFactory33);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "hi!" + "'", str40, "hi!");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(slimTableFactory43);
        org.junit.Assert.assertNotNull(strMap44);
        org.junit.Assert.assertNull(wildcardClass47);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
    }

    @Test
    public void test08451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08451");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str6 = slimTableFactory4.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory4.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap7;
        java.lang.String str10 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str13 = slimTableFactory11.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory11.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str17 = slimTableFactory15.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap18 = slimTableFactory15.tableTypeArrays;
        slimTableFactory11.tableTypeArrays = strMap18;
        slimTableFactory0.tableTypeArrays = strMap18;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str23 = slimTableFactory21.getFullTableName("hi!");
        java.lang.String str25 = slimTableFactory21.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = slimTableFactory21.copy();
        java.lang.String str28 = slimTableFactory21.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory29 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str31 = slimTableFactory29.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap32 = slimTableFactory29.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory33 = slimTableFactory29.copy();
        boolean boolean35 = slimTableFactory29.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap36 = slimTableFactory29.tableTypeArrays;
        slimTableFactory21.tableTypeArrays = strMap36;
        slimTableFactory0.tableTypeArrays = strMap36;
        fitnesse.testsystems.slim.Table table39 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext41 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable42 = slimTableFactory0.makeSlimTable(table39, "", slimTestContext41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(slimTableFactory26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(slimTableFactory33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(strMap36);
    }

    @Test
    public void test08452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08452");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass3 = slimTableFactory1.getTableType("");
        java.lang.String str5 = slimTableFactory1.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory1.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap6;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory0.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass11 = slimTableFactory9.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap12 = slimTableFactory9.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str15 = slimTableFactory13.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory13.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = slimTableFactory13.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap18 = slimTableFactory17.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory17.copy();
        java.lang.String str21 = slimTableFactory19.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = slimTableFactory19.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap23 = slimTableFactory19.tableTypeArrays;
        slimTableFactory9.tableTypeArrays = strMap23;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap25 = slimTableFactory9.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap26 = slimTableFactory9.tableTypeArrays;
        java.lang.String str28 = slimTableFactory9.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap29 = slimTableFactory9.tableTypeArrays;
        fitnesse.testsystems.slim.Table table30 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory9.parseDefineTableTypeRow(table30, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(slimTableFactory17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(slimTableFactory19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory22);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(strMap29);
    }

    @Test
    public void test08453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08453");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass3 = slimTableFactory1.getTableType("");
        java.lang.String str5 = slimTableFactory1.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory1.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap6;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory0.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass11 = slimTableFactory9.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap12 = slimTableFactory9.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str15 = slimTableFactory13.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory13.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = slimTableFactory13.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap18 = slimTableFactory17.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory17.copy();
        java.lang.String str21 = slimTableFactory19.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = slimTableFactory19.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap23 = slimTableFactory19.tableTypeArrays;
        slimTableFactory9.tableTypeArrays = strMap23;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap25 = slimTableFactory9.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap26 = slimTableFactory9.tableTypeArrays;
        java.lang.String str28 = slimTableFactory9.getFullTableName("");
        java.lang.String str30 = slimTableFactory9.makeTableType("");
        java.lang.String str32 = slimTableFactory9.makeTableType("");
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(slimTableFactory17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(slimTableFactory19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory22);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
    }

    @Test
    public void test08454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08454");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.lang.String str4 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap6 = slimTableFactory5.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory5.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass9 = slimTableFactory7.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory7.tableTypeArrays;
        java.lang.String str12 = slimTableFactory7.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory7.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory7.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap15 = slimTableFactory14.tableTypes;
        fitnesse.testsystems.slim.Table table16 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable17 = slimTableFactory14.parseDefineTableTypeTable(table16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory13);
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertNotNull(strMap15);
    }

    @Test
    public void test08455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08455");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory0.copy();
        boolean boolean6 = slimTableFactory0.hasColon("hi!");
        boolean boolean8 = slimTableFactory0.hasColon("");
        java.lang.String str10 = slimTableFactory0.makeTableType("");
        java.lang.String str12 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory0.copy();
        boolean boolean16 = slimTableFactory14.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap17 = slimTableFactory14.tableTypes;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap18 = slimTableFactory14.tableTypes;
        java.lang.String str20 = slimTableFactory14.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = slimTableFactory14.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str24 = slimTableFactory22.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap25 = slimTableFactory22.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = slimTableFactory22.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap27 = slimTableFactory26.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = slimTableFactory26.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = slimTableFactory28.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap30 = slimTableFactory28.tableTypeArrays;
        java.lang.String str32 = slimTableFactory28.getFullTableName("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass34 = slimTableFactory28.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory35 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass37 = slimTableFactory35.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory38 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass40 = slimTableFactory38.getTableType("");
        java.lang.String str42 = slimTableFactory38.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory43 = slimTableFactory38.copy();
        boolean boolean45 = slimTableFactory38.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap46 = slimTableFactory38.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap47 = slimTableFactory38.tableTypeArrays;
        slimTableFactory35.tableTypeArrays = strMap47;
        boolean boolean50 = slimTableFactory35.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass52 = slimTableFactory35.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap53 = slimTableFactory35.tableTypeArrays;
        slimTableFactory28.tableTypeArrays = strMap53;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory55 = slimTableFactory28.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass57 = slimTableFactory55.getTableType("");
        java.lang.String str59 = slimTableFactory55.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory60 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass62 = slimTableFactory60.getTableType("");
        boolean boolean64 = slimTableFactory60.hasColon("");
        boolean boolean66 = slimTableFactory60.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass68 = slimTableFactory60.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory69 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str71 = slimTableFactory69.getFullTableName("hi!");
        java.lang.String str73 = slimTableFactory69.makeTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap74 = slimTableFactory69.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory75 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass77 = slimTableFactory75.getTableType("");
        java.lang.String str79 = slimTableFactory75.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap80 = slimTableFactory75.tableTypeArrays;
        slimTableFactory69.tableTypeArrays = strMap80;
        slimTableFactory60.tableTypeArrays = strMap80;
        slimTableFactory55.tableTypeArrays = strMap80;
        slimTableFactory14.tableTypeArrays = strMap80;
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(slimTableFactory13);
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory21);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(slimTableFactory26);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(slimTableFactory28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
        org.junit.Assert.assertNull(wildcardClass34);
        org.junit.Assert.assertNull(wildcardClass37);
        org.junit.Assert.assertNull(wildcardClass40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(slimTableFactory43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(strMap46);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(wildcardClass52);
        org.junit.Assert.assertNotNull(strMap53);
        org.junit.Assert.assertNotNull(slimTableFactory55);
        org.junit.Assert.assertNull(wildcardClass57);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNull(wildcardClass62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(wildcardClass68);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "hi!" + "'", str71, "hi!");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(strMap74);
        org.junit.Assert.assertNull(wildcardClass77);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNotNull(strMap80);
    }

    @Test
    public void test08456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08456");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass5 = slimTableFactory3.getTableType("");
        java.lang.String str7 = slimTableFactory3.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory3.copy();
        boolean boolean10 = slimTableFactory3.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory3.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap12 = slimTableFactory3.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap12;
        boolean boolean15 = slimTableFactory0.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap16 = slimTableFactory0.tableTypes;
        boolean boolean18 = slimTableFactory0.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass23 = slimTableFactory21.getTableType("");
        java.lang.String str25 = slimTableFactory21.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap26 = slimTableFactory21.tableTypeArrays;
        slimTableFactory20.tableTypeArrays = strMap26;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap28 = slimTableFactory20.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap29 = slimTableFactory20.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap29;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass32 = slimTableFactory0.getTableType("hi!");
        fitnesse.testsystems.slim.Table table33 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory0.parseDefineTableTypeRow(table33, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(slimTableFactory19);
        org.junit.Assert.assertNull(wildcardClass23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNull(wildcardClass32);
    }

    @Test
    public void test08457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08457");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass3 = slimTableFactory1.getTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass5 = slimTableFactory1.getTableType("hi!");
        boolean boolean7 = slimTableFactory1.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory1.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory1.copy();
        boolean boolean11 = slimTableFactory1.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory1.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap13 = slimTableFactory12.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass15 = slimTableFactory12.getTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass17 = slimTableFactory12.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory12.copy();
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertNull(wildcardClass17);
        org.junit.Assert.assertNotNull(slimTableFactory18);
    }

    @Test
    public void test08458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08458");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        boolean boolean4 = slimTableFactory0.hasColon("");
        boolean boolean6 = slimTableFactory0.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass8 = slimTableFactory0.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str11 = slimTableFactory9.getFullTableName("hi!");
        java.lang.String str13 = slimTableFactory9.makeTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap14 = slimTableFactory9.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass17 = slimTableFactory15.getTableType("");
        java.lang.String str19 = slimTableFactory15.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap20 = slimTableFactory15.tableTypeArrays;
        slimTableFactory9.tableTypeArrays = strMap20;
        slimTableFactory0.tableTypeArrays = strMap20;
        boolean boolean24 = slimTableFactory0.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = slimTableFactory0.copy();
        java.lang.String str27 = slimTableFactory25.getFullTableName("hi!");
        boolean boolean29 = slimTableFactory25.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap30 = slimTableFactory25.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory31 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str33 = slimTableFactory31.getFullTableName("hi!");
        java.lang.String str35 = slimTableFactory31.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap36 = null;
        slimTableFactory31.tableTypeArrays = strMap36;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory38 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str40 = slimTableFactory38.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap41 = slimTableFactory38.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory42 = slimTableFactory38.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap43 = slimTableFactory42.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory44 = slimTableFactory42.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap45 = slimTableFactory44.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap46 = slimTableFactory44.tableTypeArrays;
        slimTableFactory31.tableTypeArrays = strMap46;
        slimTableFactory25.tableTypeArrays = strMap46;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass50 = slimTableFactory25.getTableType("hi!");
        java.lang.String str52 = slimTableFactory25.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory53 = slimTableFactory25.copy();
        fitnesse.testsystems.slim.Table table54 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable55 = slimTableFactory53.parseDefineTableTypeTable(table54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNull(wildcardClass17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(slimTableFactory25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "hi!" + "'", str40, "hi!");
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertNotNull(slimTableFactory42);
        org.junit.Assert.assertNotNull(strMap43);
        org.junit.Assert.assertNotNull(slimTableFactory44);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNotNull(strMap46);
        org.junit.Assert.assertNull(wildcardClass50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(slimTableFactory53);
    }

    @Test
    public void test08459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08459");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        boolean boolean4 = slimTableFactory0.hasColon("");
        boolean boolean6 = slimTableFactory0.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass8 = slimTableFactory0.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str11 = slimTableFactory9.getFullTableName("hi!");
        java.lang.String str13 = slimTableFactory9.makeTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap14 = slimTableFactory9.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass17 = slimTableFactory15.getTableType("");
        java.lang.String str19 = slimTableFactory15.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap20 = slimTableFactory15.tableTypeArrays;
        slimTableFactory9.tableTypeArrays = strMap20;
        slimTableFactory0.tableTypeArrays = strMap20;
        boolean boolean24 = slimTableFactory0.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = slimTableFactory0.copy();
        boolean boolean27 = slimTableFactory25.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap28 = slimTableFactory25.tableTypes;
        java.lang.String str30 = slimTableFactory25.getFullTableName("hi!");
        java.lang.String str32 = slimTableFactory25.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap33 = slimTableFactory25.tableTypes;
        fitnesse.testsystems.slim.Table table34 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext36 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable37 = slimTableFactory25.makeSlimTable(table34, "hi!", slimTestContext36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNull(wildcardClass17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(slimTableFactory25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(strMap33);
    }

    @Test
    public void test08460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08460");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.lang.String str3 = slimTableFactory0.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap4 = slimTableFactory0.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass6 = slimTableFactory0.getTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass8 = slimTableFactory0.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass11 = slimTableFactory9.getTableType("");
        java.lang.String str13 = slimTableFactory9.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory9.copy();
        boolean boolean16 = slimTableFactory9.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap17 = slimTableFactory9.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory18.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass21 = slimTableFactory19.getTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass23 = slimTableFactory19.getTableType("hi!");
        boolean boolean25 = slimTableFactory19.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap26 = slimTableFactory19.tableTypeArrays;
        slimTableFactory9.tableTypeArrays = strMap26;
        slimTableFactory0.tableTypeArrays = strMap26;
        java.util.Map<java.lang.String, java.lang.String> strMap29 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory30 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap31 = slimTableFactory0.tableTypeArrays;
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!" + "'", str3, "hi!");
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(slimTableFactory19);
        org.junit.Assert.assertNull(wildcardClass21);
        org.junit.Assert.assertNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(slimTableFactory30);
        org.junit.Assert.assertNotNull(strMap31);
    }

    @Test
    public void test08461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08461");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.lang.String str4 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory0.copy();
        boolean boolean7 = slimTableFactory0.hasColon("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass9 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory0.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass12 = slimTableFactory10.getTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory10.getTableType("hi!");
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNull(wildcardClass14);
    }

    @Test
    public void test08462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08462");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass3 = slimTableFactory1.getTableType("");
        java.lang.String str5 = slimTableFactory1.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory1.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap6;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory0.copy();
        java.lang.String str10 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory0.tableTypeArrays;
        boolean boolean13 = slimTableFactory0.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass15 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory0.copy();
        java.lang.String str18 = slimTableFactory0.makeTableType("");
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
    }

    @Test
    public void test08463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08463");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap5 = slimTableFactory4.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory4.copy();
        java.lang.String str8 = slimTableFactory6.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory6.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory9.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap11 = slimTableFactory9.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str14 = slimTableFactory12.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap15 = slimTableFactory12.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory12.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap17 = slimTableFactory16.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory16.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap19 = slimTableFactory18.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap20 = slimTableFactory18.tableTypeArrays;
        java.lang.String str22 = slimTableFactory18.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass26 = slimTableFactory24.getTableType("");
        java.lang.String str28 = slimTableFactory24.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap29 = slimTableFactory24.tableTypeArrays;
        slimTableFactory23.tableTypeArrays = strMap29;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap31 = slimTableFactory23.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory32 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str34 = slimTableFactory32.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap35 = slimTableFactory32.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory36 = slimTableFactory32.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap37 = slimTableFactory36.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory38 = slimTableFactory36.copy();
        java.lang.String str40 = slimTableFactory38.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap41 = slimTableFactory38.tableTypeArrays;
        slimTableFactory23.tableTypeArrays = strMap41;
        slimTableFactory18.tableTypeArrays = strMap41;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory44 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory45 = slimTableFactory44.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass47 = slimTableFactory45.getTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass49 = slimTableFactory45.getTableType("hi!");
        boolean boolean51 = slimTableFactory45.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory52 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str54 = slimTableFactory52.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap55 = slimTableFactory52.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory56 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str58 = slimTableFactory56.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap59 = slimTableFactory56.tableTypeArrays;
        slimTableFactory52.tableTypeArrays = strMap59;
        java.lang.String str62 = slimTableFactory52.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory63 = slimTableFactory52.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass65 = slimTableFactory63.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory66 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass68 = slimTableFactory66.getTableType("");
        boolean boolean70 = slimTableFactory66.hasColon("");
        boolean boolean72 = slimTableFactory66.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass74 = slimTableFactory66.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory75 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str77 = slimTableFactory75.getFullTableName("hi!");
        java.lang.String str79 = slimTableFactory75.makeTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap80 = slimTableFactory75.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory81 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass83 = slimTableFactory81.getTableType("");
        java.lang.String str85 = slimTableFactory81.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap86 = slimTableFactory81.tableTypeArrays;
        slimTableFactory75.tableTypeArrays = strMap86;
        slimTableFactory66.tableTypeArrays = strMap86;
        slimTableFactory63.tableTypeArrays = strMap86;
        slimTableFactory45.tableTypeArrays = strMap86;
        java.lang.String str92 = slimTableFactory45.makeTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass94 = slimTableFactory45.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap95 = slimTableFactory45.tableTypeArrays;
        slimTableFactory18.tableTypeArrays = strMap95;
        slimTableFactory9.tableTypeArrays = strMap95;
        boolean boolean99 = slimTableFactory9.hasColon("hi!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(slimTableFactory18);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertNull(wildcardClass26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(slimTableFactory36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(slimTableFactory38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "hi!" + "'", str40, "hi!");
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertNotNull(slimTableFactory45);
        org.junit.Assert.assertNull(wildcardClass47);
        org.junit.Assert.assertNull(wildcardClass49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hi!" + "'", str54, "hi!");
        org.junit.Assert.assertNotNull(strMap55);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "hi!" + "'", str58, "hi!");
        org.junit.Assert.assertNotNull(strMap59);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(slimTableFactory63);
        org.junit.Assert.assertNull(wildcardClass65);
        org.junit.Assert.assertNull(wildcardClass68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(wildcardClass74);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "hi!" + "'", str77, "hi!");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNotNull(strMap80);
        org.junit.Assert.assertNull(wildcardClass83);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertNotNull(strMap86);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
        org.junit.Assert.assertNull(wildcardClass94);
        org.junit.Assert.assertNotNull(strMap95);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test08464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08464");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        boolean boolean4 = slimTableFactory0.hasColon("");
        boolean boolean6 = slimTableFactory0.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass8 = slimTableFactory0.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str11 = slimTableFactory9.getFullTableName("hi!");
        java.lang.String str13 = slimTableFactory9.makeTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap14 = slimTableFactory9.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass17 = slimTableFactory15.getTableType("");
        java.lang.String str19 = slimTableFactory15.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap20 = slimTableFactory15.tableTypeArrays;
        slimTableFactory9.tableTypeArrays = strMap20;
        slimTableFactory0.tableTypeArrays = strMap20;
        boolean boolean24 = slimTableFactory0.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap25 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = slimTableFactory26.copy();
        fitnesse.testsystems.slim.Table table28 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory27.parseDefineTableTypeRow(table28, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNull(wildcardClass17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(slimTableFactory26);
        org.junit.Assert.assertNotNull(slimTableFactory27);
    }

    @Test
    public void test08465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08465");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap5 = slimTableFactory4.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory4.copy();
        java.lang.String str8 = slimTableFactory6.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory6.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = null;
        slimTableFactory9.tableTypeArrays = strMap10;
        boolean boolean13 = slimTableFactory9.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass16 = slimTableFactory14.getTableType("");
        java.lang.String str18 = slimTableFactory14.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory14.copy();
        boolean boolean21 = slimTableFactory14.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = slimTableFactory14.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap23 = slimTableFactory22.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass27 = slimTableFactory25.getTableType("");
        java.lang.String str29 = slimTableFactory25.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap30 = slimTableFactory25.tableTypeArrays;
        slimTableFactory24.tableTypeArrays = strMap30;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory32 = slimTableFactory24.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap33 = slimTableFactory24.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory34 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str36 = slimTableFactory34.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap37 = slimTableFactory34.tableTypeArrays;
        java.lang.String str39 = slimTableFactory34.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap40 = slimTableFactory34.tableTypeArrays;
        slimTableFactory24.tableTypeArrays = strMap40;
        slimTableFactory22.tableTypeArrays = strMap40;
        slimTableFactory9.tableTypeArrays = strMap40;
        java.lang.String str45 = slimTableFactory9.getFullTableName("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass47 = slimTableFactory9.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory48 = slimTableFactory9.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory49 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str51 = slimTableFactory49.getFullTableName("hi!");
        java.lang.String str53 = slimTableFactory49.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory54 = slimTableFactory49.copy();
        java.lang.String str56 = slimTableFactory54.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap57 = slimTableFactory54.tableTypes;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap58 = slimTableFactory54.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory59 = slimTableFactory54.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory60 = slimTableFactory54.copy();
        java.lang.String str62 = slimTableFactory54.getFullTableName("");
        boolean boolean64 = slimTableFactory54.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap65 = slimTableFactory54.tableTypeArrays;
        slimTableFactory48.tableTypeArrays = strMap65;
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(wildcardClass16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(slimTableFactory19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(slimTableFactory22);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNull(wildcardClass27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(slimTableFactory32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNull(wildcardClass47);
        org.junit.Assert.assertNotNull(slimTableFactory48);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "hi!" + "'", str51, "hi!");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(slimTableFactory54);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hi!" + "'", str56, "hi!");
        org.junit.Assert.assertNotNull(strMap57);
        org.junit.Assert.assertNotNull(strMap58);
        org.junit.Assert.assertNotNull(slimTableFactory59);
        org.junit.Assert.assertNotNull(slimTableFactory60);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(strMap65);
    }

    @Test
    public void test08466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08466");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass3 = slimTableFactory1.getTableType("");
        java.lang.String str5 = slimTableFactory1.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory1.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap6;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap8 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str11 = slimTableFactory9.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap12 = slimTableFactory9.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory9.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap14 = slimTableFactory13.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory13.copy();
        java.lang.String str17 = slimTableFactory15.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap18 = slimTableFactory15.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap18;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory0.copy();
        java.lang.String str22 = slimTableFactory0.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str25 = slimTableFactory23.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap26 = slimTableFactory23.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = slimTableFactory23.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = slimTableFactory23.copy();
        java.lang.String str30 = slimTableFactory28.makeTableType("hi!");
        boolean boolean32 = slimTableFactory28.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap33 = slimTableFactory28.tableTypes;
        java.lang.String str35 = slimTableFactory28.makeTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass37 = slimTableFactory28.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap38 = slimTableFactory28.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap38;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap40 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.Table table41 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext43 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable44 = slimTableFactory0.makeSlimTable(table41, "hi!", slimTestContext43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(slimTableFactory13);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(slimTableFactory20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(slimTableFactory27);
        org.junit.Assert.assertNotNull(slimTableFactory28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNull(wildcardClass37);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertNotNull(strMap40);
    }

    @Test
    public void test08467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08467");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.lang.String str3 = slimTableFactory0.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap4 = slimTableFactory0.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass6 = slimTableFactory0.getTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass8 = slimTableFactory0.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str11 = slimTableFactory9.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap12 = slimTableFactory9.tableTypeArrays;
        java.lang.String str14 = slimTableFactory9.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass17 = slimTableFactory15.getTableType("");
        boolean boolean19 = slimTableFactory15.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap20 = slimTableFactory15.tableTypeArrays;
        slimTableFactory9.tableTypeArrays = strMap20;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass25 = slimTableFactory23.getTableType("");
        java.lang.String str27 = slimTableFactory23.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap28 = slimTableFactory23.tableTypeArrays;
        slimTableFactory22.tableTypeArrays = strMap28;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory30 = slimTableFactory22.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory31 = slimTableFactory30.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap32 = slimTableFactory31.tableTypeArrays;
        slimTableFactory9.tableTypeArrays = strMap32;
        slimTableFactory0.tableTypeArrays = strMap32;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap35 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.Table table36 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory0.parseDefineTableTypeRow(table36, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!" + "'", str3, "hi!");
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNull(wildcardClass6);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNull(wildcardClass17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNull(wildcardClass25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertNotNull(slimTableFactory30);
        org.junit.Assert.assertNotNull(slimTableFactory31);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(strMap35);
    }

    @Test
    public void test08468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08468");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str6 = slimTableFactory4.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory4.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap7;
        java.lang.String str10 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap12 = slimTableFactory0.tableTypes;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap13 = slimTableFactory0.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass15 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = slimTableFactory0.copy();
        java.lang.String str19 = slimTableFactory0.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap20 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap22 = slimTableFactory0.tableTypes;
        java.lang.String str24 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = slimTableFactory0.copy();
        java.lang.String str27 = slimTableFactory0.makeTableType("");
        java.lang.String str29 = slimTableFactory0.makeTableType("");
        boolean boolean31 = slimTableFactory0.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory32 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap33 = slimTableFactory0.tableTypes;
        java.lang.Class<?> wildcardClass34 = slimTableFactory0.getClass();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(slimTableFactory17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(slimTableFactory21);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(slimTableFactory25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(slimTableFactory32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test08469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08469");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.lang.String str4 = slimTableFactory0.makeTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap5 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory0.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass8 = slimTableFactory0.getTableType("hi!");
        java.lang.String str10 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap12 = slimTableFactory0.tableTypes;
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNotNull(strMap12);
    }

    @Test
    public void test08470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08470");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass3 = slimTableFactory1.getTableType("");
        java.lang.String str5 = slimTableFactory1.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory1.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap6;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        boolean boolean11 = slimTableFactory8.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap12 = slimTableFactory8.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory8.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory8.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory15.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap17 = slimTableFactory15.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap18 = slimTableFactory15.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass20 = slimTableFactory15.getTableType("hi!");
        boolean boolean22 = slimTableFactory15.hasColon("hi!");
        java.lang.String str24 = slimTableFactory15.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass27 = slimTableFactory25.getTableType("");
        java.lang.String str29 = slimTableFactory25.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory30 = slimTableFactory25.copy();
        boolean boolean32 = slimTableFactory25.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap33 = slimTableFactory25.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap34 = slimTableFactory25.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory35 = slimTableFactory25.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory36 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str38 = slimTableFactory36.getFullTableName("hi!");
        java.lang.String str40 = slimTableFactory36.makeTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap41 = slimTableFactory36.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory42 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass44 = slimTableFactory42.getTableType("");
        java.lang.String str46 = slimTableFactory42.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap47 = slimTableFactory42.tableTypeArrays;
        slimTableFactory36.tableTypeArrays = strMap47;
        slimTableFactory35.tableTypeArrays = strMap47;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory50 = slimTableFactory35.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory51 = slimTableFactory35.copy();
        java.lang.String str53 = slimTableFactory51.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory54 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass56 = slimTableFactory54.getTableType("");
        java.lang.String str58 = slimTableFactory54.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory59 = slimTableFactory54.copy();
        boolean boolean61 = slimTableFactory54.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory62 = slimTableFactory54.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap63 = slimTableFactory62.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory64 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory65 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass67 = slimTableFactory65.getTableType("");
        java.lang.String str69 = slimTableFactory65.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap70 = slimTableFactory65.tableTypeArrays;
        slimTableFactory64.tableTypeArrays = strMap70;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory72 = slimTableFactory64.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap73 = slimTableFactory64.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory74 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str76 = slimTableFactory74.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap77 = slimTableFactory74.tableTypeArrays;
        java.lang.String str79 = slimTableFactory74.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap80 = slimTableFactory74.tableTypeArrays;
        slimTableFactory64.tableTypeArrays = strMap80;
        slimTableFactory62.tableTypeArrays = strMap80;
        slimTableFactory51.tableTypeArrays = strMap80;
        slimTableFactory15.tableTypeArrays = strMap80;
        boolean boolean86 = slimTableFactory15.hasColon("hi!");
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNull(wildcardClass27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(slimTableFactory30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNotNull(slimTableFactory35);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertNull(wildcardClass44);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNotNull(slimTableFactory50);
        org.junit.Assert.assertNotNull(slimTableFactory51);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNull(wildcardClass56);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(slimTableFactory59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(slimTableFactory62);
        org.junit.Assert.assertNotNull(strMap63);
        org.junit.Assert.assertNull(wildcardClass67);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(strMap70);
        org.junit.Assert.assertNotNull(slimTableFactory72);
        org.junit.Assert.assertNotNull(strMap73);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "hi!" + "'", str76, "hi!");
        org.junit.Assert.assertNotNull(strMap77);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNotNull(strMap80);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test08471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08471");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.lang.String str4 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap6 = slimTableFactory5.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass9 = slimTableFactory7.getTableType("");
        java.lang.String str11 = slimTableFactory7.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap12 = slimTableFactory7.tableTypeArrays;
        slimTableFactory5.tableTypeArrays = strMap12;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass15 = slimTableFactory5.getTableType("");
        fitnesse.testsystems.slim.Table table16 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable17 = slimTableFactory5.parseDefineTableTypeTable(table16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNull(wildcardClass15);
    }

    @Test
    public void test08472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08472");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str6 = slimTableFactory4.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory4.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory4.copy();
        boolean boolean10 = slimTableFactory4.hasColon("hi!");
        boolean boolean12 = slimTableFactory4.hasColon("");
        java.lang.String str14 = slimTableFactory4.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass18 = slimTableFactory16.getTableType("");
        java.lang.String str20 = slimTableFactory16.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap21 = slimTableFactory16.tableTypeArrays;
        slimTableFactory15.tableTypeArrays = strMap21;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = slimTableFactory15.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = slimTableFactory23.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap25 = slimTableFactory24.tableTypeArrays;
        java.lang.String str27 = slimTableFactory24.makeTableType("hi!");
        boolean boolean29 = slimTableFactory24.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap30 = slimTableFactory24.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory31 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory32 = slimTableFactory31.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = slimTableFactory31.tableTypeArrays;
        slimTableFactory24.tableTypeArrays = strMap33;
        slimTableFactory4.tableTypeArrays = strMap33;
        slimTableFactory0.tableTypeArrays = strMap33;
        java.lang.String str38 = slimTableFactory0.getFullTableName("");
        java.lang.String str40 = slimTableFactory0.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap41 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory42 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory43 = slimTableFactory42.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory44 = slimTableFactory42.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass46 = slimTableFactory42.getTableType("hi!");
        java.lang.String str48 = slimTableFactory42.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap49 = slimTableFactory42.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory50 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str52 = slimTableFactory50.getFullTableName("hi!");
        java.lang.String str54 = slimTableFactory50.makeTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap55 = slimTableFactory50.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory56 = slimTableFactory50.copy();
        java.lang.String str58 = slimTableFactory50.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory59 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str61 = slimTableFactory59.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap62 = slimTableFactory59.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory63 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str65 = slimTableFactory63.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap66 = slimTableFactory63.tableTypeArrays;
        slimTableFactory59.tableTypeArrays = strMap66;
        java.lang.String str69 = slimTableFactory59.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap70 = slimTableFactory59.tableTypeArrays;
        slimTableFactory50.tableTypeArrays = strMap70;
        slimTableFactory42.tableTypeArrays = strMap70;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory73 = slimTableFactory42.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory74 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory75 = slimTableFactory74.copy();
        java.lang.String str77 = slimTableFactory74.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap78 = slimTableFactory74.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory79 = slimTableFactory74.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory80 = slimTableFactory79.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory81 = slimTableFactory80.copy();
        java.lang.String str83 = slimTableFactory81.getFullTableName("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass85 = slimTableFactory81.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap86 = slimTableFactory81.tableTypeArrays;
        slimTableFactory73.tableTypeArrays = strMap86;
        slimTableFactory0.tableTypeArrays = strMap86;
        java.util.Map<java.lang.String, java.lang.String> strMap89 = null;
        slimTableFactory0.tableTypeArrays = strMap89;
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(slimTableFactory23);
        org.junit.Assert.assertNotNull(slimTableFactory24);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(slimTableFactory32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "hi!" + "'", str40, "hi!");
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertNotNull(slimTableFactory43);
        org.junit.Assert.assertNotNull(slimTableFactory44);
        org.junit.Assert.assertNull(wildcardClass46);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "hi!" + "'", str48, "hi!");
        org.junit.Assert.assertNotNull(strMap49);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "hi!" + "'", str52, "hi!");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(strMap55);
        org.junit.Assert.assertNotNull(slimTableFactory56);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "hi!" + "'", str61, "hi!");
        org.junit.Assert.assertNotNull(strMap62);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "hi!" + "'", str65, "hi!");
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(strMap70);
        org.junit.Assert.assertNotNull(slimTableFactory73);
        org.junit.Assert.assertNotNull(slimTableFactory75);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "hi!" + "'", str77, "hi!");
        org.junit.Assert.assertNotNull(strMap78);
        org.junit.Assert.assertNotNull(slimTableFactory79);
        org.junit.Assert.assertNotNull(slimTableFactory80);
        org.junit.Assert.assertNotNull(slimTableFactory81);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertNull(wildcardClass85);
        org.junit.Assert.assertNotNull(strMap86);
    }

    @Test
    public void test08473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08473");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass3 = slimTableFactory1.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap4 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str7 = slimTableFactory5.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory5.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory5.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap10 = slimTableFactory9.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory9.copy();
        java.lang.String str13 = slimTableFactory11.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory11.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap15 = slimTableFactory11.tableTypeArrays;
        slimTableFactory1.tableTypeArrays = strMap15;
        java.lang.String str18 = slimTableFactory1.makeTableType("hi!");
        java.lang.String str20 = slimTableFactory1.makeTableType("");
        boolean boolean22 = slimTableFactory1.hasColon("hi!");
        boolean boolean24 = slimTableFactory1.hasColon("");
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test08474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08474");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass3 = slimTableFactory1.getTableType("");
        java.lang.String str5 = slimTableFactory1.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory1.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap6;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap8 = slimTableFactory0.tableTypes;
        boolean boolean10 = slimTableFactory0.hasColon("hi!");
        java.lang.String str12 = slimTableFactory0.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap13 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str16 = slimTableFactory14.getFullTableName("hi!");
        java.lang.String str18 = slimTableFactory14.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory14.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory19.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap21 = slimTableFactory20.tableTypes;
        java.lang.String str23 = slimTableFactory20.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass26 = slimTableFactory24.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass29 = slimTableFactory27.getTableType("");
        java.lang.String str31 = slimTableFactory27.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory32 = slimTableFactory27.copy();
        boolean boolean34 = slimTableFactory27.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap35 = slimTableFactory27.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap36 = slimTableFactory27.tableTypeArrays;
        slimTableFactory24.tableTypeArrays = strMap36;
        slimTableFactory20.tableTypeArrays = strMap36;
        java.util.Map<java.lang.String, java.lang.String> strMap39 = slimTableFactory20.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap39;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory41 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory42 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str44 = slimTableFactory42.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap45 = slimTableFactory42.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory46 = slimTableFactory42.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap47 = slimTableFactory46.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory48 = slimTableFactory46.copy();
        java.lang.String str50 = slimTableFactory48.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory51 = slimTableFactory48.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory52 = slimTableFactory51.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap53 = slimTableFactory52.tableTypeArrays;
        slimTableFactory41.tableTypeArrays = strMap53;
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(slimTableFactory19);
        org.junit.Assert.assertNotNull(slimTableFactory20);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertNull(wildcardClass26);
        org.junit.Assert.assertNull(wildcardClass29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(slimTableFactory32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNotNull(slimTableFactory41);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi!" + "'", str44, "hi!");
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNotNull(slimTableFactory46);
        org.junit.Assert.assertNotNull(strMap47);
        org.junit.Assert.assertNotNull(slimTableFactory48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hi!" + "'", str50, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory51);
        org.junit.Assert.assertNotNull(slimTableFactory52);
        org.junit.Assert.assertNotNull(strMap53);
    }

    @Test
    public void test08475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08475");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory3 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass5 = slimTableFactory3.getTableType("");
        java.lang.String str7 = slimTableFactory3.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory3.copy();
        boolean boolean10 = slimTableFactory3.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory3.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap12 = slimTableFactory3.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap12;
        boolean boolean15 = slimTableFactory0.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap16 = slimTableFactory0.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass18 = slimTableFactory0.getTableType("");
        java.lang.String str20 = slimTableFactory0.getFullTableName("hi!");
        java.lang.String str22 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str25 = slimTableFactory23.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap26 = slimTableFactory23.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = slimTableFactory23.copy();
        boolean boolean29 = slimTableFactory23.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap30 = slimTableFactory23.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap31 = slimTableFactory23.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap32 = slimTableFactory23.tableTypeArrays;
        java.lang.String str34 = slimTableFactory23.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory35 = slimTableFactory23.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory36 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str38 = slimTableFactory36.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap39 = slimTableFactory36.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory40 = slimTableFactory36.copy();
        boolean boolean42 = slimTableFactory36.hasColon("hi!");
        boolean boolean44 = slimTableFactory36.hasColon("");
        java.lang.String str46 = slimTableFactory36.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory47 = slimTableFactory36.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap48 = slimTableFactory47.tableTypeArrays;
        slimTableFactory35.tableTypeArrays = strMap48;
        slimTableFactory0.tableTypeArrays = strMap48;
        java.lang.String str52 = slimTableFactory0.makeTableType("hi!");
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(slimTableFactory27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory35);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNotNull(slimTableFactory40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(slimTableFactory47);
        org.junit.Assert.assertNotNull(strMap48);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "hi!" + "'", str52, "hi!");
    }

    @Test
    public void test08476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08476");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass3 = slimTableFactory1.getTableType("");
        java.lang.String str5 = slimTableFactory1.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory1.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap6;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory0.copy();
        java.lang.String str10 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory0.tableTypeArrays;
        java.lang.String str13 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory0.copy();
        boolean boolean17 = slimTableFactory0.hasColon("hi!");
        fitnesse.testsystems.slim.Table table18 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory0.parseDefineTableTypeRow(table18, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test08477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08477");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.lang.String str4 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory0.copy();
        boolean boolean7 = slimTableFactory0.hasColon("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass9 = slimTableFactory0.getTableType("");
        java.lang.String str11 = slimTableFactory0.makeTableType("");
        java.lang.String str13 = slimTableFactory0.makeTableType("hi!");
        java.lang.String str15 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass18 = slimTableFactory16.getTableType("");
        java.lang.String str20 = slimTableFactory16.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = slimTableFactory16.copy();
        boolean boolean23 = slimTableFactory16.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap24 = slimTableFactory16.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap25 = slimTableFactory16.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap25;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str29 = slimTableFactory27.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap30 = slimTableFactory27.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory31 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str33 = slimTableFactory31.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap34 = slimTableFactory31.tableTypeArrays;
        slimTableFactory27.tableTypeArrays = strMap34;
        java.lang.String str37 = slimTableFactory27.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap38 = slimTableFactory27.tableTypeArrays;
        boolean boolean40 = slimTableFactory27.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory41 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str43 = slimTableFactory41.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap44 = slimTableFactory41.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory45 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str47 = slimTableFactory45.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap48 = slimTableFactory45.tableTypeArrays;
        slimTableFactory41.tableTypeArrays = strMap48;
        java.lang.String str51 = slimTableFactory41.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory52 = slimTableFactory41.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap53 = slimTableFactory41.tableTypes;
        boolean boolean55 = slimTableFactory41.hasColon("hi!");
        boolean boolean57 = slimTableFactory41.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap58 = slimTableFactory41.tableTypeArrays;
        slimTableFactory27.tableTypeArrays = strMap58;
        java.util.Map<java.lang.String, java.lang.String> strMap60 = slimTableFactory27.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap60;
        java.lang.String str63 = slimTableFactory0.getFullTableName("");
        boolean boolean65 = slimTableFactory0.hasColon("");
        fitnesse.testsystems.slim.Table table66 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable67 = slimTableFactory0.parseDefineTableTypeTable(table66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(slimTableFactory21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hi!" + "'", str43, "hi!");
        org.junit.Assert.assertNotNull(strMap44);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hi!" + "'", str47, "hi!");
        org.junit.Assert.assertNotNull(strMap48);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(slimTableFactory52);
        org.junit.Assert.assertNotNull(strMap53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(strMap58);
        org.junit.Assert.assertNotNull(strMap60);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test08478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08478");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str6 = slimTableFactory4.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap7 = slimTableFactory4.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap7;
        java.lang.String str10 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap12 = slimTableFactory0.tableTypes;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap13 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.Table table15 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory0.parseDefineTableTypeRow(table15, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(slimTableFactory11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(slimTableFactory14);
    }

    @Test
    public void test08479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08479");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        boolean boolean4 = slimTableFactory0.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap5 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str8 = slimTableFactory6.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap9 = slimTableFactory6.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory6.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap11 = slimTableFactory10.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory10.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap13 = slimTableFactory12.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap14 = slimTableFactory12.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass17 = slimTableFactory15.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass20 = slimTableFactory18.getTableType("");
        java.lang.String str22 = slimTableFactory18.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = slimTableFactory18.copy();
        boolean boolean25 = slimTableFactory18.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap26 = slimTableFactory18.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap27 = slimTableFactory18.tableTypeArrays;
        slimTableFactory15.tableTypeArrays = strMap27;
        slimTableFactory12.tableTypeArrays = strMap27;
        slimTableFactory0.tableTypeArrays = strMap27;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory31 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory32 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory33 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass35 = slimTableFactory33.getTableType("");
        java.lang.String str37 = slimTableFactory33.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap38 = slimTableFactory33.tableTypeArrays;
        slimTableFactory32.tableTypeArrays = strMap38;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory40 = slimTableFactory32.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory41 = slimTableFactory40.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory42 = slimTableFactory40.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory43 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory44 = slimTableFactory43.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass46 = slimTableFactory44.getTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass48 = slimTableFactory44.getTableType("hi!");
        boolean boolean50 = slimTableFactory44.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap51 = slimTableFactory44.tableTypeArrays;
        slimTableFactory42.tableTypeArrays = strMap51;
        boolean boolean54 = slimTableFactory42.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap55 = slimTableFactory42.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory56 = slimTableFactory42.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap57 = slimTableFactory56.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap57;
        fitnesse.testsystems.slim.Table table59 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable60 = slimTableFactory0.parseDefineTableTypeTable(table59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNull(wildcardClass17);
        org.junit.Assert.assertNull(wildcardClass20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(slimTableFactory23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(strMap27);
        org.junit.Assert.assertNotNull(slimTableFactory31);
        org.junit.Assert.assertNull(wildcardClass35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertNotNull(slimTableFactory40);
        org.junit.Assert.assertNotNull(slimTableFactory41);
        org.junit.Assert.assertNotNull(slimTableFactory42);
        org.junit.Assert.assertNotNull(slimTableFactory44);
        org.junit.Assert.assertNull(wildcardClass46);
        org.junit.Assert.assertNull(wildcardClass48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(strMap51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(strMap55);
        org.junit.Assert.assertNotNull(slimTableFactory56);
        org.junit.Assert.assertNotNull(strMap57);
    }

    @Test
    public void test08480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08480");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass3 = slimTableFactory1.getTableType("");
        java.lang.String str5 = slimTableFactory1.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory1.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap6;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory9.tableTypeArrays;
        java.lang.String str12 = slimTableFactory9.makeTableType("hi!");
        boolean boolean14 = slimTableFactory9.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap15 = slimTableFactory9.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = slimTableFactory16.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap18 = slimTableFactory16.tableTypeArrays;
        slimTableFactory9.tableTypeArrays = strMap18;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap20 = slimTableFactory9.tableTypes;
        boolean boolean22 = slimTableFactory9.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap23 = slimTableFactory9.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = slimTableFactory9.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str27 = slimTableFactory25.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap28 = slimTableFactory25.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory29 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str31 = slimTableFactory29.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap32 = slimTableFactory29.tableTypeArrays;
        slimTableFactory25.tableTypeArrays = strMap32;
        java.lang.String str35 = slimTableFactory25.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory36 = slimTableFactory25.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap37 = slimTableFactory25.tableTypes;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap38 = slimTableFactory25.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass40 = slimTableFactory25.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap41 = slimTableFactory25.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass43 = slimTableFactory25.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory44 = slimTableFactory25.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory45 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str47 = slimTableFactory45.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap48 = slimTableFactory45.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory49 = slimTableFactory45.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap50 = slimTableFactory49.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory51 = slimTableFactory49.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory52 = slimTableFactory51.copy();
        boolean boolean54 = slimTableFactory52.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap55 = slimTableFactory52.tableTypeArrays;
        slimTableFactory44.tableTypeArrays = strMap55;
        slimTableFactory9.tableTypeArrays = strMap55;
        boolean boolean59 = slimTableFactory9.hasColon("hi!");
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(slimTableFactory17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertNotNull(slimTableFactory24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNotNull(strMap28);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(slimTableFactory36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertNull(wildcardClass40);
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertNull(wildcardClass43);
        org.junit.Assert.assertNotNull(slimTableFactory44);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hi!" + "'", str47, "hi!");
        org.junit.Assert.assertNotNull(strMap48);
        org.junit.Assert.assertNotNull(slimTableFactory49);
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertNotNull(slimTableFactory51);
        org.junit.Assert.assertNotNull(slimTableFactory52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(strMap55);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test08481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08481");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass3 = slimTableFactory1.getTableType("");
        java.lang.String str5 = slimTableFactory1.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory1.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap6;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap9 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str12 = slimTableFactory10.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap13 = slimTableFactory10.tableTypeArrays;
        java.lang.String str15 = slimTableFactory10.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap16 = slimTableFactory10.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap16;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap18 = slimTableFactory0.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap19 = slimTableFactory0.tableTypeArrays;
        java.lang.String str21 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.Table table22 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable23 = slimTableFactory0.parseDefineTableTypeTable(table22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(strMap16);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
    }

    @Test
    public void test08482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08482");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.lang.String str4 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory0.copy();
        java.lang.String str7 = slimTableFactory0.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap8 = slimTableFactory0.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap9 = slimTableFactory0.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory0.copy();
        java.lang.String str12 = slimTableFactory10.makeTableType("hi!");
        java.lang.String str14 = slimTableFactory10.getFullTableName("");
        java.lang.String str16 = slimTableFactory10.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = slimTableFactory10.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass19 = slimTableFactory10.getTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass21 = slimTableFactory10.getTableType("hi!");
        fitnesse.testsystems.slim.Table table22 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory10.parseDefineTableTypeRow(table22, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(slimTableFactory17);
        org.junit.Assert.assertNull(wildcardClass19);
        org.junit.Assert.assertNull(wildcardClass21);
    }

    @Test
    public void test08483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08483");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory0.copy();
        boolean boolean7 = slimTableFactory0.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap9 = slimTableFactory8.tableTypes;
        boolean boolean11 = slimTableFactory8.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str14 = slimTableFactory12.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap15 = slimTableFactory12.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory12.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap17 = slimTableFactory16.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory16.copy();
        java.lang.String str20 = slimTableFactory18.getFullTableName("hi!");
        java.lang.String str22 = slimTableFactory18.makeTableType("hi!");
        java.lang.String str24 = slimTableFactory18.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap25 = slimTableFactory18.tableTypeArrays;
        slimTableFactory8.tableTypeArrays = strMap25;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str29 = slimTableFactory27.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap30 = slimTableFactory27.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory31 = slimTableFactory27.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap32 = slimTableFactory31.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory33 = slimTableFactory31.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass35 = slimTableFactory31.getTableType("hi!");
        java.lang.String str37 = slimTableFactory31.getFullTableName("hi!");
        boolean boolean39 = slimTableFactory31.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory40 = slimTableFactory31.copy();
        java.lang.String str42 = slimTableFactory40.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory43 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str45 = slimTableFactory43.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap46 = slimTableFactory43.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory47 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str49 = slimTableFactory47.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap50 = slimTableFactory47.tableTypeArrays;
        slimTableFactory43.tableTypeArrays = strMap50;
        java.lang.String str53 = slimTableFactory43.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory54 = slimTableFactory43.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap55 = slimTableFactory43.tableTypes;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap56 = slimTableFactory43.tableTypes;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass58 = slimTableFactory43.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap59 = slimTableFactory43.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory60 = slimTableFactory43.copy();
        java.lang.String str62 = slimTableFactory43.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap63 = slimTableFactory43.tableTypeArrays;
        slimTableFactory40.tableTypeArrays = strMap63;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass66 = slimTableFactory40.getTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass68 = slimTableFactory40.getTableType("hi!");
        java.lang.String str70 = slimTableFactory40.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory71 = slimTableFactory40.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap72 = slimTableFactory71.tableTypeArrays;
        slimTableFactory8.tableTypeArrays = strMap72;
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(slimTableFactory18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertNotNull(slimTableFactory31);
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNotNull(slimTableFactory33);
        org.junit.Assert.assertNull(wildcardClass35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(slimTableFactory40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
        org.junit.Assert.assertNotNull(strMap46);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hi!" + "'", str49, "hi!");
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(slimTableFactory54);
        org.junit.Assert.assertNotNull(strMap55);
        org.junit.Assert.assertNotNull(strMap56);
        org.junit.Assert.assertNull(wildcardClass58);
        org.junit.Assert.assertNotNull(strMap59);
        org.junit.Assert.assertNotNull(slimTableFactory60);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(strMap63);
        org.junit.Assert.assertNull(wildcardClass66);
        org.junit.Assert.assertNull(wildcardClass68);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(slimTableFactory71);
        org.junit.Assert.assertNotNull(strMap72);
    }

    @Test
    public void test08484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08484");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.lang.String str4 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory0.copy();
        java.lang.String str7 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str10 = slimTableFactory8.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap11 = slimTableFactory8.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory8.copy();
        boolean boolean14 = slimTableFactory8.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap15 = slimTableFactory8.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap15;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass18 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass22 = slimTableFactory20.getTableType("");
        java.lang.String str24 = slimTableFactory20.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap25 = slimTableFactory20.tableTypeArrays;
        slimTableFactory19.tableTypeArrays = strMap25;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = slimTableFactory19.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = slimTableFactory27.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap29 = slimTableFactory28.tableTypeArrays;
        java.lang.String str31 = slimTableFactory28.makeTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap32 = slimTableFactory28.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory33 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory34 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass36 = slimTableFactory34.getTableType("");
        java.lang.String str38 = slimTableFactory34.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap39 = slimTableFactory34.tableTypeArrays;
        slimTableFactory33.tableTypeArrays = strMap39;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory41 = slimTableFactory33.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory42 = slimTableFactory41.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap43 = slimTableFactory42.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory44 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass46 = slimTableFactory44.getTableType("");
        java.lang.String str48 = slimTableFactory44.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory49 = slimTableFactory44.copy();
        boolean boolean51 = slimTableFactory44.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap52 = slimTableFactory44.tableTypeArrays;
        slimTableFactory42.tableTypeArrays = strMap52;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory54 = slimTableFactory42.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap55 = slimTableFactory54.tableTypeArrays;
        slimTableFactory28.tableTypeArrays = strMap55;
        slimTableFactory0.tableTypeArrays = strMap55;
        fitnesse.testsystems.slim.Table table58 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory0.parseDefineTableTypeRow(table58, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strMap15);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertNull(wildcardClass22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(slimTableFactory27);
        org.junit.Assert.assertNotNull(slimTableFactory28);
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertNotNull(strMap32);
        org.junit.Assert.assertNull(wildcardClass36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNotNull(slimTableFactory41);
        org.junit.Assert.assertNotNull(slimTableFactory42);
        org.junit.Assert.assertNotNull(strMap43);
        org.junit.Assert.assertNull(wildcardClass46);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(slimTableFactory49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(strMap52);
        org.junit.Assert.assertNotNull(slimTableFactory54);
        org.junit.Assert.assertNotNull(strMap55);
    }

    @Test
    public void test08485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08485");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        boolean boolean4 = slimTableFactory0.hasColon("");
        boolean boolean6 = slimTableFactory0.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass8 = slimTableFactory0.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str11 = slimTableFactory9.getFullTableName("hi!");
        java.lang.String str13 = slimTableFactory9.makeTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap14 = slimTableFactory9.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass17 = slimTableFactory15.getTableType("");
        java.lang.String str19 = slimTableFactory15.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap20 = slimTableFactory15.tableTypeArrays;
        slimTableFactory9.tableTypeArrays = strMap20;
        slimTableFactory0.tableTypeArrays = strMap20;
        boolean boolean24 = slimTableFactory0.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = slimTableFactory0.copy();
        java.lang.String str27 = slimTableFactory25.getFullTableName("hi!");
        boolean boolean29 = slimTableFactory25.hasColon("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap30 = slimTableFactory25.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory31 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str33 = slimTableFactory31.getFullTableName("hi!");
        java.lang.String str35 = slimTableFactory31.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap36 = null;
        slimTableFactory31.tableTypeArrays = strMap36;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory38 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str40 = slimTableFactory38.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap41 = slimTableFactory38.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory42 = slimTableFactory38.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap43 = slimTableFactory42.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory44 = slimTableFactory42.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap45 = slimTableFactory44.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap46 = slimTableFactory44.tableTypeArrays;
        slimTableFactory31.tableTypeArrays = strMap46;
        slimTableFactory25.tableTypeArrays = strMap46;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass50 = slimTableFactory25.getTableType("hi!");
        java.lang.String str52 = slimTableFactory25.makeTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory53 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str55 = slimTableFactory53.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap56 = slimTableFactory53.tableTypeArrays;
        java.lang.String str58 = slimTableFactory53.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory59 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass61 = slimTableFactory59.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory62 = slimTableFactory59.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap63 = slimTableFactory59.tableTypeArrays;
        slimTableFactory53.tableTypeArrays = strMap63;
        slimTableFactory25.tableTypeArrays = strMap63;
        fitnesse.testsystems.slim.Table table66 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable67 = slimTableFactory25.parseDefineTableTypeTable(table66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNull(wildcardClass17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(slimTableFactory25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strMap30);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "hi!" + "'", str40, "hi!");
        org.junit.Assert.assertNotNull(strMap41);
        org.junit.Assert.assertNotNull(slimTableFactory42);
        org.junit.Assert.assertNotNull(strMap43);
        org.junit.Assert.assertNotNull(slimTableFactory44);
        org.junit.Assert.assertNotNull(strMap45);
        org.junit.Assert.assertNotNull(strMap46);
        org.junit.Assert.assertNull(wildcardClass50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "hi!" + "'", str52, "hi!");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hi!" + "'", str55, "hi!");
        org.junit.Assert.assertNotNull(strMap56);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNull(wildcardClass61);
        org.junit.Assert.assertNotNull(slimTableFactory62);
        org.junit.Assert.assertNotNull(strMap63);
    }

    @Test
    public void test08486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08486");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass3 = slimTableFactory1.getTableType("");
        java.lang.String str5 = slimTableFactory1.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory1.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap6;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory9.tableTypeArrays;
        java.lang.String str12 = slimTableFactory9.makeTableType("hi!");
        java.lang.String str14 = slimTableFactory9.getFullTableName("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass16 = slimTableFactory9.getTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap17 = slimTableFactory9.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory9.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str21 = slimTableFactory19.getFullTableName("hi!");
        java.lang.String str23 = slimTableFactory19.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap24 = null;
        slimTableFactory19.tableTypeArrays = strMap24;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory26 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str28 = slimTableFactory26.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap29 = slimTableFactory26.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory30 = slimTableFactory26.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap31 = slimTableFactory30.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory32 = slimTableFactory30.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap33 = slimTableFactory32.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap34 = slimTableFactory32.tableTypeArrays;
        slimTableFactory19.tableTypeArrays = strMap34;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory36 = slimTableFactory19.copy();
        java.lang.String str38 = slimTableFactory19.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory39 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass41 = slimTableFactory39.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap42 = slimTableFactory39.tableTypeArrays;
        slimTableFactory19.tableTypeArrays = strMap42;
        slimTableFactory18.tableTypeArrays = strMap42;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory45 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory46 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass48 = slimTableFactory46.getTableType("");
        java.lang.String str50 = slimTableFactory46.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap51 = slimTableFactory46.tableTypeArrays;
        slimTableFactory45.tableTypeArrays = strMap51;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory53 = slimTableFactory45.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory54 = slimTableFactory53.copy();
        boolean boolean56 = slimTableFactory53.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass58 = slimTableFactory53.getTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap59 = slimTableFactory53.tableTypeArrays;
        slimTableFactory18.tableTypeArrays = strMap59;
        boolean boolean62 = slimTableFactory18.hasColon("hi!");
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertNull(wildcardClass16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(slimTableFactory18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNotNull(slimTableFactory30);
        org.junit.Assert.assertNotNull(strMap31);
        org.junit.Assert.assertNotNull(slimTableFactory32);
        org.junit.Assert.assertNotNull(strMap33);
        org.junit.Assert.assertNotNull(strMap34);
        org.junit.Assert.assertNotNull(slimTableFactory36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNull(wildcardClass41);
        org.junit.Assert.assertNotNull(strMap42);
        org.junit.Assert.assertNull(wildcardClass48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(strMap51);
        org.junit.Assert.assertNotNull(slimTableFactory53);
        org.junit.Assert.assertNotNull(slimTableFactory54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(wildcardClass58);
        org.junit.Assert.assertNotNull(strMap59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test08487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08487");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap5 = slimTableFactory4.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory4.copy();
        java.lang.String str8 = slimTableFactory6.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory6.copy();
        java.lang.String str11 = slimTableFactory6.getFullTableName("hi!");
        boolean boolean13 = slimTableFactory6.hasColon("");
        java.lang.String str15 = slimTableFactory6.makeTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass17 = slimTableFactory6.getTableType("hi!");
        fitnesse.testsystems.slim.Table table18 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory6.parseDefineTableTypeRow(table18, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNull(wildcardClass17);
    }

    @Test
    public void test08488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08488");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.lang.String str4 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory0.copy();
        java.lang.String str7 = slimTableFactory0.makeTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass9 = slimTableFactory0.getTableType("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass11 = slimTableFactory0.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass15 = slimTableFactory13.getTableType("");
        java.lang.String str17 = slimTableFactory13.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory18 = slimTableFactory13.copy();
        boolean boolean20 = slimTableFactory13.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap21 = slimTableFactory13.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap22 = slimTableFactory13.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = slimTableFactory13.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str26 = slimTableFactory24.getFullTableName("hi!");
        java.lang.String str28 = slimTableFactory24.makeTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap29 = slimTableFactory24.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory30 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass32 = slimTableFactory30.getTableType("");
        java.lang.String str34 = slimTableFactory30.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap35 = slimTableFactory30.tableTypeArrays;
        slimTableFactory24.tableTypeArrays = strMap35;
        slimTableFactory23.tableTypeArrays = strMap35;
        java.lang.String str39 = slimTableFactory23.makeTableType("");
        boolean boolean41 = slimTableFactory23.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory42 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass44 = slimTableFactory42.getTableType("");
        java.lang.String str46 = slimTableFactory42.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory47 = slimTableFactory42.copy();
        boolean boolean49 = slimTableFactory42.hasColon("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass51 = slimTableFactory42.getTableType("");
        java.lang.String str53 = slimTableFactory42.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory54 = slimTableFactory42.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory55 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory56 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass58 = slimTableFactory56.getTableType("");
        java.lang.String str60 = slimTableFactory56.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap61 = slimTableFactory56.tableTypeArrays;
        slimTableFactory55.tableTypeArrays = strMap61;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory63 = slimTableFactory55.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory64 = slimTableFactory63.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory65 = slimTableFactory63.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory66 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory67 = slimTableFactory66.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass69 = slimTableFactory67.getTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass71 = slimTableFactory67.getTableType("hi!");
        boolean boolean73 = slimTableFactory67.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap74 = slimTableFactory67.tableTypeArrays;
        slimTableFactory65.tableTypeArrays = strMap74;
        slimTableFactory42.tableTypeArrays = strMap74;
        java.util.Map<java.lang.String, java.lang.String> strMap77 = slimTableFactory42.tableTypeArrays;
        slimTableFactory23.tableTypeArrays = strMap77;
        slimTableFactory12.tableTypeArrays = strMap77;
        boolean boolean81 = slimTableFactory12.hasColon("hi!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(slimTableFactory18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(strMap22);
        org.junit.Assert.assertNotNull(slimTableFactory23);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNull(wildcardClass32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(wildcardClass44);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(slimTableFactory47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(wildcardClass51);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(slimTableFactory54);
        org.junit.Assert.assertNull(wildcardClass58);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(strMap61);
        org.junit.Assert.assertNotNull(slimTableFactory63);
        org.junit.Assert.assertNotNull(slimTableFactory64);
        org.junit.Assert.assertNotNull(slimTableFactory65);
        org.junit.Assert.assertNotNull(slimTableFactory67);
        org.junit.Assert.assertNull(wildcardClass69);
        org.junit.Assert.assertNull(wildcardClass71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(strMap74);
        org.junit.Assert.assertNotNull(strMap77);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test08489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08489");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass2 = slimTableFactory0.getTableType("");
        java.lang.String str4 = slimTableFactory0.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory0.copy();
        boolean boolean7 = slimTableFactory0.hasColon("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass9 = slimTableFactory0.getTableType("");
        java.lang.String str11 = slimTableFactory0.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass16 = slimTableFactory14.getTableType("");
        java.lang.String str18 = slimTableFactory14.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap19 = slimTableFactory14.tableTypeArrays;
        slimTableFactory13.tableTypeArrays = strMap19;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory21 = slimTableFactory13.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = slimTableFactory21.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap23 = slimTableFactory22.tableTypeArrays;
        slimTableFactory12.tableTypeArrays = strMap23;
        boolean boolean26 = slimTableFactory12.hasColon("");
        java.lang.String str28 = slimTableFactory12.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory29 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass31 = slimTableFactory29.getTableType("");
        java.lang.String str33 = slimTableFactory29.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory34 = slimTableFactory29.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap35 = slimTableFactory34.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory36 = slimTableFactory34.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass38 = slimTableFactory36.getTableType("");
        java.lang.String str40 = slimTableFactory36.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory41 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str43 = slimTableFactory41.getFullTableName("hi!");
        java.lang.String str45 = slimTableFactory41.makeTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap46 = slimTableFactory41.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory47 = slimTableFactory41.copy();
        java.lang.String str49 = slimTableFactory41.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory50 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str52 = slimTableFactory50.getFullTableName("hi!");
        java.lang.String str54 = slimTableFactory50.makeTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap55 = slimTableFactory50.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory56 = slimTableFactory50.copy();
        java.lang.String str58 = slimTableFactory50.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory59 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str61 = slimTableFactory59.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap62 = slimTableFactory59.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory63 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str65 = slimTableFactory63.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap66 = slimTableFactory63.tableTypeArrays;
        slimTableFactory59.tableTypeArrays = strMap66;
        java.lang.String str69 = slimTableFactory59.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap70 = slimTableFactory59.tableTypeArrays;
        slimTableFactory50.tableTypeArrays = strMap70;
        slimTableFactory41.tableTypeArrays = strMap70;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory73 = slimTableFactory41.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory74 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str76 = slimTableFactory74.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap77 = slimTableFactory74.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory78 = slimTableFactory74.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap79 = slimTableFactory78.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory80 = slimTableFactory78.copy();
        java.lang.String str82 = slimTableFactory80.getFullTableName("hi!");
        java.lang.String str84 = slimTableFactory80.makeTableType("hi!");
        java.lang.String str86 = slimTableFactory80.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap87 = slimTableFactory80.tableTypeArrays;
        slimTableFactory41.tableTypeArrays = strMap87;
        slimTableFactory36.tableTypeArrays = strMap87;
        slimTableFactory12.tableTypeArrays = strMap87;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory91 = slimTableFactory12.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap92 = slimTableFactory91.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap93 = slimTableFactory91.tableTypeArrays;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass95 = slimTableFactory91.getTableType("hi!");
        java.lang.String str97 = slimTableFactory91.makeTableType("hi!");
        org.junit.Assert.assertNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(wildcardClass9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertNull(wildcardClass16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(slimTableFactory21);
        org.junit.Assert.assertNotNull(slimTableFactory22);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertNull(wildcardClass31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(slimTableFactory34);
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertNotNull(slimTableFactory36);
        org.junit.Assert.assertNull(wildcardClass38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hi!" + "'", str43, "hi!");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(strMap46);
        org.junit.Assert.assertNotNull(slimTableFactory47);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "hi!" + "'", str52, "hi!");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(strMap55);
        org.junit.Assert.assertNotNull(slimTableFactory56);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "hi!" + "'", str61, "hi!");
        org.junit.Assert.assertNotNull(strMap62);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "hi!" + "'", str65, "hi!");
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(strMap70);
        org.junit.Assert.assertNotNull(slimTableFactory73);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "hi!" + "'", str76, "hi!");
        org.junit.Assert.assertNotNull(strMap77);
        org.junit.Assert.assertNotNull(slimTableFactory78);
        org.junit.Assert.assertNotNull(strMap79);
        org.junit.Assert.assertNotNull(slimTableFactory80);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "hi!" + "'", str82, "hi!");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "hi!" + "'", str84, "hi!");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "hi!" + "'", str86, "hi!");
        org.junit.Assert.assertNotNull(strMap87);
        org.junit.Assert.assertNotNull(slimTableFactory91);
        org.junit.Assert.assertNotNull(strMap92);
        org.junit.Assert.assertNotNull(strMap93);
        org.junit.Assert.assertNull(wildcardClass95);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "hi!" + "'", str97, "hi!");
    }

    @Test
    public void test08490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08490");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass3 = slimTableFactory1.getTableType("");
        java.lang.String str5 = slimTableFactory1.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory1.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap6;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory9.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass13 = slimTableFactory11.getTableType("");
        java.lang.String str15 = slimTableFactory11.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory11.copy();
        boolean boolean18 = slimTableFactory11.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap19 = slimTableFactory11.tableTypeArrays;
        slimTableFactory9.tableTypeArrays = strMap19;
        java.lang.String str22 = slimTableFactory9.getFullTableName("hi!");
        java.lang.String str24 = slimTableFactory9.makeTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass26 = slimTableFactory9.getTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass28 = slimTableFactory9.getTableType("");
        java.lang.String str30 = slimTableFactory9.getFullTableName("hi!");
        fitnesse.testsystems.slim.Table table31 = null;
        fitnesse.testsystems.slim.SlimTestContext slimTestContext33 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable34 = slimTableFactory9.makeSlimTable(table31, "", slimTestContext33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNull(wildcardClass26);
        org.junit.Assert.assertNull(wildcardClass28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
    }

    @Test
    public void test08491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08491");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass3 = slimTableFactory1.getTableType("");
        java.lang.String str5 = slimTableFactory1.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory1.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap6;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory8.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory11.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory12.getTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass16 = slimTableFactory12.getTableType("hi!");
        boolean boolean18 = slimTableFactory12.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap19 = slimTableFactory12.tableTypeArrays;
        slimTableFactory10.tableTypeArrays = strMap19;
        java.util.Map<java.lang.String, java.lang.String> strMap21 = slimTableFactory10.tableTypeArrays;
        java.lang.Class<?> wildcardClass22 = slimTableFactory10.getClass();
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertNull(wildcardClass16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test08492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08492");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass3 = slimTableFactory1.getTableType("");
        java.lang.String str5 = slimTableFactory1.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory1.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap6;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory0.tableTypeArrays;
        java.lang.String str12 = slimTableFactory0.getFullTableName("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory0.getTableType("hi!");
        java.lang.String str16 = slimTableFactory0.makeTableType("");
        boolean boolean18 = slimTableFactory0.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory19 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory19.copy();
        boolean boolean22 = slimTableFactory19.hasColon("");
        java.lang.String str24 = slimTableFactory19.makeTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass26 = slimTableFactory19.getTableType("");
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(slimTableFactory19);
        org.junit.Assert.assertNotNull(slimTableFactory20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNull(wildcardClass26);
    }

    @Test
    public void test08493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08493");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory5 = slimTableFactory0.copy();
        boolean boolean7 = slimTableFactory0.hasColon("");
        java.lang.String str9 = slimTableFactory0.getFullTableName("hi!");
        boolean boolean11 = slimTableFactory0.hasColon("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory12.getTableType("");
        java.lang.String str16 = slimTableFactory12.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = slimTableFactory12.copy();
        boolean boolean19 = slimTableFactory12.hasColon("");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass21 = slimTableFactory12.getTableType("");
        java.lang.String str23 = slimTableFactory12.makeTableType("");
        java.lang.String str25 = slimTableFactory12.makeTableType("hi!");
        java.lang.String str27 = slimTableFactory12.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory28 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass30 = slimTableFactory28.getTableType("");
        java.lang.String str32 = slimTableFactory28.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory33 = slimTableFactory28.copy();
        boolean boolean35 = slimTableFactory28.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap36 = slimTableFactory28.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap37 = slimTableFactory28.tableTypeArrays;
        slimTableFactory12.tableTypeArrays = strMap37;
        slimTableFactory0.tableTypeArrays = strMap37;
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass41 = slimTableFactory0.getTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass43 = slimTableFactory0.getTableType("");
        java.lang.String str45 = slimTableFactory0.getFullTableName("hi!");
        fitnesse.testsystems.slim.Table table46 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory0.parseDefineTableTypeRow(table46, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(slimTableFactory5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(slimTableFactory17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(wildcardClass21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNull(wildcardClass30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(slimTableFactory33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(strMap37);
        org.junit.Assert.assertNull(wildcardClass41);
        org.junit.Assert.assertNull(wildcardClass43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
    }

    @Test
    public void test08494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08494");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass3 = slimTableFactory1.getTableType("");
        java.lang.String str5 = slimTableFactory1.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory1.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap6;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass11 = slimTableFactory9.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory12 = slimTableFactory9.copy();
        boolean boolean14 = slimTableFactory9.hasColon("hi!");
        boolean boolean16 = slimTableFactory9.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory17 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str19 = slimTableFactory17.getFullTableName("hi!");
        java.lang.String str21 = slimTableFactory17.makeTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory22 = slimTableFactory17.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory23 = slimTableFactory22.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap24 = slimTableFactory23.tableTypes;
        java.lang.String str26 = slimTableFactory23.getFullTableName("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory27 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass29 = slimTableFactory27.getTableType("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory30 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass32 = slimTableFactory30.getTableType("");
        java.lang.String str34 = slimTableFactory30.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory35 = slimTableFactory30.copy();
        boolean boolean37 = slimTableFactory30.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap38 = slimTableFactory30.tableTypeArrays;
        java.util.Map<java.lang.String, java.lang.String> strMap39 = slimTableFactory30.tableTypeArrays;
        slimTableFactory27.tableTypeArrays = strMap39;
        slimTableFactory23.tableTypeArrays = strMap39;
        java.util.Map<java.lang.String, java.lang.String> strMap42 = slimTableFactory23.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory43 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory44 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass46 = slimTableFactory44.getTableType("");
        java.lang.String str48 = slimTableFactory44.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap49 = slimTableFactory44.tableTypeArrays;
        slimTableFactory43.tableTypeArrays = strMap49;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory51 = slimTableFactory43.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory52 = slimTableFactory51.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap53 = slimTableFactory52.tableTypeArrays;
        java.lang.String str55 = slimTableFactory52.makeTableType("hi!");
        java.lang.String str57 = slimTableFactory52.getFullTableName("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass59 = slimTableFactory52.getTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap60 = slimTableFactory52.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory61 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str63 = slimTableFactory61.getFullTableName("hi!");
        java.lang.String str65 = slimTableFactory61.makeTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap66 = slimTableFactory61.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory67 = slimTableFactory61.copy();
        java.lang.String str69 = slimTableFactory61.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap70 = slimTableFactory61.tableTypeArrays;
        slimTableFactory52.tableTypeArrays = strMap70;
        slimTableFactory23.tableTypeArrays = strMap70;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory73 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory74 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass76 = slimTableFactory74.getTableType("");
        java.lang.String str78 = slimTableFactory74.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap79 = slimTableFactory74.tableTypeArrays;
        slimTableFactory73.tableTypeArrays = strMap79;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory81 = slimTableFactory73.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory82 = slimTableFactory73.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap83 = slimTableFactory82.tableTypeArrays;
        slimTableFactory23.tableTypeArrays = strMap83;
        slimTableFactory9.tableTypeArrays = strMap83;
        java.lang.Class<?> wildcardClass86 = slimTableFactory9.getClass();
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNull(wildcardClass11);
        org.junit.Assert.assertNotNull(slimTableFactory12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(slimTableFactory22);
        org.junit.Assert.assertNotNull(slimTableFactory23);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
        org.junit.Assert.assertNull(wildcardClass29);
        org.junit.Assert.assertNull(wildcardClass32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(slimTableFactory35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(strMap38);
        org.junit.Assert.assertNotNull(strMap39);
        org.junit.Assert.assertNotNull(strMap42);
        org.junit.Assert.assertNull(wildcardClass46);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(strMap49);
        org.junit.Assert.assertNotNull(slimTableFactory51);
        org.junit.Assert.assertNotNull(slimTableFactory52);
        org.junit.Assert.assertNotNull(strMap53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hi!" + "'", str55, "hi!");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "hi!" + "'", str57, "hi!");
        org.junit.Assert.assertNull(wildcardClass59);
        org.junit.Assert.assertNotNull(strMap60);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "hi!" + "'", str63, "hi!");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(strMap66);
        org.junit.Assert.assertNotNull(slimTableFactory67);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(strMap70);
        org.junit.Assert.assertNull(wildcardClass76);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertNotNull(strMap79);
        org.junit.Assert.assertNotNull(slimTableFactory81);
        org.junit.Assert.assertNotNull(slimTableFactory82);
        org.junit.Assert.assertNotNull(strMap83);
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test08495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08495");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str2 = slimTableFactory0.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap3 = slimTableFactory0.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory4 = slimTableFactory0.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap5 = slimTableFactory4.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory4.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = slimTableFactory6.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap8 = slimTableFactory7.tableTypes;
        boolean boolean10 = slimTableFactory7.hasColon("");
        java.lang.String str12 = slimTableFactory7.makeTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass14 = slimTableFactory7.getTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass16 = slimTableFactory7.getTableType("hi!");
        fitnesse.testsystems.slim.Table table17 = null;
        // The following exception was thrown during execution in test generation
        try {
            fitnesse.testsystems.slim.tables.SlimTable slimTable18 = slimTableFactory7.parseDefineTableTypeTable(table17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(slimTableFactory4);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNotNull(slimTableFactory7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNull(wildcardClass14);
        org.junit.Assert.assertNull(wildcardClass16);
    }

    @Test
    public void test08496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08496");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory2 = slimTableFactory1.copy();
        boolean boolean4 = slimTableFactory1.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap5 = slimTableFactory1.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory6 = slimTableFactory1.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory7 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass10 = slimTableFactory8.getTableType("");
        java.lang.String str12 = slimTableFactory8.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap13 = slimTableFactory8.tableTypeArrays;
        slimTableFactory7.tableTypeArrays = strMap13;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = slimTableFactory7.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory7.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass18 = slimTableFactory16.getTableType("hi!");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap19 = slimTableFactory16.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory20 = slimTableFactory16.copy();
        boolean boolean22 = slimTableFactory20.hasColon("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap23 = slimTableFactory20.tableTypeArrays;
        slimTableFactory6.tableTypeArrays = strMap23;
        boolean boolean26 = slimTableFactory6.hasColon("");
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNotNull(slimTableFactory2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(slimTableFactory6);
        org.junit.Assert.assertNull(wildcardClass10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(strMap13);
        org.junit.Assert.assertNotNull(slimTableFactory15);
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertNull(wildcardClass18);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(slimTableFactory20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strMap23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test08497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08497");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass3 = slimTableFactory1.getTableType("");
        java.lang.String str5 = slimTableFactory1.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory1.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap6;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        java.util.Map<java.lang.String, java.lang.String> strMap10 = slimTableFactory9.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory11 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass13 = slimTableFactory11.getTableType("");
        java.lang.String str15 = slimTableFactory11.getFullTableName("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory16 = slimTableFactory11.copy();
        boolean boolean18 = slimTableFactory11.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap19 = slimTableFactory11.tableTypeArrays;
        slimTableFactory9.tableTypeArrays = strMap19;
        java.lang.String str22 = slimTableFactory9.getFullTableName("hi!");
        java.lang.String str24 = slimTableFactory9.makeTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass26 = slimTableFactory9.getTableType("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass28 = slimTableFactory9.getTableType("");
        java.lang.String str30 = slimTableFactory9.getFullTableName("hi!");
        fitnesse.testsystems.slim.Table table31 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory9.parseDefineTableTypeRow(table31, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(strMap10);
        org.junit.Assert.assertNull(wildcardClass13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(slimTableFactory16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNull(wildcardClass26);
        org.junit.Assert.assertNull(wildcardClass28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
    }

    @Test
    public void test08498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08498");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass3 = slimTableFactory1.getTableType("");
        java.lang.String str5 = slimTableFactory1.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory1.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap6;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory8.copy();
        boolean boolean12 = slimTableFactory10.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory10.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass16 = slimTableFactory14.getTableType("");
        java.lang.String str18 = slimTableFactory14.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap19 = slimTableFactory14.tableTypeArrays;
        slimTableFactory10.tableTypeArrays = strMap19;
        java.util.Map<java.lang.String, java.lang.String> strMap21 = slimTableFactory10.tableTypeArrays;
        boolean boolean23 = slimTableFactory10.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap24 = slimTableFactory10.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory25 = slimTableFactory10.copy();
        java.lang.Class<?> wildcardClass26 = slimTableFactory25.getClass();
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(slimTableFactory13);
        org.junit.Assert.assertNull(wildcardClass16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(strMap21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNotNull(slimTableFactory25);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test08499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08499");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = slimTableFactory0.copy();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass3 = slimTableFactory0.getTableType("hi!");
        fitnesse.testsystems.slim.Table table4 = null;
        // The following exception was thrown during execution in test generation
        try {
            slimTableFactory0.parseDefineTableTypeRow(table4, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(slimTableFactory1);
        org.junit.Assert.assertNull(wildcardClass3);
    }

    @Test
    public void test08500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08500");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory0 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory1 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass3 = slimTableFactory1.getTableType("");
        java.lang.String str5 = slimTableFactory1.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap6 = slimTableFactory1.tableTypeArrays;
        slimTableFactory0.tableTypeArrays = strMap6;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory8 = slimTableFactory0.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory9 = slimTableFactory8.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory10 = slimTableFactory8.copy();
        boolean boolean12 = slimTableFactory10.hasColon("");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory13 = slimTableFactory10.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory14 = slimTableFactory10.copy();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory15 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass17 = slimTableFactory15.getTableType("");
        boolean boolean19 = slimTableFactory15.hasColon("");
        boolean boolean21 = slimTableFactory15.hasColon("hi!");
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass23 = slimTableFactory15.getTableType("hi!");
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory24 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str26 = slimTableFactory24.getFullTableName("hi!");
        java.lang.String str28 = slimTableFactory24.makeTableType("");
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap29 = slimTableFactory24.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory30 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass32 = slimTableFactory30.getTableType("");
        java.lang.String str34 = slimTableFactory30.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap35 = slimTableFactory30.tableTypeArrays;
        slimTableFactory24.tableTypeArrays = strMap35;
        slimTableFactory15.tableTypeArrays = strMap35;
        boolean boolean39 = slimTableFactory15.hasColon("");
        java.util.Map<java.lang.String, java.lang.String> strMap40 = slimTableFactory15.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory41 = slimTableFactory15.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap42 = slimTableFactory41.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory43 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str45 = slimTableFactory43.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap46 = slimTableFactory43.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory47 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str49 = slimTableFactory47.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap50 = slimTableFactory47.tableTypeArrays;
        slimTableFactory43.tableTypeArrays = strMap50;
        java.lang.String str53 = slimTableFactory43.makeTableType("");
        java.util.Map<java.lang.String, java.lang.String> strMap54 = slimTableFactory43.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory55 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.String str57 = slimTableFactory55.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap58 = slimTableFactory55.tableTypeArrays;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory59 = slimTableFactory55.copy();
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap60 = slimTableFactory59.tableTypes;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory61 = slimTableFactory59.copy();
        java.lang.String str63 = slimTableFactory61.getFullTableName("hi!");
        java.util.Map<java.lang.String, java.lang.String> strMap64 = slimTableFactory61.tableTypeArrays;
        slimTableFactory43.tableTypeArrays = strMap64;
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory66 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        fitnesse.testsystems.slim.tables.SlimTableFactory slimTableFactory67 = new fitnesse.testsystems.slim.tables.SlimTableFactory();
        java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable> wildcardClass69 = slimTableFactory67.getTableType("");
        java.lang.String str71 = slimTableFactory67.getFullTableName("");
        java.util.Map<java.lang.String, java.lang.String> strMap72 = slimTableFactory67.tableTypeArrays;
        slimTableFactory66.tableTypeArrays = strMap72;
        java.util.Map<java.lang.String, java.lang.Class<? extends fitnesse.testsystems.slim.tables.SlimTable>> strMap74 = slimTableFactory66.tableTypes;
        java.util.Map<java.lang.String, java.lang.String> strMap75 = slimTableFactory66.tableTypeArrays;
        slimTableFactory43.tableTypeArrays = strMap75;
        slimTableFactory41.tableTypeArrays = strMap75;
        slimTableFactory14.tableTypeArrays = strMap75;
        java.lang.String str80 = slimTableFactory14.makeTableType("hi!");
        java.lang.String str82 = slimTableFactory14.getFullTableName("hi!");
        java.lang.Class<?> wildcardClass83 = slimTableFactory14.getClass();
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(slimTableFactory8);
        org.junit.Assert.assertNotNull(slimTableFactory9);
        org.junit.Assert.assertNotNull(slimTableFactory10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(slimTableFactory13);
        org.junit.Assert.assertNotNull(slimTableFactory14);
        org.junit.Assert.assertNull(wildcardClass17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(wildcardClass23);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(strMap29);
        org.junit.Assert.assertNull(wildcardClass32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(strMap35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(strMap40);
        org.junit.Assert.assertNotNull(slimTableFactory41);
        org.junit.Assert.assertNotNull(strMap42);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hi!" + "'", str45, "hi!");
        org.junit.Assert.assertNotNull(strMap46);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hi!" + "'", str49, "hi!");
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(strMap54);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "hi!" + "'", str57, "hi!");
        org.junit.Assert.assertNotNull(strMap58);
        org.junit.Assert.assertNotNull(slimTableFactory59);
        org.junit.Assert.assertNotNull(strMap60);
        org.junit.Assert.assertNotNull(slimTableFactory61);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "hi!" + "'", str63, "hi!");
        org.junit.Assert.assertNotNull(strMap64);
        org.junit.Assert.assertNull(wildcardClass69);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(strMap72);
        org.junit.Assert.assertNotNull(strMap74);
        org.junit.Assert.assertNotNull(strMap75);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "hi!" + "'", str80, "hi!");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "hi!" + "'", str82, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass83);
    }
}

