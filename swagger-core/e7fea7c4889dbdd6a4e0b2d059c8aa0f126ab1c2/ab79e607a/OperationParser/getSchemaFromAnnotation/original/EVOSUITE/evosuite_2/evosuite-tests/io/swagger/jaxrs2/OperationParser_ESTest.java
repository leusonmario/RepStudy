/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 07 11:40:14 GMT 2021
 */

package io.swagger.jaxrs2;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.swagger.jaxrs2.OperationParser;
import io.swagger.oas.annotations.ExternalDocumentation;
import io.swagger.oas.annotations.Parameter;
import io.swagger.oas.annotations.enums.Explode;
import io.swagger.oas.annotations.info.Contact;
import io.swagger.oas.annotations.info.Info;
import io.swagger.oas.annotations.info.License;
import io.swagger.oas.annotations.links.Link;
import io.swagger.oas.annotations.links.LinkParameter;
import io.swagger.oas.annotations.media.Content;
import io.swagger.oas.annotations.media.ExampleObject;
import io.swagger.oas.annotations.media.Schema;
import io.swagger.oas.annotations.responses.ApiResponse;
import io.swagger.oas.annotations.servers.Server;
import io.swagger.oas.annotations.servers.ServerVariable;
import io.swagger.oas.models.Components;
import io.swagger.oas.models.Operation;
import io.swagger.oas.models.PathItem;
import io.swagger.oas.models.callbacks.Callback;
import io.swagger.oas.models.examples.Example;
import io.swagger.oas.models.headers.Header;
import io.swagger.oas.models.media.Encoding;
import io.swagger.oas.models.media.MediaType;
import io.swagger.oas.models.parameters.RequestBody;
import io.swagger.oas.models.responses.ApiResponses;
import io.swagger.oas.models.security.SecurityScheme;
import io.swagger.oas.models.servers.ServerVariables;
import io.swagger.oas.models.tags.Tag;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.Set;
import javax.ws.rs.Produces;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OperationParser_ESTest extends OperationParser_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test000()  throws Throwable  {
      String[] stringArray0 = new String[9];
      String string0 = "lbwso^w9ZsN=O";
      stringArray0[0] = string0;
      String string1 = "[M";
      stringArray0[1] = string1;
      String string2 = "description";
      stringArray0[2] = string2;
      String string3 = "io.swagge";
      stringArray0[3] = string3;
      String string4 = "";
      stringArray0[4] = string4;
      String string5 = "/S>!v,8_k";
      stringArray0[5] = string5;
      String string6 = "HSn{w6}3c)iG9";
      stringArray0[6] = stringArray0[4];
      String string7 = "No Base64Variant with name ";
      stringArray0[7] = string7;
      String string8 = "";
      stringArray0[8] = string8;
      String string9 = "Mismatching names (";
      boolean boolean0 = false;
      String string10 = null;
      String string11 = "H1g`d>^";
      String string12 = "#/components/schemas/";
      boolean boolean1 = false;
      String string13 = null;
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(stringArray0[6]).when(externalDocumentation0).description();
      doReturn(string3, string13).when(externalDocumentation0).url();
      int int0 = 4518;
      String string14 = "\\=hdE8`[<Ry$'KMq/R";
      String string15 = "";
      String string16 = null;
      String string17 = "java.lang";
      int int1 = 344;
      String string18 = "java.langio.swagger.oas.models.examples.Example";
      int int2 = 339;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(stringArray0).when(schema0).allowableValues();
      doReturn(string9, string9).when(schema0).defaultValue();
      doReturn(boolean0).when(schema0).deprecated();
      doReturn(string10).when(schema0).description();
      doReturn(string11, string12, string16).when(schema0).example();
      doReturn(boolean0).when(schema0).exclusiveMaximum();
      doReturn(boolean1).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema0).externalDocs();
      doReturn(stringArray0[4]).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(int1, int2).when(schema0).maxProperties();
      doReturn(int0, int1).when(schema0).minProperties();
      doReturn(string11, string18).when(schema0).pattern();
      doReturn(boolean1).when(schema0).readOnly();
      doReturn(string14, string12).when(schema0).ref();
      doReturn(string15).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional0 = (Optional<io.swagger.oas.models.media.Schema>)OperationParser.getSchemaFromAnnotation(schema0);
      assertNotSame(string18, string5);
      assertNotSame(string18, string1);
      assertNotSame(string18, string11);
      assertNotSame(string18, string0);
      assertNotSame(string18, string2);
      assertNotSame(string18, string4);
      assertNotSame(string18, string3);
      assertNotSame(string18, string15);
      assertNotSame(string18, string17);
      assertNotSame(string18, string7);
      assertNotSame(string18, string9);
      assertNotSame(string18, string6);
      assertNotSame(string18, string8);
      assertNotSame(string18, string14);
      assertNotSame(string18, string12);
      assertNotSame(string9, string8);
      assertNotSame(string9, string14);
      assertNotSame(string9, string17);
      assertNotSame(string9, string5);
      assertNotSame(string9, string15);
      assertNotSame(string9, string3);
      assertNotSame(string9, string18);
      assertNotSame(string9, string2);
      assertNotSame(string9, string0);
      assertNotSame(string9, string12);
      assertNotSame(string9, string11);
      assertNotSame(string9, string4);
      assertNotSame(string9, string1);
      assertNotSame(string9, string6);
      assertNotSame(string9, string7);
      assertNotSame(string11, string1);
      assertNotSame(string11, string9);
      assertNotSame(string11, string5);
      assertNotSame(string11, string12);
      assertNotSame(string11, string4);
      assertNotSame(string11, string8);
      assertNotSame(string11, string18);
      assertNotSame(string11, string0);
      assertNotSame(string11, string6);
      assertNotSame(string11, string3);
      assertNotSame(string11, string15);
      assertNotSame(string11, string17);
      assertNotSame(string11, string2);
      assertNotSame(string11, string14);
      assertNotSame(string11, string7);
      assertNotSame(string12, string5);
      assertNotSame(string12, string7);
      assertNotSame(string12, string9);
      assertNotSame(string12, string15);
      assertNotSame(string12, string14);
      assertNotSame(string12, string17);
      assertNotSame(string12, string4);
      assertNotSame(string12, string6);
      assertNotSame(string12, string8);
      assertNotSame(string12, string2);
      assertNotSame(string12, string0);
      assertNotSame(string12, string18);
      assertNotSame(string12, string3);
      assertNotSame(string12, string1);
      assertNotSame(string12, string11);
      assertNotSame(string3, string12);
      assertNotSame(string3, string9);
      assertNotSame(string3, string0);
      assertNotSame(string3, string18);
      assertNotSame(string3, string15);
      assertNotSame(string3, string5);
      assertNotSame(string3, string4);
      assertNotSame(string3, string6);
      assertNotSame(string3, string8);
      assertNotSame(string3, string14);
      assertNotSame(string3, string17);
      assertNotSame(string3, string7);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string11);
      assertNotSame(string14, string1);
      assertNotSame(string14, string11);
      assertNotSame(string14, string2);
      assertNotSame(string14, string3);
      assertNotSame(string14, string18);
      assertNotSame(string14, string0);
      assertNotSame(string14, string9);
      assertNotSame(string14, string12);
      assertNotSame(string14, string7);
      assertNotSame(string14, string15);
      assertNotSame(string14, string6);
      assertNotSame(string14, string4);
      assertNotSame(string14, string8);
      assertNotSame(string14, string17);
      assertNotSame(string14, string5);
      assertNotSame(string15, string5);
      assertNotSame(string15, string1);
      assertNotSame(string15, string11);
      assertNotSame(string15, string2);
      assertNotSame(string15, string6);
      assertNotSame(string15, string3);
      assertNotSame(string15, string18);
      assertNotSame(string15, string0);
      assertNotSame(string15, string12);
      assertNotSame(string15, string14);
      assertNotSame(string15, string17);
      assertNotSame(string15, string9);
      assertSame(string15, string8);
      assertNotSame(string15, string7);
      assertSame(string15, string4);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(string18.equals((Object)string5));
      assertFalse(string18.equals((Object)string1));
      assertFalse(string18.equals((Object)string11));
      assertFalse(string18.equals((Object)string0));
      assertFalse(string18.equals((Object)string2));
      assertFalse(string18.equals((Object)string4));
      assertFalse(string18.equals((Object)string3));
      assertFalse(string18.equals((Object)string15));
      assertFalse(string18.equals((Object)string17));
      assertFalse(string18.equals((Object)string7));
      assertFalse(string18.equals((Object)string9));
      assertFalse(string18.equals((Object)string6));
      assertFalse(string18.equals((Object)string8));
      assertFalse(string18.equals((Object)string14));
      assertFalse(string18.equals((Object)string12));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(string3.equals((Object)string12));
      assertFalse(string3.equals((Object)string9));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string18));
      assertFalse(string3.equals((Object)string15));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string6));
      assertFalse(string3.equals((Object)string8));
      assertFalse(string3.equals((Object)string14));
      assertFalse(string3.equals((Object)string17));
      assertFalse(string3.equals((Object)string7));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string11));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string14));
      assertFalse(string9.equals((Object)string17));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string15));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string18));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string12));
      assertFalse(string9.equals((Object)string11));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string9));
      assertFalse(string11.equals((Object)string5));
      assertFalse(string11.equals((Object)string12));
      assertFalse(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string8));
      assertFalse(string11.equals((Object)string18));
      assertFalse(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string15));
      assertFalse(string11.equals((Object)string17));
      assertFalse(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string14));
      assertFalse(string11.equals((Object)string7));
      assertFalse(string12.equals((Object)string5));
      assertFalse(string12.equals((Object)string7));
      assertFalse(string12.equals((Object)string9));
      assertFalse(string12.equals((Object)string15));
      assertFalse(string12.equals((Object)string14));
      assertFalse(string12.equals((Object)string17));
      assertFalse(string12.equals((Object)string4));
      assertFalse(string12.equals((Object)string6));
      assertFalse(string12.equals((Object)string8));
      assertFalse(string12.equals((Object)string2));
      assertFalse(string12.equals((Object)string0));
      assertFalse(string12.equals((Object)string18));
      assertFalse(string12.equals((Object)string3));
      assertFalse(string12.equals((Object)string1));
      assertFalse(string12.equals((Object)string11));
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(string14.equals((Object)string1));
      assertFalse(string14.equals((Object)string11));
      assertFalse(string14.equals((Object)string2));
      assertFalse(string14.equals((Object)string3));
      assertFalse(string14.equals((Object)string18));
      assertFalse(string14.equals((Object)string0));
      assertFalse(string14.equals((Object)string9));
      assertFalse(string14.equals((Object)string12));
      assertFalse(string14.equals((Object)string7));
      assertFalse(string14.equals((Object)string15));
      assertFalse(string14.equals((Object)string6));
      assertFalse(string14.equals((Object)string4));
      assertFalse(string14.equals((Object)string8));
      assertFalse(string14.equals((Object)string17));
      assertFalse(string14.equals((Object)string5));
      assertFalse(string15.equals((Object)string5));
      assertFalse(string15.equals((Object)string1));
      assertFalse(string15.equals((Object)string11));
      assertFalse(string15.equals((Object)string2));
      assertFalse(string15.equals((Object)string6));
      assertFalse(string15.equals((Object)string3));
      assertFalse(string15.equals((Object)string18));
      assertFalse(string15.equals((Object)string0));
      assertFalse(string15.equals((Object)string12));
      assertFalse(string15.equals((Object)string14));
      assertFalse(string15.equals((Object)string17));
      assertFalse(string15.equals((Object)string9));
      assertFalse(string15.equals((Object)string7));
      assertEquals(9, stringArray0.length);
      assertNotNull(optional0);
      
      String string19 = "java.langio.swagger.oas.models.responses.ApiResponses";
      String string20 = "~NkelzN/|[5F~";
      String string21 = "io.swagge";
      LinkParameter[] linkParameterArray0 = new LinkParameter[6];
      String string22 = "";
      String string23 = null;
      LinkParameter linkParameter0 = mock(LinkParameter.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(linkParameter0).expression();
      doReturn(string7, string22, string1, string23, string10).when(linkParameter0).name();
      linkParameterArray0[0] = linkParameter0;
      linkParameterArray0[1] = linkParameterArray0[0];
      linkParameterArray0[2] = linkParameterArray0[1];
      linkParameterArray0[3] = linkParameterArray0[2];
      linkParameterArray0[4] = linkParameterArray0[3];
      linkParameterArray0[5] = linkParameterArray0[4];
      String string24 = "p{=S~";
      String string25 = null;
      String string26 = "java.langio.swagger.oas.models.PathItem";
      String string27 = "Can not pass null modifier";
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string19, stringArray0[0], string24, string25).when(link0).description();
      doReturn(string10).when(link0).name();
      doReturn(stringArray0[0], string21, string26, string16).when(link0).operationId();
      doReturn(string20, string15, string27, (String) null).when(link0).operationRef();
      doReturn((Object) linkParameterArray0, (Object) linkParameterArray0).when(link0).parameters();
      Optional<io.swagger.oas.models.links.Link> optional1 = OperationParser.getLink(link0);
      assertNotSame(string24, string9);
      assertNotSame(string24, string5);
      assertNotSame(string24, string12);
      assertNotSame(string24, string7);
      assertNotSame(string24, string20);
      assertNotSame(string24, string19);
      assertNotSame(string24, string1);
      assertNotSame(string24, string18);
      assertNotSame(string24, string3);
      assertNotSame(string24, string6);
      assertNotSame(string24, string2);
      assertNotSame(string24, string11);
      assertNotSame(string24, string14);
      assertNotSame(string24, string26);
      assertNotSame(string24, string8);
      assertNotSame(string24, string17);
      assertNotSame(string24, string22);
      assertNotSame(string24, string4);
      assertNotSame(string24, string27);
      assertNotSame(string24, string0);
      assertNotSame(string24, string15);
      assertNotSame(string24, string21);
      assertNotSame(string26, string5);
      assertNotSame(string26, string1);
      assertNotSame(string26, string8);
      assertNotSame(string26, string14);
      assertNotSame(string26, string19);
      assertNotSame(string26, string12);
      assertNotSame(string26, string17);
      assertNotSame(string26, string22);
      assertNotSame(string26, string9);
      assertNotSame(string26, string7);
      assertNotSame(string26, string6);
      assertNotSame(string26, string3);
      assertNotSame(string26, string18);
      assertNotSame(string26, string27);
      assertNotSame(string26, string0);
      assertNotSame(string26, string4);
      assertNotSame(string26, string15);
      assertNotSame(string26, string20);
      assertNotSame(string26, string21);
      assertNotSame(string26, string11);
      assertNotSame(string26, string24);
      assertNotSame(string26, string2);
      assertNotSame(string27, string6);
      assertNotSame(string27, string3);
      assertNotSame(string27, string15);
      assertNotSame(string27, string2);
      assertNotSame(string27, string4);
      assertNotSame(string27, string14);
      assertNotSame(string27, string17);
      assertNotSame(string27, string11);
      assertNotSame(string27, string20);
      assertNotSame(string27, string7);
      assertNotSame(string27, string9);
      assertNotSame(string27, string19);
      assertNotSame(string27, string1);
      assertNotSame(string27, string5);
      assertNotSame(string27, string12);
      assertNotSame(string27, string26);
      assertNotSame(string27, string21);
      assertNotSame(string27, string22);
      assertNotSame(string27, string8);
      assertNotSame(string27, string24);
      assertNotSame(string27, string0);
      assertNotSame(string27, string18);
      assertNotSame(string19, string6);
      assertNotSame(string19, string3);
      assertNotSame(string19, string15);
      assertNotSame(string19, string0);
      assertNotSame(string19, string18);
      assertNotSame(string19, string27);
      assertNotSame(string19, string26);
      assertNotSame(string19, string21);
      assertNotSame(string19, string8);
      assertNotSame(string19, string14);
      assertNotSame(string19, string7);
      assertNotSame(string19, string4);
      assertNotSame(string19, string12);
      assertNotSame(string19, string17);
      assertNotSame(string19, string5);
      assertNotSame(string19, string22);
      assertNotSame(string19, string1);
      assertNotSame(string19, string9);
      assertNotSame(string19, string24);
      assertNotSame(string19, string20);
      assertNotSame(string19, string2);
      assertNotSame(string19, string11);
      assertNotSame(string20, string15);
      assertNotSame(string20, string2);
      assertNotSame(string20, string4);
      assertNotSame(string20, string6);
      assertNotSame(string20, string17);
      assertNotSame(string20, string22);
      assertNotSame(string20, string11);
      assertNotSame(string20, string8);
      assertNotSame(string20, string21);
      assertNotSame(string20, string3);
      assertNotSame(string20, string24);
      assertNotSame(string20, string18);
      assertNotSame(string20, string27);
      assertNotSame(string20, string0);
      assertNotSame(string20, string1);
      assertNotSame(string20, string5);
      assertNotSame(string20, string7);
      assertNotSame(string20, string26);
      assertNotSame(string20, string12);
      assertNotSame(string20, string14);
      assertNotSame(string20, string9);
      assertNotSame(string20, string19);
      assertNotSame(string21, string18);
      assertNotSame(string21, string2);
      assertNotSame(string21, string0);
      assertSame(string21, string3);
      assertNotSame(string21, string4);
      assertNotSame(string21, string6);
      assertNotSame(string21, string22);
      assertNotSame(string21, string11);
      assertNotSame(string21, string26);
      assertNotSame(string21, string12);
      assertNotSame(string21, string24);
      assertNotSame(string21, string17);
      assertNotSame(string21, string8);
      assertNotSame(string21, string15);
      assertNotSame(string21, string27);
      assertNotSame(string21, string5);
      assertNotSame(string21, string14);
      assertNotSame(string21, string7);
      assertNotSame(string21, string20);
      assertNotSame(string21, string9);
      assertNotSame(string21, string1);
      assertNotSame(string21, string19);
      assertNotSame(string15, string5);
      assertNotSame(string15, string1);
      assertNotSame(string15, string21);
      assertNotSame(string15, string24);
      assertNotSame(string15, string11);
      assertNotSame(string15, string2);
      assertNotSame(string15, string6);
      assertNotSame(string15, string3);
      assertNotSame(string15, string18);
      assertNotSame(string15, string27);
      assertNotSame(string15, string0);
      assertNotSame(string15, string20);
      assertNotSame(string15, string26);
      assertNotSame(string15, string12);
      assertNotSame(string15, string14);
      assertNotSame(string15, string17);
      assertNotSame(string15, string19);
      assertNotSame(string15, string9);
      assertSame(string15, string22);
      assertSame(string15, string8);
      assertNotSame(string15, string7);
      assertSame(string15, string4);
      assertFalse(string24.equals((Object)string9));
      assertFalse(string24.equals((Object)string5));
      assertFalse(string24.equals((Object)string12));
      assertFalse(string24.equals((Object)string7));
      assertFalse(string24.equals((Object)string20));
      assertFalse(string24.equals((Object)string19));
      assertFalse(string24.equals((Object)string1));
      assertFalse(string24.equals((Object)string18));
      assertFalse(string24.equals((Object)string3));
      assertFalse(string24.equals((Object)string6));
      assertFalse(string24.equals((Object)string2));
      assertFalse(string24.equals((Object)string11));
      assertFalse(string24.equals((Object)string14));
      assertFalse(string24.equals((Object)string26));
      assertFalse(string24.equals((Object)string8));
      assertFalse(string24.equals((Object)string17));
      assertFalse(string24.equals((Object)string22));
      assertFalse(string24.equals((Object)string4));
      assertFalse(string24.equals((Object)string27));
      assertFalse(string24.equals((Object)string0));
      assertFalse(string24.equals((Object)string15));
      assertFalse(string24.equals((Object)string21));
      assertFalse(string26.equals((Object)string5));
      assertFalse(string26.equals((Object)string1));
      assertFalse(string26.equals((Object)string8));
      assertFalse(string26.equals((Object)string14));
      assertFalse(string26.equals((Object)string19));
      assertFalse(string26.equals((Object)string12));
      assertFalse(string26.equals((Object)string17));
      assertFalse(string26.equals((Object)string22));
      assertFalse(string26.equals((Object)string9));
      assertFalse(string26.equals((Object)string7));
      assertFalse(string26.equals((Object)string6));
      assertFalse(string26.equals((Object)string3));
      assertFalse(string26.equals((Object)string18));
      assertFalse(string26.equals((Object)string27));
      assertFalse(string26.equals((Object)string0));
      assertFalse(string26.equals((Object)string4));
      assertFalse(string26.equals((Object)string15));
      assertFalse(string26.equals((Object)string20));
      assertFalse(string26.equals((Object)string21));
      assertFalse(string26.equals((Object)string11));
      assertFalse(string26.equals((Object)string24));
      assertFalse(string26.equals((Object)string2));
      assertFalse(string27.equals((Object)string6));
      assertFalse(string27.equals((Object)string3));
      assertFalse(string27.equals((Object)string15));
      assertFalse(string27.equals((Object)string2));
      assertFalse(string27.equals((Object)string4));
      assertFalse(string27.equals((Object)string14));
      assertFalse(string27.equals((Object)string17));
      assertFalse(string27.equals((Object)string11));
      assertFalse(string27.equals((Object)string20));
      assertFalse(string27.equals((Object)string7));
      assertFalse(string27.equals((Object)string9));
      assertFalse(string27.equals((Object)string19));
      assertFalse(string27.equals((Object)string1));
      assertFalse(string27.equals((Object)string5));
      assertFalse(string27.equals((Object)string12));
      assertFalse(string27.equals((Object)string26));
      assertFalse(string27.equals((Object)string21));
      assertFalse(string27.equals((Object)string22));
      assertFalse(string27.equals((Object)string8));
      assertFalse(string27.equals((Object)string24));
      assertFalse(string27.equals((Object)string0));
      assertFalse(string27.equals((Object)string18));
      assertFalse(string19.equals((Object)string6));
      assertFalse(string19.equals((Object)string3));
      assertFalse(string19.equals((Object)string15));
      assertFalse(string19.equals((Object)string0));
      assertFalse(string19.equals((Object)string18));
      assertFalse(string19.equals((Object)string27));
      assertFalse(string19.equals((Object)string26));
      assertFalse(string19.equals((Object)string21));
      assertFalse(string19.equals((Object)string8));
      assertFalse(string19.equals((Object)string14));
      assertFalse(string19.equals((Object)string7));
      assertFalse(string19.equals((Object)string4));
      assertFalse(string19.equals((Object)string12));
      assertFalse(string19.equals((Object)string17));
      assertFalse(string19.equals((Object)string5));
      assertFalse(string19.equals((Object)string22));
      assertFalse(string19.equals((Object)string1));
      assertFalse(string19.equals((Object)string9));
      assertFalse(string19.equals((Object)string24));
      assertFalse(string19.equals((Object)string20));
      assertFalse(string19.equals((Object)string2));
      assertFalse(string19.equals((Object)string11));
      assertFalse(string20.equals((Object)string15));
      assertFalse(string20.equals((Object)string2));
      assertFalse(string20.equals((Object)string4));
      assertFalse(string20.equals((Object)string6));
      assertFalse(string20.equals((Object)string17));
      assertFalse(string20.equals((Object)string22));
      assertFalse(string20.equals((Object)string11));
      assertFalse(string20.equals((Object)string8));
      assertFalse(string20.equals((Object)string21));
      assertFalse(string20.equals((Object)string3));
      assertFalse(string20.equals((Object)string24));
      assertFalse(string20.equals((Object)string18));
      assertFalse(string20.equals((Object)string27));
      assertFalse(string20.equals((Object)string0));
      assertFalse(string20.equals((Object)string1));
      assertFalse(string20.equals((Object)string5));
      assertFalse(string20.equals((Object)string7));
      assertFalse(string20.equals((Object)string26));
      assertFalse(string20.equals((Object)string12));
      assertFalse(string20.equals((Object)string14));
      assertFalse(string20.equals((Object)string9));
      assertFalse(string20.equals((Object)string19));
      assertFalse(string21.equals((Object)string18));
      assertFalse(string21.equals((Object)string2));
      assertFalse(string21.equals((Object)string0));
      assertFalse(string21.equals((Object)string4));
      assertFalse(string21.equals((Object)string6));
      assertFalse(string21.equals((Object)string22));
      assertFalse(string21.equals((Object)string11));
      assertFalse(string21.equals((Object)string26));
      assertFalse(string21.equals((Object)string12));
      assertFalse(string21.equals((Object)string24));
      assertFalse(string21.equals((Object)string17));
      assertFalse(string21.equals((Object)string8));
      assertFalse(string21.equals((Object)string15));
      assertFalse(string21.equals((Object)string27));
      assertFalse(string21.equals((Object)string5));
      assertFalse(string21.equals((Object)string14));
      assertFalse(string21.equals((Object)string7));
      assertFalse(string21.equals((Object)string20));
      assertFalse(string21.equals((Object)string9));
      assertFalse(string21.equals((Object)string1));
      assertFalse(string21.equals((Object)string19));
      assertFalse(string15.equals((Object)string5));
      assertFalse(string15.equals((Object)string1));
      assertFalse(string15.equals((Object)string21));
      assertFalse(string15.equals((Object)string24));
      assertFalse(string15.equals((Object)string11));
      assertFalse(string15.equals((Object)string2));
      assertFalse(string15.equals((Object)string6));
      assertFalse(string15.equals((Object)string3));
      assertFalse(string15.equals((Object)string18));
      assertFalse(string15.equals((Object)string27));
      assertFalse(string15.equals((Object)string0));
      assertFalse(string15.equals((Object)string20));
      assertFalse(string15.equals((Object)string26));
      assertFalse(string15.equals((Object)string12));
      assertFalse(string15.equals((Object)string14));
      assertFalse(string15.equals((Object)string17));
      assertFalse(string15.equals((Object)string19));
      assertFalse(string15.equals((Object)string9));
      assertFalse(string15.equals((Object)string7));
      assertEquals(9, stringArray0.length);
      assertEquals(6, linkParameterArray0.length);
      assertNotNull(optional1);
      
      String string28 = "#/components/schemas/";
      String string29 = "java.langio.swagger.oas.models.servers.Server";
      String string30 = "-1lI~2\"|jE";
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn(stringArray0[6]).when(contact0).email();
      doReturn(stringArray0[7], string29).when(contact0).name();
      doReturn(string28, string30).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional2 = OperationParser.getContact(contact0);
      assertNotSame(string28, string24);
      assertNotSame(string28, string1);
      assertNotSame(string28, string22);
      assertNotSame(string28, string4);
      assertNotSame(string28, string5);
      assertSame(string28, string12);
      assertNotSame(string28, string30);
      assertNotSame(string28, string7);
      assertNotSame(string28, string27);
      assertNotSame(string28, string14);
      assertNotSame(string28, string8);
      assertNotSame(string28, string2);
      assertNotSame(string28, string0);
      assertNotSame(string28, string21);
      assertNotSame(string28, string18);
      assertNotSame(string28, string3);
      assertNotSame(string28, string9);
      assertNotSame(string28, string29);
      assertNotSame(string28, string26);
      assertNotSame(string28, string19);
      assertNotSame(string28, string15);
      assertNotSame(string28, string20);
      assertNotSame(string28, string17);
      assertNotSame(string28, string6);
      assertNotSame(string28, string11);
      assertNotSame(string29, string18);
      assertNotSame(string29, string26);
      assertNotSame(string29, string8);
      assertNotSame(string29, string15);
      assertNotSame(string29, string3);
      assertNotSame(string29, string21);
      assertNotSame(string29, string5);
      assertNotSame(string29, string9);
      assertNotSame(string29, string28);
      assertNotSame(string29, string1);
      assertNotSame(string29, string2);
      assertNotSame(string29, string0);
      assertNotSame(string29, string4);
      assertNotSame(string29, string6);
      assertNotSame(string29, string22);
      assertNotSame(string29, string11);
      assertNotSame(string29, string12);
      assertNotSame(string29, string17);
      assertNotSame(string29, string24);
      assertNotSame(string29, string27);
      assertNotSame(string29, string30);
      assertNotSame(string29, string14);
      assertNotSame(string29, string20);
      assertNotSame(string29, string7);
      assertNotSame(string29, string19);
      assertNotSame(string30, string0);
      assertNotSame(string30, string2);
      assertNotSame(string30, string27);
      assertNotSame(string30, string12);
      assertNotSame(string30, string14);
      assertNotSame(string30, string22);
      assertNotSame(string30, string6);
      assertNotSame(string30, string4);
      assertNotSame(string30, string17);
      assertNotSame(string30, string5);
      assertNotSame(string30, string24);
      assertNotSame(string30, string1);
      assertNotSame(string30, string28);
      assertNotSame(string30, string21);
      assertNotSame(string30, string3);
      assertNotSame(string30, string18);
      assertNotSame(string30, string9);
      assertNotSame(string30, string7);
      assertNotSame(string30, string15);
      assertNotSame(string30, string26);
      assertNotSame(string30, string8);
      assertNotSame(string30, string19);
      assertNotSame(string30, string20);
      assertNotSame(string30, string29);
      assertNotSame(string30, string11);
      assertFalse(string28.equals((Object)string24));
      assertFalse(string28.equals((Object)string9));
      assertFalse(string28.equals((Object)string1));
      assertFalse(string28.equals((Object)string29));
      assertFalse(string28.equals((Object)string26));
      assertFalse(string28.equals((Object)string22));
      assertFalse(string28.equals((Object)string4));
      assertFalse(string28.equals((Object)string5));
      assertFalse(string28.equals((Object)string19));
      assertFalse(string28.equals((Object)string30));
      assertFalse(string28.equals((Object)string7));
      assertFalse(string28.equals((Object)string27));
      assertFalse(string28.equals((Object)string15));
      assertFalse(string28.equals((Object)string20));
      assertFalse(string28.equals((Object)string14));
      assertFalse(string28.equals((Object)string8));
      assertFalse(string28.equals((Object)string17));
      assertFalse(string28.equals((Object)string6));
      assertFalse(string28.equals((Object)string2));
      assertFalse(string28.equals((Object)string11));
      assertFalse(string28.equals((Object)string0));
      assertFalse(string28.equals((Object)string21));
      assertFalse(string28.equals((Object)string18));
      assertFalse(string28.equals((Object)string3));
      assertFalse(string29.equals((Object)string18));
      assertFalse(string29.equals((Object)string26));
      assertFalse(string29.equals((Object)string8));
      assertFalse(string29.equals((Object)string15));
      assertFalse(string29.equals((Object)string3));
      assertFalse(string29.equals((Object)string21));
      assertFalse(string29.equals((Object)string5));
      assertFalse(string29.equals((Object)string9));
      assertFalse(string29.equals((Object)string28));
      assertFalse(string29.equals((Object)string1));
      assertFalse(string29.equals((Object)string2));
      assertFalse(string29.equals((Object)string0));
      assertFalse(string29.equals((Object)string4));
      assertFalse(string29.equals((Object)string6));
      assertFalse(string29.equals((Object)string22));
      assertFalse(string29.equals((Object)string11));
      assertFalse(string29.equals((Object)string12));
      assertFalse(string29.equals((Object)string17));
      assertFalse(string29.equals((Object)string24));
      assertFalse(string29.equals((Object)string27));
      assertFalse(string29.equals((Object)string30));
      assertFalse(string29.equals((Object)string14));
      assertFalse(string29.equals((Object)string20));
      assertFalse(string29.equals((Object)string7));
      assertFalse(string29.equals((Object)string19));
      assertFalse(string30.equals((Object)string0));
      assertFalse(string30.equals((Object)string2));
      assertFalse(string30.equals((Object)string27));
      assertFalse(string30.equals((Object)string12));
      assertFalse(string30.equals((Object)string14));
      assertFalse(string30.equals((Object)string22));
      assertFalse(string30.equals((Object)string6));
      assertFalse(string30.equals((Object)string4));
      assertFalse(string30.equals((Object)string17));
      assertFalse(string30.equals((Object)string5));
      assertFalse(string30.equals((Object)string24));
      assertFalse(string30.equals((Object)string1));
      assertFalse(string30.equals((Object)string28));
      assertFalse(string30.equals((Object)string21));
      assertFalse(string30.equals((Object)string3));
      assertFalse(string30.equals((Object)string18));
      assertFalse(string30.equals((Object)string9));
      assertFalse(string30.equals((Object)string7));
      assertFalse(string30.equals((Object)string15));
      assertFalse(string30.equals((Object)string26));
      assertFalse(string30.equals((Object)string8));
      assertFalse(string30.equals((Object)string19));
      assertFalse(string30.equals((Object)string20));
      assertFalse(string30.equals((Object)string29));
      assertFalse(string30.equals((Object)string11));
      assertEquals(9, stringArray0.length);
      assertNotNull(optional2);
      
      String string31 = "io.swagge";
      Contact contact1 = null;
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(string25).when(license0).name();
      doReturn(string27, (String) null).when(license0).url();
      String string32 = "Exponent indicator not followed by a digit";
      String string33 = "(+TRimAci@";
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn(contact1).when(info0).contact();
      doReturn(string2, string21).when(info0).description();
      doReturn(license0).when(info0).license();
      doReturn(string7, string7).when(info0).termsOfService();
      doReturn(stringArray0[5], string32).when(info0).title();
      doReturn(string31, string33).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional3 = OperationParser.getInfo(info0);
      assertNotSame(string32, string29);
      assertNotSame(string32, string21);
      assertNotSame(string32, string3);
      assertNotSame(string32, string18);
      assertNotSame(string32, string27);
      assertNotSame(string32, string0);
      assertNotSame(string32, string20);
      assertNotSame(string32, string7);
      assertNotSame(string32, string30);
      assertNotSame(string32, string8);
      assertNotSame(string32, string26);
      assertNotSame(string32, string14);
      assertNotSame(string32, string19);
      assertNotSame(string32, string31);
      assertNotSame(string32, string5);
      assertNotSame(string32, string1);
      assertNotSame(string32, string33);
      assertNotSame(string32, string24);
      assertNotSame(string32, string11);
      assertNotSame(string32, string2);
      assertNotSame(string32, string6);
      assertNotSame(string32, string4);
      assertNotSame(string32, string28);
      assertNotSame(string32, string15);
      assertNotSame(string32, string12);
      assertNotSame(string32, string22);
      assertNotSame(string32, string17);
      assertNotSame(string32, string9);
      assertNotSame(string33, string29);
      assertNotSame(string33, string14);
      assertNotSame(string33, string17);
      assertNotSame(string33, string9);
      assertNotSame(string33, string19);
      assertNotSame(string33, string4);
      assertNotSame(string33, string6);
      assertNotSame(string33, string12);
      assertNotSame(string33, string22);
      assertNotSame(string33, string11);
      assertNotSame(string33, string15);
      assertNotSame(string33, string32);
      assertNotSame(string33, string30);
      assertNotSame(string33, string8);
      assertNotSame(string33, string5);
      assertNotSame(string33, string28);
      assertNotSame(string33, string20);
      assertNotSame(string33, string7);
      assertNotSame(string33, string1);
      assertNotSame(string33, string2);
      assertNotSame(string33, string0);
      assertNotSame(string33, string31);
      assertNotSame(string33, string26);
      assertNotSame(string33, string24);
      assertNotSame(string33, string21);
      assertNotSame(string33, string3);
      assertNotSame(string33, string18);
      assertNotSame(string33, string27);
      assertNotSame(string27, string6);
      assertNotSame(string27, string2);
      assertNotSame(string27, string4);
      assertNotSame(string27, string11);
      assertNotSame(string27, string14);
      assertNotSame(string27, string17);
      assertNotSame(string27, string31);
      assertNotSame(string27, string19);
      assertNotSame(string27, string5);
      assertNotSame(string27, string12);
      assertNotSame(string27, string29);
      assertNotSame(string27, string22);
      assertNotSame(string27, string3);
      assertNotSame(string27, string15);
      assertNotSame(string27, string28);
      assertNotSame(string27, string33);
      assertNotSame(string27, string30);
      assertNotSame(string27, string20);
      assertNotSame(string27, string7);
      assertNotSame(string27, string32);
      assertNotSame(string27, string9);
      assertNotSame(string27, string1);
      assertNotSame(string27, string26);
      assertNotSame(string27, string21);
      assertNotSame(string27, string8);
      assertNotSame(string27, string24);
      assertNotSame(string27, string0);
      assertNotSame(string27, string18);
      assertNotSame(string2, string32);
      assertNotSame(string2, string5);
      assertNotSame(string2, string1);
      assertNotSame(string2, string33);
      assertNotSame(string2, string28);
      assertNotSame(string2, string24);
      assertNotSame(string2, string3);
      assertNotSame(string2, string11);
      assertNotSame(string2, string18);
      assertNotSame(string2, string0);
      assertNotSame(string2, string21);
      assertNotSame(string2, string20);
      assertNotSame(string2, string14);
      assertNotSame(string2, string8);
      assertNotSame(string2, string26);
      assertNotSame(string2, string30);
      assertNotSame(string2, string7);
      assertNotSame(string2, string31);
      assertNotSame(string2, string29);
      assertNotSame(string2, string19);
      assertNotSame(string2, string27);
      assertNotSame(string2, string15);
      assertNotSame(string2, string4);
      assertNotSame(string2, string6);
      assertNotSame(string2, string17);
      assertNotSame(string2, string12);
      assertNotSame(string2, string22);
      assertNotSame(string2, string9);
      assertNotSame(string21, string2);
      assertNotSame(string21, string0);
      assertNotSame(string21, string4);
      assertNotSame(string21, string6);
      assertNotSame(string21, string22);
      assertNotSame(string21, string11);
      assertNotSame(string21, string12);
      assertNotSame(string21, string24);
      assertNotSame(string21, string17);
      assertNotSame(string21, string27);
      assertNotSame(string21, string5);
      assertNotSame(string21, string9);
      assertNotSame(string21, string28);
      assertNotSame(string21, string1);
      assertNotSame(string21, string33);
      assertNotSame(string21, string18);
      assertSame(string21, string3);
      assertNotSame(string21, string26);
      assertNotSame(string21, string8);
      assertNotSame(string21, string15);
      assertNotSame(string21, string32);
      assertNotSame(string21, string30);
      assertNotSame(string21, string29);
      assertNotSame(string21, string14);
      assertSame(string21, string31);
      assertNotSame(string21, string7);
      assertNotSame(string21, string20);
      assertNotSame(string21, string19);
      assertNotSame(string31, string1);
      assertNotSame(string31, string12);
      assertNotSame(string31, string5);
      assertNotSame(string31, string22);
      assertNotSame(string31, string33);
      assertNotSame(string31, string30);
      assertNotSame(string31, string7);
      assertNotSame(string31, string32);
      assertNotSame(string31, string27);
      assertNotSame(string31, string28);
      assertNotSame(string31, string8);
      assertNotSame(string31, string14);
      assertSame(string31, string3);
      assertNotSame(string31, string2);
      assertNotSame(string31, string24);
      assertNotSame(string31, string18);
      assertNotSame(string31, string0);
      assertNotSame(string31, string9);
      assertNotSame(string31, string29);
      assertNotSame(string31, string26);
      assertSame(string31, string21);
      assertNotSame(string31, string19);
      assertNotSame(string31, string15);
      assertNotSame(string31, string20);
      assertNotSame(string31, string6);
      assertNotSame(string31, string17);
      assertNotSame(string31, string4);
      assertNotSame(string31, string11);
      assertNotSame(string7, string28);
      assertNotSame(string7, string8);
      assertNotSame(string7, string33);
      assertNotSame(string7, string15);
      assertNotSame(string7, string20);
      assertNotSame(string7, string5);
      assertNotSame(string7, string32);
      assertNotSame(string7, string26);
      assertNotSame(string7, string30);
      assertNotSame(string7, string12);
      assertNotSame(string7, string22);
      assertNotSame(string7, string11);
      assertNotSame(string7, string29);
      assertNotSame(string7, string14);
      assertNotSame(string7, string17);
      assertNotSame(string7, string27);
      assertNotSame(string7, string6);
      assertNotSame(string7, string4);
      assertNotSame(string7, string19);
      assertNotSame(string7, string31);
      assertNotSame(string7, string24);
      assertNotSame(string7, string9);
      assertNotSame(string7, string21);
      assertNotSame(string7, string1);
      assertNotSame(string7, string2);
      assertNotSame(string7, string0);
      assertNotSame(string7, string18);
      assertNotSame(string7, string3);
      assertFalse(string32.equals((Object)string29));
      assertFalse(string32.equals((Object)string21));
      assertFalse(string32.equals((Object)string3));
      assertFalse(string32.equals((Object)string18));
      assertFalse(string32.equals((Object)string27));
      assertFalse(string32.equals((Object)string0));
      assertFalse(string32.equals((Object)string20));
      assertFalse(string32.equals((Object)string7));
      assertFalse(string32.equals((Object)string30));
      assertFalse(string32.equals((Object)string8));
      assertFalse(string32.equals((Object)string26));
      assertFalse(string32.equals((Object)string14));
      assertFalse(string32.equals((Object)string19));
      assertFalse(string32.equals((Object)string31));
      assertFalse(string32.equals((Object)string5));
      assertFalse(string32.equals((Object)string1));
      assertFalse(string32.equals((Object)string33));
      assertFalse(string32.equals((Object)string24));
      assertFalse(string32.equals((Object)string11));
      assertFalse(string32.equals((Object)string2));
      assertFalse(string32.equals((Object)string6));
      assertFalse(string32.equals((Object)string4));
      assertFalse(string32.equals((Object)string28));
      assertFalse(string32.equals((Object)string15));
      assertFalse(string32.equals((Object)string12));
      assertFalse(string32.equals((Object)string22));
      assertFalse(string32.equals((Object)string17));
      assertFalse(string32.equals((Object)string9));
      assertFalse(string33.equals((Object)string29));
      assertFalse(string33.equals((Object)string14));
      assertFalse(string33.equals((Object)string17));
      assertFalse(string33.equals((Object)string9));
      assertFalse(string33.equals((Object)string19));
      assertFalse(string33.equals((Object)string4));
      assertFalse(string33.equals((Object)string6));
      assertFalse(string33.equals((Object)string12));
      assertFalse(string33.equals((Object)string22));
      assertFalse(string33.equals((Object)string11));
      assertFalse(string33.equals((Object)string15));
      assertFalse(string33.equals((Object)string32));
      assertFalse(string33.equals((Object)string30));
      assertFalse(string33.equals((Object)string8));
      assertFalse(string33.equals((Object)string5));
      assertFalse(string33.equals((Object)string28));
      assertFalse(string33.equals((Object)string20));
      assertFalse(string33.equals((Object)string7));
      assertFalse(string33.equals((Object)string1));
      assertFalse(string33.equals((Object)string2));
      assertFalse(string33.equals((Object)string0));
      assertFalse(string33.equals((Object)string31));
      assertFalse(string33.equals((Object)string26));
      assertFalse(string33.equals((Object)string24));
      assertFalse(string33.equals((Object)string21));
      assertFalse(string33.equals((Object)string3));
      assertFalse(string33.equals((Object)string18));
      assertFalse(string33.equals((Object)string27));
      assertFalse(string27.equals((Object)string6));
      assertFalse(string27.equals((Object)string2));
      assertFalse(string27.equals((Object)string4));
      assertFalse(string27.equals((Object)string11));
      assertFalse(string27.equals((Object)string14));
      assertFalse(string27.equals((Object)string17));
      assertFalse(string27.equals((Object)string31));
      assertFalse(string27.equals((Object)string19));
      assertFalse(string27.equals((Object)string5));
      assertFalse(string27.equals((Object)string12));
      assertFalse(string27.equals((Object)string29));
      assertFalse(string27.equals((Object)string22));
      assertFalse(string27.equals((Object)string3));
      assertFalse(string27.equals((Object)string15));
      assertFalse(string27.equals((Object)string28));
      assertFalse(string27.equals((Object)string33));
      assertFalse(string27.equals((Object)string30));
      assertFalse(string27.equals((Object)string20));
      assertFalse(string27.equals((Object)string7));
      assertFalse(string27.equals((Object)string32));
      assertFalse(string27.equals((Object)string9));
      assertFalse(string27.equals((Object)string1));
      assertFalse(string27.equals((Object)string26));
      assertFalse(string27.equals((Object)string21));
      assertFalse(string27.equals((Object)string8));
      assertFalse(string27.equals((Object)string24));
      assertFalse(string27.equals((Object)string0));
      assertFalse(string27.equals((Object)string18));
      assertFalse(string2.equals((Object)string32));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string33));
      assertFalse(string2.equals((Object)string28));
      assertFalse(string2.equals((Object)string24));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string11));
      assertFalse(string2.equals((Object)string18));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string21));
      assertFalse(string2.equals((Object)string20));
      assertFalse(string2.equals((Object)string14));
      assertFalse(string2.equals((Object)string8));
      assertFalse(string2.equals((Object)string26));
      assertFalse(string2.equals((Object)string30));
      assertFalse(string2.equals((Object)string7));
      assertFalse(string2.equals((Object)string31));
      assertFalse(string2.equals((Object)string29));
      assertFalse(string2.equals((Object)string19));
      assertFalse(string2.equals((Object)string27));
      assertFalse(string2.equals((Object)string15));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string2.equals((Object)string17));
      assertFalse(string2.equals((Object)string12));
      assertFalse(string2.equals((Object)string22));
      assertFalse(string2.equals((Object)string9));
      assertFalse(string21.equals((Object)string2));
      assertFalse(string21.equals((Object)string0));
      assertFalse(string21.equals((Object)string4));
      assertFalse(string21.equals((Object)string6));
      assertFalse(string21.equals((Object)string22));
      assertFalse(string21.equals((Object)string11));
      assertFalse(string21.equals((Object)string12));
      assertFalse(string21.equals((Object)string24));
      assertFalse(string21.equals((Object)string17));
      assertFalse(string21.equals((Object)string27));
      assertFalse(string21.equals((Object)string5));
      assertFalse(string21.equals((Object)string9));
      assertFalse(string21.equals((Object)string28));
      assertFalse(string21.equals((Object)string1));
      assertFalse(string21.equals((Object)string33));
      assertFalse(string21.equals((Object)string18));
      assertFalse(string21.equals((Object)string26));
      assertFalse(string21.equals((Object)string8));
      assertFalse(string21.equals((Object)string15));
      assertFalse(string21.equals((Object)string32));
      assertFalse(string21.equals((Object)string30));
      assertFalse(string21.equals((Object)string29));
      assertFalse(string21.equals((Object)string14));
      assertFalse(string21.equals((Object)string7));
      assertFalse(string21.equals((Object)string20));
      assertFalse(string21.equals((Object)string19));
      assertFalse(string31.equals((Object)string1));
      assertFalse(string31.equals((Object)string12));
      assertFalse(string31.equals((Object)string5));
      assertFalse(string31.equals((Object)string22));
      assertFalse(string31.equals((Object)string33));
      assertFalse(string31.equals((Object)string30));
      assertFalse(string31.equals((Object)string7));
      assertFalse(string31.equals((Object)string32));
      assertFalse(string31.equals((Object)string27));
      assertFalse(string31.equals((Object)string28));
      assertFalse(string31.equals((Object)string8));
      assertFalse(string31.equals((Object)string14));
      assertFalse(string31.equals((Object)string2));
      assertFalse(string31.equals((Object)string24));
      assertFalse(string31.equals((Object)string18));
      assertFalse(string31.equals((Object)string0));
      assertFalse(string31.equals((Object)string9));
      assertFalse(string31.equals((Object)string29));
      assertFalse(string31.equals((Object)string26));
      assertFalse(string31.equals((Object)string19));
      assertFalse(string31.equals((Object)string15));
      assertFalse(string31.equals((Object)string20));
      assertFalse(string31.equals((Object)string6));
      assertFalse(string31.equals((Object)string17));
      assertFalse(string31.equals((Object)string4));
      assertFalse(string31.equals((Object)string11));
      assertFalse(string7.equals((Object)string28));
      assertFalse(string7.equals((Object)string8));
      assertFalse(string7.equals((Object)string33));
      assertFalse(string7.equals((Object)string15));
      assertFalse(string7.equals((Object)string20));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string32));
      assertFalse(string7.equals((Object)string26));
      assertFalse(string7.equals((Object)string30));
      assertFalse(string7.equals((Object)string12));
      assertFalse(string7.equals((Object)string22));
      assertFalse(string7.equals((Object)string11));
      assertFalse(string7.equals((Object)string29));
      assertFalse(string7.equals((Object)string14));
      assertFalse(string7.equals((Object)string17));
      assertFalse(string7.equals((Object)string27));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string19));
      assertFalse(string7.equals((Object)string31));
      assertFalse(string7.equals((Object)string24));
      assertFalse(string7.equals((Object)string9));
      assertFalse(string7.equals((Object)string21));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string18));
      assertFalse(string7.equals((Object)string3));
      assertEquals(9, stringArray0.length);
      assertNotNull(optional3);
      
      ApiResponse[] apiResponseArray0 = new ApiResponse[2];
      Content[] contentArray0 = new Content[0];
      String string34 = "com.fasterxml.jackson.databind.type.CollectionType";
      String string35 = "java.langio.swagger.oas.models.responses.ApiResponses";
      String string36 = "#/components/schemas/";
      Link[] linkArray0 = new Link[2];
      String string37 = "08@(#%`yq`+{?";
      Link link1 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string9, (String) null).when(link1).description();
      doReturn((String) null).when(link1).name();
      doReturn(string37, (String) null).when(link1).operationId();
      doReturn(string6, (String) null).when(link1).operationRef();
      doReturn((LinkParameter[]) null).when(link1).parameters();
      linkArray0[0] = link1;
      linkArray0[1] = link0;
      Link[] linkArray1 = null;
      String string38 = "";
      String string39 = "1\"&haR";
      ApiResponse apiResponse0 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn((Object) contentArray0, (Object) contentArray0).when(apiResponse0).content();
      doReturn(string34, string35, string36, string18).when(apiResponse0).description();
      doReturn((Object) linkArray0, (Object) linkArray1).when(apiResponse0).links();
      doReturn(string6, string35, string38).when(apiResponse0).responseCode();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      assertNotNull(components0);
      
      String string40 = "R!c";
      Header header0 = new Header();
      assertNull(header0.getExample());
      assertNull(header0.getDescription());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getStyle());
      assertNull(header0.getRequired());
      assertNull(header0.get$ref());
      assertNull(header0.getDeprecated());
      assertNull(header0.getExplode());
      assertNotNull(header0);
      
      Components components1 = components0.addHeaders(string40, header0);
      assertSame(components0, components1);
      assertNotSame(string40, string1);
      assertNotSame(string40, string32);
      assertNotSame(string40, string24);
      assertNotSame(string40, string34);
      assertNotSame(string40, string22);
      assertNotSame(string40, string30);
      assertNotSame(string40, string8);
      assertNotSame(string40, string12);
      assertNotSame(string40, string5);
      assertNotSame(string40, string4);
      assertNotSame(string40, string15);
      assertNotSame(string40, string35);
      assertNotSame(string40, string7);
      assertNotSame(string40, string31);
      assertNotSame(string40, string19);
      assertNotSame(string40, string11);
      assertNotSame(string40, string20);
      assertNotSame(string40, string29);
      assertNotSame(string40, string9);
      assertNotSame(string40, string39);
      assertNotSame(string40, string14);
      assertNotSame(string40, string26);
      assertNotSame(string40, string21);
      assertNotSame(string40, string38);
      assertNotSame(string40, string17);
      assertNotSame(string40, string36);
      assertNotSame(string40, string6);
      assertNotSame(string40, string3);
      assertNotSame(string40, string27);
      assertNotSame(string40, string0);
      assertNotSame(string40, string37);
      assertNotSame(string40, string18);
      assertNotSame(string40, string2);
      assertNotSame(string40, string33);
      assertNotSame(string40, string28);
      assertSame(components1, components0);
      assertNull(header0.getExample());
      assertNull(header0.getDescription());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getStyle());
      assertNull(header0.getRequired());
      assertNull(header0.get$ref());
      assertNull(header0.getDeprecated());
      assertNull(header0.getExplode());
      assertFalse(string40.equals((Object)string1));
      assertFalse(string40.equals((Object)string32));
      assertFalse(string40.equals((Object)string24));
      assertFalse(string40.equals((Object)string34));
      assertFalse(string40.equals((Object)string22));
      assertFalse(string40.equals((Object)string30));
      assertFalse(string40.equals((Object)string8));
      assertFalse(string40.equals((Object)string12));
      assertFalse(string40.equals((Object)string5));
      assertFalse(string40.equals((Object)string4));
      assertFalse(string40.equals((Object)string15));
      assertFalse(string40.equals((Object)string35));
      assertFalse(string40.equals((Object)string7));
      assertFalse(string40.equals((Object)string31));
      assertFalse(string40.equals((Object)string19));
      assertFalse(string40.equals((Object)string11));
      assertFalse(string40.equals((Object)string20));
      assertFalse(string40.equals((Object)string29));
      assertFalse(string40.equals((Object)string9));
      assertFalse(string40.equals((Object)string39));
      assertFalse(string40.equals((Object)string14));
      assertFalse(string40.equals((Object)string26));
      assertFalse(string40.equals((Object)string21));
      assertFalse(string40.equals((Object)string38));
      assertFalse(string40.equals((Object)string17));
      assertFalse(string40.equals((Object)string36));
      assertFalse(string40.equals((Object)string6));
      assertFalse(string40.equals((Object)string3));
      assertFalse(string40.equals((Object)string27));
      assertFalse(string40.equals((Object)string0));
      assertFalse(string40.equals((Object)string37));
      assertFalse(string40.equals((Object)string18));
      assertFalse(string40.equals((Object)string2));
      assertFalse(string40.equals((Object)string33));
      assertFalse(string40.equals((Object)string28));
      assertNotNull(components1);
      
      io.swagger.oas.models.media.Schema<MediaType> schema1 = new io.swagger.oas.models.media.Schema<MediaType>();
      assertNull(schema1.getMaxLength());
      assertNull(schema1.getMinProperties());
      assertNull(schema1.getType());
      assertNull(schema1.getWriteOnly());
      assertNull(schema1.getTitle());
      assertNull(schema1.getMinItems());
      assertNull(schema1.get$ref());
      assertNull(schema1.getUniqueItems());
      assertNull(schema1.getMaxItems());
      assertNull(schema1.getExclusiveMinimum());
      assertNull(schema1.getExclusiveMaximum());
      assertNull(schema1.getName());
      assertNull(schema1.getMinLength());
      assertNull(schema1.getPattern());
      assertNull(schema1.getDeprecated());
      assertNull(schema1.getDescription());
      assertNull(schema1.getMaxProperties());
      assertNull(schema1.getReadOnly());
      assertNull(schema1.getFormat());
      assertNull(schema1.getNullable());
      assertNotNull(schema1);
      
      Components components2 = components1.addSchemas(string40, schema1);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertNotSame(string40, string1);
      assertNotSame(string40, string32);
      assertNotSame(string40, string24);
      assertNotSame(string40, string34);
      assertNotSame(string40, string22);
      assertNotSame(string40, string30);
      assertNotSame(string40, string8);
      assertNotSame(string40, string12);
      assertNotSame(string40, string5);
      assertNotSame(string40, string4);
      assertNotSame(string40, string15);
      assertNotSame(string40, string35);
      assertNotSame(string40, string7);
      assertNotSame(string40, string31);
      assertNotSame(string40, string19);
      assertNotSame(string40, string11);
      assertNotSame(string40, string20);
      assertNotSame(string40, string29);
      assertNotSame(string40, string9);
      assertNotSame(string40, string39);
      assertNotSame(string40, string14);
      assertNotSame(string40, string26);
      assertNotSame(string40, string21);
      assertNotSame(string40, string38);
      assertNotSame(string40, string17);
      assertNotSame(string40, string36);
      assertNotSame(string40, string6);
      assertNotSame(string40, string3);
      assertNotSame(string40, string27);
      assertNotSame(string40, string0);
      assertNotSame(string40, string37);
      assertNotSame(string40, string18);
      assertNotSame(string40, string2);
      assertNotSame(string40, string33);
      assertNotSame(string40, string28);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertNull(header0.getExample());
      assertNull(header0.getDescription());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getStyle());
      assertNull(header0.getRequired());
      assertNull(header0.get$ref());
      assertNull(header0.getDeprecated());
      assertNull(header0.getExplode());
      assertNull(schema1.getMaxLength());
      assertNull(schema1.getMinProperties());
      assertNull(schema1.getType());
      assertNull(schema1.getWriteOnly());
      assertNull(schema1.getTitle());
      assertNull(schema1.getMinItems());
      assertNull(schema1.get$ref());
      assertNull(schema1.getUniqueItems());
      assertNull(schema1.getMaxItems());
      assertNull(schema1.getExclusiveMinimum());
      assertNull(schema1.getExclusiveMaximum());
      assertNull(schema1.getName());
      assertNull(schema1.getMinLength());
      assertNull(schema1.getPattern());
      assertNull(schema1.getDeprecated());
      assertNull(schema1.getDescription());
      assertNull(schema1.getMaxProperties());
      assertNull(schema1.getReadOnly());
      assertNull(schema1.getFormat());
      assertNull(schema1.getNullable());
      assertFalse(string40.equals((Object)string1));
      assertFalse(string40.equals((Object)string32));
      assertFalse(string40.equals((Object)string24));
      assertFalse(string40.equals((Object)string34));
      assertFalse(string40.equals((Object)string22));
      assertFalse(string40.equals((Object)string30));
      assertFalse(string40.equals((Object)string8));
      assertFalse(string40.equals((Object)string12));
      assertFalse(string40.equals((Object)string5));
      assertFalse(string40.equals((Object)string4));
      assertFalse(string40.equals((Object)string15));
      assertFalse(string40.equals((Object)string35));
      assertFalse(string40.equals((Object)string7));
      assertFalse(string40.equals((Object)string31));
      assertFalse(string40.equals((Object)string19));
      assertFalse(string40.equals((Object)string11));
      assertFalse(string40.equals((Object)string20));
      assertFalse(string40.equals((Object)string29));
      assertFalse(string40.equals((Object)string9));
      assertFalse(string40.equals((Object)string39));
      assertFalse(string40.equals((Object)string14));
      assertFalse(string40.equals((Object)string26));
      assertFalse(string40.equals((Object)string21));
      assertFalse(string40.equals((Object)string38));
      assertFalse(string40.equals((Object)string17));
      assertFalse(string40.equals((Object)string36));
      assertFalse(string40.equals((Object)string6));
      assertFalse(string40.equals((Object)string3));
      assertFalse(string40.equals((Object)string27));
      assertFalse(string40.equals((Object)string0));
      assertFalse(string40.equals((Object)string37));
      assertFalse(string40.equals((Object)string18));
      assertFalse(string40.equals((Object)string2));
      assertFalse(string40.equals((Object)string33));
      assertFalse(string40.equals((Object)string28));
      assertNotNull(components2);
      
      Operation operation0 = new Operation();
      assertNull(operation0.getDescription());
      assertNull(operation0.getDeprecated());
      assertNull(operation0.getOperationId());
      assertNull(operation0.getSummary());
      assertNotNull(operation0);
      
      String string41 = header0.toString();
      assertNotSame(string41, string30);
      assertNotSame(string41, string8);
      assertNotSame(string41, string7);
      assertNotSame(string41, string35);
      assertNotSame(string41, string15);
      assertNotSame(string41, string20);
      assertNotSame(string41, string33);
      assertNotSame(string41, string32);
      assertNotSame(string41, string5);
      assertNotSame(string41, string38);
      assertNotSame(string41, string12);
      assertNotSame(string41, string34);
      assertNotSame(string41, string22);
      assertNotSame(string41, string4);
      assertNotSame(string41, string36);
      assertNotSame(string41, string29);
      assertNotSame(string41, string40);
      assertNotSame(string41, string11);
      assertNotSame(string41, string19);
      assertNotSame(string41, string17);
      assertNotSame(string41, string27);
      assertNotSame(string41, string6);
      assertNotSame(string41, string9);
      assertNotSame(string41, string39);
      assertNotSame(string41, string31);
      assertNotSame(string41, string14);
      assertNotSame(string41, string26);
      assertNotSame(string41, string24);
      assertNotSame(string41, string0);
      assertNotSame(string41, string1);
      assertNotSame(string41, string21);
      assertNotSame(string41, string18);
      assertNotSame(string41, string37);
      assertNotSame(string41, string3);
      assertNotSame(string41, string28);
      assertNotSame(string41, string2);
      assertNull(header0.getExample());
      assertNull(header0.getDescription());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getStyle());
      assertNull(header0.getRequired());
      assertNull(header0.get$ref());
      assertNull(header0.getDeprecated());
      assertNull(header0.getExplode());
      assertFalse(string41.equals((Object)string30));
      assertFalse(string41.equals((Object)string8));
      assertFalse(string41.equals((Object)string7));
      assertFalse(string41.equals((Object)string35));
      assertFalse(string41.equals((Object)string15));
      assertFalse(string41.equals((Object)string20));
      assertFalse(string41.equals((Object)string33));
      assertFalse(string41.equals((Object)string32));
      assertFalse(string41.equals((Object)string5));
      assertFalse(string41.equals((Object)string38));
      assertFalse(string41.equals((Object)string12));
      assertFalse(string41.equals((Object)string34));
      assertFalse(string41.equals((Object)string22));
      assertFalse(string41.equals((Object)string4));
      assertFalse(string41.equals((Object)string36));
      assertFalse(string41.equals((Object)string29));
      assertFalse(string41.equals((Object)string40));
      assertFalse(string41.equals((Object)string11));
      assertFalse(string41.equals((Object)string19));
      assertFalse(string41.equals((Object)string17));
      assertFalse(string41.equals((Object)string27));
      assertFalse(string41.equals((Object)string6));
      assertFalse(string41.equals((Object)string9));
      assertFalse(string41.equals((Object)string39));
      assertFalse(string41.equals((Object)string31));
      assertFalse(string41.equals((Object)string14));
      assertFalse(string41.equals((Object)string26));
      assertFalse(string41.equals((Object)string24));
      assertFalse(string41.equals((Object)string0));
      assertFalse(string41.equals((Object)string1));
      assertFalse(string41.equals((Object)string21));
      assertFalse(string41.equals((Object)string18));
      assertFalse(string41.equals((Object)string37));
      assertFalse(string41.equals((Object)string3));
      assertFalse(string41.equals((Object)string28));
      assertFalse(string41.equals((Object)string2));
      assertNotNull(string41);
      assertEquals("class Header {\n    description: null\n    required: null\n    deprecated: null\n    allowEmptyValue: null\n    style: null\n    explode: null\n    schema: null\n    examples: null\n    example: null\n    content: null\n    $ref: null\n}", string41);
      
      Map<String, Callback> map0 = operation0.getCallbacks();
      assertNull(operation0.getDescription());
      assertNull(operation0.getDeprecated());
      assertNull(operation0.getOperationId());
      assertNull(operation0.getSummary());
      assertNull(map0);
      
      HashMap<String, Example> hashMap0 = new HashMap<String, Example>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Components components3 = components0.examples(hashMap0);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertSame(components3, components1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(components3);
      
      Components components4 = components2.callbacks(map0);
      assertSame(components4, components0);
      assertSame(components4, components1);
      assertSame(components4, components2);
      assertSame(components4, components3);
      assertSame(components0, components4);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertNotSame(string40, string1);
      assertNotSame(string40, string32);
      assertNotSame(string40, string24);
      assertNotSame(string40, string34);
      assertNotSame(string40, string22);
      assertNotSame(string40, string30);
      assertNotSame(string40, string8);
      assertNotSame(string40, string12);
      assertNotSame(string40, string5);
      assertNotSame(string40, string4);
      assertNotSame(string40, string15);
      assertNotSame(string40, string35);
      assertNotSame(string40, string7);
      assertNotSame(string40, string31);
      assertNotSame(string40, string19);
      assertNotSame(string40, string11);
      assertNotSame(string40, string20);
      assertNotSame(string40, string29);
      assertNotSame(string40, string9);
      assertNotSame(string40, string39);
      assertNotSame(string40, string14);
      assertNotSame(string40, string26);
      assertNotSame(string40, string21);
      assertNotSame(string40, string38);
      assertNotSame(string40, string17);
      assertNotSame(string40, string41);
      assertNotSame(string40, string36);
      assertNotSame(string40, string6);
      assertNotSame(string40, string3);
      assertNotSame(string40, string27);
      assertNotSame(string40, string0);
      assertNotSame(string40, string37);
      assertNotSame(string40, string18);
      assertNotSame(string40, string2);
      assertNotSame(string40, string33);
      assertNotSame(string40, string28);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components1, components4);
      assertSame(components2, components0);
      assertSame(components2, components4);
      assertSame(components2, components3);
      assertSame(components2, components1);
      assertNull(header0.getExample());
      assertNull(header0.getDescription());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getStyle());
      assertNull(header0.getRequired());
      assertNull(header0.get$ref());
      assertNull(header0.getDeprecated());
      assertNull(header0.getExplode());
      assertNull(schema1.getMaxLength());
      assertNull(schema1.getMinProperties());
      assertNull(schema1.getType());
      assertNull(schema1.getWriteOnly());
      assertNull(schema1.getTitle());
      assertNull(schema1.getMinItems());
      assertNull(schema1.get$ref());
      assertNull(schema1.getUniqueItems());
      assertNull(schema1.getMaxItems());
      assertNull(schema1.getExclusiveMinimum());
      assertNull(schema1.getExclusiveMaximum());
      assertNull(schema1.getName());
      assertNull(schema1.getMinLength());
      assertNull(schema1.getPattern());
      assertNull(schema1.getDeprecated());
      assertNull(schema1.getDescription());
      assertNull(schema1.getMaxProperties());
      assertNull(schema1.getReadOnly());
      assertNull(schema1.getFormat());
      assertNull(schema1.getNullable());
      assertNull(operation0.getDescription());
      assertNull(operation0.getDeprecated());
      assertNull(operation0.getOperationId());
      assertNull(operation0.getSummary());
      assertFalse(string40.equals((Object)string1));
      assertFalse(string40.equals((Object)string32));
      assertFalse(string40.equals((Object)string24));
      assertFalse(string40.equals((Object)string34));
      assertFalse(string40.equals((Object)string22));
      assertFalse(string40.equals((Object)string30));
      assertFalse(string40.equals((Object)string8));
      assertFalse(string40.equals((Object)string12));
      assertFalse(string40.equals((Object)string5));
      assertFalse(string40.equals((Object)string4));
      assertFalse(string40.equals((Object)string15));
      assertFalse(string40.equals((Object)string35));
      assertFalse(string40.equals((Object)string7));
      assertFalse(string40.equals((Object)string31));
      assertFalse(string40.equals((Object)string19));
      assertFalse(string40.equals((Object)string11));
      assertFalse(string40.equals((Object)string20));
      assertFalse(string40.equals((Object)string29));
      assertFalse(string40.equals((Object)string9));
      assertFalse(string40.equals((Object)string39));
      assertFalse(string40.equals((Object)string14));
      assertFalse(string40.equals((Object)string26));
      assertFalse(string40.equals((Object)string21));
      assertFalse(string40.equals((Object)string38));
      assertFalse(string40.equals((Object)string17));
      assertFalse(string40.equals((Object)string41));
      assertFalse(string40.equals((Object)string36));
      assertFalse(string40.equals((Object)string6));
      assertFalse(string40.equals((Object)string3));
      assertFalse(string40.equals((Object)string27));
      assertFalse(string40.equals((Object)string0));
      assertFalse(string40.equals((Object)string37));
      assertFalse(string40.equals((Object)string18));
      assertFalse(string40.equals((Object)string2));
      assertFalse(string40.equals((Object)string33));
      assertFalse(string40.equals((Object)string28));
      assertNotNull(components4);
      
      Map<String, Example> map1 = null;
      Components components5 = components4.examples(map1);
      assertSame(components4, components0);
      assertSame(components4, components1);
      assertSame(components4, components5);
      assertSame(components4, components2);
      assertSame(components4, components3);
      assertSame(components5, components3);
      assertSame(components5, components0);
      assertSame(components5, components2);
      assertSame(components5, components1);
      assertSame(components5, components4);
      assertSame(components0, components4);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertSame(components0, components5);
      assertNotSame(string40, string1);
      assertNotSame(string40, string32);
      assertNotSame(string40, string24);
      assertNotSame(string40, string34);
      assertNotSame(string40, string22);
      assertNotSame(string40, string30);
      assertNotSame(string40, string8);
      assertNotSame(string40, string12);
      assertNotSame(string40, string5);
      assertNotSame(string40, string4);
      assertNotSame(string40, string15);
      assertNotSame(string40, string35);
      assertNotSame(string40, string7);
      assertNotSame(string40, string31);
      assertNotSame(string40, string19);
      assertNotSame(string40, string11);
      assertNotSame(string40, string20);
      assertNotSame(string40, string29);
      assertNotSame(string40, string9);
      assertNotSame(string40, string39);
      assertNotSame(string40, string14);
      assertNotSame(string40, string26);
      assertNotSame(string40, string21);
      assertNotSame(string40, string38);
      assertNotSame(string40, string17);
      assertNotSame(string40, string41);
      assertNotSame(string40, string36);
      assertNotSame(string40, string6);
      assertNotSame(string40, string3);
      assertNotSame(string40, string27);
      assertNotSame(string40, string0);
      assertNotSame(string40, string37);
      assertNotSame(string40, string18);
      assertNotSame(string40, string2);
      assertNotSame(string40, string33);
      assertNotSame(string40, string28);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components1, components5);
      assertSame(components1, components4);
      assertSame(components2, components5);
      assertSame(components2, components0);
      assertSame(components2, components4);
      assertSame(components2, components3);
      assertSame(components2, components1);
      assertNull(header0.getExample());
      assertNull(header0.getDescription());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getStyle());
      assertNull(header0.getRequired());
      assertNull(header0.get$ref());
      assertNull(header0.getDeprecated());
      assertNull(header0.getExplode());
      assertNull(schema1.getMaxLength());
      assertNull(schema1.getMinProperties());
      assertNull(schema1.getType());
      assertNull(schema1.getWriteOnly());
      assertNull(schema1.getTitle());
      assertNull(schema1.getMinItems());
      assertNull(schema1.get$ref());
      assertNull(schema1.getUniqueItems());
      assertNull(schema1.getMaxItems());
      assertNull(schema1.getExclusiveMinimum());
      assertNull(schema1.getExclusiveMaximum());
      assertNull(schema1.getName());
      assertNull(schema1.getMinLength());
      assertNull(schema1.getPattern());
      assertNull(schema1.getDeprecated());
      assertNull(schema1.getDescription());
      assertNull(schema1.getMaxProperties());
      assertNull(schema1.getReadOnly());
      assertNull(schema1.getFormat());
      assertNull(schema1.getNullable());
      assertNull(operation0.getDescription());
      assertNull(operation0.getDeprecated());
      assertNull(operation0.getOperationId());
      assertNull(operation0.getSummary());
      assertFalse(string40.equals((Object)string1));
      assertFalse(string40.equals((Object)string32));
      assertFalse(string40.equals((Object)string24));
      assertFalse(string40.equals((Object)string34));
      assertFalse(string40.equals((Object)string22));
      assertFalse(string40.equals((Object)string30));
      assertFalse(string40.equals((Object)string8));
      assertFalse(string40.equals((Object)string12));
      assertFalse(string40.equals((Object)string5));
      assertFalse(string40.equals((Object)string4));
      assertFalse(string40.equals((Object)string15));
      assertFalse(string40.equals((Object)string35));
      assertFalse(string40.equals((Object)string7));
      assertFalse(string40.equals((Object)string31));
      assertFalse(string40.equals((Object)string19));
      assertFalse(string40.equals((Object)string11));
      assertFalse(string40.equals((Object)string20));
      assertFalse(string40.equals((Object)string29));
      assertFalse(string40.equals((Object)string9));
      assertFalse(string40.equals((Object)string39));
      assertFalse(string40.equals((Object)string14));
      assertFalse(string40.equals((Object)string26));
      assertFalse(string40.equals((Object)string21));
      assertFalse(string40.equals((Object)string38));
      assertFalse(string40.equals((Object)string17));
      assertFalse(string40.equals((Object)string41));
      assertFalse(string40.equals((Object)string36));
      assertFalse(string40.equals((Object)string6));
      assertFalse(string40.equals((Object)string3));
      assertFalse(string40.equals((Object)string27));
      assertFalse(string40.equals((Object)string0));
      assertFalse(string40.equals((Object)string37));
      assertFalse(string40.equals((Object)string18));
      assertFalse(string40.equals((Object)string2));
      assertFalse(string40.equals((Object)string33));
      assertFalse(string40.equals((Object)string28));
      assertNotNull(components5);
      
      Optional<ApiResponses> optional4 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components5);
      assertSame(components4, components0);
      assertSame(components4, components1);
      assertSame(components4, components5);
      assertSame(components4, components2);
      assertSame(components4, components3);
      assertSame(components5, components3);
      assertSame(components5, components0);
      assertSame(components5, components2);
      assertSame(components5, components1);
      assertSame(components5, components4);
      assertSame(components0, components4);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertSame(components0, components5);
      assertNotSame(string40, string1);
      assertNotSame(string40, string32);
      assertNotSame(string40, string24);
      assertNotSame(string40, string34);
      assertNotSame(string40, string22);
      assertNotSame(string40, string30);
      assertNotSame(string40, string8);
      assertNotSame(string40, string12);
      assertNotSame(string40, string5);
      assertNotSame(string40, string4);
      assertNotSame(string40, string15);
      assertNotSame(string40, string35);
      assertNotSame(string40, string7);
      assertNotSame(string40, string31);
      assertNotSame(string40, string19);
      assertNotSame(string40, string11);
      assertNotSame(string40, string20);
      assertNotSame(string40, string29);
      assertNotSame(string40, string9);
      assertNotSame(string40, string39);
      assertNotSame(string40, string14);
      assertNotSame(string40, string26);
      assertNotSame(string40, string21);
      assertNotSame(string40, string38);
      assertNotSame(string40, string17);
      assertNotSame(string40, string41);
      assertNotSame(string40, string36);
      assertNotSame(string40, string6);
      assertNotSame(string40, string3);
      assertNotSame(string40, string27);
      assertNotSame(string40, string0);
      assertNotSame(string40, string37);
      assertNotSame(string40, string18);
      assertNotSame(string40, string2);
      assertNotSame(string40, string33);
      assertNotSame(string40, string28);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components1, components5);
      assertSame(components1, components4);
      assertSame(components2, components5);
      assertSame(components2, components0);
      assertSame(components2, components4);
      assertSame(components2, components3);
      assertSame(components2, components1);
      assertNull(header0.getExample());
      assertNull(header0.getDescription());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getStyle());
      assertNull(header0.getRequired());
      assertNull(header0.get$ref());
      assertNull(header0.getDeprecated());
      assertNull(header0.getExplode());
      assertNull(schema1.getMaxLength());
      assertNull(schema1.getMinProperties());
      assertNull(schema1.getType());
      assertNull(schema1.getWriteOnly());
      assertNull(schema1.getTitle());
      assertNull(schema1.getMinItems());
      assertNull(schema1.get$ref());
      assertNull(schema1.getUniqueItems());
      assertNull(schema1.getMaxItems());
      assertNull(schema1.getExclusiveMinimum());
      assertNull(schema1.getExclusiveMaximum());
      assertNull(schema1.getName());
      assertNull(schema1.getMinLength());
      assertNull(schema1.getPattern());
      assertNull(schema1.getDeprecated());
      assertNull(schema1.getDescription());
      assertNull(schema1.getMaxProperties());
      assertNull(schema1.getReadOnly());
      assertNull(schema1.getFormat());
      assertNull(schema1.getNullable());
      assertNull(operation0.getDescription());
      assertNull(operation0.getDeprecated());
      assertNull(operation0.getOperationId());
      assertNull(operation0.getSummary());
      assertFalse(string40.equals((Object)string1));
      assertFalse(string40.equals((Object)string32));
      assertFalse(string40.equals((Object)string24));
      assertFalse(string40.equals((Object)string34));
      assertFalse(string40.equals((Object)string22));
      assertFalse(string40.equals((Object)string30));
      assertFalse(string40.equals((Object)string8));
      assertFalse(string40.equals((Object)string12));
      assertFalse(string40.equals((Object)string5));
      assertFalse(string40.equals((Object)string4));
      assertFalse(string40.equals((Object)string15));
      assertFalse(string40.equals((Object)string35));
      assertFalse(string40.equals((Object)string7));
      assertFalse(string40.equals((Object)string31));
      assertFalse(string40.equals((Object)string19));
      assertFalse(string40.equals((Object)string11));
      assertFalse(string40.equals((Object)string20));
      assertFalse(string40.equals((Object)string29));
      assertFalse(string40.equals((Object)string9));
      assertFalse(string40.equals((Object)string39));
      assertFalse(string40.equals((Object)string14));
      assertFalse(string40.equals((Object)string26));
      assertFalse(string40.equals((Object)string21));
      assertFalse(string40.equals((Object)string38));
      assertFalse(string40.equals((Object)string17));
      assertFalse(string40.equals((Object)string41));
      assertFalse(string40.equals((Object)string36));
      assertFalse(string40.equals((Object)string6));
      assertFalse(string40.equals((Object)string3));
      assertFalse(string40.equals((Object)string27));
      assertFalse(string40.equals((Object)string0));
      assertFalse(string40.equals((Object)string37));
      assertFalse(string40.equals((Object)string18));
      assertFalse(string40.equals((Object)string2));
      assertFalse(string40.equals((Object)string33));
      assertFalse(string40.equals((Object)string28));
      assertEquals(2, apiResponseArray0.length);
      assertNotNull(optional4);
  }

  @Test(timeout = 11000)
  public void test001()  throws Throwable  {
      boolean boolean0 = false;
      Content[] contentArray0 = new Content[7];
      ExampleObject[] exampleObjectArray0 = new ExampleObject[4];
      String string0 = "io.swagge";
      String string1 = null;
      String string2 = "&>)";
      String string3 = "'D`vr";
      String string4 = null;
      String string5 = "io.swagger.jaxrs2.OperationParser";
      String string6 = "Ss@3`}ba\"CT2J} sWUw";
      String string7 = null;
      String string8 = "C}s/?$#-Eo8#&&sPF";
      String string9 = "java.langio.swagger.oas.models.responses.ApiResponses";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn(string4, string5, string1).when(exampleObject0).externalValue();
      doReturn(string0, string1, string2, string1, string3).when(exampleObject0).name();
      doReturn(string6, string1, string7).when(exampleObject0).summary();
      doReturn(string9, string6, string3, string0, string6).when(exampleObject0).value();
      exampleObjectArray0[0] = exampleObject0;
      exampleObjectArray0[1] = exampleObjectArray0[0];
      exampleObjectArray0[2] = exampleObjectArray0[1];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn(exampleObjectArray0).when(content0).examples();
      doReturn(string4, string3).when(content0).mediaType();
      contentArray0[0] = content0;
      contentArray0[2] = contentArray0[1];
      contentArray0[4] = contentArray0[3];
      contentArray0[5] = contentArray0[4];
      contentArray0[6] = contentArray0[5];
      String string10 = ">5)BA=";
      Explode explode0 = Explode.FALSE;
      String string11 = null;
      Class<Object> class0 = Object.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(schema0).implementation();
      String string12 = "";
      String string13 = "";
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(schema1).implementation();
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0).when(parameter0).allowEmptyValue();
      doReturn(boolean0).when(parameter0).allowReserved();
      doReturn(contentArray0).when(parameter0).content();
      doReturn(boolean0).when(parameter0).deprecated();
      doReturn(string10, string13).when(parameter0).description();
      doReturn(explode0, explode0, explode0).when(parameter0).explode();
      doReturn(string11).when(parameter0).in();
      doReturn(string10, string11).when(parameter0).name();
      doReturn(boolean0).when(parameter0).required();
      doReturn(schema0, schema0, schema1).when(parameter0).schema();
      doReturn(string12).when(parameter0).style();
      Components components0 = new Components();
      assertNotNull(components0);
      
      HashMap<String, io.swagger.oas.models.parameters.Parameter> hashMap0 = new HashMap<String, io.swagger.oas.models.parameters.Parameter>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Components components1 = components0.parameters(hashMap0);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(components1);
      
      Map<String, Callback> map0 = components0.getCallbacks();
      assertSame(components0, components1);
      assertNull(map0);
      
      Components components2 = components1.callbacks(map0);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(components2);
      
      // Undeclared exception!
      try { 
        OperationParser.getParameter(parameter0, components2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test002()  throws Throwable  {
      Content[] contentArray0 = new Content[0];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      assertNotNull(components0);
      
      String string0 = "java.lang";
      RequestBody requestBody0 = null;
      Components components1 = components0.addRequestBodies(string0, requestBody0);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertNotNull(components1);
      
      String string1 = null;
      io.swagger.oas.models.parameters.Parameter parameter0 = null;
      Components components2 = components1.addParameters(string1, parameter0);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertNotNull(components2);
      
      io.swagger.oas.models.links.Link link0 = new io.swagger.oas.models.links.Link();
      assertNull(link0.getOperationId());
      assertNull(link0.get$ref());
      assertNull(link0.getDescription());
      assertNull(link0.getOperationRef());
      assertNotNull(link0);
      
      io.swagger.oas.models.links.Link link1 = link0.requestBody(requestBody0);
      assertSame(link0, link1);
      assertSame(link1, link0);
      assertNull(link0.getOperationId());
      assertNull(link0.get$ref());
      assertNull(link0.getDescription());
      assertNull(link0.getOperationRef());
      assertNull(link1.getDescription());
      assertNull(link1.get$ref());
      assertNull(link1.getOperationId());
      assertNull(link1.getOperationRef());
      assertNotNull(link1);
      
      Map<String, io.swagger.oas.models.links.Link> map0 = components0.getLinks();
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertNull(map0);
      
      Components components3 = components2.links(map0);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(components2, components0);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertSame(components3, components2);
      assertNotNull(components3);
      
      Components components4 = components2.addLinks(string1, link1);
      assertSame(components0, components1);
      assertSame(components0, components4);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertSame(components1, components4);
      assertSame(components1, components0);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(components2, components0);
      assertSame(components2, components4);
      assertSame(link0, link1);
      assertSame(link1, link0);
      assertSame(components4, components0);
      assertSame(components4, components1);
      assertSame(components4, components2);
      assertSame(components4, components3);
      assertNull(link0.getOperationId());
      assertNull(link0.get$ref());
      assertNull(link0.getDescription());
      assertNull(link0.getOperationRef());
      assertNull(link1.getDescription());
      assertNull(link1.get$ref());
      assertNull(link1.getOperationId());
      assertNull(link1.getOperationRef());
      assertNotNull(components4);
      
      Link[] linkArray0 = new Link[7];
      String string2 = "IUb)B*>ng";
      String string3 = "7Qxu2vH4f`F";
      String string4 = "%kUua_T#.V%";
      String string5 = "%=%NsM";
      String string6 = "GR)owrMz2v,)G@d_R";
      String string7 = "|l,QAb?ELy>:b";
      String string8 = "";
      String string9 = "\"5'";
      String string10 = "";
      Link link2 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string2, string1, string3, string0, string4).when(link2).description();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link2).name();
      doReturn(string5, string5, string6, string7, string2).when(link2).operationId();
      doReturn(string8, string6, string9, string10, string9).when(link2).operationRef();
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(link2).parameters();
      linkArray0[0] = link2;
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      linkArray0[3] = linkArray0[2];
      linkArray0[4] = linkArray0[3];
      linkArray0[5] = linkArray0[4];
      linkArray0[6] = linkArray0[5];
      Map<String, io.swagger.oas.models.links.Link> map1 = OperationParser.getLinks(linkArray0);
      assertEquals(1, map1.size());
      assertFalse(map1.isEmpty());
      assertEquals(7, linkArray0.length);
      assertNotNull(map1);
      
      components4.setLinks(map1);
      assertSame(components0, components1);
      assertSame(components0, components4);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string5);
      assertNotSame(string0, string2);
      assertNotSame(string0, string6);
      assertNotSame(string0, string9);
      assertNotSame(string0, string4);
      assertNotSame(string0, string8);
      assertNotSame(string0, string7);
      assertNotSame(string0, string10);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertSame(components1, components4);
      assertSame(components1, components0);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(components2, components0);
      assertSame(components2, components4);
      assertSame(link0, link1);
      assertSame(link1, link0);
      assertSame(components4, components0);
      assertSame(components4, components1);
      assertSame(components4, components2);
      assertSame(components4, components3);
      assertEquals(1, map1.size());
      assertFalse(map1.isEmpty());
      assertNull(link0.getOperationId());
      assertNull(link0.get$ref());
      assertNull(link0.getDescription());
      assertNull(link0.getOperationRef());
      assertNull(link1.getDescription());
      assertNull(link1.get$ref());
      assertNull(link1.getOperationId());
      assertNull(link1.getOperationRef());
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string9));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string8));
      assertFalse(string0.equals((Object)string7));
      assertFalse(string0.equals((Object)string10));
      assertEquals(7, linkArray0.length);
      
      Map<String, io.swagger.oas.models.links.Link> map2 = components1.getLinks();
      assertSame(map2, map1);
      assertSame(components0, components1);
      assertSame(components0, components4);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string5);
      assertNotSame(string0, string2);
      assertNotSame(string0, string6);
      assertNotSame(string0, string9);
      assertNotSame(string0, string4);
      assertNotSame(string0, string8);
      assertNotSame(string0, string7);
      assertNotSame(string0, string10);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertSame(components1, components4);
      assertSame(components1, components0);
      assertFalse(map2.isEmpty());
      assertEquals(1, map2.size());
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string9));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string8));
      assertFalse(string0.equals((Object)string7));
      assertFalse(string0.equals((Object)string10));
      assertNotNull(map2);
      
      Components components5 = components4.links(map2);
      assertSame(map2, map1);
      assertSame(components0, components1);
      assertSame(components0, components4);
      assertSame(components0, components5);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components5, components0);
      assertSame(components5, components2);
      assertSame(components5, components3);
      assertSame(components5, components4);
      assertSame(components5, components1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string5);
      assertNotSame(string0, string2);
      assertNotSame(string0, string6);
      assertNotSame(string0, string9);
      assertNotSame(string0, string4);
      assertNotSame(string0, string8);
      assertNotSame(string0, string7);
      assertNotSame(string0, string10);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertSame(components1, components4);
      assertSame(components1, components0);
      assertSame(components1, components5);
      assertSame(components2, components5);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(components2, components0);
      assertSame(components2, components4);
      assertSame(link0, link1);
      assertSame(link1, link0);
      assertSame(components4, components0);
      assertSame(components4, components1);
      assertSame(components4, components2);
      assertSame(components4, components5);
      assertSame(components4, components3);
      assertFalse(map2.isEmpty());
      assertEquals(1, map2.size());
      assertNull(link0.getOperationId());
      assertNull(link0.get$ref());
      assertNull(link0.getDescription());
      assertNull(link0.getOperationRef());
      assertNull(link1.getDescription());
      assertNull(link1.get$ref());
      assertNull(link1.getOperationId());
      assertNull(link1.getOperationRef());
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string9));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string8));
      assertFalse(string0.equals((Object)string7));
      assertFalse(string0.equals((Object)string10));
      assertNotNull(components5);
      
      Optional<io.swagger.oas.models.media.Content> optional0 = OperationParser.getContent(contentArray0, produces0, produces0, components5);
      assertSame(map2, map1);
      assertSame(components0, components1);
      assertSame(components0, components4);
      assertSame(components0, components5);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components5, components0);
      assertSame(components5, components2);
      assertSame(components5, components3);
      assertSame(components5, components4);
      assertSame(components5, components1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string5);
      assertNotSame(string0, string2);
      assertNotSame(string0, string6);
      assertNotSame(string0, string9);
      assertNotSame(string0, string4);
      assertNotSame(string0, string8);
      assertNotSame(string0, string7);
      assertNotSame(string0, string10);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertSame(components1, components4);
      assertSame(components1, components0);
      assertSame(components1, components5);
      assertSame(components2, components5);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(components2, components0);
      assertSame(components2, components4);
      assertSame(link0, link1);
      assertSame(link1, link0);
      assertSame(components4, components0);
      assertSame(components4, components1);
      assertSame(components4, components2);
      assertSame(components4, components5);
      assertSame(components4, components3);
      assertFalse(map2.isEmpty());
      assertEquals(1, map2.size());
      assertNull(link0.getOperationId());
      assertNull(link0.get$ref());
      assertNull(link0.getDescription());
      assertNull(link0.getOperationRef());
      assertNull(link1.getDescription());
      assertNull(link1.get$ref());
      assertNull(link1.getOperationId());
      assertNull(link1.getOperationRef());
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string9));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string8));
      assertFalse(string0.equals((Object)string7));
      assertFalse(string0.equals((Object)string10));
      assertEquals(0, contentArray0.length);
      assertNotNull(optional0);
      
      String[] stringArray0 = null;
      Optional<Set<Tag>> optional1 = OperationParser.getTags(stringArray0);
      assertNotNull(optional1);
      
      Parameter[] parameterArray0 = new Parameter[4];
      boolean boolean0 = true;
      boolean boolean1 = false;
      boolean boolean2 = true;
      Content[] contentArray1 = new Content[5];
      assertFalse(contentArray1.equals((Object)contentArray0));
      
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      contentArray1[0] = content0;
      contentArray1[1] = contentArray1[0];
      contentArray1[2] = contentArray1[1];
      contentArray1[3] = contentArray1[2];
      contentArray1[4] = contentArray1[3];
      boolean boolean3 = false;
      boolean boolean4 = false;
      String string11 = "";
      String string12 = "default";
      String string13 = "e";
      Explode explode0 = Explode.DEFAULT;
      Explode explode1 = Explode.FALSE;
      Explode explode2 = Explode.DEFAULT;
      Explode explode3 = Explode.DEFAULT;
      String string14 = "1\\F$%.Mhixo5rhD";
      String string15 = "";
      String string16 = "g_&pdJ8VHwgcv>t#$w";
      String string17 = "";
      String string18 = "ed'3EC";
      String string19 = null;
      boolean boolean5 = false;
      boolean boolean6 = false;
      boolean boolean7 = false;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      String string20 = "no description";
      String string21 = "C:X/GUAtXy\"h~";
      String string22 = "#W].P*aMdCd3m3pD";
      Parameter parameter1 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0, boolean0).when(parameter1).allowEmptyValue();
      doReturn(boolean0, boolean1).when(parameter1).allowReserved();
      doReturn(boolean0, boolean3).when(parameter1).deprecated();
      doReturn(string9, string11).when(parameter1).description();
      doReturn(string14, string15).when(parameter1).in();
      doReturn(string12, string18).when(parameter1).name();
      doReturn(boolean5).when(parameter1).required();
      doReturn(string20, string21).when(parameter1).style();
      parameterArray0[0] = parameter1;
      parameterArray0[1] = parameterArray0[0];
      parameterArray0[2] = parameterArray0[1];
      parameterArray0[3] = parameterArray0[2];
      // Undeclared exception!
      try { 
        OperationParser.getParametersList(parameterArray0, components5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant io.swagger.oas.models.parameters.Parameter.StyleEnum.C:X/GUATXY\"H~
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 11000)
  public void test003()  throws Throwable  {
      Link[] linkArray0 = new Link[8];
      String string0 = "com.fasterxml.jackson.databind.MappingJsonFactory";
      String string1 = "$Kms[?&&Tqn@PSq:N,";
      String string2 = "java.langio.swagger.oas.models.responses.ApiResponses";
      String string3 = ")M1S";
      String string4 = "y<g}u$~";
      String string5 = "]...[";
      String string6 = "(";
      String string7 = "fbulSdS/Ocv";
      String string8 = "#/components/schemas/";
      String string9 = null;
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      String string10 = "io.swagge";
      Contact contact1 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn(string5, string10).when(contact1).email();
      doReturn(string10, string0).when(contact1).name();
      doReturn(string0, string8).when(contact1).url();
      Optional<io.swagger.oas.models.info.Contact> optional0 = OperationParser.getContact(contact1);
      assertNotSame(string0, string5);
      assertNotSame(string0, string6);
      assertNotSame(string0, string4);
      assertNotSame(string0, string1);
      assertNotSame(string0, string10);
      assertNotSame(string0, string7);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string8);
      assertNotSame(string5, string3);
      assertNotSame(string5, string6);
      assertNotSame(string5, string0);
      assertNotSame(string5, string1);
      assertNotSame(string5, string10);
      assertNotSame(string5, string4);
      assertNotSame(string5, string7);
      assertNotSame(string5, string2);
      assertNotSame(string5, string8);
      assertNotSame(string8, string0);
      assertNotSame(string8, string5);
      assertNotSame(string8, string6);
      assertNotSame(string8, string10);
      assertNotSame(string8, string1);
      assertNotSame(string8, string4);
      assertNotSame(string8, string3);
      assertNotSame(string8, string7);
      assertNotSame(string8, string2);
      assertNotSame(string10, string8);
      assertNotSame(string10, string3);
      assertNotSame(string10, string6);
      assertNotSame(string10, string4);
      assertNotSame(string10, string0);
      assertNotSame(string10, string1);
      assertNotSame(string10, string5);
      assertNotSame(string10, string7);
      assertNotSame(string10, string2);
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string10));
      assertFalse(string0.equals((Object)string7));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string8));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string6));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string10));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string7));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string8));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string10));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string2));
      assertNotNull(optional0);
      
      Schema schema0 = null;
      Optional<io.swagger.oas.models.media.Schema> optional1 = (Optional<io.swagger.oas.models.media.Schema>)OperationParser.getSchemaFromAnnotation(schema0);
      assertNotNull(optional1);
  }

  @Test(timeout = 11000)
  public void test004()  throws Throwable  {
      String string0 = "7pQ=j";
      String string1 = "}nyx#3E7K/<1=[:&I";
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      LinkParameter[] linkParameterArray0 = new LinkParameter[1];
      String string2 = null;
      String string3 = "VS`8NVM";
      LinkParameter linkParameter0 = mock(LinkParameter.class, new ViolatedAssumptionAnswer());
      linkParameterArray0[0] = linkParameter0;
      String string4 = "i:gvsAU:Q6%5+$lz";
      boolean boolean0 = true;
      Content[] contentArray0 = new Content[4];
      contentArray0[1] = contentArray0[0];
      io.swagger.oas.annotations.parameters.RequestBody requestBody0 = mock(io.swagger.oas.annotations.parameters.RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn(contentArray0).when(requestBody0).content();
      doReturn(string0, string0).when(requestBody0).description();
      doReturn(boolean0, boolean0).when(requestBody0).required();
      Components components0 = new Components();
      assertNotNull(components0);
      
      HashMap<String, RequestBody> hashMap0 = new HashMap<String, RequestBody>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Map<String, io.swagger.oas.models.media.Schema> map0 = (Map<String, io.swagger.oas.models.media.Schema>)components0.getSchemas();
      assertNull(map0);
      
      Components components1 = components0.schemas(map0);
      assertSame(components1, components0);
      assertSame(components0, components1);
      assertNotNull(components1);
      
      io.swagger.oas.models.links.Link link0 = null;
      Parameter[] parameterArray0 = new Parameter[1];
      Optional<List<io.swagger.oas.models.parameters.Parameter>> optional0 = OperationParser.getParametersList(parameterArray0, components0);
      assertSame(components0, components1);
      assertEquals(1, parameterArray0.length);
      assertNotNull(optional0);
      
      // Undeclared exception!
      try { 
        OperationParser.getRequestBody(requestBody0, components0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test005()  throws Throwable  {
      String string0 = "3P xd,Z@)pDx\"#@";
      String string1 = null;
      String string2 = "";
      Server[] serverArray0 = new Server[3];
      String string3 = null;
      ServerVariable[] serverVariableArray0 = new ServerVariable[5];
      String string4 = " - ";
      String string5 = null;
      String string6 = "default";
      String string7 = "Cx+uQ~et}vHrAL5 \\";
      String string8 = "3($= hg";
      ServerVariable serverVariable0 = mock(ServerVariable.class, new ViolatedAssumptionAnswer());
      doReturn(string3, string1, string4, string5, string6).when(serverVariable0).description();
      doReturn(string7, string2, string8, string2, string1).when(serverVariable0).name();
      serverVariableArray0[0] = serverVariable0;
      serverVariableArray0[1] = serverVariableArray0[0];
      serverVariableArray0[2] = serverVariableArray0[1];
      serverVariableArray0[3] = serverVariableArray0[2];
      serverVariableArray0[4] = serverVariableArray0[3];
      String string9 = "Failed to instantiate bean of type ";
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string0, string1, string0, string4).when(server0).description();
      doReturn(string0, string3, string0, string9, string1).when(server0).url();
      doReturn((Object) serverVariableArray0, (Object) serverVariableArray0, (Object) serverVariableArray0).when(server0).variables();
      serverArray0[0] = server0;
      serverArray0[1] = serverArray0[0];
      serverArray0[2] = serverArray0[1];
      Optional<List<io.swagger.oas.models.servers.Server>> optional0 = OperationParser.getServers(serverArray0);
      assertEquals(3, serverArray0.length);
      assertNotNull(optional0);
      
      boolean boolean0 = false;
      Content[] contentArray0 = new Content[0];
      String string10 = "9c";
      io.swagger.oas.annotations.parameters.RequestBody requestBody0 = mock(io.swagger.oas.annotations.parameters.RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn(contentArray0).when(requestBody0).content();
      doReturn(string0, string10).when(requestBody0).description();
      doReturn(boolean0).when(requestBody0).required();
      Components components0 = new Components();
      assertNotNull(components0);
      
      Map<String, io.swagger.oas.models.parameters.Parameter> map0 = components0.getParameters();
      assertNull(map0);
      
      ApiResponses apiResponses0 = new ApiResponses();
      assertEquals(0, apiResponses0.size());
      assertTrue(apiResponses0.isEmpty());
      assertNotNull(apiResponses0);
      
      io.swagger.oas.models.parameters.Parameter parameter0 = null;
      HashMap<String, Callback> hashMap0 = new HashMap<String, Callback>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Optional<RequestBody> optional1 = OperationParser.getRequestBody(requestBody0, components0);
      assertNotSame(string0, string8);
      assertNotSame(string0, string7);
      assertNotSame(string0, string10);
      assertNotSame(string0, string4);
      assertNotSame(string0, string9);
      assertNotSame(string0, string6);
      assertNotSame(string0, string2);
      assertNotSame(string10, string6);
      assertNotSame(string10, string9);
      assertNotSame(string10, string2);
      assertNotSame(string10, string4);
      assertNotSame(string10, string8);
      assertNotSame(string10, string7);
      assertNotSame(string10, string0);
      assertFalse(string0.equals((Object)string8));
      assertFalse(string0.equals((Object)string7));
      assertFalse(string0.equals((Object)string10));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string9));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string0));
      assertEquals(0, contentArray0.length);
      assertNotNull(optional1);
      
      Content[] contentArray1 = new Content[9];
      assertFalse(contentArray1.equals((Object)contentArray0));
      
      contentArray1[2] = contentArray1[1];
      contentArray1[3] = contentArray1[2];
      contentArray1[4] = contentArray1[3];
      contentArray1[6] = contentArray1[5];
      contentArray1[7] = contentArray1[6];
      String string11 = "B7d.b'{S0R11z";
      ApiResponse apiResponse0 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 11000)
  public void test006()  throws Throwable  {
      boolean boolean0 = false;
      boolean boolean1 = false;
      Content[] contentArray0 = new Content[8];
      ExampleObject[] exampleObjectArray0 = new ExampleObject[4];
      String string0 = "java.langjava.lang.Object";
      String string1 = "io.swagger.jaxrs2.OperationParser";
      String string2 = "7:zM%O.pbe&sBmGe";
      String string3 = "CSeoC4=-jM&l_L]d";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(exampleObject0).externalValue();
      doReturn(string0, string1, string2, string3, string2).when(exampleObject0).name();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(exampleObject0).summary();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(exampleObject0).value();
      exampleObjectArray0[0] = exampleObject0;
      exampleObjectArray0[1] = exampleObjectArray0[0];
      exampleObjectArray0[2] = exampleObjectArray0[1];
      exampleObjectArray0[3] = exampleObjectArray0[2];
      ExampleObject[] exampleObjectArray1 = new ExampleObject[2];
      assertFalse(exampleObjectArray1.equals((Object)exampleObjectArray0));
      
      exampleObjectArray1[0] = exampleObject0;
      exampleObjectArray1[1] = exampleObject0;
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Object) exampleObjectArray0, (Object) exampleObjectArray0, (Object) exampleObjectArray0, (Object) exampleObjectArray0, (Object) exampleObjectArray1).when(content0).examples();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(content0).mediaType();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      contentArray0[3] = contentArray0[2];
      contentArray0[4] = contentArray0[3];
      contentArray0[5] = contentArray0[4];
      contentArray0[6] = contentArray0[5];
      contentArray0[7] = contentArray0[6];
      boolean boolean2 = false;
      String string4 = "9,tXfw88k}.\"X4hSP";
      Explode explode0 = Explode.DEFAULT;
      String string5 = "o&zNAsF&E^n4B";
      String string6 = "2_XRj\"*\">t";
      boolean boolean3 = true;
      Class<io.swagger.oas.models.parameters.Parameter> class0 = io.swagger.oas.models.parameters.Parameter.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(schema0).implementation();
      String string7 = "";
      String string8 = "java.langio.swagger.oas.models.info.Info";
      String string9 = "_d2?(";
      Class<Void> class1 = Void.class;
      Class<io.swagger.oas.models.media.Content> class2 = io.swagger.oas.models.media.Content.class;
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class1).when(schema1).implementation();
      boolean boolean4 = false;
      Explode explode1 = Explode.TRUE;
      String string10 = null;
      String string11 = "java.langio.swagger.oas.models.info.Info";
      String string12 = "java.langio.swagger.oas.models.PathItem";
      String string13 = "EMV3Wh";
      boolean boolean5 = false;
      Schema schema2 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String[]) null).when(schema2).allowableValues();
      doReturn((String) null).when(schema2).defaultValue();
      doReturn(false).when(schema2).deprecated();
      doReturn((String) null).when(schema2).description();
      doReturn((String) null, (String) null).when(schema2).example();
      doReturn(false).when(schema2).exclusiveMaximum();
      doReturn(false).when(schema2).exclusiveMinimum();
      doReturn((ExternalDocumentation) null).when(schema2).externalDocs();
      doReturn((String) null).when(schema2).format();
      doReturn(0).when(schema2).maxLength();
      doReturn(0).when(schema2).minProperties();
      doReturn((String) null).when(schema2).pattern();
      doReturn(false).when(schema2).readOnly();
      doReturn((String) null).when(schema2).ref();
      doReturn((String) null).when(schema2).type();
      String string14 = "<k[k3|4/ZYxx";
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0, boolean4).when(parameter0).allowEmptyValue();
      doReturn(boolean1, boolean1).when(parameter0).allowReserved();
      doReturn(contentArray0).when(parameter0).content();
      doReturn(boolean2, boolean3, false).when(parameter0).deprecated();
      doReturn(string4, string8, string9, string3).when(parameter0).description();
      doReturn(explode0, explode0, explode0).when(parameter0).explode();
      doReturn(string5, string6, string10).when(parameter0).in();
      doReturn(string6, string9, string12, string13).when(parameter0).name();
      doReturn(boolean3, boolean3, boolean5).when(parameter0).required();
      doReturn(schema0, schema0, schema1, schema2).when(parameter0).schema();
      doReturn(string7, string14, (String) null).when(parameter0).style();
      Components components0 = new Components();
      assertNotNull(components0);
      
      String string15 = "=]?x@amV=cTo{";
      RequestBody requestBody0 = new RequestBody();
      assertNull(requestBody0.get$ref());
      assertNull(requestBody0.getRequired());
      assertNull(requestBody0.getDescription());
      assertNotNull(requestBody0);
      
      Components components1 = components0.addRequestBodies(string15, requestBody0);
      assertSame(components0, components1);
      assertNotSame(string15, string8);
      assertNotSame(string15, string6);
      assertNotSame(string15, string2);
      assertNotSame(string15, string9);
      assertNotSame(string15, string11);
      assertNotSame(string15, string4);
      assertNotSame(string15, string5);
      assertNotSame(string15, string14);
      assertNotSame(string15, string7);
      assertNotSame(string15, string0);
      assertNotSame(string15, string13);
      assertNotSame(string15, string12);
      assertNotSame(string15, string3);
      assertNotSame(string15, string1);
      assertSame(components1, components0);
      assertNull(requestBody0.get$ref());
      assertNull(requestBody0.getRequired());
      assertNull(requestBody0.getDescription());
      assertFalse(string15.equals((Object)string8));
      assertFalse(string15.equals((Object)string6));
      assertFalse(string15.equals((Object)string2));
      assertFalse(string15.equals((Object)string9));
      assertFalse(string15.equals((Object)string11));
      assertFalse(string15.equals((Object)string4));
      assertFalse(string15.equals((Object)string5));
      assertFalse(string15.equals((Object)string14));
      assertFalse(string15.equals((Object)string7));
      assertFalse(string15.equals((Object)string0));
      assertFalse(string15.equals((Object)string13));
      assertFalse(string15.equals((Object)string12));
      assertFalse(string15.equals((Object)string3));
      assertFalse(string15.equals((Object)string1));
      assertNotNull(components1);
      
      SecurityScheme securityScheme0 = new SecurityScheme();
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getDescription());
      assertNotNull(securityScheme0);
      
      Components components2 = components1.addSecuritySchemes(string15, securityScheme0);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertNotSame(string15, string8);
      assertNotSame(string15, string6);
      assertNotSame(string15, string2);
      assertNotSame(string15, string9);
      assertNotSame(string15, string11);
      assertNotSame(string15, string4);
      assertNotSame(string15, string5);
      assertNotSame(string15, string14);
      assertNotSame(string15, string7);
      assertNotSame(string15, string0);
      assertNotSame(string15, string13);
      assertNotSame(string15, string12);
      assertNotSame(string15, string3);
      assertNotSame(string15, string1);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertNull(requestBody0.get$ref());
      assertNull(requestBody0.getRequired());
      assertNull(requestBody0.getDescription());
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getDescription());
      assertFalse(string15.equals((Object)string8));
      assertFalse(string15.equals((Object)string6));
      assertFalse(string15.equals((Object)string2));
      assertFalse(string15.equals((Object)string9));
      assertFalse(string15.equals((Object)string11));
      assertFalse(string15.equals((Object)string4));
      assertFalse(string15.equals((Object)string5));
      assertFalse(string15.equals((Object)string14));
      assertFalse(string15.equals((Object)string7));
      assertFalse(string15.equals((Object)string0));
      assertFalse(string15.equals((Object)string13));
      assertFalse(string15.equals((Object)string12));
      assertFalse(string15.equals((Object)string3));
      assertFalse(string15.equals((Object)string1));
      assertNotNull(components2);
      
      Map<String, io.swagger.oas.models.media.Schema> map0 = (Map<String, io.swagger.oas.models.media.Schema>)components2.getSchemas();
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertNotSame(string15, string8);
      assertNotSame(string15, string6);
      assertNotSame(string15, string2);
      assertNotSame(string15, string9);
      assertNotSame(string15, string11);
      assertNotSame(string15, string4);
      assertNotSame(string15, string5);
      assertNotSame(string15, string14);
      assertNotSame(string15, string7);
      assertNotSame(string15, string0);
      assertNotSame(string15, string13);
      assertNotSame(string15, string12);
      assertNotSame(string15, string3);
      assertNotSame(string15, string1);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertNull(requestBody0.get$ref());
      assertNull(requestBody0.getRequired());
      assertNull(requestBody0.getDescription());
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getDescription());
      assertFalse(string15.equals((Object)string8));
      assertFalse(string15.equals((Object)string6));
      assertFalse(string15.equals((Object)string2));
      assertFalse(string15.equals((Object)string9));
      assertFalse(string15.equals((Object)string11));
      assertFalse(string15.equals((Object)string4));
      assertFalse(string15.equals((Object)string5));
      assertFalse(string15.equals((Object)string14));
      assertFalse(string15.equals((Object)string7));
      assertFalse(string15.equals((Object)string0));
      assertFalse(string15.equals((Object)string13));
      assertFalse(string15.equals((Object)string12));
      assertFalse(string15.equals((Object)string3));
      assertFalse(string15.equals((Object)string1));
      assertNull(map0);
      
      Parameter[] parameterArray0 = new Parameter[2];
      parameterArray0[0] = parameter0;
      parameterArray0[1] = parameterArray0[0];
      // Undeclared exception!
      try { 
        OperationParser.getParametersList(parameterArray0, components0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.util.ParameterProcessor", e);
      }
  }

  @Test(timeout = 11000)
  public void test007()  throws Throwable  {
      Content[] contentArray0 = new Content[9];
      Schema schema0 = null;
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      contentArray0[3] = contentArray0[2];
      contentArray0[4] = contentArray0[3];
      contentArray0[5] = contentArray0[4];
      contentArray0[6] = contentArray0[5];
      contentArray0[7] = contentArray0[6];
      contentArray0[8] = contentArray0[7];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      assertNotNull(components0);
      
      ApiResponses apiResponses0 = new ApiResponses();
      assertEquals(0, apiResponses0.size());
      assertTrue(apiResponses0.isEmpty());
      assertNotNull(apiResponses0);
      
      Components components1 = components0.responses(apiResponses0);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertEquals(0, apiResponses0.size());
      assertTrue(apiResponses0.isEmpty());
      assertNotNull(components1);
      
      String string0 = "";
      io.swagger.oas.models.links.Link link0 = new io.swagger.oas.models.links.Link();
      assertNull(link0.getOperationRef());
      assertNull(link0.get$ref());
      assertNull(link0.getDescription());
      assertNull(link0.getOperationId());
      assertNotNull(link0);
      
      io.swagger.oas.models.links.Link link1 = link0.operationId(apiResponses0.DEFAULT);
      assertSame(link0, link1);
      assertSame(link1, link0);
      assertEquals("default", link0.getOperationId());
      assertNull(link0.getOperationRef());
      assertNull(link0.get$ref());
      assertNull(link0.getDescription());
      assertNull(link1.getDescription());
      assertNull(link1.getOperationRef());
      assertEquals("default", link1.getOperationId());
      assertNull(link1.get$ref());
      assertEquals(0, apiResponses0.size());
      assertTrue(apiResponses0.isEmpty());
      assertNotNull(link1);
      
      String string1 = "fb;V4";
      io.swagger.oas.models.info.Info info0 = new io.swagger.oas.models.info.Info();
      assertNull(info0.getTermsOfService());
      assertNull(info0.getVersion());
      assertNull(info0.getTitle());
      assertNull(info0.getDescription());
      assertNotNull(info0);
      
      info0.setVersion(apiResponses0.DEFAULT);
      assertEquals("default", info0.getVersion());
      assertNull(info0.getTermsOfService());
      assertNull(info0.getTitle());
      assertNull(info0.getDescription());
      assertEquals(0, apiResponses0.size());
      assertTrue(apiResponses0.isEmpty());
      
      components1.addExtension(string1, info0);
      assertNotSame(string1, string0);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertEquals("default", info0.getVersion());
      assertNull(info0.getTermsOfService());
      assertNull(info0.getTitle());
      assertNull(info0.getDescription());
      assertEquals(0, apiResponses0.size());
      assertTrue(apiResponses0.isEmpty());
      assertFalse(string1.equals((Object)string0));
      
      RequestBody requestBody0 = new RequestBody();
      assertNull(requestBody0.get$ref());
      assertNull(requestBody0.getRequired());
      assertNull(requestBody0.getDescription());
      assertNotNull(requestBody0);
      
      io.swagger.oas.models.links.Link link2 = link0.requestBody(requestBody0);
      assertSame(link0, link2);
      assertSame(link0, link1);
      assertSame(link2, link1);
      assertSame(link2, link0);
      assertEquals("default", link0.getOperationId());
      assertNull(link0.getOperationRef());
      assertNull(link0.get$ref());
      assertNull(link0.getDescription());
      assertNull(requestBody0.get$ref());
      assertNull(requestBody0.getRequired());
      assertNull(requestBody0.getDescription());
      assertNull(link2.getOperationRef());
      assertNull(link2.get$ref());
      assertNull(link2.getDescription());
      assertEquals("default", link2.getOperationId());
      assertNotNull(link2);
      
      MediaType mediaType0 = new MediaType();
      assertNull(mediaType0.getExample());
      assertNotNull(mediaType0);
      
      Map<String, Object> map0 = mediaType0.getExtensions();
      assertNull(mediaType0.getExample());
      assertNull(map0);
      
      requestBody0.setExtensions(map0);
      assertNull(requestBody0.get$ref());
      assertNull(requestBody0.getRequired());
      assertNull(requestBody0.getDescription());
      assertNull(mediaType0.getExample());
      
      io.swagger.oas.models.links.Link link3 = link2.description(apiResponses0.DEFAULT);
      assertSame(link0, link2);
      assertSame(link0, link3);
      assertSame(link0, link1);
      assertSame(link2, link3);
      assertSame(link2, link1);
      assertSame(link2, link0);
      assertSame(link3, link0);
      assertSame(link3, link1);
      assertSame(link3, link2);
      assertEquals("default", link0.getOperationId());
      assertEquals("default", link0.getDescription());
      assertNull(link0.getOperationRef());
      assertNull(link0.get$ref());
      assertNull(requestBody0.get$ref());
      assertNull(requestBody0.getRequired());
      assertNull(requestBody0.getDescription());
      assertEquals("default", link2.getDescription());
      assertNull(link2.getOperationRef());
      assertNull(link2.get$ref());
      assertEquals("default", link2.getOperationId());
      assertNull(link3.getOperationRef());
      assertNull(link3.get$ref());
      assertEquals("default", link3.getOperationId());
      assertEquals("default", link3.getDescription());
      assertEquals(0, apiResponses0.size());
      assertTrue(apiResponses0.isEmpty());
      assertNotNull(link3);
      
      Header header0 = new Header();
      assertNull(header0.getExample());
      assertNull(header0.get$ref());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getDescription());
      assertNull(header0.getRequired());
      assertNull(header0.getDeprecated());
      assertNull(header0.getExplode());
      assertNull(header0.getStyle());
      assertNotNull(header0);
      
      boolean boolean0 = false;
      Boolean boolean1 = new Boolean(boolean0);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      io.swagger.oas.models.media.Schema<ApiResponses> schema1 = new io.swagger.oas.models.media.Schema<ApiResponses>();
      assertNull(schema1.getMinItems());
      assertNull(schema1.getDeprecated());
      assertNull(schema1.getExclusiveMinimum());
      assertNull(schema1.getMaxItems());
      assertNull(schema1.getPattern());
      assertNull(schema1.getReadOnly());
      assertNull(schema1.getTitle());
      assertNull(schema1.getUniqueItems());
      assertNull(schema1.getMaxLength());
      assertNull(schema1.get$ref());
      assertNull(schema1.getDescription());
      assertNull(schema1.getType());
      assertNull(schema1.getExclusiveMaximum());
      assertNull(schema1.getMaxProperties());
      assertNull(schema1.getWriteOnly());
      assertNull(schema1.getMinLength());
      assertNull(schema1.getNullable());
      assertNull(schema1.getName());
      assertNull(schema1.getFormat());
      assertNull(schema1.getMinProperties());
      assertNotNull(schema1);
      
      List<Example> list0 = null;
      Components components2 = components1.addLinks(string0, link3);
      assertNotSame(string0, string1);
      assertSame(link0, link2);
      assertSame(link0, link3);
      assertSame(link0, link1);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertSame(link2, link3);
      assertSame(link2, link1);
      assertSame(link2, link0);
      assertSame(link3, link0);
      assertSame(link3, link1);
      assertSame(link3, link2);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertEquals("default", link0.getOperationId());
      assertEquals("default", link0.getDescription());
      assertNull(link0.getOperationRef());
      assertNull(link0.get$ref());
      assertNull(requestBody0.get$ref());
      assertNull(requestBody0.getRequired());
      assertNull(requestBody0.getDescription());
      assertEquals("default", link2.getDescription());
      assertNull(link2.getOperationRef());
      assertNull(link2.get$ref());
      assertEquals("default", link2.getOperationId());
      assertNull(link3.getOperationRef());
      assertNull(link3.get$ref());
      assertEquals("default", link3.getOperationId());
      assertEquals("default", link3.getDescription());
      assertEquals(0, apiResponses0.size());
      assertTrue(apiResponses0.isEmpty());
      assertFalse(string0.equals((Object)string1));
      assertNotNull(components2);
      
      Link[] linkArray0 = new Link[2];
      Link link4 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(link4).description();
      doReturn((String) null, (String) null).when(link4).operationId();
      doReturn((String) null, (String) null).when(link4).operationRef();
      linkArray0[0] = link4;
      linkArray0[1] = linkArray0[0];
      Map<String, io.swagger.oas.models.links.Link> map1 = OperationParser.getLinks(linkArray0);
      assertTrue(map1.isEmpty());
      assertEquals(0, map1.size());
      assertEquals(2, linkArray0.length);
      assertNotNull(map1);
  }

  @Test(timeout = 11000)
  public void test008()  throws Throwable  {
      boolean boolean0 = true;
      Content[] contentArray0 = new Content[0];
      String string0 = "";
      Explode explode0 = Explode.FALSE;
      Explode explode1 = Explode.TRUE;
      String string1 = "";
      Schema schema0 = null;
      String string2 = "";
      boolean boolean1 = false;
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      assertNotNull(components0);
      
      Example example0 = new Example();
      assertNull(example0.getExternalValue());
      assertNull(example0.getDescription());
      assertNull(example0.getSummary());
      assertNull(example0.get$ref());
      assertNotNull(example0);
      
      String string3 = "^s";
      io.swagger.oas.models.media.Schema<MediaType> schema1 = new io.swagger.oas.models.media.Schema<MediaType>();
      assertNull(schema1.getNullable());
      assertNull(schema1.getExclusiveMaximum());
      assertNull(schema1.getName());
      assertNull(schema1.getMaxItems());
      assertNull(schema1.getDescription());
      assertNull(schema1.getUniqueItems());
      assertNull(schema1.getMinItems());
      assertNull(schema1.getMaxProperties());
      assertNull(schema1.getDeprecated());
      assertNull(schema1.getMinLength());
      assertNull(schema1.getReadOnly());
      assertNull(schema1.getPattern());
      assertNull(schema1.getMinProperties());
      assertNull(schema1.getExclusiveMinimum());
      assertNull(schema1.getMaxLength());
      assertNull(schema1.get$ref());
      assertNull(schema1.getType());
      assertNull(schema1.getFormat());
      assertNull(schema1.getWriteOnly());
      assertNull(schema1.getTitle());
      assertNotNull(schema1);
      
      Components components1 = components0.addSchemas(string3, schema1);
      assertSame(components0, components1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertSame(components1, components0);
      assertNull(schema1.getNullable());
      assertNull(schema1.getExclusiveMaximum());
      assertNull(schema1.getName());
      assertNull(schema1.getMaxItems());
      assertNull(schema1.getDescription());
      assertNull(schema1.getUniqueItems());
      assertNull(schema1.getMinItems());
      assertNull(schema1.getMaxProperties());
      assertNull(schema1.getDeprecated());
      assertNull(schema1.getMinLength());
      assertNull(schema1.getReadOnly());
      assertNull(schema1.getPattern());
      assertNull(schema1.getMinProperties());
      assertNull(schema1.getExclusiveMinimum());
      assertNull(schema1.getMaxLength());
      assertNull(schema1.get$ref());
      assertNull(schema1.getType());
      assertNull(schema1.getFormat());
      assertNull(schema1.getWriteOnly());
      assertNull(schema1.getTitle());
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(components1);
      
      io.swagger.oas.models.parameters.Parameter parameter1 = new io.swagger.oas.models.parameters.Parameter();
      assertNull(parameter1.getExplode());
      assertNull(parameter1.getName());
      assertNull(parameter1.getAllowEmptyValue());
      assertNull(parameter1.getAllowReserved());
      assertNull(parameter1.getRequired());
      assertNull(parameter1.getDescription());
      assertNull(parameter1.getStyle());
      assertNull(parameter1.get$ref());
      assertNull(parameter1.getExample());
      assertNull(parameter1.getIn());
      assertNull(parameter1.getDeprecated());
      assertNotNull(parameter1);
      
      io.swagger.oas.models.parameters.Parameter parameter2 = parameter1.example(string0);
      assertSame(parameter2, parameter1);
      assertSame(string0, string2);
      assertNotSame(string0, string3);
      assertSame(string0, string1);
      assertSame(parameter1, parameter2);
      assertNull(parameter2.getDescription());
      assertNull(parameter2.getAllowReserved());
      assertNull(parameter2.getRequired());
      assertNull(parameter2.getExplode());
      assertNull(parameter2.getName());
      assertNull(parameter2.getAllowEmptyValue());
      assertNull(parameter2.getStyle());
      assertNull(parameter2.get$ref());
      assertEquals("", parameter2.getExample());
      assertNull(parameter2.getIn());
      assertNull(parameter2.getDeprecated());
      assertNull(parameter1.getExplode());
      assertNull(parameter1.getName());
      assertNull(parameter1.getAllowEmptyValue());
      assertNull(parameter1.getAllowReserved());
      assertNull(parameter1.getRequired());
      assertNull(parameter1.getDescription());
      assertNull(parameter1.getStyle());
      assertNull(parameter1.get$ref());
      assertEquals("", parameter1.getExample());
      assertNull(parameter1.getIn());
      assertNull(parameter1.getDeprecated());
      assertFalse(string0.equals((Object)string3));
      assertNotNull(parameter2);
      
      Components components2 = components1.addParameters(string3, parameter2);
      assertSame(parameter2, parameter1);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(string0, string2);
      assertNotSame(string0, string3);
      assertSame(string0, string1);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(parameter1, parameter2);
      assertNull(parameter2.getDescription());
      assertNull(parameter2.getAllowReserved());
      assertNull(parameter2.getRequired());
      assertNull(parameter2.getExplode());
      assertNull(parameter2.getName());
      assertNull(parameter2.getAllowEmptyValue());
      assertNull(parameter2.getStyle());
      assertNull(parameter2.get$ref());
      assertEquals("", parameter2.getExample());
      assertNull(parameter2.getIn());
      assertNull(parameter2.getDeprecated());
      assertNull(schema1.getNullable());
      assertNull(schema1.getExclusiveMaximum());
      assertNull(schema1.getName());
      assertNull(schema1.getMaxItems());
      assertNull(schema1.getDescription());
      assertNull(schema1.getUniqueItems());
      assertNull(schema1.getMinItems());
      assertNull(schema1.getMaxProperties());
      assertNull(schema1.getDeprecated());
      assertNull(schema1.getMinLength());
      assertNull(schema1.getReadOnly());
      assertNull(schema1.getPattern());
      assertNull(schema1.getMinProperties());
      assertNull(schema1.getExclusiveMinimum());
      assertNull(schema1.getMaxLength());
      assertNull(schema1.get$ref());
      assertNull(schema1.getType());
      assertNull(schema1.getFormat());
      assertNull(schema1.getWriteOnly());
      assertNull(schema1.getTitle());
      assertNull(parameter1.getExplode());
      assertNull(parameter1.getName());
      assertNull(parameter1.getAllowEmptyValue());
      assertNull(parameter1.getAllowReserved());
      assertNull(parameter1.getRequired());
      assertNull(parameter1.getDescription());
      assertNull(parameter1.getStyle());
      assertNull(parameter1.get$ref());
      assertEquals("", parameter1.getExample());
      assertNull(parameter1.getIn());
      assertNull(parameter1.getDeprecated());
      assertFalse(string0.equals((Object)string3));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(components2);
      
      Map<String, SecurityScheme> map0 = components1.getSecuritySchemes();
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertNull(schema1.getNullable());
      assertNull(schema1.getExclusiveMaximum());
      assertNull(schema1.getName());
      assertNull(schema1.getMaxItems());
      assertNull(schema1.getDescription());
      assertNull(schema1.getUniqueItems());
      assertNull(schema1.getMinItems());
      assertNull(schema1.getMaxProperties());
      assertNull(schema1.getDeprecated());
      assertNull(schema1.getMinLength());
      assertNull(schema1.getReadOnly());
      assertNull(schema1.getPattern());
      assertNull(schema1.getMinProperties());
      assertNull(schema1.getExclusiveMinimum());
      assertNull(schema1.getMaxLength());
      assertNull(schema1.get$ref());
      assertNull(schema1.getType());
      assertNull(schema1.getFormat());
      assertNull(schema1.getWriteOnly());
      assertNull(schema1.getTitle());
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNull(map0);
      
      Components components3 = components2.securitySchemes(map0);
      assertSame(parameter2, parameter1);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(string0, string2);
      assertNotSame(string0, string3);
      assertSame(string0, string1);
      assertSame(components3, components2);
      assertSame(components3, components1);
      assertSame(components3, components0);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertSame(parameter1, parameter2);
      assertNull(parameter2.getDescription());
      assertNull(parameter2.getAllowReserved());
      assertNull(parameter2.getRequired());
      assertNull(parameter2.getExplode());
      assertNull(parameter2.getName());
      assertNull(parameter2.getAllowEmptyValue());
      assertNull(parameter2.getStyle());
      assertNull(parameter2.get$ref());
      assertEquals("", parameter2.getExample());
      assertNull(parameter2.getIn());
      assertNull(parameter2.getDeprecated());
      assertNull(schema1.getNullable());
      assertNull(schema1.getExclusiveMaximum());
      assertNull(schema1.getName());
      assertNull(schema1.getMaxItems());
      assertNull(schema1.getDescription());
      assertNull(schema1.getUniqueItems());
      assertNull(schema1.getMinItems());
      assertNull(schema1.getMaxProperties());
      assertNull(schema1.getDeprecated());
      assertNull(schema1.getMinLength());
      assertNull(schema1.getReadOnly());
      assertNull(schema1.getPattern());
      assertNull(schema1.getMinProperties());
      assertNull(schema1.getExclusiveMinimum());
      assertNull(schema1.getMaxLength());
      assertNull(schema1.get$ref());
      assertNull(schema1.getType());
      assertNull(schema1.getFormat());
      assertNull(schema1.getWriteOnly());
      assertNull(schema1.getTitle());
      assertNull(parameter1.getExplode());
      assertNull(parameter1.getName());
      assertNull(parameter1.getAllowEmptyValue());
      assertNull(parameter1.getAllowReserved());
      assertNull(parameter1.getRequired());
      assertNull(parameter1.getDescription());
      assertNull(parameter1.getStyle());
      assertNull(parameter1.get$ref());
      assertEquals("", parameter1.getExample());
      assertNull(parameter1.getIn());
      assertNull(parameter1.getDeprecated());
      assertFalse(string0.equals((Object)string3));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(components3);
      
      String string4 = "RC}-C!c+?fV>";
      String string5 = ";";
      String string6 = "#/components/schemas/";
      String string7 = "java.langio.swagger.oas.models.responses.ApiResponses";
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      String string8 = "bo}v^";
      String string9 = "tQ&Y";
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      String string10 = null;
      String string11 = "";
      MediaType mediaType0 = new MediaType();
      assertNull(mediaType0.getExample());
      assertNotNull(mediaType0);
      
      String string12 = "YT;x7ht*\\N{r";
      Boolean boolean2 = Boolean.FALSE;
      assertFalse(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      io.swagger.oas.annotations.parameters.RequestBody requestBody0 = mock(io.swagger.oas.annotations.parameters.RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(requestBody0).description();
      doReturn(boolean1).when(requestBody0).required();
      Optional<RequestBody> optional0 = OperationParser.getRequestBody(requestBody0, components3);
      assertSame(parameter2, parameter1);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertNotSame(string0, string7);
      assertSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string6);
      assertNotSame(string0, string4);
      assertNotSame(string0, string9);
      assertNotSame(string0, string5);
      assertSame(string0, string11);
      assertNotSame(string0, string8);
      assertSame(string0, string1);
      assertNotSame(string0, string12);
      assertSame(components3, components2);
      assertSame(components3, components1);
      assertSame(components3, components0);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertNotSame(string3, string8);
      assertNotSame(string3, string2);
      assertNotSame(string3, string5);
      assertNotSame(string3, string12);
      assertNotSame(string3, string1);
      assertNotSame(string3, string6);
      assertNotSame(string3, string9);
      assertNotSame(string3, string7);
      assertNotSame(string3, string0);
      assertNotSame(string3, string11);
      assertNotSame(string3, string4);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertSame(parameter1, parameter2);
      assertNull(parameter2.getDescription());
      assertNull(parameter2.getAllowReserved());
      assertNull(parameter2.getRequired());
      assertNull(parameter2.getExplode());
      assertNull(parameter2.getName());
      assertNull(parameter2.getAllowEmptyValue());
      assertNull(parameter2.getStyle());
      assertNull(parameter2.get$ref());
      assertEquals("", parameter2.getExample());
      assertNull(parameter2.getIn());
      assertNull(parameter2.getDeprecated());
      assertNull(schema1.getNullable());
      assertNull(schema1.getExclusiveMaximum());
      assertNull(schema1.getName());
      assertNull(schema1.getMaxItems());
      assertNull(schema1.getDescription());
      assertNull(schema1.getUniqueItems());
      assertNull(schema1.getMinItems());
      assertNull(schema1.getMaxProperties());
      assertNull(schema1.getDeprecated());
      assertNull(schema1.getMinLength());
      assertNull(schema1.getReadOnly());
      assertNull(schema1.getPattern());
      assertNull(schema1.getMinProperties());
      assertNull(schema1.getExclusiveMinimum());
      assertNull(schema1.getMaxLength());
      assertNull(schema1.get$ref());
      assertNull(schema1.getType());
      assertNull(schema1.getFormat());
      assertNull(schema1.getWriteOnly());
      assertNull(schema1.getTitle());
      assertNull(parameter1.getExplode());
      assertNull(parameter1.getName());
      assertNull(parameter1.getAllowEmptyValue());
      assertNull(parameter1.getAllowReserved());
      assertNull(parameter1.getRequired());
      assertNull(parameter1.getDescription());
      assertNull(parameter1.getStyle());
      assertNull(parameter1.get$ref());
      assertEquals("", parameter1.getExample());
      assertNull(parameter1.getIn());
      assertNull(parameter1.getDeprecated());
      assertFalse(string0.equals((Object)string7));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string9));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string8));
      assertFalse(string0.equals((Object)string12));
      assertFalse(boolean1 == boolean0);
      assertFalse(string3.equals((Object)string8));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string12));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string6));
      assertFalse(string3.equals((Object)string9));
      assertFalse(string3.equals((Object)string7));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string11));
      assertFalse(string3.equals((Object)string4));
      assertNotNull(optional0);
      
      String string13 = "|0;+";
      String string14 = "";
      License license1 = mock(License.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[1];
      Optional<Set<Tag>> optional1 = OperationParser.getTags(stringArray0);
      assertEquals(1, stringArray0.length);
      assertNotNull(optional1);
      
      ApiResponse[] apiResponseArray0 = null;
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Produces produces1 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Optional<ApiResponses> optional2 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces1, components1);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertNotSame(string3, string8);
      assertNotSame(string3, string13);
      assertNotSame(string3, string2);
      assertNotSame(string3, string14);
      assertNotSame(string3, string5);
      assertNotSame(string3, string12);
      assertNotSame(string3, string9);
      assertNotSame(string3, string1);
      assertNotSame(string3, string6);
      assertNotSame(string3, string7);
      assertNotSame(string3, string0);
      assertNotSame(string3, string11);
      assertNotSame(string3, string4);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertNull(schema1.getNullable());
      assertNull(schema1.getExclusiveMaximum());
      assertNull(schema1.getName());
      assertNull(schema1.getMaxItems());
      assertNull(schema1.getDescription());
      assertNull(schema1.getUniqueItems());
      assertNull(schema1.getMinItems());
      assertNull(schema1.getMaxProperties());
      assertNull(schema1.getDeprecated());
      assertNull(schema1.getMinLength());
      assertNull(schema1.getReadOnly());
      assertNull(schema1.getPattern());
      assertNull(schema1.getMinProperties());
      assertNull(schema1.getExclusiveMinimum());
      assertNull(schema1.getMaxLength());
      assertNull(schema1.get$ref());
      assertNull(schema1.getType());
      assertNull(schema1.getFormat());
      assertNull(schema1.getWriteOnly());
      assertNull(schema1.getTitle());
      assertFalse(string3.equals((Object)string8));
      assertFalse(string3.equals((Object)string13));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string14));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string12));
      assertFalse(string3.equals((Object)string9));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string6));
      assertFalse(string3.equals((Object)string7));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string11));
      assertFalse(string3.equals((Object)string4));
      assertNotNull(optional2);
  }

  @Test(timeout = 11000)
  public void test009()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = "{JXyA+J]khTIA>";
      stringArray0[1] = string0;
      String string1 = "";
      stringArray0[2] = string1;
      String string2 = "";
      stringArray0[3] = string2;
      boolean boolean0 = true;
      String string3 = null;
      String string4 = "T}z!N^3WzT";
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(stringArray0[1], string4).when(externalDocumentation0).description();
      doReturn(stringArray0[3]).when(externalDocumentation0).url();
      int int0 = 2082;
      int int1 = (-1331);
      boolean boolean1 = false;
      boolean boolean2 = false;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(stringArray0).when(schema0).allowableValues();
      doReturn(stringArray0[0]).when(schema0).defaultValue();
      doReturn(boolean0, boolean0).when(schema0).deprecated();
      doReturn(stringArray0[0]).when(schema0).description();
      doReturn(string3, stringArray0[1], (String) null).when(schema0).example();
      doReturn(boolean0, boolean1).when(schema0).exclusiveMaximum();
      doReturn(boolean0, boolean2).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema0).externalDocs();
      doReturn(string3).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(int1).when(schema0).maxProperties();
      doReturn(int1).when(schema0).minProperties();
      doReturn(string3).when(schema0).pattern();
      doReturn(boolean0, boolean1).when(schema0).readOnly();
      doReturn(string3).when(schema0).ref();
      doReturn(string0, string2).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional0 = (Optional<io.swagger.oas.models.media.Schema>)OperationParser.getSchemaFromAnnotation(schema0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string4);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string4);
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      assertNotSame(string4, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string4));
      assertFalse(boolean0 == boolean2);
      assertFalse(boolean0 == boolean1);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean2 == boolean0);
      assertEquals(4, stringArray0.length);
      assertNotNull(optional0);
      
      String string5 = "qf<`$L6";
      String string6 = "R\"&z' <xgrlG-Q.Ou";
      String string7 = "";
      String string8 = "SiF;x!";
      Contact contact0 = null;
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      String string9 = "io.swagge";
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      io.swagger.oas.annotations.parameters.RequestBody requestBody0 = null;
      Components components0 = new Components();
      assertNotNull(components0);
      
      SecurityScheme securityScheme0 = new SecurityScheme();
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getBearerFormat());
      assertNotNull(securityScheme0);
      
      Components components1 = components0.addSecuritySchemes(stringArray0[3], securityScheme0);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getBearerFormat());
      assertEquals(4, stringArray0.length);
      assertNotNull(components1);
      
      Callback callback0 = new Callback();
      assertEquals(0, callback0.size());
      assertTrue(callback0.isEmpty());
      assertNotNull(callback0);
      
      Components components2 = components1.addCallbacks(string3, callback0);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getBearerFormat());
      assertEquals(0, callback0.size());
      assertTrue(callback0.isEmpty());
      assertEquals(4, stringArray0.length);
      assertNotNull(components2);
      
      String string10 = "IGNORE_DUPLICATE_MODULE_REGISTRATIONS";
      io.swagger.oas.models.media.Schema<ApiResponses> schema1 = new io.swagger.oas.models.media.Schema<ApiResponses>();
      assertNull(schema1.getMaxLength());
      assertNull(schema1.getType());
      assertNull(schema1.get$ref());
      assertNull(schema1.getFormat());
      assertNull(schema1.getWriteOnly());
      assertNull(schema1.getTitle());
      assertNull(schema1.getNullable());
      assertNull(schema1.getExclusiveMaximum());
      assertNull(schema1.getName());
      assertNull(schema1.getMaxItems());
      assertNull(schema1.getDescription());
      assertNull(schema1.getUniqueItems());
      assertNull(schema1.getMinItems());
      assertNull(schema1.getDeprecated());
      assertNull(schema1.getMinLength());
      assertNull(schema1.getMaxProperties());
      assertNull(schema1.getReadOnly());
      assertNull(schema1.getPattern());
      assertNull(schema1.getMinProperties());
      assertNull(schema1.getExclusiveMinimum());
      assertNotNull(schema1);
      
      Components components3 = components2.addSchemas(string10, schema1);
      assertSame(components3, components2);
      assertSame(components3, components1);
      assertSame(components3, components0);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertNotSame(string10, string0);
      assertNotSame(string10, string7);
      assertNotSame(string10, string5);
      assertNotSame(string10, string1);
      assertNotSame(string10, string4);
      assertNotSame(string10, string6);
      assertNotSame(string10, string8);
      assertNotSame(string10, string9);
      assertNotSame(string10, string2);
      assertNull(schema1.getMaxLength());
      assertNull(schema1.getType());
      assertNull(schema1.get$ref());
      assertNull(schema1.getFormat());
      assertNull(schema1.getWriteOnly());
      assertNull(schema1.getTitle());
      assertNull(schema1.getNullable());
      assertNull(schema1.getExclusiveMaximum());
      assertNull(schema1.getName());
      assertNull(schema1.getMaxItems());
      assertNull(schema1.getDescription());
      assertNull(schema1.getUniqueItems());
      assertNull(schema1.getMinItems());
      assertNull(schema1.getDeprecated());
      assertNull(schema1.getMinLength());
      assertNull(schema1.getMaxProperties());
      assertNull(schema1.getReadOnly());
      assertNull(schema1.getPattern());
      assertNull(schema1.getMinProperties());
      assertNull(schema1.getExclusiveMinimum());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getBearerFormat());
      assertEquals(0, callback0.size());
      assertTrue(callback0.isEmpty());
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string2));
      assertEquals(4, stringArray0.length);
      assertNotNull(components3);
      
      RequestBody requestBody1 = new RequestBody();
      assertNull(requestBody1.get$ref());
      assertNull(requestBody1.getRequired());
      assertNull(requestBody1.getDescription());
      assertNotNull(requestBody1);
      
      io.swagger.oas.models.media.Content content0 = new io.swagger.oas.models.media.Content();
      assertEquals(0, content0.size());
      assertTrue(content0.isEmpty());
      assertNotNull(content0);
      
      MediaType mediaType0 = new MediaType();
      assertNull(mediaType0.getExample());
      assertNotNull(mediaType0);
      
      io.swagger.oas.models.media.Content content1 = content0.addMediaType(stringArray0[2], mediaType0);
      assertSame(content0, content1);
      assertSame(content1, content0);
      assertFalse(content0.isEmpty());
      assertEquals(1, content0.size());
      assertNull(mediaType0.getExample());
      assertEquals(1, content1.size());
      assertFalse(content1.isEmpty());
      assertEquals(4, stringArray0.length);
      assertNotNull(content1);
      
      io.swagger.oas.models.media.Content content2 = content1.addMediaType(string3, mediaType0);
      assertSame(content0, content2);
      assertSame(content0, content1);
      assertSame(content1, content2);
      assertSame(content1, content0);
      assertSame(content2, content0);
      assertSame(content2, content1);
      assertFalse(content0.isEmpty());
      assertEquals(2, content0.size());
      assertNull(mediaType0.getExample());
      assertEquals(2, content1.size());
      assertFalse(content1.isEmpty());
      assertFalse(content2.isEmpty());
      assertEquals(2, content2.size());
      assertEquals(4, stringArray0.length);
      assertNotNull(content2);
      
      RequestBody requestBody2 = requestBody1.content(content2);
      assertSame(requestBody1, requestBody2);
      assertSame(content0, content2);
      assertSame(content0, content1);
      assertSame(content1, content2);
      assertSame(content1, content0);
      assertSame(content2, content0);
      assertSame(content2, content1);
      assertSame(requestBody2, requestBody1);
      assertNull(requestBody1.get$ref());
      assertNull(requestBody1.getRequired());
      assertNull(requestBody1.getDescription());
      assertFalse(content0.isEmpty());
      assertEquals(2, content0.size());
      assertNull(mediaType0.getExample());
      assertEquals(2, content1.size());
      assertFalse(content1.isEmpty());
      assertFalse(content2.isEmpty());
      assertEquals(2, content2.size());
      assertNull(requestBody2.getRequired());
      assertNull(requestBody2.getDescription());
      assertNull(requestBody2.get$ref());
      assertEquals(4, stringArray0.length);
      assertNotNull(requestBody2);
      
      Components components4 = components3.addRequestBodies(string3, requestBody2);
      assertSame(components3, components2);
      assertSame(components3, components4);
      assertSame(components3, components1);
      assertSame(components3, components0);
      assertSame(requestBody1, requestBody2);
      assertSame(content0, content2);
      assertSame(content0, content1);
      assertSame(content1, content2);
      assertSame(content1, content0);
      assertSame(content2, content0);
      assertSame(content2, content1);
      assertSame(requestBody2, requestBody1);
      assertSame(components4, components3);
      assertSame(components4, components1);
      assertSame(components4, components2);
      assertSame(components4, components0);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components0, components4);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertSame(components1, components4);
      assertSame(components2, components0);
      assertSame(components2, components4);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertNotSame(string10, string0);
      assertNotSame(string10, string7);
      assertNotSame(string10, string5);
      assertNotSame(string10, string1);
      assertNotSame(string10, string4);
      assertNotSame(string10, string6);
      assertNotSame(string10, string8);
      assertNotSame(string10, string9);
      assertNotSame(string10, string2);
      assertNull(schema1.getMaxLength());
      assertNull(schema1.getType());
      assertNull(schema1.get$ref());
      assertNull(schema1.getFormat());
      assertNull(schema1.getWriteOnly());
      assertNull(schema1.getTitle());
      assertNull(schema1.getNullable());
      assertNull(schema1.getExclusiveMaximum());
      assertNull(schema1.getName());
      assertNull(schema1.getMaxItems());
      assertNull(schema1.getDescription());
      assertNull(schema1.getUniqueItems());
      assertNull(schema1.getMinItems());
      assertNull(schema1.getDeprecated());
      assertNull(schema1.getMinLength());
      assertNull(schema1.getMaxProperties());
      assertNull(schema1.getReadOnly());
      assertNull(schema1.getPattern());
      assertNull(schema1.getMinProperties());
      assertNull(schema1.getExclusiveMinimum());
      assertNull(requestBody1.get$ref());
      assertNull(requestBody1.getRequired());
      assertNull(requestBody1.getDescription());
      assertFalse(content0.isEmpty());
      assertEquals(2, content0.size());
      assertNull(mediaType0.getExample());
      assertEquals(2, content1.size());
      assertFalse(content1.isEmpty());
      assertFalse(content2.isEmpty());
      assertEquals(2, content2.size());
      assertNull(requestBody2.getRequired());
      assertNull(requestBody2.getDescription());
      assertNull(requestBody2.get$ref());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getBearerFormat());
      assertEquals(0, callback0.size());
      assertTrue(callback0.isEmpty());
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string2));
      assertEquals(4, stringArray0.length);
      assertNotNull(components4);
      
      Optional<RequestBody> optional1 = OperationParser.getRequestBody(requestBody0, components4);
      assertSame(components3, components2);
      assertSame(components3, components4);
      assertSame(components3, components1);
      assertSame(components3, components0);
      assertSame(requestBody1, requestBody2);
      assertSame(content0, content2);
      assertSame(content0, content1);
      assertSame(content1, content2);
      assertSame(content1, content0);
      assertSame(content2, content0);
      assertSame(content2, content1);
      assertSame(requestBody2, requestBody1);
      assertSame(components4, components3);
      assertSame(components4, components1);
      assertSame(components4, components2);
      assertSame(components4, components0);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components0, components4);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertSame(components1, components4);
      assertSame(components2, components0);
      assertSame(components2, components4);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertNotSame(string10, string0);
      assertNotSame(string10, string7);
      assertNotSame(string10, string5);
      assertNotSame(string10, string1);
      assertNotSame(string10, string4);
      assertNotSame(string10, string6);
      assertNotSame(string10, string8);
      assertNotSame(string10, string9);
      assertNotSame(string10, string2);
      assertNull(schema1.getMaxLength());
      assertNull(schema1.getType());
      assertNull(schema1.get$ref());
      assertNull(schema1.getFormat());
      assertNull(schema1.getWriteOnly());
      assertNull(schema1.getTitle());
      assertNull(schema1.getNullable());
      assertNull(schema1.getExclusiveMaximum());
      assertNull(schema1.getName());
      assertNull(schema1.getMaxItems());
      assertNull(schema1.getDescription());
      assertNull(schema1.getUniqueItems());
      assertNull(schema1.getMinItems());
      assertNull(schema1.getDeprecated());
      assertNull(schema1.getMinLength());
      assertNull(schema1.getMaxProperties());
      assertNull(schema1.getReadOnly());
      assertNull(schema1.getPattern());
      assertNull(schema1.getMinProperties());
      assertNull(schema1.getExclusiveMinimum());
      assertNull(requestBody1.get$ref());
      assertNull(requestBody1.getRequired());
      assertNull(requestBody1.getDescription());
      assertFalse(content0.isEmpty());
      assertEquals(2, content0.size());
      assertNull(mediaType0.getExample());
      assertEquals(2, content1.size());
      assertFalse(content1.isEmpty());
      assertFalse(content2.isEmpty());
      assertEquals(2, content2.size());
      assertNull(requestBody2.getRequired());
      assertNull(requestBody2.getDescription());
      assertNull(requestBody2.get$ref());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getBearerFormat());
      assertEquals(0, callback0.size());
      assertTrue(callback0.isEmpty());
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string2));
      assertEquals(4, stringArray0.length);
      assertNotNull(optional1);
  }

  @Test(timeout = 11000)
  public void test010()  throws Throwable  {
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String[]) null).when(schema0).allowableValues();
      doReturn((String) null).when(schema0).defaultValue();
      doReturn(false).when(schema0).deprecated();
      doReturn((String) null).when(schema0).description();
      doReturn((String) null, (String) null).when(schema0).example();
      doReturn(false).when(schema0).exclusiveMaximum();
      doReturn(false).when(schema0).exclusiveMinimum();
      doReturn((ExternalDocumentation) null).when(schema0).externalDocs();
      doReturn((String) null).when(schema0).format();
      doReturn(0).when(schema0).maxLength();
      doReturn(0).when(schema0).minProperties();
      doReturn((String) null).when(schema0).pattern();
      doReturn(false).when(schema0).readOnly();
      doReturn((String) null).when(schema0).ref();
      doReturn((String) null).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional0 = (Optional<io.swagger.oas.models.media.Schema>)OperationParser.getSchemaFromAnnotation(schema0);
      assertNotNull(optional0);
      
      Parameter[] parameterArray0 = new Parameter[7];
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false, false).when(parameter0).allowEmptyValue();
      doReturn(false, false, false, false, false).when(parameter0).allowReserved();
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(parameter0).content();
      doReturn(false, false, false, false, false).when(parameter0).deprecated();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(parameter0).description();
      doReturn((Explode) null, (Explode) null, (Explode) null, (Explode) null, (Explode) null).when(parameter0).explode();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(parameter0).in();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(parameter0).name();
      doReturn(false, false, false, false, false).when(parameter0).required();
      doReturn((Schema) null, (Schema) null, (Schema) null, (Schema) null, (Schema) null).when(parameter0).schema();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(parameter0).style();
      parameterArray0[0] = parameter0;
      parameterArray0[1] = parameterArray0[0];
      parameterArray0[2] = parameterArray0[1];
      parameterArray0[3] = parameterArray0[2];
      parameterArray0[4] = parameterArray0[3];
      parameterArray0[5] = parameterArray0[4];
      parameterArray0[6] = parameterArray0[5];
      Components components0 = new Components();
      assertNotNull(components0);
      
      String string0 = "4NY\\GTo%n";
      Header header0 = new Header();
      assertNull(header0.getDeprecated());
      assertNull(header0.getRequired());
      assertNull(header0.getStyle());
      assertNull(header0.getExplode());
      assertNull(header0.get$ref());
      assertNull(header0.getExample());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getDescription());
      assertNotNull(header0);
      
      Components components1 = components0.addHeaders(string0, header0);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertNull(header0.getDeprecated());
      assertNull(header0.getRequired());
      assertNull(header0.getStyle());
      assertNull(header0.getExplode());
      assertNull(header0.get$ref());
      assertNull(header0.getExample());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getDescription());
      assertNotNull(components1);
      
      String string1 = "q8-xo)FKgQH]j'e@u4";
      io.swagger.oas.models.parameters.Parameter parameter1 = new io.swagger.oas.models.parameters.Parameter();
      assertNull(parameter1.getStyle());
      assertNull(parameter1.getExample());
      assertNull(parameter1.getIn());
      assertNull(parameter1.get$ref());
      assertNull(parameter1.getName());
      assertNull(parameter1.getRequired());
      assertNull(parameter1.getDescription());
      assertNull(parameter1.getAllowEmptyValue());
      assertNull(parameter1.getAllowReserved());
      assertNull(parameter1.getDeprecated());
      assertNull(parameter1.getExplode());
      assertNotNull(parameter1);
      
      Components components2 = components1.addParameters(string1, parameter1);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertNotSame(string0, string1);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertNotSame(string1, string0);
      assertNull(parameter1.getStyle());
      assertNull(parameter1.getExample());
      assertNull(parameter1.getIn());
      assertNull(parameter1.get$ref());
      assertNull(parameter1.getName());
      assertNull(parameter1.getRequired());
      assertNull(parameter1.getDescription());
      assertNull(parameter1.getAllowEmptyValue());
      assertNull(parameter1.getAllowReserved());
      assertNull(parameter1.getDeprecated());
      assertNull(parameter1.getExplode());
      assertNull(header0.getDeprecated());
      assertNull(header0.getRequired());
      assertNull(header0.getStyle());
      assertNull(header0.getExplode());
      assertNull(header0.get$ref());
      assertNull(header0.getExample());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getDescription());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(components2);
      
      String string2 = "io.swagge";
      SecurityScheme securityScheme0 = new SecurityScheme();
      assertNull(securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.get$ref());
      assertNotNull(securityScheme0);
      
      io.swagger.oas.models.media.Schema<String> schema1 = new io.swagger.oas.models.media.Schema<String>();
      assertNull(schema1.getExclusiveMinimum());
      assertNull(schema1.getReadOnly());
      assertNull(schema1.getUniqueItems());
      assertNull(schema1.getMinItems());
      assertNull(schema1.getMaxItems());
      assertNull(schema1.getName());
      assertNull(schema1.getFormat());
      assertNull(schema1.getNullable());
      assertNull(schema1.getMinLength());
      assertNull(schema1.getPattern());
      assertNull(schema1.getMaxProperties());
      assertNull(schema1.getMinProperties());
      assertNull(schema1.getDeprecated());
      assertNull(schema1.getWriteOnly());
      assertNull(schema1.getDescription());
      assertNull(schema1.getType());
      assertNull(schema1.get$ref());
      assertNull(schema1.getExclusiveMaximum());
      assertNull(schema1.getTitle());
      assertNull(schema1.getMaxLength());
      assertNotNull(schema1);
      
      Map<String, io.swagger.oas.models.media.Schema> map0 = (Map<String, io.swagger.oas.models.media.Schema>)schema1.getProperties();
      assertNull(schema1.getExclusiveMinimum());
      assertNull(schema1.getReadOnly());
      assertNull(schema1.getUniqueItems());
      assertNull(schema1.getMinItems());
      assertNull(schema1.getMaxItems());
      assertNull(schema1.getName());
      assertNull(schema1.getFormat());
      assertNull(schema1.getNullable());
      assertNull(schema1.getMinLength());
      assertNull(schema1.getPattern());
      assertNull(schema1.getMaxProperties());
      assertNull(schema1.getMinProperties());
      assertNull(schema1.getDeprecated());
      assertNull(schema1.getWriteOnly());
      assertNull(schema1.getDescription());
      assertNull(schema1.getType());
      assertNull(schema1.get$ref());
      assertNull(schema1.getExclusiveMaximum());
      assertNull(schema1.getTitle());
      assertNull(schema1.getMaxLength());
      assertNull(map0);
      
      components2.setSchemas(map0);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNull(parameter1.getStyle());
      assertNull(parameter1.getExample());
      assertNull(parameter1.getIn());
      assertNull(parameter1.get$ref());
      assertNull(parameter1.getName());
      assertNull(parameter1.getRequired());
      assertNull(parameter1.getDescription());
      assertNull(parameter1.getAllowEmptyValue());
      assertNull(parameter1.getAllowReserved());
      assertNull(parameter1.getDeprecated());
      assertNull(parameter1.getExplode());
      assertNull(schema1.getExclusiveMinimum());
      assertNull(schema1.getReadOnly());
      assertNull(schema1.getUniqueItems());
      assertNull(schema1.getMinItems());
      assertNull(schema1.getMaxItems());
      assertNull(schema1.getName());
      assertNull(schema1.getFormat());
      assertNull(schema1.getNullable());
      assertNull(schema1.getMinLength());
      assertNull(schema1.getPattern());
      assertNull(schema1.getMaxProperties());
      assertNull(schema1.getMinProperties());
      assertNull(schema1.getDeprecated());
      assertNull(schema1.getWriteOnly());
      assertNull(schema1.getDescription());
      assertNull(schema1.getType());
      assertNull(schema1.get$ref());
      assertNull(schema1.getExclusiveMaximum());
      assertNull(schema1.getTitle());
      assertNull(schema1.getMaxLength());
      assertNull(header0.getDeprecated());
      assertNull(header0.getRequired());
      assertNull(header0.getStyle());
      assertNull(header0.getExplode());
      assertNull(header0.get$ref());
      assertNull(header0.getExample());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getDescription());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      
      String string3 = "java.langio.swagger.oas.models.responses.ApiResponses";
      SecurityScheme securityScheme1 = securityScheme0.bearerFormat(string3);
      assertSame(securityScheme0, securityScheme1);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertSame(securityScheme1, securityScheme0);
      assertEquals("java.langio.swagger.oas.models.responses.ApiResponses", securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.get$ref());
      assertEquals("java.langio.swagger.oas.models.responses.ApiResponses", securityScheme1.getBearerFormat());
      assertNull(securityScheme1.getOpenIdConnectUrl());
      assertNull(securityScheme1.getType());
      assertNull(securityScheme1.getDescription());
      assertNull(securityScheme1.getName());
      assertNull(securityScheme1.getIn());
      assertNull(securityScheme1.get$ref());
      assertNull(securityScheme1.getScheme());
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(securityScheme1);
      
      Components components3 = components2.addSecuritySchemes(string2, securityScheme1);
      assertSame(components2, components3);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertSame(securityScheme0, securityScheme1);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertSame(securityScheme1, securityScheme0);
      assertSame(components3, components2);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(components1, components3);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNull(parameter1.getStyle());
      assertNull(parameter1.getExample());
      assertNull(parameter1.getIn());
      assertNull(parameter1.get$ref());
      assertNull(parameter1.getName());
      assertNull(parameter1.getRequired());
      assertNull(parameter1.getDescription());
      assertNull(parameter1.getAllowEmptyValue());
      assertNull(parameter1.getAllowReserved());
      assertNull(parameter1.getDeprecated());
      assertNull(parameter1.getExplode());
      assertEquals("java.langio.swagger.oas.models.responses.ApiResponses", securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.get$ref());
      assertEquals("java.langio.swagger.oas.models.responses.ApiResponses", securityScheme1.getBearerFormat());
      assertNull(securityScheme1.getOpenIdConnectUrl());
      assertNull(securityScheme1.getType());
      assertNull(securityScheme1.getDescription());
      assertNull(securityScheme1.getName());
      assertNull(securityScheme1.getIn());
      assertNull(securityScheme1.get$ref());
      assertNull(securityScheme1.getScheme());
      assertNull(header0.getDeprecated());
      assertNull(header0.getRequired());
      assertNull(header0.getStyle());
      assertNull(header0.getExplode());
      assertNull(header0.get$ref());
      assertNull(header0.getExample());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getDescription());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertNotNull(components3);
      
      HashMap<String, RequestBody> hashMap0 = new HashMap<String, RequestBody>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Components components4 = components3.requestBodies(hashMap0);
      assertSame(components0, components4);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(components1, components3);
      assertSame(components1, components0);
      assertSame(components1, components4);
      assertSame(components1, components2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertSame(components2, components3);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components2, components4);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertSame(securityScheme0, securityScheme1);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertSame(securityScheme1, securityScheme0);
      assertSame(components3, components2);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertSame(components3, components4);
      assertSame(components4, components3);
      assertSame(components4, components0);
      assertSame(components4, components1);
      assertSame(components4, components2);
      assertNull(parameter1.getStyle());
      assertNull(parameter1.getExample());
      assertNull(parameter1.getIn());
      assertNull(parameter1.get$ref());
      assertNull(parameter1.getName());
      assertNull(parameter1.getRequired());
      assertNull(parameter1.getDescription());
      assertNull(parameter1.getAllowEmptyValue());
      assertNull(parameter1.getAllowReserved());
      assertNull(parameter1.getDeprecated());
      assertNull(parameter1.getExplode());
      assertEquals("java.langio.swagger.oas.models.responses.ApiResponses", securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.get$ref());
      assertEquals("java.langio.swagger.oas.models.responses.ApiResponses", securityScheme1.getBearerFormat());
      assertNull(securityScheme1.getOpenIdConnectUrl());
      assertNull(securityScheme1.getType());
      assertNull(securityScheme1.getDescription());
      assertNull(securityScheme1.getName());
      assertNull(securityScheme1.getIn());
      assertNull(securityScheme1.get$ref());
      assertNull(securityScheme1.getScheme());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(header0.getDeprecated());
      assertNull(header0.getRequired());
      assertNull(header0.getStyle());
      assertNull(header0.getExplode());
      assertNull(header0.get$ref());
      assertNull(header0.getExample());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getDescription());
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(components4);
      
      Optional<List<io.swagger.oas.models.parameters.Parameter>> optional1 = OperationParser.getParametersList(parameterArray0, components4);
      assertSame(components0, components4);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(components1, components3);
      assertSame(components1, components0);
      assertSame(components1, components4);
      assertSame(components1, components2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertSame(components2, components3);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components2, components4);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertSame(securityScheme0, securityScheme1);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertSame(securityScheme1, securityScheme0);
      assertSame(components3, components2);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertSame(components3, components4);
      assertSame(components4, components3);
      assertSame(components4, components0);
      assertSame(components4, components1);
      assertSame(components4, components2);
      assertNull(parameter1.getStyle());
      assertNull(parameter1.getExample());
      assertNull(parameter1.getIn());
      assertNull(parameter1.get$ref());
      assertNull(parameter1.getName());
      assertNull(parameter1.getRequired());
      assertNull(parameter1.getDescription());
      assertNull(parameter1.getAllowEmptyValue());
      assertNull(parameter1.getAllowReserved());
      assertNull(parameter1.getDeprecated());
      assertNull(parameter1.getExplode());
      assertEquals("java.langio.swagger.oas.models.responses.ApiResponses", securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.get$ref());
      assertEquals("java.langio.swagger.oas.models.responses.ApiResponses", securityScheme1.getBearerFormat());
      assertNull(securityScheme1.getOpenIdConnectUrl());
      assertNull(securityScheme1.getType());
      assertNull(securityScheme1.getDescription());
      assertNull(securityScheme1.getName());
      assertNull(securityScheme1.getIn());
      assertNull(securityScheme1.get$ref());
      assertNull(securityScheme1.getScheme());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(header0.getDeprecated());
      assertNull(header0.getRequired());
      assertNull(header0.getStyle());
      assertNull(header0.getExplode());
      assertNull(header0.get$ref());
      assertNull(header0.getExample());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getDescription());
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals(7, parameterArray0.length);
      assertNotNull(optional1);
      
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(license0).name();
      doReturn((String) null).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional2 = OperationParser.getLicense(license0);
      assertNotNull(optional2);
  }

  @Test(timeout = 11000)
  public void test011()  throws Throwable  {
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(server0).description();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(server0).url();
      Optional<io.swagger.oas.models.servers.Server> optional0 = OperationParser.getServer(server0);
      assertNotNull(optional0);
      
      ApiResponse[] apiResponseArray0 = new ApiResponse[7];
      ApiResponse apiResponse0 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(apiResponse0).content();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(apiResponse0).description();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      apiResponseArray0[3] = apiResponseArray0[2];
      apiResponseArray0[4] = apiResponseArray0[3];
      apiResponseArray0[5] = apiResponseArray0[4];
      apiResponseArray0[6] = apiResponseArray0[5];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = null;
      Optional<ApiResponses> optional1 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components0);
      assertEquals(7, apiResponseArray0.length);
      assertNotNull(optional1);
      
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(info0).description();
      doReturn((String) null).when(info0).termsOfService();
      doReturn((String) null).when(info0).title();
      doReturn((String) null).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional2 = OperationParser.getInfo(info0);
      assertNotNull(optional2);
      
      Server[] serverArray0 = new Server[7];
      serverArray0[0] = server0;
      serverArray0[1] = server0;
      serverArray0[2] = server0;
      serverArray0[3] = server0;
      serverArray0[4] = server0;
      serverArray0[5] = server0;
      serverArray0[6] = server0;
      Optional<List<io.swagger.oas.models.servers.Server>> optional3 = OperationParser.getServers(serverArray0);
      assertEquals(7, serverArray0.length);
      assertNotNull(optional3);
  }

  @Test(timeout = 11000)
  public void test012()  throws Throwable  {
      Info info0 = null;
      Optional<io.swagger.oas.models.info.Info> optional0 = OperationParser.getInfo(info0);
      assertNotNull(optional0);
      
      String string0 = ">_8g";
      String string1 = "8'0<al>uY\"";
      String string2 = "";
      String string3 = "io.swagge";
      String string4 = "Kvoco/MD!g*#:0\"(h,";
      String string5 = "";
      Server server0 = null;
      Optional<io.swagger.oas.models.servers.Server> optional1 = OperationParser.getServer(server0);
      assertNotNull(optional1);
      
      boolean boolean0 = true;
      Content[] contentArray0 = null;
      boolean boolean1 = false;
      io.swagger.oas.annotations.parameters.RequestBody requestBody0 = mock(io.swagger.oas.annotations.parameters.RequestBody.class, new ViolatedAssumptionAnswer());
      String string6 = "java.langio.swagger.oas.models.responses.ApiResponses";
      String string7 = null;
      Callback callback0 = new Callback();
      assertEquals(0, callback0.size());
      assertTrue(callback0.isEmpty());
      assertNotNull(callback0);
  }

  @Test(timeout = 11000)
  public void test013()  throws Throwable  {
      License license0 = null;
      Optional<io.swagger.oas.models.info.License> optional0 = OperationParser.getLicense(license0);
      assertNotNull(optional0);
      
      String string0 = "";
      String string1 = "java.lang";
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(externalDocumentation0).description();
      doReturn(string1, (String) null).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional1 = OperationParser.getExternalDocumentation(externalDocumentation0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(optional1);
      
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String[]) null).when(schema0).allowableValues();
      doReturn((String) null).when(schema0).defaultValue();
      doReturn(false).when(schema0).deprecated();
      doReturn((String) null).when(schema0).description();
      doReturn((String) null, (String) null).when(schema0).example();
      doReturn(false).when(schema0).exclusiveMaximum();
      doReturn(false).when(schema0).exclusiveMinimum();
      doReturn((ExternalDocumentation) null).when(schema0).externalDocs();
      doReturn((String) null).when(schema0).format();
      doReturn(0).when(schema0).maxLength();
      doReturn(0).when(schema0).minProperties();
      doReturn((String) null).when(schema0).pattern();
      doReturn(false).when(schema0).readOnly();
      doReturn((String) null).when(schema0).ref();
      doReturn((String) null).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional2 = (Optional<io.swagger.oas.models.media.Schema>)OperationParser.getSchemaFromAnnotation(schema0);
      assertNotNull(optional2);
      
      Link link0 = null;
      Optional<io.swagger.oas.models.links.Link> optional3 = OperationParser.getLink(link0);
      assertNotNull(optional3);
  }

  @Test(timeout = 11000)
  public void test014()  throws Throwable  {
      LinkParameter[] linkParameterArray0 = null;
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameterArray0);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNotNull(map0);
      
      String[] stringArray0 = new String[4];
      String string0 = "*/*";
      stringArray0[0] = string0;
      stringArray0[1] = stringArray0[0];
      String string1 = "SfdT Z";
      stringArray0[3] = stringArray0[1];
      boolean boolean0 = false;
      String string2 = null;
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string2).when(externalDocumentation0).description();
      doReturn(stringArray0[3], string2).when(externalDocumentation0).url();
      int int0 = 1;
      String string3 = "java.langio.swagger.oas.models.responses.ApiResponses";
      boolean boolean1 = true;
      String string4 = "virtual";
      String string5 = "xyHsKs[";
      String string6 = "p";
      String string7 = "e1Z(n ;+";
      String string8 = "PROTECTED_AND_PUBLIC";
      String string9 = "";
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(stringArray0).when(schema0).allowableValues();
      doReturn(string1, string6).when(schema0).defaultValue();
      doReturn(boolean0).when(schema0).deprecated();
      doReturn(string1, string7).when(schema0).description();
      doReturn(stringArray0[0], stringArray0[3], string4, string8).when(schema0).example();
      doReturn(boolean0).when(schema0).exclusiveMaximum();
      doReturn(boolean0).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema0).externalDocs();
      doReturn(string0, stringArray0[1]).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(int0, int0).when(schema0).maxProperties();
      doReturn(int0, int0).when(schema0).minProperties();
      doReturn(string3, string4).when(schema0).pattern();
      doReturn(boolean1, boolean1).when(schema0).readOnly();
      doReturn(string4, string8).when(schema0).ref();
      doReturn(string5, string9).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional0 = (Optional<io.swagger.oas.models.media.Schema>)OperationParser.getSchemaFromAnnotation(schema0);
      assertNotSame(string6, string7);
      assertNotSame(string6, string4);
      assertNotSame(string6, string5);
      assertNotSame(string6, string0);
      assertNotSame(string6, string1);
      assertNotSame(string6, string3);
      assertNotSame(string6, string8);
      assertNotSame(string6, string9);
      assertNotSame(string7, string1);
      assertNotSame(string7, string6);
      assertNotSame(string7, string5);
      assertNotSame(string7, string0);
      assertNotSame(string7, string4);
      assertNotSame(string7, string9);
      assertNotSame(string7, string8);
      assertNotSame(string7, string3);
      assertNotSame(string8, string5);
      assertNotSame(string8, string0);
      assertNotSame(string8, string9);
      assertNotSame(string8, string4);
      assertNotSame(string8, string1);
      assertNotSame(string8, string6);
      assertNotSame(string8, string3);
      assertNotSame(string8, string7);
      assertNotSame(string9, string0);
      assertNotSame(string9, string7);
      assertNotSame(string9, string1);
      assertNotSame(string9, string8);
      assertNotSame(string9, string6);
      assertNotSame(string9, string3);
      assertNotSame(string9, string5);
      assertNotSame(string9, string4);
      assertNotSame(string0, string1);
      assertNotSame(string0, string6);
      assertNotSame(string0, string5);
      assertNotSame(string0, string7);
      assertNotSame(string0, string4);
      assertNotSame(string0, string8);
      assertNotSame(string0, string9);
      assertNotSame(string0, string3);
      assertNotSame(string1, string5);
      assertNotSame(string1, string8);
      assertNotSame(string1, string6);
      assertNotSame(string1, string3);
      assertNotSame(string1, string4);
      assertNotSame(string1, string9);
      assertNotSame(string1, string7);
      assertNotSame(string1, string0);
      assertNotSame(string3, string6);
      assertNotSame(string3, string5);
      assertNotSame(string3, string1);
      assertNotSame(string3, string8);
      assertNotSame(string3, string0);
      assertNotSame(string3, string4);
      assertNotSame(string3, string9);
      assertNotSame(string3, string7);
      assertNotSame(string4, string9);
      assertNotSame(string4, string1);
      assertNotSame(string4, string7);
      assertNotSame(string4, string0);
      assertNotSame(string4, string6);
      assertNotSame(string4, string5);
      assertNotSame(string4, string8);
      assertNotSame(string4, string3);
      assertNotSame(string5, string1);
      assertNotSame(string5, string4);
      assertNotSame(string5, string7);
      assertNotSame(string5, string9);
      assertNotSame(string5, string3);
      assertNotSame(string5, string8);
      assertNotSame(string5, string6);
      assertNotSame(string5, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string7));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string8));
      assertFalse(string0.equals((Object)string9));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string8));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string9));
      assertFalse(string1.equals((Object)string7));
      assertFalse(string1.equals((Object)string0));
      assertFalse(boolean0 == boolean1);
      assertFalse(string3.equals((Object)string6));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string8));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string9));
      assertFalse(string3.equals((Object)string7));
      assertFalse(boolean1 == boolean0);
      assertFalse(string4.equals((Object)string9));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string7));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string6));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string8));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string7));
      assertFalse(string5.equals((Object)string9));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string8));
      assertFalse(string5.equals((Object)string6));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string6.equals((Object)string7));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string8));
      assertFalse(string6.equals((Object)string9));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string9));
      assertFalse(string7.equals((Object)string8));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string9));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string4));
      assertEquals(4, stringArray0.length);
      assertNotNull(optional0);
      
      String string10 = "J93'&";
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string10).when(license0).name();
      doReturn(string5, string3).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional1 = OperationParser.getLicense(license0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string6);
      assertNotSame(string0, string5);
      assertNotSame(string0, string10);
      assertNotSame(string0, string7);
      assertNotSame(string0, string4);
      assertNotSame(string0, string8);
      assertNotSame(string0, string9);
      assertNotSame(string0, string3);
      assertNotSame(string10, string7);
      assertNotSame(string10, string0);
      assertNotSame(string10, string4);
      assertNotSame(string10, string9);
      assertNotSame(string10, string8);
      assertNotSame(string10, string3);
      assertNotSame(string10, string1);
      assertNotSame(string10, string6);
      assertNotSame(string10, string5);
      assertNotSame(string3, string6);
      assertNotSame(string3, string5);
      assertNotSame(string3, string1);
      assertNotSame(string3, string8);
      assertNotSame(string3, string0);
      assertNotSame(string3, string4);
      assertNotSame(string3, string9);
      assertNotSame(string3, string7);
      assertNotSame(string3, string10);
      assertNotSame(string5, string1);
      assertNotSame(string5, string4);
      assertNotSame(string5, string7);
      assertNotSame(string5, string9);
      assertNotSame(string5, string3);
      assertNotSame(string5, string8);
      assertNotSame(string5, string6);
      assertNotSame(string5, string0);
      assertNotSame(string5, string10);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string10));
      assertFalse(string0.equals((Object)string7));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string8));
      assertFalse(string0.equals((Object)string9));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string3.equals((Object)string6));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string8));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string9));
      assertFalse(string3.equals((Object)string7));
      assertFalse(string3.equals((Object)string10));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string7));
      assertFalse(string5.equals((Object)string9));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string8));
      assertFalse(string5.equals((Object)string6));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string10));
      assertNotNull(optional1);
      
      String string11 = "";
      String string12 = "1Rara.bf@";
      String string13 = "bagcyw#_\"M:KRS><Waf";
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      String string14 = "5wQ,F0TASo5";
      String string15 = null;
  }

  @Test(timeout = 11000)
  public void test015()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String string0 = ",8/$]/d={z={<\"@Wt";
      stringArray0[0] = string0;
      String string1 = ".";
      stringArray0[1] = string1;
      String string2 = "G";
      stringArray0[2] = string2;
      String string3 = "%]2XelhQ1,R";
      stringArray0[3] = string3;
      String string4 = "";
      stringArray0[4] = string4;
      Optional<Set<Tag>> optional0 = OperationParser.getTags(stringArray0);
      assertEquals(5, stringArray0.length);
      assertNotNull(optional0);
      
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional1 = OperationParser.getExternalDocumentation(externalDocumentation0);
      assertNotNull(optional1);
      
      Server[] serverArray0 = null;
      Optional<List<io.swagger.oas.models.servers.Server>> optional2 = OperationParser.getServers(serverArray0);
      assertNotNull(optional2);
      
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String[]) null).when(schema0).allowableValues();
      doReturn((String) null).when(schema0).defaultValue();
      doReturn(false).when(schema0).deprecated();
      doReturn((String) null).when(schema0).description();
      doReturn((String) null, (String) null).when(schema0).example();
      doReturn(false).when(schema0).exclusiveMaximum();
      doReturn(false).when(schema0).exclusiveMinimum();
      doReturn((ExternalDocumentation) null).when(schema0).externalDocs();
      doReturn((String) null).when(schema0).format();
      doReturn(0).when(schema0).maxLength();
      doReturn(0).when(schema0).minProperties();
      doReturn((String) null).when(schema0).pattern();
      doReturn(false).when(schema0).readOnly();
      doReturn((String) null).when(schema0).ref();
      doReturn((String) null).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional3 = (Optional<io.swagger.oas.models.media.Schema>)OperationParser.getSchemaFromAnnotation(schema0);
      assertNotNull(optional3);
      
      Parameter[] parameterArray0 = null;
      Components components0 = new Components();
      assertNotNull(components0);
      
      String string5 = "java.langio.swagger.oas.models.responses.ApiResponses";
      io.swagger.oas.models.media.Schema<io.swagger.oas.models.ExternalDocumentation> schema1 = new io.swagger.oas.models.media.Schema<io.swagger.oas.models.ExternalDocumentation>();
      assertNull(schema1.getMaxLength());
      assertNull(schema1.getTitle());
      assertNull(schema1.getMinProperties());
      assertNull(schema1.get$ref());
      assertNull(schema1.getType());
      assertNull(schema1.getMinItems());
      assertNull(schema1.getUniqueItems());
      assertNull(schema1.getDescription());
      assertNull(schema1.getMaxItems());
      assertNull(schema1.getName());
      assertNull(schema1.getExclusiveMaximum());
      assertNull(schema1.getMaxProperties());
      assertNull(schema1.getExclusiveMinimum());
      assertNull(schema1.getWriteOnly());
      assertNull(schema1.getDeprecated());
      assertNull(schema1.getPattern());
      assertNull(schema1.getFormat());
      assertNull(schema1.getMinLength());
      assertNull(schema1.getReadOnly());
      assertNull(schema1.getNullable());
      assertNotNull(schema1);
      
      Components components1 = components0.addSchemas(string5, schema1);
      assertSame(components0, components1);
      assertNotSame(string5, string3);
      assertNotSame(string5, string4);
      assertNotSame(string5, string1);
      assertNotSame(string5, string0);
      assertNotSame(string5, string2);
      assertSame(components1, components0);
      assertNull(schema1.getMaxLength());
      assertNull(schema1.getTitle());
      assertNull(schema1.getMinProperties());
      assertNull(schema1.get$ref());
      assertNull(schema1.getType());
      assertNull(schema1.getMinItems());
      assertNull(schema1.getUniqueItems());
      assertNull(schema1.getDescription());
      assertNull(schema1.getMaxItems());
      assertNull(schema1.getName());
      assertNull(schema1.getExclusiveMaximum());
      assertNull(schema1.getMaxProperties());
      assertNull(schema1.getExclusiveMinimum());
      assertNull(schema1.getWriteOnly());
      assertNull(schema1.getDeprecated());
      assertNull(schema1.getPattern());
      assertNull(schema1.getFormat());
      assertNull(schema1.getMinLength());
      assertNull(schema1.getReadOnly());
      assertNull(schema1.getNullable());
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(components1);
      
      String string6 = "I'8(1U]iPD3kG";
      io.swagger.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.oas.models.responses.ApiResponse();
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      assertNotNull(apiResponse0);
      
      Components components2 = components1.addResponses(string6, apiResponse0);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertNotSame(string5, string3);
      assertNotSame(string5, string4);
      assertNotSame(string5, string1);
      assertNotSame(string5, string6);
      assertNotSame(string5, string0);
      assertNotSame(string5, string2);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertNotSame(string6, string0);
      assertNotSame(string6, string5);
      assertNotSame(string6, string1);
      assertNotSame(string6, string4);
      assertNotSame(string6, string2);
      assertNotSame(string6, string3);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertNull(schema1.getMaxLength());
      assertNull(schema1.getTitle());
      assertNull(schema1.getMinProperties());
      assertNull(schema1.get$ref());
      assertNull(schema1.getType());
      assertNull(schema1.getMinItems());
      assertNull(schema1.getUniqueItems());
      assertNull(schema1.getDescription());
      assertNull(schema1.getMaxItems());
      assertNull(schema1.getName());
      assertNull(schema1.getExclusiveMaximum());
      assertNull(schema1.getMaxProperties());
      assertNull(schema1.getExclusiveMinimum());
      assertNull(schema1.getWriteOnly());
      assertNull(schema1.getDeprecated());
      assertNull(schema1.getPattern());
      assertNull(schema1.getFormat());
      assertNull(schema1.getMinLength());
      assertNull(schema1.getReadOnly());
      assertNull(schema1.getNullable());
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string6));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(components2);
      
      Map<String, Header> map0 = null;
      String string7 = "";
      io.swagger.oas.models.links.Link link0 = new io.swagger.oas.models.links.Link();
      assertNull(link0.getOperationId());
      assertNull(link0.get$ref());
      assertNull(link0.getDescription());
      assertNull(link0.getOperationRef());
      assertNotNull(link0);
      
      String string8 = "java.lang";
      io.swagger.oas.models.links.Link link1 = link0.description(string8);
      assertSame(link0, link1);
      assertNotSame(string8, string2);
      assertNotSame(string8, string6);
      assertNotSame(string8, string5);
      assertNotSame(string8, string4);
      assertNotSame(string8, string3);
      assertNotSame(string8, string0);
      assertNotSame(string8, string7);
      assertNotSame(string8, string1);
      assertSame(link1, link0);
      assertNull(link0.getOperationId());
      assertEquals("java.lang", link0.getDescription());
      assertNull(link0.get$ref());
      assertNull(link0.getOperationRef());
      assertNull(link1.getOperationId());
      assertNull(link1.getOperationRef());
      assertEquals("java.lang", link1.getDescription());
      assertNull(link1.get$ref());
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string1));
      assertNotNull(link1);
      
      Header header0 = new Header();
      assertNull(header0.getExplode());
      assertNull(header0.getDeprecated());
      assertNull(header0.getExample());
      assertNull(header0.get$ref());
      assertNull(header0.getStyle());
      assertNull(header0.getRequired());
      assertNull(header0.getDescription());
      assertNull(header0.getAllowEmptyValue());
      assertNotNull(header0);
      
      io.swagger.oas.models.links.Link link2 = link1.addHeaderObject(string2, header0);
      assertSame(link2, link0);
      assertSame(link2, link1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string8);
      assertNotSame(string2, string4);
      assertNotSame(string2, string5);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string6);
      assertNotSame(string2, string7);
      assertSame(link0, link1);
      assertSame(link0, link2);
      assertNotSame(string8, string2);
      assertNotSame(string8, string6);
      assertNotSame(string8, string5);
      assertNotSame(string8, string4);
      assertNotSame(string8, string3);
      assertNotSame(string8, string0);
      assertNotSame(string8, string7);
      assertNotSame(string8, string1);
      assertSame(link1, link0);
      assertSame(link1, link2);
      assertNull(link2.getOperationId());
      assertNull(link2.get$ref());
      assertNull(link2.getOperationRef());
      assertEquals("java.lang", link2.getDescription());
      assertNull(link0.getOperationId());
      assertEquals("java.lang", link0.getDescription());
      assertNull(link0.get$ref());
      assertNull(link0.getOperationRef());
      assertNull(link1.getOperationId());
      assertNull(link1.getOperationRef());
      assertEquals("java.lang", link1.getDescription());
      assertNull(link1.get$ref());
      assertNull(header0.getExplode());
      assertNull(header0.getDeprecated());
      assertNull(header0.getExample());
      assertNull(header0.get$ref());
      assertNull(header0.getStyle());
      assertNull(header0.getRequired());
      assertNull(header0.getDescription());
      assertNull(header0.getAllowEmptyValue());
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string8));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string2.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string1));
      assertNotNull(link2);
      
      io.swagger.oas.models.servers.Server server0 = new io.swagger.oas.models.servers.Server();
      assertNull(server0.getDescription());
      assertNull(server0.getUrl());
      assertNotNull(server0);
      
      io.swagger.oas.models.servers.Server server1 = server0.description(string8);
      assertSame(server0, server1);
      assertSame(server1, server0);
      assertNotSame(string8, string2);
      assertNotSame(string8, string6);
      assertNotSame(string8, string5);
      assertNotSame(string8, string4);
      assertNotSame(string8, string3);
      assertNotSame(string8, string0);
      assertNotSame(string8, string7);
      assertNotSame(string8, string1);
      assertEquals("java.lang", server0.getDescription());
      assertNull(server0.getUrl());
      assertEquals("java.lang", server1.getDescription());
      assertNull(server1.getUrl());
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string1));
      assertNotNull(server1);
      
      io.swagger.oas.models.links.Link link3 = link2.server(server1);
      assertSame(link2, link0);
      assertSame(link2, link1);
      assertSame(link2, link3);
      assertSame(server0, server1);
      assertSame(server1, server0);
      assertSame(link3, link0);
      assertSame(link3, link1);
      assertSame(link3, link2);
      assertNotSame(string2, string3);
      assertNotSame(string2, string8);
      assertNotSame(string2, string4);
      assertNotSame(string2, string5);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string6);
      assertNotSame(string2, string7);
      assertSame(link0, link1);
      assertSame(link0, link3);
      assertSame(link0, link2);
      assertNotSame(string8, string2);
      assertNotSame(string8, string6);
      assertNotSame(string8, string5);
      assertNotSame(string8, string4);
      assertNotSame(string8, string3);
      assertNotSame(string8, string0);
      assertNotSame(string8, string7);
      assertNotSame(string8, string1);
      assertSame(link1, link0);
      assertSame(link1, link3);
      assertSame(link1, link2);
      assertNull(link2.getOperationId());
      assertNull(link2.get$ref());
      assertNull(link2.getOperationRef());
      assertEquals("java.lang", link2.getDescription());
      assertEquals("java.lang", server0.getDescription());
      assertNull(server0.getUrl());
      assertEquals("java.lang", server1.getDescription());
      assertNull(server1.getUrl());
      assertNull(link3.get$ref());
      assertEquals("java.lang", link3.getDescription());
      assertNull(link3.getOperationId());
      assertNull(link3.getOperationRef());
      assertNull(link0.getOperationId());
      assertEquals("java.lang", link0.getDescription());
      assertNull(link0.get$ref());
      assertNull(link0.getOperationRef());
      assertNull(link1.getOperationId());
      assertNull(link1.getOperationRef());
      assertEquals("java.lang", link1.getDescription());
      assertNull(link1.get$ref());
      assertNull(header0.getExplode());
      assertNull(header0.getDeprecated());
      assertNull(header0.getExample());
      assertNull(header0.get$ref());
      assertNull(header0.getStyle());
      assertNull(header0.getRequired());
      assertNull(header0.getDescription());
      assertNull(header0.getAllowEmptyValue());
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string8));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string2.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string1));
      assertNotNull(link3);
      
      String string9 = "java.langio.swagger.oas.models.responses.ApiResponses";
      io.swagger.oas.models.links.Link link4 = link3.$ref(string9);
      assertSame(link2, link0);
      assertSame(link2, link1);
      assertSame(link2, link4);
      assertSame(link2, link3);
      assertSame(server0, server1);
      assertSame(server1, server0);
      assertSame(link3, link4);
      assertSame(link3, link0);
      assertSame(link3, link1);
      assertSame(link3, link2);
      assertNotSame(string9, string1);
      assertNotSame(string9, string7);
      assertNotSame(string9, string2);
      assertSame(string9, string5);
      assertNotSame(string9, string8);
      assertNotSame(string9, string4);
      assertNotSame(string9, string0);
      assertNotSame(string9, string6);
      assertNotSame(string9, string3);
      assertSame(link4, link2);
      assertSame(link4, link3);
      assertSame(link4, link0);
      assertSame(link4, link1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string8);
      assertNotSame(string2, string4);
      assertNotSame(string2, string5);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string9);
      assertNotSame(string2, string6);
      assertNotSame(string2, string7);
      assertSame(link0, link1);
      assertSame(link0, link4);
      assertSame(link0, link3);
      assertSame(link0, link2);
      assertNotSame(string8, string2);
      assertNotSame(string8, string6);
      assertNotSame(string8, string5);
      assertNotSame(string8, string4);
      assertNotSame(string8, string3);
      assertNotSame(string8, string9);
      assertNotSame(string8, string0);
      assertNotSame(string8, string7);
      assertNotSame(string8, string1);
      assertSame(link1, link0);
      assertSame(link1, link4);
      assertSame(link1, link3);
      assertSame(link1, link2);
      assertNull(link2.getOperationId());
      assertEquals("java.langio.swagger.oas.models.responses.ApiResponses", link2.get$ref());
      assertNull(link2.getOperationRef());
      assertEquals("java.lang", link2.getDescription());
      assertEquals("java.lang", server0.getDescription());
      assertNull(server0.getUrl());
      assertEquals("java.lang", server1.getDescription());
      assertNull(server1.getUrl());
      assertEquals("java.langio.swagger.oas.models.responses.ApiResponses", link3.get$ref());
      assertEquals("java.lang", link3.getDescription());
      assertNull(link3.getOperationId());
      assertNull(link3.getOperationRef());
      assertEquals("java.lang", link4.getDescription());
      assertNull(link4.getOperationId());
      assertEquals("java.langio.swagger.oas.models.responses.ApiResponses", link4.get$ref());
      assertNull(link4.getOperationRef());
      assertNull(link0.getOperationId());
      assertEquals("java.lang", link0.getDescription());
      assertEquals("java.langio.swagger.oas.models.responses.ApiResponses", link0.get$ref());
      assertNull(link0.getOperationRef());
      assertNull(link1.getOperationId());
      assertNull(link1.getOperationRef());
      assertEquals("java.lang", link1.getDescription());
      assertEquals("java.langio.swagger.oas.models.responses.ApiResponses", link1.get$ref());
      assertNull(header0.getExplode());
      assertNull(header0.getDeprecated());
      assertNull(header0.getExample());
      assertNull(header0.get$ref());
      assertNull(header0.getStyle());
      assertNull(header0.getRequired());
      assertNull(header0.getDescription());
      assertNull(header0.getAllowEmptyValue());
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string8));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string9));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string2.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string9));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string1));
      assertNotNull(link4);
      
      io.swagger.oas.models.responses.ApiResponse apiResponse1 = apiResponse0.link(string7, link4);
      assertSame(link2, link0);
      assertSame(link2, link1);
      assertSame(link2, link4);
      assertSame(link2, link3);
      assertSame(server0, server1);
      assertSame(server1, server0);
      assertSame(link3, link4);
      assertSame(link3, link0);
      assertSame(link3, link1);
      assertSame(link3, link2);
      assertNotSame(string9, string1);
      assertNotSame(string9, string7);
      assertNotSame(string9, string2);
      assertSame(string9, string5);
      assertNotSame(string9, string8);
      assertNotSame(string9, string4);
      assertNotSame(string9, string0);
      assertNotSame(string9, string6);
      assertNotSame(string9, string3);
      assertSame(link4, link2);
      assertSame(link4, link3);
      assertSame(link4, link0);
      assertSame(link4, link1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string8);
      assertNotSame(string2, string4);
      assertNotSame(string2, string5);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string9);
      assertNotSame(string2, string6);
      assertNotSame(string2, string7);
      assertSame(apiResponse1, apiResponse0);
      assertSame(apiResponse0, apiResponse1);
      assertNotSame(string7, string5);
      assertNotSame(string7, string1);
      assertNotSame(string7, string8);
      assertNotSame(string7, string3);
      assertNotSame(string7, string9);
      assertSame(string7, string4);
      assertNotSame(string7, string6);
      assertNotSame(string7, string2);
      assertNotSame(string7, string0);
      assertSame(link0, link1);
      assertSame(link0, link4);
      assertSame(link0, link3);
      assertSame(link0, link2);
      assertNotSame(string8, string2);
      assertNotSame(string8, string6);
      assertNotSame(string8, string5);
      assertNotSame(string8, string4);
      assertNotSame(string8, string3);
      assertNotSame(string8, string9);
      assertNotSame(string8, string0);
      assertNotSame(string8, string7);
      assertNotSame(string8, string1);
      assertSame(link1, link0);
      assertSame(link1, link4);
      assertSame(link1, link3);
      assertSame(link1, link2);
      assertNull(link2.getOperationId());
      assertEquals("java.langio.swagger.oas.models.responses.ApiResponses", link2.get$ref());
      assertNull(link2.getOperationRef());
      assertEquals("java.lang", link2.getDescription());
      assertEquals("java.lang", server0.getDescription());
      assertNull(server0.getUrl());
      assertEquals("java.lang", server1.getDescription());
      assertNull(server1.getUrl());
      assertEquals("java.langio.swagger.oas.models.responses.ApiResponses", link3.get$ref());
      assertEquals("java.lang", link3.getDescription());
      assertNull(link3.getOperationId());
      assertNull(link3.getOperationRef());
      assertEquals("java.lang", link4.getDescription());
      assertNull(link4.getOperationId());
      assertEquals("java.langio.swagger.oas.models.responses.ApiResponses", link4.get$ref());
      assertNull(link4.getOperationRef());
      assertNull(apiResponse1.get$ref());
      assertNull(apiResponse1.getDescription());
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      assertNull(link0.getOperationId());
      assertEquals("java.lang", link0.getDescription());
      assertEquals("java.langio.swagger.oas.models.responses.ApiResponses", link0.get$ref());
      assertNull(link0.getOperationRef());
      assertNull(link1.getOperationId());
      assertNull(link1.getOperationRef());
      assertEquals("java.lang", link1.getDescription());
      assertEquals("java.langio.swagger.oas.models.responses.ApiResponses", link1.get$ref());
      assertNull(header0.getExplode());
      assertNull(header0.getDeprecated());
      assertNull(header0.getExample());
      assertNull(header0.get$ref());
      assertNull(header0.getStyle());
      assertNull(header0.getRequired());
      assertNull(header0.getDescription());
      assertNull(header0.getAllowEmptyValue());
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string8));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string9));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string2.equals((Object)string7));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string8));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string9));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string9));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string1));
      assertNotNull(apiResponse1);
      
      Components components3 = components2.headers(map0);
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertNotSame(string5, string3);
      assertNotSame(string5, string8);
      assertSame(string5, string9);
      assertNotSame(string5, string4);
      assertNotSame(string5, string1);
      assertNotSame(string5, string6);
      assertNotSame(string5, string0);
      assertNotSame(string5, string7);
      assertNotSame(string5, string2);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertSame(components3, components1);
      assertNotSame(string6, string0);
      assertNotSame(string6, string5);
      assertNotSame(string6, string1);
      assertNotSame(string6, string7);
      assertNotSame(string6, string9);
      assertNotSame(string6, string4);
      assertNotSame(string6, string2);
      assertNotSame(string6, string8);
      assertNotSame(string6, string3);
      assertSame(apiResponse0, apiResponse1);
      assertSame(components2, components0);
      assertSame(components2, components3);
      assertSame(components2, components1);
      assertNull(schema1.getMaxLength());
      assertNull(schema1.getTitle());
      assertNull(schema1.getMinProperties());
      assertNull(schema1.get$ref());
      assertNull(schema1.getType());
      assertNull(schema1.getMinItems());
      assertNull(schema1.getUniqueItems());
      assertNull(schema1.getDescription());
      assertNull(schema1.getMaxItems());
      assertNull(schema1.getName());
      assertNull(schema1.getExclusiveMaximum());
      assertNull(schema1.getMaxProperties());
      assertNull(schema1.getExclusiveMinimum());
      assertNull(schema1.getWriteOnly());
      assertNull(schema1.getDeprecated());
      assertNull(schema1.getPattern());
      assertNull(schema1.getFormat());
      assertNull(schema1.getMinLength());
      assertNull(schema1.getReadOnly());
      assertNull(schema1.getNullable());
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string8));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string6));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string7));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string7));
      assertFalse(string6.equals((Object)string9));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string8));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(components3);
      
      Optional<List<io.swagger.oas.models.parameters.Parameter>> optional4 = OperationParser.getParametersList(parameterArray0, components3);
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertNotSame(string5, string3);
      assertNotSame(string5, string8);
      assertSame(string5, string9);
      assertNotSame(string5, string4);
      assertNotSame(string5, string1);
      assertNotSame(string5, string6);
      assertNotSame(string5, string0);
      assertNotSame(string5, string7);
      assertNotSame(string5, string2);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertSame(components3, components1);
      assertNotSame(string6, string0);
      assertNotSame(string6, string5);
      assertNotSame(string6, string1);
      assertNotSame(string6, string7);
      assertNotSame(string6, string9);
      assertNotSame(string6, string4);
      assertNotSame(string6, string2);
      assertNotSame(string6, string8);
      assertNotSame(string6, string3);
      assertSame(apiResponse0, apiResponse1);
      assertSame(components2, components0);
      assertSame(components2, components3);
      assertSame(components2, components1);
      assertNull(schema1.getMaxLength());
      assertNull(schema1.getTitle());
      assertNull(schema1.getMinProperties());
      assertNull(schema1.get$ref());
      assertNull(schema1.getType());
      assertNull(schema1.getMinItems());
      assertNull(schema1.getUniqueItems());
      assertNull(schema1.getDescription());
      assertNull(schema1.getMaxItems());
      assertNull(schema1.getName());
      assertNull(schema1.getExclusiveMaximum());
      assertNull(schema1.getMaxProperties());
      assertNull(schema1.getExclusiveMinimum());
      assertNull(schema1.getWriteOnly());
      assertNull(schema1.getDeprecated());
      assertNull(schema1.getPattern());
      assertNull(schema1.getFormat());
      assertNull(schema1.getMinLength());
      assertNull(schema1.getReadOnly());
      assertNull(schema1.getNullable());
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string8));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string6));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string7));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string7));
      assertFalse(string6.equals((Object)string9));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string8));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(optional4);
      
      Link link5 = null;
      Optional<io.swagger.oas.models.links.Link> optional5 = OperationParser.getLink(link5);
      assertNotNull(optional5);
  }

  @Test(timeout = 11000)
  public void test016()  throws Throwable  {
      Content[] contentArray0 = new Content[1];
      Class<Object> class0 = Object.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(schema0).implementation();
      String string0 = "*/*";
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((ExampleObject[]) null).when(content0).examples();
      doReturn(string0, (String) null).when(content0).mediaType();
      doReturn(schema0).when(content0).schema();
      contentArray0[0] = content0;
      String[] stringArray0 = new String[0];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      assertNotNull(components0);
      
      HashMap<String, RequestBody> hashMap0 = new HashMap<String, RequestBody>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      components0.setRequestBodies(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      HashMap<String, Example> hashMap1 = new HashMap<String, Example>();
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotNull(hashMap1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      ApiResponse[] apiResponseArray0 = new ApiResponse[6];
      String string1 = "*/*";
      String string2 = "*/*";
      ApiResponse apiResponse0 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn(contentArray0).when(apiResponse0).content();
      doReturn(string1, string1).when(apiResponse0).description();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      apiResponseArray0[3] = apiResponseArray0[2];
      apiResponseArray0[4] = apiResponseArray0[3];
      apiResponseArray0[5] = apiResponseArray0[4];
      Produces produces1 = mock(Produces.class, new ViolatedAssumptionAnswer());
      String string3 = "WRITE_DATES_WITH_ZONE_ID";
      io.swagger.oas.models.responses.ApiResponse apiResponse1 = new io.swagger.oas.models.responses.ApiResponse();
      assertNull(apiResponse1.get$ref());
      assertNull(apiResponse1.getDescription());
      assertNotNull(apiResponse1);
      
      io.swagger.oas.models.links.Link link0 = new io.swagger.oas.models.links.Link();
      assertNull(link0.getOperationId());
      assertNull(link0.getDescription());
      assertNull(link0.getOperationRef());
      assertNull(link0.get$ref());
      assertNotNull(link0);
      
      Encoding encoding0 = new Encoding();
      assertNull(encoding0.getExplode());
      assertNull(encoding0.getStyle());
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getAllowReserved());
      assertNotNull(encoding0);
      
      Components components1 = new Components();
      assertFalse(components1.equals((Object)components0));
      assertNotNull(components1);
      
      Map<String, Header> map0 = components1.getHeaders();
      assertNotSame(components1, components0);
      assertFalse(components1.equals((Object)components0));
      assertNull(map0);
      
      Encoding encoding1 = encoding0.headers(map0);
      assertSame(encoding0, encoding1);
      assertNotSame(components1, components0);
      assertSame(encoding1, encoding0);
      assertNull(encoding0.getExplode());
      assertNull(encoding0.getStyle());
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getAllowReserved());
      assertNull(encoding1.getAllowReserved());
      assertNull(encoding1.getContentType());
      assertNull(encoding1.getExplode());
      assertNull(encoding1.getStyle());
      assertFalse(components1.equals((Object)components0));
      assertNotNull(encoding1);
      
      Encoding encoding2 = encoding1.contentType(string3);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertSame(encoding0, encoding1);
      assertSame(encoding0, encoding2);
      assertNotSame(components1, components0);
      assertSame(encoding1, encoding2);
      assertSame(encoding1, encoding0);
      assertSame(encoding2, encoding1);
      assertSame(encoding2, encoding0);
      assertNull(encoding0.getExplode());
      assertEquals("WRITE_DATES_WITH_ZONE_ID", encoding0.getContentType());
      assertNull(encoding0.getStyle());
      assertNull(encoding0.getAllowReserved());
      assertNull(encoding1.getAllowReserved());
      assertNull(encoding1.getExplode());
      assertEquals("WRITE_DATES_WITH_ZONE_ID", encoding1.getContentType());
      assertNull(encoding1.getStyle());
      assertNull(encoding2.getAllowReserved());
      assertNull(encoding2.getExplode());
      assertNull(encoding2.getStyle());
      assertEquals("WRITE_DATES_WITH_ZONE_ID", encoding2.getContentType());
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(components1.equals((Object)components0));
      assertNotNull(encoding2);
      
      Encoding encoding3 = encoding2.style(string0);
      assertSame(encoding3, encoding2);
      assertSame(encoding3, encoding0);
      assertSame(encoding3, encoding1);
      assertSame(string0, string2);
      assertNotSame(string0, string3);
      assertSame(string0, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertSame(encoding0, encoding1);
      assertSame(encoding0, encoding3);
      assertSame(encoding0, encoding2);
      assertNotSame(components1, components0);
      assertSame(encoding1, encoding3);
      assertSame(encoding1, encoding2);
      assertSame(encoding1, encoding0);
      assertSame(encoding2, encoding3);
      assertSame(encoding2, encoding1);
      assertSame(encoding2, encoding0);
      assertNull(encoding3.getExplode());
      assertNull(encoding3.getAllowReserved());
      assertEquals("WRITE_DATES_WITH_ZONE_ID", encoding3.getContentType());
      assertEquals("*/*", encoding3.getStyle());
      assertNull(encoding0.getExplode());
      assertEquals("WRITE_DATES_WITH_ZONE_ID", encoding0.getContentType());
      assertEquals("*/*", encoding0.getStyle());
      assertNull(encoding0.getAllowReserved());
      assertEquals("*/*", encoding1.getStyle());
      assertNull(encoding1.getAllowReserved());
      assertNull(encoding1.getExplode());
      assertEquals("WRITE_DATES_WITH_ZONE_ID", encoding1.getContentType());
      assertEquals("*/*", encoding2.getStyle());
      assertNull(encoding2.getAllowReserved());
      assertNull(encoding2.getExplode());
      assertEquals("WRITE_DATES_WITH_ZONE_ID", encoding2.getContentType());
      assertFalse(string0.equals((Object)string3));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(components1.equals((Object)components0));
      assertNotNull(encoding3);
      
      Map<String, Object> map1 = encoding3.getExtensions();
      assertSame(encoding3, encoding2);
      assertSame(encoding3, encoding0);
      assertSame(encoding3, encoding1);
      assertSame(string0, string2);
      assertNotSame(string0, string3);
      assertSame(string0, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertSame(encoding0, encoding1);
      assertSame(encoding0, encoding3);
      assertSame(encoding0, encoding2);
      assertNotSame(components1, components0);
      assertSame(encoding1, encoding3);
      assertSame(encoding1, encoding2);
      assertSame(encoding1, encoding0);
      assertSame(encoding2, encoding3);
      assertSame(encoding2, encoding1);
      assertSame(encoding2, encoding0);
      assertNull(encoding3.getExplode());
      assertNull(encoding3.getAllowReserved());
      assertEquals("WRITE_DATES_WITH_ZONE_ID", encoding3.getContentType());
      assertEquals("*/*", encoding3.getStyle());
      assertNull(encoding0.getExplode());
      assertEquals("WRITE_DATES_WITH_ZONE_ID", encoding0.getContentType());
      assertEquals("*/*", encoding0.getStyle());
      assertNull(encoding0.getAllowReserved());
      assertEquals("*/*", encoding1.getStyle());
      assertNull(encoding1.getAllowReserved());
      assertNull(encoding1.getExplode());
      assertEquals("WRITE_DATES_WITH_ZONE_ID", encoding1.getContentType());
      assertEquals("*/*", encoding2.getStyle());
      assertNull(encoding2.getAllowReserved());
      assertNull(encoding2.getExplode());
      assertEquals("WRITE_DATES_WITH_ZONE_ID", encoding2.getContentType());
      assertFalse(string0.equals((Object)string3));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(components1.equals((Object)components0));
      assertNull(map1);
      
      link0.setExtensions(map1);
      assertSame(encoding3, encoding2);
      assertSame(encoding3, encoding0);
      assertSame(encoding3, encoding1);
      assertSame(string0, string2);
      assertNotSame(string0, string3);
      assertSame(string0, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertSame(encoding0, encoding1);
      assertSame(encoding0, encoding3);
      assertSame(encoding0, encoding2);
      assertNotSame(components1, components0);
      assertSame(encoding1, encoding3);
      assertSame(encoding1, encoding2);
      assertSame(encoding1, encoding0);
      assertSame(encoding2, encoding3);
      assertSame(encoding2, encoding1);
      assertSame(encoding2, encoding0);
      assertNull(encoding3.getExplode());
      assertNull(encoding3.getAllowReserved());
      assertEquals("WRITE_DATES_WITH_ZONE_ID", encoding3.getContentType());
      assertEquals("*/*", encoding3.getStyle());
      assertNull(link0.getOperationId());
      assertNull(link0.getDescription());
      assertNull(link0.getOperationRef());
      assertNull(link0.get$ref());
      assertNull(encoding0.getExplode());
      assertEquals("WRITE_DATES_WITH_ZONE_ID", encoding0.getContentType());
      assertEquals("*/*", encoding0.getStyle());
      assertNull(encoding0.getAllowReserved());
      assertEquals("*/*", encoding1.getStyle());
      assertNull(encoding1.getAllowReserved());
      assertNull(encoding1.getExplode());
      assertEquals("WRITE_DATES_WITH_ZONE_ID", encoding1.getContentType());
      assertEquals("*/*", encoding2.getStyle());
      assertNull(encoding2.getAllowReserved());
      assertNull(encoding2.getExplode());
      assertEquals("WRITE_DATES_WITH_ZONE_ID", encoding2.getContentType());
      assertFalse(string0.equals((Object)string3));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(components1.equals((Object)components0));
      
      io.swagger.oas.models.responses.ApiResponse apiResponse2 = apiResponse1.link(string3, link0);
      assertSame(apiResponse2, apiResponse1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertSame(apiResponse1, apiResponse2);
      assertNull(apiResponse2.getDescription());
      assertNull(apiResponse2.get$ref());
      assertNull(apiResponse1.get$ref());
      assertNull(apiResponse1.getDescription());
      assertNull(link0.getOperationId());
      assertNull(link0.getDescription());
      assertNull(link0.getOperationRef());
      assertNull(link0.get$ref());
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(apiResponse2);
      
      io.swagger.oas.models.media.Content content1 = new io.swagger.oas.models.media.Content();
      assertEquals(0, content1.size());
      assertTrue(content1.isEmpty());
      assertNotNull(content1);
      
      io.swagger.oas.models.responses.ApiResponse apiResponse3 = apiResponse2.content(content1);
      assertSame(apiResponse2, apiResponse1);
      assertSame(apiResponse2, apiResponse3);
      assertSame(apiResponse3, apiResponse1);
      assertSame(apiResponse3, apiResponse2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertSame(apiResponse1, apiResponse2);
      assertSame(apiResponse1, apiResponse3);
      assertNull(apiResponse2.getDescription());
      assertNull(apiResponse2.get$ref());
      assertEquals(0, content1.size());
      assertTrue(content1.isEmpty());
      assertNull(apiResponse3.get$ref());
      assertNull(apiResponse3.getDescription());
      assertNull(apiResponse1.get$ref());
      assertNull(apiResponse1.getDescription());
      assertNull(link0.getOperationId());
      assertNull(link0.getDescription());
      assertNull(link0.getOperationRef());
      assertNull(link0.get$ref());
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(apiResponse3);
      
      Components components2 = components0.addResponses(string3, apiResponse3);
      assertSame(apiResponse2, apiResponse1);
      assertSame(apiResponse2, apiResponse3);
      assertSame(apiResponse3, apiResponse1);
      assertSame(apiResponse3, apiResponse2);
      assertSame(components2, components0);
      assertNotSame(components2, components1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertSame(components0, components2);
      assertNotSame(components0, components1);
      assertSame(apiResponse1, apiResponse2);
      assertSame(apiResponse1, apiResponse3);
      assertNull(apiResponse2.getDescription());
      assertNull(apiResponse2.get$ref());
      assertEquals(0, content1.size());
      assertTrue(content1.isEmpty());
      assertNull(apiResponse3.get$ref());
      assertNull(apiResponse3.getDescription());
      assertNull(apiResponse1.get$ref());
      assertNull(apiResponse1.getDescription());
      assertNull(link0.getOperationId());
      assertNull(link0.getDescription());
      assertNull(link0.getOperationRef());
      assertNull(link0.get$ref());
      assertFalse(components2.equals((Object)components1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(components0.equals((Object)components1));
      assertNotNull(components2);
      
      // Undeclared exception!
      try { 
        OperationParser.getApiResponses(apiResponseArray0, produces1, produces1, components2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test017()  throws Throwable  {
      Content[] contentArray0 = new Content[8];
      Class<Example> class0 = Example.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(schema0).implementation();
      String string0 = null;
      ExampleObject[] exampleObjectArray0 = new ExampleObject[3];
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(exampleObject0).name();
      exampleObjectArray0[0] = exampleObject0;
      exampleObjectArray0[1] = exampleObjectArray0[0];
      exampleObjectArray0[1] = exampleObjectArray0[1];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn(exampleObjectArray0).when(content0).examples();
      doReturn(string0).when(content0).mediaType();
      doReturn(schema0, (Schema) null).when(content0).schema();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      contentArray0[3] = contentArray0[2];
      contentArray0[5] = contentArray0[4];
      contentArray0[6] = contentArray0[5];
      contentArray0[7] = contentArray0[2];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[2];
      String string1 = "2#pGH;";
      stringArray0[0] = string1;
      stringArray0[1] = string0;
      Produces produces1 = mock(Produces.class, new ViolatedAssumptionAnswer());
      doReturn(stringArray0).when(produces1).value();
      Components components0 = new Components();
      assertNotNull(components0);
      
      String string2 = "Current token not START_OBJECT (needed to unwrap root name '%s'), but %s";
      io.swagger.oas.models.media.Schema<Integer> schema1 = new io.swagger.oas.models.media.Schema<Integer>();
      assertNull(schema1.getPattern());
      assertNull(schema1.getFormat());
      assertNull(schema1.getMinItems());
      assertNull(schema1.getType());
      assertNull(schema1.getTitle());
      assertNull(schema1.get$ref());
      assertNull(schema1.getMaxLength());
      assertNull(schema1.getName());
      assertNull(schema1.getMinLength());
      assertNull(schema1.getExclusiveMaximum());
      assertNull(schema1.getNullable());
      assertNull(schema1.getUniqueItems());
      assertNull(schema1.getWriteOnly());
      assertNull(schema1.getDescription());
      assertNull(schema1.getMaxItems());
      assertNull(schema1.getReadOnly());
      assertNull(schema1.getMaxProperties());
      assertNull(schema1.getExclusiveMinimum());
      assertNull(schema1.getMinProperties());
      assertNull(schema1.getDeprecated());
      assertNotNull(schema1);
      
      Components components1 = components0.addSchemas(string2, schema1);
      assertSame(components0, components1);
      assertNotSame(string2, string1);
      assertSame(components1, components0);
      assertNull(schema1.getPattern());
      assertNull(schema1.getFormat());
      assertNull(schema1.getMinItems());
      assertNull(schema1.getType());
      assertNull(schema1.getTitle());
      assertNull(schema1.get$ref());
      assertNull(schema1.getMaxLength());
      assertNull(schema1.getName());
      assertNull(schema1.getMinLength());
      assertNull(schema1.getExclusiveMaximum());
      assertNull(schema1.getNullable());
      assertNull(schema1.getUniqueItems());
      assertNull(schema1.getWriteOnly());
      assertNull(schema1.getDescription());
      assertNull(schema1.getMaxItems());
      assertNull(schema1.getReadOnly());
      assertNull(schema1.getMaxProperties());
      assertNull(schema1.getExclusiveMinimum());
      assertNull(schema1.getMinProperties());
      assertNull(schema1.getDeprecated());
      assertFalse(string2.equals((Object)string1));
      assertNotNull(components1);
      
      String string3 = "";
      Example example0 = new Example();
      assertNull(example0.get$ref());
      assertNull(example0.getDescription());
      assertNull(example0.getSummary());
      assertNull(example0.getExternalValue());
      assertNotNull(example0);
      
      Components components2 = components1.addExamples(string3, example0);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertNull(schema1.getPattern());
      assertNull(schema1.getFormat());
      assertNull(schema1.getMinItems());
      assertNull(schema1.getType());
      assertNull(schema1.getTitle());
      assertNull(schema1.get$ref());
      assertNull(schema1.getMaxLength());
      assertNull(schema1.getName());
      assertNull(schema1.getMinLength());
      assertNull(schema1.getExclusiveMaximum());
      assertNull(schema1.getNullable());
      assertNull(schema1.getUniqueItems());
      assertNull(schema1.getWriteOnly());
      assertNull(schema1.getDescription());
      assertNull(schema1.getMaxItems());
      assertNull(schema1.getReadOnly());
      assertNull(schema1.getMaxProperties());
      assertNull(schema1.getExclusiveMinimum());
      assertNull(schema1.getMinProperties());
      assertNull(schema1.getDeprecated());
      assertNull(example0.get$ref());
      assertNull(example0.getDescription());
      assertNull(example0.getSummary());
      assertNull(example0.getExternalValue());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(components2);
      
      String string4 = "+";
      io.swagger.oas.models.links.Link link0 = new io.swagger.oas.models.links.Link();
      assertNull(link0.getDescription());
      assertNull(link0.get$ref());
      assertNull(link0.getOperationId());
      assertNull(link0.getOperationRef());
      assertNotNull(link0);
      
      Components components3 = components2.addLinks(string4, link0);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertSame(components3, components2);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertNotSame(string2, string4);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components1, components3);
      assertNotSame(string3, string4);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertSame(components2, components3);
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      assertNotSame(string4, string3);
      assertNull(schema1.getPattern());
      assertNull(schema1.getFormat());
      assertNull(schema1.getMinItems());
      assertNull(schema1.getType());
      assertNull(schema1.getTitle());
      assertNull(schema1.get$ref());
      assertNull(schema1.getMaxLength());
      assertNull(schema1.getName());
      assertNull(schema1.getMinLength());
      assertNull(schema1.getExclusiveMaximum());
      assertNull(schema1.getNullable());
      assertNull(schema1.getUniqueItems());
      assertNull(schema1.getWriteOnly());
      assertNull(schema1.getDescription());
      assertNull(schema1.getMaxItems());
      assertNull(schema1.getReadOnly());
      assertNull(schema1.getMaxProperties());
      assertNull(schema1.getExclusiveMinimum());
      assertNull(schema1.getMinProperties());
      assertNull(schema1.getDeprecated());
      assertNull(example0.get$ref());
      assertNull(example0.getDescription());
      assertNull(example0.getSummary());
      assertNull(example0.getExternalValue());
      assertNull(link0.getDescription());
      assertNull(link0.get$ref());
      assertNull(link0.getOperationId());
      assertNull(link0.getOperationRef());
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(components3);
      
      HashMap<String, Header> hashMap0 = new HashMap<String, Header>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Components components4 = components3.headers(hashMap0);
      assertSame(components3, components4);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertSame(components3, components2);
      assertSame(components4, components0);
      assertSame(components4, components3);
      assertSame(components4, components2);
      assertSame(components4, components1);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertSame(components0, components4);
      assertSame(components0, components2);
      assertNotSame(string2, string4);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components1, components4);
      assertSame(components1, components3);
      assertNotSame(string3, string4);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertSame(components2, components1);
      assertSame(components2, components4);
      assertSame(components2, components0);
      assertSame(components2, components3);
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      assertNotSame(string4, string3);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(schema1.getPattern());
      assertNull(schema1.getFormat());
      assertNull(schema1.getMinItems());
      assertNull(schema1.getType());
      assertNull(schema1.getTitle());
      assertNull(schema1.get$ref());
      assertNull(schema1.getMaxLength());
      assertNull(schema1.getName());
      assertNull(schema1.getMinLength());
      assertNull(schema1.getExclusiveMaximum());
      assertNull(schema1.getNullable());
      assertNull(schema1.getUniqueItems());
      assertNull(schema1.getWriteOnly());
      assertNull(schema1.getDescription());
      assertNull(schema1.getMaxItems());
      assertNull(schema1.getReadOnly());
      assertNull(schema1.getMaxProperties());
      assertNull(schema1.getExclusiveMinimum());
      assertNull(schema1.getMinProperties());
      assertNull(schema1.getDeprecated());
      assertNull(example0.get$ref());
      assertNull(example0.getDescription());
      assertNull(example0.getSummary());
      assertNull(example0.getExternalValue());
      assertNull(link0.getDescription());
      assertNull(link0.get$ref());
      assertNull(link0.getOperationId());
      assertNull(link0.getOperationRef());
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(components4);
      
      // Undeclared exception!
      try { 
        OperationParser.getContent(contentArray0, produces0, produces1, components4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test018()  throws Throwable  {
      Content[] contentArray0 = new Content[1];
      Class<io.swagger.oas.models.servers.Server> class0 = io.swagger.oas.models.servers.Server.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(schema0).implementation();
      String string0 = "`tda'l*\"zD=O";
      ExampleObject[] exampleObjectArray0 = new ExampleObject[9];
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(exampleObject0).name();
      exampleObjectArray0[0] = exampleObject0;
      exampleObjectArray0[1] = exampleObjectArray0[0];
      exampleObjectArray0[2] = exampleObjectArray0[1];
      exampleObjectArray0[3] = exampleObjectArray0[2];
      exampleObjectArray0[4] = exampleObjectArray0[3];
      exampleObjectArray0[5] = exampleObjectArray0[4];
      exampleObjectArray0[6] = exampleObjectArray0[5];
      exampleObjectArray0[7] = exampleObjectArray0[6];
      exampleObjectArray0[8] = exampleObjectArray0[7];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn(exampleObjectArray0).when(content0).examples();
      doReturn(string0, string0).when(content0).mediaType();
      doReturn(schema0).when(content0).schema();
      contentArray0[0] = content0;
      String[] stringArray0 = null;
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      assertNotNull(components0);
      
      HashMap<String, Example> hashMap0 = new HashMap<String, Example>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Components components1 = components0.examples(hashMap0);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(components1);
      
      Optional<io.swagger.oas.models.media.Content> optional0 = OperationParser.getContent(contentArray0, produces0, produces0, components0);
      assertSame(components0, components1);
      assertEquals(1, contentArray0.length);
      assertNotNull(optional0);
      
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(contact0).email();
      doReturn((String) null).when(contact0).name();
      doReturn((String) null).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional1 = OperationParser.getContact(contact0);
      assertNotNull(optional1);
  }

  @Test(timeout = 11000)
  public void test019()  throws Throwable  {
      OperationParser operationParser0 = new OperationParser();
      assertNotNull(operationParser0);
  }

  @Test(timeout = 11000)
  public void test020()  throws Throwable  {
      boolean boolean0 = false;
      Content[] contentArray0 = new Content[3];
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      String string0 = null;
      Explode explode0 = Explode.DEFAULT;
      Explode explode1 = Explode.DEFAULT;
      Explode explode2 = Explode.DEFAULT;
      Class<Integer> class0 = Integer.class;
      Class<Callback> class1 = Callback.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(schema0).implementation();
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(schema1).implementation();
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0).when(parameter0).allowEmptyValue();
      doReturn(boolean0).when(parameter0).allowReserved();
      doReturn(boolean0).when(parameter0).deprecated();
      doReturn(string0).when(parameter0).description();
      doReturn(explode0, explode1, explode2).when(parameter0).explode();
      doReturn(string0).when(parameter0).in();
      doReturn(string0).when(parameter0).name();
      doReturn(boolean0).when(parameter0).required();
      doReturn(schema0, schema0, schema1).when(parameter0).schema();
      doReturn(string0).when(parameter0).style();
      Components components0 = new Components();
      assertNotNull(components0);
      
      String string1 = "=]?x@amV=cTo{";
      RequestBody requestBody0 = new RequestBody();
      assertNull(requestBody0.getRequired());
      assertNull(requestBody0.getDescription());
      assertNull(requestBody0.get$ref());
      assertNotNull(requestBody0);
      
      Components components1 = components0.addRequestBodies(string1, requestBody0);
      assertSame(components1, components0);
      assertSame(components0, components1);
      assertNull(requestBody0.getRequired());
      assertNull(requestBody0.getDescription());
      assertNull(requestBody0.get$ref());
      assertNotNull(components1);
      
      SecurityScheme securityScheme0 = new SecurityScheme();
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getBearerFormat());
      assertNotNull(securityScheme0);
      
      Components components2 = components1.addSecuritySchemes(string1, securityScheme0);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getBearerFormat());
      assertNull(requestBody0.getRequired());
      assertNull(requestBody0.getDescription());
      assertNull(requestBody0.get$ref());
      assertNotNull(components2);
      
      Map<String, io.swagger.oas.models.media.Schema> map0 = (Map<String, io.swagger.oas.models.media.Schema>)components2.getSchemas();
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getBearerFormat());
      assertNull(requestBody0.getRequired());
      assertNull(requestBody0.getDescription());
      assertNull(requestBody0.get$ref());
      assertNull(map0);
      
      Components components3 = components2.schemas(map0);
      assertSame(components1, components2);
      assertSame(components1, components3);
      assertSame(components1, components0);
      assertSame(components2, components3);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertSame(components3, components2);
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getBearerFormat());
      assertNull(requestBody0.getRequired());
      assertNull(requestBody0.getDescription());
      assertNull(requestBody0.get$ref());
      assertNotNull(components3);
      
      Map<String, io.swagger.oas.models.parameters.Parameter> map1 = components1.getParameters();
      assertSame(components1, components2);
      assertSame(components1, components3);
      assertSame(components1, components0);
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertNull(requestBody0.getRequired());
      assertNull(requestBody0.getDescription());
      assertNull(requestBody0.get$ref());
      assertNull(map1);
      
      Example example0 = new Example();
      assertNull(example0.get$ref());
      assertNull(example0.getSummary());
      assertNull(example0.getDescription());
      assertNull(example0.getExternalValue());
      assertNotNull(example0);
      
      Example example1 = example0.value(string1);
      assertSame(example0, example1);
      assertSame(example1, example0);
      assertNull(example0.get$ref());
      assertNull(example0.getSummary());
      assertNull(example0.getDescription());
      assertNull(example0.getExternalValue());
      assertNull(example1.getSummary());
      assertNull(example1.getDescription());
      assertNull(example1.getExternalValue());
      assertNull(example1.get$ref());
      assertNotNull(example1);
      
      Components components4 = components3.parameters(map1);
      assertSame(components1, components2);
      assertSame(components1, components3);
      assertSame(components1, components0);
      assertSame(components1, components4);
      assertSame(components2, components3);
      assertSame(components2, components1);
      assertSame(components2, components4);
      assertSame(components2, components0);
      assertSame(components3, components4);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertSame(components3, components2);
      assertSame(components4, components1);
      assertSame(components4, components3);
      assertSame(components4, components2);
      assertSame(components4, components0);
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components0, components4);
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getBearerFormat());
      assertNull(requestBody0.getRequired());
      assertNull(requestBody0.getDescription());
      assertNull(requestBody0.get$ref());
      assertNotNull(components4);
      
      Optional<io.swagger.oas.models.parameters.Parameter> optional0 = OperationParser.getParameter(parameter0, components4);
      assertSame(explode0, explode2);
      assertSame(explode0, explode1);
      assertSame(explode1, explode0);
      assertSame(explode1, explode2);
      assertSame(explode2, explode0);
      assertSame(explode2, explode1);
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components0, components4);
      assertSame(components1, components2);
      assertSame(components1, components3);
      assertSame(components1, components0);
      assertSame(components1, components4);
      assertSame(components2, components3);
      assertSame(components2, components1);
      assertSame(components2, components4);
      assertSame(components2, components0);
      assertSame(components3, components4);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertSame(components3, components2);
      assertSame(components4, components1);
      assertSame(components4, components3);
      assertSame(components4, components2);
      assertSame(components4, components0);
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getBearerFormat());
      assertNull(requestBody0.getRequired());
      assertNull(requestBody0.getDescription());
      assertNull(requestBody0.get$ref());
      assertNotNull(optional0);
      
      String string2 = "io.swagger.jaxrs2.OperationParser";
      String string3 = "";
      String string4 = "java.langjava.lang.Object";
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(string2, string4).when(license0).name();
      doReturn(string3).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional1 = OperationParser.getLicense(license0);
      assertNotSame(string2, string4);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string3, string1);
      assertNotSame(string3, string4);
      assertNotSame(string3, string2);
      assertNotSame(string4, string1);
      assertNotSame(string4, string3);
      assertNotSame(string4, string2);
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(optional1);
      
      String string5 = "Can not bind back references as Creator parameters: type %s (reference '%s', parameter index #%d)";
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string1, string4).when(externalDocumentation0).description();
      doReturn(string1, string5).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional2 = OperationParser.getExternalDocumentation(externalDocumentation0);
      assertNotSame(string4, string1);
      assertNotSame(string4, string3);
      assertNotSame(string4, string5);
      assertNotSame(string4, string2);
      assertNotSame(string1, string2);
      assertNotSame(string1, string5);
      assertNotSame(string1, string4);
      assertNotSame(string1, string3);
      assertNotSame(string5, string2);
      assertNotSame(string5, string4);
      assertNotSame(string5, string1);
      assertNotSame(string5, string3);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(optional2);
  }

  @Test(timeout = 11000)
  public void test021()  throws Throwable  {
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(license0).name();
      doReturn((String) null).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional0 = OperationParser.getLicense(license0);
      assertNotNull(optional0);
      
      ApiResponse[] apiResponseArray0 = new ApiResponse[2];
      ApiResponse apiResponse0 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(apiResponse0).content();
      doReturn((String) null, (String) null).when(apiResponse0).description();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      assertNotNull(components0);
      
      Optional<ApiResponses> optional1 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components0);
      assertEquals(2, apiResponseArray0.length);
      assertNotNull(optional1);
  }

  @Test(timeout = 11000)
  public void test022()  throws Throwable  {
      Content[] contentArray0 = new Content[0];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      assertNotNull(components0);
      
      HashMap<String, Example> hashMap0 = new HashMap<String, Example>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Components components1 = components0.examples(hashMap0);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(components1);
      
      String string0 = " _bsyeq0%@u^(gZh_C";
      Example example0 = new Example();
      assertNull(example0.getDescription());
      assertNull(example0.getSummary());
      assertNull(example0.getExternalValue());
      assertNull(example0.get$ref());
      assertNotNull(example0);
      
      Components components2 = components1.addExamples(string0, example0);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(example0.getDescription());
      assertNull(example0.getSummary());
      assertNull(example0.getExternalValue());
      assertNull(example0.get$ref());
      assertNotNull(components2);
      
      io.swagger.oas.models.media.Schema<Void> schema0 = null;
      Components components3 = components2.addSchemas(string0, schema0);
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components1, components3);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(components3, components1);
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(example0.getDescription());
      assertNull(example0.getSummary());
      assertNull(example0.getExternalValue());
      assertNull(example0.get$ref());
      assertNotNull(components3);
      
      HashMap<String, io.swagger.oas.models.responses.ApiResponse> hashMap1 = new HashMap<String, io.swagger.oas.models.responses.ApiResponse>();
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotNull(hashMap1);
      
      components3.setResponses(hashMap1);
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components1, components3);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(components3, components1);
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(example0.getDescription());
      assertNull(example0.getSummary());
      assertNull(example0.getExternalValue());
      assertNull(example0.get$ref());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      
      Map<String, io.swagger.oas.models.parameters.Parameter> map0 = components1.getParameters();
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components1, components3);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(map0);
      
      Components components4 = components3.parameters(map0);
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertSame(components0, components4);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components1, components3);
      assertSame(components1, components4);
      assertSame(components2, components4);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(components3, components1);
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertSame(components3, components4);
      assertSame(components4, components3);
      assertSame(components4, components1);
      assertSame(components4, components0);
      assertSame(components4, components2);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(example0.getDescription());
      assertNull(example0.getSummary());
      assertNull(example0.getExternalValue());
      assertNull(example0.get$ref());
      assertNotNull(components4);
      
      Optional<io.swagger.oas.models.media.Content> optional0 = OperationParser.getContent(contentArray0, produces0, produces0, components4);
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertSame(components0, components4);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components1, components3);
      assertSame(components1, components4);
      assertSame(components2, components4);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(components3, components1);
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertSame(components3, components4);
      assertSame(components4, components3);
      assertSame(components4, components1);
      assertSame(components4, components0);
      assertSame(components4, components2);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(example0.getDescription());
      assertNull(example0.getSummary());
      assertNull(example0.getExternalValue());
      assertNull(example0.get$ref());
      assertEquals(0, contentArray0.length);
      assertNotNull(optional0);
      
      OperationParser operationParser0 = new OperationParser();
      assertNotNull(operationParser0);
  }

  @Test(timeout = 11000)
  public void test023()  throws Throwable  {
      Content[] contentArray0 = new Content[3];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Schema) null).when(content0).schema();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      assertNotNull(components0);
      
      Map<String, io.swagger.oas.models.media.Schema> map0 = (Map<String, io.swagger.oas.models.media.Schema>)components0.getSchemas();
      assertNull(map0);
      
      Components components1 = components0.schemas(map0);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertNotNull(components1);
      
      HashMap<String, Header> hashMap0 = new HashMap<String, Header>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Components components2 = components1.headers(hashMap0);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(components2);
      
      HashMap<String, io.swagger.oas.models.parameters.Parameter> hashMap1 = new HashMap<String, io.swagger.oas.models.parameters.Parameter>();
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotNull(hashMap1);
      
      Components components3 = components2.parameters(hashMap1);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertSame(components2, components0);
      assertSame(components2, components3);
      assertSame(components2, components1);
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertSame(components3, components1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotNull(components3);
      
      String string0 = "*/*";
      Header header0 = null;
      Components components4 = components3.addHeaders(string0, header0);
      assertSame(components0, components4);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components1, components4);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertSame(components2, components4);
      assertSame(components2, components0);
      assertSame(components2, components3);
      assertSame(components2, components1);
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertSame(components3, components4);
      assertSame(components3, components1);
      assertSame(components4, components2);
      assertSame(components4, components0);
      assertSame(components4, components1);
      assertSame(components4, components3);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotNull(components4);
      
      // Undeclared exception!
      try { 
        OperationParser.getContent(contentArray0, produces0, produces0, components4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test024()  throws Throwable  {
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(info0).description();
      doReturn((String) null).when(info0).termsOfService();
      doReturn((String) null).when(info0).title();
      doReturn((String) null).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional0 = OperationParser.getInfo(info0);
      assertNotNull(optional0);
      
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(server0).description();
      doReturn((String) null).when(server0).url();
      Optional<io.swagger.oas.models.servers.Server> optional1 = OperationParser.getServer(server0);
      assertNotNull(optional1);
  }

  @Test(timeout = 11000)
  public void test025()  throws Throwable  {
      ExternalDocumentation externalDocumentation0 = null;
      Optional<io.swagger.oas.models.ExternalDocumentation> optional0 = OperationParser.getExternalDocumentation(externalDocumentation0);
      assertNotNull(optional0);
  }

  @Test(timeout = 11000)
  public void test026()  throws Throwable  {
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional0 = OperationParser.getExternalDocumentation(externalDocumentation0);
      assertNotNull(optional0);
  }

  @Test(timeout = 11000)
  public void test027()  throws Throwable  {
      Parameter[] parameterArray0 = new Parameter[2];
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(parameter0).allowEmptyValue();
      doReturn(false, false).when(parameter0).allowReserved();
      doReturn((Object) null, (Object) null).when(parameter0).content();
      doReturn(false, false).when(parameter0).deprecated();
      doReturn((String) null, (String) null).when(parameter0).description();
      doReturn((Explode) null, (Explode) null, (Explode) null, (Explode) null, (Explode) null).when(parameter0).explode();
      doReturn((String) null, (String) null).when(parameter0).in();
      doReturn((String) null, (String) null).when(parameter0).name();
      doReturn(false, false).when(parameter0).required();
      doReturn((Schema) null, (Schema) null, (Schema) null, (Schema) null).when(parameter0).schema();
      doReturn((String) null, (String) null).when(parameter0).style();
      parameterArray0[0] = parameter0;
      parameterArray0[1] = parameterArray0[0];
      Components components0 = null;
      Optional<List<io.swagger.oas.models.parameters.Parameter>> optional0 = OperationParser.getParametersList(parameterArray0, components0);
      assertEquals(2, parameterArray0.length);
      assertNotNull(optional0);
  }

  @Test(timeout = 11000)
  public void test028()  throws Throwable  {
      MediaType mediaType0 = new MediaType();
      assertNull(mediaType0.getExample());
      assertNotNull(mediaType0);
      
      Map<String, Example> map0 = null;
      MediaType mediaType1 = mediaType0.examples(map0);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType1, mediaType0);
      assertNull(mediaType0.getExample());
      assertNull(mediaType1.getExample());
      assertNotNull(mediaType1);
      
      ExampleObject exampleObject0 = null;
      Optional<MediaType> optional0 = OperationParser.getMediaType(mediaType1, exampleObject0);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType1, mediaType0);
      assertNull(mediaType0.getExample());
      assertNull(mediaType1.getExample());
      assertNotNull(optional0);
  }

  @Test(timeout = 11000)
  public void test029()  throws Throwable  {
      MediaType mediaType0 = null;
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exampleObject0).name();
      Optional<MediaType> optional0 = OperationParser.getMediaType(mediaType0, exampleObject0);
      assertNotNull(optional0);
  }

  @Test(timeout = 11000)
  public void test030()  throws Throwable  {
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(info0).description();
      doReturn((String) null).when(info0).termsOfService();
      doReturn((String) null).when(info0).title();
      doReturn((String) null).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional0 = OperationParser.getInfo(info0);
      assertNotNull(optional0);
      
      Content[] contentArray0 = new Content[8];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Schema) null).when(content0).schema();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      contentArray0[3] = contentArray0[2];
      contentArray0[4] = contentArray0[3];
      contentArray0[5] = contentArray0[4];
      contentArray0[6] = contentArray0[5];
      contentArray0[7] = contentArray0[6];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      assertNotNull(components0);
      
      io.swagger.oas.models.parameters.Parameter parameter0 = new io.swagger.oas.models.parameters.Parameter();
      assertNull(parameter0.getExample());
      assertNull(parameter0.getIn());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getName());
      assertNull(parameter0.getAllowReserved());
      assertNull(parameter0.getRequired());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.get$ref());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getExplode());
      assertNotNull(parameter0);
      
      Map<String, Example> map0 = parameter0.getExamples();
      assertNull(parameter0.getExample());
      assertNull(parameter0.getIn());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getName());
      assertNull(parameter0.getAllowReserved());
      assertNull(parameter0.getRequired());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.get$ref());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getExplode());
      assertNull(map0);
      
      Components components1 = components0.examples(map0);
      assertSame(components1, components0);
      assertSame(components0, components1);
      assertNull(parameter0.getExample());
      assertNull(parameter0.getIn());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getName());
      assertNull(parameter0.getAllowReserved());
      assertNull(parameter0.getRequired());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.get$ref());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getExplode());
      assertNotNull(components1);
      
      String string0 = "da).J!c7Zx[|";
      Header header0 = new Header();
      assertNull(header0.getDeprecated());
      assertNull(header0.get$ref());
      assertNull(header0.getExplode());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getRequired());
      assertNull(header0.getDescription());
      assertNull(header0.getExample());
      assertNull(header0.getStyle());
      assertNotNull(header0);
      
      Components components2 = components1.addHeaders(string0, header0);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertNull(header0.getDeprecated());
      assertNull(header0.get$ref());
      assertNull(header0.getExplode());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getRequired());
      assertNull(header0.getDescription());
      assertNull(header0.getExample());
      assertNull(header0.getStyle());
      assertNull(parameter0.getExample());
      assertNull(parameter0.getIn());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getName());
      assertNull(parameter0.getAllowReserved());
      assertNull(parameter0.getRequired());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.get$ref());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getExplode());
      assertNotNull(components2);
      
      Map<String, io.swagger.oas.models.media.Schema> map1 = (Map<String, io.swagger.oas.models.media.Schema>)components2.getSchemas();
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertNull(header0.getDeprecated());
      assertNull(header0.get$ref());
      assertNull(header0.getExplode());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getRequired());
      assertNull(header0.getDescription());
      assertNull(header0.getExample());
      assertNull(header0.getStyle());
      assertNull(parameter0.getExample());
      assertNull(parameter0.getIn());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getName());
      assertNull(parameter0.getAllowReserved());
      assertNull(parameter0.getRequired());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.get$ref());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getExplode());
      assertNull(map1);
      
      Components components3 = components2.schemas(map1);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(components2, components0);
      assertSame(components3, components1);
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertNull(header0.getDeprecated());
      assertNull(header0.get$ref());
      assertNull(header0.getExplode());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getRequired());
      assertNull(header0.getDescription());
      assertNull(header0.getExample());
      assertNull(header0.getStyle());
      assertNull(parameter0.getExample());
      assertNull(parameter0.getIn());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getName());
      assertNull(parameter0.getAllowReserved());
      assertNull(parameter0.getRequired());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.get$ref());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getExplode());
      assertNotNull(components3);
      
      Example example0 = new Example();
      assertNull(example0.get$ref());
      assertNull(example0.getSummary());
      assertNull(example0.getExternalValue());
      assertNull(example0.getDescription());
      assertNotNull(example0);
      
      Components components4 = components3.addExamples(string0, example0);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components1, components4);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(components2, components4);
      assertSame(components2, components0);
      assertSame(components3, components1);
      assertSame(components3, components0);
      assertSame(components3, components4);
      assertSame(components3, components2);
      assertSame(components4, components1);
      assertSame(components4, components3);
      assertSame(components4, components2);
      assertSame(components4, components0);
      assertSame(components0, components3);
      assertSame(components0, components4);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertNull(header0.getDeprecated());
      assertNull(header0.get$ref());
      assertNull(header0.getExplode());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getRequired());
      assertNull(header0.getDescription());
      assertNull(header0.getExample());
      assertNull(header0.getStyle());
      assertNull(example0.get$ref());
      assertNull(example0.getSummary());
      assertNull(example0.getExternalValue());
      assertNull(example0.getDescription());
      assertNull(parameter0.getExample());
      assertNull(parameter0.getIn());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getName());
      assertNull(parameter0.getAllowReserved());
      assertNull(parameter0.getRequired());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.get$ref());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getExplode());
      assertNotNull(components4);
      
      // Undeclared exception!
      try { 
        OperationParser.getContent(contentArray0, produces0, produces0, components4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test031()  throws Throwable  {
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(parameter0).allowEmptyValue();
      doReturn(false).when(parameter0).allowReserved();
      doReturn((Content[]) null).when(parameter0).content();
      doReturn(false).when(parameter0).deprecated();
      doReturn((String) null).when(parameter0).description();
      doReturn((Explode) null, (Explode) null, (Explode) null).when(parameter0).explode();
      doReturn((String) null).when(parameter0).in();
      doReturn((String) null).when(parameter0).name();
      doReturn(false).when(parameter0).required();
      doReturn((Schema) null, (Schema) null).when(parameter0).schema();
      doReturn((String) null).when(parameter0).style();
      Components components0 = new Components();
      assertNotNull(components0);
      
      Map<String, RequestBody> map0 = components0.getRequestBodies();
      assertNull(map0);
      
      Components components1 = components0.requestBodies(map0);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertNotNull(components1);
      
      Map<String, io.swagger.oas.models.links.Link> map1 = null;
      Components components2 = components1.links(map1);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertNotNull(components2);
      
      HashMap<String, io.swagger.oas.models.parameters.Parameter> hashMap0 = new HashMap<String, io.swagger.oas.models.parameters.Parameter>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Components components3 = components2.parameters(hashMap0);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components1, components2);
      assertSame(components1, components3);
      assertSame(components1, components0);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertSame(components2, components3);
      assertSame(components3, components2);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(components3);
      
      Map<String, Callback> map2 = components0.getCallbacks();
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertNull(map2);
      
      Components components4 = components3.callbacks(map2);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertSame(components0, components4);
      assertSame(components0, components2);
      assertSame(components1, components4);
      assertSame(components1, components2);
      assertSame(components1, components3);
      assertSame(components1, components0);
      assertSame(components2, components1);
      assertSame(components2, components4);
      assertSame(components2, components0);
      assertSame(components2, components3);
      assertSame(components3, components2);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertSame(components3, components4);
      assertSame(components4, components2);
      assertSame(components4, components1);
      assertSame(components4, components3);
      assertSame(components4, components0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(components4);
      
      Optional<io.swagger.oas.models.parameters.Parameter> optional0 = OperationParser.getParameter(parameter0, components4);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertSame(components0, components4);
      assertSame(components0, components2);
      assertSame(components1, components4);
      assertSame(components1, components2);
      assertSame(components1, components3);
      assertSame(components1, components0);
      assertSame(components2, components1);
      assertSame(components2, components4);
      assertSame(components2, components0);
      assertSame(components2, components3);
      assertSame(components3, components2);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertSame(components3, components4);
      assertSame(components4, components2);
      assertSame(components4, components1);
      assertSame(components4, components3);
      assertSame(components4, components0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(optional0);
  }

  @Test(timeout = 11000)
  public void test032()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = "A+TP}gz8";
      stringArray0[0] = string0;
      String string1 = "QhWEk~%dssy\\T8IV@x";
      stringArray0[1] = string1;
      String string2 = "";
      stringArray0[2] = string2;
      Optional<Set<Tag>> optional0 = OperationParser.getTags(stringArray0);
      assertEquals(3, stringArray0.length);
      assertNotNull(optional0);
      
      Server[] serverArray0 = null;
      Optional<List<io.swagger.oas.models.servers.Server>> optional1 = OperationParser.getServers(serverArray0);
      assertNotNull(optional1);
      
      Optional<List<io.swagger.oas.models.servers.Server>> optional2 = OperationParser.getServers(serverArray0);
      assertSame(optional2, optional1);
      assertNotNull(optional2);
  }

  @Test(timeout = 11000)
  public void test033()  throws Throwable  {
      Server[] serverArray0 = new Server[7];
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(server0).description();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(server0).url();
      serverArray0[0] = server0;
      serverArray0[1] = serverArray0[0];
      serverArray0[2] = serverArray0[1];
      serverArray0[3] = serverArray0[2];
      serverArray0[4] = serverArray0[3];
      serverArray0[5] = serverArray0[4];
      serverArray0[6] = serverArray0[5];
      Optional<List<io.swagger.oas.models.servers.Server>> optional0 = OperationParser.getServers(serverArray0);
      assertEquals(7, serverArray0.length);
      assertNotNull(optional0);
  }

  @Test(timeout = 11000)
  public void test034()  throws Throwable  {
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(license0).name();
      doReturn((String) null).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional0 = OperationParser.getLicense(license0);
      assertNotNull(optional0);
      
      Link[] linkArray0 = new Link[0];
      Map<String, io.swagger.oas.models.links.Link> map0 = OperationParser.getLinks(linkArray0);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals(0, linkArray0.length);
      assertNotNull(map0);
  }

  @Test(timeout = 11000)
  public void test035()  throws Throwable  {
      Link[] linkArray0 = new Link[7];
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).description();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).operationId();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).operationRef();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      linkArray0[3] = linkArray0[2];
      linkArray0[4] = linkArray0[3];
      linkArray0[5] = linkArray0[4];
      linkArray0[6] = linkArray0[5];
      Map<String, io.swagger.oas.models.links.Link> map0 = OperationParser.getLinks(linkArray0);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals(7, linkArray0.length);
      assertNotNull(map0);
  }

  @Test(timeout = 11000)
  public void test036()  throws Throwable  {
      io.swagger.oas.annotations.parameters.RequestBody requestBody0 = null;
      Components components0 = new Components();
      assertNotNull(components0);
      
      ApiResponses apiResponses0 = new ApiResponses();
      assertTrue(apiResponses0.isEmpty());
      assertEquals(0, apiResponses0.size());
      assertNotNull(apiResponses0);
      
      io.swagger.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.oas.models.responses.ApiResponse();
      assertNull(apiResponse0.get$ref());
      assertNull(apiResponse0.getDescription());
      assertNotNull(apiResponse0);
      
      ApiResponses apiResponses1 = apiResponses0._default(apiResponse0);
      assertSame(apiResponses0, apiResponses1);
      assertSame(apiResponses1, apiResponses0);
      assertFalse(apiResponses0.isEmpty());
      assertEquals(1, apiResponses0.size());
      assertNull(apiResponse0.get$ref());
      assertNull(apiResponse0.getDescription());
      assertFalse(apiResponses1.isEmpty());
      assertEquals(1, apiResponses1.size());
      assertNotNull(apiResponses1);
      
      Components components1 = components0.responses(apiResponses1);
      assertSame(components0, components1);
      assertSame(apiResponses0, apiResponses1);
      assertSame(apiResponses1, apiResponses0);
      assertSame(components1, components0);
      assertFalse(apiResponses0.isEmpty());
      assertEquals(1, apiResponses0.size());
      assertNull(apiResponse0.get$ref());
      assertNull(apiResponse0.getDescription());
      assertFalse(apiResponses1.isEmpty());
      assertEquals(1, apiResponses1.size());
      assertNotNull(components1);
      
      io.swagger.oas.models.parameters.Parameter parameter0 = new io.swagger.oas.models.parameters.Parameter();
      assertNull(parameter0.get$ref());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getExample());
      assertNull(parameter0.getIn());
      assertNull(parameter0.getExplode());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.getAllowReserved());
      assertNull(parameter0.getName());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getRequired());
      assertNotNull(parameter0);
      
      Components components2 = components1.addParameters(apiResponses0.DEFAULT, parameter0);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(apiResponses0, apiResponses1);
      assertSame(apiResponses1, apiResponses0);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertFalse(apiResponses0.isEmpty());
      assertEquals(1, apiResponses0.size());
      assertNull(apiResponse0.get$ref());
      assertNull(apiResponse0.getDescription());
      assertFalse(apiResponses1.isEmpty());
      assertEquals(1, apiResponses1.size());
      assertNull(parameter0.get$ref());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getExample());
      assertNull(parameter0.getIn());
      assertNull(parameter0.getExplode());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.getAllowReserved());
      assertNull(parameter0.getName());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getRequired());
      assertNotNull(components2);
      
      Operation operation0 = new Operation();
      assertNull(operation0.getOperationId());
      assertNull(operation0.getSummary());
      assertNull(operation0.getDeprecated());
      assertNull(operation0.getDescription());
      assertNotNull(operation0);
      
      Map<String, Callback> map0 = operation0.getCallbacks();
      assertNull(operation0.getOperationId());
      assertNull(operation0.getSummary());
      assertNull(operation0.getDeprecated());
      assertNull(operation0.getDescription());
      assertNull(map0);
      
      Components components3 = components2.callbacks(map0);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertSame(apiResponses0, apiResponses1);
      assertSame(apiResponses1, apiResponses0);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components2, components3);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertSame(components3, components2);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertFalse(apiResponses0.isEmpty());
      assertEquals(1, apiResponses0.size());
      assertNull(apiResponse0.get$ref());
      assertNull(apiResponse0.getDescription());
      assertFalse(apiResponses1.isEmpty());
      assertEquals(1, apiResponses1.size());
      assertNull(parameter0.get$ref());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getExample());
      assertNull(parameter0.getIn());
      assertNull(parameter0.getExplode());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.getAllowReserved());
      assertNull(parameter0.getName());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getRequired());
      assertNull(operation0.getOperationId());
      assertNull(operation0.getSummary());
      assertNull(operation0.getDeprecated());
      assertNull(operation0.getDescription());
      assertNotNull(components3);
      
      HashMap<String, io.swagger.oas.models.links.Link> hashMap0 = new HashMap<String, io.swagger.oas.models.links.Link>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Components components4 = components3.links(hashMap0);
      assertSame(components0, components2);
      assertSame(components0, components4);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertSame(apiResponses0, apiResponses1);
      assertSame(apiResponses1, apiResponses0);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components1, components4);
      assertSame(components2, components3);
      assertSame(components2, components1);
      assertSame(components2, components4);
      assertSame(components2, components0);
      assertSame(components3, components2);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertSame(components3, components4);
      assertSame(components4, components1);
      assertSame(components4, components3);
      assertSame(components4, components0);
      assertSame(components4, components2);
      assertFalse(apiResponses0.isEmpty());
      assertEquals(1, apiResponses0.size());
      assertNull(apiResponse0.get$ref());
      assertNull(apiResponse0.getDescription());
      assertFalse(apiResponses1.isEmpty());
      assertEquals(1, apiResponses1.size());
      assertNull(parameter0.get$ref());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getExample());
      assertNull(parameter0.getIn());
      assertNull(parameter0.getExplode());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.getAllowReserved());
      assertNull(parameter0.getName());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getRequired());
      assertNull(operation0.getOperationId());
      assertNull(operation0.getSummary());
      assertNull(operation0.getDeprecated());
      assertNull(operation0.getDescription());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(components4);
      
      Optional<RequestBody> optional0 = OperationParser.getRequestBody(requestBody0, components4);
      assertSame(components0, components2);
      assertSame(components0, components4);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertSame(apiResponses0, apiResponses1);
      assertSame(apiResponses1, apiResponses0);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components1, components4);
      assertSame(components2, components3);
      assertSame(components2, components1);
      assertSame(components2, components4);
      assertSame(components2, components0);
      assertSame(components3, components2);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertSame(components3, components4);
      assertSame(components4, components1);
      assertSame(components4, components3);
      assertSame(components4, components0);
      assertSame(components4, components2);
      assertFalse(apiResponses0.isEmpty());
      assertEquals(1, apiResponses0.size());
      assertNull(apiResponse0.get$ref());
      assertNull(apiResponse0.getDescription());
      assertFalse(apiResponses1.isEmpty());
      assertEquals(1, apiResponses1.size());
      assertNull(parameter0.get$ref());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getExample());
      assertNull(parameter0.getIn());
      assertNull(parameter0.getExplode());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.getAllowReserved());
      assertNull(parameter0.getName());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getRequired());
      assertNull(operation0.getOperationId());
      assertNull(operation0.getSummary());
      assertNull(operation0.getDeprecated());
      assertNull(operation0.getDescription());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(optional0);
  }

  @Test(timeout = 11000)
  public void test037()  throws Throwable  {
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(info0).description();
      doReturn((String) null).when(info0).termsOfService();
      doReturn((String) null).when(info0).title();
      doReturn((String) null).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional0 = OperationParser.getInfo(info0);
      assertNotNull(optional0);
      
      Link link0 = null;
      Optional<io.swagger.oas.models.links.Link> optional1 = OperationParser.getLink(link0);
      assertNotNull(optional1);
      
      io.swagger.oas.annotations.parameters.RequestBody requestBody0 = mock(io.swagger.oas.annotations.parameters.RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(requestBody0).description();
      doReturn(false).when(requestBody0).required();
      Components components0 = null;
      Optional<RequestBody> optional2 = OperationParser.getRequestBody(requestBody0, components0);
      assertNotNull(optional2);
      
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(parameter0).allowEmptyValue();
      doReturn(false).when(parameter0).allowReserved();
      doReturn((Content[]) null).when(parameter0).content();
      doReturn(false).when(parameter0).deprecated();
      doReturn((String) null).when(parameter0).description();
      doReturn((Explode) null, (Explode) null, (Explode) null).when(parameter0).explode();
      doReturn((String) null).when(parameter0).in();
      doReturn((String) null).when(parameter0).name();
      doReturn(false).when(parameter0).required();
      doReturn((Schema) null, (Schema) null).when(parameter0).schema();
      doReturn((String) null).when(parameter0).style();
      Optional<io.swagger.oas.models.parameters.Parameter> optional3 = OperationParser.getParameter(parameter0, components0);
      assertNotNull(optional3);
      
      io.swagger.oas.annotations.parameters.RequestBody requestBody1 = null;
      Optional<RequestBody> optional4 = OperationParser.getRequestBody(requestBody1, components0);
      assertSame(optional4, optional2);
      assertNotNull(optional4);
  }

  @Test(timeout = 11000)
  public void test038()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = "ZC0bgR+\"nF*";
      stringArray0[0] = string0;
      String string1 = ";v'tn($";
      stringArray0[1] = string1;
      String string2 = "";
      stringArray0[2] = string2;
      String string3 = "*/*";
      stringArray0[3] = string3;
      Optional<Set<Tag>> optional0 = OperationParser.getTags(stringArray0);
      assertEquals(4, stringArray0.length);
      assertNotNull(optional0);
      
      Content[] contentArray0 = new Content[0];
      Components components0 = new Components();
      assertNotNull(components0);
      
      RequestBody requestBody0 = new RequestBody();
      assertNull(requestBody0.get$ref());
      assertNull(requestBody0.getDescription());
      assertNull(requestBody0.getRequired());
      assertNotNull(requestBody0);
      
      Components components1 = components0.addRequestBodies(string1, requestBody0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertNull(requestBody0.get$ref());
      assertNull(requestBody0.getDescription());
      assertNull(requestBody0.getRequired());
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(components1);
      
      HashMap<String, io.swagger.oas.models.links.Link> hashMap0 = new HashMap<String, io.swagger.oas.models.links.Link>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Components components2 = components1.links(hashMap0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertNull(requestBody0.get$ref());
      assertNull(requestBody0.getDescription());
      assertNull(requestBody0.getRequired());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(components2);
      
      String string4 = "jqQ|>:RHI9.t";
      io.swagger.oas.models.parameters.Parameter parameter0 = null;
      Components components3 = components2.addParameters(string4, parameter0);
      assertNotSame(string4, string2);
      assertNotSame(string4, string0);
      assertNotSame(string4, string1);
      assertNotSame(string4, string3);
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertSame(components3, components1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string4);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components1, components3);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertSame(components2, components3);
      assertNull(requestBody0.get$ref());
      assertNull(requestBody0.getDescription());
      assertNull(requestBody0.getRequired());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(components3);
      
      String string5 = null;
      io.swagger.oas.models.media.Schema<io.swagger.oas.models.parameters.Parameter> schema0 = null;
      Components components4 = components3.addSchemas(string5, schema0);
      assertNotSame(string4, string2);
      assertNotSame(string4, string0);
      assertNotSame(string4, string1);
      assertNotSame(string4, string3);
      assertSame(components3, components0);
      assertSame(components3, components4);
      assertSame(components3, components2);
      assertSame(components3, components1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string4);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertSame(components4, components0);
      assertSame(components4, components2);
      assertSame(components4, components3);
      assertSame(components4, components1);
      assertSame(components0, components4);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components1, components3);
      assertSame(components1, components4);
      assertSame(components2, components1);
      assertSame(components2, components4);
      assertSame(components2, components0);
      assertSame(components2, components3);
      assertNull(requestBody0.get$ref());
      assertNull(requestBody0.getDescription());
      assertNull(requestBody0.getRequired());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(components4);
      
      Optional<io.swagger.oas.models.media.Content> optional1 = OperationParser.getContents(contentArray0, components4);
      assertNotSame(string4, string2);
      assertNotSame(string4, string0);
      assertNotSame(string4, string1);
      assertNotSame(string4, string3);
      assertSame(components3, components0);
      assertSame(components3, components4);
      assertSame(components3, components2);
      assertSame(components3, components1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string4);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertSame(components4, components0);
      assertSame(components4, components2);
      assertSame(components4, components3);
      assertSame(components4, components1);
      assertSame(components0, components4);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components1, components3);
      assertSame(components1, components4);
      assertSame(components2, components1);
      assertSame(components2, components4);
      assertSame(components2, components0);
      assertSame(components2, components3);
      assertNull(requestBody0.get$ref());
      assertNull(requestBody0.getDescription());
      assertNull(requestBody0.getRequired());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, contentArray0.length);
      assertNotNull(optional1);
  }

  @Test(timeout = 11000)
  public void test039()  throws Throwable  {
      Content[] contentArray0 = new Content[1];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((ExampleObject[]) null).when(content0).examples();
      contentArray0[0] = content0;
      Components components0 = new Components();
      assertNotNull(components0);
      
      String string0 = "++^_v;)-<XCl";
      io.swagger.oas.models.links.Link link0 = new io.swagger.oas.models.links.Link();
      assertNull(link0.getOperationId());
      assertNull(link0.getOperationRef());
      assertNull(link0.get$ref());
      assertNull(link0.getDescription());
      assertNotNull(link0);
      
      Components components1 = components0.addLinks(string0, link0);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertNull(link0.getOperationId());
      assertNull(link0.getOperationRef());
      assertNull(link0.get$ref());
      assertNull(link0.getDescription());
      assertNotNull(components1);
      
      HashMap<String, Example> hashMap0 = new HashMap<String, Example>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Components components2 = components1.examples(hashMap0);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertNull(link0.getOperationId());
      assertNull(link0.getOperationRef());
      assertNull(link0.get$ref());
      assertNull(link0.getDescription());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(components2);
      
      io.swagger.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.oas.models.responses.ApiResponse();
      assertNull(apiResponse0.get$ref());
      assertNull(apiResponse0.getDescription());
      assertNotNull(apiResponse0);
      
      Map<String, io.swagger.oas.models.links.Link> map0 = apiResponse0.getLinks();
      assertNull(apiResponse0.get$ref());
      assertNull(apiResponse0.getDescription());
      assertNull(map0);
      
      Components components3 = components2.links(map0);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components1, components2);
      assertSame(components1, components3);
      assertSame(components1, components0);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(components3, components2);
      assertSame(components3, components1);
      assertSame(components3, components0);
      assertNull(link0.getOperationId());
      assertNull(link0.getOperationRef());
      assertNull(link0.get$ref());
      assertNull(link0.getDescription());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(apiResponse0.get$ref());
      assertNull(apiResponse0.getDescription());
      assertNotNull(components3);
      
      Map<String, io.swagger.oas.models.media.Schema> map1 = null;
      Components components4 = components3.schemas(map1);
      assertSame(components0, components3);
      assertSame(components0, components4);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components1, components2);
      assertSame(components1, components3);
      assertSame(components1, components4);
      assertSame(components1, components0);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(components2, components4);
      assertSame(components3, components2);
      assertSame(components3, components1);
      assertSame(components3, components4);
      assertSame(components3, components0);
      assertSame(components4, components3);
      assertSame(components4, components0);
      assertSame(components4, components1);
      assertSame(components4, components2);
      assertNull(link0.getOperationId());
      assertNull(link0.getOperationRef());
      assertNull(link0.get$ref());
      assertNull(link0.getDescription());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(apiResponse0.get$ref());
      assertNull(apiResponse0.getDescription());
      assertNotNull(components4);
      
      // Undeclared exception!
      try { 
        OperationParser.getContents(contentArray0, components4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test040()  throws Throwable  {
      LinkParameter[] linkParameterArray0 = new LinkParameter[4];
      LinkParameter linkParameter0 = mock(LinkParameter.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null).when(linkParameter0).name();
      linkParameterArray0[0] = linkParameter0;
      linkParameterArray0[1] = linkParameterArray0[0];
      linkParameterArray0[2] = linkParameterArray0[1];
      linkParameterArray0[3] = linkParameterArray0[2];
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameterArray0);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals(4, linkParameterArray0.length);
      assertNotNull(map0);
  }

  @Test(timeout = 11000)
  public void test041()  throws Throwable  {
      io.swagger.oas.annotations.parameters.RequestBody requestBody0 = mock(io.swagger.oas.annotations.parameters.RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(requestBody0).description();
      doReturn(false).when(requestBody0).required();
      Components components0 = new Components();
      assertNotNull(components0);
      
      Map<String, io.swagger.oas.models.media.Schema> map0 = (Map<String, io.swagger.oas.models.media.Schema>)components0.getSchemas();
      assertNull(map0);
      
      Components components1 = components0.schemas(map0);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertNotNull(components1);
      
      io.swagger.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.oas.models.responses.ApiResponse();
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      assertNotNull(apiResponse0);
      
      Map<String, io.swagger.oas.models.links.Link> map1 = apiResponse0.getLinks();
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      assertNull(map1);
      
      Components components2 = components1.links(map1);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      assertNotNull(components2);
      
      Map<String, RequestBody> map2 = components2.getRequestBodies();
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      assertNull(map2);
      
      Components components3 = components2.requestBodies(map2);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertSame(components2, components3);
      assertSame(components3, components2);
      assertSame(components3, components1);
      assertSame(components3, components0);
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      assertNotNull(components3);
      
      Map<String, io.swagger.oas.models.responses.ApiResponse> map3 = null;
      Components components4 = components3.responses(map3);
      assertSame(components0, components2);
      assertSame(components0, components4);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertSame(components1, components3);
      assertSame(components1, components4);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertSame(components2, components4);
      assertSame(components2, components3);
      assertSame(components3, components4);
      assertSame(components3, components2);
      assertSame(components3, components1);
      assertSame(components3, components0);
      assertSame(components4, components0);
      assertSame(components4, components2);
      assertSame(components4, components3);
      assertSame(components4, components1);
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      assertNotNull(components4);
      
      Optional<RequestBody> optional0 = OperationParser.getRequestBody(requestBody0, components4);
      assertSame(components0, components2);
      assertSame(components0, components4);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertSame(components1, components3);
      assertSame(components1, components4);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertSame(components2, components4);
      assertSame(components2, components3);
      assertSame(components3, components4);
      assertSame(components3, components2);
      assertSame(components3, components1);
      assertSame(components3, components0);
      assertSame(components4, components0);
      assertSame(components4, components2);
      assertSame(components4, components3);
      assertSame(components4, components1);
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      assertNotNull(optional0);
      
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String[]) null).when(schema0).allowableValues();
      doReturn((String) null).when(schema0).defaultValue();
      doReturn(false).when(schema0).deprecated();
      doReturn((String) null).when(schema0).description();
      doReturn((String) null, (String) null).when(schema0).example();
      doReturn(false).when(schema0).exclusiveMaximum();
      doReturn(false).when(schema0).exclusiveMinimum();
      doReturn((ExternalDocumentation) null).when(schema0).externalDocs();
      doReturn((String) null).when(schema0).format();
      doReturn(0).when(schema0).maxLength();
      doReturn(0).when(schema0).minProperties();
      doReturn((String) null).when(schema0).pattern();
      doReturn(false).when(schema0).readOnly();
      doReturn((String) null).when(schema0).ref();
      doReturn((String) null).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional1 = (Optional<io.swagger.oas.models.media.Schema>)OperationParser.getSchemaFromAnnotation(schema0);
      assertNotNull(optional1);
      
      Content[] contentArray0 = new Content[1];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((ExampleObject[]) null).when(content0).examples();
      contentArray0[0] = content0;
      // Undeclared exception!
      try { 
        OperationParser.getContents(contentArray0, components2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test042()  throws Throwable  {
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(contact0).email();
      doReturn((String) null).when(contact0).name();
      doReturn((String) null).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional0 = OperationParser.getContact(contact0);
      assertNotNull(optional0);
      
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional1 = OperationParser.getExternalDocumentation(externalDocumentation0);
      assertNotNull(optional1);
      
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(link0).description();
      doReturn((String) null).when(link0).operationId();
      doReturn((String) null).when(link0).operationRef();
      Optional<io.swagger.oas.models.links.Link> optional2 = OperationParser.getLink(link0);
      assertNotNull(optional2);
  }

  @Test(timeout = 11000)
  public void test043()  throws Throwable  {
      License license0 = null;
      Optional<io.swagger.oas.models.info.License> optional0 = OperationParser.getLicense(license0);
      assertNotNull(optional0);
      
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(contact0).email();
      doReturn((String) null).when(contact0).name();
      doReturn((String) null).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional1 = OperationParser.getContact(contact0);
      assertNotNull(optional1);
      
      Content[] contentArray0 = new Content[1];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((ExampleObject[]) null).when(content0).examples();
      contentArray0[0] = content0;
      Components components0 = new Components();
      assertNotNull(components0);
      
      HashMap<String, io.swagger.oas.models.responses.ApiResponse> hashMap0 = new HashMap<String, io.swagger.oas.models.responses.ApiResponse>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Components components1 = components0.responses(hashMap0);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(components1);
      
      Encoding encoding0 = new Encoding();
      assertNull(encoding0.getStyle());
      assertNull(encoding0.getExplode());
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getAllowReserved());
      assertNotNull(encoding0);
      
      Map<String, Header> map0 = encoding0.getHeaders();
      assertNull(encoding0.getStyle());
      assertNull(encoding0.getExplode());
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getAllowReserved());
      assertNull(map0);
      
      Components components2 = components1.headers(map0);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(encoding0.getStyle());
      assertNull(encoding0.getExplode());
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getAllowReserved());
      assertNotNull(components2);
      
      Map<String, io.swagger.oas.models.media.Schema> map1 = (Map<String, io.swagger.oas.models.media.Schema>)components0.getSchemas();
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertNull(map1);
      
      Components components3 = components2.schemas(map1);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertSame(components1, components2);
      assertSame(components1, components3);
      assertSame(components1, components0);
      assertSame(components2, components0);
      assertSame(components2, components3);
      assertSame(components2, components1);
      assertSame(components3, components2);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(encoding0.getStyle());
      assertNull(encoding0.getExplode());
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getAllowReserved());
      assertNotNull(components3);
      
      // Undeclared exception!
      try { 
        OperationParser.getContents(contentArray0, components3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test044()  throws Throwable  {
      Content[] contentArray0 = new Content[0];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      assertNotNull(components0);
      
      Map<String, io.swagger.oas.models.media.Schema> map0 = null;
      Components components1 = components0.schemas(map0);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertNotNull(components1);
      
      String string0 = "Illegal white space character (code 0x";
      io.swagger.oas.models.links.Link link0 = new io.swagger.oas.models.links.Link();
      assertNull(link0.getOperationId());
      assertNull(link0.getDescription());
      assertNull(link0.get$ref());
      assertNull(link0.getOperationRef());
      assertNotNull(link0);
      
      Components components2 = components1.addLinks(string0, link0);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertNull(link0.getOperationId());
      assertNull(link0.getDescription());
      assertNull(link0.get$ref());
      assertNull(link0.getOperationRef());
      assertNotNull(components2);
      
      Operation operation0 = new Operation();
      assertNull(operation0.getDeprecated());
      assertNull(operation0.getSummary());
      assertNull(operation0.getDescription());
      assertNull(operation0.getOperationId());
      assertNotNull(operation0);
      
      Map<String, Callback> map1 = operation0.getCallbacks();
      assertNull(operation0.getDeprecated());
      assertNull(operation0.getSummary());
      assertNull(operation0.getDescription());
      assertNull(operation0.getOperationId());
      assertNull(map1);
      
      Components components3 = components2.callbacks(map1);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertSame(components3, components2);
      assertNull(link0.getOperationId());
      assertNull(link0.getDescription());
      assertNull(link0.get$ref());
      assertNull(link0.getOperationRef());
      assertNull(operation0.getDeprecated());
      assertNull(operation0.getSummary());
      assertNull(operation0.getDescription());
      assertNull(operation0.getOperationId());
      assertNotNull(components3);
      
      String string1 = "m";
      SecurityScheme securityScheme0 = new SecurityScheme();
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNotNull(securityScheme0);
      
      Components components4 = components1.addSecuritySchemes(string1, securityScheme0);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertSame(components0, components4);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components1, components4);
      assertSame(components1, components3);
      assertNotSame(string1, string0);
      assertSame(components4, components3);
      assertSame(components4, components2);
      assertSame(components4, components0);
      assertSame(components4, components1);
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertFalse(string1.equals((Object)string0));
      assertNotNull(components4);
      
      Map<String, Example> map2 = components4.getExamples();
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertSame(components0, components4);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components1, components4);
      assertSame(components1, components3);
      assertNotSame(string1, string0);
      assertSame(components4, components3);
      assertSame(components4, components2);
      assertSame(components4, components0);
      assertSame(components4, components1);
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertFalse(string1.equals((Object)string0));
      assertNull(map2);
      
      Components components5 = components3.examples(map2);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components0, components5);
      assertSame(components0, components3);
      assertSame(components0, components4);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components1, components4);
      assertSame(components1, components3);
      assertSame(components1, components5);
      assertNotSame(string0, string1);
      assertSame(components2, components4);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components2, components5);
      assertSame(components2, components3);
      assertSame(components3, components4);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertSame(components3, components5);
      assertSame(components3, components2);
      assertNotSame(string1, string0);
      assertSame(components4, components3);
      assertSame(components4, components5);
      assertSame(components4, components2);
      assertSame(components4, components0);
      assertSame(components4, components1);
      assertSame(components5, components1);
      assertSame(components5, components4);
      assertSame(components5, components0);
      assertSame(components5, components3);
      assertSame(components5, components2);
      assertNull(link0.getOperationId());
      assertNull(link0.getDescription());
      assertNull(link0.get$ref());
      assertNull(link0.getOperationRef());
      assertNull(operation0.getDeprecated());
      assertNull(operation0.getSummary());
      assertNull(operation0.getDescription());
      assertNull(operation0.getOperationId());
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(components5);
      
      Optional<io.swagger.oas.models.media.Content> optional0 = OperationParser.getContent(contentArray0, produces0, produces0, components5);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components0, components5);
      assertSame(components0, components3);
      assertSame(components0, components4);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components1, components4);
      assertSame(components1, components3);
      assertSame(components1, components5);
      assertNotSame(string0, string1);
      assertSame(components2, components4);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components2, components5);
      assertSame(components2, components3);
      assertSame(components3, components4);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertSame(components3, components5);
      assertSame(components3, components2);
      assertNotSame(string1, string0);
      assertSame(components4, components3);
      assertSame(components4, components5);
      assertSame(components4, components2);
      assertSame(components4, components0);
      assertSame(components4, components1);
      assertSame(components5, components1);
      assertSame(components5, components4);
      assertSame(components5, components0);
      assertSame(components5, components3);
      assertSame(components5, components2);
      assertNull(link0.getOperationId());
      assertNull(link0.getDescription());
      assertNull(link0.get$ref());
      assertNull(link0.getOperationRef());
      assertNull(operation0.getDeprecated());
      assertNull(operation0.getSummary());
      assertNull(operation0.getDescription());
      assertNull(operation0.getOperationId());
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, contentArray0.length);
      assertNotNull(optional0);
  }

  @Test(timeout = 11000)
  public void test045()  throws Throwable  {
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(info0).description();
      doReturn((String) null).when(info0).termsOfService();
      doReturn((String) null).when(info0).title();
      doReturn((String) null).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional0 = OperationParser.getInfo(info0);
      assertNotNull(optional0);
      
      Content[] contentArray0 = null;
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      assertNotNull(components0);
      
      HashMap<String, Callback> hashMap0 = new HashMap<String, Callback>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      components0.setCallbacks(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Components components1 = components0.callbacks(hashMap0);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(components1);
      
      String string0 = "";
      io.swagger.oas.models.links.Link link0 = null;
      Components components2 = components1.addLinks(string0, link0);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(components2);
      
      Map<String, Example> map0 = null;
      Components components3 = components2.addLinks(string0, link0);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(components3, components2);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(components3);
      
      Components components4 = components2.examples(map0);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components0, components4);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertSame(components1, components4);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(components2, components4);
      assertSame(components4, components2);
      assertSame(components4, components0);
      assertSame(components4, components1);
      assertSame(components4, components3);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(components4);
      
      Map<String, io.swagger.oas.models.parameters.Parameter> map1 = components0.getParameters();
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components0, components4);
      assertNull(map1);
      
      Components components5 = components4.parameters(map1);
      assertSame(components0, components5);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components0, components4);
      assertSame(components1, components5);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertSame(components1, components4);
      assertSame(components2, components5);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(components2, components4);
      assertSame(components4, components2);
      assertSame(components4, components0);
      assertSame(components4, components1);
      assertSame(components4, components5);
      assertSame(components4, components3);
      assertSame(components5, components2);
      assertSame(components5, components4);
      assertSame(components5, components1);
      assertSame(components5, components3);
      assertSame(components5, components0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(components5);
      
      Map<String, RequestBody> map2 = components4.getRequestBodies();
      assertSame(components0, components5);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components0, components4);
      assertSame(components1, components5);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertSame(components1, components4);
      assertSame(components2, components5);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(components2, components4);
      assertSame(components4, components2);
      assertSame(components4, components0);
      assertSame(components4, components1);
      assertSame(components4, components5);
      assertSame(components4, components3);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(map2);
      
      Components components6 = components5.requestBodies(map2);
      assertSame(components6, components4);
      assertSame(components6, components2);
      assertSame(components6, components0);
      assertSame(components6, components1);
      assertSame(components6, components5);
      assertSame(components6, components3);
      assertSame(components0, components5);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components0, components6);
      assertSame(components0, components2);
      assertSame(components0, components4);
      assertSame(components1, components5);
      assertSame(components1, components0);
      assertSame(components1, components6);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertSame(components1, components4);
      assertSame(components2, components5);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(components2, components6);
      assertSame(components2, components4);
      assertSame(components4, components6);
      assertSame(components4, components2);
      assertSame(components4, components0);
      assertSame(components4, components1);
      assertSame(components4, components5);
      assertSame(components4, components3);
      assertSame(components5, components2);
      assertSame(components5, components6);
      assertSame(components5, components4);
      assertSame(components5, components1);
      assertSame(components5, components0);
      assertSame(components5, components3);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(components6);
      
      Optional<io.swagger.oas.models.media.Content> optional1 = OperationParser.getContent(contentArray0, produces0, produces0, components5);
      assertSame(components0, components5);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components0, components6);
      assertSame(components0, components2);
      assertSame(components0, components4);
      assertSame(components1, components5);
      assertSame(components1, components0);
      assertSame(components1, components6);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertSame(components1, components4);
      assertSame(components2, components5);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(components2, components6);
      assertSame(components2, components4);
      assertSame(components4, components6);
      assertSame(components4, components2);
      assertSame(components4, components0);
      assertSame(components4, components1);
      assertSame(components4, components5);
      assertSame(components4, components3);
      assertSame(components5, components2);
      assertSame(components5, components6);
      assertSame(components5, components4);
      assertSame(components5, components1);
      assertSame(components5, components0);
      assertSame(components5, components3);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(optional1);
      
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(parameter0).allowEmptyValue();
      doReturn(false).when(parameter0).allowReserved();
      doReturn((Content[]) null).when(parameter0).content();
      doReturn(false).when(parameter0).deprecated();
      doReturn((String) null).when(parameter0).description();
      doReturn((Explode) null, (Explode) null, (Explode) null).when(parameter0).explode();
      doReturn((String) null).when(parameter0).in();
      doReturn((String) null).when(parameter0).name();
      doReturn(false).when(parameter0).required();
      doReturn((Schema) null, (Schema) null).when(parameter0).schema();
      doReturn((String) null).when(parameter0).style();
      Optional<io.swagger.oas.models.parameters.Parameter> optional2 = OperationParser.getParameter(parameter0, components0);
      assertSame(components0, components5);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components0, components6);
      assertSame(components0, components2);
      assertSame(components0, components4);
      assertNotNull(optional2);
      
      Link link1 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(link1).description();
      doReturn((String) null).when(link1).operationId();
      doReturn((String) null).when(link1).operationRef();
      Optional<io.swagger.oas.models.links.Link> optional3 = OperationParser.getLink(link1);
      assertNotNull(optional3);
  }

  @Test(timeout = 11000)
  public void test046()  throws Throwable  {
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(license0).name();
      doReturn((String) null).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional0 = OperationParser.getLicense(license0);
      assertNotNull(optional0);
      
      OperationParser operationParser0 = new OperationParser();
      assertNotNull(operationParser0);
      
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional1 = OperationParser.getExternalDocumentation(externalDocumentation0);
      assertNotNull(optional1);
      
      Content[] contentArray0 = null;
      Components components0 = new Components();
      assertNotNull(components0);
      
      Map<String, io.swagger.oas.models.links.Link> map0 = components0.getLinks();
      assertNull(map0);
      
      Components components1 = components0.links(map0);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertNotNull(components1);
      
      RequestBody requestBody0 = new RequestBody();
      assertNull(requestBody0.getRequired());
      assertNull(requestBody0.getDescription());
      assertNull(requestBody0.get$ref());
      assertNotNull(requestBody0);
      
      Components components2 = components1.addRequestBodies(operationParser0.RESPONSE_DEFAULT, requestBody0);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertNull(requestBody0.getRequired());
      assertNull(requestBody0.getDescription());
      assertNull(requestBody0.get$ref());
      assertNotNull(components2);
      
      Map<String, io.swagger.oas.models.responses.ApiResponse> map1 = components0.getResponses();
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertNull(map1);
      
      Components components3 = components2.responses(map1);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components1, components3);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(components3, components2);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertNull(requestBody0.getRequired());
      assertNull(requestBody0.getDescription());
      assertNull(requestBody0.get$ref());
      assertNotNull(components3);
      
      String string0 = "no description";
      io.swagger.oas.models.links.Link link0 = new io.swagger.oas.models.links.Link();
      assertNull(link0.get$ref());
      assertNull(link0.getOperationRef());
      assertNull(link0.getOperationId());
      assertNull(link0.getDescription());
      assertNotNull(link0);
      
      Map<String, Header> map2 = components0.getHeaders();
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertNull(map2);
      
      io.swagger.oas.models.links.Link link1 = link0.headers(map2);
      assertSame(link1, link0);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(link0, link1);
      assertNull(link1.getOperationId());
      assertNull(link1.getDescription());
      assertNull(link1.getOperationRef());
      assertNull(link1.get$ref());
      assertNull(link0.get$ref());
      assertNull(link0.getOperationRef());
      assertNull(link0.getOperationId());
      assertNull(link0.getDescription());
      assertNotNull(link1);
      
      Components components4 = components3.addLinks(string0, link1);
      assertSame(link1, link0);
      assertSame(components4, components3);
      assertSame(components4, components1);
      assertSame(components4, components0);
      assertSame(components4, components2);
      assertSame(components0, components3);
      assertSame(components0, components4);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components1, components3);
      assertSame(components1, components4);
      assertSame(components2, components4);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(components3, components4);
      assertSame(components3, components2);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertSame(link0, link1);
      assertNull(link1.getOperationId());
      assertNull(link1.getDescription());
      assertNull(link1.getOperationRef());
      assertNull(link1.get$ref());
      assertNull(requestBody0.getRequired());
      assertNull(requestBody0.getDescription());
      assertNull(requestBody0.get$ref());
      assertNull(link0.get$ref());
      assertNull(link0.getOperationRef());
      assertNull(link0.getOperationId());
      assertNull(link0.getDescription());
      assertNotNull(components4);
      
      Optional<io.swagger.oas.models.media.Content> optional2 = OperationParser.getContents(contentArray0, components4);
      assertSame(link1, link0);
      assertSame(components4, components3);
      assertSame(components4, components1);
      assertSame(components4, components0);
      assertSame(components4, components2);
      assertSame(components0, components3);
      assertSame(components0, components4);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components1, components3);
      assertSame(components1, components4);
      assertSame(components2, components4);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(components3, components4);
      assertSame(components3, components2);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertSame(link0, link1);
      assertNull(requestBody0.getRequired());
      assertNull(requestBody0.getDescription());
      assertNull(requestBody0.get$ref());
      assertNull(link0.get$ref());
      assertNull(link0.getOperationRef());
      assertNull(link0.getOperationId());
      assertNull(link0.getDescription());
      assertNull(link1.getOperationId());
      assertNull(link1.getDescription());
      assertNull(link1.getOperationRef());
      assertNull(link1.get$ref());
      assertNotNull(optional2);
  }

  @Test(timeout = 11000)
  public void test047()  throws Throwable  {
      Parameter[] parameterArray0 = new Parameter[0];
      Components components0 = new Components();
      assertNotNull(components0);
      
      String string0 = " Wptb`g!Xx6";
      io.swagger.oas.models.parameters.Parameter parameter0 = new io.swagger.oas.models.parameters.Parameter();
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getRequired());
      assertNull(parameter0.getExplode());
      assertNull(parameter0.getAllowReserved());
      assertNull(parameter0.get$ref());
      assertNull(parameter0.getExample());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getIn());
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getName());
      assertNotNull(parameter0);
      
      Components components1 = components0.addParameters(string0, parameter0);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getRequired());
      assertNull(parameter0.getExplode());
      assertNull(parameter0.getAllowReserved());
      assertNull(parameter0.get$ref());
      assertNull(parameter0.getExample());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getIn());
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getName());
      assertNotNull(components1);
      
      String string1 = "1qD07O3B8!ks";
      RequestBody requestBody0 = new RequestBody();
      assertNull(requestBody0.get$ref());
      assertNull(requestBody0.getDescription());
      assertNull(requestBody0.getRequired());
      assertNotNull(requestBody0);
      
      Components components2 = components1.addRequestBodies(string1, requestBody0);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertNotSame(string0, string1);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertNotSame(string1, string0);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getRequired());
      assertNull(parameter0.getExplode());
      assertNull(parameter0.getAllowReserved());
      assertNull(parameter0.get$ref());
      assertNull(parameter0.getExample());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getIn());
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getName());
      assertNull(requestBody0.get$ref());
      assertNull(requestBody0.getDescription());
      assertNull(requestBody0.getRequired());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(components2);
      
      Encoding encoding0 = new Encoding();
      assertNull(encoding0.getExplode());
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getAllowReserved());
      assertNull(encoding0.getStyle());
      assertNotNull(encoding0);
      
      Map<String, Header> map0 = encoding0.getHeaders();
      assertNull(encoding0.getExplode());
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getAllowReserved());
      assertNull(encoding0.getStyle());
      assertNull(map0);
      
      io.swagger.oas.models.info.Info info0 = new io.swagger.oas.models.info.Info();
      assertNull(info0.getVersion());
      assertNull(info0.getTitle());
      assertNull(info0.getTermsOfService());
      assertNull(info0.getDescription());
      assertNotNull(info0);
      
      io.swagger.oas.models.info.Info info1 = info0.termsOfService(string1);
      assertNotSame(string1, string0);
      assertSame(info0, info1);
      assertSame(info1, info0);
      assertNull(info0.getVersion());
      assertNull(info0.getTitle());
      assertEquals("1qD07O3B8!ks", info0.getTermsOfService());
      assertNull(info0.getDescription());
      assertEquals("1qD07O3B8!ks", info1.getTermsOfService());
      assertNull(info1.getTitle());
      assertNull(info1.getVersion());
      assertNull(info1.getDescription());
      assertFalse(string1.equals((Object)string0));
      assertNotNull(info1);
      
      io.swagger.oas.models.info.Info info2 = info1.title(string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(info0, info2);
      assertSame(info0, info1);
      assertSame(info1, info0);
      assertSame(info1, info2);
      assertSame(info2, info1);
      assertSame(info2, info0);
      assertNull(info0.getVersion());
      assertEquals(" Wptb`g!Xx6", info0.getTitle());
      assertEquals("1qD07O3B8!ks", info0.getTermsOfService());
      assertNull(info0.getDescription());
      assertEquals("1qD07O3B8!ks", info1.getTermsOfService());
      assertEquals(" Wptb`g!Xx6", info1.getTitle());
      assertNull(info1.getVersion());
      assertNull(info1.getDescription());
      assertNull(info2.getDescription());
      assertEquals(" Wptb`g!Xx6", info2.getTitle());
      assertEquals("1qD07O3B8!ks", info2.getTermsOfService());
      assertNull(info2.getVersion());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(info2);
      
      io.swagger.oas.models.info.License license0 = new io.swagger.oas.models.info.License();
      assertNull(license0.getName());
      assertNull(license0.getUrl());
      assertNotNull(license0);
      
      io.swagger.oas.models.info.License license1 = license0.name(string1);
      assertNotSame(string1, string0);
      assertSame(license0, license1);
      assertSame(license1, license0);
      assertNull(license0.getUrl());
      assertEquals("1qD07O3B8!ks", license0.getName());
      assertNull(license1.getUrl());
      assertEquals("1qD07O3B8!ks", license1.getName());
      assertFalse(string1.equals((Object)string0));
      assertNotNull(license1);
      
      io.swagger.oas.models.info.Info info3 = info2.license(license1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(info0, info2);
      assertSame(info0, info1);
      assertSame(info0, info3);
      assertSame(info1, info0);
      assertSame(info1, info3);
      assertSame(info1, info2);
      assertSame(info2, info1);
      assertSame(info2, info0);
      assertSame(info2, info3);
      assertSame(license0, license1);
      assertSame(license1, license0);
      assertSame(info3, info1);
      assertSame(info3, info2);
      assertSame(info3, info0);
      assertNull(info0.getVersion());
      assertEquals(" Wptb`g!Xx6", info0.getTitle());
      assertEquals("1qD07O3B8!ks", info0.getTermsOfService());
      assertNull(info0.getDescription());
      assertEquals("1qD07O3B8!ks", info1.getTermsOfService());
      assertEquals(" Wptb`g!Xx6", info1.getTitle());
      assertNull(info1.getVersion());
      assertNull(info1.getDescription());
      assertNull(info2.getDescription());
      assertEquals(" Wptb`g!Xx6", info2.getTitle());
      assertEquals("1qD07O3B8!ks", info2.getTermsOfService());
      assertNull(info2.getVersion());
      assertNull(license0.getUrl());
      assertEquals("1qD07O3B8!ks", license0.getName());
      assertNull(license1.getUrl());
      assertEquals("1qD07O3B8!ks", license1.getName());
      assertEquals(" Wptb`g!Xx6", info3.getTitle());
      assertNull(info3.getVersion());
      assertEquals("1qD07O3B8!ks", info3.getTermsOfService());
      assertNull(info3.getDescription());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(info3);
      
      Map<String, Object> map1 = info3.getExtensions();
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(info0, info2);
      assertSame(info0, info1);
      assertSame(info0, info3);
      assertSame(info1, info0);
      assertSame(info1, info3);
      assertSame(info1, info2);
      assertSame(info2, info1);
      assertSame(info2, info0);
      assertSame(info2, info3);
      assertSame(license0, license1);
      assertSame(license1, license0);
      assertSame(info3, info1);
      assertSame(info3, info2);
      assertSame(info3, info0);
      assertNull(info0.getVersion());
      assertEquals(" Wptb`g!Xx6", info0.getTitle());
      assertEquals("1qD07O3B8!ks", info0.getTermsOfService());
      assertNull(info0.getDescription());
      assertEquals("1qD07O3B8!ks", info1.getTermsOfService());
      assertEquals(" Wptb`g!Xx6", info1.getTitle());
      assertNull(info1.getVersion());
      assertNull(info1.getDescription());
      assertNull(info2.getDescription());
      assertEquals(" Wptb`g!Xx6", info2.getTitle());
      assertEquals("1qD07O3B8!ks", info2.getTermsOfService());
      assertNull(info2.getVersion());
      assertNull(license0.getUrl());
      assertEquals("1qD07O3B8!ks", license0.getName());
      assertNull(license1.getUrl());
      assertEquals("1qD07O3B8!ks", license1.getName());
      assertEquals(" Wptb`g!Xx6", info3.getTitle());
      assertNull(info3.getVersion());
      assertEquals("1qD07O3B8!ks", info3.getTermsOfService());
      assertNull(info3.getDescription());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNull(map1);
      
      requestBody0.setExtensions(map1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(info0, info2);
      assertSame(info0, info1);
      assertSame(info0, info3);
      assertSame(info1, info0);
      assertSame(info1, info3);
      assertSame(info1, info2);
      assertSame(info2, info1);
      assertSame(info2, info0);
      assertSame(info2, info3);
      assertSame(license0, license1);
      assertSame(license1, license0);
      assertSame(info3, info1);
      assertSame(info3, info2);
      assertSame(info3, info0);
      assertNull(requestBody0.get$ref());
      assertNull(requestBody0.getDescription());
      assertNull(requestBody0.getRequired());
      assertNull(info0.getVersion());
      assertEquals(" Wptb`g!Xx6", info0.getTitle());
      assertEquals("1qD07O3B8!ks", info0.getTermsOfService());
      assertNull(info0.getDescription());
      assertEquals("1qD07O3B8!ks", info1.getTermsOfService());
      assertEquals(" Wptb`g!Xx6", info1.getTitle());
      assertNull(info1.getVersion());
      assertNull(info1.getDescription());
      assertNull(info2.getDescription());
      assertEquals(" Wptb`g!Xx6", info2.getTitle());
      assertEquals("1qD07O3B8!ks", info2.getTermsOfService());
      assertNull(info2.getVersion());
      assertNull(license0.getUrl());
      assertEquals("1qD07O3B8!ks", license0.getName());
      assertNull(license1.getUrl());
      assertEquals("1qD07O3B8!ks", license1.getName());
      assertEquals(" Wptb`g!Xx6", info3.getTitle());
      assertNull(info3.getVersion());
      assertEquals("1qD07O3B8!ks", info3.getTermsOfService());
      assertNull(info3.getDescription());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      Components components3 = components2.headers(map0);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertSame(components3, components1);
      assertNotSame(string0, string1);
      assertSame(components1, components3);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertNotSame(string1, string0);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getRequired());
      assertNull(parameter0.getExplode());
      assertNull(parameter0.getAllowReserved());
      assertNull(parameter0.get$ref());
      assertNull(parameter0.getExample());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getIn());
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getName());
      assertNull(requestBody0.get$ref());
      assertNull(requestBody0.getDescription());
      assertNull(requestBody0.getRequired());
      assertNull(encoding0.getExplode());
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getAllowReserved());
      assertNull(encoding0.getStyle());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(components3);
      
      String string2 = "";
      MediaType mediaType0 = new MediaType();
      assertNull(mediaType0.getExample());
      assertNotNull(mediaType0);
      
      Map<String, Encoding> map2 = mediaType0.getEncoding();
      assertNull(mediaType0.getExample());
      assertNull(map2);
      
      MediaType mediaType1 = mediaType0.encoding(map2);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType1, mediaType0);
      assertNull(mediaType0.getExample());
      assertNull(mediaType1.getExample());
      assertNotNull(mediaType1);
      
      String string3 = "default";
      MediaType mediaType2 = mediaType1.example(string3);
      assertSame(mediaType0, mediaType2);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType1, mediaType2);
      assertSame(mediaType1, mediaType0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertSame(mediaType2, mediaType1);
      assertSame(mediaType2, mediaType0);
      assertEquals("default", mediaType0.getExample());
      assertEquals("default", mediaType1.getExample());
      assertEquals("default", mediaType2.getExample());
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(mediaType2);
      
      Map<String, Example> map3 = mediaType2.getExamples();
      assertSame(mediaType0, mediaType2);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType1, mediaType2);
      assertSame(mediaType1, mediaType0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertSame(mediaType2, mediaType1);
      assertSame(mediaType2, mediaType0);
      assertEquals("default", mediaType0.getExample());
      assertEquals("default", mediaType1.getExample());
      assertEquals("default", mediaType2.getExample());
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNull(map3);
      
      components3.setExamples(map3);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertSame(components1, components3);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertSame(components3, components1);
      assertSame(mediaType0, mediaType2);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType1, mediaType2);
      assertSame(mediaType1, mediaType0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertSame(mediaType2, mediaType1);
      assertSame(mediaType2, mediaType0);
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getRequired());
      assertNull(parameter0.getExplode());
      assertNull(parameter0.getAllowReserved());
      assertNull(parameter0.get$ref());
      assertNull(parameter0.getExample());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getIn());
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getName());
      assertNull(requestBody0.get$ref());
      assertNull(requestBody0.getDescription());
      assertNull(requestBody0.getRequired());
      assertNull(encoding0.getExplode());
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getAllowReserved());
      assertNull(encoding0.getStyle());
      assertEquals("default", mediaType0.getExample());
      assertEquals("default", mediaType1.getExample());
      assertEquals("default", mediaType2.getExample());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      Example example0 = new Example();
      assertNull(example0.getExternalValue());
      assertNull(example0.getDescription());
      assertNull(example0.get$ref());
      assertNull(example0.getSummary());
      assertNotNull(example0);
      
      Example example1 = example0.$ref(string0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertSame(example0, example1);
      assertSame(example1, example0);
      assertNull(example0.getExternalValue());
      assertNull(example0.getDescription());
      assertEquals(" Wptb`g!Xx6", example0.get$ref());
      assertNull(example0.getSummary());
      assertNull(example1.getExternalValue());
      assertNull(example1.getDescription());
      assertNull(example1.getSummary());
      assertEquals(" Wptb`g!Xx6", example1.get$ref());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertNotNull(example1);
      
      String string4 = "";
      Example example2 = example1.externalValue(string4);
      assertNotSame(string0, string4);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertSame(example0, example1);
      assertSame(example0, example2);
      assertSame(example1, example0);
      assertSame(example1, example2);
      assertNotSame(string4, string0);
      assertSame(string4, string2);
      assertNotSame(string4, string3);
      assertNotSame(string4, string1);
      assertSame(example2, example1);
      assertSame(example2, example0);
      assertEquals("", example0.getExternalValue());
      assertNull(example0.getDescription());
      assertEquals(" Wptb`g!Xx6", example0.get$ref());
      assertNull(example0.getSummary());
      assertEquals("", example1.getExternalValue());
      assertNull(example1.getDescription());
      assertNull(example1.getSummary());
      assertEquals(" Wptb`g!Xx6", example1.get$ref());
      assertEquals(" Wptb`g!Xx6", example2.get$ref());
      assertEquals("", example2.getExternalValue());
      assertNull(example2.getDescription());
      assertNull(example2.getSummary());
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(example2);
      
      Components components4 = components3.addExamples(string2, example2);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components0, components4);
      assertNotSame(string0, string4);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertSame(components1, components3);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components1, components4);
      assertNotSame(string1, string2);
      assertNotSame(string1, string4);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertSame(components2, components0);
      assertSame(components2, components4);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(components3, components0);
      assertSame(components3, components4);
      assertSame(components3, components2);
      assertSame(components3, components1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertSame(string2, string4);
      assertSame(example0, example1);
      assertSame(example0, example2);
      assertSame(example1, example0);
      assertSame(example1, example2);
      assertNotSame(string4, string0);
      assertSame(string4, string2);
      assertNotSame(string4, string3);
      assertNotSame(string4, string1);
      assertSame(example2, example1);
      assertSame(example2, example0);
      assertSame(components4, components1);
      assertSame(components4, components0);
      assertSame(components4, components3);
      assertSame(components4, components2);
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getRequired());
      assertNull(parameter0.getExplode());
      assertNull(parameter0.getAllowReserved());
      assertNull(parameter0.get$ref());
      assertNull(parameter0.getExample());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getIn());
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getName());
      assertNull(requestBody0.get$ref());
      assertNull(requestBody0.getDescription());
      assertNull(requestBody0.getRequired());
      assertNull(encoding0.getExplode());
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getAllowReserved());
      assertNull(encoding0.getStyle());
      assertEquals("", example0.getExternalValue());
      assertNull(example0.getDescription());
      assertEquals(" Wptb`g!Xx6", example0.get$ref());
      assertNull(example0.getSummary());
      assertEquals("", example1.getExternalValue());
      assertNull(example1.getDescription());
      assertNull(example1.getSummary());
      assertEquals(" Wptb`g!Xx6", example1.get$ref());
      assertEquals(" Wptb`g!Xx6", example2.get$ref());
      assertEquals("", example2.getExternalValue());
      assertNull(example2.getDescription());
      assertNull(example2.getSummary());
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(components4);
      
      Optional<List<io.swagger.oas.models.parameters.Parameter>> optional0 = OperationParser.getParametersList(parameterArray0, components4);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components0, components4);
      assertNotSame(string0, string4);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertSame(components1, components3);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components1, components4);
      assertNotSame(string1, string2);
      assertNotSame(string1, string4);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertSame(components2, components0);
      assertSame(components2, components4);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(components3, components0);
      assertSame(components3, components4);
      assertSame(components3, components2);
      assertSame(components3, components1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertSame(string2, string4);
      assertSame(example0, example1);
      assertSame(example0, example2);
      assertSame(example1, example0);
      assertSame(example1, example2);
      assertNotSame(string4, string0);
      assertSame(string4, string2);
      assertNotSame(string4, string3);
      assertNotSame(string4, string1);
      assertSame(example2, example1);
      assertSame(example2, example0);
      assertSame(components4, components1);
      assertSame(components4, components0);
      assertSame(components4, components3);
      assertSame(components4, components2);
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getRequired());
      assertNull(parameter0.getExplode());
      assertNull(parameter0.getAllowReserved());
      assertNull(parameter0.get$ref());
      assertNull(parameter0.getExample());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getIn());
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getName());
      assertNull(requestBody0.get$ref());
      assertNull(requestBody0.getDescription());
      assertNull(requestBody0.getRequired());
      assertNull(encoding0.getExplode());
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getAllowReserved());
      assertNull(encoding0.getStyle());
      assertEquals("", example0.getExternalValue());
      assertNull(example0.getDescription());
      assertEquals(" Wptb`g!Xx6", example0.get$ref());
      assertNull(example0.getSummary());
      assertEquals("", example1.getExternalValue());
      assertNull(example1.getDescription());
      assertNull(example1.getSummary());
      assertEquals(" Wptb`g!Xx6", example1.get$ref());
      assertEquals(" Wptb`g!Xx6", example2.get$ref());
      assertEquals("", example2.getExternalValue());
      assertNull(example2.getDescription());
      assertNull(example2.getSummary());
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals(0, parameterArray0.length);
      assertNotNull(optional0);
  }

  @Test(timeout = 11000)
  public void test048()  throws Throwable  {
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(parameter0).allowEmptyValue();
      doReturn(false).when(parameter0).allowReserved();
      doReturn((Content[]) null).when(parameter0).content();
      doReturn(false).when(parameter0).deprecated();
      doReturn((String) null).when(parameter0).description();
      doReturn((Explode) null, (Explode) null, (Explode) null).when(parameter0).explode();
      doReturn((String) null).when(parameter0).in();
      doReturn((String) null).when(parameter0).name();
      doReturn(false).when(parameter0).required();
      doReturn((Schema) null, (Schema) null).when(parameter0).schema();
      doReturn((String) null).when(parameter0).style();
      Components components0 = new Components();
      assertNotNull(components0);
      
      Map<String, SecurityScheme> map0 = components0.getSecuritySchemes();
      assertNull(map0);
      
      Components components1 = components0.securitySchemes(map0);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertNotNull(components1);
      
      String string0 = "io.swagger.jaxrs2.OperationParser";
      io.swagger.oas.models.links.Link link0 = new io.swagger.oas.models.links.Link();
      assertNull(link0.getOperationId());
      assertNull(link0.getOperationRef());
      assertNull(link0.get$ref());
      assertNull(link0.getDescription());
      assertNotNull(link0);
      
      Components components2 = components1.addLinks(string0, link0);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertNull(link0.getOperationId());
      assertNull(link0.getOperationRef());
      assertNull(link0.get$ref());
      assertNull(link0.getDescription());
      assertNotNull(components2);
      
      io.swagger.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.oas.models.responses.ApiResponse();
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      assertNotNull(apiResponse0);
      
      Map<String, io.swagger.oas.models.links.Link> map1 = apiResponse0.getLinks();
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      assertNull(map1);
      
      Components components3 = components2.links(map1);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components1, components3);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertSame(components3, components2);
      assertNull(link0.getOperationId());
      assertNull(link0.getOperationRef());
      assertNull(link0.get$ref());
      assertNull(link0.getDescription());
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      assertNotNull(components3);
      
      Map<String, io.swagger.oas.models.media.Schema> map2 = (Map<String, io.swagger.oas.models.media.Schema>)components3.getSchemas();
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components1, components3);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertSame(components3, components2);
      assertNull(link0.getOperationId());
      assertNull(link0.getOperationRef());
      assertNull(link0.get$ref());
      assertNull(link0.getDescription());
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      assertNull(map2);
      
      String string1 = "]I";
      io.swagger.oas.models.servers.Server server0 = new io.swagger.oas.models.servers.Server();
      assertNull(server0.getDescription());
      assertNull(server0.getUrl());
      assertNotNull(server0);
      
      String string2 = "rPc";
      io.swagger.oas.models.servers.Server server1 = server0.description(string2);
      assertSame(server0, server1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(server1, server0);
      assertNull(server0.getUrl());
      assertEquals("rPc", server0.getDescription());
      assertNull(server1.getUrl());
      assertEquals("rPc", server1.getDescription());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(server1);
      
      String string3 = "CCb[";
      io.swagger.oas.models.servers.Server server2 = server1.url(string3);
      assertSame(server2, server0);
      assertSame(server2, server1);
      assertSame(server0, server2);
      assertSame(server0, server1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertSame(server1, server0);
      assertSame(server1, server2);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertEquals("CCb[", server2.getUrl());
      assertEquals("rPc", server2.getDescription());
      assertEquals("rPc", server0.getDescription());
      assertEquals("CCb[", server0.getUrl());
      assertEquals("rPc", server1.getDescription());
      assertEquals("CCb[", server1.getUrl());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(server2);
      
      ServerVariables serverVariables0 = new ServerVariables();
      assertEquals(0, serverVariables0.size());
      assertTrue(serverVariables0.isEmpty());
      assertNotNull(serverVariables0);
      
      io.swagger.oas.models.servers.Server server3 = server2.variables(serverVariables0);
      assertSame(server2, server0);
      assertSame(server2, server3);
      assertSame(server2, server1);
      assertSame(server3, server2);
      assertSame(server3, server0);
      assertSame(server3, server1);
      assertSame(server0, server3);
      assertSame(server0, server2);
      assertSame(server0, server1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertSame(server1, server0);
      assertSame(server1, server3);
      assertSame(server1, server2);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertEquals("CCb[", server2.getUrl());
      assertEquals("rPc", server2.getDescription());
      assertEquals(0, serverVariables0.size());
      assertTrue(serverVariables0.isEmpty());
      assertEquals("CCb[", server3.getUrl());
      assertEquals("rPc", server3.getDescription());
      assertEquals("rPc", server0.getDescription());
      assertEquals("CCb[", server0.getUrl());
      assertEquals("rPc", server1.getDescription());
      assertEquals("CCb[", server1.getUrl());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(server3);
      
      components3.addExtension(string1, server3);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components1, components3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertSame(components3, components2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(server0, server3);
      assertSame(server0, server2);
      assertSame(server0, server1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertSame(server1, server0);
      assertSame(server1, server3);
      assertSame(server1, server2);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertSame(server2, server0);
      assertSame(server2, server3);
      assertSame(server2, server1);
      assertSame(server3, server2);
      assertSame(server3, server0);
      assertSame(server3, server1);
      assertNull(link0.getOperationId());
      assertNull(link0.getOperationRef());
      assertNull(link0.get$ref());
      assertNull(link0.getDescription());
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      assertEquals("rPc", server0.getDescription());
      assertEquals("CCb[", server0.getUrl());
      assertEquals("rPc", server1.getDescription());
      assertEquals("CCb[", server1.getUrl());
      assertEquals("CCb[", server2.getUrl());
      assertEquals("rPc", server2.getDescription());
      assertEquals(0, serverVariables0.size());
      assertTrue(serverVariables0.isEmpty());
      assertEquals("CCb[", server3.getUrl());
      assertEquals("rPc", server3.getDescription());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      Components components4 = components0.schemas(map2);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components0, components4);
      assertSame(components0, components2);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components1, components4);
      assertSame(components1, components3);
      assertSame(components4, components3);
      assertSame(components4, components2);
      assertSame(components4, components0);
      assertSame(components4, components1);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(components2, components4);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertSame(components3, components4);
      assertSame(components3, components2);
      assertNull(link0.getOperationId());
      assertNull(link0.getOperationRef());
      assertNull(link0.get$ref());
      assertNull(link0.getDescription());
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertNotNull(components4);
      
      Map<String, io.swagger.oas.models.parameters.Parameter> map3 = components4.getParameters();
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components0, components4);
      assertSame(components0, components2);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components1, components4);
      assertSame(components1, components3);
      assertSame(components4, components3);
      assertSame(components4, components2);
      assertSame(components4, components0);
      assertSame(components4, components1);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(components2, components4);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertSame(components3, components4);
      assertSame(components3, components2);
      assertNull(link0.getOperationId());
      assertNull(link0.getOperationRef());
      assertNull(link0.get$ref());
      assertNull(link0.getDescription());
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertNull(map3);
      
      Components components5 = components3.parameters(map3);
      assertSame(components0, components3);
      assertSame(components0, components5);
      assertSame(components0, components1);
      assertSame(components0, components4);
      assertSame(components0, components2);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components1, components5);
      assertSame(components1, components4);
      assertSame(components1, components3);
      assertSame(components4, components5);
      assertSame(components4, components3);
      assertSame(components4, components2);
      assertSame(components4, components0);
      assertSame(components4, components1);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertSame(components5, components4);
      assertSame(components5, components3);
      assertSame(components5, components1);
      assertSame(components5, components2);
      assertSame(components5, components0);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components2, components5);
      assertSame(components2, components3);
      assertSame(components2, components4);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertSame(components3, components5);
      assertSame(components3, components4);
      assertSame(components3, components2);
      assertNull(link0.getOperationId());
      assertNull(link0.getOperationRef());
      assertNull(link0.get$ref());
      assertNull(link0.getDescription());
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertNotNull(components5);
      
      String string4 = "";
      Callback callback0 = new Callback();
      assertEquals(0, callback0.size());
      assertTrue(callback0.isEmpty());
      assertNotNull(callback0);
      
      Components components6 = components3.addCallbacks(string4, callback0);
      assertSame(components0, components3);
      assertSame(components0, components5);
      assertSame(components0, components6);
      assertSame(components0, components1);
      assertSame(components0, components4);
      assertSame(components0, components2);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components1, components5);
      assertSame(components1, components6);
      assertSame(components1, components4);
      assertSame(components1, components3);
      assertNotSame(string0, string4);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components2, components5);
      assertSame(components2, components6);
      assertSame(components2, components3);
      assertSame(components2, components4);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string3);
      assertNotSame(string4, string2);
      assertSame(components6, components2);
      assertSame(components6, components3);
      assertSame(components6, components4);
      assertSame(components6, components1);
      assertSame(components6, components5);
      assertSame(components6, components0);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertSame(components3, components5);
      assertSame(components3, components6);
      assertSame(components3, components4);
      assertSame(components3, components2);
      assertNull(link0.getOperationId());
      assertNull(link0.getOperationRef());
      assertNull(link0.get$ref());
      assertNull(link0.getDescription());
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      assertEquals(0, callback0.size());
      assertTrue(callback0.isEmpty());
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(components6);
      
      Optional<io.swagger.oas.models.parameters.Parameter> optional0 = OperationParser.getParameter(parameter0, components6);
      assertSame(components0, components3);
      assertSame(components0, components5);
      assertSame(components0, components6);
      assertSame(components0, components1);
      assertSame(components0, components4);
      assertSame(components0, components2);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components1, components5);
      assertSame(components1, components6);
      assertSame(components1, components4);
      assertSame(components1, components3);
      assertNotSame(string0, string4);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components2, components5);
      assertSame(components2, components6);
      assertSame(components2, components3);
      assertSame(components2, components4);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string3);
      assertNotSame(string4, string2);
      assertSame(components6, components2);
      assertSame(components6, components3);
      assertSame(components6, components4);
      assertSame(components6, components1);
      assertSame(components6, components5);
      assertSame(components6, components0);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertSame(components3, components5);
      assertSame(components3, components6);
      assertSame(components3, components4);
      assertSame(components3, components2);
      assertNull(link0.getOperationId());
      assertNull(link0.getOperationRef());
      assertNull(link0.get$ref());
      assertNull(link0.getDescription());
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      assertEquals(0, callback0.size());
      assertTrue(callback0.isEmpty());
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(optional0);
      
      Server server4 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(server4).description();
      doReturn((String) null).when(server4).url();
      Optional<io.swagger.oas.models.servers.Server> optional1 = OperationParser.getServer(server4);
      assertNotNull(optional1);
      
      Info info0 = null;
      Optional<io.swagger.oas.models.info.Info> optional2 = OperationParser.getInfo(info0);
      assertNotNull(optional2);
  }

  @Test(timeout = 11000)
  public void test049()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Optional<Set<Tag>> optional0 = OperationParser.getTags(stringArray0);
      assertEquals(0, stringArray0.length);
      assertNotNull(optional0);
      
      OperationParser operationParser0 = new OperationParser();
      assertNotNull(operationParser0);
  }

  @Test(timeout = 11000)
  public void test050()  throws Throwable  {
      Server[] serverArray0 = null;
      Optional<List<io.swagger.oas.models.servers.Server>> optional0 = OperationParser.getServers(serverArray0);
      assertNotNull(optional0);
      
      ApiResponse[] apiResponseArray0 = null;
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      assertNotNull(components0);
      
      Map<String, io.swagger.oas.models.media.Schema> map0 = (Map<String, io.swagger.oas.models.media.Schema>)components0.getSchemas();
      assertNull(map0);
      
      Components components1 = components0.schemas(map0);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertNotNull(components1);
      
      String string0 = "M";
      RequestBody requestBody0 = new RequestBody();
      assertNull(requestBody0.getDescription());
      assertNull(requestBody0.get$ref());
      assertNull(requestBody0.getRequired());
      assertNotNull(requestBody0);
      
      Components components2 = components1.addRequestBodies(string0, requestBody0);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertNull(requestBody0.getDescription());
      assertNull(requestBody0.get$ref());
      assertNull(requestBody0.getRequired());
      assertNotNull(components2);
      
      Map<String, SecurityScheme> map1 = null;
      Components components3 = components2.securitySchemes(map1);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertSame(components2, components3);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertSame(components3, components1);
      assertNull(requestBody0.getDescription());
      assertNull(requestBody0.get$ref());
      assertNull(requestBody0.getRequired());
      assertNotNull(components3);
      
      Example example0 = new Example();
      assertNull(example0.getSummary());
      assertNull(example0.getDescription());
      assertNull(example0.getExternalValue());
      assertNull(example0.get$ref());
      assertNotNull(example0);
      
      Example example1 = example0.summary(string0);
      assertSame(example0, example1);
      assertSame(example1, example0);
      assertNull(example0.getDescription());
      assertNull(example0.getExternalValue());
      assertNull(example0.get$ref());
      assertEquals("M", example0.getSummary());
      assertNull(example1.getDescription());
      assertNull(example1.getExternalValue());
      assertEquals("M", example1.getSummary());
      assertNull(example1.get$ref());
      assertNotNull(example1);
      
      Components components4 = components3.addExamples(string0, example1);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components0, components4);
      assertSame(components0, components2);
      assertSame(components1, components0);
      assertSame(components1, components4);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertSame(components2, components4);
      assertSame(components2, components3);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertSame(components3, components1);
      assertSame(components3, components4);
      assertSame(example0, example1);
      assertSame(example1, example0);
      assertSame(components4, components2);
      assertSame(components4, components0);
      assertSame(components4, components1);
      assertSame(components4, components3);
      assertNull(requestBody0.getDescription());
      assertNull(requestBody0.get$ref());
      assertNull(requestBody0.getRequired());
      assertNull(example0.getDescription());
      assertNull(example0.getExternalValue());
      assertNull(example0.get$ref());
      assertEquals("M", example0.getSummary());
      assertNull(example1.getDescription());
      assertNull(example1.getExternalValue());
      assertEquals("M", example1.getSummary());
      assertNull(example1.get$ref());
      assertNotNull(components4);
      
      Optional<ApiResponses> optional1 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components4);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components0, components4);
      assertSame(components0, components2);
      assertSame(components1, components0);
      assertSame(components1, components4);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertSame(components2, components4);
      assertSame(components2, components3);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertSame(components3, components1);
      assertSame(components3, components4);
      assertSame(example0, example1);
      assertSame(example1, example0);
      assertSame(components4, components2);
      assertSame(components4, components0);
      assertSame(components4, components1);
      assertSame(components4, components3);
      assertNull(requestBody0.getDescription());
      assertNull(requestBody0.get$ref());
      assertNull(requestBody0.getRequired());
      assertNull(example0.getDescription());
      assertNull(example0.getExternalValue());
      assertNull(example0.get$ref());
      assertEquals("M", example0.getSummary());
      assertNull(example1.getDescription());
      assertNull(example1.getExternalValue());
      assertEquals("M", example1.getSummary());
      assertNull(example1.get$ref());
      assertNotNull(optional1);
  }

  @Test(timeout = 11000)
  public void test051()  throws Throwable  {
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(contact0).email();
      doReturn((String) null).when(contact0).name();
      doReturn((String) null).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional0 = OperationParser.getContact(contact0);
      assertNotNull(optional0);
      
      Link[] linkArray0 = new Link[3];
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).description();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).operationId();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).operationRef();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      Map<String, io.swagger.oas.models.links.Link> map0 = OperationParser.getLinks(linkArray0);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals(3, linkArray0.length);
      assertNotNull(map0);
      
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional1 = OperationParser.getExternalDocumentation(externalDocumentation0);
      assertNotNull(optional1);
      
      Server[] serverArray0 = new Server[4];
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null).when(server0).description();
      doReturn((String) null, (String) null, (String) null, (String) null).when(server0).url();
      serverArray0[0] = server0;
      serverArray0[1] = serverArray0[0];
      serverArray0[2] = serverArray0[1];
      serverArray0[3] = serverArray0[2];
      Optional<List<io.swagger.oas.models.servers.Server>> optional2 = OperationParser.getServers(serverArray0);
      assertEquals(4, serverArray0.length);
      assertNotNull(optional2);
      
      Map<String, io.swagger.oas.models.links.Link> map1 = OperationParser.getLinks(linkArray0);
      assertNotSame(map1, map0);
      assertEquals(0, map1.size());
      assertTrue(map1.isEmpty());
      assertTrue(map1.equals((Object)map0));
      assertEquals(3, linkArray0.length);
      assertNotNull(map1);
      
      Parameter parameter0 = null;
      Components components0 = new Components();
      assertNotNull(components0);
      
      Map<String, io.swagger.oas.models.responses.ApiResponse> map2 = components0.getResponses();
      assertNull(map2);
      
      Components components1 = components0.responses(map2);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertNotNull(components1);
      
      String string0 = "cxAUqg\\R$6c@;";
      io.swagger.oas.models.parameters.Parameter parameter1 = null;
      Components components2 = components1.addParameters(string0, parameter1);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertNotNull(components2);
      
      Callback callback0 = new Callback();
      assertTrue(callback0.isEmpty());
      assertEquals(0, callback0.size());
      assertNotNull(callback0);
      
      String string1 = "* (;*1Uj6,TI[sixE1";
      PathItem pathItem0 = null;
      Callback callback1 = callback0.addPathItem(string1, pathItem0);
      assertSame(callback0, callback1);
      assertNotSame(string1, string0);
      assertSame(callback1, callback0);
      assertFalse(callback0.isEmpty());
      assertEquals(1, callback0.size());
      assertEquals(1, callback1.size());
      assertFalse(callback1.isEmpty());
      assertFalse(string1.equals((Object)string0));
      assertNotNull(callback1);
      
      Components components3 = components2.addCallbacks(string0, callback1);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components1, components3);
      assertNotSame(string0, string1);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(components2, components0);
      assertSame(callback0, callback1);
      assertNotSame(string1, string0);
      assertSame(callback1, callback0);
      assertSame(components3, components1);
      assertSame(components3, components2);
      assertSame(components3, components0);
      assertFalse(callback0.isEmpty());
      assertEquals(1, callback0.size());
      assertEquals(1, callback1.size());
      assertFalse(callback1.isEmpty());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(components3);
      
      io.swagger.oas.models.links.Link link1 = new io.swagger.oas.models.links.Link();
      assertNull(link1.get$ref());
      assertNull(link1.getOperationRef());
      assertNull(link1.getOperationId());
      assertNull(link1.getDescription());
      assertNotNull(link1);
      
      String string2 = "";
      String string3 = "Invalid Object Id definition for ";
      io.swagger.oas.models.links.Link link2 = link1.parameters(string2, string3);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertSame(link2, link1);
      assertSame(link1, link2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNull(link2.getOperationId());
      assertNull(link2.getDescription());
      assertNull(link2.get$ref());
      assertNull(link2.getOperationRef());
      assertNull(link1.get$ref());
      assertNull(link1.getOperationRef());
      assertNull(link1.getOperationId());
      assertNull(link1.getDescription());
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(link2);
      
      String string4 = "X<,*~VGUM\\Q:E";
      io.swagger.oas.models.links.Link link3 = link2.operationRef(string4);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string4);
      assertNotSame(string3, string0);
      assertSame(link2, link1);
      assertSame(link2, link3);
      assertNotSame(string4, string3);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string2);
      assertSame(link3, link1);
      assertSame(link3, link2);
      assertSame(link1, link3);
      assertSame(link1, link2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string4);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertEquals("X<,*~VGUM\\Q:E", link2.getOperationRef());
      assertNull(link2.getOperationId());
      assertNull(link2.getDescription());
      assertNull(link2.get$ref());
      assertEquals("X<,*~VGUM\\Q:E", link3.getOperationRef());
      assertNull(link3.get$ref());
      assertNull(link3.getOperationId());
      assertNull(link3.getDescription());
      assertNull(link1.get$ref());
      assertNull(link1.getOperationId());
      assertNull(link1.getDescription());
      assertEquals("X<,*~VGUM\\Q:E", link1.getOperationRef());
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(link3);
      
      Components components4 = components3.addLinks(string1, link3);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string4);
      assertNotSame(string3, string0);
      assertSame(link2, link1);
      assertSame(link2, link3);
      assertNotSame(string4, string3);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string2);
      assertSame(link3, link1);
      assertSame(link3, link2);
      assertSame(components4, components1);
      assertSame(components4, components3);
      assertSame(components4, components0);
      assertSame(components4, components2);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components0, components4);
      assertSame(components1, components0);
      assertSame(components1, components4);
      assertSame(components1, components2);
      assertSame(components1, components3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string4);
      assertSame(components2, components1);
      assertSame(components2, components4);
      assertSame(components2, components3);
      assertSame(components2, components0);
      assertSame(callback0, callback1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string4);
      assertSame(callback1, callback0);
      assertSame(components3, components4);
      assertSame(components3, components1);
      assertSame(components3, components2);
      assertSame(components3, components0);
      assertSame(link1, link3);
      assertSame(link1, link2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string4);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertEquals("X<,*~VGUM\\Q:E", link2.getOperationRef());
      assertNull(link2.getOperationId());
      assertNull(link2.getDescription());
      assertNull(link2.get$ref());
      assertEquals("X<,*~VGUM\\Q:E", link3.getOperationRef());
      assertNull(link3.get$ref());
      assertNull(link3.getOperationId());
      assertNull(link3.getDescription());
      assertFalse(callback0.isEmpty());
      assertEquals(1, callback0.size());
      assertEquals(1, callback1.size());
      assertFalse(callback1.isEmpty());
      assertNull(link1.get$ref());
      assertNull(link1.getOperationId());
      assertNull(link1.getDescription());
      assertEquals("X<,*~VGUM\\Q:E", link1.getOperationRef());
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(components4);
      
      Optional<io.swagger.oas.models.parameters.Parameter> optional3 = OperationParser.getParameter(parameter0, components4);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string4);
      assertNotSame(string3, string0);
      assertSame(link2, link1);
      assertSame(link2, link3);
      assertNotSame(string4, string3);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string2);
      assertSame(link3, link1);
      assertSame(link3, link2);
      assertSame(components4, components1);
      assertSame(components4, components3);
      assertSame(components4, components0);
      assertSame(components4, components2);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components0, components4);
      assertSame(components1, components0);
      assertSame(components1, components4);
      assertSame(components1, components2);
      assertSame(components1, components3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string4);
      assertSame(components2, components1);
      assertSame(components2, components4);
      assertSame(components2, components3);
      assertSame(components2, components0);
      assertSame(callback0, callback1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string4);
      assertSame(callback1, callback0);
      assertSame(components3, components4);
      assertSame(components3, components1);
      assertSame(components3, components2);
      assertSame(components3, components0);
      assertSame(link1, link3);
      assertSame(link1, link2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string4);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertEquals("X<,*~VGUM\\Q:E", link2.getOperationRef());
      assertNull(link2.getOperationId());
      assertNull(link2.getDescription());
      assertNull(link2.get$ref());
      assertEquals("X<,*~VGUM\\Q:E", link3.getOperationRef());
      assertNull(link3.get$ref());
      assertNull(link3.getOperationId());
      assertNull(link3.getDescription());
      assertFalse(callback0.isEmpty());
      assertEquals(1, callback0.size());
      assertEquals(1, callback1.size());
      assertFalse(callback1.isEmpty());
      assertNull(link1.get$ref());
      assertNull(link1.getOperationId());
      assertNull(link1.getDescription());
      assertEquals("X<,*~VGUM\\Q:E", link1.getOperationRef());
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(optional3);
  }

  @Test(timeout = 11000)
  public void test052()  throws Throwable  {
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(info0).description();
      doReturn((String) null).when(info0).termsOfService();
      doReturn((String) null).when(info0).title();
      doReturn((String) null).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional0 = OperationParser.getInfo(info0);
      assertNotNull(optional0);
      
      ApiResponse[] apiResponseArray0 = new ApiResponse[4];
      ApiResponse apiResponse0 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null).when(apiResponse0).content();
      doReturn((String) null, (String) null, (String) null, (String) null).when(apiResponse0).description();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      apiResponseArray0[3] = apiResponseArray0[2];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Produces produces1 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      assertNotNull(components0);
      
      String string0 = "";
      Example example0 = null;
      Components components1 = components0.addExamples(string0, example0);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertNotNull(components1);
      
      io.swagger.oas.models.links.Link link0 = new io.swagger.oas.models.links.Link();
      assertNull(link0.get$ref());
      assertNull(link0.getOperationRef());
      assertNull(link0.getOperationId());
      assertNull(link0.getDescription());
      assertNotNull(link0);
      
      Components components2 = components1.addLinks(string0, link0);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertNull(link0.get$ref());
      assertNull(link0.getOperationRef());
      assertNull(link0.getOperationId());
      assertNull(link0.getDescription());
      assertNotNull(components2);
      
      HashMap<String, Example> hashMap0 = new HashMap<String, Example>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Components components3 = components2.examples(hashMap0);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertSame(components3, components2);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(components2, components0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(link0.get$ref());
      assertNull(link0.getOperationRef());
      assertNull(link0.getOperationId());
      assertNull(link0.getDescription());
      assertNotNull(components3);
      
      RequestBody requestBody0 = new RequestBody();
      assertNull(requestBody0.get$ref());
      assertNull(requestBody0.getRequired());
      assertNull(requestBody0.getDescription());
      assertNotNull(requestBody0);
      
      Components components4 = components3.addRequestBodies(string0, requestBody0);
      assertSame(components3, components0);
      assertSame(components3, components4);
      assertSame(components3, components1);
      assertSame(components3, components2);
      assertSame(components4, components3);
      assertSame(components4, components2);
      assertSame(components4, components1);
      assertSame(components4, components0);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components0, components4);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertSame(components1, components4);
      assertSame(components1, components2);
      assertSame(components2, components4);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(components2, components0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(requestBody0.get$ref());
      assertNull(requestBody0.getRequired());
      assertNull(requestBody0.getDescription());
      assertNull(link0.get$ref());
      assertNull(link0.getOperationRef());
      assertNull(link0.getOperationId());
      assertNull(link0.getDescription());
      assertNotNull(components4);
      
      Optional<ApiResponses> optional1 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces1, components4);
      assertSame(components3, components0);
      assertSame(components3, components4);
      assertSame(components3, components1);
      assertSame(components3, components2);
      assertSame(components4, components3);
      assertSame(components4, components2);
      assertSame(components4, components1);
      assertSame(components4, components0);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components0, components4);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertSame(components1, components4);
      assertSame(components1, components2);
      assertSame(components2, components4);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(components2, components0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(requestBody0.get$ref());
      assertNull(requestBody0.getRequired());
      assertNull(requestBody0.getDescription());
      assertNull(link0.get$ref());
      assertNull(link0.getOperationRef());
      assertNull(link0.getOperationId());
      assertNull(link0.getDescription());
      assertEquals(4, apiResponseArray0.length);
      assertNotNull(optional1);
  }

  @Test(timeout = 11000)
  public void test053()  throws Throwable  {
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(license0).name();
      doReturn((String) null).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional0 = OperationParser.getLicense(license0);
      assertNotNull(optional0);
      
      Parameter[] parameterArray0 = null;
      Components components0 = new Components();
      assertNotNull(components0);
      
      HashMap<String, io.swagger.oas.models.parameters.Parameter> hashMap0 = new HashMap<String, io.swagger.oas.models.parameters.Parameter>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Components components1 = components0.parameters(hashMap0);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(components1);
      
      Map<String, io.swagger.oas.models.responses.ApiResponse> map0 = null;
      Components components2 = components1.responses(map0);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(components2);
      
      Map<String, Example> map1 = null;
      Components components3 = components2.examples(map1);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components1, components3);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertSame(components3, components2);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(components3);
      
      String string0 = "NHRb7le";
      RequestBody requestBody0 = new RequestBody();
      assertNull(requestBody0.get$ref());
      assertNull(requestBody0.getRequired());
      assertNull(requestBody0.getDescription());
      assertNotNull(requestBody0);
      
      boolean boolean0 = true;
      Boolean boolean1 = Boolean.valueOf(boolean0);
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      RequestBody requestBody1 = requestBody0.required(boolean1);
      assertSame(requestBody0, requestBody1);
      assertSame(requestBody1, requestBody0);
      assertNull(requestBody0.get$ref());
      assertTrue(requestBody0.getRequired());
      assertNull(requestBody0.getDescription());
      assertNull(requestBody1.getDescription());
      assertTrue(requestBody1.getRequired());
      assertNull(requestBody1.get$ref());
      assertNotNull(requestBody1);
      
      Components components4 = components3.addRequestBodies(string0, requestBody1);
      assertSame(components0, components3);
      assertSame(components0, components4);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertSame(components1, components4);
      assertSame(components1, components2);
      assertSame(components1, components3);
      assertSame(components2, components4);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertSame(components3, components4);
      assertSame(components3, components2);
      assertSame(requestBody0, requestBody1);
      assertSame(requestBody1, requestBody0);
      assertSame(components4, components2);
      assertSame(components4, components1);
      assertSame(components4, components0);
      assertSame(components4, components3);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(requestBody0.get$ref());
      assertTrue(requestBody0.getRequired());
      assertNull(requestBody0.getDescription());
      assertNull(requestBody1.getDescription());
      assertTrue(requestBody1.getRequired());
      assertNull(requestBody1.get$ref());
      assertNotNull(components4);
      
      Optional<List<io.swagger.oas.models.parameters.Parameter>> optional1 = OperationParser.getParametersList(parameterArray0, components4);
      assertSame(components0, components3);
      assertSame(components0, components4);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertSame(components1, components4);
      assertSame(components1, components2);
      assertSame(components1, components3);
      assertSame(components2, components4);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertSame(components3, components4);
      assertSame(components3, components2);
      assertSame(requestBody0, requestBody1);
      assertSame(requestBody1, requestBody0);
      assertSame(components4, components2);
      assertSame(components4, components1);
      assertSame(components4, components0);
      assertSame(components4, components3);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(requestBody0.get$ref());
      assertTrue(requestBody0.getRequired());
      assertNull(requestBody0.getDescription());
      assertNull(requestBody1.getDescription());
      assertTrue(requestBody1.getRequired());
      assertNull(requestBody1.get$ref());
      assertNotNull(optional1);
  }

  @Test(timeout = 11000)
  public void test054()  throws Throwable  {
      Link[] linkArray0 = null;
      Map<String, io.swagger.oas.models.links.Link> map0 = OperationParser.getLinks(linkArray0);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      
      Parameter[] parameterArray0 = new Parameter[3];
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(parameter0).allowEmptyValue();
      doReturn(false, false, false).when(parameter0).allowReserved();
      doReturn((Object) null, (Object) null, (Object) null).when(parameter0).content();
      doReturn(false, false, false).when(parameter0).deprecated();
      doReturn((String) null, (String) null, (String) null).when(parameter0).description();
      doReturn((Explode) null, (Explode) null, (Explode) null, (Explode) null, (Explode) null).when(parameter0).explode();
      doReturn((String) null, (String) null, (String) null).when(parameter0).in();
      doReturn((String) null, (String) null, (String) null).when(parameter0).name();
      doReturn(false, false, false).when(parameter0).required();
      doReturn((Schema) null, (Schema) null, (Schema) null, (Schema) null, (Schema) null).when(parameter0).schema();
      doReturn((String) null, (String) null, (String) null).when(parameter0).style();
      parameterArray0[0] = parameter0;
      parameterArray0[1] = parameterArray0[0];
      parameterArray0[2] = parameterArray0[1];
      Components components0 = new Components();
      assertNotNull(components0);
      
      String string0 = "";
      io.swagger.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.oas.models.responses.ApiResponse();
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      assertNotNull(apiResponse0);
      
      Components components1 = components0.addResponses(string0, apiResponse0);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      assertNotNull(components1);
      
      String string1 = "k]?W";
      SecurityScheme securityScheme0 = null;
      Components components2 = components1.addSecuritySchemes(string1, securityScheme0);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertNotSame(string0, string1);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertNotSame(string1, string0);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(components2);
      
      HashMap<String, SecurityScheme> hashMap0 = new HashMap<String, SecurityScheme>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Components components3 = components2.securitySchemes(hashMap0);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertNotSame(string0, string1);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertNotSame(string1, string0);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertSame(components2, components3);
      assertSame(components3, components1);
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(components3);
      
      Map<String, Example> map1 = null;
      Components components4 = components3.examples(map1);
      assertSame(components4, components1);
      assertSame(components4, components0);
      assertSame(components4, components2);
      assertSame(components4, components3);
      assertSame(components0, components3);
      assertSame(components0, components4);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertNotSame(string0, string1);
      assertSame(components1, components2);
      assertSame(components1, components4);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertNotSame(string1, string0);
      assertSame(components2, components4);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertSame(components2, components3);
      assertSame(components3, components1);
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertSame(components3, components4);
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(components4);
      
      Optional<List<io.swagger.oas.models.parameters.Parameter>> optional0 = OperationParser.getParametersList(parameterArray0, components4);
      assertSame(components4, components1);
      assertSame(components4, components0);
      assertSame(components4, components2);
      assertSame(components4, components3);
      assertSame(components0, components3);
      assertSame(components0, components4);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertNotSame(string0, string1);
      assertSame(components1, components2);
      assertSame(components1, components4);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertNotSame(string1, string0);
      assertSame(components2, components4);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertSame(components2, components3);
      assertSame(components3, components1);
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertSame(components3, components4);
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(3, parameterArray0.length);
      assertNotNull(optional0);
      
      Content[] contentArray0 = new Content[4];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((ExampleObject[]) null).when(content0).examples();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      contentArray0[3] = contentArray0[2];
      // Undeclared exception!
      try { 
        OperationParser.getContents(contentArray0, components3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test055()  throws Throwable  {
      String[] stringArray0 = null;
      Optional<Set<Tag>> optional0 = OperationParser.getTags(stringArray0);
      assertNotNull(optional0);
      
      io.swagger.oas.annotations.parameters.RequestBody requestBody0 = null;
      Components components0 = new Components();
      assertNotNull(components0);
      
      String string0 = "B:jt)<9a*V`A &";
      Header header0 = new Header();
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getExplode());
      assertNull(header0.getRequired());
      assertNull(header0.getDescription());
      assertNull(header0.getDeprecated());
      assertNull(header0.get$ref());
      assertNull(header0.getExample());
      assertNull(header0.getStyle());
      assertNotNull(header0);
      
      Components components1 = components0.addHeaders(string0, header0);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getExplode());
      assertNull(header0.getRequired());
      assertNull(header0.getDescription());
      assertNull(header0.getDeprecated());
      assertNull(header0.get$ref());
      assertNull(header0.getExample());
      assertNull(header0.getStyle());
      assertNotNull(components1);
      
      String string1 = ") not compatible with managed type (";
      io.swagger.oas.models.parameters.Parameter parameter0 = new io.swagger.oas.models.parameters.Parameter();
      assertNull(parameter0.get$ref());
      assertNull(parameter0.getExample());
      assertNull(parameter0.getIn());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getName());
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getRequired());
      assertNull(parameter0.getExplode());
      assertNull(parameter0.getAllowReserved());
      assertNotNull(parameter0);
      
      Components components2 = components1.addParameters(string1, parameter0);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertNotSame(string0, string1);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertNotSame(string1, string0);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getExplode());
      assertNull(header0.getRequired());
      assertNull(header0.getDescription());
      assertNull(header0.getDeprecated());
      assertNull(header0.get$ref());
      assertNull(header0.getExample());
      assertNull(header0.getStyle());
      assertNull(parameter0.get$ref());
      assertNull(parameter0.getExample());
      assertNull(parameter0.getIn());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getName());
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getRequired());
      assertNull(parameter0.getExplode());
      assertNull(parameter0.getAllowReserved());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(components2);
      
      io.swagger.oas.models.media.Schema<io.swagger.oas.models.servers.Server> schema0 = new io.swagger.oas.models.media.Schema<io.swagger.oas.models.servers.Server>();
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getType());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.get$ref());
      assertNull(schema0.getTitle());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getPattern());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getFormat());
      assertNull(schema0.getDescription());
      assertNull(schema0.getNullable());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getName());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getMinItems());
      assertNotNull(schema0);
      
      Components components3 = components2.addSchemas(string1, schema0);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertNotSame(string0, string1);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertNotSame(string1, string0);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(components2, components0);
      assertSame(components3, components2);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getExplode());
      assertNull(header0.getRequired());
      assertNull(header0.getDescription());
      assertNull(header0.getDeprecated());
      assertNull(header0.get$ref());
      assertNull(header0.getExample());
      assertNull(header0.getStyle());
      assertNull(parameter0.get$ref());
      assertNull(parameter0.getExample());
      assertNull(parameter0.getIn());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getName());
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getRequired());
      assertNull(parameter0.getExplode());
      assertNull(parameter0.getAllowReserved());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getType());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.get$ref());
      assertNull(schema0.getTitle());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getPattern());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getFormat());
      assertNull(schema0.getDescription());
      assertNull(schema0.getNullable());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getName());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getMinItems());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(components3);
      
      Operation operation0 = new Operation();
      assertNull(operation0.getDeprecated());
      assertNull(operation0.getSummary());
      assertNull(operation0.getDescription());
      assertNull(operation0.getOperationId());
      assertNotNull(operation0);
      
      Operation operation1 = operation0.addTagsItem(string0);
      assertNotSame(string0, string1);
      assertSame(operation0, operation1);
      assertSame(operation1, operation0);
      assertNull(operation0.getDeprecated());
      assertNull(operation0.getSummary());
      assertNull(operation0.getDescription());
      assertNull(operation0.getOperationId());
      assertNull(operation1.getDeprecated());
      assertNull(operation1.getOperationId());
      assertNull(operation1.getSummary());
      assertNull(operation1.getDescription());
      assertFalse(string0.equals((Object)string1));
      assertNotNull(operation1);
      
      io.swagger.oas.models.info.Contact contact0 = new io.swagger.oas.models.info.Contact();
      assertNull(contact0.getName());
      assertNull(contact0.getEmail());
      assertNull(contact0.getUrl());
      assertNotNull(contact0);
      
      io.swagger.oas.models.info.Contact contact1 = contact0.name(string0);
      assertNotSame(string0, string1);
      assertSame(contact0, contact1);
      assertSame(contact1, contact0);
      assertEquals("B:jt)<9a*V`A &", contact0.getName());
      assertNull(contact0.getEmail());
      assertNull(contact0.getUrl());
      assertNull(contact1.getEmail());
      assertEquals("B:jt)<9a*V`A &", contact1.getName());
      assertNull(contact1.getUrl());
      assertFalse(string0.equals((Object)string1));
      assertNotNull(contact1);
      
      io.swagger.oas.models.info.Contact contact2 = contact1.email(string1);
      assertSame(contact2, contact0);
      assertSame(contact2, contact1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(contact0, contact1);
      assertSame(contact0, contact2);
      assertSame(contact1, contact2);
      assertSame(contact1, contact0);
      assertEquals(") not compatible with managed type (", contact2.getEmail());
      assertEquals("B:jt)<9a*V`A &", contact2.getName());
      assertNull(contact2.getUrl());
      assertEquals(") not compatible with managed type (", contact0.getEmail());
      assertEquals("B:jt)<9a*V`A &", contact0.getName());
      assertNull(contact0.getUrl());
      assertEquals(") not compatible with managed type (", contact1.getEmail());
      assertEquals("B:jt)<9a*V`A &", contact1.getName());
      assertNull(contact1.getUrl());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(contact2);
      
      Map<String, Object> map0 = contact2.getExtensions();
      assertSame(contact2, contact0);
      assertSame(contact2, contact1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(contact0, contact1);
      assertSame(contact0, contact2);
      assertSame(contact1, contact2);
      assertSame(contact1, contact0);
      assertEquals(") not compatible with managed type (", contact2.getEmail());
      assertEquals("B:jt)<9a*V`A &", contact2.getName());
      assertNull(contact2.getUrl());
      assertEquals(") not compatible with managed type (", contact0.getEmail());
      assertEquals("B:jt)<9a*V`A &", contact0.getName());
      assertNull(contact0.getUrl());
      assertEquals(") not compatible with managed type (", contact1.getEmail());
      assertEquals("B:jt)<9a*V`A &", contact1.getName());
      assertNull(contact1.getUrl());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNull(map0);
      
      operation1.setExtensions(map0);
      assertSame(contact2, contact0);
      assertSame(contact2, contact1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(operation0, operation1);
      assertSame(operation1, operation0);
      assertSame(contact0, contact1);
      assertSame(contact0, contact2);
      assertSame(contact1, contact2);
      assertSame(contact1, contact0);
      assertEquals(") not compatible with managed type (", contact2.getEmail());
      assertEquals("B:jt)<9a*V`A &", contact2.getName());
      assertNull(contact2.getUrl());
      assertNull(operation0.getDeprecated());
      assertNull(operation0.getSummary());
      assertNull(operation0.getDescription());
      assertNull(operation0.getOperationId());
      assertNull(operation1.getDeprecated());
      assertNull(operation1.getOperationId());
      assertNull(operation1.getSummary());
      assertNull(operation1.getDescription());
      assertEquals(") not compatible with managed type (", contact0.getEmail());
      assertEquals("B:jt)<9a*V`A &", contact0.getName());
      assertNull(contact0.getUrl());
      assertEquals(") not compatible with managed type (", contact1.getEmail());
      assertEquals("B:jt)<9a*V`A &", contact1.getName());
      assertNull(contact1.getUrl());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      Map<String, Callback> map1 = operation1.getCallbacks();
      assertNotSame(string0, string1);
      assertSame(operation0, operation1);
      assertSame(operation1, operation0);
      assertNull(operation0.getDeprecated());
      assertNull(operation0.getSummary());
      assertNull(operation0.getDescription());
      assertNull(operation0.getOperationId());
      assertNull(operation1.getDeprecated());
      assertNull(operation1.getOperationId());
      assertNull(operation1.getSummary());
      assertNull(operation1.getDescription());
      assertFalse(string0.equals((Object)string1));
      assertNull(map1);
      
      Components components4 = components3.callbacks(map1);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components0, components4);
      assertSame(components0, components2);
      assertSame(components4, components1);
      assertSame(components4, components3);
      assertSame(components4, components2);
      assertSame(components4, components0);
      assertNotSame(string0, string1);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertSame(components1, components4);
      assertNotSame(string1, string0);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(components2, components4);
      assertSame(components2, components0);
      assertSame(components3, components4);
      assertSame(components3, components2);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertSame(operation0, operation1);
      assertSame(operation1, operation0);
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getExplode());
      assertNull(header0.getRequired());
      assertNull(header0.getDescription());
      assertNull(header0.getDeprecated());
      assertNull(header0.get$ref());
      assertNull(header0.getExample());
      assertNull(header0.getStyle());
      assertNull(parameter0.get$ref());
      assertNull(parameter0.getExample());
      assertNull(parameter0.getIn());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getName());
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getRequired());
      assertNull(parameter0.getExplode());
      assertNull(parameter0.getAllowReserved());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getType());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.get$ref());
      assertNull(schema0.getTitle());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getPattern());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getFormat());
      assertNull(schema0.getDescription());
      assertNull(schema0.getNullable());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getName());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getMinItems());
      assertNull(operation0.getDeprecated());
      assertNull(operation0.getSummary());
      assertNull(operation0.getDescription());
      assertNull(operation0.getOperationId());
      assertNull(operation1.getDeprecated());
      assertNull(operation1.getOperationId());
      assertNull(operation1.getSummary());
      assertNull(operation1.getDescription());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(components4);
      
      Optional<RequestBody> optional1 = OperationParser.getRequestBody(requestBody0, components4);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components0, components4);
      assertSame(components0, components2);
      assertNotSame(string0, string1);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertSame(components1, components4);
      assertNotSame(string1, string0);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(components2, components4);
      assertSame(components2, components0);
      assertSame(components3, components4);
      assertSame(components3, components2);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertSame(operation0, operation1);
      assertSame(operation1, operation0);
      assertSame(components4, components1);
      assertSame(components4, components3);
      assertSame(components4, components2);
      assertSame(components4, components0);
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getExplode());
      assertNull(header0.getRequired());
      assertNull(header0.getDescription());
      assertNull(header0.getDeprecated());
      assertNull(header0.get$ref());
      assertNull(header0.getExample());
      assertNull(header0.getStyle());
      assertNull(parameter0.get$ref());
      assertNull(parameter0.getExample());
      assertNull(parameter0.getIn());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getName());
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getRequired());
      assertNull(parameter0.getExplode());
      assertNull(parameter0.getAllowReserved());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getType());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.get$ref());
      assertNull(schema0.getTitle());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getPattern());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getFormat());
      assertNull(schema0.getDescription());
      assertNull(schema0.getNullable());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getName());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getMinItems());
      assertNull(operation0.getDeprecated());
      assertNull(operation0.getSummary());
      assertNull(operation0.getDescription());
      assertNull(operation0.getOperationId());
      assertNull(operation1.getDeprecated());
      assertNull(operation1.getOperationId());
      assertNull(operation1.getSummary());
      assertNull(operation1.getDescription());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(optional1);
      
      Optional<RequestBody> optional2 = OperationParser.getRequestBody(requestBody0, components0);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components0, components4);
      assertSame(components0, components2);
      assertSame(optional2, optional1);
      assertNotNull(optional2);
      
      String string2 = "";
      String string3 = "r2\\E_7m7[uW9";
      Contact contact3 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn(string2).when(contact3).email();
      doReturn(string2).when(contact3).name();
      doReturn(string3, (String) null).when(contact3).url();
      Optional<io.swagger.oas.models.info.Contact> optional3 = OperationParser.getContact(contact3);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(optional3);
      
      boolean boolean0 = true;
      String string4 = "K";
      String string5 = "java.lang";
      boolean boolean1 = false;
      boolean boolean2 = false;
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      int int0 = 681;
      int int1 = (-1);
      boolean boolean3 = false;
      String string6 = "rzB(";
      String string7 = null;
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(stringArray0).when(schema1).allowableValues();
      doReturn(string0, (String) null).when(schema1).defaultValue();
      doReturn(boolean0, false).when(schema1).deprecated();
      doReturn(string4, (String) null).when(schema1).description();
      doReturn(string2, string5, (String) null).when(schema1).example();
      doReturn(boolean1).when(schema1).exclusiveMaximum();
      doReturn(boolean2).when(schema1).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema1).externalDocs();
      doReturn(string4, (String) null).when(schema1).format();
      doReturn(int0).when(schema1).maxLength();
      doReturn(0).when(schema1).maxProperties();
      doReturn(int1).when(schema1).minProperties();
      doReturn(string1, (String) null).when(schema1).pattern();
      doReturn(boolean3).when(schema1).readOnly();
      doReturn(string6, (String) null).when(schema1).ref();
      doReturn(string7).when(schema1).type();
      Optional<io.swagger.oas.models.media.Schema> optional4 = (Optional<io.swagger.oas.models.media.Schema>)OperationParser.getSchemaFromAnnotation(schema1);
      assertNotSame(string6, string4);
      assertNotSame(string6, string1);
      assertNotSame(string6, string2);
      assertNotSame(string6, string3);
      assertNotSame(string6, string5);
      assertNotSame(string6, string0);
      assertNotSame(string0, string5);
      assertNotSame(string0, string2);
      assertNotSame(string0, string6);
      assertNotSame(string0, string4);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string6);
      assertNotSame(string2, string5);
      assertNotSame(string2, string4);
      assertNotSame(string2, string1);
      assertNotSame(string1, string4);
      assertNotSame(string1, string6);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string5);
      assertNotSame(string1, string3);
      assertNotSame(string4, string6);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string3);
      assertNotSame(string4, string2);
      assertNotSame(string4, string5);
      assertNotSame(string5, string4);
      assertNotSame(string5, string3);
      assertNotSame(string5, string1);
      assertNotSame(string5, string2);
      assertNotSame(string5, string0);
      assertNotSame(string5, string6);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(boolean3 == boolean0);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string1));
      assertFalse(boolean0 == boolean2);
      assertFalse(boolean0 == boolean3);
      assertFalse(boolean0 == boolean1);
      assertFalse(string4.equals((Object)string6));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string6));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean2 == boolean0);
      assertNotNull(optional4);
      
      String string8 = "";
      ExternalDocumentation externalDocumentation1 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(externalDocumentation1).description();
      doReturn(string8).when(externalDocumentation1).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional5 = OperationParser.getExternalDocumentation(externalDocumentation1);
      assertNotSame(string0, string5);
      assertNotSame(string0, string8);
      assertNotSame(string0, string2);
      assertNotSame(string0, string6);
      assertNotSame(string0, string4);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string8, string5);
      assertNotSame(string8, string0);
      assertNotSame(string8, string3);
      assertNotSame(string8, string6);
      assertNotSame(string8, string1);
      assertNotSame(string8, string4);
      assertSame(string8, string2);
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string8));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      assertNotNull(optional5);
      
      Parameter[] parameterArray0 = new Parameter[7];
      boolean boolean4 = true;
      boolean boolean5 = true;
      boolean boolean6 = false;
      boolean boolean7 = false;
      boolean boolean8 = true;
      Content[] contentArray0 = null;
      boolean boolean9 = true;
      boolean boolean10 = false;
      boolean boolean11 = false;
      boolean boolean12 = false;
      String string9 = "?z%y+";
      String string10 = "3yT9B=&On";
      Explode explode0 = Explode.FALSE;
      Explode explode1 = Explode.TRUE;
      Explode explode2 = Explode.TRUE;
      String string11 = null;
      String string12 = "";
      Schema schema2 = mock(Schema.class, new ViolatedAssumptionAnswer());
      Schema schema3 = mock(Schema.class, new ViolatedAssumptionAnswer());
      String string13 = "io.swagger.jaxrs2.OperationParser";
      String string14 = "default";
      String string15 = "no description";
      Parameter parameter1 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean4, boolean1).when(parameter1).allowEmptyValue();
      doReturn(boolean6).when(parameter1).allowReserved();
      doReturn(boolean9, boolean10).when(parameter1).deprecated();
      doReturn(string9, string10).when(parameter1).description();
      doReturn(string10, string9).when(parameter1).in();
      doReturn(string7).when(parameter1).name();
      doReturn(boolean5, boolean5).when(parameter1).required();
      doReturn(string13, string0).when(parameter1).style();
      parameterArray0[0] = parameter1;
      parameterArray0[1] = parameterArray0[0];
      parameterArray0[2] = parameterArray0[1];
      parameterArray0[3] = parameterArray0[2];
      parameterArray0[4] = parameterArray0[3];
      parameterArray0[5] = parameterArray0[4];
      parameterArray0[6] = parameterArray0[5];
      // Undeclared exception!
      try { 
        OperationParser.getParametersList(parameterArray0, components1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant io.swagger.oas.models.parameters.Parameter.StyleEnum.B:JT)<9A*V`A &
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 11000)
  public void test056()  throws Throwable  {
      LinkParameter[] linkParameterArray0 = null;
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameterArray0);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String[]) null).when(schema0).allowableValues();
      doReturn((String) null).when(schema0).defaultValue();
      doReturn(false).when(schema0).deprecated();
      doReturn((String) null).when(schema0).description();
      doReturn((String) null, (String) null).when(schema0).example();
      doReturn(false).when(schema0).exclusiveMaximum();
      doReturn(false).when(schema0).exclusiveMinimum();
      doReturn((ExternalDocumentation) null).when(schema0).externalDocs();
      doReturn((String) null).when(schema0).format();
      doReturn(0).when(schema0).maxLength();
      doReturn(0).when(schema0).minProperties();
      doReturn((String) null).when(schema0).pattern();
      doReturn(false).when(schema0).readOnly();
      doReturn((String) null).when(schema0).ref();
      doReturn((String) null).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional0 = (Optional<io.swagger.oas.models.media.Schema>)OperationParser.getSchemaFromAnnotation(schema0);
      assertNotNull(optional0);
      
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(license0).name();
      doReturn((String) null).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional1 = OperationParser.getLicense(license0);
      assertNotNull(optional1);
      
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(info0).description();
      doReturn((String) null).when(info0).termsOfService();
      doReturn((String) null).when(info0).title();
      doReturn((String) null).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional2 = OperationParser.getInfo(info0);
      assertNotNull(optional2);
      
      Server[] serverArray0 = new Server[2];
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(server0).description();
      doReturn((String) null, (String) null).when(server0).url();
      serverArray0[0] = server0;
      serverArray0[1] = serverArray0[0];
      Optional<List<io.swagger.oas.models.servers.Server>> optional3 = OperationParser.getServers(serverArray0);
      assertEquals(2, serverArray0.length);
      assertNotNull(optional3);
  }

  @Test(timeout = 11000)
  public void test057()  throws Throwable  {
      Contact contact0 = null;
      Optional<io.swagger.oas.models.info.Contact> optional0 = OperationParser.getContact(contact0);
      assertNotNull(optional0);
      
      Link[] linkArray0 = new Link[3];
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(link0).description();
      doReturn((String) null, (String) null, (String) null).when(link0).operationId();
      doReturn((String) null, (String) null, (String) null).when(link0).operationRef();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      Map<String, io.swagger.oas.models.links.Link> map0 = OperationParser.getLinks(linkArray0);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals(3, linkArray0.length);
      assertNotNull(map0);
      
      Server[] serverArray0 = new Server[2];
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(server0).description();
      doReturn((String) null, (String) null).when(server0).url();
      serverArray0[0] = server0;
      serverArray0[1] = serverArray0[0];
      Optional<List<io.swagger.oas.models.servers.Server>> optional1 = OperationParser.getServers(serverArray0);
      assertEquals(2, serverArray0.length);
      assertNotNull(optional1);
      
      Content[] contentArray0 = new Content[3];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((ExampleObject[]) null).when(content0).examples();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      Components components0 = null;
      // Undeclared exception!
      try { 
        OperationParser.getContents(contentArray0, components0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test058()  throws Throwable  {
      Schema schema0 = null;
      Optional<io.swagger.oas.models.media.Schema> optional0 = (Optional<io.swagger.oas.models.media.Schema>)OperationParser.getSchemaFromAnnotation(schema0);
      assertNotNull(optional0);
      
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(info0).description();
      doReturn((String) null).when(info0).termsOfService();
      doReturn((String) null).when(info0).title();
      doReturn((String) null).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional1 = OperationParser.getInfo(info0);
      assertNotNull(optional1);
      
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional2 = OperationParser.getExternalDocumentation(externalDocumentation0);
      assertNotNull(optional2);
      
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(server0).description();
      doReturn((String) null).when(server0).url();
      Optional<io.swagger.oas.models.servers.Server> optional3 = OperationParser.getServer(server0);
      assertNotNull(optional3);
      
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(link0).description();
      doReturn((String) null).when(link0).operationId();
      doReturn((String) null).when(link0).operationRef();
      Optional<io.swagger.oas.models.links.Link> optional4 = OperationParser.getLink(link0);
      assertNotNull(optional4);
      
      io.swagger.oas.annotations.parameters.RequestBody requestBody0 = mock(io.swagger.oas.annotations.parameters.RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(requestBody0).description();
      doReturn(false).when(requestBody0).required();
      Components components0 = new Components();
      assertNotNull(components0);
      
      Map<String, Header> map0 = components0.getHeaders();
      assertNull(map0);
      
      Components components1 = components0.headers(map0);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertNotNull(components1);
      
      String string0 = "v";
      io.swagger.oas.models.responses.ApiResponse apiResponse0 = null;
      Components components2 = components1.addResponses(string0, apiResponse0);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertNotNull(components2);
      
      HashMap<String, Callback> hashMap0 = new HashMap<String, Callback>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Components components3 = components2.callbacks(hashMap0);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertSame(components2, components3);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertSame(components3, components2);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(components3);
      
      Map<String, SecurityScheme> map1 = components0.getSecuritySchemes();
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertNull(map1);
      
      Components components4 = components3.securitySchemes(map1);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertSame(components2, components4);
      assertSame(components2, components3);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertSame(components3, components2);
      assertSame(components3, components4);
      assertSame(components4, components2);
      assertSame(components4, components1);
      assertSame(components4, components0);
      assertSame(components4, components3);
      assertSame(components0, components4);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertSame(components1, components3);
      assertSame(components1, components4);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(components4);
      
      HashMap<String, io.swagger.oas.models.responses.ApiResponse> hashMap1 = new HashMap<String, io.swagger.oas.models.responses.ApiResponse>();
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotNull(hashMap1);
      
      components4.setResponses(hashMap1);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertSame(components2, components4);
      assertSame(components2, components3);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertSame(components3, components2);
      assertSame(components3, components4);
      assertSame(components4, components2);
      assertSame(components4, components1);
      assertSame(components4, components0);
      assertSame(components4, components3);
      assertSame(components0, components4);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertSame(components1, components3);
      assertSame(components1, components4);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      
      Optional<RequestBody> optional5 = OperationParser.getRequestBody(requestBody0, components4);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertSame(components2, components4);
      assertSame(components2, components3);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertSame(components3, components2);
      assertSame(components3, components4);
      assertSame(components4, components2);
      assertSame(components4, components1);
      assertSame(components4, components0);
      assertSame(components4, components3);
      assertSame(components0, components4);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertSame(components1, components3);
      assertSame(components1, components4);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(optional5);
  }

  @Test(timeout = 11000)
  public void test059()  throws Throwable  {
      String string0 = "OX-dH]s :1?p";
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(license0).name();
      doReturn(string0, (String) null).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional0 = OperationParser.getLicense(license0);
      assertNotNull(optional0);
      
      Content[] contentArray0 = new Content[5];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      contentArray0[3] = contentArray0[2];
      contentArray0[4] = contentArray0[3];
      String string1 = ")q";
      ApiResponse apiResponse0 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      assertNotNull(components0);
  }

  @Test(timeout = 11000)
  public void test060()  throws Throwable  {
      Parameter[] parameterArray0 = new Parameter[1];
      boolean boolean0 = false;
      boolean boolean1 = true;
      Content[] contentArray0 = new Content[0];
      boolean boolean2 = true;
      String string0 = "gFI";
      Explode explode0 = Explode.DEFAULT;
      Explode explode1 = Explode.TRUE;
      String string1 = null;
      boolean boolean3 = true;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      String string2 = "";
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0).when(parameter0).allowEmptyValue();
      doReturn(boolean1, false).when(parameter0).allowReserved();
      doReturn(boolean2, false).when(parameter0).deprecated();
      doReturn(string0, (String) null).when(parameter0).description();
      doReturn(string1).when(parameter0).in();
      doReturn(string1).when(parameter0).name();
      doReturn(boolean3, false).when(parameter0).required();
      doReturn(string2, (String) null).when(parameter0).style();
      parameterArray0[0] = parameter0;
      Components components0 = new Components();
      assertNotNull(components0);
      
      io.swagger.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.oas.models.responses.ApiResponse();
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      assertNotNull(apiResponse0);
      
      Map<String, io.swagger.oas.models.links.Link> map0 = apiResponse0.getLinks();
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      assertNull(map0);
      
      Components components1 = components0.links(map0);
      assertSame(components1, components0);
      assertSame(components0, components1);
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      assertNotNull(components1);
      
      String string3 = "";
      io.swagger.oas.models.media.Schema<ApiResponses> schema1 = new io.swagger.oas.models.media.Schema<ApiResponses>();
      assertNull(schema1.getMaxItems());
      assertNull(schema1.getExclusiveMinimum());
      assertNull(schema1.getDeprecated());
      assertNull(schema1.getUniqueItems());
      assertNull(schema1.getReadOnly());
      assertNull(schema1.getNullable());
      assertNull(schema1.getName());
      assertNull(schema1.getFormat());
      assertNull(schema1.getPattern());
      assertNull(schema1.getMinItems());
      assertNull(schema1.getMaxProperties());
      assertNull(schema1.getMinProperties());
      assertNull(schema1.getWriteOnly());
      assertNull(schema1.getMaxLength());
      assertNull(schema1.getMinLength());
      assertNull(schema1.getDescription());
      assertNull(schema1.get$ref());
      assertNull(schema1.getTitle());
      assertNull(schema1.getType());
      assertNull(schema1.getExclusiveMaximum());
      assertNotNull(schema1);
      
      Components components2 = components1.addSchemas(string3, schema1);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertNull(schema1.getMaxItems());
      assertNull(schema1.getExclusiveMinimum());
      assertNull(schema1.getDeprecated());
      assertNull(schema1.getUniqueItems());
      assertNull(schema1.getReadOnly());
      assertNull(schema1.getNullable());
      assertNull(schema1.getName());
      assertNull(schema1.getFormat());
      assertNull(schema1.getPattern());
      assertNull(schema1.getMinItems());
      assertNull(schema1.getMaxProperties());
      assertNull(schema1.getMinProperties());
      assertNull(schema1.getWriteOnly());
      assertNull(schema1.getMaxLength());
      assertNull(schema1.getMinLength());
      assertNull(schema1.getDescription());
      assertNull(schema1.get$ref());
      assertNull(schema1.getTitle());
      assertNull(schema1.getType());
      assertNull(schema1.getExclusiveMaximum());
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(components2);
      
      Map<String, io.swagger.oas.models.responses.ApiResponse> map1 = components2.getResponses();
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertNull(schema1.getMaxItems());
      assertNull(schema1.getExclusiveMinimum());
      assertNull(schema1.getDeprecated());
      assertNull(schema1.getUniqueItems());
      assertNull(schema1.getReadOnly());
      assertNull(schema1.getNullable());
      assertNull(schema1.getName());
      assertNull(schema1.getFormat());
      assertNull(schema1.getPattern());
      assertNull(schema1.getMinItems());
      assertNull(schema1.getMaxProperties());
      assertNull(schema1.getMinProperties());
      assertNull(schema1.getWriteOnly());
      assertNull(schema1.getMaxLength());
      assertNull(schema1.getMinLength());
      assertNull(schema1.getDescription());
      assertNull(schema1.get$ref());
      assertNull(schema1.getTitle());
      assertNull(schema1.getType());
      assertNull(schema1.getExclusiveMaximum());
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNull(map1);
      
      Components components3 = components2.responses(map1);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components1, components3);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertSame(components2, components0);
      assertSame(components2, components3);
      assertSame(components2, components1);
      assertSame(components3, components2);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertNull(schema1.getMaxItems());
      assertNull(schema1.getExclusiveMinimum());
      assertNull(schema1.getDeprecated());
      assertNull(schema1.getUniqueItems());
      assertNull(schema1.getReadOnly());
      assertNull(schema1.getNullable());
      assertNull(schema1.getName());
      assertNull(schema1.getFormat());
      assertNull(schema1.getPattern());
      assertNull(schema1.getMinItems());
      assertNull(schema1.getMaxProperties());
      assertNull(schema1.getMinProperties());
      assertNull(schema1.getWriteOnly());
      assertNull(schema1.getMaxLength());
      assertNull(schema1.getMinLength());
      assertNull(schema1.getDescription());
      assertNull(schema1.get$ref());
      assertNull(schema1.getTitle());
      assertNull(schema1.getType());
      assertNull(schema1.getExclusiveMaximum());
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(components3);
      
      Components components4 = components3.addResponses(string3, apiResponse0);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components1, components3);
      assertSame(components1, components4);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertSame(components2, components0);
      assertSame(components2, components3);
      assertSame(components2, components1);
      assertSame(components2, components4);
      assertSame(components3, components2);
      assertSame(components3, components0);
      assertSame(components3, components4);
      assertSame(components3, components1);
      assertSame(components4, components3);
      assertSame(components4, components2);
      assertSame(components4, components1);
      assertSame(components4, components0);
      assertSame(components0, components4);
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertNull(schema1.getMaxItems());
      assertNull(schema1.getExclusiveMinimum());
      assertNull(schema1.getDeprecated());
      assertNull(schema1.getUniqueItems());
      assertNull(schema1.getReadOnly());
      assertNull(schema1.getNullable());
      assertNull(schema1.getName());
      assertNull(schema1.getFormat());
      assertNull(schema1.getPattern());
      assertNull(schema1.getMinItems());
      assertNull(schema1.getMaxProperties());
      assertNull(schema1.getMinProperties());
      assertNull(schema1.getWriteOnly());
      assertNull(schema1.getMaxLength());
      assertNull(schema1.getMinLength());
      assertNull(schema1.getDescription());
      assertNull(schema1.get$ref());
      assertNull(schema1.getTitle());
      assertNull(schema1.getType());
      assertNull(schema1.getExclusiveMaximum());
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(components4);
      
      // Undeclared exception!
      try { 
        OperationParser.getParametersList(parameterArray0, components4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.util.ParameterProcessor", e);
      }
  }

  @Test(timeout = 11000)
  public void test061()  throws Throwable  {
      String[] stringArray0 = new String[9];
      String string0 = "#/components/schemas/";
      stringArray0[0] = string0;
      String string1 = "7ZCw;$G2]U";
      stringArray0[1] = string1;
      String string2 = "#/components/schemas/";
      stringArray0[2] = string2;
      String string3 = "lJ3=d9C";
      stringArray0[3] = string3;
      String string4 = "Can not deserialize value of type EncodingProperty.StyleEnum from String \"%s\": value not one of declared Enum instance names: %s";
      stringArray0[4] = string4;
      String string5 = ".5";
      stringArray0[5] = string5;
      String string6 = "default";
      stringArray0[6] = string6;
      String string7 = "g3d/dNRvV<|t9$";
      stringArray0[7] = string7;
      String string8 = "#/components/schemas/";
      stringArray0[8] = string8;
      Optional<Set<Tag>> optional0 = OperationParser.getTags(stringArray0);
      assertEquals(9, stringArray0.length);
      assertNotNull(optional0);
      
      boolean boolean0 = true;
      String string9 = ",Lmv@";
      String string10 = "Dhs[N";
      boolean boolean1 = true;
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      String string11 = "";
      int int0 = 3;
      int int1 = (-821);
      boolean boolean2 = true;
      String string12 = "#/components/schemas/";
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(stringArray0).when(schema0).allowableValues();
      doReturn(string0, (String) null).when(schema0).defaultValue();
      doReturn(boolean0, false).when(schema0).deprecated();
      doReturn(string9, (String) null).when(schema0).description();
      doReturn(string10, string5, (String) null).when(schema0).example();
      doReturn(boolean0, false).when(schema0).exclusiveMaximum();
      doReturn(boolean1, false).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema0).externalDocs();
      doReturn(string11).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(0).when(schema0).maxProperties();
      doReturn(int1).when(schema0).minProperties();
      doReturn(stringArray0[5], (String) null).when(schema0).pattern();
      doReturn(boolean2, false).when(schema0).readOnly();
      doReturn(stringArray0[4], (String) null).when(schema0).ref();
      doReturn(string12, (String) null).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional1 = (Optional<io.swagger.oas.models.media.Schema>)OperationParser.getSchemaFromAnnotation(schema0);
      assertNotSame(string0, string7);
      assertNotSame(string0, string10);
      assertNotSame(string0, string6);
      assertNotSame(string0, string5);
      assertSame(string0, string8);
      assertSame(string0, string12);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertNotSame(string0, string4);
      assertNotSame(string0, string9);
      assertNotSame(string0, string3);
      assertNotSame(string0, string11);
      assertNotSame(string9, string7);
      assertNotSame(string9, string10);
      assertNotSame(string9, string5);
      assertNotSame(string9, string6);
      assertNotSame(string9, string2);
      assertNotSame(string9, string12);
      assertNotSame(string9, string4);
      assertNotSame(string9, string1);
      assertNotSame(string9, string11);
      assertNotSame(string9, string3);
      assertNotSame(string9, string8);
      assertNotSame(string9, string0);
      assertNotSame(string10, string1);
      assertNotSame(string10, string0);
      assertNotSame(string10, string11);
      assertNotSame(string10, string8);
      assertNotSame(string10, string2);
      assertNotSame(string10, string12);
      assertNotSame(string10, string4);
      assertNotSame(string10, string3);
      assertNotSame(string10, string9);
      assertNotSame(string10, string7);
      assertNotSame(string10, string6);
      assertNotSame(string10, string5);
      assertNotSame(string11, string7);
      assertNotSame(string11, string10);
      assertNotSame(string11, string6);
      assertNotSame(string11, string5);
      assertNotSame(string11, string9);
      assertNotSame(string11, string2);
      assertNotSame(string11, string1);
      assertNotSame(string11, string12);
      assertNotSame(string11, string3);
      assertNotSame(string11, string8);
      assertNotSame(string11, string4);
      assertNotSame(string11, string0);
      assertNotSame(string5, string7);
      assertNotSame(string5, string10);
      assertNotSame(string5, string6);
      assertNotSame(string5, string2);
      assertNotSame(string5, string11);
      assertNotSame(string5, string12);
      assertNotSame(string5, string3);
      assertNotSame(string5, string0);
      assertNotSame(string5, string8);
      assertNotSame(string5, string9);
      assertNotSame(string5, string1);
      assertNotSame(string5, string4);
      assertNotSame(string12, string4);
      assertSame(string12, string2);
      assertNotSame(string12, string9);
      assertNotSame(string12, string5);
      assertNotSame(string12, string7);
      assertNotSame(string12, string10);
      assertNotSame(string12, string6);
      assertSame(string12, string8);
      assertNotSame(string12, string1);
      assertNotSame(string12, string11);
      assertNotSame(string12, string3);
      assertSame(string12, string0);
      assertFalse(string0.equals((Object)string7));
      assertFalse(string0.equals((Object)string10));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string9));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string11));
      assertFalse(string5.equals((Object)string7));
      assertFalse(string5.equals((Object)string10));
      assertFalse(string5.equals((Object)string6));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string11));
      assertFalse(string5.equals((Object)string12));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string8));
      assertFalse(string5.equals((Object)string9));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string10));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string12));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string11));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string11));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string12));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string11.equals((Object)string7));
      assertFalse(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string5));
      assertFalse(string11.equals((Object)string9));
      assertFalse(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string12));
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string8));
      assertFalse(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string0));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(string12.equals((Object)string4));
      assertFalse(string12.equals((Object)string9));
      assertFalse(string12.equals((Object)string5));
      assertFalse(string12.equals((Object)string7));
      assertFalse(string12.equals((Object)string10));
      assertFalse(string12.equals((Object)string6));
      assertFalse(string12.equals((Object)string1));
      assertFalse(string12.equals((Object)string11));
      assertFalse(string12.equals((Object)string3));
      assertEquals(9, stringArray0.length);
      assertNotNull(optional1);
      
      Content[] contentArray0 = new Content[4];
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      contentArray0[3] = contentArray0[2];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      assertNotNull(components0);
      
      io.swagger.oas.models.parameters.Parameter parameter0 = new io.swagger.oas.models.parameters.Parameter();
      assertNull(parameter0.getExample());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getIn());
      assertNull(parameter0.getName());
      assertNull(parameter0.get$ref());
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.getRequired());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getAllowReserved());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getExplode());
      assertNotNull(parameter0);
      
      Components components1 = components0.addParameters(stringArray0[2], parameter0);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertNull(parameter0.getExample());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getIn());
      assertNull(parameter0.getName());
      assertNull(parameter0.get$ref());
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.getRequired());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getAllowReserved());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getExplode());
      assertEquals(9, stringArray0.length);
      assertNotNull(components1);
      
      Link[] linkArray0 = new Link[5];
      String string13 = "";
      String string14 = "C.,(}7Xc&}rebchD";
      String string15 = "W)^Yr/`=oTZ";
  }

  @Test(timeout = 11000)
  public void test062()  throws Throwable  {
      boolean boolean0 = false;
      Content[] contentArray0 = new Content[1];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      contentArray0[0] = content0;
      String string0 = "@DH$Vzqb!jxY1";
      Explode explode0 = Explode.DEFAULT;
      Explode explode1 = Explode.DEFAULT;
      String string1 = "<";
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema0).implementation();
      String string2 = "";
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0).when(parameter0).allowEmptyValue();
      doReturn(boolean0).when(parameter0).allowReserved();
      doReturn(boolean0).when(parameter0).deprecated();
      doReturn(string0, (String) null).when(parameter0).description();
      doReturn(explode0, explode1, explode1).when(parameter0).explode();
      doReturn(string0, (String) null).when(parameter0).in();
      doReturn(string1, (String) null).when(parameter0).name();
      doReturn(boolean0).when(parameter0).required();
      doReturn(schema0, schema0, (Schema) null).when(parameter0).schema();
      doReturn(string2).when(parameter0).style();
      Components components0 = new Components();
      assertNotNull(components0);
      
      String string3 = "\\@E_wl3d,i>";
      Header header0 = new Header();
      assertNull(header0.getExample());
      assertNull(header0.get$ref());
      assertNull(header0.getStyle());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getDeprecated());
      assertNull(header0.getDescription());
      assertNull(header0.getRequired());
      assertNull(header0.getExplode());
      assertNotNull(header0);
      
      Components components1 = components0.addHeaders(string3, header0);
      assertSame(components0, components1);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertSame(components1, components0);
      assertNull(header0.getExample());
      assertNull(header0.get$ref());
      assertNull(header0.getStyle());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getDeprecated());
      assertNull(header0.getDescription());
      assertNull(header0.getRequired());
      assertNull(header0.getExplode());
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(components1);
      
      Map<String, Callback> map0 = components1.getCallbacks();
      assertSame(components0, components1);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertSame(components1, components0);
      assertNull(header0.getExample());
      assertNull(header0.get$ref());
      assertNull(header0.getStyle());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getDeprecated());
      assertNull(header0.getDescription());
      assertNull(header0.getRequired());
      assertNull(header0.getExplode());
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNull(map0);
      
      MediaType mediaType0 = new MediaType();
      assertNull(mediaType0.getExample());
      assertNotNull(mediaType0);
      
      Map<String, Example> map1 = mediaType0.getExamples();
      assertNull(mediaType0.getExample());
      assertNull(map1);
      
      Components components2 = components1.examples(map1);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertNull(mediaType0.getExample());
      assertNull(header0.getExample());
      assertNull(header0.get$ref());
      assertNull(header0.getStyle());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getDeprecated());
      assertNull(header0.getDescription());
      assertNull(header0.getRequired());
      assertNull(header0.getExplode());
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(components2);
      
      Components components3 = components0.callbacks(map0);
      assertSame(components3, components2);
      assertSame(components3, components1);
      assertSame(components3, components0);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertNull(header0.getExample());
      assertNull(header0.get$ref());
      assertNull(header0.getStyle());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getDeprecated());
      assertNull(header0.getDescription());
      assertNull(header0.getRequired());
      assertNull(header0.getExplode());
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(components3);
      
      Map<String, Example> map2 = null;
      Components components4 = components3.examples(map2);
      assertSame(components3, components2);
      assertSame(components3, components4);
      assertSame(components3, components1);
      assertSame(components3, components0);
      assertSame(components4, components1);
      assertSame(components4, components0);
      assertSame(components4, components3);
      assertSame(components4, components2);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertSame(components0, components4);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components1, components4);
      assertSame(components1, components3);
      assertNull(header0.getExample());
      assertNull(header0.get$ref());
      assertNull(header0.getStyle());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getDeprecated());
      assertNull(header0.getDescription());
      assertNull(header0.getRequired());
      assertNull(header0.getExplode());
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(components4);
      
      // Undeclared exception!
      try { 
        OperationParser.getParameter(parameter0, components4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test063()  throws Throwable  {
      boolean boolean0 = true;
      boolean boolean1 = true;
      Content[] contentArray0 = new Content[3];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      String string0 = "";
      Explode explode0 = Explode.FALSE;
      String string1 = "JdQI/?<e^(#e:qs";
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0, false).when(parameter0).allowEmptyValue();
      doReturn(boolean1, false).when(parameter0).allowReserved();
      doReturn(boolean1, false).when(parameter0).deprecated();
      doReturn(string0).when(parameter0).description();
      doReturn(string0).when(parameter0).in();
      doReturn(string1, (String) null).when(parameter0).name();
      doReturn(boolean1, false).when(parameter0).required();
      doReturn(string1, (String) null).when(parameter0).style();
      Components components0 = new Components();
      assertNotNull(components0);
      
      String string2 = null;
      Example example0 = new Example();
      assertNull(example0.getSummary());
      assertNull(example0.getDescription());
      assertNull(example0.get$ref());
      assertNull(example0.getExternalValue());
      assertNotNull(example0);
      
      Components components1 = components0.addExamples(string2, example0);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertNull(example0.getSummary());
      assertNull(example0.getDescription());
      assertNull(example0.get$ref());
      assertNull(example0.getExternalValue());
      assertNotNull(components1);
      
      Callback callback0 = new Callback();
      assertEquals(0, callback0.size());
      assertTrue(callback0.isEmpty());
      assertNotNull(callback0);
      
      Components components2 = components1.addCallbacks(string2, callback0);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertEquals(0, callback0.size());
      assertTrue(callback0.isEmpty());
      assertNull(example0.getSummary());
      assertNull(example0.getDescription());
      assertNull(example0.get$ref());
      assertNull(example0.getExternalValue());
      assertNotNull(components2);
      
      Map<String, RequestBody> map0 = components0.getRequestBodies();
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertNull(map0);
      
      Components components3 = components2.requestBodies(map0);
      assertSame(components2, components3);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertSame(components3, components2);
      assertSame(components3, components1);
      assertSame(components3, components0);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertEquals(0, callback0.size());
      assertTrue(callback0.isEmpty());
      assertNull(example0.getSummary());
      assertNull(example0.getDescription());
      assertNull(example0.get$ref());
      assertNull(example0.getExternalValue());
      assertNotNull(components3);
      
      RequestBody requestBody0 = new RequestBody();
      assertNull(requestBody0.get$ref());
      assertNull(requestBody0.getRequired());
      assertNull(requestBody0.getDescription());
      assertNotNull(requestBody0);
      
      Components components4 = components3.addRequestBodies(string2, requestBody0);
      assertSame(components2, components3);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertSame(components2, components4);
      assertSame(components3, components2);
      assertSame(components3, components1);
      assertSame(components3, components4);
      assertSame(components3, components0);
      assertSame(components4, components1);
      assertSame(components4, components3);
      assertSame(components4, components2);
      assertSame(components4, components0);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components0, components4);
      assertSame(components1, components0);
      assertSame(components1, components4);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertEquals(0, callback0.size());
      assertTrue(callback0.isEmpty());
      assertNull(requestBody0.get$ref());
      assertNull(requestBody0.getRequired());
      assertNull(requestBody0.getDescription());
      assertNull(example0.getSummary());
      assertNull(example0.getDescription());
      assertNull(example0.get$ref());
      assertNull(example0.getExternalValue());
      assertNotNull(components4);
      
      // Undeclared exception!
      try { 
        OperationParser.getParameter(parameter0, components4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.util.ParameterProcessor", e);
      }
  }

  @Test(timeout = 11000)
  public void test064()  throws Throwable  {
      String string0 = "|-x`";
      String string1 = "LI";
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn((Contact) null).when(info0).contact();
      doReturn(string0, (String) null).when(info0).description();
      doReturn((License) null).when(info0).license();
      doReturn(string0, (String) null).when(info0).termsOfService();
      doReturn(string0, (String) null).when(info0).title();
      doReturn(string1, (String) null).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional0 = OperationParser.getInfo(info0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(optional0);
      
      String string2 = "class Parameter {\n";
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(link0).description();
      doReturn(string0, (String) null).when(link0).operationId();
      doReturn(string2, (String) null).when(link0).operationRef();
      doReturn((LinkParameter[]) null).when(link0).parameters();
      Optional<io.swagger.oas.models.links.Link> optional1 = OperationParser.getLink(link0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(optional1);
      
      Content[] contentArray0 = new Content[2];
      ExampleObject[] exampleObjectArray0 = new ExampleObject[1];
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exampleObject0).name();
      exampleObjectArray0[0] = exampleObject0;
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Object) exampleObjectArray0, (Object) null).when(content0).examples();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      Components components0 = new Components();
      assertNotNull(components0);
      
      String string3 = "|M.<Rbx~-";
      io.swagger.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.oas.models.responses.ApiResponse();
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      assertNotNull(apiResponse0);
      
      Components components1 = components0.addResponses(string3, apiResponse0);
      assertSame(components1, components0);
      assertSame(components0, components1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(components1);
      
      String string4 = "";
      io.swagger.oas.models.parameters.Parameter parameter0 = new io.swagger.oas.models.parameters.Parameter();
      assertNull(parameter0.getRequired());
      assertNull(parameter0.getAllowReserved());
      assertNull(parameter0.getExplode());
      assertNull(parameter0.getName());
      assertNull(parameter0.getExample());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.getIn());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.get$ref());
      assertNotNull(parameter0);
      
      Components components2 = components1.addParameters(string4, parameter0);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string2);
      assertNotSame(string4, string3);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertNotSame(string3, string2);
      assertNotSame(string3, string4);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      assertNull(parameter0.getRequired());
      assertNull(parameter0.getAllowReserved());
      assertNull(parameter0.getExplode());
      assertNull(parameter0.getName());
      assertNull(parameter0.getExample());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.getIn());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.get$ref());
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(components2);
      
      Map<String, RequestBody> map0 = components0.getRequestBodies();
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertNull(map0);
      
      Components components3 = components2.requestBodies(map0);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string2);
      assertNotSame(string4, string3);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertSame(components3, components1);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertNotSame(string3, string2);
      assertNotSame(string3, string4);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      assertNull(parameter0.getRequired());
      assertNull(parameter0.getAllowReserved());
      assertNull(parameter0.getExplode());
      assertNull(parameter0.getName());
      assertNull(parameter0.getExample());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.getIn());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.get$ref());
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(components3);
      
      Map<String, io.swagger.oas.models.responses.ApiResponse> map1 = components2.getResponses();
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string2);
      assertNotSame(string4, string3);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertNotSame(string3, string2);
      assertNotSame(string3, string4);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      assertNull(parameter0.getRequired());
      assertNull(parameter0.getAllowReserved());
      assertNull(parameter0.getExplode());
      assertNull(parameter0.getName());
      assertNull(parameter0.getExample());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.getIn());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.get$ref());
      assertFalse(map1.isEmpty());
      assertEquals(1, map1.size());
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(map1);
      
      Components components4 = components3.responses(map1);
      assertSame(components1, components4);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string2);
      assertNotSame(string4, string3);
      assertSame(components2, components0);
      assertSame(components2, components4);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertSame(components3, components1);
      assertSame(components3, components4);
      assertSame(components4, components1);
      assertSame(components4, components2);
      assertSame(components4, components3);
      assertSame(components4, components0);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components0, components4);
      assertSame(components0, components2);
      assertNotSame(string3, string2);
      assertNotSame(string3, string4);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      assertNull(parameter0.getRequired());
      assertNull(parameter0.getAllowReserved());
      assertNull(parameter0.getExplode());
      assertNull(parameter0.getName());
      assertNull(parameter0.getExample());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.getIn());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.get$ref());
      assertFalse(map1.isEmpty());
      assertEquals(1, map1.size());
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(components4);
      
      // Undeclared exception!
      try { 
        OperationParser.getContents(contentArray0, components4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test065()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = true;
      io.swagger.oas.annotations.parameters.RequestBody requestBody0 = mock(io.swagger.oas.annotations.parameters.RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn((Content[]) null).when(requestBody0).content();
      doReturn(string0).when(requestBody0).description();
      doReturn(boolean0, false).when(requestBody0).required();
      Components components0 = null;
      Optional<RequestBody> optional0 = OperationParser.getRequestBody(requestBody0, components0);
      assertNotNull(optional0);
      
      String string1 = "USE_EQUALITY_FOR_OBJECT_ID";
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(server0).description();
      doReturn(string1, (String) null).when(server0).url();
      doReturn((ServerVariable[]) null).when(server0).variables();
      // Undeclared exception!
      try { 
        OperationParser.getServer(server0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test066()  throws Throwable  {
      String string0 = "com.fasterxml.jackson.databind.ObjectWriter";
      String string1 = "";
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(license0).name();
      doReturn(string1).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional0 = OperationParser.getLicense(license0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(optional0);
      
      String string2 = "default";
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn((Contact) null).when(info0).contact();
      doReturn(string1).when(info0).description();
      doReturn((License) null).when(info0).license();
      doReturn(string2, (String) null).when(info0).termsOfService();
      doReturn(string1).when(info0).title();
      doReturn(string1).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional1 = OperationParser.getInfo(info0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(optional1);
      
      String string3 = "CD% '9Nld(;~K";
      boolean boolean0 = false;
      io.swagger.oas.annotations.parameters.RequestBody requestBody0 = mock(io.swagger.oas.annotations.parameters.RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn((Content[]) null).when(requestBody0).content();
      doReturn(string3, (String) null).when(requestBody0).description();
      doReturn(boolean0).when(requestBody0).required();
      Components components0 = new Components();
      assertNotNull(components0);
      
      Map<String, Callback> map0 = components0.getCallbacks();
      assertNull(map0);
      
      Components components1 = components0.callbacks(map0);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertNotNull(components1);
      
      String string4 = "p0K'aB{N:";
      io.swagger.oas.models.media.Schema<io.swagger.oas.models.media.Content> schema0 = new io.swagger.oas.models.media.Schema<io.swagger.oas.models.media.Content>();
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getType());
      assertNull(schema0.getTitle());
      assertNull(schema0.getPattern());
      assertNull(schema0.getFormat());
      assertNull(schema0.getDescription());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getNullable());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getMinItems());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getName());
      assertNull(schema0.get$ref());
      assertNotNull(schema0);
      
      Components components2 = components1.addSchemas(string4, schema0);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertNotSame(string4, string3);
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      assertNotSame(string4, string0);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getType());
      assertNull(schema0.getTitle());
      assertNull(schema0.getPattern());
      assertNull(schema0.getFormat());
      assertNull(schema0.getDescription());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getNullable());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getMinItems());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getName());
      assertNull(schema0.get$ref());
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(components2);
      
      Map<String, SecurityScheme> map1 = components0.getSecuritySchemes();
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertNull(map1);
      
      Components components3 = components2.securitySchemes(map1);
      assertSame(components3, components2);
      assertSame(components3, components1);
      assertSame(components3, components0);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertNotSame(string4, string3);
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      assertNotSame(string4, string0);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertSame(components2, components3);
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getType());
      assertNull(schema0.getTitle());
      assertNull(schema0.getPattern());
      assertNull(schema0.getFormat());
      assertNull(schema0.getDescription());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getNullable());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getMinItems());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getName());
      assertNull(schema0.get$ref());
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(components3);
      
      String string5 = "fdv_p1f}iB{Bs";
      RequestBody requestBody1 = new RequestBody();
      assertNull(requestBody1.get$ref());
      assertNull(requestBody1.getDescription());
      assertNull(requestBody1.getRequired());
      assertNotNull(requestBody1);
      
      Components components4 = components3.addRequestBodies(string5, requestBody1);
      assertSame(components3, components2);
      assertSame(components3, components1);
      assertSame(components3, components4);
      assertSame(components3, components0);
      assertNotSame(string5, string1);
      assertNotSame(string5, string3);
      assertNotSame(string5, string4);
      assertNotSame(string5, string2);
      assertNotSame(string5, string0);
      assertSame(components4, components1);
      assertSame(components4, components0);
      assertSame(components4, components3);
      assertSame(components4, components2);
      assertSame(components0, components4);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertSame(components1, components4);
      assertNotSame(string4, string3);
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      assertNotSame(string4, string5);
      assertNotSame(string4, string0);
      assertSame(components2, components1);
      assertSame(components2, components4);
      assertSame(components2, components0);
      assertSame(components2, components3);
      assertNull(requestBody1.get$ref());
      assertNull(requestBody1.getDescription());
      assertNull(requestBody1.getRequired());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getType());
      assertNull(schema0.getTitle());
      assertNull(schema0.getPattern());
      assertNull(schema0.getFormat());
      assertNull(schema0.getDescription());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getNullable());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getMinItems());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getName());
      assertNull(schema0.get$ref());
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(components4);
      
      Optional<RequestBody> optional2 = OperationParser.getRequestBody(requestBody0, components4);
      assertSame(components3, components2);
      assertSame(components3, components1);
      assertSame(components3, components4);
      assertSame(components3, components0);
      assertNotSame(string5, string1);
      assertNotSame(string5, string3);
      assertNotSame(string5, string4);
      assertNotSame(string5, string2);
      assertNotSame(string5, string0);
      assertSame(components4, components1);
      assertSame(components4, components0);
      assertSame(components4, components3);
      assertSame(components4, components2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string4);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string5);
      assertSame(components0, components4);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertSame(components1, components4);
      assertNotSame(string4, string3);
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      assertNotSame(string4, string5);
      assertNotSame(string4, string0);
      assertSame(components2, components1);
      assertSame(components2, components4);
      assertSame(components2, components0);
      assertSame(components2, components3);
      assertNull(requestBody1.get$ref());
      assertNull(requestBody1.getDescription());
      assertNull(requestBody1.getRequired());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getType());
      assertNull(schema0.getTitle());
      assertNull(schema0.getPattern());
      assertNull(schema0.getFormat());
      assertNull(schema0.getDescription());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getNullable());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getMinItems());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getName());
      assertNull(schema0.get$ref());
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(optional2);
      
      String string6 = "I,A/r*mW";
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string4, (String) null).when(externalDocumentation0).description();
      doReturn(string6, (String) null).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional3 = OperationParser.getExternalDocumentation(externalDocumentation0);
      assertNotSame(string6, string1);
      assertNotSame(string6, string0);
      assertNotSame(string6, string3);
      assertNotSame(string6, string5);
      assertNotSame(string6, string2);
      assertNotSame(string6, string4);
      assertNotSame(string4, string3);
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      assertNotSame(string4, string5);
      assertNotSame(string4, string0);
      assertNotSame(string4, string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string6));
      assertNotNull(optional3);
      
      Server[] serverArray0 = new Server[5];
      String string7 = "u|9Q\\{uJnrub-B";
      String string8 = "";
      String string9 = "^m3=<sYBj\"5,Ww&>%M<";
      String string10 = "2F$YLmcA3j+7oi";
      String string11 = "Minimum abbreviation width with offset is 7";
      String string12 = "";
      String string13 = "\"4ts$";
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string6, string7).when(server0).description();
      doReturn(string5, string10).when(server0).url();
      doReturn((ServerVariable[]) null).when(server0).variables();
      serverArray0[0] = server0;
      serverArray0[1] = serverArray0[0];
      serverArray0[2] = serverArray0[1];
      serverArray0[3] = serverArray0[2];
      serverArray0[4] = serverArray0[3];
      // Undeclared exception!
      try { 
        OperationParser.getServers(serverArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test067()  throws Throwable  {
      ApiResponse[] apiResponseArray0 = new ApiResponse[3];
      Content[] contentArray0 = new Content[9];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Schema) null).when(content0).schema();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      contentArray0[3] = contentArray0[2];
      contentArray0[4] = contentArray0[3];
      contentArray0[5] = contentArray0[4];
      contentArray0[6] = contentArray0[5];
      contentArray0[7] = contentArray0[6];
      contentArray0[8] = contentArray0[7];
      String string0 = "~DKPZ%AZatvkrAJAMB";
      String string1 = null;
      String string2 = "ccm%9J^*jU4uF7<`p\",";
      ApiResponse apiResponse0 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn(contentArray0).when(apiResponse0).content();
      doReturn(string0, string1).when(apiResponse0).description();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      assertNotNull(components0);
      
      String string3 = "?W ";
      RequestBody requestBody0 = null;
      Components components1 = components0.addRequestBodies(string3, requestBody0);
      assertSame(components0, components1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertSame(components1, components0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(components1);
      
      io.swagger.oas.models.responses.ApiResponse apiResponse1 = new io.swagger.oas.models.responses.ApiResponse();
      assertNull(apiResponse1.getDescription());
      assertNull(apiResponse1.get$ref());
      assertNotNull(apiResponse1);
      
      io.swagger.oas.models.links.Link link0 = new io.swagger.oas.models.links.Link();
      assertNull(link0.getOperationRef());
      assertNull(link0.get$ref());
      assertNull(link0.getDescription());
      assertNull(link0.getOperationId());
      assertNotNull(link0);
      
      io.swagger.oas.models.responses.ApiResponse apiResponse2 = apiResponse1.link(string3, link0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertSame(apiResponse1, apiResponse2);
      assertSame(apiResponse2, apiResponse1);
      assertNull(apiResponse1.getDescription());
      assertNull(apiResponse1.get$ref());
      assertNull(link0.getOperationRef());
      assertNull(link0.get$ref());
      assertNull(link0.getDescription());
      assertNull(link0.getOperationId());
      assertNull(apiResponse2.get$ref());
      assertNull(apiResponse2.getDescription());
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(apiResponse2);
      
      Header header0 = new Header();
      assertNull(header0.getExplode());
      assertNull(header0.getDeprecated());
      assertNull(header0.get$ref());
      assertNull(header0.getExample());
      assertNull(header0.getStyle());
      assertNull(header0.getRequired());
      assertNull(header0.getDescription());
      assertNull(header0.getAllowEmptyValue());
      assertNotNull(header0);
      
      io.swagger.oas.models.responses.ApiResponse apiResponse3 = apiResponse2.addHeaderObject(string3, header0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertSame(apiResponse1, apiResponse2);
      assertSame(apiResponse1, apiResponse3);
      assertSame(apiResponse2, apiResponse1);
      assertSame(apiResponse2, apiResponse3);
      assertSame(apiResponse3, apiResponse2);
      assertSame(apiResponse3, apiResponse1);
      assertNull(apiResponse1.getDescription());
      assertNull(apiResponse1.get$ref());
      assertNull(link0.getOperationRef());
      assertNull(link0.get$ref());
      assertNull(link0.getDescription());
      assertNull(link0.getOperationId());
      assertNull(apiResponse2.get$ref());
      assertNull(apiResponse2.getDescription());
      assertNull(header0.getExplode());
      assertNull(header0.getDeprecated());
      assertNull(header0.get$ref());
      assertNull(header0.getExample());
      assertNull(header0.getStyle());
      assertNull(header0.getRequired());
      assertNull(header0.getDescription());
      assertNull(header0.getAllowEmptyValue());
      assertNull(apiResponse3.getDescription());
      assertNull(apiResponse3.get$ref());
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(apiResponse3);
      
      Components components2 = components1.addResponses(string3, apiResponse3);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(apiResponse1, apiResponse2);
      assertSame(apiResponse1, apiResponse3);
      assertSame(apiResponse2, apiResponse1);
      assertSame(apiResponse2, apiResponse3);
      assertSame(apiResponse3, apiResponse2);
      assertSame(apiResponse3, apiResponse1);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertNull(apiResponse1.getDescription());
      assertNull(apiResponse1.get$ref());
      assertNull(link0.getOperationRef());
      assertNull(link0.get$ref());
      assertNull(link0.getDescription());
      assertNull(link0.getOperationId());
      assertNull(apiResponse2.get$ref());
      assertNull(apiResponse2.getDescription());
      assertNull(header0.getExplode());
      assertNull(header0.getDeprecated());
      assertNull(header0.get$ref());
      assertNull(header0.getExample());
      assertNull(header0.getStyle());
      assertNull(header0.getRequired());
      assertNull(header0.getDescription());
      assertNull(header0.getAllowEmptyValue());
      assertNull(apiResponse3.getDescription());
      assertNull(apiResponse3.get$ref());
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(components2);
      
      // Undeclared exception!
      try { 
        OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test068()  throws Throwable  {
      String string0 = null;
      String string1 = "";
      String string2 = "G@j%nS9_Yd%nJ~aL?";
      String string3 = "}v{2Zj==^}U`i-XTD;c";
      String string4 = null;
      Link[] linkArray0 = new Link[2];
      Map<String, io.swagger.oas.models.links.Link> map0 = OperationParser.getLinks(linkArray0);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals(2, linkArray0.length);
      assertNotNull(map0);
      
      Server[] serverArray0 = new Server[4];
      String string5 = "";
      String string6 = "g ";
      String string7 = "R~s:";
      String string8 = "";
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string4).when(server0).description();
      doReturn(string6, string7).when(server0).url();
      doReturn((ServerVariable[]) null).when(server0).variables();
      serverArray0[0] = server0;
      serverArray0[1] = serverArray0[0];
      serverArray0[2] = serverArray0[1];
      serverArray0[3] = serverArray0[2];
      // Undeclared exception!
      try { 
        OperationParser.getServers(serverArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test069()  throws Throwable  {
      String string0 = "|5F{&+:n$6f";
      String string1 = "";
      String string2 = "";
      String string3 = "";
      String string4 = "";
      String string5 = ") as a Bean";
      String string6 = "";
      String string7 = "";
      String string8 = "";
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string1, string0, string2, string2).when(link0).description();
      doReturn((String) null, (String) null, (String) null, (String) null).when(link0).name();
      doReturn(string3, string2, string4, string5, string0).when(link0).operationId();
      doReturn(string6, string0, string7, string2, string8).when(link0).operationRef();
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(link0).parameters();
      Optional<io.swagger.oas.models.links.Link> optional0 = OperationParser.getLink(link0);
      assertNotSame(string0, string4);
      assertNotSame(string0, string5);
      assertNotSame(string0, string8);
      assertNotSame(string0, string6);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string7);
      assertSame(string1, string8);
      assertNotSame(string1, string5);
      assertSame(string1, string6);
      assertSame(string1, string2);
      assertSame(string1, string3);
      assertSame(string1, string4);
      assertNotSame(string1, string0);
      assertSame(string1, string7);
      assertSame(string2, string1);
      assertSame(string2, string7);
      assertNotSame(string2, string0);
      assertSame(string2, string8);
      assertSame(string2, string4);
      assertNotSame(string2, string5);
      assertSame(string2, string6);
      assertSame(string2, string3);
      assertSame(string3, string7);
      assertNotSame(string3, string0);
      assertSame(string3, string8);
      assertSame(string3, string2);
      assertSame(string3, string4);
      assertSame(string3, string6);
      assertNotSame(string3, string5);
      assertSame(string3, string1);
      assertSame(string4, string1);
      assertSame(string4, string6);
      assertNotSame(string4, string5);
      assertSame(string4, string7);
      assertSame(string4, string2);
      assertSame(string4, string8);
      assertSame(string4, string3);
      assertNotSame(string4, string0);
      assertNotSame(string5, string1);
      assertNotSame(string5, string7);
      assertNotSame(string5, string8);
      assertNotSame(string5, string2);
      assertNotSame(string5, string4);
      assertNotSame(string5, string6);
      assertNotSame(string5, string0);
      assertNotSame(string5, string3);
      assertSame(string6, string1);
      assertSame(string6, string7);
      assertNotSame(string6, string0);
      assertSame(string6, string8);
      assertSame(string6, string4);
      assertNotSame(string6, string5);
      assertSame(string6, string3);
      assertSame(string6, string2);
      assertSame(string7, string1);
      assertSame(string7, string3);
      assertNotSame(string7, string0);
      assertSame(string7, string4);
      assertSame(string7, string8);
      assertSame(string7, string2);
      assertSame(string7, string6);
      assertNotSame(string7, string5);
      assertSame(string8, string1);
      assertNotSame(string8, string0);
      assertSame(string8, string7);
      assertNotSame(string8, string5);
      assertSame(string8, string3);
      assertSame(string8, string6);
      assertSame(string8, string2);
      assertSame(string8, string4);
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string8));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string7));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string7));
      assertFalse(string5.equals((Object)string8));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string6));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string5));
      assertNotNull(optional0);
      
      String string9 = "*/*";
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string9, (String) null).when(externalDocumentation0).description();
      doReturn(string5, (String) null).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional1 = OperationParser.getExternalDocumentation(externalDocumentation0);
      assertNotSame(string5, string1);
      assertNotSame(string5, string7);
      assertNotSame(string5, string8);
      assertNotSame(string5, string2);
      assertNotSame(string5, string4);
      assertNotSame(string5, string6);
      assertNotSame(string5, string0);
      assertNotSame(string5, string9);
      assertNotSame(string5, string3);
      assertNotSame(string9, string4);
      assertNotSame(string9, string7);
      assertNotSame(string9, string8);
      assertNotSame(string9, string5);
      assertNotSame(string9, string0);
      assertNotSame(string9, string3);
      assertNotSame(string9, string1);
      assertNotSame(string9, string2);
      assertNotSame(string9, string6);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string7));
      assertFalse(string5.equals((Object)string8));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string6));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string9));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string6));
      assertNotNull(optional1);
      
      ApiResponse[] apiResponseArray0 = new ApiResponse[13];
      Content[] contentArray0 = null;
      String string10 = "WRITE_DATES_AS_TIMESTAMPS";
      String string11 = "";
      ApiResponse apiResponse0 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn((Object) contentArray0, (Object) contentArray0, (Object) contentArray0, (Object) contentArray0).when(apiResponse0).content();
      doReturn(string8, string6, string10, string11, string6).when(apiResponse0).description();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponse0;
      apiResponseArray0[3] = apiResponseArray0[2];
      apiResponseArray0[5] = apiResponseArray0[4];
      apiResponseArray0[6] = apiResponseArray0[5];
      apiResponseArray0[7] = apiResponseArray0[6];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      assertNotNull(components0);
      
      String string12 = "|5}c',M;c";
      SecurityScheme securityScheme0 = new SecurityScheme();
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.getBearerFormat());
      assertNotNull(securityScheme0);
      
      io.swagger.oas.models.responses.ApiResponse apiResponse1 = new io.swagger.oas.models.responses.ApiResponse();
      assertNull(apiResponse1.getDescription());
      assertNull(apiResponse1.get$ref());
      assertNotNull(apiResponse1);
      
      Components components1 = components0.addResponses(string12, apiResponse1);
      assertSame(components0, components1);
      assertNotSame(string12, string0);
      assertNotSame(string12, string10);
      assertNotSame(string12, string6);
      assertNotSame(string12, string7);
      assertNotSame(string12, string1);
      assertNotSame(string12, string9);
      assertNotSame(string12, string11);
      assertNotSame(string12, string5);
      assertNotSame(string12, string2);
      assertNotSame(string12, string3);
      assertNotSame(string12, string4);
      assertNotSame(string12, string8);
      assertSame(components1, components0);
      assertNull(apiResponse1.getDescription());
      assertNull(apiResponse1.get$ref());
      assertFalse(string12.equals((Object)string0));
      assertFalse(string12.equals((Object)string10));
      assertFalse(string12.equals((Object)string6));
      assertFalse(string12.equals((Object)string7));
      assertFalse(string12.equals((Object)string1));
      assertFalse(string12.equals((Object)string9));
      assertFalse(string12.equals((Object)string11));
      assertFalse(string12.equals((Object)string5));
      assertFalse(string12.equals((Object)string2));
      assertFalse(string12.equals((Object)string3));
      assertFalse(string12.equals((Object)string4));
      assertFalse(string12.equals((Object)string8));
      assertNotNull(components1);
      
      HashMap<String, io.swagger.oas.models.parameters.Parameter> hashMap0 = new HashMap<String, io.swagger.oas.models.parameters.Parameter>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      HashMap<String, io.swagger.oas.models.parameters.Parameter> hashMap1 = new HashMap<String, io.swagger.oas.models.parameters.Parameter>(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertNotNull(hashMap1);
      
      Components components2 = components1.parameters(hashMap1);
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertNotSame(string12, string0);
      assertNotSame(string12, string10);
      assertNotSame(string12, string6);
      assertNotSame(string12, string7);
      assertNotSame(string12, string1);
      assertNotSame(string12, string9);
      assertNotSame(string12, string11);
      assertNotSame(string12, string5);
      assertNotSame(string12, string2);
      assertNotSame(string12, string3);
      assertNotSame(string12, string4);
      assertNotSame(string12, string8);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNull(apiResponse1.getDescription());
      assertNull(apiResponse1.get$ref());
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertFalse(string12.equals((Object)string0));
      assertFalse(string12.equals((Object)string10));
      assertFalse(string12.equals((Object)string6));
      assertFalse(string12.equals((Object)string7));
      assertFalse(string12.equals((Object)string1));
      assertFalse(string12.equals((Object)string9));
      assertFalse(string12.equals((Object)string11));
      assertFalse(string12.equals((Object)string5));
      assertFalse(string12.equals((Object)string2));
      assertFalse(string12.equals((Object)string3));
      assertFalse(string12.equals((Object)string4));
      assertFalse(string12.equals((Object)string8));
      assertNotNull(components2);
      
      Link[] linkArray0 = new Link[5];
      linkArray0[0] = link0;
      linkArray0[1] = link0;
      linkArray0[2] = link0;
      linkArray0[3] = link0;
      linkArray0[4] = link0;
      Map<String, io.swagger.oas.models.links.Link> map0 = OperationParser.getLinks(linkArray0);
      assertFalse(map0.isEmpty());
      assertEquals(1, map0.size());
      assertEquals(5, linkArray0.length);
      assertNotNull(map0);
      
      Components components3 = components2.links(map0);
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(components3, components1);
      assertSame(components3, components2);
      assertSame(components3, components0);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertNotSame(string12, string0);
      assertNotSame(string12, string10);
      assertNotSame(string12, string6);
      assertNotSame(string12, string7);
      assertNotSame(string12, string1);
      assertNotSame(string12, string9);
      assertNotSame(string12, string11);
      assertNotSame(string12, string5);
      assertNotSame(string12, string2);
      assertNotSame(string12, string3);
      assertNotSame(string12, string4);
      assertNotSame(string12, string8);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertFalse(map0.isEmpty());
      assertEquals(1, map0.size());
      assertNull(apiResponse1.getDescription());
      assertNull(apiResponse1.get$ref());
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertFalse(string12.equals((Object)string0));
      assertFalse(string12.equals((Object)string10));
      assertFalse(string12.equals((Object)string6));
      assertFalse(string12.equals((Object)string7));
      assertFalse(string12.equals((Object)string1));
      assertFalse(string12.equals((Object)string9));
      assertFalse(string12.equals((Object)string11));
      assertFalse(string12.equals((Object)string5));
      assertFalse(string12.equals((Object)string2));
      assertFalse(string12.equals((Object)string3));
      assertFalse(string12.equals((Object)string4));
      assertFalse(string12.equals((Object)string8));
      assertEquals(5, linkArray0.length);
      assertNotNull(components3);
      
      // Undeclared exception!
      try { 
        OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test070()  throws Throwable  {
      Content[] contentArray0 = new Content[8];
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema0).implementation();
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn(schema0).when(content0).schema();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      contentArray0[3] = contentArray0[2];
      contentArray0[4] = contentArray0[3];
      contentArray0[5] = contentArray0[4];
      contentArray0[6] = contentArray0[5];
      contentArray0[7] = contentArray0[6];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Produces produces1 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      assertNotNull(components0);
      
      String string0 = "Current token not START_OBJECT (needed to unwrap root name '%s'), but %s";
      io.swagger.oas.models.media.Schema<Integer> schema1 = new io.swagger.oas.models.media.Schema<Integer>();
      assertNull(schema1.getMaxProperties());
      assertNull(schema1.getWriteOnly());
      assertNull(schema1.getMinProperties());
      assertNull(schema1.getMinLength());
      assertNull(schema1.getName());
      assertNull(schema1.getFormat());
      assertNull(schema1.getExclusiveMinimum());
      assertNull(schema1.getMinItems());
      assertNull(schema1.getMaxItems());
      assertNull(schema1.getDeprecated());
      assertNull(schema1.getPattern());
      assertNull(schema1.getReadOnly());
      assertNull(schema1.getNullable());
      assertNull(schema1.get$ref());
      assertNull(schema1.getExclusiveMaximum());
      assertNull(schema1.getTitle());
      assertNull(schema1.getUniqueItems());
      assertNull(schema1.getMaxLength());
      assertNull(schema1.getDescription());
      assertNull(schema1.getType());
      assertNotNull(schema1);
      
      Components components1 = components0.addSchemas(string0, schema1);
      assertSame(components1, components0);
      assertSame(components0, components1);
      assertNull(schema1.getMaxProperties());
      assertNull(schema1.getWriteOnly());
      assertNull(schema1.getMinProperties());
      assertNull(schema1.getMinLength());
      assertNull(schema1.getName());
      assertNull(schema1.getFormat());
      assertNull(schema1.getExclusiveMinimum());
      assertNull(schema1.getMinItems());
      assertNull(schema1.getMaxItems());
      assertNull(schema1.getDeprecated());
      assertNull(schema1.getPattern());
      assertNull(schema1.getReadOnly());
      assertNull(schema1.getNullable());
      assertNull(schema1.get$ref());
      assertNull(schema1.getExclusiveMaximum());
      assertNull(schema1.getTitle());
      assertNull(schema1.getUniqueItems());
      assertNull(schema1.getMaxLength());
      assertNull(schema1.getDescription());
      assertNull(schema1.getType());
      assertNotNull(components1);
      
      String string1 = "";
      Example example0 = new Example();
      assertNull(example0.getExternalValue());
      assertNull(example0.getDescription());
      assertNull(example0.getSummary());
      assertNull(example0.get$ref());
      assertNotNull(example0);
      
      Components components2 = components1.addExamples(string1, example0);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertNotSame(string1, string0);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertNotSame(string0, string1);
      assertNull(example0.getExternalValue());
      assertNull(example0.getDescription());
      assertNull(example0.getSummary());
      assertNull(example0.get$ref());
      assertNull(schema1.getMaxProperties());
      assertNull(schema1.getWriteOnly());
      assertNull(schema1.getMinProperties());
      assertNull(schema1.getMinLength());
      assertNull(schema1.getName());
      assertNull(schema1.getFormat());
      assertNull(schema1.getExclusiveMinimum());
      assertNull(schema1.getMinItems());
      assertNull(schema1.getMaxItems());
      assertNull(schema1.getDeprecated());
      assertNull(schema1.getPattern());
      assertNull(schema1.getReadOnly());
      assertNull(schema1.getNullable());
      assertNull(schema1.get$ref());
      assertNull(schema1.getExclusiveMaximum());
      assertNull(schema1.getTitle());
      assertNull(schema1.getUniqueItems());
      assertNull(schema1.getMaxLength());
      assertNull(schema1.getDescription());
      assertNull(schema1.getType());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(components2);
      
      String string2 = "";
      io.swagger.oas.models.links.Link link0 = new io.swagger.oas.models.links.Link();
      assertNull(link0.get$ref());
      assertNull(link0.getOperationRef());
      assertNull(link0.getOperationId());
      assertNull(link0.getDescription());
      assertNotNull(link0);
      
      Components components3 = components2.addLinks(string2, link0);
      assertSame(components1, components3);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertSame(components2, components3);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertSame(components3, components2);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNull(example0.getExternalValue());
      assertNull(example0.getDescription());
      assertNull(example0.getSummary());
      assertNull(example0.get$ref());
      assertNull(link0.get$ref());
      assertNull(link0.getOperationRef());
      assertNull(link0.getOperationId());
      assertNull(link0.getDescription());
      assertNull(schema1.getMaxProperties());
      assertNull(schema1.getWriteOnly());
      assertNull(schema1.getMinProperties());
      assertNull(schema1.getMinLength());
      assertNull(schema1.getName());
      assertNull(schema1.getFormat());
      assertNull(schema1.getExclusiveMinimum());
      assertNull(schema1.getMinItems());
      assertNull(schema1.getMaxItems());
      assertNull(schema1.getDeprecated());
      assertNull(schema1.getPattern());
      assertNull(schema1.getReadOnly());
      assertNull(schema1.getNullable());
      assertNull(schema1.get$ref());
      assertNull(schema1.getExclusiveMaximum());
      assertNull(schema1.getTitle());
      assertNull(schema1.getUniqueItems());
      assertNull(schema1.getMaxLength());
      assertNull(schema1.getDescription());
      assertNull(schema1.getType());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertNotNull(components3);
      
      HashMap<String, Header> hashMap0 = new HashMap<String, Header>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Components components4 = components3.headers(hashMap0);
      assertSame(components1, components3);
      assertSame(components1, components0);
      assertSame(components1, components4);
      assertSame(components1, components2);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertSame(components2, components4);
      assertSame(components2, components3);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertSame(components3, components4);
      assertSame(components3, components2);
      assertSame(components4, components2);
      assertSame(components4, components0);
      assertSame(components4, components3);
      assertSame(components4, components1);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertSame(components0, components4);
      assertSame(components0, components2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNull(example0.getExternalValue());
      assertNull(example0.getDescription());
      assertNull(example0.getSummary());
      assertNull(example0.get$ref());
      assertNull(link0.get$ref());
      assertNull(link0.getOperationRef());
      assertNull(link0.getOperationId());
      assertNull(link0.getDescription());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(schema1.getMaxProperties());
      assertNull(schema1.getWriteOnly());
      assertNull(schema1.getMinProperties());
      assertNull(schema1.getMinLength());
      assertNull(schema1.getName());
      assertNull(schema1.getFormat());
      assertNull(schema1.getExclusiveMinimum());
      assertNull(schema1.getMinItems());
      assertNull(schema1.getMaxItems());
      assertNull(schema1.getDeprecated());
      assertNull(schema1.getPattern());
      assertNull(schema1.getReadOnly());
      assertNull(schema1.getNullable());
      assertNull(schema1.get$ref());
      assertNull(schema1.getExclusiveMaximum());
      assertNull(schema1.getTitle());
      assertNull(schema1.getUniqueItems());
      assertNull(schema1.getMaxLength());
      assertNull(schema1.getDescription());
      assertNull(schema1.getType());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertNotNull(components4);
      
      // Undeclared exception!
      try { 
        OperationParser.getContent(contentArray0, produces0, produces1, components4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test071()  throws Throwable  {
      LinkParameter[] linkParameterArray0 = new LinkParameter[3];
      String string0 = "d";
      LinkParameter linkParameter0 = mock(LinkParameter.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(linkParameter0).expression();
      doReturn(string0, string0, string0, (String) null, (String) null).when(linkParameter0).name();
      linkParameterArray0[0] = linkParameter0;
      linkParameterArray0[1] = linkParameterArray0[0];
      linkParameterArray0[2] = linkParameterArray0[1];
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameterArray0);
      assertFalse(map0.isEmpty());
      assertEquals(1, map0.size());
      assertEquals(3, linkParameterArray0.length);
      assertNotNull(map0);
      
      String string1 = "61GU`*\"XYkY_&;@>C:";
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(contact0).email();
      doReturn(string1, (String) null).when(contact0).name();
      doReturn(string1, (String) null).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional0 = OperationParser.getContact(contact0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(optional0);
      
      Content[] contentArray0 = null;
      Components components0 = new Components();
      assertNotNull(components0);
      
      String string2 = "{q|F'0,#@Ptd/r^7Nu";
      Example example0 = new Example();
      assertNull(example0.get$ref());
      assertNull(example0.getExternalValue());
      assertNull(example0.getSummary());
      assertNull(example0.getDescription());
      assertNotNull(example0);
      
      Components components1 = components0.addExamples(string2, example0);
      assertSame(components0, components1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(components1, components0);
      assertNull(example0.get$ref());
      assertNull(example0.getExternalValue());
      assertNull(example0.getSummary());
      assertNull(example0.getDescription());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(components1);
      
      HashMap<String, io.swagger.oas.models.parameters.Parameter> hashMap0 = new HashMap<String, io.swagger.oas.models.parameters.Parameter>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Components components2 = components1.parameters(hashMap0);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertNull(example0.get$ref());
      assertNull(example0.getExternalValue());
      assertNull(example0.getSummary());
      assertNull(example0.getDescription());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(components2);
      
      String string3 = ")F+oFUSs<]svVOCx&";
      io.swagger.oas.models.media.Schema<Tag> schema0 = new io.swagger.oas.models.media.Schema<Tag>();
      assertNull(schema0.getMinLength());
      assertNull(schema0.getName());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getDescription());
      assertNull(schema0.getType());
      assertNull(schema0.getNullable());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getPattern());
      assertNull(schema0.getFormat());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getMinItems());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getTitle());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.get$ref());
      assertNull(schema0.getMaxLength());
      assertNotNull(schema0);
      
      Components components3 = components1.addSchemas(string3, schema0);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertSame(components3, components2);
      assertSame(components3, components1);
      assertSame(components3, components0);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertNull(schema0.getMinLength());
      assertNull(schema0.getName());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getDescription());
      assertNull(schema0.getType());
      assertNull(schema0.getNullable());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getPattern());
      assertNull(schema0.getFormat());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getMinItems());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getTitle());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.get$ref());
      assertNull(schema0.getMaxLength());
      assertNull(example0.get$ref());
      assertNull(example0.getExternalValue());
      assertNull(example0.getSummary());
      assertNull(example0.getDescription());
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(components3);
      
      MediaType mediaType0 = new MediaType();
      assertNull(mediaType0.getExample());
      assertNotNull(mediaType0);
      
      Map<String, Example> map1 = mediaType0.getExamples();
      assertNull(mediaType0.getExample());
      assertNull(map1);
      
      Components components4 = components2.examples(map1);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(components2, components4);
      assertSame(components2, components0);
      assertSame(components4, components1);
      assertSame(components4, components3);
      assertSame(components4, components2);
      assertSame(components4, components0);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components0, components4);
      assertSame(components0, components3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertSame(components1, components4);
      assertSame(components1, components0);
      assertNull(mediaType0.getExample());
      assertNull(example0.get$ref());
      assertNull(example0.getExternalValue());
      assertNull(example0.getSummary());
      assertNull(example0.getDescription());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(components4);
      
      Map<String, SecurityScheme> map2 = components0.getSecuritySchemes();
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components0, components4);
      assertSame(components0, components3);
      assertNull(map2);
      
      Components components5 = components4.securitySchemes(map2);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(components2, components4);
      assertSame(components2, components0);
      assertSame(components2, components5);
      assertSame(components4, components1);
      assertSame(components4, components3);
      assertSame(components4, components2);
      assertSame(components4, components5);
      assertSame(components4, components0);
      assertSame(components5, components1);
      assertSame(components5, components3);
      assertSame(components5, components2);
      assertSame(components5, components4);
      assertSame(components5, components0);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components0, components5);
      assertSame(components0, components4);
      assertSame(components0, components3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertSame(components1, components5);
      assertSame(components1, components4);
      assertSame(components1, components0);
      assertNull(mediaType0.getExample());
      assertNull(example0.get$ref());
      assertNull(example0.getExternalValue());
      assertNull(example0.getSummary());
      assertNull(example0.getDescription());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(components5);
      
      Optional<io.swagger.oas.models.media.Content> optional1 = OperationParser.getContents(contentArray0, components5);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(components2, components4);
      assertSame(components2, components0);
      assertSame(components2, components5);
      assertSame(components4, components1);
      assertSame(components4, components3);
      assertSame(components4, components2);
      assertSame(components4, components5);
      assertSame(components4, components0);
      assertSame(components5, components1);
      assertSame(components5, components3);
      assertSame(components5, components2);
      assertSame(components5, components4);
      assertSame(components5, components0);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components0, components5);
      assertSame(components0, components4);
      assertSame(components0, components3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertSame(components1, components5);
      assertSame(components1, components4);
      assertSame(components1, components0);
      assertNull(mediaType0.getExample());
      assertNull(example0.get$ref());
      assertNull(example0.getExternalValue());
      assertNull(example0.getSummary());
      assertNull(example0.getDescription());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(optional1);
  }

  @Test(timeout = 11000)
  public void test072()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String string0 = "";
      stringArray0[0] = string0;
      String string1 = "";
      stringArray0[1] = string1;
      String string2 = "Spu!L0";
      stringArray0[2] = string2;
      String string3 = "default";
      stringArray0[3] = string3;
      String string4 = "n\\q+#Ew0ZaJ>QVHOQSn";
      stringArray0[4] = string4;
      String string5 = "";
      boolean boolean0 = false;
      String string6 = "";
      boolean boolean1 = true;
      ExternalDocumentation externalDocumentation0 = null;
      String string7 = "";
      int int0 = 1863;
      int int1 = (-2207);
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(stringArray0).when(schema0).allowableValues();
      doReturn(string5).when(schema0).defaultValue();
      doReturn(boolean0).when(schema0).deprecated();
      doReturn(string6).when(schema0).description();
      doReturn(string0, stringArray0[3], (String) null).when(schema0).example();
      doReturn(boolean1, false).when(schema0).exclusiveMaximum();
      doReturn(boolean0).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema0).externalDocs();
      doReturn(string7).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(0).when(schema0).maxProperties();
      doReturn(int1).when(schema0).minProperties();
      doReturn(stringArray0[1]).when(schema0).pattern();
      doReturn(boolean1, false).when(schema0).readOnly();
      doReturn(string6).when(schema0).ref();
      doReturn(string6).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional0 = (Optional<io.swagger.oas.models.media.Schema>)OperationParser.getSchemaFromAnnotation(schema0);
      assertNotSame(string7, string3);
      assertSame(string7, string1);
      assertSame(string7, string0);
      assertSame(string7, string6);
      assertNotSame(string7, string2);
      assertNotSame(string7, string4);
      assertSame(string7, string5);
      assertSame(string0, string7);
      assertSame(string0, string6);
      assertSame(string0, string1);
      assertNotSame(string0, string3);
      assertSame(string0, string5);
      assertNotSame(string0, string2);
      assertNotSame(string0, string4);
      assertSame(string5, string0);
      assertSame(string5, string6);
      assertSame(string5, string1);
      assertSame(string5, string7);
      assertNotSame(string5, string4);
      assertNotSame(string5, string2);
      assertNotSame(string5, string3);
      assertSame(string6, string5);
      assertSame(string6, string7);
      assertNotSame(string6, string3);
      assertSame(string6, string1);
      assertNotSame(string6, string2);
      assertSame(string6, string0);
      assertNotSame(string6, string4);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(int0 == int1);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(int1 == int0);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(boolean0 == boolean1);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(boolean1 == boolean0);
      assertEquals(5, stringArray0.length);
      assertNotNull(optional0);
      
      MediaType mediaType0 = new MediaType();
      assertNull(mediaType0.getExample());
      assertNotNull(mediaType0);
      
      HashMap<String, Encoding> hashMap0 = new HashMap<String, Encoding>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      MediaType mediaType1 = mediaType0.encoding(hashMap0);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType1, mediaType0);
      assertNull(mediaType0.getExample());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(mediaType1.getExample());
      assertNotNull(mediaType1);
      
      io.swagger.oas.models.media.Schema<Integer> schema1 = new io.swagger.oas.models.media.Schema<Integer>();
      assertNull(schema1.getName());
      assertNull(schema1.getDescription());
      assertNull(schema1.getExclusiveMaximum());
      assertNull(schema1.getUniqueItems());
      assertNull(schema1.getWriteOnly());
      assertNull(schema1.getMaxItems());
      assertNull(schema1.getMaxLength());
      assertNull(schema1.get$ref());
      assertNull(schema1.getFormat());
      assertNull(schema1.getTitle());
      assertNull(schema1.getType());
      assertNull(schema1.getMinItems());
      assertNull(schema1.getExclusiveMinimum());
      assertNull(schema1.getReadOnly());
      assertNull(schema1.getMinLength());
      assertNull(schema1.getNullable());
      assertNull(schema1.getMaxProperties());
      assertNull(schema1.getMinProperties());
      assertNull(schema1.getDeprecated());
      assertNull(schema1.getPattern());
      assertNotNull(schema1);
      
      MediaType mediaType2 = mediaType1.schema(schema1);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType0, mediaType2);
      assertSame(mediaType1, mediaType2);
      assertSame(mediaType1, mediaType0);
      assertSame(mediaType2, mediaType1);
      assertSame(mediaType2, mediaType0);
      assertNull(mediaType0.getExample());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(mediaType1.getExample());
      assertNull(schema1.getName());
      assertNull(schema1.getDescription());
      assertNull(schema1.getExclusiveMaximum());
      assertNull(schema1.getUniqueItems());
      assertNull(schema1.getWriteOnly());
      assertNull(schema1.getMaxItems());
      assertNull(schema1.getMaxLength());
      assertNull(schema1.get$ref());
      assertNull(schema1.getFormat());
      assertNull(schema1.getTitle());
      assertNull(schema1.getType());
      assertNull(schema1.getMinItems());
      assertNull(schema1.getExclusiveMinimum());
      assertNull(schema1.getReadOnly());
      assertNull(schema1.getMinLength());
      assertNull(schema1.getNullable());
      assertNull(schema1.getMaxProperties());
      assertNull(schema1.getMinProperties());
      assertNull(schema1.getDeprecated());
      assertNull(schema1.getPattern());
      assertNull(mediaType2.getExample());
      assertNotNull(mediaType2);
      
      Example example0 = new Example();
      assertNull(example0.get$ref());
      assertNull(example0.getSummary());
      assertNull(example0.getExternalValue());
      assertNull(example0.getDescription());
      assertNotNull(example0);
      
      String string8 = "[reference type, class ";
      Example example1 = example0.summary(string8);
      assertSame(example0, example1);
      assertNotSame(string8, string2);
      assertNotSame(string8, string7);
      assertNotSame(string8, string5);
      assertNotSame(string8, string3);
      assertNotSame(string8, string1);
      assertNotSame(string8, string0);
      assertNotSame(string8, string4);
      assertNotSame(string8, string6);
      assertSame(example1, example0);
      assertNull(example0.get$ref());
      assertEquals("[reference type, class ", example0.getSummary());
      assertNull(example0.getExternalValue());
      assertNull(example0.getDescription());
      assertEquals("[reference type, class ", example1.getSummary());
      assertNull(example1.get$ref());
      assertNull(example1.getDescription());
      assertNull(example1.getExternalValue());
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string6));
      assertNotNull(example1);
      
      MediaType mediaType3 = mediaType2.addExamples(string7, example1);
      assertNotSame(string7, string3);
      assertSame(string7, string1);
      assertSame(string7, string0);
      assertSame(string7, string6);
      assertNotSame(string7, string2);
      assertNotSame(string7, string4);
      assertSame(string7, string5);
      assertNotSame(string7, string8);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType0, mediaType3);
      assertSame(mediaType0, mediaType2);
      assertSame(mediaType1, mediaType2);
      assertSame(mediaType1, mediaType0);
      assertSame(mediaType1, mediaType3);
      assertSame(mediaType2, mediaType1);
      assertSame(mediaType2, mediaType3);
      assertSame(mediaType2, mediaType0);
      assertSame(example0, example1);
      assertNotSame(string8, string2);
      assertNotSame(string8, string7);
      assertNotSame(string8, string5);
      assertNotSame(string8, string3);
      assertNotSame(string8, string1);
      assertNotSame(string8, string0);
      assertNotSame(string8, string4);
      assertNotSame(string8, string6);
      assertSame(example1, example0);
      assertSame(mediaType3, mediaType0);
      assertSame(mediaType3, mediaType1);
      assertSame(mediaType3, mediaType2);
      assertNull(mediaType0.getExample());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(mediaType1.getExample());
      assertNull(schema1.getName());
      assertNull(schema1.getDescription());
      assertNull(schema1.getExclusiveMaximum());
      assertNull(schema1.getUniqueItems());
      assertNull(schema1.getWriteOnly());
      assertNull(schema1.getMaxItems());
      assertNull(schema1.getMaxLength());
      assertNull(schema1.get$ref());
      assertNull(schema1.getFormat());
      assertNull(schema1.getTitle());
      assertNull(schema1.getType());
      assertNull(schema1.getMinItems());
      assertNull(schema1.getExclusiveMinimum());
      assertNull(schema1.getReadOnly());
      assertNull(schema1.getMinLength());
      assertNull(schema1.getNullable());
      assertNull(schema1.getMaxProperties());
      assertNull(schema1.getMinProperties());
      assertNull(schema1.getDeprecated());
      assertNull(schema1.getPattern());
      assertNull(mediaType2.getExample());
      assertNull(example0.get$ref());
      assertEquals("[reference type, class ", example0.getSummary());
      assertNull(example0.getExternalValue());
      assertNull(example0.getDescription());
      assertEquals("[reference type, class ", example1.getSummary());
      assertNull(example1.get$ref());
      assertNull(example1.getDescription());
      assertNull(example1.getExternalValue());
      assertNull(mediaType3.getExample());
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string8));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string6));
      assertNotNull(mediaType3);
      
      String string9 = "9FyG7I";
      Encoding encoding0 = new Encoding();
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getStyle());
      assertNull(encoding0.getAllowReserved());
      assertNull(encoding0.getExplode());
      assertNotNull(encoding0);
      
      Boolean boolean2 = Boolean.FALSE;
      assertFalse(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      Encoding encoding1 = encoding0.explode(boolean2);
      assertSame(encoding1, encoding0);
      assertSame(encoding0, encoding1);
      assertNull(encoding1.getContentType());
      assertNull(encoding1.getAllowReserved());
      assertFalse(encoding1.getExplode());
      assertNull(encoding1.getStyle());
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getStyle());
      assertNull(encoding0.getAllowReserved());
      assertFalse(encoding0.getExplode());
      assertFalse(boolean2.equals((Object)boolean1));
      assertNotNull(encoding1);
      
      Encoding encoding2 = encoding1.style(string9);
      assertSame(encoding1, encoding2);
      assertSame(encoding1, encoding0);
      assertSame(encoding2, encoding1);
      assertSame(encoding2, encoding0);
      assertNotSame(string9, string6);
      assertNotSame(string9, string8);
      assertNotSame(string9, string0);
      assertNotSame(string9, string3);
      assertNotSame(string9, string4);
      assertNotSame(string9, string1);
      assertNotSame(string9, string2);
      assertNotSame(string9, string7);
      assertNotSame(string9, string5);
      assertSame(encoding0, encoding1);
      assertSame(encoding0, encoding2);
      assertEquals("9FyG7I", encoding1.getStyle());
      assertNull(encoding1.getContentType());
      assertNull(encoding1.getAllowReserved());
      assertFalse(encoding1.getExplode());
      assertNull(encoding2.getAllowReserved());
      assertFalse(encoding2.getExplode());
      assertEquals("9FyG7I", encoding2.getStyle());
      assertNull(encoding2.getContentType());
      assertNull(encoding0.getContentType());
      assertEquals("9FyG7I", encoding0.getStyle());
      assertNull(encoding0.getAllowReserved());
      assertFalse(encoding0.getExplode());
      assertFalse(boolean2.equals((Object)boolean1));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string5));
      assertNotNull(encoding2);
      
      MediaType mediaType4 = mediaType3.addEncoding(string9, encoding2);
      assertSame(encoding1, encoding2);
      assertSame(encoding1, encoding0);
      assertSame(encoding2, encoding1);
      assertSame(encoding2, encoding0);
      assertSame(mediaType4, mediaType2);
      assertSame(mediaType4, mediaType3);
      assertSame(mediaType4, mediaType0);
      assertSame(mediaType4, mediaType1);
      assertNotSame(string7, string3);
      assertSame(string7, string1);
      assertSame(string7, string0);
      assertSame(string7, string6);
      assertNotSame(string7, string2);
      assertNotSame(string7, string4);
      assertSame(string7, string5);
      assertNotSame(string7, string9);
      assertNotSame(string7, string8);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType0, mediaType3);
      assertSame(mediaType0, mediaType4);
      assertSame(mediaType0, mediaType2);
      assertSame(mediaType1, mediaType2);
      assertSame(mediaType1, mediaType4);
      assertSame(mediaType1, mediaType0);
      assertSame(mediaType1, mediaType3);
      assertSame(mediaType2, mediaType4);
      assertSame(mediaType2, mediaType1);
      assertSame(mediaType2, mediaType3);
      assertSame(mediaType2, mediaType0);
      assertSame(example0, example1);
      assertNotSame(string8, string2);
      assertNotSame(string8, string7);
      assertNotSame(string8, string9);
      assertNotSame(string8, string5);
      assertNotSame(string8, string3);
      assertNotSame(string8, string1);
      assertNotSame(string8, string0);
      assertNotSame(string8, string4);
      assertNotSame(string8, string6);
      assertSame(example1, example0);
      assertSame(mediaType3, mediaType4);
      assertSame(mediaType3, mediaType0);
      assertSame(mediaType3, mediaType1);
      assertSame(mediaType3, mediaType2);
      assertNotSame(string9, string6);
      assertNotSame(string9, string8);
      assertNotSame(string9, string0);
      assertNotSame(string9, string3);
      assertNotSame(string9, string4);
      assertNotSame(string9, string1);
      assertNotSame(string9, string2);
      assertNotSame(string9, string7);
      assertNotSame(string9, string5);
      assertSame(encoding0, encoding1);
      assertSame(encoding0, encoding2);
      assertEquals("9FyG7I", encoding1.getStyle());
      assertNull(encoding1.getContentType());
      assertNull(encoding1.getAllowReserved());
      assertFalse(encoding1.getExplode());
      assertNull(encoding2.getAllowReserved());
      assertFalse(encoding2.getExplode());
      assertEquals("9FyG7I", encoding2.getStyle());
      assertNull(encoding2.getContentType());
      assertNull(mediaType4.getExample());
      assertNull(mediaType0.getExample());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(mediaType1.getExample());
      assertNull(schema1.getName());
      assertNull(schema1.getDescription());
      assertNull(schema1.getExclusiveMaximum());
      assertNull(schema1.getUniqueItems());
      assertNull(schema1.getWriteOnly());
      assertNull(schema1.getMaxItems());
      assertNull(schema1.getMaxLength());
      assertNull(schema1.get$ref());
      assertNull(schema1.getFormat());
      assertNull(schema1.getTitle());
      assertNull(schema1.getType());
      assertNull(schema1.getMinItems());
      assertNull(schema1.getExclusiveMinimum());
      assertNull(schema1.getReadOnly());
      assertNull(schema1.getMinLength());
      assertNull(schema1.getNullable());
      assertNull(schema1.getMaxProperties());
      assertNull(schema1.getMinProperties());
      assertNull(schema1.getDeprecated());
      assertNull(schema1.getPattern());
      assertNull(mediaType2.getExample());
      assertNull(example0.get$ref());
      assertEquals("[reference type, class ", example0.getSummary());
      assertNull(example0.getExternalValue());
      assertNull(example0.getDescription());
      assertEquals("[reference type, class ", example1.getSummary());
      assertNull(example1.get$ref());
      assertNull(example1.getDescription());
      assertNull(example1.getExternalValue());
      assertNull(mediaType3.getExample());
      assertNull(encoding0.getContentType());
      assertEquals("9FyG7I", encoding0.getStyle());
      assertNull(encoding0.getAllowReserved());
      assertFalse(encoding0.getExplode());
      assertFalse(boolean2.equals((Object)boolean1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string9));
      assertFalse(string7.equals((Object)string8));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string9));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string5));
      assertNotNull(mediaType4);
      
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exampleObject0).externalValue();
      doReturn(stringArray0[2], (String) null, (String) null).when(exampleObject0).name();
      doReturn((String) null).when(exampleObject0).summary();
      doReturn((String) null).when(exampleObject0).value();
      Optional<MediaType> optional1 = OperationParser.getMediaType(mediaType4, exampleObject0);
      assertSame(encoding1, encoding2);
      assertSame(encoding1, encoding0);
      assertSame(encoding2, encoding1);
      assertSame(encoding2, encoding0);
      assertSame(mediaType4, mediaType2);
      assertSame(mediaType4, mediaType3);
      assertSame(mediaType4, mediaType0);
      assertSame(mediaType4, mediaType1);
      assertNotSame(string7, string3);
      assertSame(string7, string1);
      assertSame(string7, string0);
      assertSame(string7, string6);
      assertNotSame(string7, string2);
      assertNotSame(string7, string4);
      assertSame(string7, string5);
      assertNotSame(string7, string9);
      assertNotSame(string7, string8);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType0, mediaType3);
      assertSame(mediaType0, mediaType4);
      assertSame(mediaType0, mediaType2);
      assertSame(mediaType1, mediaType2);
      assertSame(mediaType1, mediaType4);
      assertSame(mediaType1, mediaType0);
      assertSame(mediaType1, mediaType3);
      assertSame(mediaType2, mediaType4);
      assertSame(mediaType2, mediaType1);
      assertSame(mediaType2, mediaType3);
      assertSame(mediaType2, mediaType0);
      assertSame(example0, example1);
      assertNotSame(string8, string2);
      assertNotSame(string8, string7);
      assertNotSame(string8, string9);
      assertNotSame(string8, string5);
      assertNotSame(string8, string3);
      assertNotSame(string8, string1);
      assertNotSame(string8, string0);
      assertNotSame(string8, string4);
      assertNotSame(string8, string6);
      assertSame(example1, example0);
      assertSame(mediaType3, mediaType4);
      assertSame(mediaType3, mediaType0);
      assertSame(mediaType3, mediaType1);
      assertSame(mediaType3, mediaType2);
      assertNotSame(string9, string6);
      assertNotSame(string9, string8);
      assertNotSame(string9, string0);
      assertNotSame(string9, string3);
      assertNotSame(string9, string4);
      assertNotSame(string9, string1);
      assertNotSame(string9, string2);
      assertNotSame(string9, string7);
      assertNotSame(string9, string5);
      assertSame(encoding0, encoding1);
      assertSame(encoding0, encoding2);
      assertEquals("9FyG7I", encoding1.getStyle());
      assertNull(encoding1.getContentType());
      assertNull(encoding1.getAllowReserved());
      assertFalse(encoding1.getExplode());
      assertNull(encoding2.getAllowReserved());
      assertFalse(encoding2.getExplode());
      assertEquals("9FyG7I", encoding2.getStyle());
      assertNull(encoding2.getContentType());
      assertNull(mediaType4.getExample());
      assertNull(mediaType0.getExample());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(mediaType1.getExample());
      assertNull(schema1.getName());
      assertNull(schema1.getDescription());
      assertNull(schema1.getExclusiveMaximum());
      assertNull(schema1.getUniqueItems());
      assertNull(schema1.getWriteOnly());
      assertNull(schema1.getMaxItems());
      assertNull(schema1.getMaxLength());
      assertNull(schema1.get$ref());
      assertNull(schema1.getFormat());
      assertNull(schema1.getTitle());
      assertNull(schema1.getType());
      assertNull(schema1.getMinItems());
      assertNull(schema1.getExclusiveMinimum());
      assertNull(schema1.getReadOnly());
      assertNull(schema1.getMinLength());
      assertNull(schema1.getNullable());
      assertNull(schema1.getMaxProperties());
      assertNull(schema1.getMinProperties());
      assertNull(schema1.getDeprecated());
      assertNull(schema1.getPattern());
      assertNull(mediaType2.getExample());
      assertNull(example0.get$ref());
      assertEquals("[reference type, class ", example0.getSummary());
      assertNull(example0.getExternalValue());
      assertNull(example0.getDescription());
      assertEquals("[reference type, class ", example1.getSummary());
      assertNull(example1.get$ref());
      assertNull(example1.getDescription());
      assertNull(example1.getExternalValue());
      assertNull(mediaType3.getExample());
      assertNull(encoding0.getContentType());
      assertEquals("9FyG7I", encoding0.getStyle());
      assertNull(encoding0.getAllowReserved());
      assertFalse(encoding0.getExplode());
      assertFalse(boolean2.equals((Object)boolean1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string9));
      assertFalse(string7.equals((Object)string8));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string9));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string5));
      assertEquals(5, stringArray0.length);
      assertNotNull(optional1);
      
      LinkParameter[] linkParameterArray0 = new LinkParameter[6];
      String string10 = "";
      String string11 = null;
      String string12 = "";
      LinkParameter linkParameter0 = mock(LinkParameter.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(linkParameter0).expression();
      doReturn(string10, stringArray0[3], stringArray0[2], string11, string12).when(linkParameter0).name();
      linkParameterArray0[0] = linkParameter0;
      linkParameterArray0[1] = linkParameterArray0[0];
      linkParameterArray0[2] = linkParameterArray0[1];
      linkParameterArray0[3] = linkParameterArray0[2];
      linkParameterArray0[4] = linkParameterArray0[3];
      linkParameterArray0[5] = linkParameterArray0[4];
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameterArray0);
      assertEquals(1, map0.size());
      assertFalse(map0.isEmpty());
      assertEquals(6, linkParameterArray0.length);
      assertNotNull(map0);
  }

  @Test(timeout = 11000)
  public void test073()  throws Throwable  {
      String string0 = "<:::(2X}Y@]D+%:D:";
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(server0).description();
      doReturn(string0, (String) null).when(server0).url();
      doReturn((ServerVariable[]) null).when(server0).variables();
      // Undeclared exception!
      try { 
        OperationParser.getServer(server0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test074()  throws Throwable  {
      String string0 = "ONJfB&$(I1t9-v67";
      String string1 = "no description";
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn((Contact) null).when(info0).contact();
      doReturn(string0, (String) null).when(info0).description();
      doReturn((License) null).when(info0).license();
      doReturn(string0, (String) null).when(info0).termsOfService();
      doReturn(string0, (String) null).when(info0).title();
      doReturn(string1, (String) null).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional0 = OperationParser.getInfo(info0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(optional0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      stringArray0[2] = string0;
      stringArray0[3] = string0;
      stringArray0[4] = string0;
      stringArray0[5] = string0;
      stringArray0[6] = string0;
      boolean boolean0 = true;
      boolean boolean1 = true;
      boolean boolean2 = false;
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      String string2 = "<4TVN!G";
      int int0 = 2;
      String string3 = "";
      String string4 = null;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(stringArray0).when(schema0).allowableValues();
      doReturn(stringArray0[3], (String) null).when(schema0).defaultValue();
      doReturn(boolean0, false).when(schema0).deprecated();
      doReturn(stringArray0[2], (String) null).when(schema0).description();
      doReturn(stringArray0[5], string0, (String) null).when(schema0).example();
      doReturn(boolean1, false).when(schema0).exclusiveMaximum();
      doReturn(boolean2).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema0).externalDocs();
      doReturn(string2, (String) null).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(0).when(schema0).maxProperties();
      doReturn(int0, 0).when(schema0).minProperties();
      doReturn(string3).when(schema0).pattern();
      doReturn(boolean0, false).when(schema0).readOnly();
      doReturn(stringArray0[6], (String) null).when(schema0).ref();
      doReturn(string4).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional1 = (Optional<io.swagger.oas.models.media.Schema>)OperationParser.getSchemaFromAnnotation(schema0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(boolean0 == boolean2);
      assertFalse(boolean1 == boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(7, stringArray0.length);
      assertNotNull(optional1);
      
      String[] stringArray1 = new String[5];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string5 = "Kv[e";
      stringArray1[0] = string5;
      String string6 = ".p";
      stringArray1[1] = string6;
      String string7 = ":**+j|2!";
      stringArray1[2] = string7;
      String string8 = "5;tb";
      stringArray1[3] = string8;
      String string9 = "com.fasterxml.jackson.databind.deser.std.EnumSetDeserializer";
      stringArray1[4] = string9;
      Optional<Set<Tag>> optional2 = OperationParser.getTags(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(5, stringArray1.length);
      assertNotNull(optional2);
  }

  @Test(timeout = 11000)
  public void test075()  throws Throwable  {
      Parameter[] parameterArray0 = new Parameter[4];
      boolean boolean0 = true;
      boolean boolean1 = true;
      boolean boolean2 = true;
      Content[] contentArray0 = new Content[4];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((ExampleObject[]) null).when(content0).examples();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      contentArray0[3] = contentArray0[2];
      Content[] contentArray1 = new Content[2];
      assertFalse(contentArray1.equals((Object)contentArray0));
      
      contentArray1[0] = content0;
      contentArray1[1] = content0;
      String string0 = "";
      String string1 = "";
      String string2 = "DJZ{s&+sIM";
      String string3 = "";
      Explode explode0 = Explode.DEFAULT;
      Explode explode1 = Explode.DEFAULT;
      Explode explode2 = Explode.FALSE;
      Explode explode3 = Explode.FALSE;
      String string4 = null;
      String string5 = "P%fuugz2K@#\"Z";
      Schema schema0 = null;
      String string6 = null;
      String string7 = "_Ws?Q@OeyE3s=zUHA5";
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0, boolean0).when(parameter0).allowEmptyValue();
      doReturn(boolean2, boolean2).when(parameter0).allowReserved();
      doReturn(contentArray0).when(parameter0).content();
      doReturn(boolean2, boolean1).when(parameter0).deprecated();
      doReturn(string0).when(parameter0).description();
      doReturn(explode0, explode1, explode2).when(parameter0).explode();
      doReturn(string4).when(parameter0).in();
      doReturn(string0).when(parameter0).name();
      doReturn(boolean2, boolean0).when(parameter0).required();
      doReturn(schema0, schema0).when(parameter0).schema();
      doReturn(string1).when(parameter0).style();
      parameterArray0[0] = parameter0;
      parameterArray0[1] = parameterArray0[0];
      parameterArray0[2] = parameterArray0[1];
      parameterArray0[3] = parameterArray0[2];
      Components components0 = new Components();
      assertNotNull(components0);
      
      String string8 = "#/components/schemas/";
      SecurityScheme securityScheme0 = new SecurityScheme();
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getBearerFormat());
      assertNotNull(securityScheme0);
      
      Components components1 = components0.addSecuritySchemes(string8, securityScheme0);
      assertNotSame(string8, string1);
      assertNotSame(string8, string3);
      assertNotSame(string8, string5);
      assertNotSame(string8, string2);
      assertNotSame(string8, string7);
      assertNotSame(string8, string0);
      assertSame(components1, components0);
      assertSame(components0, components1);
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getBearerFormat());
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string0));
      assertNotNull(components1);
      
      io.swagger.oas.models.media.Schema<String> schema1 = new io.swagger.oas.models.media.Schema<String>();
      assertNull(schema1.getExclusiveMaximum());
      assertNull(schema1.getNullable());
      assertNull(schema1.getDescription());
      assertNull(schema1.getName());
      assertNull(schema1.getMinItems());
      assertNull(schema1.getMaxItems());
      assertNull(schema1.get$ref());
      assertNull(schema1.getPattern());
      assertNull(schema1.getFormat());
      assertNull(schema1.getMinProperties());
      assertNull(schema1.getMaxLength());
      assertNull(schema1.getTitle());
      assertNull(schema1.getMaxProperties());
      assertNull(schema1.getExclusiveMinimum());
      assertNull(schema1.getWriteOnly());
      assertNull(schema1.getReadOnly());
      assertNull(schema1.getDeprecated());
      assertNull(schema1.getMinLength());
      assertNull(schema1.getType());
      assertNull(schema1.getUniqueItems());
      assertNotNull(schema1);
      
      Map<String, io.swagger.oas.models.media.Schema> map0 = (Map<String, io.swagger.oas.models.media.Schema>)schema1.getProperties();
      assertNull(schema1.getExclusiveMaximum());
      assertNull(schema1.getNullable());
      assertNull(schema1.getDescription());
      assertNull(schema1.getName());
      assertNull(schema1.getMinItems());
      assertNull(schema1.getMaxItems());
      assertNull(schema1.get$ref());
      assertNull(schema1.getPattern());
      assertNull(schema1.getFormat());
      assertNull(schema1.getMinProperties());
      assertNull(schema1.getMaxLength());
      assertNull(schema1.getTitle());
      assertNull(schema1.getMaxProperties());
      assertNull(schema1.getExclusiveMinimum());
      assertNull(schema1.getWriteOnly());
      assertNull(schema1.getReadOnly());
      assertNull(schema1.getDeprecated());
      assertNull(schema1.getMinLength());
      assertNull(schema1.getType());
      assertNull(schema1.getUniqueItems());
      assertNull(map0);
      
      Components components2 = components1.schemas(map0);
      assertNotSame(string8, string1);
      assertNotSame(string8, string3);
      assertNotSame(string8, string5);
      assertNotSame(string8, string2);
      assertNotSame(string8, string7);
      assertNotSame(string8, string0);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getBearerFormat());
      assertNull(schema1.getExclusiveMaximum());
      assertNull(schema1.getNullable());
      assertNull(schema1.getDescription());
      assertNull(schema1.getName());
      assertNull(schema1.getMinItems());
      assertNull(schema1.getMaxItems());
      assertNull(schema1.get$ref());
      assertNull(schema1.getPattern());
      assertNull(schema1.getFormat());
      assertNull(schema1.getMinProperties());
      assertNull(schema1.getMaxLength());
      assertNull(schema1.getTitle());
      assertNull(schema1.getMaxProperties());
      assertNull(schema1.getExclusiveMinimum());
      assertNull(schema1.getWriteOnly());
      assertNull(schema1.getReadOnly());
      assertNull(schema1.getDeprecated());
      assertNull(schema1.getMinLength());
      assertNull(schema1.getType());
      assertNull(schema1.getUniqueItems());
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string0));
      assertNotNull(components2);
      
      String string9 = "pM$_*";
      io.swagger.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.oas.models.responses.ApiResponse();
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      assertNotNull(apiResponse0);
      
      Encoding encoding0 = new Encoding();
      assertNull(encoding0.getStyle());
      assertNull(encoding0.getExplode());
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getAllowReserved());
      assertNotNull(encoding0);
      
      Boolean boolean3 = null;
      Encoding encoding1 = encoding0.allowReserved(boolean3);
      assertSame(encoding0, encoding1);
      assertSame(encoding1, encoding0);
      assertNull(encoding0.getStyle());
      assertNull(encoding0.getExplode());
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getAllowReserved());
      assertNull(encoding1.getStyle());
      assertNull(encoding1.getContentType());
      assertNull(encoding1.getAllowReserved());
      assertNull(encoding1.getExplode());
      assertNotNull(encoding1);
      
      Boolean boolean4 = Boolean.valueOf(string8);
      assertNotSame(string8, string1);
      assertNotSame(string8, string3);
      assertNotSame(string8, string9);
      assertNotSame(string8, string5);
      assertNotSame(string8, string2);
      assertNotSame(string8, string7);
      assertNotSame(string8, string0);
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string9));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string0));
      assertFalse(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean2));
      assertNotNull(boolean4);
      assertFalse(boolean4);
      
      Encoding encoding2 = encoding1.explode(boolean4);
      assertNotSame(string8, string1);
      assertNotSame(string8, string3);
      assertNotSame(string8, string9);
      assertNotSame(string8, string5);
      assertNotSame(string8, string2);
      assertNotSame(string8, string7);
      assertNotSame(string8, string0);
      assertSame(encoding0, encoding1);
      assertSame(encoding0, encoding2);
      assertSame(encoding1, encoding2);
      assertSame(encoding1, encoding0);
      assertSame(encoding2, encoding0);
      assertSame(encoding2, encoding1);
      assertFalse(encoding0.getExplode());
      assertNull(encoding0.getStyle());
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getAllowReserved());
      assertNull(encoding1.getStyle());
      assertNull(encoding1.getContentType());
      assertFalse(encoding1.getExplode());
      assertNull(encoding1.getAllowReserved());
      assertNull(encoding2.getContentType());
      assertNull(encoding2.getStyle());
      assertNull(encoding2.getAllowReserved());
      assertFalse(encoding2.getExplode());
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string9));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string0));
      assertFalse(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean2));
      assertNotNull(encoding2);
      
      String string10 = "";
      Encoding encoding3 = encoding2.contentType(string10);
      assertNotSame(string8, string1);
      assertNotSame(string8, string3);
      assertNotSame(string8, string9);
      assertNotSame(string8, string5);
      assertNotSame(string8, string2);
      assertNotSame(string8, string7);
      assertNotSame(string8, string0);
      assertNotSame(string8, string10);
      assertSame(encoding0, encoding1);
      assertSame(encoding0, encoding2);
      assertSame(encoding0, encoding3);
      assertSame(encoding1, encoding2);
      assertSame(encoding1, encoding0);
      assertSame(encoding1, encoding3);
      assertSame(encoding2, encoding0);
      assertSame(encoding2, encoding3);
      assertSame(encoding2, encoding1);
      assertNotSame(string10, string7);
      assertSame(string10, string3);
      assertNotSame(string10, string2);
      assertNotSame(string10, string9);
      assertSame(string10, string0);
      assertNotSame(string10, string5);
      assertNotSame(string10, string8);
      assertSame(string10, string1);
      assertSame(encoding3, encoding0);
      assertSame(encoding3, encoding2);
      assertSame(encoding3, encoding1);
      assertFalse(encoding0.getExplode());
      assertNull(encoding0.getStyle());
      assertEquals("", encoding0.getContentType());
      assertNull(encoding0.getAllowReserved());
      assertNull(encoding1.getStyle());
      assertEquals("", encoding1.getContentType());
      assertFalse(encoding1.getExplode());
      assertNull(encoding1.getAllowReserved());
      assertEquals("", encoding2.getContentType());
      assertNull(encoding2.getStyle());
      assertNull(encoding2.getAllowReserved());
      assertFalse(encoding2.getExplode());
      assertNull(encoding3.getStyle());
      assertFalse(encoding3.getExplode());
      assertNull(encoding3.getAllowReserved());
      assertEquals("", encoding3.getContentType());
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string9));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string10));
      assertFalse(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean2));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string8));
      assertNotNull(encoding3);
      
      io.swagger.oas.models.media.Schema<RequestBody> schema2 = new io.swagger.oas.models.media.Schema<RequestBody>();
      assertNull(schema2.getReadOnly());
      assertNull(schema2.getExclusiveMinimum());
      assertNull(schema2.getMinItems());
      assertNull(schema2.getDeprecated());
      assertNull(schema2.getMaxItems());
      assertNull(schema2.getUniqueItems());
      assertNull(schema2.getNullable());
      assertNull(schema2.getDescription());
      assertNull(schema2.getExclusiveMaximum());
      assertNull(schema2.getMaxLength());
      assertNull(schema2.get$ref());
      assertNull(schema2.getTitle());
      assertNull(schema2.getMaxProperties());
      assertNull(schema2.getMinProperties());
      assertNull(schema2.getWriteOnly());
      assertNull(schema2.getMinLength());
      assertNull(schema2.getType());
      assertNull(schema2.getName());
      assertNull(schema2.getFormat());
      assertNull(schema2.getPattern());
      assertNotNull(schema2);
      
      Boolean boolean5 = schema2.getUniqueItems();
      assertNull(schema2.getReadOnly());
      assertNull(schema2.getExclusiveMinimum());
      assertNull(schema2.getMinItems());
      assertNull(schema2.getDeprecated());
      assertNull(schema2.getMaxItems());
      assertNull(schema2.getUniqueItems());
      assertNull(schema2.getNullable());
      assertNull(schema2.getDescription());
      assertNull(schema2.getExclusiveMaximum());
      assertNull(schema2.getMaxLength());
      assertNull(schema2.get$ref());
      assertNull(schema2.getTitle());
      assertNull(schema2.getMaxProperties());
      assertNull(schema2.getMinProperties());
      assertNull(schema2.getWriteOnly());
      assertNull(schema2.getMinLength());
      assertNull(schema2.getType());
      assertNull(schema2.getName());
      assertNull(schema2.getFormat());
      assertNull(schema2.getPattern());
      assertNull(boolean5);
      
      Encoding encoding4 = encoding1.explode(boolean5);
      assertSame(encoding4, encoding0);
      assertSame(encoding4, encoding2);
      assertSame(encoding4, encoding3);
      assertSame(encoding4, encoding1);
      assertSame(encoding0, encoding4);
      assertSame(encoding0, encoding1);
      assertSame(encoding0, encoding2);
      assertSame(encoding0, encoding3);
      assertSame(encoding1, encoding2);
      assertSame(encoding1, encoding0);
      assertSame(encoding1, encoding3);
      assertSame(encoding1, encoding4);
      assertEquals("", encoding4.getContentType());
      assertNull(encoding4.getStyle());
      assertNull(encoding4.getExplode());
      assertNull(encoding4.getAllowReserved());
      assertNull(encoding0.getStyle());
      assertNull(encoding0.getExplode());
      assertEquals("", encoding0.getContentType());
      assertNull(encoding0.getAllowReserved());
      assertNull(encoding1.getStyle());
      assertEquals("", encoding1.getContentType());
      assertNull(encoding1.getAllowReserved());
      assertNull(encoding1.getExplode());
      assertNull(schema2.getReadOnly());
      assertNull(schema2.getExclusiveMinimum());
      assertNull(schema2.getMinItems());
      assertNull(schema2.getDeprecated());
      assertNull(schema2.getMaxItems());
      assertNull(schema2.getUniqueItems());
      assertNull(schema2.getNullable());
      assertNull(schema2.getDescription());
      assertNull(schema2.getExclusiveMaximum());
      assertNull(schema2.getMaxLength());
      assertNull(schema2.get$ref());
      assertNull(schema2.getTitle());
      assertNull(schema2.getMaxProperties());
      assertNull(schema2.getMinProperties());
      assertNull(schema2.getWriteOnly());
      assertNull(schema2.getMinLength());
      assertNull(schema2.getType());
      assertNull(schema2.getName());
      assertNull(schema2.getFormat());
      assertNull(schema2.getPattern());
      assertNotNull(encoding4);
      
      Map<String, Header> map1 = encoding3.getHeaders();
      assertNotSame(string8, string1);
      assertNotSame(string8, string3);
      assertNotSame(string8, string9);
      assertNotSame(string8, string5);
      assertNotSame(string8, string2);
      assertNotSame(string8, string7);
      assertNotSame(string8, string0);
      assertNotSame(string8, string10);
      assertSame(encoding0, encoding4);
      assertSame(encoding0, encoding1);
      assertSame(encoding0, encoding2);
      assertSame(encoding0, encoding3);
      assertSame(encoding1, encoding2);
      assertSame(encoding1, encoding0);
      assertSame(encoding1, encoding3);
      assertSame(encoding1, encoding4);
      assertSame(encoding2, encoding0);
      assertSame(encoding2, encoding3);
      assertSame(encoding2, encoding1);
      assertSame(encoding2, encoding4);
      assertNotSame(string10, string7);
      assertSame(string10, string3);
      assertNotSame(string10, string2);
      assertNotSame(string10, string9);
      assertSame(string10, string0);
      assertNotSame(string10, string5);
      assertNotSame(string10, string8);
      assertSame(string10, string1);
      assertSame(encoding3, encoding0);
      assertSame(encoding3, encoding2);
      assertSame(encoding3, encoding4);
      assertSame(encoding3, encoding1);
      assertNull(encoding0.getStyle());
      assertNull(encoding0.getExplode());
      assertEquals("", encoding0.getContentType());
      assertNull(encoding0.getAllowReserved());
      assertNull(encoding1.getStyle());
      assertEquals("", encoding1.getContentType());
      assertNull(encoding1.getAllowReserved());
      assertNull(encoding1.getExplode());
      assertEquals("", encoding2.getContentType());
      assertNull(encoding2.getStyle());
      assertNull(encoding2.getAllowReserved());
      assertNull(encoding2.getExplode());
      assertNull(encoding3.getStyle());
      assertNull(encoding3.getExplode());
      assertNull(encoding3.getAllowReserved());
      assertEquals("", encoding3.getContentType());
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string9));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string10));
      assertFalse(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean2));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string8));
      assertNull(map1);
      
      Components components3 = components2.headers(map1);
      assertNotSame(string8, string1);
      assertNotSame(string8, string3);
      assertNotSame(string8, string9);
      assertNotSame(string8, string5);
      assertNotSame(string8, string2);
      assertNotSame(string8, string7);
      assertNotSame(string8, string0);
      assertNotSame(string8, string10);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertSame(components2, components3);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(encoding0, encoding4);
      assertSame(encoding0, encoding1);
      assertSame(encoding0, encoding2);
      assertSame(encoding0, encoding3);
      assertSame(encoding1, encoding2);
      assertSame(encoding1, encoding0);
      assertSame(encoding1, encoding3);
      assertSame(encoding1, encoding4);
      assertSame(encoding2, encoding0);
      assertSame(encoding2, encoding3);
      assertSame(encoding2, encoding1);
      assertSame(encoding2, encoding4);
      assertNotSame(string10, string7);
      assertSame(string10, string3);
      assertNotSame(string10, string2);
      assertNotSame(string10, string9);
      assertSame(string10, string0);
      assertNotSame(string10, string5);
      assertNotSame(string10, string8);
      assertSame(string10, string1);
      assertSame(encoding3, encoding0);
      assertSame(encoding3, encoding2);
      assertSame(encoding3, encoding4);
      assertSame(encoding3, encoding1);
      assertSame(components3, components2);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getBearerFormat());
      assertNull(schema1.getExclusiveMaximum());
      assertNull(schema1.getNullable());
      assertNull(schema1.getDescription());
      assertNull(schema1.getName());
      assertNull(schema1.getMinItems());
      assertNull(schema1.getMaxItems());
      assertNull(schema1.get$ref());
      assertNull(schema1.getPattern());
      assertNull(schema1.getFormat());
      assertNull(schema1.getMinProperties());
      assertNull(schema1.getMaxLength());
      assertNull(schema1.getTitle());
      assertNull(schema1.getMaxProperties());
      assertNull(schema1.getExclusiveMinimum());
      assertNull(schema1.getWriteOnly());
      assertNull(schema1.getReadOnly());
      assertNull(schema1.getDeprecated());
      assertNull(schema1.getMinLength());
      assertNull(schema1.getType());
      assertNull(schema1.getUniqueItems());
      assertNull(encoding0.getStyle());
      assertNull(encoding0.getExplode());
      assertEquals("", encoding0.getContentType());
      assertNull(encoding0.getAllowReserved());
      assertNull(encoding1.getStyle());
      assertEquals("", encoding1.getContentType());
      assertNull(encoding1.getAllowReserved());
      assertNull(encoding1.getExplode());
      assertEquals("", encoding2.getContentType());
      assertNull(encoding2.getStyle());
      assertNull(encoding2.getAllowReserved());
      assertNull(encoding2.getExplode());
      assertNull(encoding3.getStyle());
      assertNull(encoding3.getExplode());
      assertNull(encoding3.getAllowReserved());
      assertEquals("", encoding3.getContentType());
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string9));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string10));
      assertFalse(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean2));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string8));
      assertNotNull(components3);
      
      io.swagger.oas.models.links.Link link0 = new io.swagger.oas.models.links.Link();
      assertNull(link0.get$ref());
      assertNull(link0.getDescription());
      assertNull(link0.getOperationId());
      assertNull(link0.getOperationRef());
      assertNotNull(link0);
      
      io.swagger.oas.models.responses.ApiResponse apiResponse1 = apiResponse0.link(string9, link0);
      assertSame(apiResponse1, apiResponse0);
      assertNotSame(string9, string10);
      assertNotSame(string9, string5);
      assertNotSame(string9, string8);
      assertNotSame(string9, string7);
      assertNotSame(string9, string0);
      assertNotSame(string9, string2);
      assertNotSame(string9, string1);
      assertNotSame(string9, string3);
      assertSame(apiResponse0, apiResponse1);
      assertNull(link0.get$ref());
      assertNull(link0.getDescription());
      assertNull(link0.getOperationId());
      assertNull(link0.getOperationRef());
      assertNull(apiResponse1.get$ref());
      assertNull(apiResponse1.getDescription());
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      assertFalse(string9.equals((Object)string10));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string3));
      assertNotNull(apiResponse1);
      
      Map<String, Example> map2 = null;
      Components components4 = components1.examples(map2);
      assertNotSame(string8, string1);
      assertNotSame(string8, string3);
      assertNotSame(string8, string9);
      assertNotSame(string8, string5);
      assertNotSame(string8, string2);
      assertNotSame(string8, string7);
      assertNotSame(string8, string0);
      assertNotSame(string8, string10);
      assertSame(components1, components2);
      assertSame(components1, components4);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertSame(components4, components1);
      assertSame(components4, components2);
      assertSame(components4, components3);
      assertSame(components4, components0);
      assertSame(components0, components4);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getBearerFormat());
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string9));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string10));
      assertNotNull(components4);
      
      // Undeclared exception!
      try { 
        OperationParser.getParametersList(parameterArray0, components4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test076()  throws Throwable  {
      Link[] linkArray0 = new Link[0];
      Map<String, io.swagger.oas.models.links.Link> map0 = OperationParser.getLinks(linkArray0);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals(0, linkArray0.length);
      assertNotNull(map0);
      
      Info info0 = null;
      Optional<io.swagger.oas.models.info.Info> optional0 = OperationParser.getInfo(info0);
      assertNotNull(optional0);
      
      MediaType mediaType0 = new MediaType();
      assertNull(mediaType0.getExample());
      assertNotNull(mediaType0);
      
      io.swagger.oas.models.parameters.Parameter parameter0 = new io.swagger.oas.models.parameters.Parameter();
      assertNull(parameter0.getAllowReserved());
      assertNull(parameter0.getRequired());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getName());
      assertNull(parameter0.getExample());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getIn());
      assertNull(parameter0.get$ref());
      assertNull(parameter0.getExplode());
      assertNotNull(parameter0);
      
      Map<String, Example> map1 = parameter0.getExamples();
      assertNull(parameter0.getAllowReserved());
      assertNull(parameter0.getRequired());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getName());
      assertNull(parameter0.getExample());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getIn());
      assertNull(parameter0.get$ref());
      assertNull(parameter0.getExplode());
      assertNull(map1);
      
      MediaType mediaType1 = mediaType0.examples(map1);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType1, mediaType0);
      assertNull(mediaType0.getExample());
      assertNull(parameter0.getAllowReserved());
      assertNull(parameter0.getRequired());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getName());
      assertNull(parameter0.getExample());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getIn());
      assertNull(parameter0.get$ref());
      assertNull(parameter0.getExplode());
      assertNull(mediaType1.getExample());
      assertNotNull(mediaType1);
      
      Map<String, Encoding> map2 = null;
      MediaType mediaType2 = mediaType1.encoding(map2);
      assertSame(mediaType0, mediaType2);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType1, mediaType2);
      assertSame(mediaType1, mediaType0);
      assertSame(mediaType2, mediaType0);
      assertSame(mediaType2, mediaType1);
      assertNull(mediaType0.getExample());
      assertNull(parameter0.getAllowReserved());
      assertNull(parameter0.getRequired());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getName());
      assertNull(parameter0.getExample());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getIn());
      assertNull(parameter0.get$ref());
      assertNull(parameter0.getExplode());
      assertNull(mediaType1.getExample());
      assertNull(mediaType2.getExample());
      assertNotNull(mediaType2);
      
      String string0 = "";
      MediaType mediaType3 = mediaType2.example(string0);
      assertSame(mediaType0, mediaType3);
      assertSame(mediaType0, mediaType2);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType1, mediaType3);
      assertSame(mediaType1, mediaType2);
      assertSame(mediaType1, mediaType0);
      assertSame(mediaType2, mediaType3);
      assertSame(mediaType2, mediaType0);
      assertSame(mediaType2, mediaType1);
      assertSame(mediaType3, mediaType1);
      assertSame(mediaType3, mediaType0);
      assertSame(mediaType3, mediaType2);
      assertEquals("", mediaType0.getExample());
      assertNull(parameter0.getAllowReserved());
      assertNull(parameter0.getRequired());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getName());
      assertNull(parameter0.getExample());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getIn());
      assertNull(parameter0.get$ref());
      assertNull(parameter0.getExplode());
      assertEquals("", mediaType1.getExample());
      assertEquals("", mediaType2.getExample());
      assertEquals("", mediaType3.getExample());
      assertNotNull(mediaType3);
      
      String string1 = "b;ylWS{hnv$'9";
      Example example0 = new Example();
      assertNull(example0.get$ref());
      assertNull(example0.getExternalValue());
      assertNull(example0.getDescription());
      assertNull(example0.getSummary());
      assertNotNull(example0);
      
      MediaType mediaType4 = mediaType3.addExamples(string1, example0);
      assertSame(mediaType0, mediaType3);
      assertSame(mediaType0, mediaType2);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType0, mediaType4);
      assertSame(mediaType1, mediaType4);
      assertSame(mediaType1, mediaType3);
      assertSame(mediaType1, mediaType2);
      assertSame(mediaType1, mediaType0);
      assertSame(mediaType2, mediaType3);
      assertSame(mediaType2, mediaType4);
      assertSame(mediaType2, mediaType0);
      assertSame(mediaType2, mediaType1);
      assertNotSame(string0, string1);
      assertSame(mediaType3, mediaType1);
      assertSame(mediaType3, mediaType0);
      assertSame(mediaType3, mediaType4);
      assertSame(mediaType3, mediaType2);
      assertNotSame(string1, string0);
      assertSame(mediaType4, mediaType1);
      assertSame(mediaType4, mediaType0);
      assertSame(mediaType4, mediaType3);
      assertSame(mediaType4, mediaType2);
      assertEquals("", mediaType0.getExample());
      assertNull(parameter0.getAllowReserved());
      assertNull(parameter0.getRequired());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getName());
      assertNull(parameter0.getExample());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getIn());
      assertNull(parameter0.get$ref());
      assertNull(parameter0.getExplode());
      assertEquals("", mediaType1.getExample());
      assertEquals("", mediaType2.getExample());
      assertEquals("", mediaType3.getExample());
      assertNull(example0.get$ref());
      assertNull(example0.getExternalValue());
      assertNull(example0.getDescription());
      assertNull(example0.getSummary());
      assertEquals("", mediaType4.getExample());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(mediaType4);
      
      String string2 = ">|RVpNf;#|Q6|Nel";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exampleObject0).externalValue();
      doReturn(string2, (String) null, (String) null, (String) null, (String) null).when(exampleObject0).name();
      doReturn((String) null).when(exampleObject0).summary();
      doReturn((String) null).when(exampleObject0).value();
      Optional<MediaType> optional1 = OperationParser.getMediaType(mediaType3, exampleObject0);
      assertSame(mediaType0, mediaType3);
      assertSame(mediaType0, mediaType2);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType0, mediaType4);
      assertSame(mediaType1, mediaType4);
      assertSame(mediaType1, mediaType3);
      assertSame(mediaType1, mediaType2);
      assertSame(mediaType1, mediaType0);
      assertSame(mediaType2, mediaType3);
      assertSame(mediaType2, mediaType4);
      assertSame(mediaType2, mediaType0);
      assertSame(mediaType2, mediaType1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(mediaType3, mediaType1);
      assertSame(mediaType3, mediaType0);
      assertSame(mediaType3, mediaType4);
      assertSame(mediaType3, mediaType2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertEquals("", mediaType0.getExample());
      assertNull(parameter0.getAllowReserved());
      assertNull(parameter0.getRequired());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getName());
      assertNull(parameter0.getExample());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getIn());
      assertNull(parameter0.get$ref());
      assertNull(parameter0.getExplode());
      assertEquals("", mediaType1.getExample());
      assertEquals("", mediaType2.getExample());
      assertEquals("", mediaType3.getExample());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(optional1);
      
      Content[] contentArray0 = new Content[5];
      ExampleObject[] exampleObjectArray0 = new ExampleObject[3];
      exampleObjectArray0[0] = exampleObject0;
      exampleObjectArray0[1] = exampleObjectArray0[0];
      exampleObjectArray0[2] = exampleObject0;
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Object) exampleObjectArray0, (Object) null).when(content0).examples();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      contentArray0[3] = contentArray0[2];
      contentArray0[4] = contentArray0[3];
      Components components0 = new Components();
      assertNotNull(components0);
      
      String string3 = "*/*";
      Header header0 = new Header();
      assertNull(header0.getExample());
      assertNull(header0.get$ref());
      assertNull(header0.getDescription());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getRequired());
      assertNull(header0.getDeprecated());
      assertNull(header0.getExplode());
      assertNull(header0.getStyle());
      assertNotNull(header0);
      
      Components components1 = components0.addHeaders(string3, header0);
      assertSame(components1, components0);
      assertSame(components0, components1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNull(header0.getExample());
      assertNull(header0.get$ref());
      assertNull(header0.getDescription());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getRequired());
      assertNull(header0.getDeprecated());
      assertNull(header0.getExplode());
      assertNull(header0.getStyle());
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(components1);
      
      Map<String, RequestBody> map3 = components1.getRequestBodies();
      assertSame(components1, components0);
      assertSame(components0, components1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNull(header0.getExample());
      assertNull(header0.get$ref());
      assertNull(header0.getDescription());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getRequired());
      assertNull(header0.getDeprecated());
      assertNull(header0.getExplode());
      assertNull(header0.getStyle());
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNull(map3);
      
      Components components2 = components1.requestBodies(map3);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNull(header0.getExample());
      assertNull(header0.get$ref());
      assertNull(header0.getDescription());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getRequired());
      assertNull(header0.getDeprecated());
      assertNull(header0.getExplode());
      assertNull(header0.getStyle());
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(components2);
      
      Map<String, Header> map4 = components2.getHeaders();
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertFalse(map4.isEmpty());
      assertEquals(1, map4.size());
      assertNull(header0.getExample());
      assertNull(header0.get$ref());
      assertNull(header0.getDescription());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getRequired());
      assertNull(header0.getDeprecated());
      assertNull(header0.getExplode());
      assertNull(header0.getStyle());
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(map4);
      
      Components components3 = components2.headers(map4);
      assertSame(components1, components3);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertSame(components2, components3);
      assertSame(components3, components2);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertFalse(map4.isEmpty());
      assertEquals(1, map4.size());
      assertNull(header0.getExample());
      assertNull(header0.get$ref());
      assertNull(header0.getDescription());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getRequired());
      assertNull(header0.getDeprecated());
      assertNull(header0.getExplode());
      assertNull(header0.getStyle());
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(components3);
      
      String string4 = "E'Lll*~7*jUa$017G";
      // Undeclared exception!
      try { 
        OperationParser.getContents(contentArray0, components1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test077()  throws Throwable  {
      String string0 = "";
      String string1 = "";
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(server0).description();
      doReturn(string1).when(server0).url();
      Optional<io.swagger.oas.models.servers.Server> optional0 = OperationParser.getServer(server0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotNull(optional0);
      
      LinkParameter[] linkParameterArray0 = new LinkParameter[5];
      String string2 = "#temporary-name";
      String string3 = "default";
      String string4 = "";
      LinkParameter linkParameter0 = mock(LinkParameter.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(linkParameter0).expression();
      doReturn(string2, string2, string1, string3, string4).when(linkParameter0).name();
      linkParameterArray0[0] = linkParameter0;
      linkParameterArray0[1] = linkParameterArray0[0];
      linkParameterArray0[2] = linkParameterArray0[1];
      linkParameterArray0[3] = linkParameterArray0[2];
      // Undeclared exception!
      try { 
        OperationParser.getLinkParameters(linkParameterArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test078()  throws Throwable  {
      String[] stringArray0 = new String[9];
      String string0 = "#/components/schemas/";
      stringArray0[0] = string0;
      String string1 = "7ZCw;$G2]U";
      stringArray0[1] = string1;
      String string2 = "#/components/schemas/";
      stringArray0[2] = string2;
      String string3 = "lJ3=d9C";
      stringArray0[3] = string3;
      String string4 = "Can not deserialize value of type EncodingProperty.StyleEnum from String \"%s\": value not one of declared Enum instance names: %s";
      stringArray0[4] = string4;
      String string5 = ".5";
      stringArray0[5] = string5;
      String string6 = "default";
      stringArray0[6] = string6;
      String string7 = "g3d/dNRvV<|t9$";
      stringArray0[7] = string7;
      String string8 = "#/components/schemas/";
      stringArray0[8] = string8;
      Optional<Set<Tag>> optional0 = OperationParser.getTags(stringArray0);
      assertEquals(9, stringArray0.length);
      assertNotNull(optional0);
      
      boolean boolean0 = true;
      String string9 = ",Lmv@";
      String string10 = "Dhs[N";
      boolean boolean1 = true;
      String string11 = "";
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string11).when(externalDocumentation0).description();
      doReturn(string6, (String) null).when(externalDocumentation0).url();
      String string12 = "";
      int int0 = 3;
      int int1 = (-821);
      boolean boolean2 = true;
      String string13 = "#/components/schemas/";
      String string14 = ".@ A]Du1YC'ca3(2";
      boolean boolean3 = false;
      String string15 = "";
      boolean boolean4 = false;
      boolean boolean5 = true;
      String string16 = "java.lang";
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(stringArray0).when(schema0).allowableValues();
      doReturn(string0, string14).when(schema0).defaultValue();
      doReturn(boolean0, boolean3).when(schema0).deprecated();
      doReturn(string9, stringArray0[2]).when(schema0).description();
      doReturn(string10, string5, string11).when(schema0).example();
      doReturn(boolean0, boolean4).when(schema0).exclusiveMaximum();
      doReturn(boolean1, boolean5).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema0).externalDocs();
      doReturn(string12).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(int0, 0).when(schema0).maxProperties();
      doReturn(int1).when(schema0).minProperties();
      doReturn(stringArray0[5], string16).when(schema0).pattern();
      doReturn(boolean2, boolean1).when(schema0).readOnly();
      doReturn(stringArray0[4], stringArray0[3]).when(schema0).ref();
      doReturn(string13, string4).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional1 = (Optional<io.swagger.oas.models.media.Schema>)OperationParser.getSchemaFromAnnotation(schema0);
      assertSame(string15, string12);
      assertNotSame(string15, string2);
      assertNotSame(string15, string9);
      assertNotSame(string15, string0);
      assertNotSame(string15, string7);
      assertNotSame(string15, string3);
      assertNotSame(string15, string6);
      assertNotSame(string15, string10);
      assertNotSame(string15, string14);
      assertNotSame(string15, string16);
      assertSame(string15, string11);
      assertNotSame(string15, string8);
      assertNotSame(string15, string13);
      assertNotSame(string15, string1);
      assertNotSame(string15, string5);
      assertNotSame(string15, string4);
      assertNotSame(string0, string5);
      assertNotSame(string0, string11);
      assertNotSame(string0, string6);
      assertNotSame(string0, string15);
      assertSame(string0, string2);
      assertNotSame(string0, string16);
      assertNotSame(string0, string4);
      assertNotSame(string0, string1);
      assertNotSame(string0, string7);
      assertSame(string0, string8);
      assertNotSame(string0, string12);
      assertNotSame(string0, string14);
      assertNotSame(string0, string10);
      assertSame(string0, string13);
      assertNotSame(string0, string3);
      assertNotSame(string0, string9);
      assertNotSame(string16, string12);
      assertNotSame(string16, string8);
      assertNotSame(string16, string1);
      assertNotSame(string16, string11);
      assertNotSame(string16, string0);
      assertNotSame(string16, string2);
      assertNotSame(string16, string7);
      assertNotSame(string16, string4);
      assertNotSame(string16, string6);
      assertNotSame(string16, string15);
      assertNotSame(string16, string13);
      assertNotSame(string16, string5);
      assertNotSame(string16, string14);
      assertNotSame(string16, string9);
      assertNotSame(string16, string3);
      assertNotSame(string16, string10);
      assertNotSame(string4, string12);
      assertNotSame(string4, string0);
      assertNotSame(string4, string2);
      assertNotSame(string4, string9);
      assertNotSame(string4, string3);
      assertNotSame(string4, string14);
      assertNotSame(string4, string8);
      assertNotSame(string4, string10);
      assertNotSame(string4, string11);
      assertNotSame(string4, string5);
      assertNotSame(string4, string13);
      assertNotSame(string4, string7);
      assertNotSame(string4, string6);
      assertNotSame(string4, string1);
      assertNotSame(string4, string15);
      assertNotSame(string4, string16);
      assertNotSame(string5, string11);
      assertNotSame(string5, string13);
      assertNotSame(string5, string14);
      assertNotSame(string5, string7);
      assertNotSame(string5, string6);
      assertNotSame(string5, string1);
      assertNotSame(string5, string15);
      assertNotSame(string5, string16);
      assertNotSame(string5, string4);
      assertNotSame(string5, string12);
      assertNotSame(string5, string0);
      assertNotSame(string5, string2);
      assertNotSame(string5, string9);
      assertNotSame(string5, string3);
      assertNotSame(string5, string8);
      assertNotSame(string5, string10);
      assertNotSame(string6, string2);
      assertNotSame(string6, string12);
      assertNotSame(string6, string15);
      assertNotSame(string6, string0);
      assertNotSame(string6, string9);
      assertNotSame(string6, string7);
      assertNotSame(string6, string3);
      assertNotSame(string6, string10);
      assertNotSame(string6, string14);
      assertNotSame(string6, string8);
      assertNotSame(string6, string16);
      assertNotSame(string6, string13);
      assertNotSame(string6, string1);
      assertNotSame(string6, string5);
      assertNotSame(string6, string11);
      assertNotSame(string6, string4);
      assertNotSame(string9, string10);
      assertNotSame(string9, string14);
      assertNotSame(string9, string16);
      assertNotSame(string9, string8);
      assertNotSame(string9, string11);
      assertNotSame(string9, string12);
      assertNotSame(string9, string0);
      assertNotSame(string9, string2);
      assertNotSame(string9, string7);
      assertNotSame(string9, string13);
      assertNotSame(string9, string1);
      assertNotSame(string9, string15);
      assertNotSame(string9, string4);
      assertNotSame(string9, string5);
      assertNotSame(string9, string3);
      assertNotSame(string9, string6);
      assertNotSame(string10, string4);
      assertNotSame(string10, string7);
      assertNotSame(string10, string2);
      assertNotSame(string10, string12);
      assertNotSame(string10, string0);
      assertNotSame(string10, string1);
      assertNotSame(string10, string13);
      assertNotSame(string10, string8);
      assertNotSame(string10, string14);
      assertNotSame(string10, string16);
      assertNotSame(string10, string11);
      assertNotSame(string10, string6);
      assertNotSame(string10, string9);
      assertNotSame(string10, string3);
      assertNotSame(string10, string15);
      assertNotSame(string10, string5);
      assertNotSame(string11, string14);
      assertNotSame(string11, string16);
      assertNotSame(string11, string8);
      assertNotSame(string11, string10);
      assertNotSame(string11, string13);
      assertNotSame(string11, string1);
      assertNotSame(string11, string6);
      assertNotSame(string11, string3);
      assertNotSame(string11, string9);
      assertSame(string11, string12);
      assertNotSame(string11, string5);
      assertSame(string11, string15);
      assertNotSame(string11, string7);
      assertNotSame(string11, string4);
      assertNotSame(string11, string0);
      assertNotSame(string11, string2);
      assertNotSame(string12, string14);
      assertNotSame(string12, string16);
      assertSame(string12, string11);
      assertNotSame(string12, string8);
      assertNotSame(string12, string10);
      assertNotSame(string12, string5);
      assertSame(string12, string15);
      assertNotSame(string12, string6);
      assertNotSame(string12, string3);
      assertNotSame(string12, string9);
      assertNotSame(string12, string4);
      assertNotSame(string12, string0);
      assertNotSame(string12, string2);
      assertNotSame(string12, string7);
      assertNotSame(string12, string13);
      assertNotSame(string12, string1);
      assertNotSame(string13, string12);
      assertNotSame(string13, string1);
      assertNotSame(string13, string11);
      assertNotSame(string13, string16);
      assertNotSame(string13, string4);
      assertNotSame(string13, string6);
      assertNotSame(string13, string7);
      assertSame(string13, string0);
      assertNotSame(string13, string5);
      assertSame(string13, string2);
      assertNotSame(string13, string15);
      assertNotSame(string13, string3);
      assertNotSame(string13, string14);
      assertNotSame(string13, string9);
      assertNotSame(string13, string10);
      assertSame(string13, string8);
      assertNotSame(string14, string8);
      assertNotSame(string14, string16);
      assertNotSame(string14, string10);
      assertNotSame(string14, string5);
      assertNotSame(string14, string3);
      assertNotSame(string14, string6);
      assertNotSame(string14, string9);
      assertNotSame(string14, string15);
      assertNotSame(string14, string4);
      assertNotSame(string14, string11);
      assertNotSame(string14, string12);
      assertNotSame(string14, string2);
      assertNotSame(string14, string13);
      assertNotSame(string14, string0);
      assertNotSame(string14, string1);
      assertNotSame(string14, string7);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean5);
      assertFalse(string15.equals((Object)string2));
      assertFalse(string15.equals((Object)string9));
      assertFalse(string15.equals((Object)string0));
      assertFalse(string15.equals((Object)string7));
      assertFalse(string15.equals((Object)string3));
      assertFalse(string15.equals((Object)string6));
      assertFalse(string15.equals((Object)string10));
      assertFalse(string15.equals((Object)string14));
      assertFalse(string15.equals((Object)string16));
      assertFalse(string15.equals((Object)string8));
      assertFalse(string15.equals((Object)string13));
      assertFalse(string15.equals((Object)string1));
      assertFalse(string15.equals((Object)string5));
      assertFalse(string15.equals((Object)string4));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string11));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string15));
      assertFalse(string0.equals((Object)string16));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string7));
      assertFalse(string0.equals((Object)string12));
      assertFalse(string0.equals((Object)string14));
      assertFalse(string0.equals((Object)string10));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string9));
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean5);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean5 == boolean3);
      assertFalse(boolean5 == boolean4);
      assertFalse(string16.equals((Object)string12));
      assertFalse(string16.equals((Object)string8));
      assertFalse(string16.equals((Object)string1));
      assertFalse(string16.equals((Object)string11));
      assertFalse(string16.equals((Object)string0));
      assertFalse(string16.equals((Object)string2));
      assertFalse(string16.equals((Object)string7));
      assertFalse(string16.equals((Object)string4));
      assertFalse(string16.equals((Object)string6));
      assertFalse(string16.equals((Object)string15));
      assertFalse(string16.equals((Object)string13));
      assertFalse(string16.equals((Object)string5));
      assertFalse(string16.equals((Object)string14));
      assertFalse(string16.equals((Object)string9));
      assertFalse(string16.equals((Object)string3));
      assertFalse(string16.equals((Object)string10));
      assertFalse(string4.equals((Object)string12));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string9));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string14));
      assertFalse(string4.equals((Object)string8));
      assertFalse(string4.equals((Object)string10));
      assertFalse(string4.equals((Object)string11));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string13));
      assertFalse(string4.equals((Object)string7));
      assertFalse(string4.equals((Object)string6));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string15));
      assertFalse(string4.equals((Object)string16));
      assertFalse(string5.equals((Object)string11));
      assertFalse(string5.equals((Object)string13));
      assertFalse(string5.equals((Object)string14));
      assertFalse(string5.equals((Object)string7));
      assertFalse(string5.equals((Object)string6));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string15));
      assertFalse(string5.equals((Object)string16));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string12));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string9));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string8));
      assertFalse(string5.equals((Object)string10));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string12));
      assertFalse(string6.equals((Object)string15));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string9));
      assertFalse(string6.equals((Object)string7));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string10));
      assertFalse(string6.equals((Object)string14));
      assertFalse(string6.equals((Object)string8));
      assertFalse(string6.equals((Object)string16));
      assertFalse(string6.equals((Object)string13));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string11));
      assertFalse(string6.equals((Object)string4));
      assertFalse(boolean0 == boolean3);
      assertFalse(boolean0 == boolean4);
      assertFalse(string9.equals((Object)string10));
      assertFalse(string9.equals((Object)string14));
      assertFalse(string9.equals((Object)string16));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string11));
      assertFalse(string9.equals((Object)string12));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string13));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string15));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string12));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string13));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string14));
      assertFalse(string10.equals((Object)string16));
      assertFalse(string10.equals((Object)string11));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string15));
      assertFalse(string10.equals((Object)string5));
      assertFalse(boolean1 == boolean4);
      assertFalse(boolean1 == boolean3);
      assertFalse(string11.equals((Object)string14));
      assertFalse(string11.equals((Object)string16));
      assertFalse(string11.equals((Object)string8));
      assertFalse(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string13));
      assertFalse(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string9));
      assertFalse(string11.equals((Object)string5));
      assertFalse(string11.equals((Object)string7));
      assertFalse(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string2));
      assertFalse(string12.equals((Object)string14));
      assertFalse(string12.equals((Object)string16));
      assertFalse(string12.equals((Object)string8));
      assertFalse(string12.equals((Object)string10));
      assertFalse(string12.equals((Object)string5));
      assertFalse(string12.equals((Object)string6));
      assertFalse(string12.equals((Object)string3));
      assertFalse(string12.equals((Object)string9));
      assertFalse(string12.equals((Object)string4));
      assertFalse(string12.equals((Object)string0));
      assertFalse(string12.equals((Object)string2));
      assertFalse(string12.equals((Object)string7));
      assertFalse(string12.equals((Object)string13));
      assertFalse(string12.equals((Object)string1));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(boolean2 == boolean4);
      assertFalse(boolean2 == boolean3);
      assertFalse(string13.equals((Object)string12));
      assertFalse(string13.equals((Object)string1));
      assertFalse(string13.equals((Object)string11));
      assertFalse(string13.equals((Object)string16));
      assertFalse(string13.equals((Object)string4));
      assertFalse(string13.equals((Object)string6));
      assertFalse(string13.equals((Object)string7));
      assertFalse(string13.equals((Object)string5));
      assertFalse(string13.equals((Object)string15));
      assertFalse(string13.equals((Object)string3));
      assertFalse(string13.equals((Object)string14));
      assertFalse(string13.equals((Object)string9));
      assertFalse(string13.equals((Object)string10));
      assertFalse(string14.equals((Object)string8));
      assertFalse(string14.equals((Object)string16));
      assertFalse(string14.equals((Object)string10));
      assertFalse(string14.equals((Object)string5));
      assertFalse(string14.equals((Object)string3));
      assertFalse(string14.equals((Object)string6));
      assertFalse(string14.equals((Object)string9));
      assertFalse(string14.equals((Object)string15));
      assertFalse(string14.equals((Object)string4));
      assertFalse(string14.equals((Object)string11));
      assertFalse(string14.equals((Object)string12));
      assertFalse(string14.equals((Object)string2));
      assertFalse(string14.equals((Object)string13));
      assertFalse(string14.equals((Object)string0));
      assertFalse(string14.equals((Object)string1));
      assertFalse(string14.equals((Object)string7));
      assertEquals(9, stringArray0.length);
      assertNotNull(optional1);
      
      Content[] contentArray0 = new Content[4];
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      contentArray0[3] = contentArray0[2];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      assertNotNull(components0);
      
      io.swagger.oas.models.parameters.Parameter parameter0 = new io.swagger.oas.models.parameters.Parameter();
      assertNull(parameter0.getExample());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getAllowReserved());
      assertNull(parameter0.getRequired());
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getExplode());
      assertNull(parameter0.getName());
      assertNull(parameter0.getIn());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.get$ref());
      assertNotNull(parameter0);
      
      Components components1 = components0.addParameters(stringArray0[2], parameter0);
      assertSame(components1, components0);
      assertSame(components0, components1);
      assertNull(parameter0.getExample());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getAllowReserved());
      assertNull(parameter0.getRequired());
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getExplode());
      assertNull(parameter0.getName());
      assertNull(parameter0.getIn());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.get$ref());
      assertEquals(9, stringArray0.length);
      assertNotNull(components1);
      
      Link[] linkArray0 = new Link[5];
      String string17 = "";
      String string18 = "C.,(}7Xc&}rebchD";
      String string19 = "W)^Yr/`=oTZ";
  }

  @Test(timeout = 11000)
  public void test079()  throws Throwable  {
      String string0 = "3P xd,Z@)pDx\"#@";
      String string1 = null;
      String string2 = "";
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string1).when(contact0).email();
      doReturn(string0, string2).when(contact0).name();
      doReturn(string0, string2).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional0 = OperationParser.getContact(contact0);
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(optional0);
      
      Server[] serverArray0 = new Server[3];
      String string3 = null;
      String string4 = "NON_EMPTY";
      ServerVariable[] serverVariableArray0 = new ServerVariable[5];
      ServerVariable serverVariable0 = mock(ServerVariable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(serverVariable0).description();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(serverVariable0).name();
      serverVariableArray0[0] = serverVariable0;
      serverVariableArray0[1] = serverVariableArray0[0];
      serverVariableArray0[2] = serverVariableArray0[1];
      serverVariableArray0[3] = serverVariableArray0[2];
      serverVariableArray0[4] = serverVariableArray0[3];
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string0, (String) null, (String) null).when(server0).description();
      doReturn(string0, string3, (String) null, (String) null).when(server0).url();
      doReturn(serverVariableArray0).when(server0).variables();
      serverArray0[0] = server0;
      serverArray0[1] = serverArray0[0];
      serverArray0[2] = serverArray0[1];
      Optional<List<io.swagger.oas.models.servers.Server>> optional1 = OperationParser.getServers(serverArray0);
      assertEquals(3, serverArray0.length);
      assertNotNull(optional1);
      
      boolean boolean0 = false;
      io.swagger.oas.annotations.parameters.RequestBody requestBody0 = mock(io.swagger.oas.annotations.parameters.RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn((Content[]) null).when(requestBody0).content();
      doReturn(string0, (String) null).when(requestBody0).description();
      doReturn(boolean0).when(requestBody0).required();
      Components components0 = new Components();
      assertNotNull(components0);
      
      Map<String, io.swagger.oas.models.parameters.Parameter> map0 = components0.getParameters();
      assertNull(map0);
      
      Components components1 = components0.parameters(map0);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertNotNull(components1);
      
      ApiResponses apiResponses0 = new ApiResponses();
      assertTrue(apiResponses0.isEmpty());
      assertEquals(0, apiResponses0.size());
      assertNotNull(apiResponses0);
      
      Components components2 = components1.responses(apiResponses0);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertTrue(apiResponses0.isEmpty());
      assertEquals(0, apiResponses0.size());
      assertNotNull(components2);
      
      io.swagger.oas.models.parameters.Parameter parameter0 = null;
      Components components3 = components2.addParameters(apiResponses0.DEFAULT, parameter0);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertSame(components1, components2);
      assertSame(components1, components3);
      assertSame(components1, components0);
      assertSame(components2, components3);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertSame(components3, components1);
      assertSame(components3, components2);
      assertSame(components3, components0);
      assertTrue(apiResponses0.isEmpty());
      assertEquals(0, apiResponses0.size());
      assertNotNull(components3);
      
      HashMap<String, Callback> hashMap0 = new HashMap<String, Callback>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Components components4 = components3.callbacks(hashMap0);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertSame(components0, components4);
      assertSame(components1, components4);
      assertSame(components1, components2);
      assertSame(components1, components3);
      assertSame(components1, components0);
      assertSame(components2, components3);
      assertSame(components2, components4);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertSame(components3, components1);
      assertSame(components3, components2);
      assertSame(components3, components4);
      assertSame(components3, components0);
      assertSame(components4, components1);
      assertSame(components4, components3);
      assertSame(components4, components2);
      assertSame(components4, components0);
      assertTrue(apiResponses0.isEmpty());
      assertEquals(0, apiResponses0.size());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(components4);
      
      Optional<RequestBody> optional2 = OperationParser.getRequestBody(requestBody0, components4);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertSame(components0, components4);
      assertSame(components1, components4);
      assertSame(components1, components2);
      assertSame(components1, components3);
      assertSame(components1, components0);
      assertSame(components2, components3);
      assertSame(components2, components4);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertSame(components3, components1);
      assertSame(components3, components2);
      assertSame(components3, components4);
      assertSame(components3, components0);
      assertSame(components4, components1);
      assertSame(components4, components3);
      assertSame(components4, components2);
      assertSame(components4, components0);
      assertTrue(apiResponses0.isEmpty());
      assertEquals(0, apiResponses0.size());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertNotNull(optional2);
      
      Content[] contentArray0 = new Content[3];
      ApiResponse[] apiResponseArray0 = new ApiResponse[7];
      ApiResponse apiResponse0 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(apiResponse0).content();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(apiResponse0).description();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      apiResponseArray0[3] = apiResponseArray0[2];
      apiResponseArray0[4] = apiResponseArray0[3];
      apiResponseArray0[5] = apiResponseArray0[4];
      apiResponseArray0[6] = apiResponseArray0[5];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Optional<ApiResponses> optional3 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components0);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertSame(components0, components4);
      assertEquals(7, apiResponseArray0.length);
      assertNotNull(optional3);
  }

  @Test(timeout = 11000)
  public void test080()  throws Throwable  {
      String[] stringArray0 = new String[7];
      String string0 = "$h'aAWh";
      stringArray0[0] = string0;
      String string1 = "skipping class ";
      stringArray0[1] = string1;
      String string2 = "; expected Class<KeyDeserializer>";
      stringArray0[2] = string2;
      String string3 = "4l@|x>uHr9w";
      stringArray0[3] = string3;
      String string4 = "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector";
      stringArray0[4] = string4;
      String string5 = "4\\(5<)Z.(#C.";
      stringArray0[5] = string5;
      String string6 = "";
      stringArray0[6] = string6;
      String string7 = "|nw";
      boolean boolean0 = false;
      boolean boolean1 = true;
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      int int0 = (-1835);
      int int1 = 141;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(stringArray0).when(schema0).allowableValues();
      doReturn(string7, (String) null).when(schema0).defaultValue();
      doReturn(boolean0).when(schema0).deprecated();
      doReturn(stringArray0[3], (String) null).when(schema0).description();
      doReturn(stringArray0[2], stringArray0[6], (String) null).when(schema0).example();
      doReturn(boolean0).when(schema0).exclusiveMaximum();
      doReturn(boolean1, false).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema0).externalDocs();
      doReturn(stringArray0[6]).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(int1, 0).when(schema0).minProperties();
      doReturn(string1, (String) null).when(schema0).pattern();
      doReturn(boolean1, false).when(schema0).readOnly();
      doReturn(stringArray0[5], (String) null).when(schema0).ref();
      doReturn(stringArray0[2], (String) null).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional0 = (Optional<io.swagger.oas.models.media.Schema>)OperationParser.getSchemaFromAnnotation(schema0);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string5);
      assertNotSame(string1, string4);
      assertNotSame(string1, string6);
      assertNotSame(string1, string7);
      assertNotSame(string1, string3);
      assertNotSame(string7, string1);
      assertNotSame(string7, string0);
      assertNotSame(string7, string4);
      assertNotSame(string7, string5);
      assertNotSame(string7, string3);
      assertNotSame(string7, string6);
      assertNotSame(string7, string2);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(int0 == int1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string7));
      assertFalse(string1.equals((Object)string3));
      assertFalse(int1 == int0);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertEquals(7, stringArray0.length);
      assertNotNull(optional0);
      
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(stringArray0[3], (String) null).when(link0).description();
      doReturn(string1, (String) null).when(link0).operationId();
      doReturn(stringArray0[4], (String) null).when(link0).operationRef();
      doReturn((LinkParameter[]) null).when(link0).parameters();
      Optional<io.swagger.oas.models.links.Link> optional1 = OperationParser.getLink(link0);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string5);
      assertNotSame(string1, string4);
      assertNotSame(string1, string6);
      assertNotSame(string1, string7);
      assertNotSame(string1, string3);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string7));
      assertFalse(string1.equals((Object)string3));
      assertEquals(7, stringArray0.length);
      assertNotNull(optional1);
      
      String string8 = "6g.?HnbW0";
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn(stringArray0[4], (String) null).when(contact0).email();
      doReturn(string8, (String) null).when(contact0).name();
      doReturn(string4, (String) null).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional2 = OperationParser.getContact(contact0);
      assertNotSame(string8, string6);
      assertNotSame(string8, string2);
      assertNotSame(string8, string5);
      assertNotSame(string8, string4);
      assertNotSame(string8, string3);
      assertNotSame(string8, string0);
      assertNotSame(string8, string1);
      assertNotSame(string8, string7);
      assertNotSame(string4, string1);
      assertNotSame(string4, string3);
      assertNotSame(string4, string7);
      assertNotSame(string4, string5);
      assertNotSame(string4, string0);
      assertNotSame(string4, string8);
      assertNotSame(string4, string2);
      assertNotSame(string4, string6);
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string7));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string8));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string6));
      assertEquals(7, stringArray0.length);
      assertNotNull(optional2);
      
      String string9 = "9IzDK|OpinH";
      String string10 = "AUTO_CLOSE_TARGET";
      String string11 = "V7TYZ PG<\\;Y";
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn((Contact) null).when(info0).contact();
      doReturn(string9, (String) null).when(info0).description();
      doReturn((License) null).when(info0).license();
      doReturn(stringArray0[5], (String) null).when(info0).termsOfService();
      doReturn(string10, (String) null).when(info0).title();
      doReturn(string11, (String) null).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional3 = OperationParser.getInfo(info0);
      assertNotSame(string9, string10);
      assertNotSame(string9, string8);
      assertNotSame(string9, string3);
      assertNotSame(string9, string1);
      assertNotSame(string9, string7);
      assertNotSame(string9, string2);
      assertNotSame(string9, string11);
      assertNotSame(string9, string0);
      assertNotSame(string9, string4);
      assertNotSame(string9, string5);
      assertNotSame(string9, string6);
      assertNotSame(string10, string6);
      assertNotSame(string10, string4);
      assertNotSame(string10, string3);
      assertNotSame(string10, string7);
      assertNotSame(string10, string1);
      assertNotSame(string10, string9);
      assertNotSame(string10, string0);
      assertNotSame(string10, string5);
      assertNotSame(string10, string11);
      assertNotSame(string10, string8);
      assertNotSame(string10, string2);
      assertNotSame(string11, string6);
      assertNotSame(string11, string8);
      assertNotSame(string11, string2);
      assertNotSame(string11, string9);
      assertNotSame(string11, string7);
      assertNotSame(string11, string1);
      assertNotSame(string11, string0);
      assertNotSame(string11, string5);
      assertNotSame(string11, string3);
      assertNotSame(string11, string10);
      assertNotSame(string11, string4);
      assertFalse(string9.equals((Object)string10));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string11));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string11));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string8));
      assertFalse(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string9));
      assertFalse(string11.equals((Object)string7));
      assertFalse(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string5));
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string4));
      assertEquals(7, stringArray0.length);
      assertNotNull(optional3);
      
      ApiResponse[] apiResponseArray0 = new ApiResponse[2];
      Content[] contentArray0 = null;
      String string12 = "7zh/G-\\x!C&Pn&TC$9\\";
      ApiResponse apiResponse0 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn((Object) contentArray0, (Object) contentArray0).when(apiResponse0).content();
      doReturn(string12, string8, (String) null).when(apiResponse0).description();
      doReturn((Link[]) null).when(apiResponse0).links();
      doReturn((String) null).when(apiResponse0).responseCode();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      assertNotNull(components0);
      
      String string13 = "R!c";
      Header header0 = new Header();
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getDescription());
      assertNull(header0.getStyle());
      assertNull(header0.getRequired());
      assertNull(header0.getExplode());
      assertNull(header0.getExample());
      assertNull(header0.get$ref());
      assertNull(header0.getDeprecated());
      assertNotNull(header0);
      
      Components components1 = components0.addHeaders(string13, header0);
      assertSame(components0, components1);
      assertNotSame(string13, string2);
      assertNotSame(string13, string0);
      assertNotSame(string13, string4);
      assertNotSame(string13, string11);
      assertNotSame(string13, string1);
      assertNotSame(string13, string7);
      assertNotSame(string13, string10);
      assertNotSame(string13, string6);
      assertNotSame(string13, string5);
      assertNotSame(string13, string8);
      assertNotSame(string13, string9);
      assertNotSame(string13, string12);
      assertNotSame(string13, string3);
      assertSame(components1, components0);
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getDescription());
      assertNull(header0.getStyle());
      assertNull(header0.getRequired());
      assertNull(header0.getExplode());
      assertNull(header0.getExample());
      assertNull(header0.get$ref());
      assertNull(header0.getDeprecated());
      assertFalse(string13.equals((Object)string2));
      assertFalse(string13.equals((Object)string0));
      assertFalse(string13.equals((Object)string4));
      assertFalse(string13.equals((Object)string11));
      assertFalse(string13.equals((Object)string1));
      assertFalse(string13.equals((Object)string7));
      assertFalse(string13.equals((Object)string10));
      assertFalse(string13.equals((Object)string6));
      assertFalse(string13.equals((Object)string5));
      assertFalse(string13.equals((Object)string8));
      assertFalse(string13.equals((Object)string9));
      assertFalse(string13.equals((Object)string12));
      assertFalse(string13.equals((Object)string3));
      assertNotNull(components1);
      
      io.swagger.oas.models.media.Schema<MediaType> schema1 = new io.swagger.oas.models.media.Schema<MediaType>();
      assertNull(schema1.getMaxLength());
      assertNull(schema1.getType());
      assertNull(schema1.getFormat());
      assertNull(schema1.getMaxProperties());
      assertNull(schema1.get$ref());
      assertNull(schema1.getMinProperties());
      assertNull(schema1.getTitle());
      assertNull(schema1.getMinItems());
      assertNull(schema1.getName());
      assertNull(schema1.getMaxItems());
      assertNull(schema1.getUniqueItems());
      assertNull(schema1.getNullable());
      assertNull(schema1.getExclusiveMaximum());
      assertNull(schema1.getDeprecated());
      assertNull(schema1.getExclusiveMinimum());
      assertNull(schema1.getPattern());
      assertNull(schema1.getMinLength());
      assertNull(schema1.getReadOnly());
      assertNull(schema1.getDescription());
      assertNull(schema1.getWriteOnly());
      assertNotNull(schema1);
      
      Components components2 = components1.addSchemas(string13, schema1);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertNotSame(string13, string2);
      assertNotSame(string13, string0);
      assertNotSame(string13, string4);
      assertNotSame(string13, string11);
      assertNotSame(string13, string1);
      assertNotSame(string13, string7);
      assertNotSame(string13, string10);
      assertNotSame(string13, string6);
      assertNotSame(string13, string5);
      assertNotSame(string13, string8);
      assertNotSame(string13, string9);
      assertNotSame(string13, string12);
      assertNotSame(string13, string3);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getDescription());
      assertNull(header0.getStyle());
      assertNull(header0.getRequired());
      assertNull(header0.getExplode());
      assertNull(header0.getExample());
      assertNull(header0.get$ref());
      assertNull(header0.getDeprecated());
      assertNull(schema1.getMaxLength());
      assertNull(schema1.getType());
      assertNull(schema1.getFormat());
      assertNull(schema1.getMaxProperties());
      assertNull(schema1.get$ref());
      assertNull(schema1.getMinProperties());
      assertNull(schema1.getTitle());
      assertNull(schema1.getMinItems());
      assertNull(schema1.getName());
      assertNull(schema1.getMaxItems());
      assertNull(schema1.getUniqueItems());
      assertNull(schema1.getNullable());
      assertNull(schema1.getExclusiveMaximum());
      assertNull(schema1.getDeprecated());
      assertNull(schema1.getExclusiveMinimum());
      assertNull(schema1.getPattern());
      assertNull(schema1.getMinLength());
      assertNull(schema1.getReadOnly());
      assertNull(schema1.getDescription());
      assertNull(schema1.getWriteOnly());
      assertFalse(string13.equals((Object)string2));
      assertFalse(string13.equals((Object)string0));
      assertFalse(string13.equals((Object)string4));
      assertFalse(string13.equals((Object)string11));
      assertFalse(string13.equals((Object)string1));
      assertFalse(string13.equals((Object)string7));
      assertFalse(string13.equals((Object)string10));
      assertFalse(string13.equals((Object)string6));
      assertFalse(string13.equals((Object)string5));
      assertFalse(string13.equals((Object)string8));
      assertFalse(string13.equals((Object)string9));
      assertFalse(string13.equals((Object)string12));
      assertFalse(string13.equals((Object)string3));
      assertNotNull(components2);
      
      Operation operation0 = new Operation();
      assertNull(operation0.getSummary());
      assertNull(operation0.getOperationId());
      assertNull(operation0.getDeprecated());
      assertNull(operation0.getDescription());
      assertNotNull(operation0);
      
      String string14 = header0.toString();
      assertNotSame(string14, string6);
      assertNotSame(string14, string8);
      assertNotSame(string14, string7);
      assertNotSame(string14, string1);
      assertNotSame(string14, string5);
      assertNotSame(string14, string13);
      assertNotSame(string14, string10);
      assertNotSame(string14, string11);
      assertNotSame(string14, string9);
      assertNotSame(string14, string2);
      assertNotSame(string14, string3);
      assertNotSame(string14, string0);
      assertNotSame(string14, string12);
      assertNotSame(string14, string4);
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getDescription());
      assertNull(header0.getStyle());
      assertNull(header0.getRequired());
      assertNull(header0.getExplode());
      assertNull(header0.getExample());
      assertNull(header0.get$ref());
      assertNull(header0.getDeprecated());
      assertFalse(string14.equals((Object)string6));
      assertFalse(string14.equals((Object)string8));
      assertFalse(string14.equals((Object)string7));
      assertFalse(string14.equals((Object)string1));
      assertFalse(string14.equals((Object)string5));
      assertFalse(string14.equals((Object)string13));
      assertFalse(string14.equals((Object)string10));
      assertFalse(string14.equals((Object)string11));
      assertFalse(string14.equals((Object)string9));
      assertFalse(string14.equals((Object)string2));
      assertFalse(string14.equals((Object)string3));
      assertFalse(string14.equals((Object)string0));
      assertFalse(string14.equals((Object)string12));
      assertFalse(string14.equals((Object)string4));
      assertNotNull(string14);
      assertEquals("class Header {\n    description: null\n    required: null\n    deprecated: null\n    allowEmptyValue: null\n    style: null\n    explode: null\n    schema: null\n    examples: null\n    example: null\n    content: null\n    $ref: null\n}", string14);
      
      Map<String, Callback> map0 = operation0.getCallbacks();
      assertNull(operation0.getSummary());
      assertNull(operation0.getOperationId());
      assertNull(operation0.getDeprecated());
      assertNull(operation0.getDescription());
      assertNull(map0);
      
      HashMap<String, Example> hashMap0 = new HashMap<String, Example>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Components components3 = components0.examples(hashMap0);
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertSame(components3, components1);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(components3);
      
      Components components4 = components2.callbacks(map0);
      assertSame(components4, components3);
      assertSame(components4, components1);
      assertSame(components4, components0);
      assertSame(components4, components2);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components0, components4);
      assertSame(components0, components3);
      assertNotSame(string13, string2);
      assertNotSame(string13, string0);
      assertNotSame(string13, string4);
      assertNotSame(string13, string11);
      assertNotSame(string13, string1);
      assertNotSame(string13, string7);
      assertNotSame(string13, string10);
      assertNotSame(string13, string14);
      assertNotSame(string13, string6);
      assertNotSame(string13, string5);
      assertNotSame(string13, string8);
      assertNotSame(string13, string9);
      assertNotSame(string13, string12);
      assertNotSame(string13, string3);
      assertSame(components1, components2);
      assertSame(components1, components3);
      assertSame(components1, components4);
      assertSame(components1, components0);
      assertSame(components2, components4);
      assertSame(components2, components3);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getDescription());
      assertNull(header0.getStyle());
      assertNull(header0.getRequired());
      assertNull(header0.getExplode());
      assertNull(header0.getExample());
      assertNull(header0.get$ref());
      assertNull(header0.getDeprecated());
      assertNull(schema1.getMaxLength());
      assertNull(schema1.getType());
      assertNull(schema1.getFormat());
      assertNull(schema1.getMaxProperties());
      assertNull(schema1.get$ref());
      assertNull(schema1.getMinProperties());
      assertNull(schema1.getTitle());
      assertNull(schema1.getMinItems());
      assertNull(schema1.getName());
      assertNull(schema1.getMaxItems());
      assertNull(schema1.getUniqueItems());
      assertNull(schema1.getNullable());
      assertNull(schema1.getExclusiveMaximum());
      assertNull(schema1.getDeprecated());
      assertNull(schema1.getExclusiveMinimum());
      assertNull(schema1.getPattern());
      assertNull(schema1.getMinLength());
      assertNull(schema1.getReadOnly());
      assertNull(schema1.getDescription());
      assertNull(schema1.getWriteOnly());
      assertNull(operation0.getSummary());
      assertNull(operation0.getOperationId());
      assertNull(operation0.getDeprecated());
      assertNull(operation0.getDescription());
      assertFalse(string13.equals((Object)string2));
      assertFalse(string13.equals((Object)string0));
      assertFalse(string13.equals((Object)string4));
      assertFalse(string13.equals((Object)string11));
      assertFalse(string13.equals((Object)string1));
      assertFalse(string13.equals((Object)string7));
      assertFalse(string13.equals((Object)string10));
      assertFalse(string13.equals((Object)string14));
      assertFalse(string13.equals((Object)string6));
      assertFalse(string13.equals((Object)string5));
      assertFalse(string13.equals((Object)string8));
      assertFalse(string13.equals((Object)string9));
      assertFalse(string13.equals((Object)string12));
      assertFalse(string13.equals((Object)string3));
      assertNotNull(components4);
      
      Map<String, Example> map1 = null;
      Components components5 = components4.examples(map1);
      assertSame(components4, components3);
      assertSame(components4, components1);
      assertSame(components4, components5);
      assertSame(components4, components0);
      assertSame(components4, components2);
      assertSame(components5, components4);
      assertSame(components5, components1);
      assertSame(components5, components3);
      assertSame(components5, components0);
      assertSame(components5, components2);
      assertSame(components0, components1);
      assertSame(components0, components5);
      assertSame(components0, components2);
      assertSame(components0, components4);
      assertSame(components0, components3);
      assertNotSame(string13, string2);
      assertNotSame(string13, string0);
      assertNotSame(string13, string4);
      assertNotSame(string13, string11);
      assertNotSame(string13, string1);
      assertNotSame(string13, string7);
      assertNotSame(string13, string10);
      assertNotSame(string13, string14);
      assertNotSame(string13, string6);
      assertNotSame(string13, string5);
      assertNotSame(string13, string8);
      assertNotSame(string13, string9);
      assertNotSame(string13, string12);
      assertNotSame(string13, string3);
      assertSame(components1, components2);
      assertSame(components1, components3);
      assertSame(components1, components4);
      assertSame(components1, components5);
      assertSame(components1, components0);
      assertSame(components2, components4);
      assertSame(components2, components3);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertSame(components2, components5);
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getDescription());
      assertNull(header0.getStyle());
      assertNull(header0.getRequired());
      assertNull(header0.getExplode());
      assertNull(header0.getExample());
      assertNull(header0.get$ref());
      assertNull(header0.getDeprecated());
      assertNull(schema1.getMaxLength());
      assertNull(schema1.getType());
      assertNull(schema1.getFormat());
      assertNull(schema1.getMaxProperties());
      assertNull(schema1.get$ref());
      assertNull(schema1.getMinProperties());
      assertNull(schema1.getTitle());
      assertNull(schema1.getMinItems());
      assertNull(schema1.getName());
      assertNull(schema1.getMaxItems());
      assertNull(schema1.getUniqueItems());
      assertNull(schema1.getNullable());
      assertNull(schema1.getExclusiveMaximum());
      assertNull(schema1.getDeprecated());
      assertNull(schema1.getExclusiveMinimum());
      assertNull(schema1.getPattern());
      assertNull(schema1.getMinLength());
      assertNull(schema1.getReadOnly());
      assertNull(schema1.getDescription());
      assertNull(schema1.getWriteOnly());
      assertNull(operation0.getSummary());
      assertNull(operation0.getOperationId());
      assertNull(operation0.getDeprecated());
      assertNull(operation0.getDescription());
      assertFalse(string13.equals((Object)string2));
      assertFalse(string13.equals((Object)string0));
      assertFalse(string13.equals((Object)string4));
      assertFalse(string13.equals((Object)string11));
      assertFalse(string13.equals((Object)string1));
      assertFalse(string13.equals((Object)string7));
      assertFalse(string13.equals((Object)string10));
      assertFalse(string13.equals((Object)string14));
      assertFalse(string13.equals((Object)string6));
      assertFalse(string13.equals((Object)string5));
      assertFalse(string13.equals((Object)string8));
      assertFalse(string13.equals((Object)string9));
      assertFalse(string13.equals((Object)string12));
      assertFalse(string13.equals((Object)string3));
      assertNotNull(components5);
      
      Optional<ApiResponses> optional4 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components5);
      assertSame(components4, components3);
      assertSame(components4, components1);
      assertSame(components4, components5);
      assertSame(components4, components0);
      assertSame(components4, components2);
      assertSame(components5, components4);
      assertSame(components5, components1);
      assertSame(components5, components3);
      assertSame(components5, components0);
      assertSame(components5, components2);
      assertSame(components0, components1);
      assertSame(components0, components5);
      assertSame(components0, components2);
      assertSame(components0, components4);
      assertSame(components0, components3);
      assertNotSame(string13, string2);
      assertNotSame(string13, string0);
      assertNotSame(string13, string4);
      assertNotSame(string13, string11);
      assertNotSame(string13, string1);
      assertNotSame(string13, string7);
      assertNotSame(string13, string10);
      assertNotSame(string13, string14);
      assertNotSame(string13, string6);
      assertNotSame(string13, string5);
      assertNotSame(string13, string8);
      assertNotSame(string13, string9);
      assertNotSame(string13, string12);
      assertNotSame(string13, string3);
      assertSame(components1, components2);
      assertSame(components1, components3);
      assertSame(components1, components4);
      assertSame(components1, components5);
      assertSame(components1, components0);
      assertSame(components2, components4);
      assertSame(components2, components3);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertSame(components2, components5);
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getDescription());
      assertNull(header0.getStyle());
      assertNull(header0.getRequired());
      assertNull(header0.getExplode());
      assertNull(header0.getExample());
      assertNull(header0.get$ref());
      assertNull(header0.getDeprecated());
      assertNull(schema1.getMaxLength());
      assertNull(schema1.getType());
      assertNull(schema1.getFormat());
      assertNull(schema1.getMaxProperties());
      assertNull(schema1.get$ref());
      assertNull(schema1.getMinProperties());
      assertNull(schema1.getTitle());
      assertNull(schema1.getMinItems());
      assertNull(schema1.getName());
      assertNull(schema1.getMaxItems());
      assertNull(schema1.getUniqueItems());
      assertNull(schema1.getNullable());
      assertNull(schema1.getExclusiveMaximum());
      assertNull(schema1.getDeprecated());
      assertNull(schema1.getExclusiveMinimum());
      assertNull(schema1.getPattern());
      assertNull(schema1.getMinLength());
      assertNull(schema1.getReadOnly());
      assertNull(schema1.getDescription());
      assertNull(schema1.getWriteOnly());
      assertNull(operation0.getSummary());
      assertNull(operation0.getOperationId());
      assertNull(operation0.getDeprecated());
      assertNull(operation0.getDescription());
      assertFalse(string13.equals((Object)string2));
      assertFalse(string13.equals((Object)string0));
      assertFalse(string13.equals((Object)string4));
      assertFalse(string13.equals((Object)string11));
      assertFalse(string13.equals((Object)string1));
      assertFalse(string13.equals((Object)string7));
      assertFalse(string13.equals((Object)string10));
      assertFalse(string13.equals((Object)string14));
      assertFalse(string13.equals((Object)string6));
      assertFalse(string13.equals((Object)string5));
      assertFalse(string13.equals((Object)string8));
      assertFalse(string13.equals((Object)string9));
      assertFalse(string13.equals((Object)string12));
      assertFalse(string13.equals((Object)string3));
      assertEquals(2, apiResponseArray0.length);
      assertNotNull(optional4);
  }

  @Test(timeout = 11000)
  public void test081()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String string0 = "";
      stringArray0[0] = string0;
      String string1 = "";
      stringArray0[1] = string1;
      String string2 = "Spu!L0";
      stringArray0[2] = string2;
      String string3 = "default";
      stringArray0[3] = string3;
      String string4 = "n\\q+#Ew0ZaJ>QVHOQSn";
      stringArray0[4] = string4;
      String string5 = "";
      boolean boolean0 = false;
      String string6 = "";
      boolean boolean1 = true;
      ExternalDocumentation externalDocumentation0 = null;
      String string7 = "";
      int int0 = 1863;
      int int1 = (-2207);
      int int2 = (-2441);
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(stringArray0).when(schema0).allowableValues();
      doReturn(string5).when(schema0).defaultValue();
      doReturn(boolean0).when(schema0).deprecated();
      doReturn(string6).when(schema0).description();
      doReturn(string0, stringArray0[3], stringArray0[0]).when(schema0).example();
      doReturn(boolean1, boolean1).when(schema0).exclusiveMaximum();
      doReturn(boolean0).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema0).externalDocs();
      doReturn(string7).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(int2).when(schema0).maxProperties();
      doReturn(int1).when(schema0).minProperties();
      doReturn(stringArray0[1]).when(schema0).pattern();
      doReturn(boolean1, boolean0).when(schema0).readOnly();
      doReturn(string6).when(schema0).ref();
      doReturn(string6).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional0 = (Optional<io.swagger.oas.models.media.Schema>)OperationParser.getSchemaFromAnnotation(schema0);
      assertSame(string7, string5);
      assertNotSame(string7, string3);
      assertSame(string7, string0);
      assertSame(string7, string1);
      assertNotSame(string7, string2);
      assertSame(string7, string6);
      assertNotSame(string7, string4);
      assertSame(string0, string5);
      assertSame(string0, string1);
      assertNotSame(string0, string3);
      assertSame(string0, string7);
      assertNotSame(string0, string2);
      assertSame(string0, string6);
      assertNotSame(string0, string4);
      assertSame(string5, string0);
      assertSame(string5, string1);
      assertNotSame(string5, string2);
      assertSame(string5, string7);
      assertNotSame(string5, string3);
      assertNotSame(string5, string4);
      assertSame(string5, string6);
      assertNotSame(string6, string3);
      assertSame(string6, string5);
      assertNotSame(string6, string4);
      assertSame(string6, string1);
      assertSame(string6, string7);
      assertNotSame(string6, string2);
      assertSame(string6, string0);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(boolean0 == boolean1);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(boolean1 == boolean0);
      assertEquals(5, stringArray0.length);
      assertNotNull(optional0);
      
      MediaType mediaType0 = new MediaType();
      assertNull(mediaType0.getExample());
      assertNotNull(mediaType0);
      
      HashMap<String, Encoding> hashMap0 = new HashMap<String, Encoding>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      MediaType mediaType1 = mediaType0.encoding(hashMap0);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType1, mediaType0);
      assertNull(mediaType0.getExample());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(mediaType1.getExample());
      assertNotNull(mediaType1);
      
      io.swagger.oas.models.media.Schema<Integer> schema1 = new io.swagger.oas.models.media.Schema<Integer>();
      assertNull(schema1.get$ref());
      assertNull(schema1.getTitle());
      assertNull(schema1.getExclusiveMinimum());
      assertNull(schema1.getReadOnly());
      assertNull(schema1.getDeprecated());
      assertNull(schema1.getMaxLength());
      assertNull(schema1.getPattern());
      assertNull(schema1.getFormat());
      assertNull(schema1.getType());
      assertNull(schema1.getUniqueItems());
      assertNull(schema1.getExclusiveMaximum());
      assertNull(schema1.getWriteOnly());
      assertNull(schema1.getDescription());
      assertNull(schema1.getMinLength());
      assertNull(schema1.getMaxProperties());
      assertNull(schema1.getNullable());
      assertNull(schema1.getMinProperties());
      assertNull(schema1.getMaxItems());
      assertNull(schema1.getName());
      assertNull(schema1.getMinItems());
      assertNotNull(schema1);
      
      MediaType mediaType2 = mediaType1.schema(schema1);
      assertSame(mediaType0, mediaType2);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType1, mediaType2);
      assertSame(mediaType1, mediaType0);
      assertSame(mediaType2, mediaType0);
      assertSame(mediaType2, mediaType1);
      assertNull(mediaType0.getExample());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(mediaType1.getExample());
      assertNull(schema1.get$ref());
      assertNull(schema1.getTitle());
      assertNull(schema1.getExclusiveMinimum());
      assertNull(schema1.getReadOnly());
      assertNull(schema1.getDeprecated());
      assertNull(schema1.getMaxLength());
      assertNull(schema1.getPattern());
      assertNull(schema1.getFormat());
      assertNull(schema1.getType());
      assertNull(schema1.getUniqueItems());
      assertNull(schema1.getExclusiveMaximum());
      assertNull(schema1.getWriteOnly());
      assertNull(schema1.getDescription());
      assertNull(schema1.getMinLength());
      assertNull(schema1.getMaxProperties());
      assertNull(schema1.getNullable());
      assertNull(schema1.getMinProperties());
      assertNull(schema1.getMaxItems());
      assertNull(schema1.getName());
      assertNull(schema1.getMinItems());
      assertNull(mediaType2.getExample());
      assertNotNull(mediaType2);
      
      Example example0 = new Example();
      assertNull(example0.getExternalValue());
      assertNull(example0.getDescription());
      assertNull(example0.getSummary());
      assertNull(example0.get$ref());
      assertNotNull(example0);
      
      String string8 = "[reference type, class ";
      Example example1 = example0.summary(string8);
      assertSame(example0, example1);
      assertNotSame(string8, string5);
      assertNotSame(string8, string3);
      assertNotSame(string8, string6);
      assertNotSame(string8, string0);
      assertNotSame(string8, string1);
      assertNotSame(string8, string4);
      assertNotSame(string8, string2);
      assertNotSame(string8, string7);
      assertSame(example1, example0);
      assertNull(example0.getExternalValue());
      assertNull(example0.getDescription());
      assertEquals("[reference type, class ", example0.getSummary());
      assertNull(example0.get$ref());
      assertNull(example1.getExternalValue());
      assertNull(example1.getDescription());
      assertEquals("[reference type, class ", example1.getSummary());
      assertNull(example1.get$ref());
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertNotNull(example1);
      
      MediaType mediaType3 = mediaType2.addExamples(string7, example1);
      assertSame(string7, string5);
      assertNotSame(string7, string3);
      assertNotSame(string7, string8);
      assertSame(string7, string0);
      assertSame(string7, string1);
      assertNotSame(string7, string2);
      assertSame(string7, string6);
      assertNotSame(string7, string4);
      assertSame(mediaType0, mediaType3);
      assertSame(mediaType0, mediaType2);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType1, mediaType2);
      assertSame(mediaType1, mediaType3);
      assertSame(mediaType1, mediaType0);
      assertSame(mediaType2, mediaType0);
      assertSame(mediaType2, mediaType1);
      assertSame(mediaType2, mediaType3);
      assertSame(example0, example1);
      assertNotSame(string8, string5);
      assertNotSame(string8, string3);
      assertNotSame(string8, string6);
      assertNotSame(string8, string0);
      assertNotSame(string8, string1);
      assertNotSame(string8, string4);
      assertNotSame(string8, string2);
      assertNotSame(string8, string7);
      assertSame(example1, example0);
      assertSame(mediaType3, mediaType0);
      assertSame(mediaType3, mediaType1);
      assertSame(mediaType3, mediaType2);
      assertNull(mediaType0.getExample());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(mediaType1.getExample());
      assertNull(schema1.get$ref());
      assertNull(schema1.getTitle());
      assertNull(schema1.getExclusiveMinimum());
      assertNull(schema1.getReadOnly());
      assertNull(schema1.getDeprecated());
      assertNull(schema1.getMaxLength());
      assertNull(schema1.getPattern());
      assertNull(schema1.getFormat());
      assertNull(schema1.getType());
      assertNull(schema1.getUniqueItems());
      assertNull(schema1.getExclusiveMaximum());
      assertNull(schema1.getWriteOnly());
      assertNull(schema1.getDescription());
      assertNull(schema1.getMinLength());
      assertNull(schema1.getMaxProperties());
      assertNull(schema1.getNullable());
      assertNull(schema1.getMinProperties());
      assertNull(schema1.getMaxItems());
      assertNull(schema1.getName());
      assertNull(schema1.getMinItems());
      assertNull(mediaType2.getExample());
      assertNull(example0.getExternalValue());
      assertNull(example0.getDescription());
      assertEquals("[reference type, class ", example0.getSummary());
      assertNull(example0.get$ref());
      assertNull(example1.getExternalValue());
      assertNull(example1.getDescription());
      assertEquals("[reference type, class ", example1.getSummary());
      assertNull(example1.get$ref());
      assertNull(mediaType3.getExample());
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string8));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertNotNull(mediaType3);
      
      String string9 = "9FyG7I";
      Encoding encoding0 = new Encoding();
      assertNull(encoding0.getStyle());
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getExplode());
      assertNull(encoding0.getAllowReserved());
      assertNotNull(encoding0);
      
      Boolean boolean2 = Boolean.FALSE;
      assertFalse(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      Encoding encoding1 = encoding0.explode(boolean2);
      assertSame(encoding0, encoding1);
      assertSame(encoding1, encoding0);
      assertNull(encoding0.getStyle());
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getAllowReserved());
      assertFalse(encoding0.getExplode());
      assertNull(encoding1.getStyle());
      assertFalse(encoding1.getExplode());
      assertNull(encoding1.getContentType());
      assertNull(encoding1.getAllowReserved());
      assertFalse(boolean2.equals((Object)boolean1));
      assertNotNull(encoding1);
      
      Encoding encoding2 = encoding1.style(string9);
      assertSame(encoding0, encoding1);
      assertSame(encoding0, encoding2);
      assertSame(encoding1, encoding2);
      assertSame(encoding1, encoding0);
      assertSame(encoding2, encoding1);
      assertSame(encoding2, encoding0);
      assertNotSame(string9, string2);
      assertNotSame(string9, string1);
      assertNotSame(string9, string4);
      assertNotSame(string9, string0);
      assertNotSame(string9, string7);
      assertNotSame(string9, string5);
      assertNotSame(string9, string3);
      assertNotSame(string9, string6);
      assertNotSame(string9, string8);
      assertEquals("9FyG7I", encoding0.getStyle());
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getAllowReserved());
      assertFalse(encoding0.getExplode());
      assertEquals("9FyG7I", encoding1.getStyle());
      assertFalse(encoding1.getExplode());
      assertNull(encoding1.getContentType());
      assertNull(encoding1.getAllowReserved());
      assertFalse(encoding2.getExplode());
      assertNull(encoding2.getAllowReserved());
      assertNull(encoding2.getContentType());
      assertEquals("9FyG7I", encoding2.getStyle());
      assertFalse(boolean2.equals((Object)boolean1));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string8));
      assertNotNull(encoding2);
      
      MediaType mediaType4 = mediaType3.addEncoding(string9, encoding2);
      assertSame(encoding0, encoding1);
      assertSame(encoding0, encoding2);
      assertSame(encoding1, encoding2);
      assertSame(encoding1, encoding0);
      assertSame(encoding2, encoding1);
      assertSame(encoding2, encoding0);
      assertSame(mediaType4, mediaType3);
      assertSame(mediaType4, mediaType0);
      assertSame(mediaType4, mediaType2);
      assertSame(mediaType4, mediaType1);
      assertSame(string7, string5);
      assertNotSame(string7, string3);
      assertNotSame(string7, string9);
      assertNotSame(string7, string8);
      assertSame(string7, string0);
      assertSame(string7, string1);
      assertNotSame(string7, string2);
      assertSame(string7, string6);
      assertNotSame(string7, string4);
      assertSame(mediaType0, mediaType3);
      assertSame(mediaType0, mediaType4);
      assertSame(mediaType0, mediaType2);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType1, mediaType2);
      assertSame(mediaType1, mediaType4);
      assertSame(mediaType1, mediaType3);
      assertSame(mediaType1, mediaType0);
      assertSame(mediaType2, mediaType4);
      assertSame(mediaType2, mediaType0);
      assertSame(mediaType2, mediaType1);
      assertSame(mediaType2, mediaType3);
      assertSame(example0, example1);
      assertNotSame(string8, string5);
      assertNotSame(string8, string3);
      assertNotSame(string8, string6);
      assertNotSame(string8, string0);
      assertNotSame(string8, string1);
      assertNotSame(string8, string4);
      assertNotSame(string8, string2);
      assertNotSame(string8, string9);
      assertNotSame(string8, string7);
      assertSame(example1, example0);
      assertSame(mediaType3, mediaType0);
      assertSame(mediaType3, mediaType1);
      assertSame(mediaType3, mediaType4);
      assertSame(mediaType3, mediaType2);
      assertNotSame(string9, string2);
      assertNotSame(string9, string1);
      assertNotSame(string9, string4);
      assertNotSame(string9, string0);
      assertNotSame(string9, string7);
      assertNotSame(string9, string5);
      assertNotSame(string9, string3);
      assertNotSame(string9, string6);
      assertNotSame(string9, string8);
      assertEquals("9FyG7I", encoding0.getStyle());
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getAllowReserved());
      assertFalse(encoding0.getExplode());
      assertEquals("9FyG7I", encoding1.getStyle());
      assertFalse(encoding1.getExplode());
      assertNull(encoding1.getContentType());
      assertNull(encoding1.getAllowReserved());
      assertFalse(encoding2.getExplode());
      assertNull(encoding2.getAllowReserved());
      assertNull(encoding2.getContentType());
      assertEquals("9FyG7I", encoding2.getStyle());
      assertNull(mediaType4.getExample());
      assertNull(mediaType0.getExample());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(mediaType1.getExample());
      assertNull(schema1.get$ref());
      assertNull(schema1.getTitle());
      assertNull(schema1.getExclusiveMinimum());
      assertNull(schema1.getReadOnly());
      assertNull(schema1.getDeprecated());
      assertNull(schema1.getMaxLength());
      assertNull(schema1.getPattern());
      assertNull(schema1.getFormat());
      assertNull(schema1.getType());
      assertNull(schema1.getUniqueItems());
      assertNull(schema1.getExclusiveMaximum());
      assertNull(schema1.getWriteOnly());
      assertNull(schema1.getDescription());
      assertNull(schema1.getMinLength());
      assertNull(schema1.getMaxProperties());
      assertNull(schema1.getNullable());
      assertNull(schema1.getMinProperties());
      assertNull(schema1.getMaxItems());
      assertNull(schema1.getName());
      assertNull(schema1.getMinItems());
      assertNull(mediaType2.getExample());
      assertNull(example0.getExternalValue());
      assertNull(example0.getDescription());
      assertEquals("[reference type, class ", example0.getSummary());
      assertNull(example0.get$ref());
      assertNull(example1.getExternalValue());
      assertNull(example1.getDescription());
      assertEquals("[reference type, class ", example1.getSummary());
      assertNull(example1.get$ref());
      assertNull(mediaType3.getExample());
      assertFalse(boolean2.equals((Object)boolean1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string9));
      assertFalse(string7.equals((Object)string8));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string9));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string8));
      assertNotNull(mediaType4);
      
      String string10 = null;
      String string11 = "-";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(exampleObject0).externalValue();
      doReturn(stringArray0[2], string10, string7).when(exampleObject0).name();
      doReturn(string11, (String) null).when(exampleObject0).summary();
      doReturn(string1).when(exampleObject0).value();
      Optional<MediaType> optional1 = OperationParser.getMediaType(mediaType4, exampleObject0);
      assertSame(encoding0, encoding1);
      assertSame(encoding0, encoding2);
      assertNotSame(string0, string8);
      assertSame(string0, string5);
      assertSame(string0, string1);
      assertNotSame(string0, string3);
      assertSame(string0, string7);
      assertNotSame(string0, string2);
      assertSame(string0, string6);
      assertNotSame(string0, string11);
      assertNotSame(string0, string4);
      assertNotSame(string0, string9);
      assertSame(encoding1, encoding2);
      assertSame(encoding1, encoding0);
      assertSame(encoding2, encoding1);
      assertSame(encoding2, encoding0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string4);
      assertSame(string1, string5);
      assertNotSame(string1, string8);
      assertSame(string1, string0);
      assertSame(string1, string7);
      assertNotSame(string1, string2);
      assertNotSame(string1, string9);
      assertNotSame(string1, string11);
      assertSame(string1, string6);
      assertSame(mediaType4, mediaType3);
      assertSame(mediaType4, mediaType0);
      assertSame(mediaType4, mediaType2);
      assertSame(mediaType4, mediaType1);
      assertNotSame(string11, string3);
      assertNotSame(string11, string7);
      assertNotSame(string11, string6);
      assertNotSame(string11, string8);
      assertNotSame(string11, string0);
      assertNotSame(string11, string4);
      assertNotSame(string11, string2);
      assertNotSame(string11, string9);
      assertNotSame(string11, string1);
      assertNotSame(string11, string5);
      assertSame(string7, string5);
      assertNotSame(string7, string3);
      assertNotSame(string7, string9);
      assertNotSame(string7, string8);
      assertSame(string7, string0);
      assertSame(string7, string1);
      assertNotSame(string7, string2);
      assertSame(string7, string6);
      assertNotSame(string7, string4);
      assertNotSame(string7, string11);
      assertSame(mediaType0, mediaType3);
      assertSame(mediaType0, mediaType4);
      assertSame(mediaType0, mediaType2);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType1, mediaType2);
      assertSame(mediaType1, mediaType4);
      assertSame(mediaType1, mediaType3);
      assertSame(mediaType1, mediaType0);
      assertSame(mediaType2, mediaType4);
      assertSame(mediaType2, mediaType0);
      assertSame(mediaType2, mediaType1);
      assertSame(mediaType2, mediaType3);
      assertSame(example0, example1);
      assertNotSame(string8, string5);
      assertNotSame(string8, string3);
      assertNotSame(string8, string6);
      assertNotSame(string8, string0);
      assertNotSame(string8, string1);
      assertNotSame(string8, string4);
      assertNotSame(string8, string2);
      assertNotSame(string8, string9);
      assertNotSame(string8, string7);
      assertNotSame(string8, string11);
      assertSame(example1, example0);
      assertSame(mediaType3, mediaType0);
      assertSame(mediaType3, mediaType1);
      assertSame(mediaType3, mediaType4);
      assertSame(mediaType3, mediaType2);
      assertNotSame(string9, string2);
      assertNotSame(string9, string1);
      assertNotSame(string9, string4);
      assertNotSame(string9, string11);
      assertNotSame(string9, string0);
      assertNotSame(string9, string7);
      assertNotSame(string9, string5);
      assertNotSame(string9, string3);
      assertNotSame(string9, string6);
      assertNotSame(string9, string8);
      assertEquals("9FyG7I", encoding0.getStyle());
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getAllowReserved());
      assertFalse(encoding0.getExplode());
      assertEquals("9FyG7I", encoding1.getStyle());
      assertFalse(encoding1.getExplode());
      assertNull(encoding1.getContentType());
      assertNull(encoding1.getAllowReserved());
      assertFalse(encoding2.getExplode());
      assertNull(encoding2.getAllowReserved());
      assertNull(encoding2.getContentType());
      assertEquals("9FyG7I", encoding2.getStyle());
      assertNull(mediaType4.getExample());
      assertNull(mediaType0.getExample());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(mediaType1.getExample());
      assertNull(schema1.get$ref());
      assertNull(schema1.getTitle());
      assertNull(schema1.getExclusiveMinimum());
      assertNull(schema1.getReadOnly());
      assertNull(schema1.getDeprecated());
      assertNull(schema1.getMaxLength());
      assertNull(schema1.getPattern());
      assertNull(schema1.getFormat());
      assertNull(schema1.getType());
      assertNull(schema1.getUniqueItems());
      assertNull(schema1.getExclusiveMaximum());
      assertNull(schema1.getWriteOnly());
      assertNull(schema1.getDescription());
      assertNull(schema1.getMinLength());
      assertNull(schema1.getMaxProperties());
      assertNull(schema1.getNullable());
      assertNull(schema1.getMinProperties());
      assertNull(schema1.getMaxItems());
      assertNull(schema1.getName());
      assertNull(schema1.getMinItems());
      assertNull(mediaType2.getExample());
      assertNull(example0.getExternalValue());
      assertNull(example0.getDescription());
      assertEquals("[reference type, class ", example0.getSummary());
      assertNull(example0.get$ref());
      assertNull(example1.getExternalValue());
      assertNull(example1.getDescription());
      assertEquals("[reference type, class ", example1.getSummary());
      assertNull(example1.get$ref());
      assertNull(mediaType3.getExample());
      assertFalse(boolean2.equals((Object)boolean1));
      assertFalse(string0.equals((Object)string8));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string11));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string9));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string8));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string9));
      assertFalse(string1.equals((Object)string11));
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string7));
      assertFalse(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string8));
      assertFalse(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string9));
      assertFalse(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string9));
      assertFalse(string7.equals((Object)string8));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string11));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string9));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string11));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string11));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string8));
      assertEquals(5, stringArray0.length);
      assertNotNull(optional1);
      
      LinkParameter[] linkParameterArray0 = new LinkParameter[6];
      String string12 = "";
      String string13 = null;
      String string14 = "";
      String string15 = null;
      LinkParameter linkParameter0 = mock(LinkParameter.class, new ViolatedAssumptionAnswer());
      doReturn(string15).when(linkParameter0).expression();
      doReturn(string12, stringArray0[3], stringArray0[2], string13, string14).when(linkParameter0).name();
      linkParameterArray0[0] = linkParameter0;
      linkParameterArray0[1] = linkParameterArray0[0];
      linkParameterArray0[2] = linkParameterArray0[1];
      linkParameterArray0[3] = linkParameterArray0[2];
      linkParameterArray0[4] = linkParameterArray0[3];
      linkParameterArray0[5] = linkParameterArray0[4];
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameterArray0);
      assertEquals(1, map0.size());
      assertFalse(map0.isEmpty());
      assertEquals(6, linkParameterArray0.length);
      assertNotNull(map0);
  }

  @Test(timeout = 11000)
  public void test082()  throws Throwable  {
      boolean boolean0 = true;
      boolean boolean1 = true;
      Content[] contentArray0 = new Content[0];
      String string0 = "";
      Explode explode0 = Explode.FALSE;
      Explode explode1 = Explode.TRUE;
      String string1 = "";
      Schema schema0 = null;
      String string2 = "";
      boolean boolean2 = false;
      boolean boolean3 = false;
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0, boolean0).when(parameter0).allowEmptyValue();
      doReturn(boolean1, boolean2).when(parameter0).allowReserved();
      doReturn(contentArray0).when(parameter0).content();
      doReturn(boolean1, boolean3).when(parameter0).deprecated();
      doReturn(string0).when(parameter0).description();
      doReturn(explode0, explode0, explode1).when(parameter0).explode();
      doReturn(string1).when(parameter0).in();
      doReturn(string1).when(parameter0).name();
      doReturn(boolean0, boolean2).when(parameter0).required();
      doReturn(schema0, schema0).when(parameter0).schema();
      doReturn(string2).when(parameter0).style();
      Components components0 = new Components();
      assertNotNull(components0);
      
      String string3 = "[map type; class ";
      Example example0 = new Example();
      assertNull(example0.getDescription());
      assertNull(example0.getSummary());
      assertNull(example0.getExternalValue());
      assertNull(example0.get$ref());
      assertNotNull(example0);
      
      Components components1 = components0.addExamples(string3, example0);
      assertSame(components0, components1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertSame(components1, components0);
      assertNull(example0.getDescription());
      assertNull(example0.getSummary());
      assertNull(example0.getExternalValue());
      assertNull(example0.get$ref());
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(components1);
      
      String string4 = "^s";
      io.swagger.oas.models.media.Schema<MediaType> schema1 = new io.swagger.oas.models.media.Schema<MediaType>();
      assertNull(schema1.getType());
      assertNull(schema1.getMaxLength());
      assertNull(schema1.getMaxProperties());
      assertNull(schema1.getMinProperties());
      assertNull(schema1.getWriteOnly());
      assertNull(schema1.getMinLength());
      assertNull(schema1.get$ref());
      assertNull(schema1.getDescription());
      assertNull(schema1.getExclusiveMaximum());
      assertNull(schema1.getTitle());
      assertNull(schema1.getExclusiveMinimum());
      assertNull(schema1.getMaxItems());
      assertNull(schema1.getNullable());
      assertNull(schema1.getUniqueItems());
      assertNull(schema1.getReadOnly());
      assertNull(schema1.getPattern());
      assertNull(schema1.getName());
      assertNull(schema1.getFormat());
      assertNull(schema1.getMinItems());
      assertNull(schema1.getDeprecated());
      assertNotNull(schema1);
      
      Components components2 = components1.addSchemas(string4, schema1);
      assertNotSame(string4, string3);
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      assertNotSame(string4, string0);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string4);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertNull(schema1.getType());
      assertNull(schema1.getMaxLength());
      assertNull(schema1.getMaxProperties());
      assertNull(schema1.getMinProperties());
      assertNull(schema1.getWriteOnly());
      assertNull(schema1.getMinLength());
      assertNull(schema1.get$ref());
      assertNull(schema1.getDescription());
      assertNull(schema1.getExclusiveMaximum());
      assertNull(schema1.getTitle());
      assertNull(schema1.getExclusiveMinimum());
      assertNull(schema1.getMaxItems());
      assertNull(schema1.getNullable());
      assertNull(schema1.getUniqueItems());
      assertNull(schema1.getReadOnly());
      assertNull(schema1.getPattern());
      assertNull(schema1.getName());
      assertNull(schema1.getFormat());
      assertNull(schema1.getMinItems());
      assertNull(schema1.getDeprecated());
      assertNull(example0.getDescription());
      assertNull(example0.getSummary());
      assertNull(example0.getExternalValue());
      assertNull(example0.get$ref());
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string4));
      assertNotNull(components2);
      
      io.swagger.oas.models.parameters.Parameter parameter1 = new io.swagger.oas.models.parameters.Parameter();
      assertNull(parameter1.getIn());
      assertNull(parameter1.getName());
      assertNull(parameter1.getExample());
      assertNull(parameter1.getStyle());
      assertNull(parameter1.getAllowEmptyValue());
      assertNull(parameter1.getRequired());
      assertNull(parameter1.getDescription());
      assertNull(parameter1.getAllowReserved());
      assertNull(parameter1.get$ref());
      assertNull(parameter1.getDeprecated());
      assertNull(parameter1.getExplode());
      assertNotNull(parameter1);
      
      io.swagger.oas.models.parameters.Parameter parameter2 = parameter1.in(string4);
      assertNotSame(string4, string3);
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      assertNotSame(string4, string0);
      assertSame(parameter1, parameter2);
      assertSame(parameter2, parameter1);
      assertNull(parameter1.getName());
      assertNull(parameter1.getExample());
      assertNull(parameter1.getStyle());
      assertNull(parameter1.getAllowEmptyValue());
      assertNull(parameter1.getRequired());
      assertEquals("^s", parameter1.getIn());
      assertNull(parameter1.getDescription());
      assertNull(parameter1.getAllowReserved());
      assertNull(parameter1.get$ref());
      assertNull(parameter1.getDeprecated());
      assertNull(parameter1.getExplode());
      assertNull(parameter2.getAllowReserved());
      assertNull(parameter2.getDescription());
      assertEquals("^s", parameter2.getIn());
      assertNull(parameter2.getRequired());
      assertNull(parameter2.get$ref());
      assertNull(parameter2.getDeprecated());
      assertNull(parameter2.getAllowEmptyValue());
      assertNull(parameter2.getStyle());
      assertNull(parameter2.getName());
      assertNull(parameter2.getExample());
      assertNull(parameter2.getExplode());
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(parameter2);
      
      Components components3 = components2.addParameters(string4, parameter2);
      assertNotSame(string4, string3);
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      assertNotSame(string4, string0);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(components2, components0);
      assertSame(parameter1, parameter2);
      assertSame(parameter2, parameter1);
      assertSame(components3, components2);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string4);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertNull(schema1.getType());
      assertNull(schema1.getMaxLength());
      assertNull(schema1.getMaxProperties());
      assertNull(schema1.getMinProperties());
      assertNull(schema1.getWriteOnly());
      assertNull(schema1.getMinLength());
      assertNull(schema1.get$ref());
      assertNull(schema1.getDescription());
      assertNull(schema1.getExclusiveMaximum());
      assertNull(schema1.getTitle());
      assertNull(schema1.getExclusiveMinimum());
      assertNull(schema1.getMaxItems());
      assertNull(schema1.getNullable());
      assertNull(schema1.getUniqueItems());
      assertNull(schema1.getReadOnly());
      assertNull(schema1.getPattern());
      assertNull(schema1.getName());
      assertNull(schema1.getFormat());
      assertNull(schema1.getMinItems());
      assertNull(schema1.getDeprecated());
      assertNull(parameter1.getName());
      assertNull(parameter1.getExample());
      assertNull(parameter1.getStyle());
      assertNull(parameter1.getAllowEmptyValue());
      assertNull(parameter1.getRequired());
      assertEquals("^s", parameter1.getIn());
      assertNull(parameter1.getDescription());
      assertNull(parameter1.getAllowReserved());
      assertNull(parameter1.get$ref());
      assertNull(parameter1.getDeprecated());
      assertNull(parameter1.getExplode());
      assertNull(parameter2.getAllowReserved());
      assertNull(parameter2.getDescription());
      assertEquals("^s", parameter2.getIn());
      assertNull(parameter2.getRequired());
      assertNull(parameter2.get$ref());
      assertNull(parameter2.getDeprecated());
      assertNull(parameter2.getAllowEmptyValue());
      assertNull(parameter2.getStyle());
      assertNull(parameter2.getName());
      assertNull(parameter2.getExample());
      assertNull(parameter2.getExplode());
      assertNull(example0.getDescription());
      assertNull(example0.getSummary());
      assertNull(example0.getExternalValue());
      assertNull(example0.get$ref());
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string4));
      assertNotNull(components3);
      
      Map<String, SecurityScheme> map0 = components2.getSecuritySchemes();
      assertNotSame(string4, string3);
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      assertNotSame(string4, string0);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(components2, components0);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string4);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertNull(schema1.getType());
      assertNull(schema1.getMaxLength());
      assertNull(schema1.getMaxProperties());
      assertNull(schema1.getMinProperties());
      assertNull(schema1.getWriteOnly());
      assertNull(schema1.getMinLength());
      assertNull(schema1.get$ref());
      assertNull(schema1.getDescription());
      assertNull(schema1.getExclusiveMaximum());
      assertNull(schema1.getTitle());
      assertNull(schema1.getExclusiveMinimum());
      assertNull(schema1.getMaxItems());
      assertNull(schema1.getNullable());
      assertNull(schema1.getUniqueItems());
      assertNull(schema1.getReadOnly());
      assertNull(schema1.getPattern());
      assertNull(schema1.getName());
      assertNull(schema1.getFormat());
      assertNull(schema1.getMinItems());
      assertNull(schema1.getDeprecated());
      assertNull(example0.getDescription());
      assertNull(example0.getSummary());
      assertNull(example0.getExternalValue());
      assertNull(example0.get$ref());
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string4));
      assertNull(map0);
      
      Components components4 = components3.securitySchemes(map0);
      assertNotSame(string4, string3);
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      assertNotSame(string4, string0);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(components2, components0);
      assertSame(components2, components4);
      assertSame(parameter1, parameter2);
      assertSame(parameter2, parameter1);
      assertSame(components3, components2);
      assertSame(components3, components4);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertSame(components4, components1);
      assertSame(components4, components3);
      assertSame(components4, components2);
      assertSame(components4, components0);
      assertSame(components0, components4);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string4);
      assertSame(components1, components2);
      assertSame(components1, components4);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertNull(schema1.getType());
      assertNull(schema1.getMaxLength());
      assertNull(schema1.getMaxProperties());
      assertNull(schema1.getMinProperties());
      assertNull(schema1.getWriteOnly());
      assertNull(schema1.getMinLength());
      assertNull(schema1.get$ref());
      assertNull(schema1.getDescription());
      assertNull(schema1.getExclusiveMaximum());
      assertNull(schema1.getTitle());
      assertNull(schema1.getExclusiveMinimum());
      assertNull(schema1.getMaxItems());
      assertNull(schema1.getNullable());
      assertNull(schema1.getUniqueItems());
      assertNull(schema1.getReadOnly());
      assertNull(schema1.getPattern());
      assertNull(schema1.getName());
      assertNull(schema1.getFormat());
      assertNull(schema1.getMinItems());
      assertNull(schema1.getDeprecated());
      assertNull(parameter1.getName());
      assertNull(parameter1.getExample());
      assertNull(parameter1.getStyle());
      assertNull(parameter1.getAllowEmptyValue());
      assertNull(parameter1.getRequired());
      assertEquals("^s", parameter1.getIn());
      assertNull(parameter1.getDescription());
      assertNull(parameter1.getAllowReserved());
      assertNull(parameter1.get$ref());
      assertNull(parameter1.getDeprecated());
      assertNull(parameter1.getExplode());
      assertNull(parameter2.getAllowReserved());
      assertNull(parameter2.getDescription());
      assertEquals("^s", parameter2.getIn());
      assertNull(parameter2.getRequired());
      assertNull(parameter2.get$ref());
      assertNull(parameter2.getDeprecated());
      assertNull(parameter2.getAllowEmptyValue());
      assertNull(parameter2.getStyle());
      assertNull(parameter2.getName());
      assertNull(parameter2.getExample());
      assertNull(parameter2.getExplode());
      assertNull(example0.getDescription());
      assertNull(example0.getSummary());
      assertNull(example0.getExternalValue());
      assertNull(example0.get$ref());
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string4));
      assertNotNull(components4);
      
      Optional<io.swagger.oas.models.parameters.Parameter> optional0 = OperationParser.getParameter(parameter0, components4);
      assertSame(string0, string1);
      assertSame(string0, string2);
      assertNotSame(string0, string4);
      assertNotSame(string0, string3);
      assertNotSame(explode0, explode1);
      assertNotSame(explode1, explode0);
      assertNotSame(string1, string4);
      assertSame(string1, string2);
      assertSame(string1, string0);
      assertNotSame(string1, string3);
      assertSame(string2, string0);
      assertSame(string2, string1);
      assertNotSame(string2, string4);
      assertNotSame(string2, string3);
      assertSame(components0, components4);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string4);
      assertSame(components1, components2);
      assertSame(components1, components4);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertNotSame(string4, string3);
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      assertNotSame(string4, string0);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(components2, components0);
      assertSame(components2, components4);
      assertSame(parameter1, parameter2);
      assertSame(parameter2, parameter1);
      assertSame(components3, components2);
      assertSame(components3, components4);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertSame(components4, components1);
      assertSame(components4, components3);
      assertSame(components4, components2);
      assertSame(components4, components0);
      assertNull(schema1.getType());
      assertNull(schema1.getMaxLength());
      assertNull(schema1.getMaxProperties());
      assertNull(schema1.getMinProperties());
      assertNull(schema1.getWriteOnly());
      assertNull(schema1.getMinLength());
      assertNull(schema1.get$ref());
      assertNull(schema1.getDescription());
      assertNull(schema1.getExclusiveMaximum());
      assertNull(schema1.getTitle());
      assertNull(schema1.getExclusiveMinimum());
      assertNull(schema1.getMaxItems());
      assertNull(schema1.getNullable());
      assertNull(schema1.getUniqueItems());
      assertNull(schema1.getReadOnly());
      assertNull(schema1.getPattern());
      assertNull(schema1.getName());
      assertNull(schema1.getFormat());
      assertNull(schema1.getMinItems());
      assertNull(schema1.getDeprecated());
      assertNull(parameter1.getName());
      assertNull(parameter1.getExample());
      assertNull(parameter1.getStyle());
      assertNull(parameter1.getAllowEmptyValue());
      assertNull(parameter1.getRequired());
      assertEquals("^s", parameter1.getIn());
      assertNull(parameter1.getDescription());
      assertNull(parameter1.getAllowReserved());
      assertNull(parameter1.get$ref());
      assertNull(parameter1.getDeprecated());
      assertNull(parameter1.getExplode());
      assertNull(parameter2.getAllowReserved());
      assertNull(parameter2.getDescription());
      assertEquals("^s", parameter2.getIn());
      assertNull(parameter2.getRequired());
      assertNull(parameter2.get$ref());
      assertNull(parameter2.getDeprecated());
      assertNull(parameter2.getAllowEmptyValue());
      assertNull(parameter2.getStyle());
      assertNull(parameter2.getName());
      assertNull(parameter2.getExample());
      assertNull(parameter2.getExplode());
      assertNull(example0.getDescription());
      assertNull(example0.getSummary());
      assertNull(example0.getExternalValue());
      assertNull(example0.get$ref());
      assertFalse(boolean0 == boolean2);
      assertFalse(boolean0 == boolean3);
      assertFalse(boolean1 == boolean2);
      assertFalse(boolean1 == boolean3);
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string3));
      assertFalse(explode0.equals((Object)explode1));
      assertFalse(explode1.equals((Object)explode0));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string3));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals(0, contentArray0.length);
      assertNotNull(optional0);
      
      String string5 = "RC}-C!c+?fV>";
      String string6 = "no description";
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(contact0).email();
      doReturn((String) null).when(contact0).name();
      doReturn((String) null).when(contact0).url();
      String string7 = "c";
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(license0).name();
      doReturn((String) null).when(license0).url();
      String string8 = null;
      String string9 = "";
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn(contact0).when(info0).contact();
      doReturn(string5, string7).when(info0).description();
      doReturn(license0).when(info0).license();
      doReturn(string1).when(info0).termsOfService();
      doReturn(string6, string8).when(info0).title();
      doReturn(string5, string9).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional1 = OperationParser.getInfo(info0);
      assertNotSame(string1, string4);
      assertNotSame(string1, string6);
      assertSame(string1, string2);
      assertSame(string1, string9);
      assertNotSame(string1, string7);
      assertNotSame(string1, string5);
      assertSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string5, string7);
      assertNotSame(string5, string0);
      assertNotSame(string5, string1);
      assertNotSame(string5, string6);
      assertNotSame(string5, string4);
      assertNotSame(string5, string2);
      assertNotSame(string5, string3);
      assertNotSame(string5, string9);
      assertNotSame(string6, string4);
      assertNotSame(string6, string3);
      assertNotSame(string6, string5);
      assertNotSame(string6, string7);
      assertNotSame(string6, string0);
      assertNotSame(string6, string2);
      assertNotSame(string6, string1);
      assertNotSame(string6, string9);
      assertNotSame(string7, string4);
      assertNotSame(string7, string9);
      assertNotSame(string7, string3);
      assertNotSame(string7, string5);
      assertNotSame(string7, string0);
      assertNotSame(string7, string6);
      assertNotSame(string7, string2);
      assertNotSame(string7, string1);
      assertNotSame(string9, string4);
      assertSame(string9, string0);
      assertSame(string9, string1);
      assertNotSame(string9, string6);
      assertSame(string9, string2);
      assertNotSame(string9, string7);
      assertNotSame(string9, string5);
      assertNotSame(string9, string3);
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string7));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string5.equals((Object)string7));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string6));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string9));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string7));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string9));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string9));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string3));
      assertNotNull(optional1);
      
      MediaType mediaType0 = new MediaType();
      assertNull(mediaType0.getExample());
      assertNotNull(mediaType0);
      
      MediaType mediaType1 = mediaType0.example(string3);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType1, mediaType0);
      assertNotSame(string3, string0);
      assertNotSame(string3, string6);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string7);
      assertNotSame(string3, string4);
      assertNotSame(string3, string9);
      assertNotSame(string3, string5);
      assertEquals("[map type; class ", mediaType0.getExample());
      assertEquals("[map type; class ", mediaType1.getExample());
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string6));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string7));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string9));
      assertFalse(string3.equals((Object)string5));
      assertNotNull(mediaType1);
      
      String string10 = "YT;x7ht*\\N{r";
      Encoding encoding0 = new Encoding();
      assertNull(encoding0.getAllowReserved());
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getExplode());
      assertNull(encoding0.getStyle());
      assertNotNull(encoding0);
      
      Encoding encoding1 = encoding0.style(string3);
      assertSame(encoding0, encoding1);
      assertSame(encoding1, encoding0);
      assertNotSame(string3, string0);
      assertNotSame(string3, string6);
      assertNotSame(string3, string10);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string7);
      assertNotSame(string3, string4);
      assertNotSame(string3, string9);
      assertNotSame(string3, string5);
      assertNull(encoding0.getAllowReserved());
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getExplode());
      assertEquals("[map type; class ", encoding0.getStyle());
      assertNull(encoding1.getContentType());
      assertNull(encoding1.getAllowReserved());
      assertNull(encoding1.getExplode());
      assertEquals("[map type; class ", encoding1.getStyle());
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string6));
      assertFalse(string3.equals((Object)string10));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string7));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string9));
      assertFalse(string3.equals((Object)string5));
      assertNotNull(encoding1);
      
      Boolean boolean4 = Boolean.FALSE;
      assertFalse(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean1));
      assertNotNull(boolean4);
      assertFalse(boolean4);
      
      Encoding encoding2 = encoding1.allowReserved(boolean4);
      assertSame(encoding0, encoding2);
      assertSame(encoding0, encoding1);
      assertSame(encoding1, encoding0);
      assertSame(encoding1, encoding2);
      assertSame(encoding2, encoding1);
      assertSame(encoding2, encoding0);
      assertNotSame(string3, string0);
      assertNotSame(string3, string6);
      assertNotSame(string3, string10);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string7);
      assertNotSame(string3, string4);
      assertNotSame(string3, string9);
      assertNotSame(string3, string5);
      assertFalse(encoding0.getAllowReserved());
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getExplode());
      assertEquals("[map type; class ", encoding0.getStyle());
      assertFalse(encoding1.getAllowReserved());
      assertNull(encoding1.getContentType());
      assertNull(encoding1.getExplode());
      assertEquals("[map type; class ", encoding1.getStyle());
      assertFalse(encoding2.getAllowReserved());
      assertEquals("[map type; class ", encoding2.getStyle());
      assertNull(encoding2.getExplode());
      assertNull(encoding2.getContentType());
      assertFalse(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string6));
      assertFalse(string3.equals((Object)string10));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string7));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string9));
      assertFalse(string3.equals((Object)string5));
      assertNotNull(encoding2);
      
      MediaType mediaType2 = mediaType1.addEncoding(string10, encoding2);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType0, mediaType2);
      assertSame(mediaType1, mediaType0);
      assertSame(mediaType1, mediaType2);
      assertNotSame(string10, string5);
      assertNotSame(string10, string7);
      assertNotSame(string10, string1);
      assertNotSame(string10, string0);
      assertNotSame(string10, string2);
      assertNotSame(string10, string3);
      assertNotSame(string10, string9);
      assertNotSame(string10, string4);
      assertNotSame(string10, string6);
      assertSame(encoding0, encoding2);
      assertSame(encoding0, encoding1);
      assertSame(encoding1, encoding0);
      assertSame(encoding1, encoding2);
      assertSame(encoding2, encoding1);
      assertSame(encoding2, encoding0);
      assertSame(mediaType2, mediaType1);
      assertSame(mediaType2, mediaType0);
      assertNotSame(string3, string0);
      assertNotSame(string3, string6);
      assertNotSame(string3, string10);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string7);
      assertNotSame(string3, string4);
      assertNotSame(string3, string9);
      assertNotSame(string3, string5);
      assertEquals("[map type; class ", mediaType0.getExample());
      assertEquals("[map type; class ", mediaType1.getExample());
      assertFalse(encoding0.getAllowReserved());
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getExplode());
      assertEquals("[map type; class ", encoding0.getStyle());
      assertFalse(encoding1.getAllowReserved());
      assertNull(encoding1.getContentType());
      assertNull(encoding1.getExplode());
      assertEquals("[map type; class ", encoding1.getStyle());
      assertFalse(encoding2.getAllowReserved());
      assertEquals("[map type; class ", encoding2.getStyle());
      assertNull(encoding2.getExplode());
      assertNull(encoding2.getContentType());
      assertEquals("[map type; class ", mediaType2.getExample());
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string6));
      assertFalse(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string6));
      assertFalse(string3.equals((Object)string10));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string7));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string9));
      assertFalse(string3.equals((Object)string5));
      assertNotNull(mediaType2);
      
      String string11 = "fkZsA_S";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn(string3, (String) null).when(exampleObject0).externalValue();
      doReturn(string5, string6, string11, string5).when(exampleObject0).name();
      doReturn(string7, (String) null).when(exampleObject0).summary();
      doReturn(string2).when(exampleObject0).value();
      Optional<MediaType> optional2 = OperationParser.getMediaType(mediaType2, exampleObject0);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType0, mediaType2);
      assertSame(mediaType1, mediaType0);
      assertSame(mediaType1, mediaType2);
      assertNotSame(string10, string5);
      assertNotSame(string10, string7);
      assertNotSame(string10, string1);
      assertNotSame(string10, string0);
      assertNotSame(string10, string2);
      assertNotSame(string10, string3);
      assertNotSame(string10, string9);
      assertNotSame(string10, string4);
      assertNotSame(string10, string11);
      assertNotSame(string10, string6);
      assertSame(encoding0, encoding2);
      assertSame(encoding0, encoding1);
      assertSame(encoding1, encoding0);
      assertSame(encoding1, encoding2);
      assertSame(encoding2, encoding1);
      assertSame(encoding2, encoding0);
      assertNotSame(string2, string5);
      assertNotSame(string2, string10);
      assertNotSame(string2, string7);
      assertSame(string2, string0);
      assertNotSame(string2, string6);
      assertSame(string2, string9);
      assertSame(string2, string1);
      assertNotSame(string2, string4);
      assertNotSame(string2, string11);
      assertNotSame(string2, string3);
      assertSame(mediaType2, mediaType1);
      assertSame(mediaType2, mediaType0);
      assertNotSame(string11, string4);
      assertNotSame(string11, string9);
      assertNotSame(string11, string3);
      assertNotSame(string11, string5);
      assertNotSame(string11, string6);
      assertNotSame(string11, string7);
      assertNotSame(string11, string0);
      assertNotSame(string11, string2);
      assertNotSame(string11, string10);
      assertNotSame(string11, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string6);
      assertNotSame(string3, string10);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string7);
      assertNotSame(string3, string11);
      assertNotSame(string3, string4);
      assertNotSame(string3, string9);
      assertNotSame(string3, string5);
      assertNotSame(string5, string10);
      assertNotSame(string5, string7);
      assertNotSame(string5, string0);
      assertNotSame(string5, string1);
      assertNotSame(string5, string6);
      assertNotSame(string5, string4);
      assertNotSame(string5, string11);
      assertNotSame(string5, string2);
      assertNotSame(string5, string3);
      assertNotSame(string5, string9);
      assertNotSame(string6, string4);
      assertNotSame(string6, string11);
      assertNotSame(string6, string3);
      assertNotSame(string6, string5);
      assertNotSame(string6, string7);
      assertNotSame(string6, string0);
      assertNotSame(string6, string2);
      assertNotSame(string6, string1);
      assertNotSame(string6, string10);
      assertNotSame(string6, string9);
      assertNotSame(string7, string4);
      assertNotSame(string7, string11);
      assertNotSame(string7, string9);
      assertNotSame(string7, string3);
      assertNotSame(string7, string5);
      assertNotSame(string7, string0);
      assertNotSame(string7, string6);
      assertNotSame(string7, string2);
      assertNotSame(string7, string10);
      assertNotSame(string7, string1);
      assertEquals("[map type; class ", mediaType0.getExample());
      assertEquals("[map type; class ", mediaType1.getExample());
      assertFalse(encoding0.getAllowReserved());
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getExplode());
      assertEquals("[map type; class ", encoding0.getStyle());
      assertFalse(encoding1.getAllowReserved());
      assertNull(encoding1.getContentType());
      assertNull(encoding1.getExplode());
      assertEquals("[map type; class ", encoding1.getStyle());
      assertFalse(encoding2.getAllowReserved());
      assertEquals("[map type; class ", encoding2.getStyle());
      assertNull(encoding2.getExplode());
      assertNull(encoding2.getContentType());
      assertEquals("[map type; class ", mediaType2.getExample());
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string11));
      assertFalse(string10.equals((Object)string6));
      assertFalse(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean1));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string10));
      assertFalse(string2.equals((Object)string7));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string11));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string9));
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string5));
      assertFalse(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string7));
      assertFalse(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string6));
      assertFalse(string3.equals((Object)string10));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string7));
      assertFalse(string3.equals((Object)string11));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string9));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string5.equals((Object)string10));
      assertFalse(string5.equals((Object)string7));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string6));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string11));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string9));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string11));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string7));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string10));
      assertFalse(string6.equals((Object)string9));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string11));
      assertFalse(string7.equals((Object)string9));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string10));
      assertFalse(string7.equals((Object)string1));
      assertNotNull(optional2);
      
      boolean boolean5 = false;
      io.swagger.oas.annotations.parameters.RequestBody requestBody0 = mock(io.swagger.oas.annotations.parameters.RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(requestBody0).description();
      doReturn(boolean5).when(requestBody0).required();
      Optional<RequestBody> optional3 = OperationParser.getRequestBody(requestBody0, components4);
      assertNotSame(string0, string5);
      assertNotSame(string0, string10);
      assertNotSame(string0, string6);
      assertSame(string0, string9);
      assertSame(string0, string1);
      assertSame(string0, string2);
      assertNotSame(string0, string4);
      assertNotSame(string0, string11);
      assertNotSame(string0, string7);
      assertNotSame(string0, string3);
      assertSame(components0, components4);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string6);
      assertNotSame(string3, string10);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string7);
      assertNotSame(string3, string11);
      assertNotSame(string3, string4);
      assertNotSame(string3, string9);
      assertNotSame(string3, string5);
      assertSame(components1, components2);
      assertSame(components1, components4);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertNotSame(string4, string9);
      assertNotSame(string4, string11);
      assertNotSame(string4, string3);
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      assertNotSame(string4, string7);
      assertNotSame(string4, string5);
      assertNotSame(string4, string10);
      assertNotSame(string4, string0);
      assertNotSame(string4, string6);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(components2, components0);
      assertSame(components2, components4);
      assertSame(parameter1, parameter2);
      assertSame(parameter2, parameter1);
      assertSame(components3, components2);
      assertSame(components3, components4);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertSame(components4, components1);
      assertSame(components4, components3);
      assertSame(components4, components2);
      assertSame(components4, components0);
      assertNull(schema1.getType());
      assertNull(schema1.getMaxLength());
      assertNull(schema1.getMaxProperties());
      assertNull(schema1.getMinProperties());
      assertNull(schema1.getWriteOnly());
      assertNull(schema1.getMinLength());
      assertNull(schema1.get$ref());
      assertNull(schema1.getDescription());
      assertNull(schema1.getExclusiveMaximum());
      assertNull(schema1.getTitle());
      assertNull(schema1.getExclusiveMinimum());
      assertNull(schema1.getMaxItems());
      assertNull(schema1.getNullable());
      assertNull(schema1.getUniqueItems());
      assertNull(schema1.getReadOnly());
      assertNull(schema1.getPattern());
      assertNull(schema1.getName());
      assertNull(schema1.getFormat());
      assertNull(schema1.getMinItems());
      assertNull(schema1.getDeprecated());
      assertNull(parameter1.getName());
      assertNull(parameter1.getExample());
      assertNull(parameter1.getStyle());
      assertNull(parameter1.getAllowEmptyValue());
      assertNull(parameter1.getRequired());
      assertEquals("^s", parameter1.getIn());
      assertNull(parameter1.getDescription());
      assertNull(parameter1.getAllowReserved());
      assertNull(parameter1.get$ref());
      assertNull(parameter1.getDeprecated());
      assertNull(parameter1.getExplode());
      assertNull(parameter2.getAllowReserved());
      assertNull(parameter2.getDescription());
      assertEquals("^s", parameter2.getIn());
      assertNull(parameter2.getRequired());
      assertNull(parameter2.get$ref());
      assertNull(parameter2.getDeprecated());
      assertNull(parameter2.getAllowEmptyValue());
      assertNull(parameter2.getStyle());
      assertNull(parameter2.getName());
      assertNull(parameter2.getExample());
      assertNull(parameter2.getExplode());
      assertNull(example0.getDescription());
      assertNull(example0.getSummary());
      assertNull(example0.getExternalValue());
      assertNull(example0.get$ref());
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string10));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string11));
      assertFalse(string0.equals((Object)string7));
      assertFalse(string0.equals((Object)string3));
      assertFalse(boolean5 == boolean0);
      assertFalse(boolean5 == boolean1);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string6));
      assertFalse(string3.equals((Object)string10));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string7));
      assertFalse(string3.equals((Object)string11));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string9));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string4.equals((Object)string9));
      assertFalse(string4.equals((Object)string11));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string7));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string10));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string6));
      assertNotNull(optional3);
      
      String string12 = "|0;+";
      String string13 = "";
      License license1 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(string12, string13).when(license1).name();
      doReturn(string6, string9).when(license1).url();
      Optional<io.swagger.oas.models.info.License> optional4 = OperationParser.getLicense(license1);
      assertNotSame(string12, string6);
      assertNotSame(string12, string7);
      assertNotSame(string12, string0);
      assertNotSame(string12, string2);
      assertNotSame(string12, string5);
      assertNotSame(string12, string10);
      assertNotSame(string12, string1);
      assertNotSame(string12, string3);
      assertNotSame(string12, string9);
      assertNotSame(string12, string13);
      assertNotSame(string12, string4);
      assertNotSame(string12, string11);
      assertNotSame(string13, string6);
      assertNotSame(string13, string7);
      assertSame(string13, string9);
      assertSame(string13, string2);
      assertSame(string13, string0);
      assertNotSame(string13, string4);
      assertNotSame(string13, string10);
      assertSame(string13, string1);
      assertNotSame(string13, string12);
      assertNotSame(string13, string3);
      assertNotSame(string13, string5);
      assertNotSame(string13, string11);
      assertNotSame(string6, string4);
      assertNotSame(string6, string11);
      assertNotSame(string6, string3);
      assertNotSame(string6, string5);
      assertNotSame(string6, string12);
      assertNotSame(string6, string7);
      assertNotSame(string6, string0);
      assertNotSame(string6, string2);
      assertNotSame(string6, string1);
      assertNotSame(string6, string9);
      assertNotSame(string6, string10);
      assertNotSame(string6, string13);
      assertNotSame(string9, string4);
      assertNotSame(string9, string11);
      assertSame(string9, string0);
      assertNotSame(string9, string10);
      assertSame(string9, string1);
      assertNotSame(string9, string6);
      assertSame(string9, string13);
      assertSame(string9, string2);
      assertNotSame(string9, string7);
      assertNotSame(string9, string12);
      assertNotSame(string9, string5);
      assertNotSame(string9, string3);
      assertFalse(string12.equals((Object)string6));
      assertFalse(string12.equals((Object)string7));
      assertFalse(string12.equals((Object)string0));
      assertFalse(string12.equals((Object)string2));
      assertFalse(string12.equals((Object)string5));
      assertFalse(string12.equals((Object)string10));
      assertFalse(string12.equals((Object)string1));
      assertFalse(string12.equals((Object)string3));
      assertFalse(string12.equals((Object)string9));
      assertFalse(string12.equals((Object)string13));
      assertFalse(string12.equals((Object)string4));
      assertFalse(string12.equals((Object)string11));
      assertFalse(string13.equals((Object)string6));
      assertFalse(string13.equals((Object)string7));
      assertFalse(string13.equals((Object)string10));
      assertFalse(string13.equals((Object)string4));
      assertFalse(string13.equals((Object)string3));
      assertFalse(string13.equals((Object)string12));
      assertFalse(string13.equals((Object)string5));
      assertFalse(string13.equals((Object)string11));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string11));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string12));
      assertFalse(string6.equals((Object)string7));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string9));
      assertFalse(string6.equals((Object)string10));
      assertFalse(string6.equals((Object)string13));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string11));
      assertFalse(string9.equals((Object)string10));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string12));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string3));
      assertNotNull(optional4);
      
      String[] stringArray0 = new String[0];
      Optional<Set<Tag>> optional5 = OperationParser.getTags(stringArray0);
      assertEquals(0, stringArray0.length);
      assertNotNull(optional5);
      
      ApiResponse[] apiResponseArray0 = null;
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Produces produces1 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Optional<ApiResponses> optional6 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces1, components2);
      assertNotSame(string4, string9);
      assertNotSame(string4, string11);
      assertNotSame(string4, string3);
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      assertNotSame(string4, string7);
      assertNotSame(string4, string0);
      assertNotSame(string4, string5);
      assertNotSame(string4, string10);
      assertNotSame(string4, string13);
      assertNotSame(string4, string6);
      assertNotSame(string4, string12);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(components2, components0);
      assertSame(components2, components4);
      assertSame(components0, components4);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string13);
      assertNotSame(string3, string6);
      assertNotSame(string3, string10);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string7);
      assertNotSame(string3, string11);
      assertNotSame(string3, string4);
      assertNotSame(string3, string9);
      assertNotSame(string3, string12);
      assertNotSame(string3, string5);
      assertSame(components1, components2);
      assertSame(components1, components4);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertNull(schema1.getType());
      assertNull(schema1.getMaxLength());
      assertNull(schema1.getMaxProperties());
      assertNull(schema1.getMinProperties());
      assertNull(schema1.getWriteOnly());
      assertNull(schema1.getMinLength());
      assertNull(schema1.get$ref());
      assertNull(schema1.getDescription());
      assertNull(schema1.getExclusiveMaximum());
      assertNull(schema1.getTitle());
      assertNull(schema1.getExclusiveMinimum());
      assertNull(schema1.getMaxItems());
      assertNull(schema1.getNullable());
      assertNull(schema1.getUniqueItems());
      assertNull(schema1.getReadOnly());
      assertNull(schema1.getPattern());
      assertNull(schema1.getName());
      assertNull(schema1.getFormat());
      assertNull(schema1.getMinItems());
      assertNull(schema1.getDeprecated());
      assertNull(example0.getDescription());
      assertNull(example0.getSummary());
      assertNull(example0.getExternalValue());
      assertNull(example0.get$ref());
      assertFalse(string4.equals((Object)string9));
      assertFalse(string4.equals((Object)string11));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string7));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string10));
      assertFalse(string4.equals((Object)string13));
      assertFalse(string4.equals((Object)string6));
      assertFalse(string4.equals((Object)string12));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string13));
      assertFalse(string3.equals((Object)string6));
      assertFalse(string3.equals((Object)string10));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string7));
      assertFalse(string3.equals((Object)string11));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string9));
      assertFalse(string3.equals((Object)string12));
      assertFalse(string3.equals((Object)string5));
      assertNotNull(optional6);
  }

  @Test(timeout = 11000)
  public void test083()  throws Throwable  {
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(link0).description();
      doReturn((String) null).when(link0).operationId();
      doReturn((String) null).when(link0).operationRef();
      Optional<io.swagger.oas.models.links.Link> optional0 = OperationParser.getLink(link0);
      assertNotNull(optional0);
      
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(info0).description();
      doReturn((String) null).when(info0).termsOfService();
      doReturn((String) null).when(info0).title();
      doReturn((String) null).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional1 = OperationParser.getInfo(info0);
      assertNotNull(optional1);
      
      Server server0 = null;
      Optional<io.swagger.oas.models.servers.Server> optional2 = OperationParser.getServer(server0);
      assertNotNull(optional2);
      
      Optional<io.swagger.oas.models.servers.Server> optional3 = OperationParser.getServer(server0);
      assertSame(optional3, optional2);
      assertNotNull(optional3);
      
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(parameter0).allowEmptyValue();
      doReturn(false).when(parameter0).allowReserved();
      doReturn((Content[]) null).when(parameter0).content();
      doReturn(false).when(parameter0).deprecated();
      doReturn((String) null).when(parameter0).description();
      doReturn((Explode) null, (Explode) null, (Explode) null).when(parameter0).explode();
      doReturn((String) null).when(parameter0).in();
      doReturn((String) null).when(parameter0).name();
      doReturn(false).when(parameter0).required();
      doReturn((Schema) null, (Schema) null).when(parameter0).schema();
      doReturn((String) null).when(parameter0).style();
      Components components0 = new Components();
      assertNotNull(components0);
      
      Map<String, Callback> map0 = components0.getCallbacks();
      assertNull(map0);
      
      Components components1 = components0.callbacks(map0);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertNotNull(components1);
      
      String string0 = "no description";
      Header header0 = new Header();
      assertNull(header0.getRequired());
      assertNull(header0.getDeprecated());
      assertNull(header0.getExplode());
      assertNull(header0.getStyle());
      assertNull(header0.getExample());
      assertNull(header0.get$ref());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getDescription());
      assertNotNull(header0);
      
      Components components2 = components1.addHeaders(string0, header0);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertNull(header0.getRequired());
      assertNull(header0.getDeprecated());
      assertNull(header0.getExplode());
      assertNull(header0.getStyle());
      assertNull(header0.getExample());
      assertNull(header0.get$ref());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getDescription());
      assertNotNull(components2);
      
      RequestBody requestBody0 = new RequestBody();
      assertNull(requestBody0.getDescription());
      assertNull(requestBody0.getRequired());
      assertNull(requestBody0.get$ref());
      assertNotNull(requestBody0);
      
      RequestBody requestBody1 = requestBody0.description(string0);
      assertSame(requestBody0, requestBody1);
      assertSame(requestBody1, requestBody0);
      assertEquals("no description", requestBody0.getDescription());
      assertNull(requestBody0.getRequired());
      assertNull(requestBody0.get$ref());
      assertNull(requestBody1.getRequired());
      assertNull(requestBody1.get$ref());
      assertEquals("no description", requestBody1.getDescription());
      assertNotNull(requestBody1);
      
      Components components3 = components2.addRequestBodies(string0, requestBody1);
      assertSame(components3, components2);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components1, components3);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(requestBody0, requestBody1);
      assertSame(requestBody1, requestBody0);
      assertNull(header0.getRequired());
      assertNull(header0.getDeprecated());
      assertNull(header0.getExplode());
      assertNull(header0.getStyle());
      assertNull(header0.getExample());
      assertNull(header0.get$ref());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getDescription());
      assertEquals("no description", requestBody0.getDescription());
      assertNull(requestBody0.getRequired());
      assertNull(requestBody0.get$ref());
      assertNull(requestBody1.getRequired());
      assertNull(requestBody1.get$ref());
      assertEquals("no description", requestBody1.getDescription());
      assertNotNull(components3);
      
      boolean boolean0 = components1.equals(map0);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components1, components3);
      assertFalse(boolean0);
      
      HashMap<String, Example> hashMap0 = new HashMap<String, Example>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      HashMap<String, Example> hashMap1 = new HashMap<String, Example>(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertNotNull(hashMap1);
      
      Components components4 = components1.examples(hashMap1);
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertSame(components4, components2);
      assertSame(components4, components1);
      assertSame(components4, components3);
      assertSame(components4, components0);
      assertSame(components0, components1);
      assertSame(components0, components4);
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertSame(components1, components0);
      assertSame(components1, components4);
      assertSame(components1, components2);
      assertSame(components1, components3);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertNotNull(components4);
      
      io.swagger.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.oas.models.responses.ApiResponse();
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      assertNotNull(apiResponse0);
      
      Components components5 = components3.addResponses(string0, apiResponse0);
      assertSame(components3, components2);
      assertSame(components3, components5);
      assertSame(components3, components4);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertSame(components5, components2);
      assertSame(components5, components0);
      assertSame(components5, components1);
      assertSame(components5, components3);
      assertSame(components5, components4);
      assertSame(components0, components1);
      assertSame(components0, components4);
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertSame(components0, components5);
      assertSame(components1, components0);
      assertSame(components1, components4);
      assertSame(components1, components2);
      assertSame(components1, components5);
      assertSame(components1, components3);
      assertSame(components2, components5);
      assertSame(components2, components0);
      assertSame(components2, components4);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(requestBody0, requestBody1);
      assertSame(requestBody1, requestBody0);
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      assertNull(header0.getRequired());
      assertNull(header0.getDeprecated());
      assertNull(header0.getExplode());
      assertNull(header0.getStyle());
      assertNull(header0.getExample());
      assertNull(header0.get$ref());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getDescription());
      assertEquals("no description", requestBody0.getDescription());
      assertNull(requestBody0.getRequired());
      assertNull(requestBody0.get$ref());
      assertNull(requestBody1.getRequired());
      assertNull(requestBody1.get$ref());
      assertEquals("no description", requestBody1.getDescription());
      assertNotNull(components5);
      
      Optional<io.swagger.oas.models.parameters.Parameter> optional4 = OperationParser.getParameter(parameter0, components5);
      assertSame(components3, components2);
      assertSame(components3, components5);
      assertSame(components3, components4);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertSame(components5, components2);
      assertSame(components5, components0);
      assertSame(components5, components1);
      assertSame(components5, components3);
      assertSame(components5, components4);
      assertSame(components0, components1);
      assertSame(components0, components4);
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertSame(components0, components5);
      assertSame(components1, components0);
      assertSame(components1, components4);
      assertSame(components1, components2);
      assertSame(components1, components5);
      assertSame(components1, components3);
      assertSame(components2, components5);
      assertSame(components2, components0);
      assertSame(components2, components4);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(requestBody0, requestBody1);
      assertSame(requestBody1, requestBody0);
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      assertNull(header0.getRequired());
      assertNull(header0.getDeprecated());
      assertNull(header0.getExplode());
      assertNull(header0.getStyle());
      assertNull(header0.getExample());
      assertNull(header0.get$ref());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getDescription());
      assertEquals("no description", requestBody0.getDescription());
      assertNull(requestBody0.getRequired());
      assertNull(requestBody0.get$ref());
      assertNull(requestBody1.getRequired());
      assertNull(requestBody1.get$ref());
      assertEquals("no description", requestBody1.getDescription());
      assertNotNull(optional4);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      stringArray0[2] = string0;
      stringArray0[3] = string0;
      stringArray0[4] = string0;
      stringArray0[5] = string0;
      stringArray0[6] = string0;
      Optional<Set<Tag>> optional5 = OperationParser.getTags(stringArray0);
      assertEquals(7, stringArray0.length);
      assertNotNull(optional5);
      
      Parameter parameter1 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(parameter1).allowEmptyValue();
      doReturn(false).when(parameter1).allowReserved();
      doReturn((Content[]) null).when(parameter1).content();
      doReturn(false).when(parameter1).deprecated();
      doReturn((String) null).when(parameter1).description();
      doReturn((Explode) null, (Explode) null, (Explode) null).when(parameter1).explode();
      doReturn((String) null).when(parameter1).in();
      doReturn((String) null).when(parameter1).name();
      doReturn(false).when(parameter1).required();
      doReturn((Schema) null, (Schema) null).when(parameter1).schema();
      doReturn((String) null).when(parameter1).style();
      Optional<io.swagger.oas.models.parameters.Parameter> optional6 = OperationParser.getParameter(parameter1, components1);
      assertNotSame(optional6, optional4);
      assertSame(components0, components1);
      assertSame(components0, components4);
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertSame(components0, components5);
      assertSame(components1, components0);
      assertSame(components1, components4);
      assertSame(components1, components2);
      assertSame(components1, components5);
      assertSame(components1, components3);
      assertTrue(optional6.equals((Object)optional4));
      assertNotNull(optional6);
      
      ApiResponse[] apiResponseArray0 = new ApiResponse[6];
      ApiResponse apiResponse1 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(apiResponse1).content();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(apiResponse1).description();
      apiResponseArray0[0] = apiResponse1;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      apiResponseArray0[3] = apiResponseArray0[2];
      apiResponseArray0[4] = apiResponseArray0[3];
      apiResponseArray0[5] = apiResponseArray0[4];
      Produces produces0 = null;
      Optional<ApiResponses> optional7 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components5);
      assertSame(components3, components2);
      assertSame(components3, components5);
      assertSame(components3, components4);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertSame(components5, components2);
      assertSame(components5, components0);
      assertSame(components5, components1);
      assertSame(components5, components3);
      assertSame(components5, components4);
      assertSame(components0, components1);
      assertSame(components0, components4);
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertSame(components0, components5);
      assertSame(components1, components0);
      assertSame(components1, components4);
      assertSame(components1, components2);
      assertSame(components1, components5);
      assertSame(components1, components3);
      assertSame(components2, components5);
      assertSame(components2, components0);
      assertSame(components2, components4);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(requestBody0, requestBody1);
      assertSame(requestBody1, requestBody0);
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      assertNull(header0.getRequired());
      assertNull(header0.getDeprecated());
      assertNull(header0.getExplode());
      assertNull(header0.getStyle());
      assertNull(header0.getExample());
      assertNull(header0.get$ref());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getDescription());
      assertEquals("no description", requestBody0.getDescription());
      assertNull(requestBody0.getRequired());
      assertNull(requestBody0.get$ref());
      assertNull(requestBody1.getRequired());
      assertNull(requestBody1.get$ref());
      assertEquals("no description", requestBody1.getDescription());
      assertEquals(6, apiResponseArray0.length);
      assertNotNull(optional7);
  }

  @Test(timeout = 11000)
  public void test084()  throws Throwable  {
      String string0 = null;
      String string1 = "";
      String string2 = "G@j%nS9_Yd%nJ~aL?";
      String string3 = "}v{2Zj==^}U`i-XTD;c";
      String string4 = null;
      Link[] linkArray0 = new Link[2];
      Map<String, io.swagger.oas.models.links.Link> map0 = OperationParser.getLinks(linkArray0);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals(2, linkArray0.length);
      assertNotNull(map0);
      
      Server[] serverArray0 = new Server[4];
      String string5 = "";
      String string6 = "g ";
      String string7 = "R~s:";
      String string8 = "";
      ServerVariable[] serverVariableArray0 = new ServerVariable[5];
      String string9 = "; expected Class<JsonDeserializer>";
      String string10 = "io.swagger.jackson.TypeNameResolver";
      String string11 = "<j/zMp[1m#t}<5";
      String string12 = "5v";
      ServerVariable serverVariable0 = mock(ServerVariable.class, new ViolatedAssumptionAnswer());
      doReturn(string2, string2, string9, string1, string6).when(serverVariable0).description();
      doReturn(string10, string10, string9, string11, string12).when(serverVariable0).name();
      serverVariableArray0[0] = serverVariable0;
      serverVariableArray0[1] = serverVariableArray0[0];
      serverVariableArray0[2] = serverVariableArray0[1];
      serverVariableArray0[3] = serverVariableArray0[2];
      serverVariableArray0[4] = serverVariableArray0[3];
      String string13 = "Wx-A|RR(j*@";
      String string14 = "";
      String string15 = "com.fasterxml.jackson.core.io.SegmentedStringWriter";
      String string16 = "";
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string4).when(server0).description();
      doReturn(string6, string7).when(server0).url();
      doReturn(serverVariableArray0).when(server0).variables();
      serverArray0[0] = server0;
      serverArray0[2] = serverArray0[1];
      serverArray0[3] = serverArray0[2];
      Optional<List<io.swagger.oas.models.servers.Server>> optional0 = OperationParser.getServers(serverArray0);
      assertEquals(4, serverArray0.length);
      assertNotNull(optional0);
      
      ApiResponse[] apiResponseArray0 = new ApiResponse[2];
      Content[] contentArray0 = new Content[4];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Schema) null).when(content0).schema();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      contentArray0[3] = contentArray0[2];
      String string17 = "AJ*xH 2";
      ApiResponse apiResponse0 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn(contentArray0).when(apiResponse0).content();
      doReturn(string17, string10).when(apiResponse0).description();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      assertNotNull(components0);
      
      // Undeclared exception!
      try { 
        OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test085()  throws Throwable  {
      String string0 = "|5F{&+:n$6f";
      String string1 = "";
      String string2 = "";
      String string3 = "";
      String string4 = "";
      String string5 = ") as a Bean";
      String string6 = "";
      String string7 = "";
      String string8 = "";
      String string9 = "io.swagger.jaxrs2.OperationParser";
      String string10 = "52.{?S";
      LinkParameter[] linkParameterArray0 = new LinkParameter[6];
      String string11 = "";
      String string12 = "Rd,DjCUF/1uYX7aw";
      String string13 = null;
      LinkParameter linkParameter0 = mock(LinkParameter.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null).when(linkParameter0).expression();
      doReturn(string11, string12, string13, string7, string0).when(linkParameter0).name();
      linkParameterArray0[0] = linkParameter0;
      linkParameterArray0[1] = linkParameterArray0[0];
      linkParameterArray0[2] = linkParameterArray0[1];
      linkParameterArray0[3] = linkParameterArray0[2];
      linkParameterArray0[4] = linkParameterArray0[3];
      linkParameterArray0[5] = linkParameterArray0[4];
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string1).when(link0).description();
      doReturn(string3).when(link0).operationId();
      doReturn(string6).when(link0).operationRef();
      doReturn(linkParameterArray0).when(link0).parameters();
      Optional<io.swagger.oas.models.links.Link> optional0 = OperationParser.getLink(link0);
      assertNotSame(string0, string11);
      assertNotSame(string0, string9);
      assertNotSame(string0, string2);
      assertNotSame(string0, string4);
      assertNotSame(string0, string8);
      assertNotSame(string0, string6);
      assertNotSame(string0, string7);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string5);
      assertNotSame(string0, string12);
      assertNotSame(string0, string10);
      assertNotSame(string1, string0);
      assertSame(string1, string3);
      assertNotSame(string1, string12);
      assertNotSame(string1, string5);
      assertNotSame(string1, string10);
      assertSame(string1, string8);
      assertSame(string1, string7);
      assertSame(string1, string6);
      assertSame(string1, string11);
      assertSame(string1, string4);
      assertSame(string1, string2);
      assertNotSame(string1, string9);
      assertNotSame(string3, string5);
      assertNotSame(string3, string10);
      assertSame(string3, string6);
      assertSame(string3, string2);
      assertSame(string3, string1);
      assertNotSame(string3, string9);
      assertSame(string3, string11);
      assertSame(string3, string8);
      assertSame(string3, string4);
      assertSame(string3, string7);
      assertNotSame(string3, string12);
      assertNotSame(string3, string0);
      assertSame(string6, string4);
      assertNotSame(string6, string12);
      assertSame(string6, string3);
      assertSame(string6, string7);
      assertNotSame(string6, string10);
      assertSame(string6, string8);
      assertSame(string6, string1);
      assertSame(string6, string2);
      assertNotSame(string6, string5);
      assertNotSame(string6, string9);
      assertSame(string6, string11);
      assertNotSame(string6, string0);
      assertFalse(string0.equals((Object)string11));
      assertFalse(string0.equals((Object)string9));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string8));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string7));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string12));
      assertFalse(string0.equals((Object)string10));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string12));
      assertFalse(string1.equals((Object)string10));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string9));
      assertFalse(string3.equals((Object)string10));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string9));
      assertFalse(string3.equals((Object)string12));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string6.equals((Object)string12));
      assertFalse(string6.equals((Object)string10));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string9));
      assertFalse(string6.equals((Object)string0));
      assertEquals(6, linkParameterArray0.length);
      assertNotNull(optional0);
      
      String string14 = "*/*";
      String string15 = "MSG4O*>Wa:j;B6|29r0";
      String string16 = "(t-vR";
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string14, string15).when(externalDocumentation0).description();
      doReturn(string5, string16).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional1 = OperationParser.getExternalDocumentation(externalDocumentation0);
      assertNotSame(string5, string10);
      assertNotSame(string5, string3);
      assertNotSame(string5, string7);
      assertNotSame(string5, string8);
      assertNotSame(string5, string4);
      assertNotSame(string5, string9);
      assertNotSame(string5, string16);
      assertNotSame(string5, string0);
      assertNotSame(string5, string11);
      assertNotSame(string5, string6);
      assertNotSame(string5, string14);
      assertNotSame(string5, string2);
      assertNotSame(string5, string15);
      assertNotSame(string5, string1);
      assertNotSame(string5, string12);
      assertNotSame(string14, string15);
      assertNotSame(string14, string5);
      assertNotSame(string14, string7);
      assertNotSame(string14, string11);
      assertNotSame(string14, string1);
      assertNotSame(string14, string12);
      assertNotSame(string14, string8);
      assertNotSame(string14, string3);
      assertNotSame(string14, string10);
      assertNotSame(string14, string0);
      assertNotSame(string14, string9);
      assertNotSame(string14, string16);
      assertNotSame(string14, string6);
      assertNotSame(string14, string2);
      assertNotSame(string14, string4);
      assertNotSame(string15, string10);
      assertNotSame(string15, string1);
      assertNotSame(string15, string12);
      assertNotSame(string15, string8);
      assertNotSame(string15, string3);
      assertNotSame(string15, string7);
      assertNotSame(string15, string11);
      assertNotSame(string15, string4);
      assertNotSame(string15, string9);
      assertNotSame(string15, string5);
      assertNotSame(string15, string16);
      assertNotSame(string15, string6);
      assertNotSame(string15, string0);
      assertNotSame(string15, string14);
      assertNotSame(string15, string2);
      assertNotSame(string16, string4);
      assertNotSame(string16, string9);
      assertNotSame(string16, string7);
      assertNotSame(string16, string11);
      assertNotSame(string16, string1);
      assertNotSame(string16, string5);
      assertNotSame(string16, string12);
      assertNotSame(string16, string10);
      assertNotSame(string16, string15);
      assertNotSame(string16, string3);
      assertNotSame(string16, string6);
      assertNotSame(string16, string8);
      assertNotSame(string16, string0);
      assertNotSame(string16, string14);
      assertNotSame(string16, string2);
      assertFalse(string5.equals((Object)string10));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string7));
      assertFalse(string5.equals((Object)string8));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string9));
      assertFalse(string5.equals((Object)string16));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string11));
      assertFalse(string5.equals((Object)string6));
      assertFalse(string5.equals((Object)string14));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string15));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string12));
      assertFalse(string14.equals((Object)string15));
      assertFalse(string14.equals((Object)string5));
      assertFalse(string14.equals((Object)string7));
      assertFalse(string14.equals((Object)string11));
      assertFalse(string14.equals((Object)string1));
      assertFalse(string14.equals((Object)string12));
      assertFalse(string14.equals((Object)string8));
      assertFalse(string14.equals((Object)string3));
      assertFalse(string14.equals((Object)string10));
      assertFalse(string14.equals((Object)string0));
      assertFalse(string14.equals((Object)string9));
      assertFalse(string14.equals((Object)string16));
      assertFalse(string14.equals((Object)string6));
      assertFalse(string14.equals((Object)string2));
      assertFalse(string14.equals((Object)string4));
      assertFalse(string15.equals((Object)string10));
      assertFalse(string15.equals((Object)string1));
      assertFalse(string15.equals((Object)string12));
      assertFalse(string15.equals((Object)string8));
      assertFalse(string15.equals((Object)string3));
      assertFalse(string15.equals((Object)string7));
      assertFalse(string15.equals((Object)string11));
      assertFalse(string15.equals((Object)string4));
      assertFalse(string15.equals((Object)string9));
      assertFalse(string15.equals((Object)string5));
      assertFalse(string15.equals((Object)string16));
      assertFalse(string15.equals((Object)string6));
      assertFalse(string15.equals((Object)string0));
      assertFalse(string15.equals((Object)string14));
      assertFalse(string15.equals((Object)string2));
      assertFalse(string16.equals((Object)string4));
      assertFalse(string16.equals((Object)string9));
      assertFalse(string16.equals((Object)string7));
      assertFalse(string16.equals((Object)string11));
      assertFalse(string16.equals((Object)string1));
      assertFalse(string16.equals((Object)string5));
      assertFalse(string16.equals((Object)string12));
      assertFalse(string16.equals((Object)string10));
      assertFalse(string16.equals((Object)string15));
      assertFalse(string16.equals((Object)string3));
      assertFalse(string16.equals((Object)string6));
      assertFalse(string16.equals((Object)string8));
      assertFalse(string16.equals((Object)string0));
      assertFalse(string16.equals((Object)string14));
      assertFalse(string16.equals((Object)string2));
      assertNotNull(optional1);
      
      ApiResponse[] apiResponseArray0 = new ApiResponse[13];
      Content[] contentArray0 = null;
      String string17 = "WRITE_DATES_AS_TIMESTAMPS";
      String string18 = "";
      ApiResponse apiResponse0 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponse0;
      apiResponseArray0[3] = apiResponseArray0[2];
      apiResponseArray0[5] = apiResponseArray0[4];
      apiResponseArray0[6] = apiResponseArray0[5];
      apiResponseArray0[7] = apiResponseArray0[6];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      assertNotNull(components0);
      
      String string19 = "|5}c',M;c";
      SecurityScheme securityScheme0 = new SecurityScheme();
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.getBearerFormat());
      assertNotNull(securityScheme0);
      
      io.swagger.oas.models.responses.ApiResponse apiResponse1 = new io.swagger.oas.models.responses.ApiResponse();
      assertNull(apiResponse1.get$ref());
      assertNull(apiResponse1.getDescription());
      assertNotNull(apiResponse1);
      
      Components components1 = components0.addResponses(string19, apiResponse1);
      assertSame(components0, components1);
      assertNotSame(string19, string2);
      assertNotSame(string19, string11);
      assertNotSame(string19, string0);
      assertNotSame(string19, string14);
      assertNotSame(string19, string6);
      assertNotSame(string19, string8);
      assertNotSame(string19, string4);
      assertNotSame(string19, string1);
      assertNotSame(string19, string12);
      assertNotSame(string19, string17);
      assertNotSame(string19, string15);
      assertNotSame(string19, string7);
      assertNotSame(string19, string5);
      assertNotSame(string19, string10);
      assertNotSame(string19, string16);
      assertNotSame(string19, string9);
      assertNotSame(string19, string3);
      assertNotSame(string19, string18);
      assertSame(components1, components0);
      assertNull(apiResponse1.get$ref());
      assertNull(apiResponse1.getDescription());
      assertFalse(string19.equals((Object)string2));
      assertFalse(string19.equals((Object)string11));
      assertFalse(string19.equals((Object)string0));
      assertFalse(string19.equals((Object)string14));
      assertFalse(string19.equals((Object)string6));
      assertFalse(string19.equals((Object)string8));
      assertFalse(string19.equals((Object)string4));
      assertFalse(string19.equals((Object)string1));
      assertFalse(string19.equals((Object)string12));
      assertFalse(string19.equals((Object)string17));
      assertFalse(string19.equals((Object)string15));
      assertFalse(string19.equals((Object)string7));
      assertFalse(string19.equals((Object)string5));
      assertFalse(string19.equals((Object)string10));
      assertFalse(string19.equals((Object)string16));
      assertFalse(string19.equals((Object)string9));
      assertFalse(string19.equals((Object)string3));
      assertFalse(string19.equals((Object)string18));
      assertNotNull(components1);
  }

  @Test(timeout = 11000)
  public void test086()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String string0 = "";
      stringArray0[0] = string0;
      String string1 = "";
      stringArray0[1] = string1;
      String string2 = "Spu!L0";
      stringArray0[2] = string2;
      String string3 = "default";
      stringArray0[3] = string3;
      String string4 = "n\\q+#Ew0ZaJ>QVHOQSn";
      stringArray0[4] = string4;
      String string5 = "";
      boolean boolean0 = false;
      boolean boolean1 = true;
      ExternalDocumentation externalDocumentation0 = null;
      String string6 = "";
      int int0 = 1863;
      int int1 = (-2207);
      boolean boolean2 = false;
      int int2 = 8;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(stringArray0).when(schema0).allowableValues();
      doReturn(string5).when(schema0).defaultValue();
      doReturn(boolean0).when(schema0).deprecated();
      doReturn(string1).when(schema0).description();
      doReturn(string0, stringArray0[3], stringArray0[1]).when(schema0).example();
      doReturn(boolean1, boolean2).when(schema0).exclusiveMaximum();
      doReturn(boolean0).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema0).externalDocs();
      doReturn(string6).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(int2, 0).when(schema0).maxProperties();
      doReturn(int1).when(schema0).minProperties();
      doReturn(stringArray0[1]).when(schema0).pattern();
      doReturn(boolean1, boolean2).when(schema0).readOnly();
      doReturn(string1).when(schema0).ref();
      doReturn(string1).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional0 = (Optional<io.swagger.oas.models.media.Schema>)OperationParser.getSchemaFromAnnotation(schema0);
      assertSame(string0, string6);
      assertNotSame(string0, string2);
      assertNotSame(string0, string4);
      assertNotSame(string0, string3);
      assertSame(string0, string5);
      assertSame(string0, string1);
      assertNotSame(string1, string2);
      assertSame(string1, string0);
      assertSame(string1, string6);
      assertNotSame(string1, string3);
      assertNotSame(string1, string4);
      assertSame(string1, string5);
      assertSame(string5, string6);
      assertNotSame(string5, string2);
      assertSame(string5, string0);
      assertNotSame(string5, string3);
      assertNotSame(string5, string4);
      assertSame(string5, string1);
      assertSame(string6, string1);
      assertSame(string6, string0);
      assertNotSame(string6, string3);
      assertSame(string6, string5);
      assertNotSame(string6, string2);
      assertNotSame(string6, string4);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string3));
      assertFalse(boolean2 == boolean1);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean2);
      assertFalse(boolean1 == boolean0);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertEquals(5, stringArray0.length);
      assertNotNull(optional0);
      
      MediaType mediaType0 = new MediaType();
      assertNull(mediaType0.getExample());
      assertNotNull(mediaType0);
      
      HashMap<String, Encoding> hashMap0 = new HashMap<String, Encoding>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      MediaType mediaType1 = mediaType0.encoding(hashMap0);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType1, mediaType0);
      assertNull(mediaType0.getExample());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(mediaType1.getExample());
      assertNotNull(mediaType1);
      
      io.swagger.oas.models.media.Schema<Integer> schema1 = new io.swagger.oas.models.media.Schema<Integer>();
      assertNull(schema1.getMinLength());
      assertNull(schema1.getName());
      assertNull(schema1.getMaxProperties());
      assertNull(schema1.getExclusiveMaximum());
      assertNull(schema1.getMaxLength());
      assertNull(schema1.getMaxItems());
      assertNull(schema1.getMinItems());
      assertNull(schema1.getPattern());
      assertNull(schema1.getFormat());
      assertNull(schema1.get$ref());
      assertNull(schema1.getExclusiveMinimum());
      assertNull(schema1.getDeprecated());
      assertNull(schema1.getTitle());
      assertNull(schema1.getMinProperties());
      assertNull(schema1.getType());
      assertNull(schema1.getWriteOnly());
      assertNull(schema1.getReadOnly());
      assertNull(schema1.getNullable());
      assertNull(schema1.getDescription());
      assertNull(schema1.getUniqueItems());
      assertNotNull(schema1);
      
      MediaType mediaType2 = mediaType1.schema(schema1);
      assertSame(mediaType0, mediaType2);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType1, mediaType2);
      assertSame(mediaType1, mediaType0);
      assertSame(mediaType2, mediaType1);
      assertSame(mediaType2, mediaType0);
      assertNull(mediaType0.getExample());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(mediaType1.getExample());
      assertNull(schema1.getMinLength());
      assertNull(schema1.getName());
      assertNull(schema1.getMaxProperties());
      assertNull(schema1.getExclusiveMaximum());
      assertNull(schema1.getMaxLength());
      assertNull(schema1.getMaxItems());
      assertNull(schema1.getMinItems());
      assertNull(schema1.getPattern());
      assertNull(schema1.getFormat());
      assertNull(schema1.get$ref());
      assertNull(schema1.getExclusiveMinimum());
      assertNull(schema1.getDeprecated());
      assertNull(schema1.getTitle());
      assertNull(schema1.getMinProperties());
      assertNull(schema1.getType());
      assertNull(schema1.getWriteOnly());
      assertNull(schema1.getReadOnly());
      assertNull(schema1.getNullable());
      assertNull(schema1.getDescription());
      assertNull(schema1.getUniqueItems());
      assertNull(mediaType2.getExample());
      assertNotNull(mediaType2);
      
      Example example0 = new Example();
      assertNull(example0.getExternalValue());
      assertNull(example0.getDescription());
      assertNull(example0.getSummary());
      assertNull(example0.get$ref());
      assertNotNull(example0);
      
      String string7 = "[reference type, class ";
      Example example1 = example0.summary(string7);
      assertSame(example0, example1);
      assertNotSame(string7, string2);
      assertNotSame(string7, string6);
      assertNotSame(string7, string4);
      assertNotSame(string7, string0);
      assertNotSame(string7, string1);
      assertNotSame(string7, string3);
      assertNotSame(string7, string5);
      assertSame(example1, example0);
      assertEquals("[reference type, class ", example0.getSummary());
      assertNull(example0.getExternalValue());
      assertNull(example0.getDescription());
      assertNull(example0.get$ref());
      assertNull(example1.get$ref());
      assertEquals("[reference type, class ", example1.getSummary());
      assertNull(example1.getExternalValue());
      assertNull(example1.getDescription());
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertNotNull(example1);
      
      MediaType mediaType3 = mediaType2.addExamples(string6, example1);
      assertSame(mediaType0, mediaType2);
      assertSame(mediaType0, mediaType3);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType1, mediaType2);
      assertSame(mediaType1, mediaType3);
      assertSame(mediaType1, mediaType0);
      assertSame(mediaType2, mediaType1);
      assertSame(mediaType2, mediaType0);
      assertSame(mediaType2, mediaType3);
      assertSame(example0, example1);
      assertNotSame(string7, string2);
      assertNotSame(string7, string6);
      assertNotSame(string7, string4);
      assertNotSame(string7, string0);
      assertNotSame(string7, string1);
      assertNotSame(string7, string3);
      assertNotSame(string7, string5);
      assertSame(example1, example0);
      assertSame(mediaType3, mediaType0);
      assertSame(mediaType3, mediaType2);
      assertSame(mediaType3, mediaType1);
      assertSame(string6, string1);
      assertSame(string6, string0);
      assertNotSame(string6, string3);
      assertSame(string6, string5);
      assertNotSame(string6, string2);
      assertNotSame(string6, string7);
      assertNotSame(string6, string4);
      assertNull(mediaType0.getExample());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(mediaType1.getExample());
      assertNull(schema1.getMinLength());
      assertNull(schema1.getName());
      assertNull(schema1.getMaxProperties());
      assertNull(schema1.getExclusiveMaximum());
      assertNull(schema1.getMaxLength());
      assertNull(schema1.getMaxItems());
      assertNull(schema1.getMinItems());
      assertNull(schema1.getPattern());
      assertNull(schema1.getFormat());
      assertNull(schema1.get$ref());
      assertNull(schema1.getExclusiveMinimum());
      assertNull(schema1.getDeprecated());
      assertNull(schema1.getTitle());
      assertNull(schema1.getMinProperties());
      assertNull(schema1.getType());
      assertNull(schema1.getWriteOnly());
      assertNull(schema1.getReadOnly());
      assertNull(schema1.getNullable());
      assertNull(schema1.getDescription());
      assertNull(schema1.getUniqueItems());
      assertNull(mediaType2.getExample());
      assertEquals("[reference type, class ", example0.getSummary());
      assertNull(example0.getExternalValue());
      assertNull(example0.getDescription());
      assertNull(example0.get$ref());
      assertNull(example1.get$ref());
      assertEquals("[reference type, class ", example1.getSummary());
      assertNull(example1.getExternalValue());
      assertNull(example1.getDescription());
      assertNull(mediaType3.getExample());
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string7));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(mediaType3);
      
      String string8 = "9FyG7I";
      Encoding encoding0 = new Encoding();
      assertNull(encoding0.getAllowReserved());
      assertNull(encoding0.getStyle());
      assertNull(encoding0.getExplode());
      assertNull(encoding0.getContentType());
      assertNotNull(encoding0);
      
      Boolean boolean3 = Boolean.FALSE;
      assertFalse(boolean3.equals((Object)boolean1));
      assertNotNull(boolean3);
      assertFalse(boolean3);
      
      Encoding encoding1 = encoding0.explode(boolean3);
      assertSame(encoding0, encoding1);
      assertSame(encoding1, encoding0);
      assertNull(encoding0.getAllowReserved());
      assertFalse(encoding0.getExplode());
      assertNull(encoding0.getStyle());
      assertNull(encoding0.getContentType());
      assertFalse(encoding1.getExplode());
      assertNull(encoding1.getAllowReserved());
      assertNull(encoding1.getContentType());
      assertNull(encoding1.getStyle());
      assertFalse(boolean3.equals((Object)boolean1));
      assertNotNull(encoding1);
      
      Encoding encoding2 = encoding1.style(string8);
      assertSame(encoding0, encoding2);
      assertSame(encoding0, encoding1);
      assertSame(encoding1, encoding2);
      assertSame(encoding1, encoding0);
      assertSame(encoding2, encoding1);
      assertSame(encoding2, encoding0);
      assertNotSame(string8, string2);
      assertNotSame(string8, string4);
      assertNotSame(string8, string3);
      assertNotSame(string8, string6);
      assertNotSame(string8, string0);
      assertNotSame(string8, string7);
      assertNotSame(string8, string5);
      assertNotSame(string8, string1);
      assertNull(encoding0.getAllowReserved());
      assertFalse(encoding0.getExplode());
      assertEquals("9FyG7I", encoding0.getStyle());
      assertNull(encoding0.getContentType());
      assertFalse(encoding1.getExplode());
      assertNull(encoding1.getAllowReserved());
      assertEquals("9FyG7I", encoding1.getStyle());
      assertNull(encoding1.getContentType());
      assertFalse(encoding2.getExplode());
      assertEquals("9FyG7I", encoding2.getStyle());
      assertNull(encoding2.getContentType());
      assertNull(encoding2.getAllowReserved());
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string1));
      assertNotNull(encoding2);
      
      MediaType mediaType4 = mediaType3.addEncoding(string8, encoding2);
      assertSame(encoding0, encoding2);
      assertSame(encoding0, encoding1);
      assertSame(encoding1, encoding2);
      assertSame(encoding1, encoding0);
      assertSame(encoding2, encoding1);
      assertSame(encoding2, encoding0);
      assertSame(mediaType4, mediaType0);
      assertSame(mediaType4, mediaType1);
      assertSame(mediaType4, mediaType3);
      assertSame(mediaType4, mediaType2);
      assertNotSame(string6, string8);
      assertSame(string6, string1);
      assertSame(string6, string0);
      assertNotSame(string6, string3);
      assertSame(string6, string5);
      assertNotSame(string6, string2);
      assertNotSame(string6, string7);
      assertNotSame(string6, string4);
      assertSame(mediaType0, mediaType2);
      assertSame(mediaType0, mediaType3);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType0, mediaType4);
      assertSame(mediaType1, mediaType2);
      assertSame(mediaType1, mediaType3);
      assertSame(mediaType1, mediaType0);
      assertSame(mediaType1, mediaType4);
      assertSame(mediaType2, mediaType1);
      assertSame(mediaType2, mediaType0);
      assertSame(mediaType2, mediaType4);
      assertSame(mediaType2, mediaType3);
      assertSame(example0, example1);
      assertNotSame(string7, string2);
      assertNotSame(string7, string6);
      assertNotSame(string7, string4);
      assertNotSame(string7, string0);
      assertNotSame(string7, string1);
      assertNotSame(string7, string3);
      assertNotSame(string7, string5);
      assertNotSame(string7, string8);
      assertSame(example1, example0);
      assertSame(mediaType3, mediaType4);
      assertSame(mediaType3, mediaType0);
      assertSame(mediaType3, mediaType2);
      assertSame(mediaType3, mediaType1);
      assertNotSame(string8, string2);
      assertNotSame(string8, string4);
      assertNotSame(string8, string3);
      assertNotSame(string8, string6);
      assertNotSame(string8, string0);
      assertNotSame(string8, string7);
      assertNotSame(string8, string5);
      assertNotSame(string8, string1);
      assertNull(encoding0.getAllowReserved());
      assertFalse(encoding0.getExplode());
      assertEquals("9FyG7I", encoding0.getStyle());
      assertNull(encoding0.getContentType());
      assertFalse(encoding1.getExplode());
      assertNull(encoding1.getAllowReserved());
      assertEquals("9FyG7I", encoding1.getStyle());
      assertNull(encoding1.getContentType());
      assertFalse(encoding2.getExplode());
      assertEquals("9FyG7I", encoding2.getStyle());
      assertNull(encoding2.getContentType());
      assertNull(encoding2.getAllowReserved());
      assertNull(mediaType4.getExample());
      assertNull(mediaType0.getExample());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(mediaType1.getExample());
      assertNull(schema1.getMinLength());
      assertNull(schema1.getName());
      assertNull(schema1.getMaxProperties());
      assertNull(schema1.getExclusiveMaximum());
      assertNull(schema1.getMaxLength());
      assertNull(schema1.getMaxItems());
      assertNull(schema1.getMinItems());
      assertNull(schema1.getPattern());
      assertNull(schema1.getFormat());
      assertNull(schema1.get$ref());
      assertNull(schema1.getExclusiveMinimum());
      assertNull(schema1.getDeprecated());
      assertNull(schema1.getTitle());
      assertNull(schema1.getMinProperties());
      assertNull(schema1.getType());
      assertNull(schema1.getWriteOnly());
      assertNull(schema1.getReadOnly());
      assertNull(schema1.getNullable());
      assertNull(schema1.getDescription());
      assertNull(schema1.getUniqueItems());
      assertNull(mediaType2.getExample());
      assertEquals("[reference type, class ", example0.getSummary());
      assertNull(example0.getExternalValue());
      assertNull(example0.getDescription());
      assertNull(example0.get$ref());
      assertNull(example1.get$ref());
      assertEquals("[reference type, class ", example1.getSummary());
      assertNull(example1.getExternalValue());
      assertNull(example1.getDescription());
      assertNull(mediaType3.getExample());
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(string6.equals((Object)string8));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string7));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string8));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string1));
      assertNotNull(mediaType4);
      
      String string9 = "no description";
      String string10 = "GsJsHy~JotQ<";
      String string11 = "/Z6St";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn(string9, (String) null).when(exampleObject0).externalValue();
      doReturn(stringArray0[2], stringArray0[4], string10).when(exampleObject0).name();
      doReturn(string11, (String) null).when(exampleObject0).summary();
      doReturn(string4, (String) null).when(exampleObject0).value();
      // Undeclared exception!
      try { 
        OperationParser.getMediaType(mediaType4, exampleObject0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.JsonFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test087()  throws Throwable  {
      String string0 = "3P xd,Z@)pDx\"#@";
      String string1 = null;
      String string2 = "";
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string1).when(contact0).email();
      doReturn(string0, string2).when(contact0).name();
      doReturn(string0, string2).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional0 = OperationParser.getContact(contact0);
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(optional0);
      
      Server[] serverArray0 = new Server[3];
      String string3 = null;
      String string4 = "NON_EMPTY";
      ServerVariable[] serverVariableArray0 = new ServerVariable[5];
      String string5 = "@4A";
      String string6 = null;
      String string7 = "abstract types either need to be mapped to concrete types, have custom deserializer, or contain additional type information";
      String string8 = "`;?:,=D";
      String string9 = "'";
      ServerVariable serverVariable0 = mock(ServerVariable.class, new ViolatedAssumptionAnswer());
      doReturn(string2, string5, string6, string7, string7).when(serverVariable0).description();
      doReturn(string6, string8, string9, string2, string9).when(serverVariable0).name();
      serverVariableArray0[0] = serverVariable0;
      serverVariableArray0[1] = serverVariableArray0[0];
      serverVariableArray0[2] = serverVariableArray0[1];
      serverVariableArray0[3] = serverVariableArray0[2];
      serverVariableArray0[4] = serverVariableArray0[3];
      String string10 = "";
      String string11 = "    variables: ";
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string0, string10, string11, string5).when(server0).description();
      doReturn(string0, string3, string2, string6).when(server0).url();
      doReturn((Object) serverVariableArray0, (Object) serverVariableArray0).when(server0).variables();
      serverArray0[0] = server0;
      serverArray0[1] = serverArray0[0];
      serverArray0[2] = serverArray0[1];
      Optional<List<io.swagger.oas.models.servers.Server>> optional1 = OperationParser.getServers(serverArray0);
      assertEquals(3, serverArray0.length);
      assertNotNull(optional1);
      
      boolean boolean0 = false;
      Content[] contentArray0 = new Content[8];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((ExampleObject[]) null).when(content0).examples();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      contentArray0[3] = contentArray0[2];
      contentArray0[4] = contentArray0[3];
      contentArray0[5] = contentArray0[4];
      contentArray0[6] = contentArray0[5];
      contentArray0[7] = contentArray0[6];
      io.swagger.oas.annotations.parameters.RequestBody requestBody0 = mock(io.swagger.oas.annotations.parameters.RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn(contentArray0).when(requestBody0).content();
      doReturn(string0, string1).when(requestBody0).description();
      doReturn(boolean0).when(requestBody0).required();
      Components components0 = new Components();
      assertNotNull(components0);
      
      Map<String, io.swagger.oas.models.parameters.Parameter> map0 = components0.getParameters();
      assertNull(map0);
      
      Components components1 = components0.parameters(map0);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertNotNull(components1);
      
      ApiResponses apiResponses0 = new ApiResponses();
      assertEquals(0, apiResponses0.size());
      assertTrue(apiResponses0.isEmpty());
      assertNotNull(apiResponses0);
      
      Components components2 = components1.responses(apiResponses0);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertEquals(0, apiResponses0.size());
      assertTrue(apiResponses0.isEmpty());
      assertNotNull(components2);
      
      io.swagger.oas.models.parameters.Parameter parameter0 = null;
      Components components3 = components2.addParameters(apiResponses0.DEFAULT, parameter0);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertSame(components2, components0);
      assertSame(components2, components3);
      assertSame(components2, components1);
      assertSame(components3, components1);
      assertSame(components3, components2);
      assertSame(components3, components0);
      assertEquals(0, apiResponses0.size());
      assertTrue(apiResponses0.isEmpty());
      assertNotNull(components3);
      
      HashMap<String, Callback> hashMap0 = new HashMap<String, Callback>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Components components4 = components3.callbacks(hashMap0);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertSame(components0, components4);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertSame(components1, components4);
      assertSame(components2, components0);
      assertSame(components2, components3);
      assertSame(components2, components4);
      assertSame(components2, components1);
      assertSame(components3, components4);
      assertSame(components3, components1);
      assertSame(components3, components2);
      assertSame(components3, components0);
      assertSame(components4, components0);
      assertSame(components4, components3);
      assertSame(components4, components1);
      assertSame(components4, components2);
      assertEquals(0, apiResponses0.size());
      assertTrue(apiResponses0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(components4);
      
      // Undeclared exception!
      try { 
        OperationParser.getRequestBody(requestBody0, components4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test088()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String string0 = "";
      stringArray0[0] = string0;
      String string1 = "";
      stringArray0[1] = string1;
      String string2 = "Spu!L0";
      stringArray0[2] = string2;
      String string3 = "default";
      stringArray0[3] = string3;
      String string4 = "n\\q+#Ew0ZaJ>QVHOQSn";
      stringArray0[4] = string4;
      String string5 = "";
      boolean boolean0 = false;
      String string6 = "";
      boolean boolean1 = true;
      ExternalDocumentation externalDocumentation0 = null;
      String string7 = "";
      int int0 = 1863;
      int int1 = (-2207);
      int int2 = (-1545);
      boolean boolean2 = false;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(stringArray0).when(schema0).allowableValues();
      doReturn(string5).when(schema0).defaultValue();
      doReturn(boolean0).when(schema0).deprecated();
      doReturn(string6).when(schema0).description();
      doReturn(string0, stringArray0[3], string6).when(schema0).example();
      doReturn(boolean1, boolean1).when(schema0).exclusiveMaximum();
      doReturn(boolean0).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema0).externalDocs();
      doReturn(string7).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(int2).when(schema0).maxProperties();
      doReturn(int1).when(schema0).minProperties();
      doReturn(stringArray0[1]).when(schema0).pattern();
      doReturn(boolean1, boolean2).when(schema0).readOnly();
      doReturn(string6).when(schema0).ref();
      doReturn(string6).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional0 = (Optional<io.swagger.oas.models.media.Schema>)OperationParser.getSchemaFromAnnotation(schema0);
      assertNotSame(string7, string2);
      assertSame(string7, string1);
      assertSame(string7, string0);
      assertNotSame(string7, string3);
      assertNotSame(string7, string4);
      assertSame(string7, string5);
      assertSame(string7, string6);
      assertSame(string0, string5);
      assertNotSame(string0, string3);
      assertNotSame(string0, string4);
      assertSame(string0, string7);
      assertSame(string0, string6);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertNotSame(string5, string4);
      assertNotSame(string5, string3);
      assertNotSame(string5, string2);
      assertSame(string5, string0);
      assertSame(string5, string7);
      assertSame(string5, string6);
      assertSame(string5, string1);
      assertNotSame(string6, string4);
      assertSame(string6, string0);
      assertSame(string6, string7);
      assertNotSame(string6, string2);
      assertSame(string6, string1);
      assertSame(string6, string5);
      assertNotSame(string6, string3);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(boolean2 == boolean1);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(boolean0 == boolean1);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1 == boolean2);
      assertEquals(5, stringArray0.length);
      assertNotNull(optional0);
      
      MediaType mediaType0 = new MediaType();
      assertNull(mediaType0.getExample());
      assertNotNull(mediaType0);
      
      HashMap<String, Encoding> hashMap0 = new HashMap<String, Encoding>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      MediaType mediaType1 = mediaType0.encoding(hashMap0);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType1, mediaType0);
      assertNull(mediaType0.getExample());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(mediaType1.getExample());
      assertNotNull(mediaType1);
      
      io.swagger.oas.models.media.Schema<Integer> schema1 = new io.swagger.oas.models.media.Schema<Integer>();
      assertNull(schema1.getMinLength());
      assertNull(schema1.getName());
      assertNull(schema1.getDescription());
      assertNull(schema1.getWriteOnly());
      assertNull(schema1.getNullable());
      assertNull(schema1.getUniqueItems());
      assertNull(schema1.getMaxLength());
      assertNull(schema1.getType());
      assertNull(schema1.getTitle());
      assertNull(schema1.getExclusiveMaximum());
      assertNull(schema1.getPattern());
      assertNull(schema1.getFormat());
      assertNull(schema1.get$ref());
      assertNull(schema1.getMinItems());
      assertNull(schema1.getReadOnly());
      assertNull(schema1.getMinProperties());
      assertNull(schema1.getMaxItems());
      assertNull(schema1.getMaxProperties());
      assertNull(schema1.getDeprecated());
      assertNull(schema1.getExclusiveMinimum());
      assertNotNull(schema1);
      
      MediaType mediaType2 = mediaType1.schema(schema1);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType0, mediaType2);
      assertSame(mediaType1, mediaType0);
      assertSame(mediaType1, mediaType2);
      assertSame(mediaType2, mediaType0);
      assertSame(mediaType2, mediaType1);
      assertNull(mediaType0.getExample());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(mediaType1.getExample());
      assertNull(schema1.getMinLength());
      assertNull(schema1.getName());
      assertNull(schema1.getDescription());
      assertNull(schema1.getWriteOnly());
      assertNull(schema1.getNullable());
      assertNull(schema1.getUniqueItems());
      assertNull(schema1.getMaxLength());
      assertNull(schema1.getType());
      assertNull(schema1.getTitle());
      assertNull(schema1.getExclusiveMaximum());
      assertNull(schema1.getPattern());
      assertNull(schema1.getFormat());
      assertNull(schema1.get$ref());
      assertNull(schema1.getMinItems());
      assertNull(schema1.getReadOnly());
      assertNull(schema1.getMinProperties());
      assertNull(schema1.getMaxItems());
      assertNull(schema1.getMaxProperties());
      assertNull(schema1.getDeprecated());
      assertNull(schema1.getExclusiveMinimum());
      assertNull(mediaType2.getExample());
      assertNotNull(mediaType2);
      
      Example example0 = new Example();
      assertNull(example0.get$ref());
      assertNull(example0.getSummary());
      assertNull(example0.getExternalValue());
      assertNull(example0.getDescription());
      assertNotNull(example0);
      
      String string8 = "[reference type, class ";
      Example example1 = example0.summary(string8);
      assertSame(example0, example1);
      assertNotSame(string8, string3);
      assertNotSame(string8, string4);
      assertNotSame(string8, string1);
      assertNotSame(string8, string2);
      assertNotSame(string8, string5);
      assertNotSame(string8, string7);
      assertNotSame(string8, string6);
      assertNotSame(string8, string0);
      assertSame(example1, example0);
      assertNull(example0.get$ref());
      assertEquals("[reference type, class ", example0.getSummary());
      assertNull(example0.getExternalValue());
      assertNull(example0.getDescription());
      assertNull(example1.getExternalValue());
      assertNull(example1.get$ref());
      assertEquals("[reference type, class ", example1.getSummary());
      assertNull(example1.getDescription());
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertNotNull(example1);
      
      MediaType mediaType3 = mediaType2.addExamples(string7, example1);
      assertNotSame(string7, string2);
      assertSame(string7, string1);
      assertSame(string7, string0);
      assertNotSame(string7, string3);
      assertNotSame(string7, string4);
      assertSame(string7, string5);
      assertNotSame(string7, string8);
      assertSame(string7, string6);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType0, mediaType2);
      assertSame(mediaType0, mediaType3);
      assertSame(mediaType1, mediaType0);
      assertSame(mediaType1, mediaType2);
      assertSame(mediaType1, mediaType3);
      assertSame(mediaType2, mediaType0);
      assertSame(mediaType2, mediaType3);
      assertSame(mediaType2, mediaType1);
      assertSame(example0, example1);
      assertNotSame(string8, string3);
      assertNotSame(string8, string4);
      assertNotSame(string8, string1);
      assertNotSame(string8, string2);
      assertNotSame(string8, string5);
      assertNotSame(string8, string7);
      assertNotSame(string8, string6);
      assertNotSame(string8, string0);
      assertSame(example1, example0);
      assertSame(mediaType3, mediaType2);
      assertSame(mediaType3, mediaType0);
      assertSame(mediaType3, mediaType1);
      assertNull(mediaType0.getExample());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(mediaType1.getExample());
      assertNull(schema1.getMinLength());
      assertNull(schema1.getName());
      assertNull(schema1.getDescription());
      assertNull(schema1.getWriteOnly());
      assertNull(schema1.getNullable());
      assertNull(schema1.getUniqueItems());
      assertNull(schema1.getMaxLength());
      assertNull(schema1.getType());
      assertNull(schema1.getTitle());
      assertNull(schema1.getExclusiveMaximum());
      assertNull(schema1.getPattern());
      assertNull(schema1.getFormat());
      assertNull(schema1.get$ref());
      assertNull(schema1.getMinItems());
      assertNull(schema1.getReadOnly());
      assertNull(schema1.getMinProperties());
      assertNull(schema1.getMaxItems());
      assertNull(schema1.getMaxProperties());
      assertNull(schema1.getDeprecated());
      assertNull(schema1.getExclusiveMinimum());
      assertNull(mediaType2.getExample());
      assertNull(example0.get$ref());
      assertEquals("[reference type, class ", example0.getSummary());
      assertNull(example0.getExternalValue());
      assertNull(example0.getDescription());
      assertNull(example1.getExternalValue());
      assertNull(example1.get$ref());
      assertEquals("[reference type, class ", example1.getSummary());
      assertNull(example1.getDescription());
      assertNull(mediaType3.getExample());
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string8));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertNotNull(mediaType3);
      
      String string9 = "9FyG7I";
      Encoding encoding0 = new Encoding();
      assertNull(encoding0.getExplode());
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getStyle());
      assertNull(encoding0.getAllowReserved());
      assertNotNull(encoding0);
      
      Boolean boolean3 = Boolean.FALSE;
      assertFalse(boolean3.equals((Object)boolean1));
      assertNotNull(boolean3);
      assertFalse(boolean3);
      
      Encoding encoding1 = encoding0.explode(boolean3);
      assertSame(encoding0, encoding1);
      assertSame(encoding1, encoding0);
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getStyle());
      assertFalse(encoding0.getExplode());
      assertNull(encoding0.getAllowReserved());
      assertNull(encoding1.getStyle());
      assertFalse(encoding1.getExplode());
      assertNull(encoding1.getAllowReserved());
      assertNull(encoding1.getContentType());
      assertFalse(boolean3.equals((Object)boolean1));
      assertNotNull(encoding1);
      
      Encoding encoding2 = encoding1.style(string9);
      assertNotSame(string9, string6);
      assertNotSame(string9, string0);
      assertNotSame(string9, string7);
      assertNotSame(string9, string1);
      assertNotSame(string9, string2);
      assertNotSame(string9, string8);
      assertNotSame(string9, string5);
      assertNotSame(string9, string4);
      assertNotSame(string9, string3);
      assertSame(encoding0, encoding2);
      assertSame(encoding0, encoding1);
      assertSame(encoding1, encoding0);
      assertSame(encoding1, encoding2);
      assertSame(encoding2, encoding1);
      assertSame(encoding2, encoding0);
      assertNull(encoding0.getContentType());
      assertFalse(encoding0.getExplode());
      assertEquals("9FyG7I", encoding0.getStyle());
      assertNull(encoding0.getAllowReserved());
      assertEquals("9FyG7I", encoding1.getStyle());
      assertFalse(encoding1.getExplode());
      assertNull(encoding1.getAllowReserved());
      assertNull(encoding1.getContentType());
      assertFalse(encoding2.getExplode());
      assertEquals("9FyG7I", encoding2.getStyle());
      assertNull(encoding2.getContentType());
      assertNull(encoding2.getAllowReserved());
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string3));
      assertFalse(boolean3.equals((Object)boolean1));
      assertNotNull(encoding2);
      
      MediaType mediaType4 = mediaType3.addEncoding(string9, encoding2);
      assertNotSame(string9, string6);
      assertNotSame(string9, string0);
      assertNotSame(string9, string7);
      assertNotSame(string9, string1);
      assertNotSame(string9, string2);
      assertNotSame(string9, string8);
      assertNotSame(string9, string5);
      assertNotSame(string9, string4);
      assertNotSame(string9, string3);
      assertSame(encoding0, encoding2);
      assertSame(encoding0, encoding1);
      assertSame(encoding1, encoding0);
      assertSame(encoding1, encoding2);
      assertSame(encoding2, encoding1);
      assertSame(encoding2, encoding0);
      assertSame(mediaType4, mediaType1);
      assertSame(mediaType4, mediaType2);
      assertSame(mediaType4, mediaType0);
      assertSame(mediaType4, mediaType3);
      assertNotSame(string7, string2);
      assertSame(string7, string1);
      assertSame(string7, string0);
      assertNotSame(string7, string9);
      assertNotSame(string7, string3);
      assertNotSame(string7, string4);
      assertSame(string7, string5);
      assertNotSame(string7, string8);
      assertSame(string7, string6);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType0, mediaType4);
      assertSame(mediaType0, mediaType2);
      assertSame(mediaType0, mediaType3);
      assertSame(mediaType1, mediaType0);
      assertSame(mediaType1, mediaType2);
      assertSame(mediaType1, mediaType3);
      assertSame(mediaType1, mediaType4);
      assertSame(mediaType2, mediaType0);
      assertSame(mediaType2, mediaType3);
      assertSame(mediaType2, mediaType1);
      assertSame(mediaType2, mediaType4);
      assertSame(example0, example1);
      assertNotSame(string8, string3);
      assertNotSame(string8, string4);
      assertNotSame(string8, string1);
      assertNotSame(string8, string2);
      assertNotSame(string8, string5);
      assertNotSame(string8, string7);
      assertNotSame(string8, string6);
      assertNotSame(string8, string0);
      assertNotSame(string8, string9);
      assertSame(example1, example0);
      assertSame(mediaType3, mediaType2);
      assertSame(mediaType3, mediaType0);
      assertSame(mediaType3, mediaType4);
      assertSame(mediaType3, mediaType1);
      assertNull(encoding0.getContentType());
      assertFalse(encoding0.getExplode());
      assertEquals("9FyG7I", encoding0.getStyle());
      assertNull(encoding0.getAllowReserved());
      assertEquals("9FyG7I", encoding1.getStyle());
      assertFalse(encoding1.getExplode());
      assertNull(encoding1.getAllowReserved());
      assertNull(encoding1.getContentType());
      assertFalse(encoding2.getExplode());
      assertEquals("9FyG7I", encoding2.getStyle());
      assertNull(encoding2.getContentType());
      assertNull(encoding2.getAllowReserved());
      assertNull(mediaType4.getExample());
      assertNull(mediaType0.getExample());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(mediaType1.getExample());
      assertNull(schema1.getMinLength());
      assertNull(schema1.getName());
      assertNull(schema1.getDescription());
      assertNull(schema1.getWriteOnly());
      assertNull(schema1.getNullable());
      assertNull(schema1.getUniqueItems());
      assertNull(schema1.getMaxLength());
      assertNull(schema1.getType());
      assertNull(schema1.getTitle());
      assertNull(schema1.getExclusiveMaximum());
      assertNull(schema1.getPattern());
      assertNull(schema1.getFormat());
      assertNull(schema1.get$ref());
      assertNull(schema1.getMinItems());
      assertNull(schema1.getReadOnly());
      assertNull(schema1.getMinProperties());
      assertNull(schema1.getMaxItems());
      assertNull(schema1.getMaxProperties());
      assertNull(schema1.getDeprecated());
      assertNull(schema1.getExclusiveMinimum());
      assertNull(mediaType2.getExample());
      assertNull(example0.get$ref());
      assertEquals("[reference type, class ", example0.getSummary());
      assertNull(example0.getExternalValue());
      assertNull(example0.getDescription());
      assertNull(example1.getExternalValue());
      assertNull(example1.get$ref());
      assertEquals("[reference type, class ", example1.getSummary());
      assertNull(example1.getDescription());
      assertNull(mediaType3.getExample());
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string3));
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string9));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string8));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string9));
      assertNotNull(mediaType4);
      
      String string10 = "com.fasterxml.jackson.databind.ext.NioPathDeserializer";
      String string11 = "4";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(exampleObject0).externalValue();
      doReturn(stringArray0[2], string2, string6).when(exampleObject0).name();
      doReturn(stringArray0[1]).when(exampleObject0).summary();
      doReturn(string11, (String) null).when(exampleObject0).value();
      // Undeclared exception!
      try { 
        OperationParser.getMediaType(mediaType4, exampleObject0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.JsonFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test089()  throws Throwable  {
      String string0 = "    delete: ";
      String string1 = "C";
      Contact contact0 = null;
      String string2 = "Gf5&a~lM3L;3J{m?\",";
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(string2, (String) null).when(license0).name();
      doReturn(string1, (String) null).when(license0).url();
      String string3 = "";
      String string4 = null;
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn(contact0).when(info0).contact();
      doReturn(string0, string2).when(info0).description();
      doReturn(license0).when(info0).license();
      doReturn(string0, string3).when(info0).termsOfService();
      doReturn(string0, string4).when(info0).title();
      doReturn(string1, string2).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional0 = OperationParser.getInfo(info0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(optional0);
      
      Content[] contentArray0 = null;
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      assertNotNull(components0);
      
      HashMap<String, Callback> hashMap0 = new HashMap<String, Callback>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      components0.setCallbacks(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Components components1 = components0.callbacks(hashMap0);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(components1);
      
      String string5 = "";
      io.swagger.oas.models.links.Link link0 = null;
      Components components2 = components1.addLinks(string5, link0);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertNotSame(string5, string2);
      assertSame(string5, string3);
      assertNotSame(string5, string0);
      assertNotSame(string5, string1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(components2);
      
      Map<String, Example> map0 = null;
      Components components3 = components2.addLinks(string5, link0);
      assertSame(components2, components3);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components3, components2);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertNotSame(string5, string2);
      assertSame(string5, string3);
      assertNotSame(string5, string0);
      assertNotSame(string5, string1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(components3);
      
      Components components4 = components2.examples(map0);
      assertSame(components2, components4);
      assertSame(components2, components3);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components4, components3);
      assertSame(components4, components0);
      assertSame(components4, components1);
      assertSame(components4, components2);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertSame(components0, components4);
      assertSame(components0, components2);
      assertSame(components1, components4);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertNotSame(string5, string2);
      assertSame(string5, string3);
      assertNotSame(string5, string0);
      assertNotSame(string5, string1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(components4);
      
      Map<String, io.swagger.oas.models.parameters.Parameter> map1 = components0.getParameters();
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertSame(components0, components4);
      assertSame(components0, components2);
      assertNull(map1);
      
      Components components5 = components4.parameters(map1);
      assertSame(components2, components5);
      assertSame(components2, components4);
      assertSame(components2, components3);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components4, components3);
      assertSame(components4, components0);
      assertSame(components4, components1);
      assertSame(components4, components2);
      assertSame(components4, components5);
      assertSame(components5, components2);
      assertSame(components5, components3);
      assertSame(components5, components0);
      assertSame(components5, components4);
      assertSame(components5, components1);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertSame(components0, components4);
      assertSame(components0, components2);
      assertSame(components0, components5);
      assertSame(components1, components4);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertSame(components1, components5);
      assertNotSame(string5, string2);
      assertSame(string5, string3);
      assertNotSame(string5, string0);
      assertNotSame(string5, string1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(components5);
      
      Map<String, RequestBody> map2 = components4.getRequestBodies();
      assertSame(components2, components5);
      assertSame(components2, components4);
      assertSame(components2, components3);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components4, components3);
      assertSame(components4, components0);
      assertSame(components4, components1);
      assertSame(components4, components2);
      assertSame(components4, components5);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertSame(components0, components4);
      assertSame(components0, components2);
      assertSame(components0, components5);
      assertSame(components1, components4);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertSame(components1, components5);
      assertNotSame(string5, string2);
      assertSame(string5, string3);
      assertNotSame(string5, string0);
      assertNotSame(string5, string1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertNull(map2);
      
      Components components6 = components5.requestBodies(map2);
      assertSame(components2, components5);
      assertSame(components2, components4);
      assertSame(components2, components3);
      assertSame(components2, components0);
      assertSame(components2, components6);
      assertSame(components2, components1);
      assertSame(components4, components3);
      assertSame(components4, components0);
      assertSame(components4, components1);
      assertSame(components4, components6);
      assertSame(components4, components2);
      assertSame(components4, components5);
      assertSame(components5, components2);
      assertSame(components5, components3);
      assertSame(components5, components0);
      assertSame(components5, components4);
      assertSame(components5, components6);
      assertSame(components5, components1);
      assertSame(components6, components0);
      assertSame(components6, components1);
      assertSame(components6, components2);
      assertSame(components6, components5);
      assertSame(components6, components4);
      assertSame(components6, components3);
      assertSame(components0, components1);
      assertSame(components0, components6);
      assertSame(components0, components3);
      assertSame(components0, components4);
      assertSame(components0, components2);
      assertSame(components0, components5);
      assertSame(components1, components4);
      assertSame(components1, components0);
      assertSame(components1, components6);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertSame(components1, components5);
      assertNotSame(string5, string2);
      assertSame(string5, string3);
      assertNotSame(string5, string0);
      assertNotSame(string5, string1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(components6);
      
      Optional<io.swagger.oas.models.media.Content> optional1 = OperationParser.getContent(contentArray0, produces0, produces0, components5);
      assertSame(components2, components5);
      assertSame(components2, components4);
      assertSame(components2, components3);
      assertSame(components2, components0);
      assertSame(components2, components6);
      assertSame(components2, components1);
      assertSame(components4, components3);
      assertSame(components4, components0);
      assertSame(components4, components1);
      assertSame(components4, components6);
      assertSame(components4, components2);
      assertSame(components4, components5);
      assertSame(components5, components2);
      assertSame(components5, components3);
      assertSame(components5, components0);
      assertSame(components5, components4);
      assertSame(components5, components6);
      assertSame(components5, components1);
      assertSame(components0, components1);
      assertSame(components0, components6);
      assertSame(components0, components3);
      assertSame(components0, components4);
      assertSame(components0, components2);
      assertSame(components0, components5);
      assertSame(components1, components4);
      assertSame(components1, components0);
      assertSame(components1, components6);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertSame(components1, components5);
      assertNotSame(string5, string2);
      assertSame(string5, string3);
      assertNotSame(string5, string0);
      assertNotSame(string5, string1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(optional1);
      
      boolean boolean0 = true;
      boolean boolean1 = false;
      boolean boolean2 = true;
      String string6 = "";
      Explode explode0 = Explode.TRUE;
      String string7 = "";
      boolean boolean3 = false;
      Class<io.swagger.oas.models.parameters.Parameter> class0 = io.swagger.oas.models.parameters.Parameter.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(schema0).implementation();
      String string8 = null;
      boolean boolean4 = true;
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(schema1).implementation();
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0, boolean4).when(parameter0).allowEmptyValue();
      doReturn(boolean1).when(parameter0).allowReserved();
      doReturn(contentArray0).when(parameter0).content();
      doReturn(boolean2, boolean3).when(parameter0).deprecated();
      doReturn(string6).when(parameter0).description();
      doReturn(explode0, explode0).when(parameter0).explode();
      doReturn(string7).when(parameter0).in();
      doReturn(string1, string7).when(parameter0).name();
      doReturn(boolean3).when(parameter0).required();
      doReturn(schema0, schema0, schema1).when(parameter0).schema();
      doReturn(string8).when(parameter0).style();
      Optional<io.swagger.oas.models.parameters.Parameter> optional2 = OperationParser.getParameter(parameter0, components0);
      assertNotSame(string1, string0);
      assertNotSame(string1, string6);
      assertNotSame(string1, string2);
      assertNotSame(string1, string7);
      assertNotSame(string1, string3);
      assertNotSame(string1, string5);
      assertSame(components0, components1);
      assertSame(components0, components6);
      assertSame(components0, components3);
      assertSame(components0, components4);
      assertSame(components0, components2);
      assertSame(components0, components5);
      assertSame(string6, string5);
      assertSame(string6, string7);
      assertNotSame(string6, string2);
      assertSame(string6, string3);
      assertNotSame(string6, string0);
      assertNotSame(string6, string1);
      assertSame(string7, string3);
      assertNotSame(string7, string0);
      assertNotSame(string7, string2);
      assertSame(string7, string6);
      assertNotSame(string7, string1);
      assertSame(string7, string5);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean4);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string7));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string5));
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean0 == boolean3);
      assertFalse(boolean1 == boolean2);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1 == boolean4);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean3);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertNotNull(optional2);
      
      String string9 = "p<|BNY#)#<<F#iGQI";
      String string10 = "com.fasterxml.jackson.annotation.ObjectIdGenerators$PropertyGenerator";
      String string11 = ": class expects ";
      LinkParameter[] linkParameterArray0 = new LinkParameter[8];
      String string12 = "+jZ/Cp3]P";
      String string13 = "$*ngE\"<.qP!#LcQm";
      String string14 = "";
      LinkParameter linkParameter0 = mock(LinkParameter.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(linkParameter0).expression();
      doReturn(string12, string13, string12, string4, string14).when(linkParameter0).name();
      linkParameterArray0[0] = linkParameter0;
      linkParameterArray0[1] = linkParameterArray0[0];
      linkParameterArray0[2] = linkParameterArray0[1];
      linkParameterArray0[3] = linkParameterArray0[2];
      linkParameterArray0[4] = linkParameterArray0[3];
      linkParameterArray0[5] = linkParameterArray0[4];
      linkParameterArray0[5] = linkParameterArray0[5];
      linkParameterArray0[7] = linkParameterArray0[6];
      Link link1 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string9, string3).when(link1).description();
      doReturn(string10, string3).when(link1).operationId();
      doReturn(string2, string11).when(link1).operationRef();
      doReturn(linkParameterArray0).when(link1).parameters();
      // Undeclared exception!
      try { 
        OperationParser.getLink(link1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test090()  throws Throwable  {
      Link[] linkArray0 = new Link[3];
      String string0 = "=.f]z*Nn`NUS";
      String string1 = "#/components/schemas/";
      String string2 = null;
      String string3 = " ";
      String string4 = "com.fasterxml.jackson.databind.deser.DeserializerCache";
      String string5 = "*/*";
      String string6 = null;
      String string7 = "#/components/schemas/";
      String string8 = "ALLOW_UNQUOTED_FIELD_NAMES";
      String string9 = "";
      String string10 = "com.fasterxml.jackson.core.io.SerializedString";
      String string11 = "1a]/l4u";
      String string12 = "AVt{|!L<|'`M 4/(&";
      String string13 = "TYUM25bJ!Pq.i";
      LinkParameter[] linkParameterArray0 = new LinkParameter[9];
      LinkParameter linkParameter0 = mock(LinkParameter.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(linkParameter0).name();
      linkParameterArray0[0] = linkParameter0;
      linkParameterArray0[1] = linkParameterArray0[0];
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string1).when(link0).description();
      doReturn(string4, string5).when(link0).operationId();
      doReturn(string1, string9).when(link0).operationRef();
      doReturn(linkParameterArray0).when(link0).parameters();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      // Undeclared exception!
      try { 
        OperationParser.getLinks(linkArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test091()  throws Throwable  {
      Content[] contentArray0 = new Content[6];
      Class<ApiResponses> class0 = ApiResponses.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(schema0).implementation();
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(content0).mediaType();
      doReturn(schema0).when(content0).schema();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      contentArray0[3] = contentArray0[2];
      contentArray0[4] = contentArray0[3];
      contentArray0[5] = contentArray0[4];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      doReturn((String[]) null).when(produces0).value();
      Components components0 = new Components();
      assertNotNull(components0);
      
      io.swagger.oas.models.links.Link link0 = new io.swagger.oas.models.links.Link();
      assertNull(link0.get$ref());
      assertNull(link0.getDescription());
      assertNull(link0.getOperationId());
      assertNull(link0.getOperationRef());
      assertNotNull(link0);
      
      RequestBody requestBody0 = new RequestBody();
      assertNull(requestBody0.get$ref());
      assertNull(requestBody0.getRequired());
      assertNull(requestBody0.getDescription());
      assertNotNull(requestBody0);
      
      String string0 = "";
      RequestBody requestBody1 = requestBody0.$ref(string0);
      assertSame(requestBody0, requestBody1);
      assertSame(requestBody1, requestBody0);
      assertEquals("", requestBody0.get$ref());
      assertNull(requestBody0.getRequired());
      assertNull(requestBody0.getDescription());
      assertEquals("", requestBody1.get$ref());
      assertNull(requestBody1.getRequired());
      assertNull(requestBody1.getDescription());
      assertNotNull(requestBody1);
      
      RequestBody requestBody2 = requestBody1.description(string0);
      assertSame(requestBody2, requestBody0);
      assertSame(requestBody2, requestBody1);
      assertSame(requestBody0, requestBody2);
      assertSame(requestBody0, requestBody1);
      assertSame(requestBody1, requestBody0);
      assertSame(requestBody1, requestBody2);
      assertNull(requestBody2.getRequired());
      assertEquals("", requestBody2.getDescription());
      assertEquals("", requestBody2.get$ref());
      assertEquals("", requestBody0.get$ref());
      assertNull(requestBody0.getRequired());
      assertEquals("", requestBody0.getDescription());
      assertEquals("", requestBody1.get$ref());
      assertNull(requestBody1.getRequired());
      assertEquals("", requestBody1.getDescription());
      assertNotNull(requestBody2);
      
      io.swagger.oas.models.media.Schema<Tag> schema1 = new io.swagger.oas.models.media.Schema<Tag>();
      assertNull(schema1.getPattern());
      assertNull(schema1.getMinItems());
      assertNull(schema1.getMaxItems());
      assertNull(schema1.getType());
      assertNull(schema1.get$ref());
      assertNull(schema1.getTitle());
      assertNull(schema1.getMaxLength());
      assertNull(schema1.getMinLength());
      assertNull(schema1.getExclusiveMaximum());
      assertNull(schema1.getWriteOnly());
      assertNull(schema1.getName());
      assertNull(schema1.getDescription());
      assertNull(schema1.getUniqueItems());
      assertNull(schema1.getNullable());
      assertNull(schema1.getMaxProperties());
      assertNull(schema1.getExclusiveMinimum());
      assertNull(schema1.getReadOnly());
      assertNull(schema1.getFormat());
      assertNull(schema1.getMinProperties());
      assertNull(schema1.getDeprecated());
      assertNotNull(schema1);
      
      Boolean boolean0 = schema1.getExclusiveMaximum();
      assertNull(schema1.getPattern());
      assertNull(schema1.getMinItems());
      assertNull(schema1.getMaxItems());
      assertNull(schema1.getType());
      assertNull(schema1.get$ref());
      assertNull(schema1.getTitle());
      assertNull(schema1.getMaxLength());
      assertNull(schema1.getMinLength());
      assertNull(schema1.getExclusiveMaximum());
      assertNull(schema1.getWriteOnly());
      assertNull(schema1.getName());
      assertNull(schema1.getDescription());
      assertNull(schema1.getUniqueItems());
      assertNull(schema1.getNullable());
      assertNull(schema1.getMaxProperties());
      assertNull(schema1.getExclusiveMinimum());
      assertNull(schema1.getReadOnly());
      assertNull(schema1.getFormat());
      assertNull(schema1.getMinProperties());
      assertNull(schema1.getDeprecated());
      assertNull(boolean0);
      
      RequestBody requestBody3 = requestBody2.required(boolean0);
      assertSame(requestBody2, requestBody3);
      assertSame(requestBody2, requestBody0);
      assertSame(requestBody2, requestBody1);
      assertSame(requestBody3, requestBody2);
      assertSame(requestBody3, requestBody1);
      assertSame(requestBody3, requestBody0);
      assertSame(requestBody0, requestBody2);
      assertSame(requestBody0, requestBody1);
      assertSame(requestBody0, requestBody3);
      assertSame(requestBody1, requestBody0);
      assertSame(requestBody1, requestBody3);
      assertSame(requestBody1, requestBody2);
      assertNull(requestBody2.getRequired());
      assertEquals("", requestBody2.getDescription());
      assertEquals("", requestBody2.get$ref());
      assertNull(schema1.getPattern());
      assertNull(schema1.getMinItems());
      assertNull(schema1.getMaxItems());
      assertNull(schema1.getType());
      assertNull(schema1.get$ref());
      assertNull(schema1.getTitle());
      assertNull(schema1.getMaxLength());
      assertNull(schema1.getMinLength());
      assertNull(schema1.getExclusiveMaximum());
      assertNull(schema1.getWriteOnly());
      assertNull(schema1.getName());
      assertNull(schema1.getDescription());
      assertNull(schema1.getUniqueItems());
      assertNull(schema1.getNullable());
      assertNull(schema1.getMaxProperties());
      assertNull(schema1.getExclusiveMinimum());
      assertNull(schema1.getReadOnly());
      assertNull(schema1.getFormat());
      assertNull(schema1.getMinProperties());
      assertNull(schema1.getDeprecated());
      assertEquals("", requestBody3.getDescription());
      assertEquals("", requestBody3.get$ref());
      assertNull(requestBody3.getRequired());
      assertEquals("", requestBody0.get$ref());
      assertNull(requestBody0.getRequired());
      assertEquals("", requestBody0.getDescription());
      assertEquals("", requestBody1.get$ref());
      assertNull(requestBody1.getRequired());
      assertEquals("", requestBody1.getDescription());
      assertNotNull(requestBody3);
      
      io.swagger.oas.models.links.Link link1 = link0.requestBody(requestBody3);
      assertSame(requestBody2, requestBody3);
      assertSame(requestBody2, requestBody0);
      assertSame(requestBody2, requestBody1);
      assertSame(requestBody3, requestBody2);
      assertSame(requestBody3, requestBody1);
      assertSame(requestBody3, requestBody0);
      assertSame(link1, link0);
      assertSame(link0, link1);
      assertSame(requestBody0, requestBody2);
      assertSame(requestBody0, requestBody1);
      assertSame(requestBody0, requestBody3);
      assertSame(requestBody1, requestBody0);
      assertSame(requestBody1, requestBody3);
      assertSame(requestBody1, requestBody2);
      assertNull(requestBody2.getRequired());
      assertEquals("", requestBody2.getDescription());
      assertEquals("", requestBody2.get$ref());
      assertNull(schema1.getPattern());
      assertNull(schema1.getMinItems());
      assertNull(schema1.getMaxItems());
      assertNull(schema1.getType());
      assertNull(schema1.get$ref());
      assertNull(schema1.getTitle());
      assertNull(schema1.getMaxLength());
      assertNull(schema1.getMinLength());
      assertNull(schema1.getExclusiveMaximum());
      assertNull(schema1.getWriteOnly());
      assertNull(schema1.getName());
      assertNull(schema1.getDescription());
      assertNull(schema1.getUniqueItems());
      assertNull(schema1.getNullable());
      assertNull(schema1.getMaxProperties());
      assertNull(schema1.getExclusiveMinimum());
      assertNull(schema1.getReadOnly());
      assertNull(schema1.getFormat());
      assertNull(schema1.getMinProperties());
      assertNull(schema1.getDeprecated());
      assertEquals("", requestBody3.getDescription());
      assertEquals("", requestBody3.get$ref());
      assertNull(requestBody3.getRequired());
      assertNull(link1.get$ref());
      assertNull(link1.getOperationRef());
      assertNull(link1.getOperationId());
      assertNull(link1.getDescription());
      assertNull(link0.get$ref());
      assertNull(link0.getDescription());
      assertNull(link0.getOperationId());
      assertNull(link0.getOperationRef());
      assertEquals("", requestBody0.get$ref());
      assertNull(requestBody0.getRequired());
      assertEquals("", requestBody0.getDescription());
      assertEquals("", requestBody1.get$ref());
      assertNull(requestBody1.getRequired());
      assertEquals("", requestBody1.getDescription());
      assertNotNull(link1);
      
      Map<String, Header> map0 = link0.getHeaders();
      assertSame(link0, link1);
      assertNull(link0.get$ref());
      assertNull(link0.getDescription());
      assertNull(link0.getOperationId());
      assertNull(link0.getOperationRef());
      assertNull(map0);
      
      Components components1 = components0.headers(map0);
      assertSame(components1, components0);
      assertSame(components0, components1);
      assertSame(link0, link1);
      assertNull(link0.get$ref());
      assertNull(link0.getDescription());
      assertNull(link0.getOperationId());
      assertNull(link0.getOperationRef());
      assertNotNull(components1);
      
      ApiResponses apiResponses0 = new ApiResponses();
      assertEquals(0, apiResponses0.size());
      assertTrue(apiResponses0.isEmpty());
      assertNotNull(apiResponses0);
      
      io.swagger.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.oas.models.responses.ApiResponse();
      assertNull(apiResponse0.get$ref());
      assertNull(apiResponse0.getDescription());
      assertNotNull(apiResponse0);
      
      ApiResponses apiResponses1 = apiResponses0._default(apiResponse0);
      assertSame(apiResponses0, apiResponses1);
      assertSame(apiResponses1, apiResponses0);
      assertEquals(1, apiResponses0.size());
      assertFalse(apiResponses0.isEmpty());
      assertNull(apiResponse0.get$ref());
      assertNull(apiResponse0.getDescription());
      assertEquals(1, apiResponses1.size());
      assertFalse(apiResponses1.isEmpty());
      assertNotNull(apiResponses1);
      
      Components components2 = new Components();
      assertTrue(components2.equals((Object)components1));
      assertTrue(components2.equals((Object)components0));
      assertNotNull(components2);
      
      Map<String, RequestBody> map1 = components2.getRequestBodies();
      assertNotSame(components2, components0);
      assertNotSame(components2, components1);
      assertTrue(components2.equals((Object)components1));
      assertTrue(components2.equals((Object)components0));
      assertNull(map1);
      
      Components components3 = components2.requestBodies(map1);
      assertNotSame(components2, components0);
      assertNotSame(components2, components1);
      assertSame(components2, components3);
      assertSame(components3, components2);
      assertNotSame(components3, components1);
      assertNotSame(components3, components0);
      assertTrue(components2.equals((Object)components1));
      assertTrue(components2.equals((Object)components0));
      assertTrue(components3.equals((Object)components1));
      assertTrue(components3.equals((Object)components0));
      assertNotNull(components3);
      
      io.swagger.oas.models.media.Schema<io.swagger.oas.models.parameters.Parameter> schema2 = new io.swagger.oas.models.media.Schema<io.swagger.oas.models.parameters.Parameter>();
      assertNull(schema2.getMinLength());
      assertNull(schema2.getMaxProperties());
      assertNull(schema2.getMinProperties());
      assertNull(schema2.getMaxLength());
      assertNull(schema2.getUniqueItems());
      assertNull(schema2.getNullable());
      assertNull(schema2.getType());
      assertNull(schema2.getTitle());
      assertNull(schema2.getDescription());
      assertNull(schema2.getExclusiveMaximum());
      assertNull(schema2.getWriteOnly());
      assertNull(schema2.getDeprecated());
      assertNull(schema2.getExclusiveMinimum());
      assertNull(schema2.getReadOnly());
      assertNull(schema2.get$ref());
      assertNull(schema2.getPattern());
      assertNull(schema2.getFormat());
      assertNull(schema2.getMaxItems());
      assertNull(schema2.getName());
      assertNull(schema2.getMinItems());
      assertNotNull(schema2);
      
      Components components4 = components3.addSchemas(apiResponses1.DEFAULT, schema2);
      assertSame(apiResponses0, apiResponses1);
      assertSame(apiResponses1, apiResponses0);
      assertNotSame(components2, components0);
      assertNotSame(components2, components1);
      assertSame(components2, components3);
      assertSame(components2, components4);
      assertSame(components3, components2);
      assertNotSame(components3, components1);
      assertNotSame(components3, components0);
      assertSame(components3, components4);
      assertNotSame(components4, components0);
      assertSame(components4, components3);
      assertNotSame(components4, components1);
      assertSame(components4, components2);
      assertEquals(1, apiResponses0.size());
      assertFalse(apiResponses0.isEmpty());
      assertNull(apiResponse0.get$ref());
      assertNull(apiResponse0.getDescription());
      assertEquals(1, apiResponses1.size());
      assertFalse(apiResponses1.isEmpty());
      assertNull(schema2.getMinLength());
      assertNull(schema2.getMaxProperties());
      assertNull(schema2.getMinProperties());
      assertNull(schema2.getMaxLength());
      assertNull(schema2.getUniqueItems());
      assertNull(schema2.getNullable());
      assertNull(schema2.getType());
      assertNull(schema2.getTitle());
      assertNull(schema2.getDescription());
      assertNull(schema2.getExclusiveMaximum());
      assertNull(schema2.getWriteOnly());
      assertNull(schema2.getDeprecated());
      assertNull(schema2.getExclusiveMinimum());
      assertNull(schema2.getReadOnly());
      assertNull(schema2.get$ref());
      assertNull(schema2.getPattern());
      assertNull(schema2.getFormat());
      assertNull(schema2.getMaxItems());
      assertNull(schema2.getName());
      assertNull(schema2.getMinItems());
      assertFalse(components2.equals((Object)components0));
      assertFalse(components2.equals((Object)components1));
      assertFalse(components3.equals((Object)components1));
      assertFalse(components3.equals((Object)components0));
      assertFalse(components4.equals((Object)components0));
      assertFalse(components4.equals((Object)components1));
      assertNotNull(components4);
      
      // Undeclared exception!
      try { 
        OperationParser.getContent(contentArray0, produces0, produces0, components4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test092()  throws Throwable  {
      Content[] contentArray0 = new Content[6];
      Class<ApiResponses> class0 = ApiResponses.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(schema0).implementation();
      String string0 = "Kw.?C_@z#2pFd<";
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((ExampleObject[]) null).when(content0).examples();
      doReturn(string0, (String) null).when(content0).mediaType();
      doReturn(schema0).when(content0).schema();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      contentArray0[3] = contentArray0[2];
      contentArray0[4] = contentArray0[3];
      contentArray0[5] = contentArray0[4];
      String[] stringArray0 = new String[3];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      String string1 = "java.langio.swagger.oas.models.responses.ApiResponses";
      stringArray0[2] = string1;
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      assertNotNull(components0);
      
      io.swagger.oas.models.links.Link link0 = new io.swagger.oas.models.links.Link();
      assertNull(link0.getOperationId());
      assertNull(link0.get$ref());
      assertNull(link0.getDescription());
      assertNull(link0.getOperationRef());
      assertNotNull(link0);
      
      RequestBody requestBody0 = new RequestBody();
      assertNull(requestBody0.getRequired());
      assertNull(requestBody0.getDescription());
      assertNull(requestBody0.get$ref());
      assertNotNull(requestBody0);
      
      String string2 = "";
      RequestBody requestBody1 = requestBody0.$ref(string2);
      assertSame(requestBody0, requestBody1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(requestBody1, requestBody0);
      assertNull(requestBody0.getRequired());
      assertNull(requestBody0.getDescription());
      assertEquals("", requestBody0.get$ref());
      assertEquals("", requestBody1.get$ref());
      assertNull(requestBody1.getRequired());
      assertNull(requestBody1.getDescription());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(requestBody1);
      
      RequestBody requestBody2 = requestBody1.description(string2);
      assertSame(requestBody0, requestBody2);
      assertSame(requestBody0, requestBody1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(requestBody1, requestBody0);
      assertSame(requestBody1, requestBody2);
      assertSame(requestBody2, requestBody1);
      assertSame(requestBody2, requestBody0);
      assertNull(requestBody0.getRequired());
      assertEquals("", requestBody0.getDescription());
      assertEquals("", requestBody0.get$ref());
      assertEquals("", requestBody1.get$ref());
      assertNull(requestBody1.getRequired());
      assertEquals("", requestBody1.getDescription());
      assertNull(requestBody2.getRequired());
      assertEquals("", requestBody2.getDescription());
      assertEquals("", requestBody2.get$ref());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(requestBody2);
      
      boolean boolean0 = false;
      Boolean boolean1 = new Boolean(boolean0);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertFalse(boolean1);
      
      requestBody2.setRequired(boolean1);
      assertSame(requestBody0, requestBody2);
      assertSame(requestBody0, requestBody1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(requestBody1, requestBody0);
      assertSame(requestBody1, requestBody2);
      assertSame(requestBody2, requestBody1);
      assertSame(requestBody2, requestBody0);
      assertEquals("", requestBody0.getDescription());
      assertFalse(requestBody0.getRequired());
      assertEquals("", requestBody0.get$ref());
      assertEquals("", requestBody1.get$ref());
      assertEquals("", requestBody1.getDescription());
      assertFalse(requestBody1.getRequired());
      assertFalse(requestBody2.getRequired());
      assertEquals("", requestBody2.getDescription());
      assertEquals("", requestBody2.get$ref());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertTrue(boolean1.equals((Object)boolean0));
      
      io.swagger.oas.models.media.Schema<Tag> schema1 = new io.swagger.oas.models.media.Schema<Tag>();
      assertNull(schema1.getMaxLength());
      assertNull(schema1.getMinLength());
      assertNull(schema1.getMaxProperties());
      assertNull(schema1.getMinProperties());
      assertNull(schema1.get$ref());
      assertNull(schema1.getName());
      assertNull(schema1.getMinItems());
      assertNull(schema1.getMaxItems());
      assertNull(schema1.getExclusiveMinimum());
      assertNull(schema1.getReadOnly());
      assertNull(schema1.getNullable());
      assertNull(schema1.getDeprecated());
      assertNull(schema1.getPattern());
      assertNull(schema1.getFormat());
      assertNull(schema1.getDescription());
      assertNull(schema1.getExclusiveMaximum());
      assertNull(schema1.getTitle());
      assertNull(schema1.getUniqueItems());
      assertNull(schema1.getType());
      assertNull(schema1.getWriteOnly());
      assertNotNull(schema1);
      
      Boolean boolean2 = schema1.getExclusiveMaximum();
      assertNull(schema1.getMaxLength());
      assertNull(schema1.getMinLength());
      assertNull(schema1.getMaxProperties());
      assertNull(schema1.getMinProperties());
      assertNull(schema1.get$ref());
      assertNull(schema1.getName());
      assertNull(schema1.getMinItems());
      assertNull(schema1.getMaxItems());
      assertNull(schema1.getExclusiveMinimum());
      assertNull(schema1.getReadOnly());
      assertNull(schema1.getNullable());
      assertNull(schema1.getDeprecated());
      assertNull(schema1.getPattern());
      assertNull(schema1.getFormat());
      assertNull(schema1.getDescription());
      assertNull(schema1.getExclusiveMaximum());
      assertNull(schema1.getTitle());
      assertNull(schema1.getUniqueItems());
      assertNull(schema1.getType());
      assertNull(schema1.getWriteOnly());
      assertNull(boolean2);
      
      RequestBody requestBody3 = requestBody2.required(boolean2);
      assertSame(requestBody0, requestBody2);
      assertSame(requestBody0, requestBody1);
      assertSame(requestBody0, requestBody3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(requestBody1, requestBody0);
      assertSame(requestBody1, requestBody3);
      assertSame(requestBody1, requestBody2);
      assertSame(requestBody2, requestBody3);
      assertSame(requestBody2, requestBody1);
      assertSame(requestBody2, requestBody0);
      assertSame(requestBody3, requestBody1);
      assertSame(requestBody3, requestBody2);
      assertSame(requestBody3, requestBody0);
      assertNull(requestBody0.getRequired());
      assertEquals("", requestBody0.getDescription());
      assertEquals("", requestBody0.get$ref());
      assertEquals("", requestBody1.get$ref());
      assertNull(requestBody1.getRequired());
      assertEquals("", requestBody1.getDescription());
      assertNull(requestBody2.getRequired());
      assertEquals("", requestBody2.getDescription());
      assertEquals("", requestBody2.get$ref());
      assertNull(schema1.getMaxLength());
      assertNull(schema1.getMinLength());
      assertNull(schema1.getMaxProperties());
      assertNull(schema1.getMinProperties());
      assertNull(schema1.get$ref());
      assertNull(schema1.getName());
      assertNull(schema1.getMinItems());
      assertNull(schema1.getMaxItems());
      assertNull(schema1.getExclusiveMinimum());
      assertNull(schema1.getReadOnly());
      assertNull(schema1.getNullable());
      assertNull(schema1.getDeprecated());
      assertNull(schema1.getPattern());
      assertNull(schema1.getFormat());
      assertNull(schema1.getDescription());
      assertNull(schema1.getExclusiveMaximum());
      assertNull(schema1.getTitle());
      assertNull(schema1.getUniqueItems());
      assertNull(schema1.getType());
      assertNull(schema1.getWriteOnly());
      assertEquals("", requestBody3.get$ref());
      assertNull(requestBody3.getRequired());
      assertEquals("", requestBody3.getDescription());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(requestBody3);
      
      io.swagger.oas.models.links.Link link1 = link0.requestBody(requestBody3);
      assertSame(link0, link1);
      assertSame(requestBody0, requestBody2);
      assertSame(requestBody0, requestBody1);
      assertSame(requestBody0, requestBody3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(requestBody1, requestBody0);
      assertSame(requestBody1, requestBody3);
      assertSame(requestBody1, requestBody2);
      assertSame(requestBody2, requestBody3);
      assertSame(requestBody2, requestBody1);
      assertSame(requestBody2, requestBody0);
      assertSame(requestBody3, requestBody1);
      assertSame(requestBody3, requestBody2);
      assertSame(requestBody3, requestBody0);
      assertSame(link1, link0);
      assertNull(link0.getOperationId());
      assertNull(link0.get$ref());
      assertNull(link0.getDescription());
      assertNull(link0.getOperationRef());
      assertNull(requestBody0.getRequired());
      assertEquals("", requestBody0.getDescription());
      assertEquals("", requestBody0.get$ref());
      assertEquals("", requestBody1.get$ref());
      assertNull(requestBody1.getRequired());
      assertEquals("", requestBody1.getDescription());
      assertNull(requestBody2.getRequired());
      assertEquals("", requestBody2.getDescription());
      assertEquals("", requestBody2.get$ref());
      assertNull(schema1.getMaxLength());
      assertNull(schema1.getMinLength());
      assertNull(schema1.getMaxProperties());
      assertNull(schema1.getMinProperties());
      assertNull(schema1.get$ref());
      assertNull(schema1.getName());
      assertNull(schema1.getMinItems());
      assertNull(schema1.getMaxItems());
      assertNull(schema1.getExclusiveMinimum());
      assertNull(schema1.getReadOnly());
      assertNull(schema1.getNullable());
      assertNull(schema1.getDeprecated());
      assertNull(schema1.getPattern());
      assertNull(schema1.getFormat());
      assertNull(schema1.getDescription());
      assertNull(schema1.getExclusiveMaximum());
      assertNull(schema1.getTitle());
      assertNull(schema1.getUniqueItems());
      assertNull(schema1.getType());
      assertNull(schema1.getWriteOnly());
      assertEquals("", requestBody3.get$ref());
      assertNull(requestBody3.getRequired());
      assertEquals("", requestBody3.getDescription());
      assertNull(link1.getOperationId());
      assertNull(link1.get$ref());
      assertNull(link1.getOperationRef());
      assertNull(link1.getDescription());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(link1);
      
      Map<String, Header> map0 = link0.getHeaders();
      assertSame(link0, link1);
      assertNull(link0.getOperationId());
      assertNull(link0.get$ref());
      assertNull(link0.getDescription());
      assertNull(link0.getOperationRef());
      assertNull(map0);
      
      Components components1 = components0.headers(map0);
      assertSame(components0, components1);
      assertSame(link0, link1);
      assertSame(components1, components0);
      assertNull(link0.getOperationId());
      assertNull(link0.get$ref());
      assertNull(link0.getDescription());
      assertNull(link0.getOperationRef());
      assertNotNull(components1);
      
      ApiResponses apiResponses0 = new ApiResponses();
      assertTrue(apiResponses0.isEmpty());
      assertEquals(0, apiResponses0.size());
      assertNotNull(apiResponses0);
      
      io.swagger.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.oas.models.responses.ApiResponse();
      assertNull(apiResponse0.get$ref());
      assertNull(apiResponse0.getDescription());
      assertNotNull(apiResponse0);
      
      ApiResponses apiResponses1 = apiResponses0._default(apiResponse0);
      assertSame(apiResponses0, apiResponses1);
      assertSame(apiResponses1, apiResponses0);
      assertFalse(apiResponses0.isEmpty());
      assertEquals(1, apiResponses0.size());
      assertNull(apiResponse0.get$ref());
      assertNull(apiResponse0.getDescription());
      assertEquals(1, apiResponses1.size());
      assertFalse(apiResponses1.isEmpty());
      assertNotNull(apiResponses1);
      
      Components components2 = new Components();
      assertTrue(components2.equals((Object)components0));
      assertTrue(components2.equals((Object)components1));
      assertNotNull(components2);
      
      Map<String, RequestBody> map1 = components2.getRequestBodies();
      assertNotSame(components2, components1);
      assertNotSame(components2, components0);
      assertTrue(components2.equals((Object)components0));
      assertTrue(components2.equals((Object)components1));
      assertNull(map1);
      
      Components components3 = components2.requestBodies(map1);
      assertNotSame(components2, components1);
      assertSame(components2, components3);
      assertNotSame(components2, components0);
      assertSame(components3, components2);
      assertNotSame(components3, components1);
      assertNotSame(components3, components0);
      assertTrue(components2.equals((Object)components0));
      assertTrue(components2.equals((Object)components1));
      assertTrue(components3.equals((Object)components1));
      assertTrue(components3.equals((Object)components0));
      assertNotNull(components3);
      
      io.swagger.oas.models.media.Schema<io.swagger.oas.models.parameters.Parameter> schema2 = new io.swagger.oas.models.media.Schema<io.swagger.oas.models.parameters.Parameter>();
      assertNull(schema2.getFormat());
      assertNull(schema2.get$ref());
      assertNull(schema2.getTitle());
      assertNull(schema2.getType());
      assertNull(schema2.getMinItems());
      assertNull(schema2.getMaxItems());
      assertNull(schema2.getMaxLength());
      assertNull(schema2.getName());
      assertNull(schema2.getDescription());
      assertNull(schema2.getExclusiveMaximum());
      assertNull(schema2.getMaxProperties());
      assertNull(schema2.getWriteOnly());
      assertNull(schema2.getMinProperties());
      assertNull(schema2.getDeprecated());
      assertNull(schema2.getExclusiveMinimum());
      assertNull(schema2.getUniqueItems());
      assertNull(schema2.getPattern());
      assertNull(schema2.getNullable());
      assertNull(schema2.getMinLength());
      assertNull(schema2.getReadOnly());
      assertNotNull(schema2);
      
      Components components4 = components3.addSchemas(apiResponses1.DEFAULT, schema2);
      assertSame(apiResponses0, apiResponses1);
      assertSame(apiResponses1, apiResponses0);
      assertNotSame(components2, components1);
      assertSame(components2, components3);
      assertNotSame(components2, components0);
      assertSame(components2, components4);
      assertSame(components3, components2);
      assertNotSame(components3, components1);
      assertNotSame(components3, components0);
      assertSame(components3, components4);
      assertNotSame(components4, components1);
      assertNotSame(components4, components0);
      assertSame(components4, components3);
      assertSame(components4, components2);
      assertFalse(apiResponses0.isEmpty());
      assertEquals(1, apiResponses0.size());
      assertNull(apiResponse0.get$ref());
      assertNull(apiResponse0.getDescription());
      assertEquals(1, apiResponses1.size());
      assertFalse(apiResponses1.isEmpty());
      assertNull(schema2.getFormat());
      assertNull(schema2.get$ref());
      assertNull(schema2.getTitle());
      assertNull(schema2.getType());
      assertNull(schema2.getMinItems());
      assertNull(schema2.getMaxItems());
      assertNull(schema2.getMaxLength());
      assertNull(schema2.getName());
      assertNull(schema2.getDescription());
      assertNull(schema2.getExclusiveMaximum());
      assertNull(schema2.getMaxProperties());
      assertNull(schema2.getWriteOnly());
      assertNull(schema2.getMinProperties());
      assertNull(schema2.getDeprecated());
      assertNull(schema2.getExclusiveMinimum());
      assertNull(schema2.getUniqueItems());
      assertNull(schema2.getPattern());
      assertNull(schema2.getNullable());
      assertNull(schema2.getMinLength());
      assertNull(schema2.getReadOnly());
      assertFalse(components2.equals((Object)components1));
      assertFalse(components2.equals((Object)components0));
      assertFalse(components3.equals((Object)components1));
      assertFalse(components3.equals((Object)components0));
      assertFalse(components4.equals((Object)components1));
      assertFalse(components4.equals((Object)components0));
      assertNotNull(components4);
      
      // Undeclared exception!
      try { 
        OperationParser.getContent(contentArray0, produces0, produces0, components4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test093()  throws Throwable  {
      String[] stringArray0 = new String[9];
      String string0 = "lbwso^w9ZsN=O";
      stringArray0[0] = string0;
      String string1 = "[M";
      stringArray0[1] = string1;
      String string2 = "description";
      stringArray0[2] = string2;
      String string3 = "io.swagge";
      stringArray0[3] = string3;
      String string4 = "";
      stringArray0[4] = string4;
      String string5 = "/S>!v,8_k";
      stringArray0[5] = string5;
      String string6 = "HSn{w6}3c)iG9";
      stringArray0[6] = stringArray0[4];
      String string7 = "No Base64Variant with name ";
      stringArray0[7] = string7;
      String string8 = "";
      stringArray0[8] = string8;
      String string9 = "Mismatching names (";
      boolean boolean0 = false;
      String string10 = "H1g`d>^";
      String string11 = "#/components/schemas/";
      boolean boolean1 = false;
      String string12 = "java.langio.swagger.oas.models.responses.ApiResponses";
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(stringArray0[0], (String) null).when(externalDocumentation0).description();
      doReturn(string12, (String) null).when(externalDocumentation0).url();
      int int0 = 4518;
      String string13 = "\\=hdE8`[<Ry$'KMq/R";
      String string14 = "";
      String string15 = "java.langio.swagger.oas.models.responses.ApiResponses";
      String string16 = "8rXVK^|";
      String string17 = "ZB67sr>TL#- N5nla5";
      int int1 = 1617;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(stringArray0).when(schema0).allowableValues();
      doReturn(string9, string15).when(schema0).defaultValue();
      doReturn(boolean0).when(schema0).deprecated();
      doReturn(string1, (String) null).when(schema0).description();
      doReturn(string10, string11, string16, string17).when(schema0).example();
      doReturn(boolean0).when(schema0).exclusiveMaximum();
      doReturn(boolean1).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema0).externalDocs();
      doReturn(stringArray0[4]).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(int1, 0).when(schema0).maxProperties();
      doReturn(int0, int0).when(schema0).minProperties();
      doReturn(string10, string17).when(schema0).pattern();
      doReturn(boolean1).when(schema0).readOnly();
      doReturn(string13, string17).when(schema0).ref();
      doReturn(string14).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional0 = (Optional<io.swagger.oas.models.media.Schema>)OperationParser.getSchemaFromAnnotation(schema0);
      assertNotSame(string9, string12);
      assertNotSame(string9, string0);
      assertNotSame(string9, string15);
      assertNotSame(string9, string8);
      assertNotSame(string9, string16);
      assertNotSame(string9, string13);
      assertNotSame(string9, string10);
      assertNotSame(string9, string1);
      assertNotSame(string9, string7);
      assertNotSame(string9, string5);
      assertNotSame(string9, string3);
      assertNotSame(string9, string2);
      assertNotSame(string9, string17);
      assertNotSame(string9, string4);
      assertNotSame(string9, string11);
      assertNotSame(string9, string14);
      assertNotSame(string9, string6);
      assertNotSame(string1, string11);
      assertNotSame(string1, string10);
      assertNotSame(string1, string8);
      assertNotSame(string1, string17);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string16);
      assertNotSame(string1, string13);
      assertNotSame(string1, string12);
      assertNotSame(string1, string7);
      assertNotSame(string1, string2);
      assertNotSame(string1, string4);
      assertNotSame(string1, string5);
      assertNotSame(string1, string15);
      assertNotSame(string1, string9);
      assertNotSame(string1, string14);
      assertNotSame(string1, string6);
      assertNotSame(string10, string2);
      assertNotSame(string10, string5);
      assertNotSame(string10, string15);
      assertNotSame(string10, string9);
      assertNotSame(string10, string4);
      assertNotSame(string10, string6);
      assertNotSame(string10, string11);
      assertNotSame(string10, string14);
      assertNotSame(string10, string8);
      assertNotSame(string10, string1);
      assertNotSame(string10, string17);
      assertNotSame(string10, string3);
      assertNotSame(string10, string13);
      assertNotSame(string10, string0);
      assertNotSame(string10, string12);
      assertNotSame(string10, string7);
      assertNotSame(string10, string16);
      assertNotSame(string11, string3);
      assertNotSame(string11, string5);
      assertNotSame(string11, string2);
      assertNotSame(string11, string7);
      assertNotSame(string11, string4);
      assertNotSame(string11, string13);
      assertNotSame(string11, string8);
      assertNotSame(string11, string6);
      assertNotSame(string11, string0);
      assertNotSame(string11, string15);
      assertNotSame(string11, string9);
      assertNotSame(string11, string14);
      assertNotSame(string11, string1);
      assertNotSame(string11, string12);
      assertNotSame(string11, string16);
      assertNotSame(string11, string10);
      assertNotSame(string11, string17);
      assertNotSame(string12, string0);
      assertNotSame(string12, string11);
      assertNotSame(string12, string6);
      assertNotSame(string12, string14);
      assertSame(string12, string15);
      assertNotSame(string12, string7);
      assertNotSame(string12, string4);
      assertNotSame(string12, string13);
      assertNotSame(string12, string9);
      assertNotSame(string12, string2);
      assertNotSame(string12, string8);
      assertNotSame(string12, string5);
      assertNotSame(string12, string3);
      assertNotSame(string12, string16);
      assertNotSame(string12, string1);
      assertNotSame(string12, string10);
      assertNotSame(string12, string17);
      assertNotSame(string13, string9);
      assertNotSame(string13, string15);
      assertNotSame(string13, string4);
      assertNotSame(string13, string2);
      assertNotSame(string13, string1);
      assertNotSame(string13, string10);
      assertNotSame(string13, string0);
      assertNotSame(string13, string12);
      assertNotSame(string13, string16);
      assertNotSame(string13, string7);
      assertNotSame(string13, string17);
      assertNotSame(string13, string3);
      assertNotSame(string13, string5);
      assertNotSame(string13, string8);
      assertNotSame(string13, string14);
      assertNotSame(string13, string11);
      assertNotSame(string13, string6);
      assertNotSame(string14, string9);
      assertSame(string14, string4);
      assertNotSame(string14, string15);
      assertNotSame(string14, string0);
      assertNotSame(string14, string6);
      assertNotSame(string14, string12);
      assertNotSame(string14, string16);
      assertNotSame(string14, string1);
      assertNotSame(string14, string5);
      assertNotSame(string14, string17);
      assertNotSame(string14, string3);
      assertNotSame(string14, string13);
      assertNotSame(string14, string10);
      assertNotSame(string14, string7);
      assertSame(string14, string8);
      assertNotSame(string14, string11);
      assertNotSame(string14, string2);
      assertNotSame(string15, string14);
      assertNotSame(string15, string8);
      assertNotSame(string15, string0);
      assertSame(string15, string12);
      assertNotSame(string15, string17);
      assertNotSame(string15, string13);
      assertNotSame(string15, string10);
      assertNotSame(string15, string7);
      assertNotSame(string15, string3);
      assertNotSame(string15, string1);
      assertNotSame(string15, string16);
      assertNotSame(string15, string5);
      assertNotSame(string15, string2);
      assertNotSame(string15, string9);
      assertNotSame(string15, string6);
      assertNotSame(string15, string4);
      assertNotSame(string15, string11);
      assertNotSame(string16, string3);
      assertNotSame(string16, string17);
      assertNotSame(string16, string5);
      assertNotSame(string16, string10);
      assertNotSame(string16, string1);
      assertNotSame(string16, string8);
      assertNotSame(string16, string7);
      assertNotSame(string16, string0);
      assertNotSame(string16, string13);
      assertNotSame(string16, string6);
      assertNotSame(string16, string12);
      assertNotSame(string16, string4);
      assertNotSame(string16, string9);
      assertNotSame(string16, string2);
      assertNotSame(string16, string15);
      assertNotSame(string16, string11);
      assertNotSame(string16, string14);
      assertNotSame(string17, string2);
      assertNotSame(string17, string4);
      assertNotSame(string17, string5);
      assertNotSame(string17, string15);
      assertNotSame(string17, string9);
      assertNotSame(string17, string14);
      assertNotSame(string17, string6);
      assertNotSame(string17, string1);
      assertNotSame(string17, string11);
      assertNotSame(string17, string10);
      assertNotSame(string17, string8);
      assertNotSame(string17, string0);
      assertNotSame(string17, string3);
      assertNotSame(string17, string16);
      assertNotSame(string17, string13);
      assertNotSame(string17, string12);
      assertNotSame(string17, string7);
      assertFalse(int1 == int0);
      assertFalse(string1.equals((Object)string11));
      assertFalse(string1.equals((Object)string10));
      assertFalse(string1.equals((Object)string8));
      assertFalse(string1.equals((Object)string17));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string16));
      assertFalse(string1.equals((Object)string13));
      assertFalse(string1.equals((Object)string12));
      assertFalse(string1.equals((Object)string7));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string15));
      assertFalse(string1.equals((Object)string9));
      assertFalse(string1.equals((Object)string14));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string9.equals((Object)string12));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string15));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string16));
      assertFalse(string9.equals((Object)string13));
      assertFalse(string9.equals((Object)string10));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string17));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string11));
      assertFalse(string9.equals((Object)string14));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string15));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string11));
      assertFalse(string10.equals((Object)string14));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string17));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string13));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string12));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string16));
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string5));
      assertFalse(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string7));
      assertFalse(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string13));
      assertFalse(string11.equals((Object)string8));
      assertFalse(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string15));
      assertFalse(string11.equals((Object)string9));
      assertFalse(string11.equals((Object)string14));
      assertFalse(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string12));
      assertFalse(string11.equals((Object)string16));
      assertFalse(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string17));
      assertFalse(string12.equals((Object)string0));
      assertFalse(string12.equals((Object)string11));
      assertFalse(string12.equals((Object)string6));
      assertFalse(string12.equals((Object)string14));
      assertFalse(string12.equals((Object)string7));
      assertFalse(string12.equals((Object)string4));
      assertFalse(string12.equals((Object)string13));
      assertFalse(string12.equals((Object)string9));
      assertFalse(string12.equals((Object)string2));
      assertFalse(string12.equals((Object)string8));
      assertFalse(string12.equals((Object)string5));
      assertFalse(string12.equals((Object)string3));
      assertFalse(string12.equals((Object)string16));
      assertFalse(string12.equals((Object)string1));
      assertFalse(string12.equals((Object)string10));
      assertFalse(string12.equals((Object)string17));
      assertFalse(int0 == int1);
      assertFalse(string13.equals((Object)string9));
      assertFalse(string13.equals((Object)string15));
      assertFalse(string13.equals((Object)string4));
      assertFalse(string13.equals((Object)string2));
      assertFalse(string13.equals((Object)string1));
      assertFalse(string13.equals((Object)string10));
      assertFalse(string13.equals((Object)string0));
      assertFalse(string13.equals((Object)string12));
      assertFalse(string13.equals((Object)string16));
      assertFalse(string13.equals((Object)string7));
      assertFalse(string13.equals((Object)string17));
      assertFalse(string13.equals((Object)string3));
      assertFalse(string13.equals((Object)string5));
      assertFalse(string13.equals((Object)string8));
      assertFalse(string13.equals((Object)string14));
      assertFalse(string13.equals((Object)string11));
      assertFalse(string13.equals((Object)string6));
      assertFalse(string14.equals((Object)string9));
      assertFalse(string14.equals((Object)string15));
      assertFalse(string14.equals((Object)string0));
      assertFalse(string14.equals((Object)string6));
      assertFalse(string14.equals((Object)string12));
      assertFalse(string14.equals((Object)string16));
      assertFalse(string14.equals((Object)string1));
      assertFalse(string14.equals((Object)string5));
      assertFalse(string14.equals((Object)string17));
      assertFalse(string14.equals((Object)string3));
      assertFalse(string14.equals((Object)string13));
      assertFalse(string14.equals((Object)string10));
      assertFalse(string14.equals((Object)string7));
      assertFalse(string14.equals((Object)string11));
      assertFalse(string14.equals((Object)string2));
      assertFalse(string15.equals((Object)string14));
      assertFalse(string15.equals((Object)string8));
      assertFalse(string15.equals((Object)string0));
      assertFalse(string15.equals((Object)string17));
      assertFalse(string15.equals((Object)string13));
      assertFalse(string15.equals((Object)string10));
      assertFalse(string15.equals((Object)string7));
      assertFalse(string15.equals((Object)string3));
      assertFalse(string15.equals((Object)string1));
      assertFalse(string15.equals((Object)string16));
      assertFalse(string15.equals((Object)string5));
      assertFalse(string15.equals((Object)string2));
      assertFalse(string15.equals((Object)string9));
      assertFalse(string15.equals((Object)string6));
      assertFalse(string15.equals((Object)string4));
      assertFalse(string15.equals((Object)string11));
      assertFalse(string16.equals((Object)string3));
      assertFalse(string16.equals((Object)string17));
      assertFalse(string16.equals((Object)string5));
      assertFalse(string16.equals((Object)string10));
      assertFalse(string16.equals((Object)string1));
      assertFalse(string16.equals((Object)string8));
      assertFalse(string16.equals((Object)string7));
      assertFalse(string16.equals((Object)string0));
      assertFalse(string16.equals((Object)string13));
      assertFalse(string16.equals((Object)string6));
      assertFalse(string16.equals((Object)string12));
      assertFalse(string16.equals((Object)string4));
      assertFalse(string16.equals((Object)string9));
      assertFalse(string16.equals((Object)string2));
      assertFalse(string16.equals((Object)string15));
      assertFalse(string16.equals((Object)string11));
      assertFalse(string16.equals((Object)string14));
      assertFalse(string17.equals((Object)string2));
      assertFalse(string17.equals((Object)string4));
      assertFalse(string17.equals((Object)string5));
      assertFalse(string17.equals((Object)string15));
      assertFalse(string17.equals((Object)string9));
      assertFalse(string17.equals((Object)string14));
      assertFalse(string17.equals((Object)string6));
      assertFalse(string17.equals((Object)string1));
      assertFalse(string17.equals((Object)string11));
      assertFalse(string17.equals((Object)string10));
      assertFalse(string17.equals((Object)string8));
      assertFalse(string17.equals((Object)string0));
      assertFalse(string17.equals((Object)string3));
      assertFalse(string17.equals((Object)string16));
      assertFalse(string17.equals((Object)string13));
      assertFalse(string17.equals((Object)string12));
      assertFalse(string17.equals((Object)string7));
      assertEquals(9, stringArray0.length);
      assertNotNull(optional0);
      
      String string18 = "java.langio.swagger.oas.models.responses.ApiResponses";
      String string19 = "~NkelzN/|[5F~";
      String string20 = " cF'hXef,#]FnPcKkfO";
      String string21 = "Um@sV7U8JFG&(U:+";
      LinkParameter[] linkParameterArray0 = new LinkParameter[4];
      LinkParameter linkParameter0 = mock(LinkParameter.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null).when(linkParameter0).name();
      linkParameterArray0[0] = linkParameter0;
      linkParameterArray0[1] = linkParameterArray0[0];
      linkParameterArray0[2] = linkParameterArray0[1];
      linkParameterArray0[3] = linkParameterArray0[2];
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      doReturn(string18, string20, (String) null, (String) null, (String) null).when(link0).description();
      doReturn(stringArray0[0], string0, (String) null, (String) null, (String) null).when(link0).operationId();
      doReturn(string19, string21, (String) null, (String) null, (String) null).when(link0).operationRef();
      doReturn(linkParameterArray0).when(link0).parameters();
      Optional<io.swagger.oas.models.links.Link> optional1 = OperationParser.getLink(link0);
      assertNotSame(string0, string6);
      assertNotSame(string0, string18);
      assertNotSame(string0, string15);
      assertNotSame(string0, string14);
      assertNotSame(string0, string9);
      assertNotSame(string0, string1);
      assertNotSame(string0, string16);
      assertNotSame(string0, string12);
      assertNotSame(string0, string11);
      assertNotSame(string0, string19);
      assertNotSame(string0, string7);
      assertNotSame(string0, string4);
      assertNotSame(string0, string13);
      assertNotSame(string0, string2);
      assertNotSame(string0, string20);
      assertNotSame(string0, string8);
      assertNotSame(string0, string3);
      assertNotSame(string0, string5);
      assertNotSame(string0, string10);
      assertNotSame(string0, string21);
      assertNotSame(string0, string17);
      assertNotSame(string18, string2);
      assertNotSame(string18, string19);
      assertNotSame(string18, string4);
      assertNotSame(string18, string16);
      assertNotSame(string18, string13);
      assertNotSame(string18, string9);
      assertNotSame(string18, string0);
      assertNotSame(string18, string20);
      assertNotSame(string18, string8);
      assertNotSame(string18, string11);
      assertNotSame(string18, string14);
      assertNotSame(string18, string1);
      assertSame(string18, string12);
      assertNotSame(string18, string21);
      assertNotSame(string18, string10);
      assertNotSame(string18, string7);
      assertNotSame(string18, string6);
      assertSame(string18, string15);
      assertNotSame(string18, string3);
      assertNotSame(string18, string5);
      assertNotSame(string18, string17);
      assertNotSame(string19, string17);
      assertNotSame(string19, string16);
      assertNotSame(string19, string10);
      assertNotSame(string19, string21);
      assertNotSame(string19, string3);
      assertNotSame(string19, string5);
      assertNotSame(string19, string14);
      assertNotSame(string19, string8);
      assertNotSame(string19, string1);
      assertNotSame(string19, string11);
      assertNotSame(string19, string12);
      assertNotSame(string19, string6);
      assertNotSame(string19, string0);
      assertNotSame(string19, string7);
      assertNotSame(string19, string13);
      assertNotSame(string19, string9);
      assertNotSame(string19, string20);
      assertNotSame(string19, string2);
      assertNotSame(string19, string4);
      assertNotSame(string19, string18);
      assertNotSame(string19, string15);
      assertNotSame(string20, string17);
      assertNotSame(string20, string13);
      assertNotSame(string20, string11);
      assertNotSame(string20, string18);
      assertNotSame(string20, string2);
      assertNotSame(string20, string14);
      assertNotSame(string20, string8);
      assertNotSame(string20, string4);
      assertNotSame(string20, string9);
      assertNotSame(string20, string15);
      assertNotSame(string20, string6);
      assertNotSame(string20, string0);
      assertNotSame(string20, string19);
      assertNotSame(string20, string12);
      assertNotSame(string20, string7);
      assertNotSame(string20, string5);
      assertNotSame(string20, string16);
      assertNotSame(string20, string3);
      assertNotSame(string20, string1);
      assertNotSame(string20, string10);
      assertNotSame(string20, string21);
      assertNotSame(string21, string4);
      assertNotSame(string21, string16);
      assertNotSame(string21, string19);
      assertNotSame(string21, string2);
      assertNotSame(string21, string18);
      assertNotSame(string21, string6);
      assertNotSame(string21, string14);
      assertNotSame(string21, string11);
      assertNotSame(string21, string15);
      assertNotSame(string21, string9);
      assertNotSame(string21, string10);
      assertNotSame(string21, string7);
      assertNotSame(string21, string13);
      assertNotSame(string21, string8);
      assertNotSame(string21, string20);
      assertNotSame(string21, string17);
      assertNotSame(string21, string12);
      assertNotSame(string21, string0);
      assertNotSame(string21, string5);
      assertNotSame(string21, string3);
      assertNotSame(string21, string1);
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string18));
      assertFalse(string0.equals((Object)string15));
      assertFalse(string0.equals((Object)string14));
      assertFalse(string0.equals((Object)string9));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string16));
      assertFalse(string0.equals((Object)string12));
      assertFalse(string0.equals((Object)string11));
      assertFalse(string0.equals((Object)string19));
      assertFalse(string0.equals((Object)string7));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string13));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string20));
      assertFalse(string0.equals((Object)string8));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string10));
      assertFalse(string0.equals((Object)string21));
      assertFalse(string0.equals((Object)string17));
      assertFalse(string18.equals((Object)string2));
      assertFalse(string18.equals((Object)string19));
      assertFalse(string18.equals((Object)string4));
      assertFalse(string18.equals((Object)string16));
      assertFalse(string18.equals((Object)string13));
      assertFalse(string18.equals((Object)string9));
      assertFalse(string18.equals((Object)string0));
      assertFalse(string18.equals((Object)string20));
      assertFalse(string18.equals((Object)string8));
      assertFalse(string18.equals((Object)string11));
      assertFalse(string18.equals((Object)string14));
      assertFalse(string18.equals((Object)string1));
      assertFalse(string18.equals((Object)string21));
      assertFalse(string18.equals((Object)string10));
      assertFalse(string18.equals((Object)string7));
      assertFalse(string18.equals((Object)string6));
      assertFalse(string18.equals((Object)string3));
      assertFalse(string18.equals((Object)string5));
      assertFalse(string18.equals((Object)string17));
      assertFalse(string19.equals((Object)string17));
      assertFalse(string19.equals((Object)string16));
      assertFalse(string19.equals((Object)string10));
      assertFalse(string19.equals((Object)string21));
      assertFalse(string19.equals((Object)string3));
      assertFalse(string19.equals((Object)string5));
      assertFalse(string19.equals((Object)string14));
      assertFalse(string19.equals((Object)string8));
      assertFalse(string19.equals((Object)string1));
      assertFalse(string19.equals((Object)string11));
      assertFalse(string19.equals((Object)string12));
      assertFalse(string19.equals((Object)string6));
      assertFalse(string19.equals((Object)string0));
      assertFalse(string19.equals((Object)string7));
      assertFalse(string19.equals((Object)string13));
      assertFalse(string19.equals((Object)string9));
      assertFalse(string19.equals((Object)string20));
      assertFalse(string19.equals((Object)string2));
      assertFalse(string19.equals((Object)string4));
      assertFalse(string19.equals((Object)string18));
      assertFalse(string19.equals((Object)string15));
      assertFalse(string20.equals((Object)string17));
      assertFalse(string20.equals((Object)string13));
      assertFalse(string20.equals((Object)string11));
      assertFalse(string20.equals((Object)string18));
      assertFalse(string20.equals((Object)string2));
      assertFalse(string20.equals((Object)string14));
      assertFalse(string20.equals((Object)string8));
      assertFalse(string20.equals((Object)string4));
      assertFalse(string20.equals((Object)string9));
      assertFalse(string20.equals((Object)string15));
      assertFalse(string20.equals((Object)string6));
      assertFalse(string20.equals((Object)string0));
      assertFalse(string20.equals((Object)string19));
      assertFalse(string20.equals((Object)string12));
      assertFalse(string20.equals((Object)string7));
      assertFalse(string20.equals((Object)string5));
      assertFalse(string20.equals((Object)string16));
      assertFalse(string20.equals((Object)string3));
      assertFalse(string20.equals((Object)string1));
      assertFalse(string20.equals((Object)string10));
      assertFalse(string20.equals((Object)string21));
      assertFalse(string21.equals((Object)string4));
      assertFalse(string21.equals((Object)string16));
      assertFalse(string21.equals((Object)string19));
      assertFalse(string21.equals((Object)string2));
      assertFalse(string21.equals((Object)string18));
      assertFalse(string21.equals((Object)string6));
      assertFalse(string21.equals((Object)string14));
      assertFalse(string21.equals((Object)string11));
      assertFalse(string21.equals((Object)string15));
      assertFalse(string21.equals((Object)string9));
      assertFalse(string21.equals((Object)string10));
      assertFalse(string21.equals((Object)string7));
      assertFalse(string21.equals((Object)string13));
      assertFalse(string21.equals((Object)string8));
      assertFalse(string21.equals((Object)string20));
      assertFalse(string21.equals((Object)string17));
      assertFalse(string21.equals((Object)string12));
      assertFalse(string21.equals((Object)string0));
      assertFalse(string21.equals((Object)string5));
      assertFalse(string21.equals((Object)string3));
      assertFalse(string21.equals((Object)string1));
      assertEquals(9, stringArray0.length);
      assertEquals(4, linkParameterArray0.length);
      assertNotNull(optional1);
      
      String string22 = "#/components/schemas/";
      String string23 = "m}pEKYfneH";
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn(stringArray0[6]).when(contact0).email();
      doReturn(stringArray0[7], stringArray0[0]).when(contact0).name();
      doReturn(string22, string23).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional2 = OperationParser.getContact(contact0);
      assertNotSame(string23, string3);
      assertNotSame(string23, string5);
      assertNotSame(string23, string10);
      assertNotSame(string23, string22);
      assertNotSame(string23, string17);
      assertNotSame(string23, string0);
      assertNotSame(string23, string6);
      assertNotSame(string23, string18);
      assertNotSame(string23, string14);
      assertNotSame(string23, string15);
      assertNotSame(string23, string9);
      assertNotSame(string23, string1);
      assertNotSame(string23, string21);
      assertNotSame(string23, string16);
      assertNotSame(string23, string12);
      assertNotSame(string23, string11);
      assertNotSame(string23, string7);
      assertNotSame(string23, string19);
      assertNotSame(string23, string4);
      assertNotSame(string23, string13);
      assertNotSame(string23, string2);
      assertNotSame(string23, string8);
      assertNotSame(string23, string20);
      assertNotSame(string22, string4);
      assertNotSame(string22, string2);
      assertNotSame(string22, string5);
      assertNotSame(string22, string20);
      assertNotSame(string22, string3);
      assertNotSame(string22, string12);
      assertNotSame(string22, string7);
      assertNotSame(string22, string16);
      assertNotSame(string22, string0);
      assertNotSame(string22, string19);
      assertNotSame(string22, string13);
      assertNotSame(string22, string8);
      assertNotSame(string22, string21);
      assertNotSame(string22, string1);
      assertNotSame(string22, string10);
      assertNotSame(string22, string18);
      assertNotSame(string22, string15);
      assertNotSame(string22, string9);
      assertNotSame(string22, string17);
      assertSame(string22, string11);
      assertNotSame(string22, string23);
      assertNotSame(string22, string6);
      assertNotSame(string22, string14);
      assertFalse(string23.equals((Object)string3));
      assertFalse(string23.equals((Object)string5));
      assertFalse(string23.equals((Object)string10));
      assertFalse(string23.equals((Object)string22));
      assertFalse(string23.equals((Object)string17));
      assertFalse(string23.equals((Object)string0));
      assertFalse(string23.equals((Object)string6));
      assertFalse(string23.equals((Object)string18));
      assertFalse(string23.equals((Object)string14));
      assertFalse(string23.equals((Object)string15));
      assertFalse(string23.equals((Object)string9));
      assertFalse(string23.equals((Object)string1));
      assertFalse(string23.equals((Object)string21));
      assertFalse(string23.equals((Object)string16));
      assertFalse(string23.equals((Object)string12));
      assertFalse(string23.equals((Object)string11));
      assertFalse(string23.equals((Object)string7));
      assertFalse(string23.equals((Object)string19));
      assertFalse(string23.equals((Object)string4));
      assertFalse(string23.equals((Object)string13));
      assertFalse(string23.equals((Object)string2));
      assertFalse(string23.equals((Object)string8));
      assertFalse(string23.equals((Object)string20));
      assertFalse(string22.equals((Object)string4));
      assertFalse(string22.equals((Object)string2));
      assertFalse(string22.equals((Object)string5));
      assertFalse(string22.equals((Object)string20));
      assertFalse(string22.equals((Object)string3));
      assertFalse(string22.equals((Object)string12));
      assertFalse(string22.equals((Object)string7));
      assertFalse(string22.equals((Object)string16));
      assertFalse(string22.equals((Object)string0));
      assertFalse(string22.equals((Object)string19));
      assertFalse(string22.equals((Object)string13));
      assertFalse(string22.equals((Object)string8));
      assertFalse(string22.equals((Object)string21));
      assertFalse(string22.equals((Object)string1));
      assertFalse(string22.equals((Object)string10));
      assertFalse(string22.equals((Object)string18));
      assertFalse(string22.equals((Object)string15));
      assertFalse(string22.equals((Object)string9));
      assertFalse(string22.equals((Object)string17));
      assertFalse(string22.equals((Object)string23));
      assertFalse(string22.equals((Object)string6));
      assertFalse(string22.equals((Object)string14));
      assertEquals(9, stringArray0.length);
      assertNotNull(optional2);
      
      String string24 = "io.swagge";
      Contact contact1 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(contact1).email();
      doReturn((String) null).when(contact1).name();
      doReturn((String) null).when(contact1).url();
      License license0 = null;
      String string25 = "bbj";
      String string26 = "b+tzU8Vz;";
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn(contact1).when(info0).contact();
      doReturn(string2, stringArray0[4]).when(info0).description();
      doReturn(license0).when(info0).license();
      doReturn(string7, string25).when(info0).termsOfService();
      doReturn(stringArray0[5], string26).when(info0).title();
      doReturn(string24, stringArray0[8]).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional3 = OperationParser.getInfo(info0);
      assertNotSame(string24, string12);
      assertNotSame(string24, string16);
      assertNotSame(string24, string1);
      assertNotSame(string24, string20);
      assertNotSame(string24, string13);
      assertSame(string24, string3);
      assertNotSame(string24, string7);
      assertNotSame(string24, string25);
      assertNotSame(string24, string15);
      assertNotSame(string24, string8);
      assertNotSame(string24, string6);
      assertNotSame(string24, string0);
      assertNotSame(string24, string14);
      assertNotSame(string24, string10);
      assertNotSame(string24, string21);
      assertNotSame(string24, string26);
      assertNotSame(string24, string17);
      assertNotSame(string24, string5);
      assertNotSame(string24, string22);
      assertNotSame(string24, string23);
      assertNotSame(string24, string19);
      assertNotSame(string24, string2);
      assertNotSame(string24, string11);
      assertNotSame(string24, string4);
      assertNotSame(string24, string9);
      assertNotSame(string24, string18);
      assertNotSame(string2, string13);
      assertNotSame(string2, string17);
      assertNotSame(string2, string7);
      assertNotSame(string2, string26);
      assertNotSame(string2, string24);
      assertNotSame(string2, string21);
      assertNotSame(string2, string10);
      assertNotSame(string2, string15);
      assertNotSame(string2, string22);
      assertNotSame(string2, string0);
      assertNotSame(string2, string8);
      assertNotSame(string2, string25);
      assertNotSame(string2, string6);
      assertNotSame(string2, string20);
      assertNotSame(string2, string5);
      assertNotSame(string2, string3);
      assertNotSame(string2, string12);
      assertNotSame(string2, string1);
      assertNotSame(string2, string16);
      assertNotSame(string2, string9);
      assertNotSame(string2, string19);
      assertNotSame(string2, string18);
      assertNotSame(string2, string14);
      assertNotSame(string2, string23);
      assertNotSame(string2, string4);
      assertNotSame(string2, string11);
      assertNotSame(string25, string11);
      assertNotSame(string25, string8);
      assertNotSame(string25, string12);
      assertNotSame(string25, string1);
      assertNotSame(string25, string23);
      assertNotSame(string25, string3);
      assertNotSame(string25, string20);
      assertNotSame(string25, string15);
      assertNotSame(string25, string13);
      assertNotSame(string25, string24);
      assertNotSame(string25, string7);
      assertNotSame(string25, string0);
      assertNotSame(string25, string14);
      assertNotSame(string25, string18);
      assertNotSame(string25, string26);
      assertNotSame(string25, string10);
      assertNotSame(string25, string21);
      assertNotSame(string25, string17);
      assertNotSame(string25, string22);
      assertNotSame(string25, string6);
      assertNotSame(string25, string5);
      assertNotSame(string25, string2);
      assertNotSame(string25, string4);
      assertNotSame(string25, string9);
      assertNotSame(string25, string16);
      assertNotSame(string25, string19);
      assertNotSame(string26, string23);
      assertNotSame(string26, string3);
      assertNotSame(string26, string5);
      assertNotSame(string26, string19);
      assertNotSame(string26, string1);
      assertNotSame(string26, string20);
      assertNotSame(string26, string0);
      assertNotSame(string26, string12);
      assertNotSame(string26, string15);
      assertNotSame(string26, string22);
      assertNotSame(string26, string8);
      assertNotSame(string26, string25);
      assertNotSame(string26, string6);
      assertNotSame(string26, string17);
      assertNotSame(string26, string24);
      assertNotSame(string26, string10);
      assertNotSame(string26, string21);
      assertNotSame(string26, string13);
      assertNotSame(string26, string16);
      assertNotSame(string26, string7);
      assertNotSame(string26, string9);
      assertNotSame(string26, string18);
      assertNotSame(string26, string2);
      assertNotSame(string26, string4);
      assertNotSame(string26, string14);
      assertNotSame(string26, string11);
      assertNotSame(string7, string8);
      assertNotSame(string7, string20);
      assertNotSame(string7, string16);
      assertNotSame(string7, string3);
      assertNotSame(string7, string12);
      assertNotSame(string7, string1);
      assertNotSame(string7, string5);
      assertNotSame(string7, string24);
      assertNotSame(string7, string15);
      assertNotSame(string7, string6);
      assertNotSame(string7, string25);
      assertNotSame(string7, string18);
      assertNotSame(string7, string26);
      assertNotSame(string7, string14);
      assertNotSame(string7, string0);
      assertNotSame(string7, string13);
      assertNotSame(string7, string17);
      assertNotSame(string7, string22);
      assertNotSame(string7, string10);
      assertNotSame(string7, string21);
      assertNotSame(string7, string19);
      assertNotSame(string7, string23);
      assertNotSame(string7, string9);
      assertNotSame(string7, string2);
      assertNotSame(string7, string11);
      assertNotSame(string7, string4);
      assertFalse(string24.equals((Object)string12));
      assertFalse(string24.equals((Object)string16));
      assertFalse(string24.equals((Object)string1));
      assertFalse(string24.equals((Object)string20));
      assertFalse(string24.equals((Object)string13));
      assertFalse(string24.equals((Object)string7));
      assertFalse(string24.equals((Object)string25));
      assertFalse(string24.equals((Object)string15));
      assertFalse(string24.equals((Object)string8));
      assertFalse(string24.equals((Object)string6));
      assertFalse(string24.equals((Object)string0));
      assertFalse(string24.equals((Object)string14));
      assertFalse(string24.equals((Object)string10));
      assertFalse(string24.equals((Object)string21));
      assertFalse(string24.equals((Object)string26));
      assertFalse(string24.equals((Object)string17));
      assertFalse(string24.equals((Object)string5));
      assertFalse(string24.equals((Object)string22));
      assertFalse(string24.equals((Object)string23));
      assertFalse(string24.equals((Object)string19));
      assertFalse(string24.equals((Object)string2));
      assertFalse(string24.equals((Object)string11));
      assertFalse(string24.equals((Object)string4));
      assertFalse(string24.equals((Object)string9));
      assertFalse(string24.equals((Object)string18));
      assertFalse(string2.equals((Object)string13));
      assertFalse(string2.equals((Object)string17));
      assertFalse(string2.equals((Object)string7));
      assertFalse(string2.equals((Object)string26));
      assertFalse(string2.equals((Object)string24));
      assertFalse(string2.equals((Object)string21));
      assertFalse(string2.equals((Object)string10));
      assertFalse(string2.equals((Object)string15));
      assertFalse(string2.equals((Object)string22));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string8));
      assertFalse(string2.equals((Object)string25));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string2.equals((Object)string20));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string12));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string16));
      assertFalse(string2.equals((Object)string9));
      assertFalse(string2.equals((Object)string19));
      assertFalse(string2.equals((Object)string18));
      assertFalse(string2.equals((Object)string14));
      assertFalse(string2.equals((Object)string23));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string11));
      assertFalse(string25.equals((Object)string11));
      assertFalse(string25.equals((Object)string8));
      assertFalse(string25.equals((Object)string12));
      assertFalse(string25.equals((Object)string1));
      assertFalse(string25.equals((Object)string23));
      assertFalse(string25.equals((Object)string3));
      assertFalse(string25.equals((Object)string20));
      assertFalse(string25.equals((Object)string15));
      assertFalse(string25.equals((Object)string13));
      assertFalse(string25.equals((Object)string24));
      assertFalse(string25.equals((Object)string7));
      assertFalse(string25.equals((Object)string0));
      assertFalse(string25.equals((Object)string14));
      assertFalse(string25.equals((Object)string18));
      assertFalse(string25.equals((Object)string26));
      assertFalse(string25.equals((Object)string10));
      assertFalse(string25.equals((Object)string21));
      assertFalse(string25.equals((Object)string17));
      assertFalse(string25.equals((Object)string22));
      assertFalse(string25.equals((Object)string6));
      assertFalse(string25.equals((Object)string5));
      assertFalse(string25.equals((Object)string2));
      assertFalse(string25.equals((Object)string4));
      assertFalse(string25.equals((Object)string9));
      assertFalse(string25.equals((Object)string16));
      assertFalse(string25.equals((Object)string19));
      assertFalse(string26.equals((Object)string23));
      assertFalse(string26.equals((Object)string3));
      assertFalse(string26.equals((Object)string5));
      assertFalse(string26.equals((Object)string19));
      assertFalse(string26.equals((Object)string1));
      assertFalse(string26.equals((Object)string20));
      assertFalse(string26.equals((Object)string0));
      assertFalse(string26.equals((Object)string12));
      assertFalse(string26.equals((Object)string15));
      assertFalse(string26.equals((Object)string22));
      assertFalse(string26.equals((Object)string8));
      assertFalse(string26.equals((Object)string25));
      assertFalse(string26.equals((Object)string6));
      assertFalse(string26.equals((Object)string17));
      assertFalse(string26.equals((Object)string24));
      assertFalse(string26.equals((Object)string10));
      assertFalse(string26.equals((Object)string21));
      assertFalse(string26.equals((Object)string13));
      assertFalse(string26.equals((Object)string16));
      assertFalse(string26.equals((Object)string7));
      assertFalse(string26.equals((Object)string9));
      assertFalse(string26.equals((Object)string18));
      assertFalse(string26.equals((Object)string2));
      assertFalse(string26.equals((Object)string4));
      assertFalse(string26.equals((Object)string14));
      assertFalse(string26.equals((Object)string11));
      assertFalse(string7.equals((Object)string8));
      assertFalse(string7.equals((Object)string20));
      assertFalse(string7.equals((Object)string16));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string12));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string24));
      assertFalse(string7.equals((Object)string15));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string25));
      assertFalse(string7.equals((Object)string18));
      assertFalse(string7.equals((Object)string26));
      assertFalse(string7.equals((Object)string14));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string13));
      assertFalse(string7.equals((Object)string17));
      assertFalse(string7.equals((Object)string22));
      assertFalse(string7.equals((Object)string10));
      assertFalse(string7.equals((Object)string21));
      assertFalse(string7.equals((Object)string19));
      assertFalse(string7.equals((Object)string23));
      assertFalse(string7.equals((Object)string9));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string11));
      assertFalse(string7.equals((Object)string4));
      assertEquals(9, stringArray0.length);
      assertNotNull(optional3);
      
      ApiResponse[] apiResponseArray0 = new ApiResponse[2];
      Content[] contentArray0 = new Content[0];
      String string27 = "com.fasterxml.jackson.databind.type.CollectionType";
      String string28 = "java.langio.swagger.oas.models.responses.ApiResponses";
      Link[] linkArray0 = new Link[3];
      linkArray0[0] = link0;
      linkArray0[1] = link0;
      linkArray0[2] = linkArray0[1];
      ApiResponse apiResponse0 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn((Object) contentArray0, (Object) contentArray0).when(apiResponse0).content();
      doReturn(string27, string28, string10, string5).when(apiResponse0).description();
      doReturn((Object) linkArray0, (Object) linkArray0).when(apiResponse0).links();
      doReturn(string25, stringArray0[2], (String) null).when(apiResponse0).responseCode();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      assertNotNull(components0);
      
      String string29 = "R!c";
      Header header0 = new Header();
      assertNull(header0.getDeprecated());
      assertNull(header0.getExplode());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getRequired());
      assertNull(header0.getDescription());
      assertNull(header0.get$ref());
      assertNull(header0.getExample());
      assertNull(header0.getStyle());
      assertNotNull(header0);
      
      Components components1 = components0.addHeaders(string29, header0);
      assertSame(components0, components1);
      assertNotSame(string29, string17);
      assertNotSame(string29, string24);
      assertNotSame(string29, string4);
      assertNotSame(string29, string25);
      assertNotSame(string29, string14);
      assertNotSame(string29, string6);
      assertNotSame(string29, string18);
      assertNotSame(string29, string19);
      assertNotSame(string29, string10);
      assertNotSame(string29, string22);
      assertNotSame(string29, string28);
      assertNotSame(string29, string12);
      assertNotSame(string29, string27);
      assertNotSame(string29, string16);
      assertNotSame(string29, string3);
      assertNotSame(string29, string5);
      assertNotSame(string29, string23);
      assertNotSame(string29, string20);
      assertNotSame(string29, string2);
      assertNotSame(string29, string9);
      assertNotSame(string29, string11);
      assertNotSame(string29, string0);
      assertNotSame(string29, string15);
      assertNotSame(string29, string8);
      assertNotSame(string29, string26);
      assertNotSame(string29, string21);
      assertNotSame(string29, string7);
      assertNotSame(string29, string13);
      assertNotSame(string29, string1);
      assertSame(components1, components0);
      assertNull(header0.getDeprecated());
      assertNull(header0.getExplode());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getRequired());
      assertNull(header0.getDescription());
      assertNull(header0.get$ref());
      assertNull(header0.getExample());
      assertNull(header0.getStyle());
      assertFalse(string29.equals((Object)string17));
      assertFalse(string29.equals((Object)string24));
      assertFalse(string29.equals((Object)string4));
      assertFalse(string29.equals((Object)string25));
      assertFalse(string29.equals((Object)string14));
      assertFalse(string29.equals((Object)string6));
      assertFalse(string29.equals((Object)string18));
      assertFalse(string29.equals((Object)string19));
      assertFalse(string29.equals((Object)string10));
      assertFalse(string29.equals((Object)string22));
      assertFalse(string29.equals((Object)string28));
      assertFalse(string29.equals((Object)string12));
      assertFalse(string29.equals((Object)string27));
      assertFalse(string29.equals((Object)string16));
      assertFalse(string29.equals((Object)string3));
      assertFalse(string29.equals((Object)string5));
      assertFalse(string29.equals((Object)string23));
      assertFalse(string29.equals((Object)string20));
      assertFalse(string29.equals((Object)string2));
      assertFalse(string29.equals((Object)string9));
      assertFalse(string29.equals((Object)string11));
      assertFalse(string29.equals((Object)string0));
      assertFalse(string29.equals((Object)string15));
      assertFalse(string29.equals((Object)string8));
      assertFalse(string29.equals((Object)string26));
      assertFalse(string29.equals((Object)string21));
      assertFalse(string29.equals((Object)string7));
      assertFalse(string29.equals((Object)string13));
      assertFalse(string29.equals((Object)string1));
      assertNotNull(components1);
      
      io.swagger.oas.models.media.Schema<MediaType> schema1 = new io.swagger.oas.models.media.Schema<MediaType>();
      assertNull(schema1.getPattern());
      assertNull(schema1.getFormat());
      assertNull(schema1.getDeprecated());
      assertNull(schema1.getTitle());
      assertNull(schema1.get$ref());
      assertNull(schema1.getMaxLength());
      assertNull(schema1.getExclusiveMinimum());
      assertNull(schema1.getMinItems());
      assertNull(schema1.getMaxItems());
      assertNull(schema1.getName());
      assertNull(schema1.getMinLength());
      assertNull(schema1.getExclusiveMaximum());
      assertNull(schema1.getMaxProperties());
      assertNull(schema1.getMinProperties());
      assertNull(schema1.getReadOnly());
      assertNull(schema1.getNullable());
      assertNull(schema1.getWriteOnly());
      assertNull(schema1.getUniqueItems());
      assertNull(schema1.getDescription());
      assertNull(schema1.getType());
      assertNotNull(schema1);
      
      Components components2 = components1.addSchemas(string29, schema1);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertNotSame(string29, string17);
      assertNotSame(string29, string24);
      assertNotSame(string29, string4);
      assertNotSame(string29, string25);
      assertNotSame(string29, string14);
      assertNotSame(string29, string6);
      assertNotSame(string29, string18);
      assertNotSame(string29, string19);
      assertNotSame(string29, string10);
      assertNotSame(string29, string22);
      assertNotSame(string29, string28);
      assertNotSame(string29, string12);
      assertNotSame(string29, string27);
      assertNotSame(string29, string16);
      assertNotSame(string29, string3);
      assertNotSame(string29, string5);
      assertNotSame(string29, string23);
      assertNotSame(string29, string20);
      assertNotSame(string29, string2);
      assertNotSame(string29, string9);
      assertNotSame(string29, string11);
      assertNotSame(string29, string0);
      assertNotSame(string29, string15);
      assertNotSame(string29, string8);
      assertNotSame(string29, string26);
      assertNotSame(string29, string21);
      assertNotSame(string29, string7);
      assertNotSame(string29, string13);
      assertNotSame(string29, string1);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertNull(header0.getDeprecated());
      assertNull(header0.getExplode());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getRequired());
      assertNull(header0.getDescription());
      assertNull(header0.get$ref());
      assertNull(header0.getExample());
      assertNull(header0.getStyle());
      assertNull(schema1.getPattern());
      assertNull(schema1.getFormat());
      assertNull(schema1.getDeprecated());
      assertNull(schema1.getTitle());
      assertNull(schema1.get$ref());
      assertNull(schema1.getMaxLength());
      assertNull(schema1.getExclusiveMinimum());
      assertNull(schema1.getMinItems());
      assertNull(schema1.getMaxItems());
      assertNull(schema1.getName());
      assertNull(schema1.getMinLength());
      assertNull(schema1.getExclusiveMaximum());
      assertNull(schema1.getMaxProperties());
      assertNull(schema1.getMinProperties());
      assertNull(schema1.getReadOnly());
      assertNull(schema1.getNullable());
      assertNull(schema1.getWriteOnly());
      assertNull(schema1.getUniqueItems());
      assertNull(schema1.getDescription());
      assertNull(schema1.getType());
      assertFalse(string29.equals((Object)string17));
      assertFalse(string29.equals((Object)string24));
      assertFalse(string29.equals((Object)string4));
      assertFalse(string29.equals((Object)string25));
      assertFalse(string29.equals((Object)string14));
      assertFalse(string29.equals((Object)string6));
      assertFalse(string29.equals((Object)string18));
      assertFalse(string29.equals((Object)string19));
      assertFalse(string29.equals((Object)string10));
      assertFalse(string29.equals((Object)string22));
      assertFalse(string29.equals((Object)string28));
      assertFalse(string29.equals((Object)string12));
      assertFalse(string29.equals((Object)string27));
      assertFalse(string29.equals((Object)string16));
      assertFalse(string29.equals((Object)string3));
      assertFalse(string29.equals((Object)string5));
      assertFalse(string29.equals((Object)string23));
      assertFalse(string29.equals((Object)string20));
      assertFalse(string29.equals((Object)string2));
      assertFalse(string29.equals((Object)string9));
      assertFalse(string29.equals((Object)string11));
      assertFalse(string29.equals((Object)string0));
      assertFalse(string29.equals((Object)string15));
      assertFalse(string29.equals((Object)string8));
      assertFalse(string29.equals((Object)string26));
      assertFalse(string29.equals((Object)string21));
      assertFalse(string29.equals((Object)string7));
      assertFalse(string29.equals((Object)string13));
      assertFalse(string29.equals((Object)string1));
      assertNotNull(components2);
      
      Operation operation0 = new Operation();
      assertNull(operation0.getSummary());
      assertNull(operation0.getOperationId());
      assertNull(operation0.getDeprecated());
      assertNull(operation0.getDescription());
      assertNotNull(operation0);
      
      String string30 = header0.toString();
      assertNotSame(string30, string14);
      assertNotSame(string30, string28);
      assertNotSame(string30, string0);
      assertNotSame(string30, string18);
      assertNotSame(string30, string6);
      assertNotSame(string30, string21);
      assertNotSame(string30, string10);
      assertNotSame(string30, string22);
      assertNotSame(string30, string17);
      assertNotSame(string30, string26);
      assertNotSame(string30, string5);
      assertNotSame(string30, string23);
      assertNotSame(string30, string29);
      assertNotSame(string30, string16);
      assertNotSame(string30, string4);
      assertNotSame(string30, string9);
      assertNotSame(string30, string19);
      assertNotSame(string30, string2);
      assertNotSame(string30, string1);
      assertNotSame(string30, string12);
      assertNotSame(string30, string27);
      assertNotSame(string30, string11);
      assertNotSame(string30, string3);
      assertNotSame(string30, string13);
      assertNotSame(string30, string7);
      assertNotSame(string30, string20);
      assertNotSame(string30, string15);
      assertNotSame(string30, string25);
      assertNotSame(string30, string8);
      assertNotSame(string30, string24);
      assertNull(header0.getDeprecated());
      assertNull(header0.getExplode());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getRequired());
      assertNull(header0.getDescription());
      assertNull(header0.get$ref());
      assertNull(header0.getExample());
      assertNull(header0.getStyle());
      assertFalse(string30.equals((Object)string14));
      assertFalse(string30.equals((Object)string28));
      assertFalse(string30.equals((Object)string0));
      assertFalse(string30.equals((Object)string18));
      assertFalse(string30.equals((Object)string6));
      assertFalse(string30.equals((Object)string21));
      assertFalse(string30.equals((Object)string10));
      assertFalse(string30.equals((Object)string22));
      assertFalse(string30.equals((Object)string17));
      assertFalse(string30.equals((Object)string26));
      assertFalse(string30.equals((Object)string5));
      assertFalse(string30.equals((Object)string23));
      assertFalse(string30.equals((Object)string29));
      assertFalse(string30.equals((Object)string16));
      assertFalse(string30.equals((Object)string4));
      assertFalse(string30.equals((Object)string9));
      assertFalse(string30.equals((Object)string19));
      assertFalse(string30.equals((Object)string2));
      assertFalse(string30.equals((Object)string1));
      assertFalse(string30.equals((Object)string12));
      assertFalse(string30.equals((Object)string27));
      assertFalse(string30.equals((Object)string11));
      assertFalse(string30.equals((Object)string3));
      assertFalse(string30.equals((Object)string13));
      assertFalse(string30.equals((Object)string7));
      assertFalse(string30.equals((Object)string20));
      assertFalse(string30.equals((Object)string15));
      assertFalse(string30.equals((Object)string25));
      assertFalse(string30.equals((Object)string8));
      assertFalse(string30.equals((Object)string24));
      assertNotNull(string30);
      assertEquals("class Header {\n    description: null\n    required: null\n    deprecated: null\n    allowEmptyValue: null\n    style: null\n    explode: null\n    schema: null\n    examples: null\n    example: null\n    content: null\n    $ref: null\n}", string30);
      
      Map<String, Callback> map0 = operation0.getCallbacks();
      assertNull(operation0.getSummary());
      assertNull(operation0.getOperationId());
      assertNull(operation0.getDeprecated());
      assertNull(operation0.getDescription());
      assertNull(map0);
      
      HashMap<String, Example> hashMap0 = new HashMap<String, Example>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Components components3 = components0.examples(hashMap0);
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertSame(components3, components1);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(components3);
      
      Components components4 = components2.callbacks(map0);
      assertSame(components4, components0);
      assertSame(components4, components2);
      assertSame(components4, components1);
      assertSame(components4, components3);
      assertSame(components0, components3);
      assertSame(components0, components4);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertNotSame(string29, string17);
      assertNotSame(string29, string24);
      assertNotSame(string29, string4);
      assertNotSame(string29, string25);
      assertNotSame(string29, string14);
      assertNotSame(string29, string30);
      assertNotSame(string29, string6);
      assertNotSame(string29, string18);
      assertNotSame(string29, string19);
      assertNotSame(string29, string10);
      assertNotSame(string29, string22);
      assertNotSame(string29, string28);
      assertNotSame(string29, string12);
      assertNotSame(string29, string27);
      assertNotSame(string29, string16);
      assertNotSame(string29, string3);
      assertNotSame(string29, string5);
      assertNotSame(string29, string23);
      assertNotSame(string29, string20);
      assertNotSame(string29, string2);
      assertNotSame(string29, string9);
      assertNotSame(string29, string11);
      assertNotSame(string29, string0);
      assertNotSame(string29, string15);
      assertNotSame(string29, string8);
      assertNotSame(string29, string26);
      assertNotSame(string29, string21);
      assertNotSame(string29, string7);
      assertNotSame(string29, string13);
      assertNotSame(string29, string1);
      assertSame(components1, components4);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertSame(components2, components4);
      assertSame(components2, components3);
      assertNull(header0.getDeprecated());
      assertNull(header0.getExplode());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getRequired());
      assertNull(header0.getDescription());
      assertNull(header0.get$ref());
      assertNull(header0.getExample());
      assertNull(header0.getStyle());
      assertNull(schema1.getPattern());
      assertNull(schema1.getFormat());
      assertNull(schema1.getDeprecated());
      assertNull(schema1.getTitle());
      assertNull(schema1.get$ref());
      assertNull(schema1.getMaxLength());
      assertNull(schema1.getExclusiveMinimum());
      assertNull(schema1.getMinItems());
      assertNull(schema1.getMaxItems());
      assertNull(schema1.getName());
      assertNull(schema1.getMinLength());
      assertNull(schema1.getExclusiveMaximum());
      assertNull(schema1.getMaxProperties());
      assertNull(schema1.getMinProperties());
      assertNull(schema1.getReadOnly());
      assertNull(schema1.getNullable());
      assertNull(schema1.getWriteOnly());
      assertNull(schema1.getUniqueItems());
      assertNull(schema1.getDescription());
      assertNull(schema1.getType());
      assertNull(operation0.getSummary());
      assertNull(operation0.getOperationId());
      assertNull(operation0.getDeprecated());
      assertNull(operation0.getDescription());
      assertFalse(string29.equals((Object)string17));
      assertFalse(string29.equals((Object)string24));
      assertFalse(string29.equals((Object)string4));
      assertFalse(string29.equals((Object)string25));
      assertFalse(string29.equals((Object)string14));
      assertFalse(string29.equals((Object)string30));
      assertFalse(string29.equals((Object)string6));
      assertFalse(string29.equals((Object)string18));
      assertFalse(string29.equals((Object)string19));
      assertFalse(string29.equals((Object)string10));
      assertFalse(string29.equals((Object)string22));
      assertFalse(string29.equals((Object)string28));
      assertFalse(string29.equals((Object)string12));
      assertFalse(string29.equals((Object)string27));
      assertFalse(string29.equals((Object)string16));
      assertFalse(string29.equals((Object)string3));
      assertFalse(string29.equals((Object)string5));
      assertFalse(string29.equals((Object)string23));
      assertFalse(string29.equals((Object)string20));
      assertFalse(string29.equals((Object)string2));
      assertFalse(string29.equals((Object)string9));
      assertFalse(string29.equals((Object)string11));
      assertFalse(string29.equals((Object)string0));
      assertFalse(string29.equals((Object)string15));
      assertFalse(string29.equals((Object)string8));
      assertFalse(string29.equals((Object)string26));
      assertFalse(string29.equals((Object)string21));
      assertFalse(string29.equals((Object)string7));
      assertFalse(string29.equals((Object)string13));
      assertFalse(string29.equals((Object)string1));
      assertNotNull(components4);
      
      Map<String, Example> map1 = null;
      Components components5 = components4.examples(map1);
      assertSame(components4, components5);
      assertSame(components4, components0);
      assertSame(components4, components2);
      assertSame(components4, components1);
      assertSame(components4, components3);
      assertSame(components5, components3);
      assertSame(components5, components2);
      assertSame(components5, components0);
      assertSame(components5, components4);
      assertSame(components5, components1);
      assertSame(components0, components3);
      assertSame(components0, components4);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components0, components5);
      assertNotSame(string29, string17);
      assertNotSame(string29, string24);
      assertNotSame(string29, string4);
      assertNotSame(string29, string25);
      assertNotSame(string29, string14);
      assertNotSame(string29, string30);
      assertNotSame(string29, string6);
      assertNotSame(string29, string18);
      assertNotSame(string29, string19);
      assertNotSame(string29, string10);
      assertNotSame(string29, string22);
      assertNotSame(string29, string28);
      assertNotSame(string29, string12);
      assertNotSame(string29, string27);
      assertNotSame(string29, string16);
      assertNotSame(string29, string3);
      assertNotSame(string29, string5);
      assertNotSame(string29, string23);
      assertNotSame(string29, string20);
      assertNotSame(string29, string2);
      assertNotSame(string29, string9);
      assertNotSame(string29, string11);
      assertNotSame(string29, string0);
      assertNotSame(string29, string15);
      assertNotSame(string29, string8);
      assertNotSame(string29, string26);
      assertNotSame(string29, string21);
      assertNotSame(string29, string7);
      assertNotSame(string29, string13);
      assertNotSame(string29, string1);
      assertSame(components1, components4);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertSame(components1, components5);
      assertSame(components1, components0);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertSame(components2, components4);
      assertSame(components2, components3);
      assertSame(components2, components5);
      assertNull(header0.getDeprecated());
      assertNull(header0.getExplode());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getRequired());
      assertNull(header0.getDescription());
      assertNull(header0.get$ref());
      assertNull(header0.getExample());
      assertNull(header0.getStyle());
      assertNull(schema1.getPattern());
      assertNull(schema1.getFormat());
      assertNull(schema1.getDeprecated());
      assertNull(schema1.getTitle());
      assertNull(schema1.get$ref());
      assertNull(schema1.getMaxLength());
      assertNull(schema1.getExclusiveMinimum());
      assertNull(schema1.getMinItems());
      assertNull(schema1.getMaxItems());
      assertNull(schema1.getName());
      assertNull(schema1.getMinLength());
      assertNull(schema1.getExclusiveMaximum());
      assertNull(schema1.getMaxProperties());
      assertNull(schema1.getMinProperties());
      assertNull(schema1.getReadOnly());
      assertNull(schema1.getNullable());
      assertNull(schema1.getWriteOnly());
      assertNull(schema1.getUniqueItems());
      assertNull(schema1.getDescription());
      assertNull(schema1.getType());
      assertNull(operation0.getSummary());
      assertNull(operation0.getOperationId());
      assertNull(operation0.getDeprecated());
      assertNull(operation0.getDescription());
      assertFalse(string29.equals((Object)string17));
      assertFalse(string29.equals((Object)string24));
      assertFalse(string29.equals((Object)string4));
      assertFalse(string29.equals((Object)string25));
      assertFalse(string29.equals((Object)string14));
      assertFalse(string29.equals((Object)string30));
      assertFalse(string29.equals((Object)string6));
      assertFalse(string29.equals((Object)string18));
      assertFalse(string29.equals((Object)string19));
      assertFalse(string29.equals((Object)string10));
      assertFalse(string29.equals((Object)string22));
      assertFalse(string29.equals((Object)string28));
      assertFalse(string29.equals((Object)string12));
      assertFalse(string29.equals((Object)string27));
      assertFalse(string29.equals((Object)string16));
      assertFalse(string29.equals((Object)string3));
      assertFalse(string29.equals((Object)string5));
      assertFalse(string29.equals((Object)string23));
      assertFalse(string29.equals((Object)string20));
      assertFalse(string29.equals((Object)string2));
      assertFalse(string29.equals((Object)string9));
      assertFalse(string29.equals((Object)string11));
      assertFalse(string29.equals((Object)string0));
      assertFalse(string29.equals((Object)string15));
      assertFalse(string29.equals((Object)string8));
      assertFalse(string29.equals((Object)string26));
      assertFalse(string29.equals((Object)string21));
      assertFalse(string29.equals((Object)string7));
      assertFalse(string29.equals((Object)string13));
      assertFalse(string29.equals((Object)string1));
      assertNotNull(components5);
      
      Optional<ApiResponses> optional4 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components5);
      assertSame(components4, components5);
      assertSame(components4, components0);
      assertSame(components4, components2);
      assertSame(components4, components1);
      assertSame(components4, components3);
      assertSame(components5, components3);
      assertSame(components5, components2);
      assertSame(components5, components0);
      assertSame(components5, components4);
      assertSame(components5, components1);
      assertSame(components0, components3);
      assertSame(components0, components4);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components0, components5);
      assertNotSame(string29, string17);
      assertNotSame(string29, string24);
      assertNotSame(string29, string4);
      assertNotSame(string29, string25);
      assertNotSame(string29, string14);
      assertNotSame(string29, string30);
      assertNotSame(string29, string6);
      assertNotSame(string29, string18);
      assertNotSame(string29, string19);
      assertNotSame(string29, string10);
      assertNotSame(string29, string22);
      assertNotSame(string29, string28);
      assertNotSame(string29, string12);
      assertNotSame(string29, string27);
      assertNotSame(string29, string16);
      assertNotSame(string29, string3);
      assertNotSame(string29, string5);
      assertNotSame(string29, string23);
      assertNotSame(string29, string20);
      assertNotSame(string29, string2);
      assertNotSame(string29, string9);
      assertNotSame(string29, string11);
      assertNotSame(string29, string0);
      assertNotSame(string29, string15);
      assertNotSame(string29, string8);
      assertNotSame(string29, string26);
      assertNotSame(string29, string21);
      assertNotSame(string29, string7);
      assertNotSame(string29, string13);
      assertNotSame(string29, string1);
      assertSame(components1, components4);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertSame(components1, components5);
      assertSame(components1, components0);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertSame(components2, components4);
      assertSame(components2, components3);
      assertSame(components2, components5);
      assertNull(header0.getDeprecated());
      assertNull(header0.getExplode());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getRequired());
      assertNull(header0.getDescription());
      assertNull(header0.get$ref());
      assertNull(header0.getExample());
      assertNull(header0.getStyle());
      assertNull(schema1.getPattern());
      assertNull(schema1.getFormat());
      assertNull(schema1.getDeprecated());
      assertNull(schema1.getTitle());
      assertNull(schema1.get$ref());
      assertNull(schema1.getMaxLength());
      assertNull(schema1.getExclusiveMinimum());
      assertNull(schema1.getMinItems());
      assertNull(schema1.getMaxItems());
      assertNull(schema1.getName());
      assertNull(schema1.getMinLength());
      assertNull(schema1.getExclusiveMaximum());
      assertNull(schema1.getMaxProperties());
      assertNull(schema1.getMinProperties());
      assertNull(schema1.getReadOnly());
      assertNull(schema1.getNullable());
      assertNull(schema1.getWriteOnly());
      assertNull(schema1.getUniqueItems());
      assertNull(schema1.getDescription());
      assertNull(schema1.getType());
      assertNull(operation0.getSummary());
      assertNull(operation0.getOperationId());
      assertNull(operation0.getDeprecated());
      assertNull(operation0.getDescription());
      assertFalse(string29.equals((Object)string17));
      assertFalse(string29.equals((Object)string24));
      assertFalse(string29.equals((Object)string4));
      assertFalse(string29.equals((Object)string25));
      assertFalse(string29.equals((Object)string14));
      assertFalse(string29.equals((Object)string30));
      assertFalse(string29.equals((Object)string6));
      assertFalse(string29.equals((Object)string18));
      assertFalse(string29.equals((Object)string19));
      assertFalse(string29.equals((Object)string10));
      assertFalse(string29.equals((Object)string22));
      assertFalse(string29.equals((Object)string28));
      assertFalse(string29.equals((Object)string12));
      assertFalse(string29.equals((Object)string27));
      assertFalse(string29.equals((Object)string16));
      assertFalse(string29.equals((Object)string3));
      assertFalse(string29.equals((Object)string5));
      assertFalse(string29.equals((Object)string23));
      assertFalse(string29.equals((Object)string20));
      assertFalse(string29.equals((Object)string2));
      assertFalse(string29.equals((Object)string9));
      assertFalse(string29.equals((Object)string11));
      assertFalse(string29.equals((Object)string0));
      assertFalse(string29.equals((Object)string15));
      assertFalse(string29.equals((Object)string8));
      assertFalse(string29.equals((Object)string26));
      assertFalse(string29.equals((Object)string21));
      assertFalse(string29.equals((Object)string7));
      assertFalse(string29.equals((Object)string13));
      assertFalse(string29.equals((Object)string1));
      assertEquals(2, apiResponseArray0.length);
      assertNotNull(optional4);
  }

  @Test(timeout = 11000)
  public void test094()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = "java.lang";
      stringArray0[0] = string0;
      String string1 = "[value=%s,content=%s]";
      stringArray0[1] = string1;
      String string2 = "oauth2";
      stringArray0[2] = string2;
      String string3 = "ZPt/X1mR#Y>kps!";
      stringArray0[3] = string3;
      Optional<Set<Tag>> optional0 = OperationParser.getTags(stringArray0);
      assertEquals(4, stringArray0.length);
      assertNotNull(optional0);
      
      Link[] linkArray0 = new Link[0];
      Map<String, io.swagger.oas.models.links.Link> map0 = OperationParser.getLinks(linkArray0);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals(0, linkArray0.length);
      assertNotNull(map0);
      
      String string4 = "#_Pr!Kqhkaf~jD)";
      String string5 = "io.swagge";
      String string6 = "4)p#+,.C@N2akIb";
      String string7 = "F";
      String string8 = "=^Q^kpg9";
      String string9 = "io.swagge";
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn(string6, string8).when(contact0).email();
      doReturn(string1, string1).when(contact0).name();
      doReturn(string7, string9).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional1 = OperationParser.getContact(contact0);
      assertNotSame(string8, string7);
      assertNotSame(string8, string1);
      assertNotSame(string8, string3);
      assertNotSame(string8, string5);
      assertNotSame(string8, string6);
      assertNotSame(string8, string2);
      assertNotSame(string8, string4);
      assertNotSame(string8, string0);
      assertNotSame(string8, string9);
      assertSame(string9, string5);
      assertNotSame(string9, string4);
      assertNotSame(string9, string7);
      assertNotSame(string9, string8);
      assertNotSame(string9, string6);
      assertNotSame(string9, string2);
      assertNotSame(string9, string0);
      assertNotSame(string9, string1);
      assertNotSame(string9, string3);
      assertNotSame(string1, string7);
      assertNotSame(string1, string5);
      assertNotSame(string1, string6);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string9);
      assertNotSame(string1, string4);
      assertNotSame(string1, string2);
      assertNotSame(string1, string8);
      assertNotSame(string6, string4);
      assertNotSame(string6, string1);
      assertNotSame(string6, string3);
      assertNotSame(string6, string9);
      assertNotSame(string6, string0);
      assertNotSame(string6, string7);
      assertNotSame(string6, string8);
      assertNotSame(string6, string5);
      assertNotSame(string6, string2);
      assertNotSame(string7, string4);
      assertNotSame(string7, string8);
      assertNotSame(string7, string5);
      assertNotSame(string7, string6);
      assertNotSame(string7, string0);
      assertNotSame(string7, string2);
      assertNotSame(string7, string1);
      assertNotSame(string7, string3);
      assertNotSame(string7, string9);
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string9));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string1.equals((Object)string7));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string9));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string8));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string9));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string7));
      assertFalse(string6.equals((Object)string8));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string8));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string9));
      assertNotNull(optional1);
      
      String string10 = "YIIo6lLBgm^vT";
      String string11 = "<%";
      ServerVariable[] serverVariableArray0 = new ServerVariable[4];
      ServerVariable serverVariable0 = mock(ServerVariable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null).when(serverVariable0).description();
      doReturn((String) null, (String) null, (String) null, (String) null).when(serverVariable0).name();
      serverVariableArray0[0] = serverVariable0;
      serverVariableArray0[1] = serverVariableArray0[0];
      serverVariableArray0[2] = serverVariableArray0[1];
      serverVariableArray0[3] = serverVariableArray0[2];
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string3, string9).when(server0).description();
      doReturn(string10, string11).when(server0).url();
      doReturn(serverVariableArray0).when(server0).variables();
      Optional<io.swagger.oas.models.servers.Server> optional2 = OperationParser.getServer(server0);
      assertSame(string9, string5);
      assertNotSame(string9, string4);
      assertNotSame(string9, string11);
      assertNotSame(string9, string10);
      assertNotSame(string9, string7);
      assertNotSame(string9, string8);
      assertNotSame(string9, string6);
      assertNotSame(string9, string2);
      assertNotSame(string9, string0);
      assertNotSame(string9, string1);
      assertNotSame(string9, string3);
      assertNotSame(string10, string7);
      assertNotSame(string10, string8);
      assertNotSame(string10, string5);
      assertNotSame(string10, string6);
      assertNotSame(string10, string2);
      assertNotSame(string10, string1);
      assertNotSame(string10, string3);
      assertNotSame(string10, string9);
      assertNotSame(string10, string0);
      assertNotSame(string10, string4);
      assertNotSame(string10, string11);
      assertNotSame(string11, string9);
      assertNotSame(string11, string1);
      assertNotSame(string11, string3);
      assertNotSame(string11, string8);
      assertNotSame(string11, string0);
      assertNotSame(string11, string10);
      assertNotSame(string11, string2);
      assertNotSame(string11, string6);
      assertNotSame(string11, string7);
      assertNotSame(string11, string5);
      assertNotSame(string11, string4);
      assertNotSame(string3, string7);
      assertNotSame(string3, string5);
      assertNotSame(string3, string6);
      assertNotSame(string3, string1);
      assertNotSame(string3, string9);
      assertNotSame(string3, string0);
      assertNotSame(string3, string4);
      assertNotSame(string3, string10);
      assertNotSame(string3, string2);
      assertNotSame(string3, string8);
      assertNotSame(string3, string11);
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string11));
      assertFalse(string9.equals((Object)string10));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string11));
      assertFalse(string11.equals((Object)string9));
      assertFalse(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string8));
      assertFalse(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string7));
      assertFalse(string11.equals((Object)string5));
      assertFalse(string11.equals((Object)string4));
      assertFalse(string3.equals((Object)string7));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string6));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string9));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string10));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string8));
      assertFalse(string3.equals((Object)string11));
      assertEquals(4, serverVariableArray0.length);
      assertNotNull(optional2);
      
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(license0).name();
      doReturn((String) null).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional3 = OperationParser.getLicense(license0);
      assertNotNull(optional3);
  }

  @Test(timeout = 11000)
  public void test095()  throws Throwable  {
      boolean boolean0 = false;
      Content[] contentArray0 = new Content[3];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      String string0 = null;
      Explode explode0 = Explode.DEFAULT;
      Explode explode1 = Explode.DEFAULT;
      Explode explode2 = Explode.DEFAULT;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema0).implementation();
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0).when(parameter0).allowEmptyValue();
      doReturn(boolean0).when(parameter0).allowReserved();
      doReturn(boolean0).when(parameter0).deprecated();
      doReturn(string0).when(parameter0).description();
      doReturn(explode0, explode1, explode2).when(parameter0).explode();
      doReturn(string0).when(parameter0).in();
      doReturn(string0).when(parameter0).name();
      doReturn(boolean0).when(parameter0).required();
      doReturn(schema0, schema0, (Schema) null).when(parameter0).schema();
      doReturn(string0).when(parameter0).style();
      Components components0 = new Components();
      assertNotNull(components0);
      
      String string1 = "=]?x@amV=cTo{";
      RequestBody requestBody0 = new RequestBody();
      assertNull(requestBody0.get$ref());
      assertNull(requestBody0.getDescription());
      assertNull(requestBody0.getRequired());
      assertNotNull(requestBody0);
      
      Components components1 = components0.addRequestBodies(string1, requestBody0);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertNull(requestBody0.get$ref());
      assertNull(requestBody0.getDescription());
      assertNull(requestBody0.getRequired());
      assertNotNull(components1);
      
      SecurityScheme securityScheme0 = new SecurityScheme();
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNotNull(securityScheme0);
      
      Components components2 = components1.addSecuritySchemes(string1, securityScheme0);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(requestBody0.get$ref());
      assertNull(requestBody0.getDescription());
      assertNull(requestBody0.getRequired());
      assertNotNull(components2);
      
      Map<String, io.swagger.oas.models.media.Schema> map0 = (Map<String, io.swagger.oas.models.media.Schema>)components2.getSchemas();
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(requestBody0.get$ref());
      assertNull(requestBody0.getDescription());
      assertNull(requestBody0.getRequired());
      assertNull(map0);
      
      Components components3 = components2.schemas(map0);
      assertSame(components2, components3);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertSame(components3, components2);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components1, components3);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(requestBody0.get$ref());
      assertNull(requestBody0.getDescription());
      assertNull(requestBody0.getRequired());
      assertNotNull(components3);
      
      Map<String, io.swagger.oas.models.parameters.Parameter> map1 = components1.getParameters();
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components1, components3);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertNull(requestBody0.get$ref());
      assertNull(requestBody0.getDescription());
      assertNull(requestBody0.getRequired());
      assertNull(map1);
      
      MediaType mediaType0 = new MediaType();
      assertNull(mediaType0.getExample());
      assertNotNull(mediaType0);
      
      Example example0 = new Example();
      assertNull(example0.get$ref());
      assertNull(example0.getExternalValue());
      assertNull(example0.getDescription());
      assertNull(example0.getSummary());
      assertNotNull(example0);
      
      Example example1 = example0.value(string1);
      assertSame(example0, example1);
      assertSame(example1, example0);
      assertNull(example0.get$ref());
      assertNull(example0.getExternalValue());
      assertNull(example0.getDescription());
      assertNull(example0.getSummary());
      assertNull(example1.get$ref());
      assertNull(example1.getSummary());
      assertNull(example1.getExternalValue());
      assertNull(example1.getDescription());
      assertNotNull(example1);
      
      MediaType mediaType1 = mediaType0.addExamples(string1, example1);
      assertSame(mediaType0, mediaType1);
      assertSame(example0, example1);
      assertSame(example1, example0);
      assertSame(mediaType1, mediaType0);
      assertNull(mediaType0.getExample());
      assertNull(example0.get$ref());
      assertNull(example0.getExternalValue());
      assertNull(example0.getDescription());
      assertNull(example0.getSummary());
      assertNull(example1.get$ref());
      assertNull(example1.getSummary());
      assertNull(example1.getExternalValue());
      assertNull(example1.getDescription());
      assertNull(mediaType1.getExample());
      assertNotNull(mediaType1);
      
      Map<String, Example> map2 = mediaType1.getExamples();
      assertSame(mediaType0, mediaType1);
      assertSame(example0, example1);
      assertSame(example1, example0);
      assertSame(mediaType1, mediaType0);
      assertNull(mediaType0.getExample());
      assertNull(example0.get$ref());
      assertNull(example0.getExternalValue());
      assertNull(example0.getDescription());
      assertNull(example0.getSummary());
      assertNull(example1.get$ref());
      assertNull(example1.getSummary());
      assertNull(example1.getExternalValue());
      assertNull(example1.getDescription());
      assertNull(mediaType1.getExample());
      assertEquals(1, map2.size());
      assertFalse(map2.isEmpty());
      assertNotNull(map2);
      
      Components components4 = components2.examples(map2);
      assertSame(components2, components3);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertSame(components2, components4);
      assertSame(mediaType0, mediaType1);
      assertSame(example0, example1);
      assertSame(example1, example0);
      assertSame(mediaType1, mediaType0);
      assertSame(components4, components0);
      assertSame(components4, components1);
      assertSame(components4, components2);
      assertSame(components4, components3);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertSame(components0, components4);
      assertSame(components0, components2);
      assertSame(components1, components3);
      assertSame(components1, components4);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(mediaType0.getExample());
      assertNull(example0.get$ref());
      assertNull(example0.getExternalValue());
      assertNull(example0.getDescription());
      assertNull(example0.getSummary());
      assertNull(example1.get$ref());
      assertNull(example1.getSummary());
      assertNull(example1.getExternalValue());
      assertNull(example1.getDescription());
      assertNull(mediaType1.getExample());
      assertEquals(1, map2.size());
      assertFalse(map2.isEmpty());
      assertNull(requestBody0.get$ref());
      assertNull(requestBody0.getDescription());
      assertNull(requestBody0.getRequired());
      assertNotNull(components4);
      
      Components components5 = components3.parameters(map1);
      assertSame(components2, components5);
      assertSame(components2, components3);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertSame(components2, components4);
      assertSame(components3, components5);
      assertSame(components3, components4);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertSame(components3, components2);
      assertSame(components5, components3);
      assertSame(components5, components0);
      assertSame(components5, components4);
      assertSame(components5, components2);
      assertSame(components5, components1);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertSame(components0, components5);
      assertSame(components0, components4);
      assertSame(components0, components2);
      assertSame(components1, components3);
      assertSame(components1, components5);
      assertSame(components1, components4);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(requestBody0.get$ref());
      assertNull(requestBody0.getDescription());
      assertNull(requestBody0.getRequired());
      assertNotNull(components5);
      
      // Undeclared exception!
      try { 
        OperationParser.getParameter(parameter0, components5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test096()  throws Throwable  {
      Link[] linkArray0 = new Link[3];
      String string0 = "{<gr'F";
      String string1 = ")I\">8{";
      String string2 = "*/*";
      String string3 = "";
      String string4 = "QVuW|@/";
      Link link0 = mock(Link.class, new ViolatedAssumptionAnswer());
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      Map<String, io.swagger.oas.models.links.Link> map0 = OperationParser.getLinks(linkArray0);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals(3, linkArray0.length);
      assertNotNull(map0);
      
      MediaType mediaType0 = new MediaType();
      assertNull(mediaType0.getExample());
      assertNotNull(mediaType0);
      
      io.swagger.oas.models.media.Schema<io.swagger.oas.models.servers.Server> schema0 = new io.swagger.oas.models.media.Schema<io.swagger.oas.models.servers.Server>();
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getMinItems());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getPattern());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.get$ref());
      assertNull(schema0.getName());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getTitle());
      assertNull(schema0.getNullable());
      assertNull(schema0.getFormat());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getDescription());
      assertNull(schema0.getType());
      assertNull(schema0.getUniqueItems());
      assertNotNull(schema0);
      
      MediaType mediaType1 = mediaType0.schema(schema0);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType1, mediaType0);
      assertNull(mediaType0.getExample());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getMinItems());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getPattern());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.get$ref());
      assertNull(schema0.getName());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getTitle());
      assertNull(schema0.getNullable());
      assertNull(schema0.getFormat());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getDescription());
      assertNull(schema0.getType());
      assertNull(schema0.getUniqueItems());
      assertNull(mediaType1.getExample());
      assertNotNull(mediaType1);
      
      String string5 = ".;Ugr5#";
      Encoding encoding0 = new Encoding();
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getStyle());
      assertNull(encoding0.getAllowReserved());
      assertNull(encoding0.getExplode());
      assertNotNull(encoding0);
      
      MediaType mediaType2 = mediaType1.addEncoding(string5, encoding0);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType0, mediaType2);
      assertSame(mediaType1, mediaType0);
      assertSame(mediaType1, mediaType2);
      assertNotSame(string5, string4);
      assertNotSame(string5, string0);
      assertNotSame(string5, string1);
      assertNotSame(string5, string2);
      assertNotSame(string5, string3);
      assertSame(mediaType2, mediaType0);
      assertSame(mediaType2, mediaType1);
      assertNull(mediaType0.getExample());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getMinItems());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getPattern());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.get$ref());
      assertNull(schema0.getName());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getTitle());
      assertNull(schema0.getNullable());
      assertNull(schema0.getFormat());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getDescription());
      assertNull(schema0.getType());
      assertNull(schema0.getUniqueItems());
      assertNull(mediaType1.getExample());
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getStyle());
      assertNull(encoding0.getAllowReserved());
      assertNull(encoding0.getExplode());
      assertNull(mediaType2.getExample());
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(mediaType2);
      
      Example example0 = new Example();
      assertNull(example0.getSummary());
      assertNull(example0.getDescription());
      assertNull(example0.getExternalValue());
      assertNull(example0.get$ref());
      assertNotNull(example0);
      
      Map<String, Example> map1 = null;
      MediaType mediaType3 = mediaType1.examples(map1);
      assertSame(mediaType3, mediaType1);
      assertSame(mediaType3, mediaType0);
      assertSame(mediaType3, mediaType2);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType0, mediaType3);
      assertSame(mediaType0, mediaType2);
      assertSame(mediaType1, mediaType0);
      assertSame(mediaType1, mediaType2);
      assertSame(mediaType1, mediaType3);
      assertNull(mediaType3.getExample());
      assertNull(mediaType0.getExample());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getMinItems());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getPattern());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.get$ref());
      assertNull(schema0.getName());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getTitle());
      assertNull(schema0.getNullable());
      assertNull(schema0.getFormat());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getDescription());
      assertNull(schema0.getType());
      assertNull(schema0.getUniqueItems());
      assertNull(mediaType1.getExample());
      assertNotNull(mediaType3);
      
      Example example1 = example0.externalValue(string5);
      assertSame(example0, example1);
      assertSame(example1, example0);
      assertNotSame(string5, string4);
      assertNotSame(string5, string0);
      assertNotSame(string5, string1);
      assertNotSame(string5, string2);
      assertNotSame(string5, string3);
      assertNull(example0.getSummary());
      assertNull(example0.getDescription());
      assertNull(example0.get$ref());
      assertEquals(".;Ugr5#", example0.getExternalValue());
      assertNull(example1.get$ref());
      assertNull(example1.getSummary());
      assertNull(example1.getDescription());
      assertEquals(".;Ugr5#", example1.getExternalValue());
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(example1);
      
      MediaType mediaType4 = mediaType2.addExamples(string5, example1);
      assertSame(example0, example1);
      assertSame(example1, example0);
      assertSame(mediaType4, mediaType1);
      assertSame(mediaType4, mediaType2);
      assertSame(mediaType4, mediaType3);
      assertSame(mediaType4, mediaType0);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType0, mediaType3);
      assertSame(mediaType0, mediaType4);
      assertSame(mediaType0, mediaType2);
      assertSame(mediaType1, mediaType0);
      assertSame(mediaType1, mediaType4);
      assertSame(mediaType1, mediaType2);
      assertSame(mediaType1, mediaType3);
      assertNotSame(string5, string4);
      assertNotSame(string5, string0);
      assertNotSame(string5, string1);
      assertNotSame(string5, string2);
      assertNotSame(string5, string3);
      assertSame(mediaType2, mediaType3);
      assertSame(mediaType2, mediaType0);
      assertSame(mediaType2, mediaType1);
      assertSame(mediaType2, mediaType4);
      assertNull(example0.getSummary());
      assertNull(example0.getDescription());
      assertNull(example0.get$ref());
      assertEquals(".;Ugr5#", example0.getExternalValue());
      assertNull(example1.get$ref());
      assertNull(example1.getSummary());
      assertNull(example1.getDescription());
      assertEquals(".;Ugr5#", example1.getExternalValue());
      assertNull(mediaType4.getExample());
      assertNull(mediaType0.getExample());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getMinItems());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getPattern());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.get$ref());
      assertNull(schema0.getName());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getTitle());
      assertNull(schema0.getNullable());
      assertNull(schema0.getFormat());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getDescription());
      assertNull(schema0.getType());
      assertNull(schema0.getUniqueItems());
      assertNull(mediaType1.getExample());
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getStyle());
      assertNull(encoding0.getAllowReserved());
      assertNull(encoding0.getExplode());
      assertNull(mediaType2.getExample());
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(mediaType4);
      
      HashMap<String, Example> hashMap0 = new HashMap<String, Example>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      MediaType mediaType5 = mediaType4.examples(hashMap0);
      assertSame(example0, example1);
      assertSame(example1, example0);
      assertSame(mediaType4, mediaType1);
      assertSame(mediaType4, mediaType2);
      assertSame(mediaType4, mediaType3);
      assertSame(mediaType4, mediaType5);
      assertSame(mediaType4, mediaType0);
      assertSame(mediaType5, mediaType4);
      assertSame(mediaType5, mediaType1);
      assertSame(mediaType5, mediaType0);
      assertSame(mediaType5, mediaType2);
      assertSame(mediaType5, mediaType3);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType0, mediaType3);
      assertSame(mediaType0, mediaType5);
      assertSame(mediaType0, mediaType4);
      assertSame(mediaType0, mediaType2);
      assertSame(mediaType1, mediaType0);
      assertSame(mediaType1, mediaType4);
      assertSame(mediaType1, mediaType5);
      assertSame(mediaType1, mediaType2);
      assertSame(mediaType1, mediaType3);
      assertNotSame(string5, string4);
      assertNotSame(string5, string0);
      assertNotSame(string5, string1);
      assertNotSame(string5, string2);
      assertNotSame(string5, string3);
      assertSame(mediaType2, mediaType3);
      assertSame(mediaType2, mediaType0);
      assertSame(mediaType2, mediaType1);
      assertSame(mediaType2, mediaType5);
      assertSame(mediaType2, mediaType4);
      assertNull(example0.getSummary());
      assertNull(example0.getDescription());
      assertNull(example0.get$ref());
      assertEquals(".;Ugr5#", example0.getExternalValue());
      assertNull(example1.get$ref());
      assertNull(example1.getSummary());
      assertNull(example1.getDescription());
      assertEquals(".;Ugr5#", example1.getExternalValue());
      assertNull(mediaType4.getExample());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(mediaType5.getExample());
      assertNull(mediaType0.getExample());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getMinItems());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getPattern());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.get$ref());
      assertNull(schema0.getName());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getTitle());
      assertNull(schema0.getNullable());
      assertNull(schema0.getFormat());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getDescription());
      assertNull(schema0.getType());
      assertNull(schema0.getUniqueItems());
      assertNull(mediaType1.getExample());
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getStyle());
      assertNull(encoding0.getAllowReserved());
      assertNull(encoding0.getExplode());
      assertNull(mediaType2.getExample());
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(mediaType5);
      
      String string6 = "";
      MediaType mediaType6 = mediaType0.example(string6);
      assertNotSame(string6, string0);
      assertNotSame(string6, string2);
      assertNotSame(string6, string4);
      assertSame(string6, string3);
      assertNotSame(string6, string5);
      assertNotSame(string6, string1);
      assertSame(mediaType6, mediaType2);
      assertSame(mediaType6, mediaType0);
      assertSame(mediaType6, mediaType3);
      assertSame(mediaType6, mediaType5);
      assertSame(mediaType6, mediaType1);
      assertSame(mediaType6, mediaType4);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType0, mediaType6);
      assertSame(mediaType0, mediaType3);
      assertSame(mediaType0, mediaType5);
      assertSame(mediaType0, mediaType4);
      assertSame(mediaType0, mediaType2);
      assertEquals("", mediaType6.getExample());
      assertEquals("", mediaType0.getExample());
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(mediaType6);
      
      String string7 = "<YSV'=ZudLCa;n]";
      String string8 = "";
      String string9 = null;
      String string10 = "java.langio.swagger.oas.models.responses.ApiResponses";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn(string7, string1).when(exampleObject0).externalValue();
      doReturn(string2, string2, string2).when(exampleObject0).name();
      doReturn(string8).when(exampleObject0).summary();
      doReturn(string4, string9).when(exampleObject0).value();
      // Undeclared exception!
      try { 
        OperationParser.getMediaType(mediaType5, exampleObject0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.JsonFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test097()  throws Throwable  {
      Content[] contentArray0 = new Content[1];
      Class<String> class0 = String.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(schema0).implementation();
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(content0).mediaType();
      doReturn(schema0).when(content0).schema();
      contentArray0[0] = content0;
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      doReturn((String[]) null).when(produces0).value();
      Components components0 = new Components();
      assertNotNull(components0);
      
      HashMap<String, Example> hashMap0 = new HashMap<String, Example>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = components0.equals(object0);
      assertFalse(boolean0);
      
      Components components1 = components0.examples(hashMap0);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(components1);
      
      // Undeclared exception!
      try { 
        OperationParser.getContent(contentArray0, produces0, produces0, components0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test098()  throws Throwable  {
      Content[] contentArray0 = new Content[1];
      Class<io.swagger.oas.models.servers.Server> class0 = io.swagger.oas.models.servers.Server.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(schema0).implementation();
      String string0 = null;
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((ExampleObject[]) null).when(content0).examples();
      doReturn(string0).when(content0).mediaType();
      doReturn(schema0).when(content0).schema();
      contentArray0[0] = content0;
      String[] stringArray0 = new String[9];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      String string1 = "4B[}~bZ,M";
      stringArray0[2] = string1;
      stringArray0[3] = string0;
      LinkParameter[] linkParameterArray0 = null;
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameterArray0);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      
      stringArray0[4] = string0;
      String string2 = "";
      stringArray0[5] = string2;
      stringArray0[6] = string0;
      stringArray0[7] = string0;
      stringArray0[8] = string0;
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      doReturn(stringArray0).when(produces0).value();
      Components components0 = new Components();
      assertNotNull(components0);
      
      HashMap<String, Example> hashMap0 = new HashMap<String, Example>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = components0.equals(object0);
      assertFalse(boolean0);
      
      Components components1 = components0.examples(hashMap0);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(components1);
      
      // Undeclared exception!
      try { 
        OperationParser.getContent(contentArray0, produces0, produces0, components0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test099()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = "java.lang";
      stringArray0[0] = string0;
      String string1 = "[value=%s,content=%s]";
      stringArray0[1] = string1;
      String string2 = "oauth2";
      stringArray0[2] = string2;
      String string3 = "ZPt/X1mR#Y>kps!";
      stringArray0[3] = string3;
      Optional<Set<Tag>> optional0 = OperationParser.getTags(stringArray0);
      assertEquals(4, stringArray0.length);
      assertNotNull(optional0);
      
      Link[] linkArray0 = new Link[0];
      Map<String, io.swagger.oas.models.links.Link> map0 = OperationParser.getLinks(linkArray0);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals(0, linkArray0.length);
      assertNotNull(map0);
      
      String string4 = "#_Pr!Kqhkaf~jD)";
      String string5 = "io.swagge";
      String string6 = "4)p#+,.C@N2akIb";
      String string7 = "F";
      String string8 = "=^Q^kpg9";
      String string9 = "io.swagge";
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn(string6, string8).when(contact0).email();
      doReturn(string1, string1).when(contact0).name();
      doReturn(string7, string9).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional1 = OperationParser.getContact(contact0);
      assertNotSame(string8, string7);
      assertNotSame(string8, string2);
      assertNotSame(string8, string4);
      assertNotSame(string8, string5);
      assertNotSame(string8, string3);
      assertNotSame(string8, string0);
      assertNotSame(string8, string1);
      assertNotSame(string8, string6);
      assertNotSame(string8, string9);
      assertNotSame(string9, string7);
      assertNotSame(string9, string2);
      assertNotSame(string9, string4);
      assertNotSame(string9, string8);
      assertSame(string9, string5);
      assertNotSame(string9, string3);
      assertNotSame(string9, string0);
      assertNotSame(string9, string1);
      assertNotSame(string9, string6);
      assertNotSame(string1, string7);
      assertNotSame(string1, string4);
      assertNotSame(string1, string8);
      assertNotSame(string1, string9);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string5);
      assertNotSame(string1, string6);
      assertNotSame(string6, string7);
      assertNotSame(string6, string4);
      assertNotSame(string6, string8);
      assertNotSame(string6, string1);
      assertNotSame(string6, string5);
      assertNotSame(string6, string2);
      assertNotSame(string6, string3);
      assertNotSame(string6, string0);
      assertNotSame(string6, string9);
      assertNotSame(string7, string3);
      assertNotSame(string7, string0);
      assertNotSame(string7, string6);
      assertNotSame(string7, string1);
      assertNotSame(string7, string9);
      assertNotSame(string7, string2);
      assertNotSame(string7, string4);
      assertNotSame(string7, string5);
      assertNotSame(string7, string8);
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string9));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string1.equals((Object)string7));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string8));
      assertFalse(string1.equals((Object)string9));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string6.equals((Object)string7));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string8));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string9));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string9));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string8));
      assertNotNull(optional1);
      
      String string10 = "YIIo6lLBgm^vT";
      String string11 = "<%";
      ServerVariable[] serverVariableArray0 = new ServerVariable[4];
      String string12 = "io.swagger.jaxrs2.OperationParser";
      String string13 = "java.lang";
      String string14 = "ZhnT<O";
      ServerVariable serverVariable0 = mock(ServerVariable.class, new ViolatedAssumptionAnswer());
      doReturn(string12, string13, string14, string5, (String) null).when(serverVariable0).description();
      doReturn(string2, string5, string7, string10).when(serverVariable0).name();
      serverVariableArray0[0] = serverVariable0;
      serverVariableArray0[1] = serverVariableArray0[0];
      serverVariableArray0[2] = serverVariableArray0[1];
      serverVariableArray0[3] = serverVariableArray0[2];
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string3, string9).when(server0).description();
      doReturn(string10, string11).when(server0).url();
      doReturn(serverVariableArray0).when(server0).variables();
      Optional<io.swagger.oas.models.servers.Server> optional2 = OperationParser.getServer(server0);
      assertNotSame(string9, string7);
      assertNotSame(string9, string4);
      assertNotSame(string9, string11);
      assertNotSame(string9, string14);
      assertSame(string9, string5);
      assertNotSame(string9, string3);
      assertNotSame(string9, string12);
      assertNotSame(string9, string0);
      assertNotSame(string9, string1);
      assertNotSame(string9, string6);
      assertNotSame(string9, string10);
      assertNotSame(string9, string2);
      assertNotSame(string9, string8);
      assertNotSame(string9, string13);
      assertNotSame(string10, string4);
      assertNotSame(string10, string1);
      assertNotSame(string10, string0);
      assertNotSame(string10, string12);
      assertNotSame(string10, string5);
      assertNotSame(string10, string9);
      assertNotSame(string10, string8);
      assertNotSame(string10, string3);
      assertNotSame(string10, string6);
      assertNotSame(string10, string13);
      assertNotSame(string10, string2);
      assertNotSame(string10, string11);
      assertNotSame(string10, string7);
      assertNotSame(string10, string14);
      assertNotSame(string11, string4);
      assertNotSame(string11, string1);
      assertNotSame(string11, string0);
      assertNotSame(string11, string12);
      assertNotSame(string11, string9);
      assertNotSame(string11, string8);
      assertNotSame(string11, string5);
      assertNotSame(string11, string3);
      assertNotSame(string11, string6);
      assertNotSame(string11, string10);
      assertNotSame(string11, string13);
      assertNotSame(string11, string2);
      assertNotSame(string11, string7);
      assertNotSame(string11, string14);
      assertNotSame(string3, string6);
      assertNotSame(string3, string10);
      assertNotSame(string3, string7);
      assertNotSame(string3, string11);
      assertNotSame(string3, string13);
      assertNotSame(string3, string2);
      assertNotSame(string3, string4);
      assertNotSame(string3, string14);
      assertNotSame(string3, string0);
      assertNotSame(string3, string12);
      assertNotSame(string3, string1);
      assertNotSame(string3, string9);
      assertNotSame(string3, string5);
      assertNotSame(string3, string8);
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string11));
      assertFalse(string9.equals((Object)string14));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string12));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string10));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string13));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string12));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string13));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string11));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string14));
      assertFalse(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string12));
      assertFalse(string11.equals((Object)string9));
      assertFalse(string11.equals((Object)string8));
      assertFalse(string11.equals((Object)string5));
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string13));
      assertFalse(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string7));
      assertFalse(string11.equals((Object)string14));
      assertFalse(string3.equals((Object)string6));
      assertFalse(string3.equals((Object)string10));
      assertFalse(string3.equals((Object)string7));
      assertFalse(string3.equals((Object)string11));
      assertFalse(string3.equals((Object)string13));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string14));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string12));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string9));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string8));
      assertEquals(4, serverVariableArray0.length);
      assertNotNull(optional2);
      
      String string15 = "zlDk${";
      String string16 = "j^`1ei\\7(_$|s\"cPE~";
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(string15, (String) null).when(license0).name();
      doReturn(string16, (String) null).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional3 = OperationParser.getLicense(license0);
      assertNotSame(string15, string5);
      assertNotSame(string15, string0);
      assertNotSame(string15, string3);
      assertNotSame(string15, string8);
      assertNotSame(string15, string9);
      assertNotSame(string15, string10);
      assertNotSame(string15, string12);
      assertNotSame(string15, string11);
      assertNotSame(string15, string14);
      assertNotSame(string15, string6);
      assertNotSame(string15, string7);
      assertNotSame(string15, string1);
      assertNotSame(string15, string16);
      assertNotSame(string15, string2);
      assertNotSame(string15, string4);
      assertNotSame(string15, string13);
      assertNotSame(string16, string15);
      assertNotSame(string16, string13);
      assertNotSame(string16, string2);
      assertNotSame(string16, string4);
      assertNotSame(string16, string9);
      assertNotSame(string16, string10);
      assertNotSame(string16, string14);
      assertNotSame(string16, string12);
      assertNotSame(string16, string11);
      assertNotSame(string16, string6);
      assertNotSame(string16, string7);
      assertNotSame(string16, string1);
      assertNotSame(string16, string0);
      assertNotSame(string16, string5);
      assertNotSame(string16, string3);
      assertNotSame(string16, string8);
      assertFalse(string15.equals((Object)string5));
      assertFalse(string15.equals((Object)string0));
      assertFalse(string15.equals((Object)string3));
      assertFalse(string15.equals((Object)string8));
      assertFalse(string15.equals((Object)string9));
      assertFalse(string15.equals((Object)string10));
      assertFalse(string15.equals((Object)string12));
      assertFalse(string15.equals((Object)string11));
      assertFalse(string15.equals((Object)string14));
      assertFalse(string15.equals((Object)string6));
      assertFalse(string15.equals((Object)string7));
      assertFalse(string15.equals((Object)string1));
      assertFalse(string15.equals((Object)string16));
      assertFalse(string15.equals((Object)string2));
      assertFalse(string15.equals((Object)string4));
      assertFalse(string15.equals((Object)string13));
      assertFalse(string16.equals((Object)string15));
      assertFalse(string16.equals((Object)string13));
      assertFalse(string16.equals((Object)string2));
      assertFalse(string16.equals((Object)string4));
      assertFalse(string16.equals((Object)string9));
      assertFalse(string16.equals((Object)string10));
      assertFalse(string16.equals((Object)string14));
      assertFalse(string16.equals((Object)string12));
      assertFalse(string16.equals((Object)string11));
      assertFalse(string16.equals((Object)string6));
      assertFalse(string16.equals((Object)string7));
      assertFalse(string16.equals((Object)string1));
      assertFalse(string16.equals((Object)string0));
      assertFalse(string16.equals((Object)string5));
      assertFalse(string16.equals((Object)string3));
      assertFalse(string16.equals((Object)string8));
      assertNotNull(optional3);
      
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional4 = OperationParser.getExternalDocumentation(externalDocumentation0);
      assertNotNull(optional4);
      
      LinkParameter[] linkParameterArray0 = new LinkParameter[8];
      LinkParameter linkParameter0 = mock(LinkParameter.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(linkParameter0).name();
      linkParameterArray0[0] = linkParameter0;
      linkParameterArray0[1] = linkParameterArray0[0];
      linkParameterArray0[2] = linkParameterArray0[1];
      linkParameterArray0[3] = linkParameterArray0[2];
      linkParameterArray0[4] = linkParameterArray0[3];
      linkParameterArray0[5] = linkParameterArray0[4];
      linkParameterArray0[6] = linkParameterArray0[5];
      linkParameterArray0[7] = linkParameterArray0[6];
      Map<String, String> map1 = OperationParser.getLinkParameters(linkParameterArray0);
      assertTrue(map1.isEmpty());
      assertEquals(0, map1.size());
      assertEquals(8, linkParameterArray0.length);
      assertNotNull(map1);
  }

  @Test(timeout = 11000)
  public void test100()  throws Throwable  {
      Content[] contentArray0 = new Content[8];
      Class<Example> class0 = Example.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(schema0).implementation();
      String string0 = null;
      ExampleObject[] exampleObjectArray0 = new ExampleObject[6];
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(exampleObject0).name();
      exampleObjectArray0[0] = exampleObject0;
      exampleObjectArray0[1] = exampleObjectArray0[0];
      exampleObjectArray0[2] = exampleObjectArray0[1];
      exampleObjectArray0[3] = exampleObjectArray0[2];
      exampleObjectArray0[4] = exampleObjectArray0[2];
      exampleObjectArray0[5] = exampleObjectArray0[4];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn(exampleObjectArray0).when(content0).examples();
      doReturn(string0).when(content0).mediaType();
      doReturn(schema0, (Schema) null).when(content0).schema();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      contentArray0[3] = contentArray0[2];
      contentArray0[5] = contentArray0[2];
      contentArray0[6] = contentArray0[5];
      contentArray0[7] = contentArray0[6];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[2];
      String string1 = "2#pGH;";
      stringArray0[0] = string1;
      stringArray0[1] = string0;
      Produces produces1 = mock(Produces.class, new ViolatedAssumptionAnswer());
      doReturn(stringArray0).when(produces1).value();
      Components components0 = new Components();
      assertNotNull(components0);
      
      String string2 = "Current token not START_OBJECT (needed to unwrap root name '%s'), but %s";
      io.swagger.oas.models.media.Schema<Integer> schema1 = new io.swagger.oas.models.media.Schema<Integer>();
      assertNull(schema1.getMinItems());
      assertNull(schema1.getDeprecated());
      assertNull(schema1.getExclusiveMinimum());
      assertNull(schema1.getPattern());
      assertNull(schema1.getReadOnly());
      assertNull(schema1.getFormat());
      assertNull(schema1.getMaxItems());
      assertNull(schema1.getName());
      assertNull(schema1.getMaxProperties());
      assertNull(schema1.getWriteOnly());
      assertNull(schema1.getMinProperties());
      assertNull(schema1.getMinLength());
      assertNull(schema1.getTitle());
      assertNull(schema1.getNullable());
      assertNull(schema1.get$ref());
      assertNull(schema1.getMaxLength());
      assertNull(schema1.getDescription());
      assertNull(schema1.getType());
      assertNull(schema1.getUniqueItems());
      assertNull(schema1.getExclusiveMaximum());
      assertNotNull(schema1);
      
      Components components1 = components0.addSchemas(string2, schema1);
      assertSame(components0, components1);
      assertNotSame(string2, string1);
      assertSame(components1, components0);
      assertNull(schema1.getMinItems());
      assertNull(schema1.getDeprecated());
      assertNull(schema1.getExclusiveMinimum());
      assertNull(schema1.getPattern());
      assertNull(schema1.getReadOnly());
      assertNull(schema1.getFormat());
      assertNull(schema1.getMaxItems());
      assertNull(schema1.getName());
      assertNull(schema1.getMaxProperties());
      assertNull(schema1.getWriteOnly());
      assertNull(schema1.getMinProperties());
      assertNull(schema1.getMinLength());
      assertNull(schema1.getTitle());
      assertNull(schema1.getNullable());
      assertNull(schema1.get$ref());
      assertNull(schema1.getMaxLength());
      assertNull(schema1.getDescription());
      assertNull(schema1.getType());
      assertNull(schema1.getUniqueItems());
      assertNull(schema1.getExclusiveMaximum());
      assertFalse(string2.equals((Object)string1));
      assertNotNull(components1);
      
      String string3 = "";
      MediaType mediaType0 = new MediaType();
      assertNull(mediaType0.getExample());
      assertNotNull(mediaType0);
      
      Encoding encoding0 = new Encoding();
      assertNull(encoding0.getStyle());
      assertNull(encoding0.getExplode());
      assertNull(encoding0.getAllowReserved());
      assertNull(encoding0.getContentType());
      assertNotNull(encoding0);
      
      MediaType mediaType1 = mediaType0.addEncoding(string1, encoding0);
      assertSame(mediaType1, mediaType0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertSame(mediaType0, mediaType1);
      assertNull(encoding0.getStyle());
      assertNull(encoding0.getExplode());
      assertNull(encoding0.getAllowReserved());
      assertNull(encoding0.getContentType());
      assertNull(mediaType1.getExample());
      assertNull(mediaType0.getExample());
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertNotNull(mediaType1);
      
      Map<String, Example> map0 = mediaType1.getExamples();
      assertSame(mediaType1, mediaType0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertSame(mediaType0, mediaType1);
      assertNull(encoding0.getStyle());
      assertNull(encoding0.getExplode());
      assertNull(encoding0.getAllowReserved());
      assertNull(encoding0.getContentType());
      assertNull(mediaType1.getExample());
      assertNull(mediaType0.getExample());
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertNull(map0);
      
      MediaType mediaType2 = mediaType0.examples(map0);
      assertSame(mediaType1, mediaType2);
      assertSame(mediaType1, mediaType0);
      assertSame(mediaType2, mediaType0);
      assertSame(mediaType2, mediaType1);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType0, mediaType2);
      assertNull(encoding0.getStyle());
      assertNull(encoding0.getExplode());
      assertNull(encoding0.getAllowReserved());
      assertNull(encoding0.getContentType());
      assertNull(mediaType1.getExample());
      assertNull(mediaType2.getExample());
      assertNull(mediaType0.getExample());
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertNotNull(mediaType2);
      
      HashMap<String, Encoding> hashMap0 = new HashMap<String, Encoding>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      MediaType mediaType3 = mediaType2.encoding(hashMap0);
      assertSame(mediaType1, mediaType3);
      assertSame(mediaType1, mediaType2);
      assertSame(mediaType1, mediaType0);
      assertSame(mediaType2, mediaType3);
      assertSame(mediaType2, mediaType0);
      assertSame(mediaType2, mediaType1);
      assertSame(mediaType3, mediaType2);
      assertSame(mediaType3, mediaType1);
      assertSame(mediaType3, mediaType0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType0, mediaType2);
      assertSame(mediaType0, mediaType3);
      assertNull(encoding0.getStyle());
      assertNull(encoding0.getExplode());
      assertNull(encoding0.getAllowReserved());
      assertNull(encoding0.getContentType());
      assertNull(mediaType1.getExample());
      assertNull(mediaType2.getExample());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(mediaType3.getExample());
      assertNull(mediaType0.getExample());
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertNotNull(mediaType3);
      
      Example example0 = new Example();
      assertNull(example0.getDescription());
      assertNull(example0.getSummary());
      assertNull(example0.getExternalValue());
      assertNull(example0.get$ref());
      assertNotNull(example0);
      
      String string4 = ",B";
      Example example1 = example0.description(string4);
      assertSame(example0, example1);
      assertNotSame(string4, string2);
      assertNotSame(string4, string3);
      assertNotSame(string4, string1);
      assertSame(example1, example0);
      assertEquals(",B", example0.getDescription());
      assertNull(example0.getSummary());
      assertNull(example0.getExternalValue());
      assertNull(example0.get$ref());
      assertNull(example1.get$ref());
      assertEquals(",B", example1.getDescription());
      assertNull(example1.getExternalValue());
      assertNull(example1.getSummary());
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(example1);
      
      MediaType mediaType4 = mediaType3.addExamples(string1, example1);
      assertSame(mediaType1, mediaType4);
      assertSame(mediaType1, mediaType3);
      assertSame(mediaType1, mediaType2);
      assertSame(mediaType1, mediaType0);
      assertSame(mediaType2, mediaType3);
      assertSame(mediaType2, mediaType0);
      assertSame(mediaType2, mediaType4);
      assertSame(mediaType2, mediaType1);
      assertSame(mediaType3, mediaType2);
      assertSame(mediaType3, mediaType1);
      assertSame(mediaType3, mediaType0);
      assertSame(mediaType3, mediaType4);
      assertSame(example0, example1);
      assertNotSame(string1, string4);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string4, string2);
      assertNotSame(string4, string3);
      assertNotSame(string4, string1);
      assertSame(example1, example0);
      assertSame(mediaType4, mediaType1);
      assertSame(mediaType4, mediaType2);
      assertSame(mediaType4, mediaType3);
      assertSame(mediaType4, mediaType0);
      assertSame(mediaType0, mediaType4);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType0, mediaType2);
      assertSame(mediaType0, mediaType3);
      assertNull(encoding0.getStyle());
      assertNull(encoding0.getExplode());
      assertNull(encoding0.getAllowReserved());
      assertNull(encoding0.getContentType());
      assertNull(mediaType1.getExample());
      assertNull(mediaType2.getExample());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(mediaType3.getExample());
      assertEquals(",B", example0.getDescription());
      assertNull(example0.getSummary());
      assertNull(example0.getExternalValue());
      assertNull(example0.get$ref());
      assertNull(example1.get$ref());
      assertEquals(",B", example1.getDescription());
      assertNull(example1.getExternalValue());
      assertNull(example1.getSummary());
      assertNull(mediaType4.getExample());
      assertNull(mediaType0.getExample());
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(mediaType4);
      
      MediaType mediaType5 = mediaType4.schema(schema1);
      assertSame(mediaType1, mediaType4);
      assertSame(mediaType1, mediaType3);
      assertSame(mediaType1, mediaType5);
      assertSame(mediaType1, mediaType2);
      assertSame(mediaType1, mediaType0);
      assertSame(mediaType2, mediaType3);
      assertSame(mediaType2, mediaType5);
      assertSame(mediaType2, mediaType0);
      assertSame(mediaType2, mediaType4);
      assertSame(mediaType2, mediaType1);
      assertSame(mediaType3, mediaType2);
      assertSame(mediaType3, mediaType1);
      assertSame(mediaType3, mediaType5);
      assertSame(mediaType3, mediaType0);
      assertSame(mediaType3, mediaType4);
      assertSame(example0, example1);
      assertNotSame(string4, string2);
      assertNotSame(string4, string3);
      assertNotSame(string4, string1);
      assertSame(example1, example0);
      assertSame(mediaType4, mediaType5);
      assertSame(mediaType4, mediaType1);
      assertSame(mediaType4, mediaType2);
      assertSame(mediaType4, mediaType3);
      assertSame(mediaType4, mediaType0);
      assertSame(mediaType5, mediaType4);
      assertSame(mediaType5, mediaType2);
      assertSame(mediaType5, mediaType3);
      assertSame(mediaType5, mediaType0);
      assertSame(mediaType5, mediaType1);
      assertNotSame(string1, string4);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertSame(mediaType0, mediaType4);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType0, mediaType2);
      assertSame(mediaType0, mediaType3);
      assertSame(mediaType0, mediaType5);
      assertNull(encoding0.getStyle());
      assertNull(encoding0.getExplode());
      assertNull(encoding0.getAllowReserved());
      assertNull(encoding0.getContentType());
      assertNull(mediaType1.getExample());
      assertNull(mediaType2.getExample());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(mediaType3.getExample());
      assertEquals(",B", example0.getDescription());
      assertNull(example0.getSummary());
      assertNull(example0.getExternalValue());
      assertNull(example0.get$ref());
      assertNull(example1.get$ref());
      assertEquals(",B", example1.getDescription());
      assertNull(example1.getExternalValue());
      assertNull(example1.getSummary());
      assertNull(mediaType4.getExample());
      assertNull(mediaType5.getExample());
      assertNull(schema1.getMinItems());
      assertNull(schema1.getDeprecated());
      assertNull(schema1.getExclusiveMinimum());
      assertNull(schema1.getPattern());
      assertNull(schema1.getReadOnly());
      assertNull(schema1.getFormat());
      assertNull(schema1.getMaxItems());
      assertNull(schema1.getName());
      assertNull(schema1.getMaxProperties());
      assertNull(schema1.getWriteOnly());
      assertNull(schema1.getMinProperties());
      assertNull(schema1.getMinLength());
      assertNull(schema1.getTitle());
      assertNull(schema1.getNullable());
      assertNull(schema1.get$ref());
      assertNull(schema1.getMaxLength());
      assertNull(schema1.getDescription());
      assertNull(schema1.getType());
      assertNull(schema1.getUniqueItems());
      assertNull(schema1.getExclusiveMaximum());
      assertNull(mediaType0.getExample());
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertNotNull(mediaType5);
      
      Optional<MediaType> optional0 = OperationParser.getMediaType(mediaType5, exampleObjectArray0[4]);
      assertSame(mediaType1, mediaType4);
      assertSame(mediaType1, mediaType3);
      assertSame(mediaType1, mediaType5);
      assertSame(mediaType1, mediaType2);
      assertSame(mediaType1, mediaType0);
      assertSame(mediaType2, mediaType3);
      assertSame(mediaType2, mediaType5);
      assertSame(mediaType2, mediaType0);
      assertSame(mediaType2, mediaType4);
      assertSame(mediaType2, mediaType1);
      assertSame(mediaType3, mediaType2);
      assertSame(mediaType3, mediaType1);
      assertSame(mediaType3, mediaType5);
      assertSame(mediaType3, mediaType0);
      assertSame(mediaType3, mediaType4);
      assertSame(example0, example1);
      assertNotSame(string4, string2);
      assertNotSame(string4, string3);
      assertNotSame(string4, string1);
      assertSame(example1, example0);
      assertSame(mediaType4, mediaType5);
      assertSame(mediaType4, mediaType1);
      assertSame(mediaType4, mediaType2);
      assertSame(mediaType4, mediaType3);
      assertSame(mediaType4, mediaType0);
      assertSame(mediaType5, mediaType4);
      assertSame(mediaType5, mediaType2);
      assertSame(mediaType5, mediaType3);
      assertSame(mediaType5, mediaType0);
      assertSame(mediaType5, mediaType1);
      assertNotSame(string1, string4);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertSame(mediaType0, mediaType4);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType0, mediaType2);
      assertSame(mediaType0, mediaType3);
      assertSame(mediaType0, mediaType5);
      assertNull(encoding0.getStyle());
      assertNull(encoding0.getExplode());
      assertNull(encoding0.getAllowReserved());
      assertNull(encoding0.getContentType());
      assertNull(mediaType1.getExample());
      assertNull(mediaType2.getExample());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(mediaType3.getExample());
      assertEquals(",B", example0.getDescription());
      assertNull(example0.getSummary());
      assertNull(example0.getExternalValue());
      assertNull(example0.get$ref());
      assertNull(example1.get$ref());
      assertEquals(",B", example1.getDescription());
      assertNull(example1.getExternalValue());
      assertNull(example1.getSummary());
      assertNull(mediaType4.getExample());
      assertNull(mediaType5.getExample());
      assertNull(schema1.getMinItems());
      assertNull(schema1.getDeprecated());
      assertNull(schema1.getExclusiveMinimum());
      assertNull(schema1.getPattern());
      assertNull(schema1.getReadOnly());
      assertNull(schema1.getFormat());
      assertNull(schema1.getMaxItems());
      assertNull(schema1.getName());
      assertNull(schema1.getMaxProperties());
      assertNull(schema1.getWriteOnly());
      assertNull(schema1.getMinProperties());
      assertNull(schema1.getMinLength());
      assertNull(schema1.getTitle());
      assertNull(schema1.getNullable());
      assertNull(schema1.get$ref());
      assertNull(schema1.getMaxLength());
      assertNull(schema1.getDescription());
      assertNull(schema1.getType());
      assertNull(schema1.getUniqueItems());
      assertNull(schema1.getExclusiveMaximum());
      assertNull(mediaType0.getExample());
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertEquals(6, exampleObjectArray0.length);
      assertNotNull(optional0);
      
      Example example2 = new Example();
      assertNull(example2.get$ref());
      assertNull(example2.getDescription());
      assertNull(example2.getExternalValue());
      assertNull(example2.getSummary());
      assertFalse(example2.equals((Object)example1));
      assertFalse(example2.equals((Object)example0));
      assertNotNull(example2);
      
      Components components2 = components1.addExamples(string3, example2);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertNotSame(string2, string4);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(example2, example1);
      assertNotSame(example2, example0);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertNotSame(string3, string4);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNull(example2.get$ref());
      assertNull(example2.getDescription());
      assertNull(example2.getExternalValue());
      assertNull(example2.getSummary());
      assertNull(schema1.getMinItems());
      assertNull(schema1.getDeprecated());
      assertNull(schema1.getExclusiveMinimum());
      assertNull(schema1.getPattern());
      assertNull(schema1.getReadOnly());
      assertNull(schema1.getFormat());
      assertNull(schema1.getMaxItems());
      assertNull(schema1.getName());
      assertNull(schema1.getMaxProperties());
      assertNull(schema1.getWriteOnly());
      assertNull(schema1.getMinProperties());
      assertNull(schema1.getMinLength());
      assertNull(schema1.getTitle());
      assertNull(schema1.getNullable());
      assertNull(schema1.get$ref());
      assertNull(schema1.getMaxLength());
      assertNull(schema1.getDescription());
      assertNull(schema1.getType());
      assertNull(schema1.getUniqueItems());
      assertNull(schema1.getExclusiveMaximum());
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(example2.equals((Object)example1));
      assertFalse(example2.equals((Object)example0));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(components2);
      
      String string5 = "+";
      io.swagger.oas.models.links.Link link0 = new io.swagger.oas.models.links.Link();
      assertNull(link0.getOperationRef());
      assertNull(link0.getDescription());
      assertNull(link0.getOperationId());
      assertNull(link0.get$ref());
      assertNotNull(link0);
      
      Components components3 = components2.addLinks(string5, link0);
      assertSame(components3, components1);
      assertSame(components3, components2);
      assertSame(components3, components0);
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertNotSame(string2, string4);
      assertNotSame(string2, string1);
      assertNotSame(string2, string5);
      assertNotSame(string2, string3);
      assertNotSame(example2, example1);
      assertNotSame(example2, example0);
      assertSame(components2, components3);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertNotSame(string5, string3);
      assertNotSame(string5, string2);
      assertNotSame(string5, string4);
      assertNotSame(string5, string1);
      assertNotSame(string3, string5);
      assertNotSame(string3, string4);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNull(example2.get$ref());
      assertNull(example2.getDescription());
      assertNull(example2.getExternalValue());
      assertNull(example2.getSummary());
      assertNull(schema1.getMinItems());
      assertNull(schema1.getDeprecated());
      assertNull(schema1.getExclusiveMinimum());
      assertNull(schema1.getPattern());
      assertNull(schema1.getReadOnly());
      assertNull(schema1.getFormat());
      assertNull(schema1.getMaxItems());
      assertNull(schema1.getName());
      assertNull(schema1.getMaxProperties());
      assertNull(schema1.getWriteOnly());
      assertNull(schema1.getMinProperties());
      assertNull(schema1.getMinLength());
      assertNull(schema1.getTitle());
      assertNull(schema1.getNullable());
      assertNull(schema1.get$ref());
      assertNull(schema1.getMaxLength());
      assertNull(schema1.getDescription());
      assertNull(schema1.getType());
      assertNull(schema1.getUniqueItems());
      assertNull(schema1.getExclusiveMaximum());
      assertNull(link0.getOperationRef());
      assertNull(link0.getDescription());
      assertNull(link0.getOperationId());
      assertNull(link0.get$ref());
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string3));
      assertFalse(example2.equals((Object)example1));
      assertFalse(example2.equals((Object)example0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(components3);
      
      HashMap<String, Header> hashMap1 = new HashMap<String, Header>();
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotNull(hashMap1);
      
      Components components4 = components3.headers(hashMap1);
      assertSame(components3, components1);
      assertSame(components3, components4);
      assertSame(components3, components2);
      assertSame(components3, components0);
      assertSame(components4, components0);
      assertSame(components4, components3);
      assertSame(components4, components1);
      assertSame(components4, components2);
      assertSame(components0, components2);
      assertSame(components0, components4);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertNotSame(string2, string4);
      assertNotSame(string2, string1);
      assertNotSame(string2, string5);
      assertNotSame(string2, string3);
      assertNotSame(example2, example1);
      assertNotSame(example2, example0);
      assertSame(components2, components3);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components2, components4);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertSame(components1, components4);
      assertNotSame(string5, string3);
      assertNotSame(string5, string2);
      assertNotSame(string5, string4);
      assertNotSame(string5, string1);
      assertNotSame(string3, string5);
      assertNotSame(string3, string4);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNull(example2.get$ref());
      assertNull(example2.getDescription());
      assertNull(example2.getExternalValue());
      assertNull(example2.getSummary());
      assertNull(schema1.getMinItems());
      assertNull(schema1.getDeprecated());
      assertNull(schema1.getExclusiveMinimum());
      assertNull(schema1.getPattern());
      assertNull(schema1.getReadOnly());
      assertNull(schema1.getFormat());
      assertNull(schema1.getMaxItems());
      assertNull(schema1.getName());
      assertNull(schema1.getMaxProperties());
      assertNull(schema1.getWriteOnly());
      assertNull(schema1.getMinProperties());
      assertNull(schema1.getMinLength());
      assertNull(schema1.getTitle());
      assertNull(schema1.getNullable());
      assertNull(schema1.get$ref());
      assertNull(schema1.getMaxLength());
      assertNull(schema1.getDescription());
      assertNull(schema1.getType());
      assertNull(schema1.getUniqueItems());
      assertNull(schema1.getExclusiveMaximum());
      assertNull(link0.getOperationRef());
      assertNull(link0.getDescription());
      assertNull(link0.getOperationId());
      assertNull(link0.get$ref());
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string3));
      assertFalse(example2.equals((Object)example1));
      assertFalse(example2.equals((Object)example0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(components4);
      
      // Undeclared exception!
      try { 
        OperationParser.getContent(contentArray0, produces0, produces1, components4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test101()  throws Throwable  {
      boolean boolean0 = false;
      Content[] contentArray0 = new Content[3];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      String string0 = null;
      Explode explode0 = Explode.DEFAULT;
      Explode explode1 = Explode.DEFAULT;
      Explode explode2 = Explode.DEFAULT;
      Class<Integer> class0 = Integer.class;
      Class<Callback> class1 = Callback.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(schema0).implementation();
      Class<Void> class2 = Void.class;
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class2).when(schema1).implementation();
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0).when(parameter0).allowEmptyValue();
      doReturn(boolean0).when(parameter0).allowReserved();
      doReturn(boolean0).when(parameter0).deprecated();
      doReturn(string0).when(parameter0).description();
      doReturn(explode0, explode1, explode2).when(parameter0).explode();
      doReturn(string0).when(parameter0).in();
      doReturn(string0).when(parameter0).name();
      doReturn(boolean0).when(parameter0).required();
      doReturn(schema0, schema0, schema1, (Schema) null).when(parameter0).schema();
      doReturn(string0).when(parameter0).style();
      Components components0 = new Components();
      assertNotNull(components0);
      
      String string1 = "=]?x@amV=cTo{";
      RequestBody requestBody0 = new RequestBody();
      assertNull(requestBody0.getRequired());
      assertNull(requestBody0.get$ref());
      assertNull(requestBody0.getDescription());
      assertNotNull(requestBody0);
      
      Components components1 = components0.addRequestBodies(string1, requestBody0);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertNull(requestBody0.getRequired());
      assertNull(requestBody0.get$ref());
      assertNull(requestBody0.getDescription());
      assertNotNull(components1);
      
      SecurityScheme securityScheme0 = new SecurityScheme();
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.getBearerFormat());
      assertNotNull(securityScheme0);
      
      Components components2 = components1.addSecuritySchemes(string1, securityScheme0);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertNull(requestBody0.getRequired());
      assertNull(requestBody0.get$ref());
      assertNull(requestBody0.getDescription());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.getBearerFormat());
      assertNotNull(components2);
      
      Map<String, io.swagger.oas.models.media.Schema> map0 = (Map<String, io.swagger.oas.models.media.Schema>)components2.getSchemas();
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertNull(requestBody0.getRequired());
      assertNull(requestBody0.get$ref());
      assertNull(requestBody0.getDescription());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.getBearerFormat());
      assertNull(map0);
      
      Components components3 = components2.schemas(map0);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertSame(components2, components3);
      assertSame(components3, components1);
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertNull(requestBody0.getRequired());
      assertNull(requestBody0.get$ref());
      assertNull(requestBody0.getDescription());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.getBearerFormat());
      assertNotNull(components3);
      
      Map<String, io.swagger.oas.models.parameters.Parameter> map1 = components1.getParameters();
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertNull(requestBody0.getRequired());
      assertNull(requestBody0.get$ref());
      assertNull(requestBody0.getDescription());
      assertNull(map1);
      
      MediaType mediaType0 = new MediaType();
      assertNull(mediaType0.getExample());
      assertNotNull(mediaType0);
      
      Example example0 = new Example();
      assertNull(example0.get$ref());
      assertNull(example0.getExternalValue());
      assertNull(example0.getDescription());
      assertNull(example0.getSummary());
      assertNotNull(example0);
      
      Example example1 = example0.value(string1);
      assertSame(example0, example1);
      assertSame(example1, example0);
      assertNull(example0.get$ref());
      assertNull(example0.getExternalValue());
      assertNull(example0.getDescription());
      assertNull(example0.getSummary());
      assertNull(example1.getExternalValue());
      assertNull(example1.getDescription());
      assertNull(example1.get$ref());
      assertNull(example1.getSummary());
      assertNotNull(example1);
      
      MediaType mediaType1 = mediaType0.addExamples(string1, example1);
      assertSame(mediaType0, mediaType1);
      assertSame(example0, example1);
      assertSame(example1, example0);
      assertSame(mediaType1, mediaType0);
      assertNull(mediaType0.getExample());
      assertNull(example0.get$ref());
      assertNull(example0.getExternalValue());
      assertNull(example0.getDescription());
      assertNull(example0.getSummary());
      assertNull(example1.getExternalValue());
      assertNull(example1.getDescription());
      assertNull(example1.get$ref());
      assertNull(example1.getSummary());
      assertNull(mediaType1.getExample());
      assertNotNull(mediaType1);
      
      Map<String, Example> map2 = mediaType1.getExamples();
      assertSame(mediaType0, mediaType1);
      assertSame(example0, example1);
      assertSame(example1, example0);
      assertSame(mediaType1, mediaType0);
      assertNull(mediaType0.getExample());
      assertNull(example0.get$ref());
      assertNull(example0.getExternalValue());
      assertNull(example0.getDescription());
      assertNull(example0.getSummary());
      assertNull(example1.getExternalValue());
      assertNull(example1.getDescription());
      assertNull(example1.get$ref());
      assertNull(example1.getSummary());
      assertNull(mediaType1.getExample());
      assertEquals(1, map2.size());
      assertFalse(map2.isEmpty());
      assertNotNull(map2);
      
      Components components4 = components2.examples(map2);
      assertSame(components0, components1);
      assertSame(components0, components4);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components1, components4);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertSame(components2, components1);
      assertSame(components2, components4);
      assertSame(components2, components0);
      assertSame(components2, components3);
      assertSame(mediaType0, mediaType1);
      assertSame(example0, example1);
      assertSame(example1, example0);
      assertSame(mediaType1, mediaType0);
      assertSame(components4, components0);
      assertSame(components4, components1);
      assertSame(components4, components3);
      assertSame(components4, components2);
      assertNull(requestBody0.getRequired());
      assertNull(requestBody0.get$ref());
      assertNull(requestBody0.getDescription());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.getBearerFormat());
      assertNull(mediaType0.getExample());
      assertNull(example0.get$ref());
      assertNull(example0.getExternalValue());
      assertNull(example0.getDescription());
      assertNull(example0.getSummary());
      assertNull(example1.getExternalValue());
      assertNull(example1.getDescription());
      assertNull(example1.get$ref());
      assertNull(example1.getSummary());
      assertNull(mediaType1.getExample());
      assertEquals(1, map2.size());
      assertFalse(map2.isEmpty());
      assertNotNull(components4);
      
      Components components5 = components3.parameters(map1);
      assertSame(components0, components1);
      assertSame(components0, components4);
      assertSame(components0, components3);
      assertSame(components0, components5);
      assertSame(components0, components2);
      assertSame(components1, components4);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components1, components5);
      assertSame(components1, components3);
      assertSame(components2, components1);
      assertSame(components2, components4);
      assertSame(components2, components0);
      assertSame(components2, components5);
      assertSame(components2, components3);
      assertSame(components3, components5);
      assertSame(components3, components4);
      assertSame(components3, components1);
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertSame(components5, components3);
      assertSame(components5, components0);
      assertSame(components5, components2);
      assertSame(components5, components1);
      assertSame(components5, components4);
      assertNull(requestBody0.getRequired());
      assertNull(requestBody0.get$ref());
      assertNull(requestBody0.getDescription());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.getBearerFormat());
      assertNotNull(components5);
      
      Optional<io.swagger.oas.models.parameters.Parameter> optional0 = OperationParser.getParameter(parameter0, components5);
      assertSame(explode0, explode1);
      assertSame(explode0, explode2);
      assertSame(explode1, explode2);
      assertSame(explode1, explode0);
      assertSame(explode2, explode1);
      assertSame(explode2, explode0);
      assertSame(components0, components1);
      assertSame(components0, components4);
      assertSame(components0, components3);
      assertSame(components0, components5);
      assertSame(components0, components2);
      assertSame(components1, components4);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components1, components5);
      assertSame(components1, components3);
      assertSame(components2, components1);
      assertSame(components2, components4);
      assertSame(components2, components0);
      assertSame(components2, components5);
      assertSame(components2, components3);
      assertSame(components3, components5);
      assertSame(components3, components4);
      assertSame(components3, components1);
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertSame(components5, components3);
      assertSame(components5, components0);
      assertSame(components5, components2);
      assertSame(components5, components1);
      assertSame(components5, components4);
      assertNull(requestBody0.getRequired());
      assertNull(requestBody0.get$ref());
      assertNull(requestBody0.getDescription());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.getBearerFormat());
      assertNotNull(optional0);
      
      String string2 = "io.swagger.jaxrs2.OperationParser";
      String string3 = "";
      String string4 = "java.langjava.lang.Object";
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(string2, string4).when(license0).name();
      doReturn(string3).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional1 = OperationParser.getLicense(license0);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string4);
      assertNotSame(string3, string2);
      assertNotSame(string3, string4);
      assertNotSame(string3, string1);
      assertNotSame(string4, string3);
      assertNotSame(string4, string2);
      assertNotSame(string4, string1);
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(optional1);
      
      String string5 = "Can not bind back references as Creator parameters: type %s (reference '%s', parameter index #%d)";
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string1, string4).when(externalDocumentation0).description();
      doReturn(string1, string5).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional2 = OperationParser.getExternalDocumentation(externalDocumentation0);
      assertNotSame(string1, string5);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string4);
      assertNotSame(string4, string3);
      assertNotSame(string4, string2);
      assertNotSame(string4, string5);
      assertNotSame(string4, string1);
      assertNotSame(string5, string1);
      assertNotSame(string5, string2);
      assertNotSame(string5, string3);
      assertNotSame(string5, string4);
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(optional2);
  }
}
