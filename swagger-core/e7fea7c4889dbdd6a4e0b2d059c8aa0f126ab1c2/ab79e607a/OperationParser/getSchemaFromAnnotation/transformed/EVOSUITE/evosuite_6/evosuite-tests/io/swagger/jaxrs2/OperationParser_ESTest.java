/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 07 13:16:55 GMT 2021
 */

package io.swagger.jaxrs2;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.swagger.jaxrs2.OperationParser;
import io.swagger.oas.annotations.ExternalDocumentation;
import io.swagger.oas.annotations.Parameter;
import io.swagger.oas.annotations.enums.Explode;
import io.swagger.oas.annotations.info.Contact;
import io.swagger.oas.annotations.info.Info;
import io.swagger.oas.annotations.info.License;
import io.swagger.oas.annotations.links.LinkParameter;
import io.swagger.oas.annotations.media.Content;
import io.swagger.oas.annotations.media.ExampleObject;
import io.swagger.oas.annotations.media.Schema;
import io.swagger.oas.annotations.responses.ApiResponse;
import io.swagger.oas.annotations.servers.Server;
import io.swagger.oas.annotations.servers.ServerVariable;
import io.swagger.oas.models.Components;
import io.swagger.oas.models.Operation;
import io.swagger.oas.models.PathItem;
import io.swagger.oas.models.callbacks.Callback;
import io.swagger.oas.models.examples.Example;
import io.swagger.oas.models.headers.Header;
import io.swagger.oas.models.links.Link;
import io.swagger.oas.models.media.Encoding;
import io.swagger.oas.models.media.MediaType;
import io.swagger.oas.models.parameters.RequestBody;
import io.swagger.oas.models.responses.ApiResponses;
import io.swagger.oas.models.security.Scopes;
import io.swagger.oas.models.security.SecurityScheme;
import io.swagger.oas.models.tags.Tag;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.Set;
import javax.ws.rs.Produces;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OperationParser_ESTest extends OperationParser_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test000()  throws Throwable  {
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(server0).description();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(server0).url();
      Optional<io.swagger.oas.models.servers.Server> optional0 = OperationParser.getServer(server0);
      assertNotNull(optional0);
      
      String[] stringArray0 = new String[5];
      String string0 = "default";
      stringArray0[0] = string0;
      String string1 = "io.swagger.jaxrs2.OperationParser";
      stringArray0[1] = string1;
      String string2 = "K:ma`jL!Y>\\)&";
      stringArray0[2] = string2;
      String string3 = "";
      stringArray0[3] = string3;
      String string4 = "";
      stringArray0[4] = string4;
      Optional<Set<Tag>> optional1 = OperationParser.getTags(stringArray0);
      assertNotNull(optional1);
      assertEquals(5, stringArray0.length);
      
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(info0).description();
      doReturn((String) null).when(info0).termsOfService();
      doReturn((String) null).when(info0).title();
      doReturn((String) null).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional2 = OperationParser.getInfo(info0);
      assertNotNull(optional2);
      
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String[]) null).when(schema0).allowableValues();
      doReturn((String) null).when(schema0).defaultValue();
      doReturn(false).when(schema0).deprecated();
      doReturn((String) null).when(schema0).description();
      doReturn((String) null, (String) null).when(schema0).example();
      doReturn(false).when(schema0).exclusiveMaximum();
      doReturn(false).when(schema0).exclusiveMinimum();
      doReturn((ExternalDocumentation) null).when(schema0).externalDocs();
      doReturn((String) null).when(schema0).format();
      doReturn(0).when(schema0).maxLength();
      doReturn(0).when(schema0).minProperties();
      doReturn((String) null).when(schema0).pattern();
      doReturn(false).when(schema0).readOnly();
      doReturn((String) null).when(schema0).ref();
      doReturn((String) null).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional3 = (Optional<io.swagger.oas.models.media.Schema>)OperationParser.getSchemaFromAnnotation(schema0);
      assertNotNull(optional3);
      
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(parameter0).allowEmptyValue();
      doReturn(false).when(parameter0).allowReserved();
      doReturn((Content[]) null).when(parameter0).content();
      doReturn(false).when(parameter0).deprecated();
      doReturn((String) null).when(parameter0).description();
      doReturn((Explode) null, (Explode) null, (Explode) null).when(parameter0).explode();
      doReturn((String) null).when(parameter0).in();
      doReturn((String) null).when(parameter0).name();
      doReturn(false).when(parameter0).required();
      doReturn((Schema) null, (Schema) null).when(parameter0).schema();
      doReturn((String) null).when(parameter0).style();
      Components components0 = new Components();
      assertNotNull(components0);
      
      Map<String, Link> map0 = null;
      Components components1 = components0.links(map0);
      assertNotNull(components1);
      assertSame(components0, components1);
      assertSame(components1, components0);
      
      Map<String, SecurityScheme> map1 = components1.getSecuritySchemes();
      assertNull(map1);
      assertSame(components0, components1);
      assertSame(components1, components0);
      
      Components components2 = components1.securitySchemes(map1);
      assertNotNull(components2);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components2, components1);
      assertSame(components2, components0);
      
      Map<String, RequestBody> map2 = components1.getRequestBodies();
      assertNull(map2);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components1, components0);
      assertSame(components1, components2);
      
      Components components3 = components2.requestBodies(map2);
      assertNotNull(components3);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertSame(components2, components3);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertSame(components3, components2);
      
      Map<String, io.swagger.oas.models.parameters.Parameter> map3 = components0.getParameters();
      assertNull(map3);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components0, components2);
      
      Components components4 = components3.parameters(map3);
      assertNotNull(components4);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components0, components4);
      assertSame(components0, components2);
      assertSame(components1, components0);
      assertSame(components1, components4);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertSame(components2, components3);
      assertSame(components2, components4);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertSame(components3, components4);
      assertSame(components3, components2);
      assertSame(components4, components3);
      assertSame(components4, components2);
      assertSame(components4, components0);
      assertSame(components4, components1);
      
      Optional<io.swagger.oas.models.parameters.Parameter> optional4 = OperationParser.getParameter(parameter0, components4);
      assertNotNull(optional4);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components0, components4);
      assertSame(components0, components2);
      assertSame(components1, components0);
      assertSame(components1, components4);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertSame(components2, components3);
      assertSame(components2, components4);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertSame(components3, components4);
      assertSame(components3, components2);
      assertSame(components4, components3);
      assertSame(components4, components2);
      assertSame(components4, components0);
      assertSame(components4, components1);
      
      Info info1 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(info1).description();
      doReturn((String) null).when(info1).termsOfService();
      doReturn((String) null).when(info1).title();
      doReturn((String) null).when(info1).version();
      Optional<io.swagger.oas.models.info.Info> optional5 = OperationParser.getInfo(info1);
      assertNotNull(optional5);
      assertSame(optional5, optional2);
      
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String[]) null).when(schema1).allowableValues();
      doReturn((String) null).when(schema1).defaultValue();
      doReturn(false).when(schema1).deprecated();
      doReturn((String) null).when(schema1).description();
      doReturn((String) null, (String) null).when(schema1).example();
      doReturn(false).when(schema1).exclusiveMaximum();
      doReturn(false).when(schema1).exclusiveMinimum();
      doReturn((ExternalDocumentation) null).when(schema1).externalDocs();
      doReturn((String) null).when(schema1).format();
      doReturn(0).when(schema1).maxLength();
      doReturn(0).when(schema1).minProperties();
      doReturn((String) null).when(schema1).pattern();
      doReturn(false).when(schema1).readOnly();
      doReturn((String) null).when(schema1).ref();
      doReturn((String) null).when(schema1).type();
      Optional<io.swagger.oas.models.media.Schema> optional6 = (Optional<io.swagger.oas.models.media.Schema>)OperationParser.getSchemaFromAnnotation(schema1);
      assertNotNull(optional6);
      assertSame(optional6, optional3);
      
      Server[] serverArray0 = new Server[7];
      serverArray0[0] = server0;
      serverArray0[1] = serverArray0[0];
      serverArray0[2] = server0;
      serverArray0[3] = serverArray0[2];
      serverArray0[4] = server0;
      serverArray0[5] = server0;
      serverArray0[6] = server0;
      Optional<List<io.swagger.oas.models.servers.Server>> optional7 = OperationParser.getServers(serverArray0);
      assertNotNull(optional7);
      assertEquals(7, serverArray0.length);
  }

  @Test(timeout = 11000)
  public void test001()  throws Throwable  {
      ApiResponse[] apiResponseArray0 = new ApiResponse[5];
      Content[] contentArray0 = new Content[0];
      String string0 = "";
      String string1 = "Iuny;=5:*sh@";
      String string2 = "F:R\"EA0X";
      String string3 = "Sub-class ";
      io.swagger.oas.annotations.links.Link[] linkArray0 = null;
      String string4 = "";
      ApiResponse apiResponse0 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn((Object) contentArray0, (Object) contentArray0, (Object) contentArray0).when(apiResponse0).content();
      doReturn(string0, string1, string0, string2, string3).when(apiResponse0).description();
      doReturn(linkArray0).when(apiResponse0).links();
      doReturn(string1, string4).when(apiResponse0).responseCode();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      apiResponseArray0[4] = apiResponseArray0[3];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      assertNotNull(components0);
      
      Encoding encoding0 = new Encoding();
      assertNotNull(encoding0);
      assertNull(encoding0.getAllowReserved());
      assertNull(encoding0.getExplode());
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getStyle());
      
      HashMap<String, Callback> hashMap0 = new HashMap<String, Callback>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Components components1 = components0.callbacks(hashMap0);
      assertNotNull(components1);
      assertSame(components1, components0);
      assertSame(components0, components1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      io.swagger.oas.annotations.links.Link[] linkArray1 = new io.swagger.oas.annotations.links.Link[9];
      String string5 = "";
      String string6 = "AvxI";
      String string7 = "VI^";
      String string8 = "[A<u\\{!=.@!C^L";
      linkArray1[1] = linkArray1[0];
      linkArray1[2] = linkArray1[1];
      linkArray1[3] = linkArray1[2];
      linkArray1[4] = linkArray1[3];
      linkArray1[5] = linkArray1[4];
      linkArray1[6] = linkArray1[5];
      linkArray1[8] = linkArray1[7];
      Map<String, Link> map0 = OperationParser.getLinks(linkArray1);
      assertNotNull(map0);
      assertEquals(9, linkArray1.length);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      Components components2 = components1.links(map0);
      assertNotNull(components2);
      assertEquals(9, linkArray1.length);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      String string9 = "6A|XArY";
      io.swagger.oas.models.responses.ApiResponse apiResponse1 = null;
      Components components3 = components2.addResponses(string9, apiResponse1);
      assertNotNull(components3);
      assertEquals(9, linkArray1.length);
      assertNotSame(string9, string3);
      assertNotSame(string9, string1);
      assertNotSame(string9, string5);
      assertNotSame(string9, string8);
      assertNotSame(string9, string2);
      assertNotSame(string9, string6);
      assertNotSame(string9, string7);
      assertNotSame(string9, string4);
      assertNotSame(string9, string0);
      assertSame(components1, components3);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components3, components2);
      assertSame(components3, components1);
      assertSame(components3, components0);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertSame(components2, components3);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test002()  throws Throwable  {
      OperationParser operationParser0 = new OperationParser();
      assertNotNull(operationParser0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = operationParser0.RESPONSE_DEFAULT;
      String string0 = "' (code 0x";
      stringArray0[2] = operationParser0.DEFAULT_DESCRIPTION;
      String string1 = "com.fasterxml.jackson.databind.node.DoubleNode";
      boolean boolean0 = true;
      String string2 = "";
      String string3 = "";
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string3).when(externalDocumentation0).description();
      doReturn(string3).when(externalDocumentation0).url();
      int int0 = 400;
      String string4 = "Qu{ndk7 37i";
      boolean boolean1 = true;
      boolean boolean2 = true;
      int int1 = 2185;
      String string5 = null;
      String string6 = "";
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(stringArray0).when(schema0).allowableValues();
      doReturn(string1, string4).when(schema0).defaultValue();
      doReturn(boolean0, boolean1).when(schema0).deprecated();
      doReturn(string2).when(schema0).description();
      doReturn(operationParser0.COMPONENTS_REF, string0, operationParser0.COMPONENTS_REF, string4).when(schema0).example();
      doReturn(boolean0, boolean2).when(schema0).exclusiveMaximum();
      doReturn(boolean0, boolean0).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema0).externalDocs();
      doReturn(string2).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(int1, int1).when(schema0).maxProperties();
      doReturn(int0, int1).when(schema0).minProperties();
      doReturn(stringArray0[0], string4).when(schema0).pattern();
      doReturn(boolean0, boolean2).when(schema0).readOnly();
      doReturn(operationParser0.COMPONENTS_REF, string5).when(schema0).ref();
      doReturn(string0, string6).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional0 = (Optional<io.swagger.oas.models.media.Schema>)OperationParser.getSchemaFromAnnotation(schema0);
      assertNotNull(optional0);
      assertEquals(3, stringArray0.length);
      assertNotSame(string6, string1);
      assertSame(string6, string3);
      assertNotSame(string6, string0);
      assertNotSame(string6, string4);
      assertSame(string6, string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string6);
      assertNotSame(string0, string4);
      assertNotSame(string0, string3);
      assertNotSame(string1, string6);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string4);
      assertNotSame(string1, string2);
      assertNotSame(string2, string4);
      assertNotSame(string2, string0);
      assertSame(string2, string3);
      assertSame(string2, string6);
      assertNotSame(string2, string1);
      assertSame(string3, string6);
      assertNotSame(string3, string0);
      assertNotSame(string3, string4);
      assertNotSame(string3, string1);
      assertSame(string3, string2);
      assertNotSame(string4, string2);
      assertNotSame(string4, string3);
      assertNotSame(string4, string0);
      assertNotSame(string4, string1);
      assertNotSame(string4, string6);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string1));
      assertFalse(int0 == int1);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string6));
      assertFalse(int1 == int0);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      
      Content[] contentArray0 = new Content[8];
      ExampleObject[] exampleObjectArray0 = new ExampleObject[6];
      String string7 = "+cOt MadIWuY!YC";
      String string8 = null;
      String string9 = ",\\hao0En0ORY>&";
      String string10 = "%f?/6MTi&|5j&Lw";
      String string11 = "";
      String string12 = null;
      String string13 = "java.langio.swagger.oas.models.headers.Header";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn(operationParser0.MEDIA_TYPE, string8, operationParser0.DEFAULT_DESCRIPTION, string1, string9).when(exampleObject0).externalValue();
      doReturn(string5, stringArray0[2], string5, string0, string7).when(exampleObject0).name();
      doReturn(string10, operationParser0.DEFAULT_DESCRIPTION, string11, operationParser0.MEDIA_TYPE, string12).when(exampleObject0).summary();
      doReturn(string9, string13, string8, string4, string13).when(exampleObject0).value();
      exampleObjectArray0[0] = exampleObject0;
      exampleObjectArray0[1] = exampleObjectArray0[0];
      exampleObjectArray0[3] = exampleObjectArray0[2];
      exampleObjectArray0[4] = exampleObjectArray0[3];
      exampleObjectArray0[5] = exampleObjectArray0[4];
      String string14 = "";
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Object) exampleObjectArray0, (Object) exampleObjectArray0, (Object) exampleObjectArray0, (Object) exampleObjectArray0, (Object) exampleObjectArray0).when(content0).examples();
      doReturn(string14, string3, string11, operationParser0.DEFAULT_DESCRIPTION, string8).when(content0).mediaType();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      contentArray0[3] = contentArray0[2];
      contentArray0[4] = contentArray0[3];
      contentArray0[5] = contentArray0[4];
      contentArray0[6] = contentArray0[5];
      contentArray0[7] = contentArray0[6];
      Components components0 = new Components();
      assertNotNull(components0);
      
      HashMap<String, io.swagger.oas.models.responses.ApiResponse> hashMap0 = new HashMap<String, io.swagger.oas.models.responses.ApiResponse>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Components components1 = components0.responses(hashMap0);
      assertNotNull(components1);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Map<String, SecurityScheme> map0 = components1.getSecuritySchemes();
      assertNull(map0);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Components components2 = components0.securitySchemes(map0);
      assertNotNull(components2);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Optional<io.swagger.oas.models.media.Content> optional1 = OperationParser.getContents(contentArray0, components2);
      assertNotNull(optional1);
      assertEquals(8, contentArray0.length);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
  }

  @Test(timeout = 11000)
  public void test003()  throws Throwable  {
      Server server0 = null;
      Optional<io.swagger.oas.models.servers.Server> optional0 = OperationParser.getServer(server0);
      assertNotNull(optional0);
      
      Server[] serverArray0 = new Server[5];
      serverArray0[1] = server0;
      serverArray0[2] = server0;
      serverArray0[3] = server0;
      serverArray0[4] = server0;
      Optional<List<io.swagger.oas.models.servers.Server>> optional1 = OperationParser.getServers(serverArray0);
      assertNotNull(optional1);
      assertEquals(5, serverArray0.length);
      
      Parameter[] parameterArray0 = new Parameter[4];
      boolean boolean0 = false;
      boolean boolean1 = false;
      boolean boolean2 = false;
      boolean boolean3 = false;
      Content[] contentArray0 = new Content[4];
      contentArray0[3] = contentArray0[2];
      boolean boolean4 = false;
      boolean boolean5 = true;
      boolean boolean6 = false;
      String string0 = "";
      String string1 = " bytes";
      Explode explode0 = Explode.TRUE;
      Explode explode1 = Explode.DEFAULT;
      Explode explode2 = Explode.FALSE;
      boolean boolean7 = false;
      boolean boolean8 = false;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      String string2 = "it(fZFC'_4sv";
      String string3 = "@mVIf8@/_W}Jk+v>";
      parameterArray0[2] = parameterArray0[1];
      parameterArray0[3] = parameterArray0[2];
      Components components0 = new Components();
      assertNotNull(components0);
      
      String string4 = "";
      Link link0 = new Link();
      assertNotNull(link0);
      assertNull(link0.getOperationId());
      assertNull(link0.getDescription());
      assertNull(link0.getOperationRef());
      assertNull(link0.get$ref());
      
      HashMap<String, Callback> hashMap0 = new HashMap<String, Callback>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Callback callback0 = new Callback();
      assertNotNull(callback0);
      assertEquals(0, callback0.size());
      assertTrue(callback0.isEmpty());
      
      Callback callback1 = hashMap0.put(string0, callback0);
      assertNull(callback1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(string0, string4);
      assertNotSame(string0, string3);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(0, callback0.size());
      assertTrue(callback0.isEmpty());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      
      Components components1 = components0.callbacks(hashMap0);
      assertNotNull(components1);
      assertSame(components1, components0);
      assertSame(components0, components1);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      Optional<List<io.swagger.oas.models.parameters.Parameter>> optional2 = OperationParser.getParametersList(parameterArray0, components0);
      assertNotNull(optional2);
      assertEquals(4, parameterArray0.length);
      assertSame(components0, components1);
  }

  @Test(timeout = 11000)
  public void test004()  throws Throwable  {
      String string0 = "com.fasterxml.jackson.databind.ext.NioPathDeserializer";
      String string1 = "";
      String string2 = "uN";
      String string3 = "com.fasterxml.jackson.databind.ser.std.SqlTimeSerializer";
      LinkParameter[] linkParameterArray0 = new LinkParameter[0];
      io.swagger.oas.annotations.links.Link link0 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string1).when(link0).description();
      doReturn(string1).when(link0).operationId();
      doReturn(string2, string3).when(link0).operationRef();
      doReturn(linkParameterArray0).when(link0).parameters();
      Optional<Link> optional0 = OperationParser.getLink(link0);
      assertNotNull(optional0);
      assertEquals(0, linkParameterArray0.length);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = "";
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(string4).when(license0).name();
      doReturn(string4).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional1 = OperationParser.getLicense(license0);
      assertNotNull(optional1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string2);
      assertSame(string4, string1);
      assertNotSame(string4, string3);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = string0;
      stringArray0[1] = string4;
      stringArray0[2] = string0;
      stringArray0[3] = string2;
      stringArray0[4] = string0;
      stringArray0[5] = string4;
      boolean boolean0 = true;
      boolean boolean1 = true;
      String string5 = "dXQ rM";
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string5, (String) null).when(externalDocumentation0).description();
      doReturn(string4).when(externalDocumentation0).url();
      String string6 = "";
      int int0 = 707;
      int int1 = (-3145);
      boolean boolean2 = false;
      boolean boolean3 = true;
      String string7 = "''!oz5m4Fwei4)";
      boolean boolean4 = false;
      String string8 = "\"Bk&%=0S1)[";
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(stringArray0).when(schema0).allowableValues();
      doReturn(string4).when(schema0).defaultValue();
      doReturn(boolean0, boolean3).when(schema0).deprecated();
      doReturn(stringArray0[0], string4).when(schema0).description();
      doReturn(stringArray0[4], string2, string2, string7).when(schema0).example();
      doReturn(boolean1, boolean2).when(schema0).exclusiveMaximum();
      doReturn(boolean0, boolean4).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema0).externalDocs();
      doReturn(string6).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(int1).when(schema0).maxProperties();
      doReturn(int1).when(schema0).minProperties();
      doReturn(stringArray0[5]).when(schema0).pattern();
      doReturn(boolean2).when(schema0).readOnly();
      doReturn(string1).when(schema0).ref();
      doReturn(stringArray0[0], string8).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional2 = (Optional<io.swagger.oas.models.media.Schema>)OperationParser.getSchemaFromAnnotation(schema0);
      assertNotNull(optional2);
      assertEquals(6, stringArray0.length);
      assertNotSame(string1, string3);
      assertSame(string1, string6);
      assertNotSame(string1, string0);
      assertNotSame(string1, string8);
      assertSame(string1, string4);
      assertNotSame(string1, string7);
      assertNotSame(string1, string2);
      assertNotSame(string1, string5);
      assertNotSame(string2, string4);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string8);
      assertNotSame(string2, string7);
      assertNotSame(string2, string6);
      assertNotSame(string2, string5);
      assertNotSame(string2, string3);
      assertNotSame(string5, string4);
      assertNotSame(string5, string1);
      assertNotSame(string5, string7);
      assertNotSame(string5, string0);
      assertNotSame(string5, string6);
      assertNotSame(string5, string2);
      assertNotSame(string5, string8);
      assertNotSame(string5, string3);
      assertNotSame(string6, string3);
      assertSame(string6, string1);
      assertNotSame(string6, string2);
      assertNotSame(string6, string5);
      assertNotSame(string6, string8);
      assertSame(string6, string4);
      assertNotSame(string6, string7);
      assertNotSame(string6, string0);
      assertSame(string4, string6);
      assertNotSame(string4, string0);
      assertNotSame(string4, string8);
      assertNotSame(string4, string7);
      assertNotSame(string4, string2);
      assertSame(string4, string1);
      assertNotSame(string4, string5);
      assertNotSame(string4, string3);
      assertNotSame(string7, string1);
      assertNotSame(string7, string0);
      assertNotSame(string7, string6);
      assertNotSame(string7, string4);
      assertNotSame(string7, string5);
      assertNotSame(string7, string8);
      assertNotSame(string7, string3);
      assertNotSame(string7, string2);
      assertNotSame(string8, string2);
      assertNotSame(string8, string7);
      assertNotSame(string8, string5);
      assertNotSame(string8, string4);
      assertNotSame(string8, string6);
      assertNotSame(string8, string1);
      assertNotSame(string8, string3);
      assertNotSame(string8, string0);
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string8));
      assertFalse(string1.equals((Object)string7));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string8));
      assertFalse(string2.equals((Object)string7));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string8));
      assertFalse(string4.equals((Object)string7));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string3));
      assertFalse(boolean0 == boolean4);
      assertFalse(boolean0 == boolean2);
      assertFalse(boolean1 == boolean4);
      assertFalse(boolean1 == boolean2);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string7));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string6));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string8));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string8));
      assertFalse(string6.equals((Object)string7));
      assertFalse(string6.equals((Object)string0));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean3);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean4);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string8));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string0));
      
      Content[] contentArray0 = new Content[2];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((ExampleObject[]) null).when(content0).examples();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      io.swagger.oas.annotations.parameters.RequestBody requestBody0 = mock(io.swagger.oas.annotations.parameters.RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn(contentArray0).when(requestBody0).content();
      doReturn(stringArray0[3], string5).when(requestBody0).description();
      doReturn(boolean0, boolean2).when(requestBody0).required();
      Components components0 = new Components();
      assertNotNull(components0);
      
      io.swagger.oas.models.parameters.Parameter parameter0 = new io.swagger.oas.models.parameters.Parameter();
      assertNotNull(parameter0);
      assertNull(parameter0.get$ref());
      assertNull(parameter0.getExample());
      assertNull(parameter0.getRequired());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.getName());
      assertNull(parameter0.getExplode());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getIn());
      assertNull(parameter0.getAllowReserved());
      
      String string9 = "io.swagger.jaxrs2.OperationParser";
      io.swagger.oas.models.parameters.Parameter parameter1 = parameter0.$ref(string9);
      assertNotNull(parameter1);
      assertSame(parameter0, parameter1);
      assertNotSame(string9, string5);
      assertNotSame(string9, string3);
      assertNotSame(string9, string2);
      assertNotSame(string9, string8);
      assertNotSame(string9, string0);
      assertNotSame(string9, string1);
      assertNotSame(string9, string4);
      assertNotSame(string9, string6);
      assertNotSame(string9, string7);
      assertSame(parameter1, parameter0);
      assertEquals("io.swagger.jaxrs2.OperationParser", parameter0.get$ref());
      assertNull(parameter0.getExample());
      assertNull(parameter0.getRequired());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.getName());
      assertNull(parameter0.getExplode());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getIn());
      assertNull(parameter0.getAllowReserved());
      assertNull(parameter1.getDescription());
      assertNull(parameter1.getRequired());
      assertNull(parameter1.getAllowReserved());
      assertNull(parameter1.getDeprecated());
      assertNull(parameter1.getExplode());
      assertNull(parameter1.getStyle());
      assertNull(parameter1.getExample());
      assertNull(parameter1.getIn());
      assertEquals("io.swagger.jaxrs2.OperationParser", parameter1.get$ref());
      assertNull(parameter1.getName());
      assertNull(parameter1.getAllowEmptyValue());
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string7));
      
      Map<String, Example> map0 = parameter1.getExamples();
      assertNull(map0);
      assertSame(parameter0, parameter1);
      assertNotSame(string9, string5);
      assertNotSame(string9, string3);
      assertNotSame(string9, string2);
      assertNotSame(string9, string8);
      assertNotSame(string9, string0);
      assertNotSame(string9, string1);
      assertNotSame(string9, string4);
      assertNotSame(string9, string6);
      assertNotSame(string9, string7);
      assertSame(parameter1, parameter0);
      assertEquals("io.swagger.jaxrs2.OperationParser", parameter0.get$ref());
      assertNull(parameter0.getExample());
      assertNull(parameter0.getRequired());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.getName());
      assertNull(parameter0.getExplode());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getIn());
      assertNull(parameter0.getAllowReserved());
      assertNull(parameter1.getDescription());
      assertNull(parameter1.getRequired());
      assertNull(parameter1.getAllowReserved());
      assertNull(parameter1.getDeprecated());
      assertNull(parameter1.getExplode());
      assertNull(parameter1.getStyle());
      assertNull(parameter1.getExample());
      assertNull(parameter1.getIn());
      assertEquals("io.swagger.jaxrs2.OperationParser", parameter1.get$ref());
      assertNull(parameter1.getName());
      assertNull(parameter1.getAllowEmptyValue());
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string7));
      
      Components components1 = components0.examples(map0);
      assertNotNull(components1);
      assertSame(components0, components1);
      assertSame(parameter0, parameter1);
      assertNotSame(string9, string5);
      assertNotSame(string9, string3);
      assertNotSame(string9, string2);
      assertNotSame(string9, string8);
      assertNotSame(string9, string0);
      assertNotSame(string9, string1);
      assertNotSame(string9, string4);
      assertNotSame(string9, string6);
      assertNotSame(string9, string7);
      assertSame(parameter1, parameter0);
      assertSame(components1, components0);
      assertEquals("io.swagger.jaxrs2.OperationParser", parameter0.get$ref());
      assertNull(parameter0.getExample());
      assertNull(parameter0.getRequired());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.getName());
      assertNull(parameter0.getExplode());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getIn());
      assertNull(parameter0.getAllowReserved());
      assertNull(parameter1.getDescription());
      assertNull(parameter1.getRequired());
      assertNull(parameter1.getAllowReserved());
      assertNull(parameter1.getDeprecated());
      assertNull(parameter1.getExplode());
      assertNull(parameter1.getStyle());
      assertNull(parameter1.getExample());
      assertNull(parameter1.getIn());
      assertEquals("io.swagger.jaxrs2.OperationParser", parameter1.get$ref());
      assertNull(parameter1.getName());
      assertNull(parameter1.getAllowEmptyValue());
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string7));
      
      ApiResponses apiResponses0 = new ApiResponses();
      assertNotNull(apiResponses0);
      assertTrue(apiResponses0.isEmpty());
      assertEquals(0, apiResponses0.size());
      
      String string10 = "g<+Ant,AU!3l2";
      io.swagger.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.oas.models.responses.ApiResponse();
      assertNotNull(apiResponse0);
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      
      ApiResponses apiResponses1 = apiResponses0.addApiResponse(string10, apiResponse0);
      assertNotNull(apiResponses1);
      assertSame(apiResponses0, apiResponses1);
      assertNotSame(string10, string4);
      assertNotSame(string10, string2);
      assertNotSame(string10, string5);
      assertNotSame(string10, string9);
      assertNotSame(string10, string3);
      assertNotSame(string10, string6);
      assertNotSame(string10, string8);
      assertNotSame(string10, string7);
      assertNotSame(string10, string0);
      assertNotSame(string10, string1);
      assertSame(apiResponses1, apiResponses0);
      assertFalse(apiResponses0.isEmpty());
      assertEquals(1, apiResponses0.size());
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      assertEquals(1, apiResponses1.size());
      assertFalse(apiResponses1.isEmpty());
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string1));
      
      ApiResponses apiResponses2 = apiResponses1.addApiResponse(string9, apiResponse0);
      assertNotNull(apiResponses2);
      assertNotSame(string9, string10);
      assertNotSame(string9, string5);
      assertNotSame(string9, string3);
      assertNotSame(string9, string2);
      assertNotSame(string9, string8);
      assertNotSame(string9, string0);
      assertNotSame(string9, string1);
      assertNotSame(string9, string4);
      assertNotSame(string9, string6);
      assertNotSame(string9, string7);
      assertSame(apiResponses0, apiResponses2);
      assertSame(apiResponses0, apiResponses1);
      assertNotSame(string10, string4);
      assertNotSame(string10, string2);
      assertNotSame(string10, string5);
      assertNotSame(string10, string9);
      assertNotSame(string10, string3);
      assertNotSame(string10, string6);
      assertNotSame(string10, string8);
      assertNotSame(string10, string7);
      assertNotSame(string10, string0);
      assertNotSame(string10, string1);
      assertSame(apiResponses1, apiResponses2);
      assertSame(apiResponses1, apiResponses0);
      assertSame(apiResponses2, apiResponses0);
      assertSame(apiResponses2, apiResponses1);
      assertFalse(apiResponses0.isEmpty());
      assertEquals(2, apiResponses0.size());
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      assertEquals(2, apiResponses1.size());
      assertFalse(apiResponses1.isEmpty());
      assertEquals(2, apiResponses2.size());
      assertFalse(apiResponses2.isEmpty());
      assertFalse(string9.equals((Object)string10));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string1));
      
      String string11 = "jko;jmHJ|E";
      ApiResponses apiResponses3 = apiResponses2.addApiResponse(string11, apiResponse0);
      assertNotNull(apiResponses3);
      assertSame(apiResponses3, apiResponses2);
      assertSame(apiResponses3, apiResponses1);
      assertSame(apiResponses3, apiResponses0);
      assertNotSame(string9, string11);
      assertNotSame(string9, string10);
      assertNotSame(string9, string5);
      assertNotSame(string9, string3);
      assertNotSame(string9, string2);
      assertNotSame(string9, string8);
      assertNotSame(string9, string0);
      assertNotSame(string9, string1);
      assertNotSame(string9, string4);
      assertNotSame(string9, string6);
      assertNotSame(string9, string7);
      assertSame(apiResponses0, apiResponses2);
      assertSame(apiResponses0, apiResponses3);
      assertSame(apiResponses0, apiResponses1);
      assertNotSame(string10, string4);
      assertNotSame(string10, string2);
      assertNotSame(string10, string5);
      assertNotSame(string10, string9);
      assertNotSame(string10, string3);
      assertNotSame(string10, string11);
      assertNotSame(string10, string6);
      assertNotSame(string10, string8);
      assertNotSame(string10, string7);
      assertNotSame(string10, string0);
      assertNotSame(string10, string1);
      assertSame(apiResponses1, apiResponses3);
      assertSame(apiResponses1, apiResponses2);
      assertSame(apiResponses1, apiResponses0);
      assertSame(apiResponses2, apiResponses0);
      assertSame(apiResponses2, apiResponses3);
      assertSame(apiResponses2, apiResponses1);
      assertNotSame(string11, string2);
      assertNotSame(string11, string5);
      assertNotSame(string11, string4);
      assertNotSame(string11, string6);
      assertNotSame(string11, string7);
      assertNotSame(string11, string3);
      assertNotSame(string11, string9);
      assertNotSame(string11, string0);
      assertNotSame(string11, string1);
      assertNotSame(string11, string8);
      assertNotSame(string11, string10);
      assertEquals(3, apiResponses3.size());
      assertFalse(apiResponses3.isEmpty());
      assertFalse(apiResponses0.isEmpty());
      assertEquals(3, apiResponses0.size());
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      assertEquals(3, apiResponses1.size());
      assertFalse(apiResponses1.isEmpty());
      assertEquals(3, apiResponses2.size());
      assertFalse(apiResponses2.isEmpty());
      assertFalse(string9.equals((Object)string11));
      assertFalse(string9.equals((Object)string10));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string11));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string5));
      assertFalse(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string7));
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string9));
      assertFalse(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string8));
      assertFalse(string11.equals((Object)string10));
      
      ApiResponses apiResponses4 = apiResponses3.addApiResponse(apiResponses1.DEFAULT, apiResponse0);
      assertNotNull(apiResponses4);
      assertSame(apiResponses3, apiResponses2);
      assertSame(apiResponses3, apiResponses1);
      assertSame(apiResponses3, apiResponses4);
      assertSame(apiResponses3, apiResponses0);
      assertSame(apiResponses4, apiResponses1);
      assertSame(apiResponses4, apiResponses3);
      assertSame(apiResponses4, apiResponses2);
      assertSame(apiResponses4, apiResponses0);
      assertNotSame(string9, string11);
      assertNotSame(string9, string10);
      assertNotSame(string9, string5);
      assertNotSame(string9, string3);
      assertNotSame(string9, string2);
      assertNotSame(string9, string8);
      assertNotSame(string9, string0);
      assertNotSame(string9, string1);
      assertNotSame(string9, string4);
      assertNotSame(string9, string6);
      assertNotSame(string9, string7);
      assertSame(apiResponses0, apiResponses4);
      assertSame(apiResponses0, apiResponses2);
      assertSame(apiResponses0, apiResponses3);
      assertSame(apiResponses0, apiResponses1);
      assertNotSame(string10, string4);
      assertNotSame(string10, string2);
      assertNotSame(string10, string5);
      assertNotSame(string10, string9);
      assertNotSame(string10, string3);
      assertNotSame(string10, string11);
      assertNotSame(string10, string6);
      assertNotSame(string10, string8);
      assertNotSame(string10, string7);
      assertNotSame(string10, string0);
      assertNotSame(string10, string1);
      assertSame(apiResponses1, apiResponses4);
      assertSame(apiResponses1, apiResponses3);
      assertSame(apiResponses1, apiResponses2);
      assertSame(apiResponses1, apiResponses0);
      assertSame(apiResponses2, apiResponses0);
      assertSame(apiResponses2, apiResponses3);
      assertSame(apiResponses2, apiResponses1);
      assertSame(apiResponses2, apiResponses4);
      assertNotSame(string11, string2);
      assertNotSame(string11, string5);
      assertNotSame(string11, string4);
      assertNotSame(string11, string6);
      assertNotSame(string11, string7);
      assertNotSame(string11, string3);
      assertNotSame(string11, string9);
      assertNotSame(string11, string0);
      assertNotSame(string11, string1);
      assertNotSame(string11, string8);
      assertNotSame(string11, string10);
      assertEquals(4, apiResponses3.size());
      assertFalse(apiResponses3.isEmpty());
      assertFalse(apiResponses4.isEmpty());
      assertEquals(4, apiResponses4.size());
      assertFalse(apiResponses0.isEmpty());
      assertEquals(4, apiResponses0.size());
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      assertFalse(apiResponses1.isEmpty());
      assertEquals(4, apiResponses1.size());
      assertEquals(4, apiResponses2.size());
      assertFalse(apiResponses2.isEmpty());
      assertFalse(string9.equals((Object)string11));
      assertFalse(string9.equals((Object)string10));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string11));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string5));
      assertFalse(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string7));
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string9));
      assertFalse(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string8));
      assertFalse(string11.equals((Object)string10));
      
      ApiResponses apiResponses5 = apiResponses4._default(apiResponse0);
      assertNotNull(apiResponses5);
      assertSame(apiResponses3, apiResponses2);
      assertSame(apiResponses3, apiResponses1);
      assertSame(apiResponses3, apiResponses4);
      assertSame(apiResponses3, apiResponses5);
      assertSame(apiResponses3, apiResponses0);
      assertSame(apiResponses4, apiResponses1);
      assertSame(apiResponses4, apiResponses3);
      assertSame(apiResponses4, apiResponses2);
      assertSame(apiResponses4, apiResponses5);
      assertSame(apiResponses4, apiResponses0);
      assertSame(apiResponses5, apiResponses4);
      assertSame(apiResponses5, apiResponses0);
      assertSame(apiResponses5, apiResponses2);
      assertSame(apiResponses5, apiResponses1);
      assertSame(apiResponses5, apiResponses3);
      assertNotSame(string9, string11);
      assertNotSame(string9, string10);
      assertNotSame(string9, string5);
      assertNotSame(string9, string3);
      assertNotSame(string9, string2);
      assertNotSame(string9, string8);
      assertNotSame(string9, string0);
      assertNotSame(string9, string1);
      assertNotSame(string9, string4);
      assertNotSame(string9, string6);
      assertNotSame(string9, string7);
      assertSame(apiResponses0, apiResponses4);
      assertSame(apiResponses0, apiResponses5);
      assertSame(apiResponses0, apiResponses2);
      assertSame(apiResponses0, apiResponses3);
      assertSame(apiResponses0, apiResponses1);
      assertNotSame(string10, string4);
      assertNotSame(string10, string2);
      assertNotSame(string10, string5);
      assertNotSame(string10, string9);
      assertNotSame(string10, string3);
      assertNotSame(string10, string11);
      assertNotSame(string10, string6);
      assertNotSame(string10, string8);
      assertNotSame(string10, string7);
      assertNotSame(string10, string0);
      assertNotSame(string10, string1);
      assertSame(apiResponses1, apiResponses4);
      assertSame(apiResponses1, apiResponses3);
      assertSame(apiResponses1, apiResponses2);
      assertSame(apiResponses1, apiResponses5);
      assertSame(apiResponses1, apiResponses0);
      assertSame(apiResponses2, apiResponses0);
      assertSame(apiResponses2, apiResponses5);
      assertSame(apiResponses2, apiResponses3);
      assertSame(apiResponses2, apiResponses1);
      assertSame(apiResponses2, apiResponses4);
      assertNotSame(string11, string2);
      assertNotSame(string11, string5);
      assertNotSame(string11, string4);
      assertNotSame(string11, string6);
      assertNotSame(string11, string7);
      assertNotSame(string11, string3);
      assertNotSame(string11, string9);
      assertNotSame(string11, string0);
      assertNotSame(string11, string1);
      assertNotSame(string11, string8);
      assertNotSame(string11, string10);
      assertEquals(4, apiResponses3.size());
      assertFalse(apiResponses3.isEmpty());
      assertFalse(apiResponses4.isEmpty());
      assertEquals(4, apiResponses4.size());
      assertFalse(apiResponses5.isEmpty());
      assertEquals(4, apiResponses5.size());
      assertFalse(apiResponses0.isEmpty());
      assertEquals(4, apiResponses0.size());
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      assertFalse(apiResponses1.isEmpty());
      assertEquals(4, apiResponses1.size());
      assertEquals(4, apiResponses2.size());
      assertFalse(apiResponses2.isEmpty());
      assertFalse(string9.equals((Object)string11));
      assertFalse(string9.equals((Object)string10));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string11));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string5));
      assertFalse(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string7));
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string9));
      assertFalse(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string8));
      assertFalse(string11.equals((Object)string10));
      
      components1.setResponses(apiResponses5);
      assertSame(components0, components1);
      assertSame(parameter0, parameter1);
      assertNotSame(string9, string11);
      assertNotSame(string9, string10);
      assertNotSame(string9, string5);
      assertNotSame(string9, string3);
      assertNotSame(string9, string2);
      assertNotSame(string9, string8);
      assertNotSame(string9, string0);
      assertNotSame(string9, string1);
      assertNotSame(string9, string4);
      assertNotSame(string9, string6);
      assertNotSame(string9, string7);
      assertSame(parameter1, parameter0);
      assertSame(components1, components0);
      assertSame(apiResponses0, apiResponses4);
      assertSame(apiResponses0, apiResponses5);
      assertSame(apiResponses0, apiResponses2);
      assertSame(apiResponses0, apiResponses3);
      assertSame(apiResponses0, apiResponses1);
      assertNotSame(string10, string4);
      assertNotSame(string10, string2);
      assertNotSame(string10, string5);
      assertNotSame(string10, string9);
      assertNotSame(string10, string3);
      assertNotSame(string10, string11);
      assertNotSame(string10, string6);
      assertNotSame(string10, string8);
      assertNotSame(string10, string7);
      assertNotSame(string10, string0);
      assertNotSame(string10, string1);
      assertSame(apiResponses1, apiResponses4);
      assertSame(apiResponses1, apiResponses3);
      assertSame(apiResponses1, apiResponses2);
      assertSame(apiResponses1, apiResponses5);
      assertSame(apiResponses1, apiResponses0);
      assertSame(apiResponses2, apiResponses0);
      assertSame(apiResponses2, apiResponses5);
      assertSame(apiResponses2, apiResponses3);
      assertSame(apiResponses2, apiResponses1);
      assertSame(apiResponses2, apiResponses4);
      assertNotSame(string11, string2);
      assertNotSame(string11, string5);
      assertNotSame(string11, string4);
      assertNotSame(string11, string6);
      assertNotSame(string11, string7);
      assertNotSame(string11, string3);
      assertNotSame(string11, string9);
      assertNotSame(string11, string0);
      assertNotSame(string11, string1);
      assertNotSame(string11, string8);
      assertNotSame(string11, string10);
      assertSame(apiResponses3, apiResponses2);
      assertSame(apiResponses3, apiResponses1);
      assertSame(apiResponses3, apiResponses4);
      assertSame(apiResponses3, apiResponses5);
      assertSame(apiResponses3, apiResponses0);
      assertSame(apiResponses4, apiResponses1);
      assertSame(apiResponses4, apiResponses3);
      assertSame(apiResponses4, apiResponses2);
      assertSame(apiResponses4, apiResponses5);
      assertSame(apiResponses4, apiResponses0);
      assertSame(apiResponses5, apiResponses4);
      assertSame(apiResponses5, apiResponses0);
      assertSame(apiResponses5, apiResponses2);
      assertSame(apiResponses5, apiResponses1);
      assertSame(apiResponses5, apiResponses3);
      assertEquals(4, apiResponses3.size());
      assertFalse(apiResponses3.isEmpty());
      assertFalse(apiResponses4.isEmpty());
      assertEquals(4, apiResponses4.size());
      assertFalse(apiResponses5.isEmpty());
      assertEquals(4, apiResponses5.size());
      assertEquals("io.swagger.jaxrs2.OperationParser", parameter0.get$ref());
      assertNull(parameter0.getExample());
      assertNull(parameter0.getRequired());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.getName());
      assertNull(parameter0.getExplode());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getIn());
      assertNull(parameter0.getAllowReserved());
      assertNull(parameter1.getDescription());
      assertNull(parameter1.getRequired());
      assertNull(parameter1.getAllowReserved());
      assertNull(parameter1.getDeprecated());
      assertNull(parameter1.getExplode());
      assertNull(parameter1.getStyle());
      assertNull(parameter1.getExample());
      assertNull(parameter1.getIn());
      assertEquals("io.swagger.jaxrs2.OperationParser", parameter1.get$ref());
      assertNull(parameter1.getName());
      assertNull(parameter1.getAllowEmptyValue());
      assertFalse(apiResponses0.isEmpty());
      assertEquals(4, apiResponses0.size());
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      assertFalse(apiResponses1.isEmpty());
      assertEquals(4, apiResponses1.size());
      assertEquals(4, apiResponses2.size());
      assertFalse(apiResponses2.isEmpty());
      assertFalse(string9.equals((Object)string11));
      assertFalse(string9.equals((Object)string10));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string11));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string5));
      assertFalse(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string7));
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string9));
      assertFalse(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string8));
      assertFalse(string11.equals((Object)string10));
      
      // Undeclared exception!
      try { 
        OperationParser.getRequestBody(requestBody0, components1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test005()  throws Throwable  {
      String string0 = "NDWl=Ei6t I4OYO%";
      String string1 = null;
      String string2 = "S=E` ixK63lz";
      String string3 = "[property '";
      String string4 = "default";
      LinkParameter linkParameter0 = mock(LinkParameter.class, new ViolatedAssumptionAnswer());
      ApiResponse[] apiResponseArray0 = new ApiResponse[0];
      Produces produces0 = null;
      Components components0 = new Components();
      assertNotNull(components0);
      
      Encoding encoding0 = new Encoding();
      assertNotNull(encoding0);
      assertNull(encoding0.getStyle());
      assertNull(encoding0.getExplode());
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getAllowReserved());
      
      Map<String, Header> map0 = encoding0.getHeaders();
      assertNull(map0);
      assertNull(encoding0.getStyle());
      assertNull(encoding0.getExplode());
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getAllowReserved());
      
      Components components1 = components0.headers(map0);
      assertNotNull(components1);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertNull(encoding0.getStyle());
      assertNull(encoding0.getExplode());
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getAllowReserved());
      
      String string5 = "M*v02M|x8\"q";
      io.swagger.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.oas.models.responses.ApiResponse();
      assertNotNull(apiResponse0);
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      
      Components components2 = components1.headers(map0);
      assertNotNull(components2);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertNull(encoding0.getStyle());
      assertNull(encoding0.getExplode());
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getAllowReserved());
      
      HashMap<String, SecurityScheme> hashMap0 = new HashMap<String, SecurityScheme>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Components components3 = components2.securitySchemes(hashMap0);
      assertNotNull(components3);
      assertSame(components3, components1);
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertSame(components2, components0);
      assertSame(components2, components3);
      assertSame(components2, components1);
      assertNull(encoding0.getStyle());
      assertNull(encoding0.getExplode());
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getAllowReserved());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Example example0 = new Example();
      assertNotNull(example0);
      assertNull(example0.getDescription());
      assertNull(example0.get$ref());
      assertNull(example0.getSummary());
      assertNull(example0.getExternalValue());
      
      Components components4 = components3.addExamples(string5, example0);
      assertNotNull(components4);
      assertSame(components3, components1);
      assertSame(components3, components4);
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertSame(components4, components1);
      assertSame(components4, components2);
      assertSame(components4, components3);
      assertSame(components4, components0);
      assertSame(components0, components3);
      assertSame(components0, components4);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components1, components2);
      assertSame(components1, components4);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertNotSame(string5, string3);
      assertNotSame(string5, string0);
      assertNotSame(string5, string4);
      assertNotSame(string5, string2);
      assertSame(components2, components0);
      assertSame(components2, components4);
      assertSame(components2, components3);
      assertSame(components2, components1);
      assertNull(example0.getDescription());
      assertNull(example0.get$ref());
      assertNull(example0.getSummary());
      assertNull(example0.getExternalValue());
      assertNull(encoding0.getStyle());
      assertNull(encoding0.getExplode());
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getAllowReserved());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      
      Optional<ApiResponses> optional0 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components4);
      assertNotNull(optional0);
      assertEquals(0, apiResponseArray0.length);
      assertSame(components3, components1);
      assertSame(components3, components4);
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertSame(components4, components1);
      assertSame(components4, components2);
      assertSame(components4, components3);
      assertSame(components4, components0);
      assertSame(components0, components3);
      assertSame(components0, components4);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components1, components2);
      assertSame(components1, components4);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertNotSame(string5, string3);
      assertNotSame(string5, string0);
      assertNotSame(string5, string4);
      assertNotSame(string5, string2);
      assertSame(components2, components0);
      assertSame(components2, components4);
      assertSame(components2, components3);
      assertSame(components2, components1);
      assertNull(example0.getDescription());
      assertNull(example0.get$ref());
      assertNull(example0.getSummary());
      assertNull(example0.getExternalValue());
      assertNull(encoding0.getStyle());
      assertNull(encoding0.getExplode());
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getAllowReserved());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
  }

  @Test(timeout = 11000)
  public void test006()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = "class DateSchema {\n";
      String string1 = "YzT~7Fc\\1";
      stringArray0[1] = string1;
      String string2 = "";
      stringArray0[2] = string2;
      String string3 = "";
      stringArray0[3] = string3;
      String string4 = "";
      String string5 = "CLDp\"K@ R_)v";
      ExternalDocumentation externalDocumentation0 = null;
      String string6 = "9<+dmx8KpZ#7?{";
      boolean boolean0 = false;
      String string7 = "N~ OrimD?\"y\\\\TG";
      boolean boolean1 = true;
      String string8 = "com.fasterxml.jackson.databind.deser.std.StringDeserializer";
      String string9 = "jd{sa27zb<R%cfp#$";
      boolean boolean2 = false;
      String string10 = "Expected space separating root-level values";
      boolean boolean3 = true;
      String string11 = "FSZk";
      String string12 = "io.swagger.jaxrs2.OperationParser";
      int int0 = (-878);
      String string13 = "start an array";
      Server[] serverArray0 = null;
      Optional<List<io.swagger.oas.models.servers.Server>> optional0 = OperationParser.getServers(serverArray0);
      assertNotNull(optional0);
      
      boolean boolean4 = false;
      String string14 = "6qZ+N$nAI{:S )";
      boolean boolean5 = true;
      boolean boolean6 = false;
      int int1 = 36;
      boolean boolean7 = true;
      String string15 = "";
      String string16 = null;
      int int2 = 867;
      boolean boolean8 = true;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(stringArray0).when(schema0).allowableValues();
      doReturn(string7, stringArray0[0]).when(schema0).defaultValue();
      doReturn(boolean4).when(schema0).deprecated();
      doReturn(string14, string0).when(schema0).description();
      doReturn(string2, stringArray0[1], string15).when(schema0).example();
      doReturn(boolean5, boolean1).when(schema0).exclusiveMaximum();
      doReturn(boolean6).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema0).externalDocs();
      doReturn(string6, string16).when(schema0).format();
      doReturn(int1).when(schema0).maxLength();
      doReturn(int0).when(schema0).maxProperties();
      doReturn(int1, int2).when(schema0).minProperties();
      doReturn(string2).when(schema0).pattern();
      doReturn(boolean7, boolean8).when(schema0).readOnly();
      doReturn(string10, stringArray0[1]).when(schema0).ref();
      doReturn(string9, string0).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional1 = (Optional<io.swagger.oas.models.media.Schema>)OperationParser.getSchemaFromAnnotation(schema0);
      assertNotNull(optional1);
      assertEquals(4, stringArray0.length);
      assertNotSame(string15, string1);
      assertNotSame(string15, string12);
      assertNotSame(string15, string0);
      assertSame(string15, string2);
      assertSame(string15, string4);
      assertNotSame(string15, string10);
      assertSame(string15, string3);
      assertNotSame(string15, string5);
      assertNotSame(string15, string9);
      assertNotSame(string15, string8);
      assertNotSame(string15, string6);
      assertNotSame(string15, string13);
      assertNotSame(string15, string11);
      assertNotSame(string15, string14);
      assertNotSame(string15, string7);
      assertNotSame(string9, string14);
      assertNotSame(string9, string10);
      assertNotSame(string9, string3);
      assertNotSame(string9, string15);
      assertNotSame(string9, string1);
      assertNotSame(string9, string7);
      assertNotSame(string9, string11);
      assertNotSame(string9, string2);
      assertNotSame(string9, string0);
      assertNotSame(string9, string5);
      assertNotSame(string9, string4);
      assertNotSame(string9, string13);
      assertNotSame(string9, string6);
      assertNotSame(string9, string8);
      assertNotSame(string9, string12);
      assertNotSame(string0, string14);
      assertNotSame(string0, string7);
      assertNotSame(string0, string10);
      assertNotSame(string0, string1);
      assertNotSame(string0, string12);
      assertNotSame(string0, string4);
      assertNotSame(string0, string5);
      assertNotSame(string0, string9);
      assertNotSame(string0, string3);
      assertNotSame(string0, string15);
      assertNotSame(string0, string8);
      assertNotSame(string0, string6);
      assertNotSame(string0, string13);
      assertNotSame(string0, string2);
      assertNotSame(string0, string11);
      assertNotSame(string10, string2);
      assertNotSame(string10, string12);
      assertNotSame(string10, string7);
      assertNotSame(string10, string9);
      assertNotSame(string10, string3);
      assertNotSame(string10, string15);
      assertNotSame(string10, string8);
      assertNotSame(string10, string0);
      assertNotSame(string10, string4);
      assertNotSame(string10, string1);
      assertNotSame(string10, string5);
      assertNotSame(string10, string11);
      assertNotSame(string10, string6);
      assertNotSame(string10, string13);
      assertNotSame(string10, string14);
      assertNotSame(string2, string8);
      assertSame(string2, string4);
      assertNotSame(string2, string5);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string7);
      assertNotSame(string2, string11);
      assertNotSame(string2, string6);
      assertNotSame(string2, string13);
      assertNotSame(string2, string9);
      assertSame(string2, string3);
      assertNotSame(string2, string12);
      assertSame(string2, string15);
      assertNotSame(string2, string10);
      assertNotSame(string2, string14);
      assertNotSame(string14, string7);
      assertNotSame(string14, string0);
      assertNotSame(string14, string11);
      assertNotSame(string14, string10);
      assertNotSame(string14, string12);
      assertNotSame(string14, string2);
      assertNotSame(string14, string6);
      assertNotSame(string14, string13);
      assertNotSame(string14, string1);
      assertNotSame(string14, string5);
      assertNotSame(string14, string9);
      assertNotSame(string14, string4);
      assertNotSame(string14, string8);
      assertNotSame(string14, string3);
      assertNotSame(string14, string15);
      assertNotSame(string6, string1);
      assertNotSame(string6, string12);
      assertNotSame(string6, string2);
      assertNotSame(string6, string13);
      assertNotSame(string6, string15);
      assertNotSame(string6, string9);
      assertNotSame(string6, string11);
      assertNotSame(string6, string3);
      assertNotSame(string6, string7);
      assertNotSame(string6, string14);
      assertNotSame(string6, string0);
      assertNotSame(string6, string5);
      assertNotSame(string6, string10);
      assertNotSame(string6, string4);
      assertNotSame(string6, string8);
      assertNotSame(string7, string4);
      assertNotSame(string7, string5);
      assertNotSame(string7, string6);
      assertNotSame(string7, string13);
      assertNotSame(string7, string11);
      assertNotSame(string7, string9);
      assertNotSame(string7, string8);
      assertNotSame(string7, string3);
      assertNotSame(string7, string15);
      assertNotSame(string7, string1);
      assertNotSame(string7, string0);
      assertNotSame(string7, string2);
      assertNotSame(string7, string12);
      assertNotSame(string7, string10);
      assertNotSame(string7, string14);
      assertFalse(string15.equals((Object)string1));
      assertFalse(string15.equals((Object)string12));
      assertFalse(string15.equals((Object)string6));
      assertFalse(string15.equals((Object)string13));
      assertFalse(string15.equals((Object)string11));
      assertFalse(string15.equals((Object)string0));
      assertFalse(string15.equals((Object)string14));
      assertFalse(string15.equals((Object)string7));
      assertFalse(string15.equals((Object)string10));
      assertFalse(string15.equals((Object)string5));
      assertFalse(string15.equals((Object)string9));
      assertFalse(string15.equals((Object)string8));
      assertFalse(string0.equals((Object)string14));
      assertFalse(string0.equals((Object)string7));
      assertFalse(string0.equals((Object)string10));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string12));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string9));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string15));
      assertFalse(string0.equals((Object)string8));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string13));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string11));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(boolean8 == boolean2);
      assertFalse(boolean8 == boolean6);
      assertFalse(boolean8 == boolean4);
      assertFalse(boolean8 == boolean0);
      assertFalse(string2.equals((Object)string8));
      assertFalse(string2.equals((Object)string7));
      assertFalse(string2.equals((Object)string11));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string2.equals((Object)string13));
      assertFalse(string2.equals((Object)string9));
      assertFalse(string2.equals((Object)string12));
      assertFalse(string2.equals((Object)string10));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string14));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string12));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string13));
      assertFalse(string6.equals((Object)string15));
      assertFalse(string6.equals((Object)string9));
      assertFalse(string6.equals((Object)string11));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string7));
      assertFalse(string6.equals((Object)string14));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string10));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string8));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string13));
      assertFalse(string7.equals((Object)string11));
      assertFalse(string7.equals((Object)string9));
      assertFalse(string7.equals((Object)string8));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string15));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string12));
      assertFalse(string7.equals((Object)string10));
      assertFalse(string7.equals((Object)string14));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1 == boolean4);
      assertFalse(boolean1 == boolean6);
      assertFalse(boolean1 == boolean2);
      assertFalse(string9.equals((Object)string14));
      assertFalse(string9.equals((Object)string10));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string15));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string11));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string13));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string12));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string12));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string15));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string11));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string13));
      assertFalse(string10.equals((Object)string14));
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean8);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean5);
      assertFalse(boolean4 == boolean7);
      assertFalse(string14.equals((Object)string7));
      assertFalse(string14.equals((Object)string0));
      assertFalse(string14.equals((Object)string11));
      assertFalse(string14.equals((Object)string10));
      assertFalse(string14.equals((Object)string12));
      assertFalse(string14.equals((Object)string2));
      assertFalse(string14.equals((Object)string6));
      assertFalse(string14.equals((Object)string13));
      assertFalse(string14.equals((Object)string1));
      assertFalse(string14.equals((Object)string5));
      assertFalse(string14.equals((Object)string9));
      assertFalse(string14.equals((Object)string4));
      assertFalse(string14.equals((Object)string8));
      assertFalse(string14.equals((Object)string3));
      assertFalse(string14.equals((Object)string15));
      assertFalse(boolean5 == boolean6);
      assertFalse(boolean5 == boolean0);
      assertFalse(boolean5 == boolean4);
      assertFalse(boolean5 == boolean2);
      assertFalse(boolean6 == boolean5);
      assertFalse(boolean6 == boolean7);
      assertFalse(boolean6 == boolean8);
      assertFalse(boolean6 == boolean1);
      assertFalse(boolean6 == boolean3);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(boolean7 == boolean0);
      assertFalse(boolean7 == boolean2);
      assertFalse(boolean7 == boolean6);
      assertFalse(boolean7 == boolean4);
      
      String string17 = "";
      String string18 = null;
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(string17).when(license0).name();
      doReturn(string18).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional2 = OperationParser.getLicense(license0);
      assertNotNull(optional2);
      assertNotSame(string17, string9);
      assertNotSame(string17, string11);
      assertNotSame(string17, string7);
      assertSame(string17, string15);
      assertSame(string17, string3);
      assertNotSame(string17, string5);
      assertNotSame(string17, string10);
      assertNotSame(string17, string0);
      assertSame(string17, string2);
      assertNotSame(string17, string1);
      assertNotSame(string17, string8);
      assertSame(string17, string4);
      assertNotSame(string17, string12);
      assertNotSame(string17, string14);
      assertNotSame(string17, string6);
      assertNotSame(string17, string13);
      assertFalse(string17.equals((Object)string9));
      assertFalse(string17.equals((Object)string11));
      assertFalse(string17.equals((Object)string8));
      assertFalse(string17.equals((Object)string7));
      assertFalse(string17.equals((Object)string12));
      assertFalse(string17.equals((Object)string5));
      assertFalse(string17.equals((Object)string10));
      assertFalse(string17.equals((Object)string0));
      assertFalse(string17.equals((Object)string1));
      assertFalse(string17.equals((Object)string14));
      assertFalse(string17.equals((Object)string6));
      assertFalse(string17.equals((Object)string13));
      
      String string19 = "H";
      Content[] contentArray0 = new Content[0];
      io.swagger.oas.annotations.parameters.RequestBody requestBody0 = mock(io.swagger.oas.annotations.parameters.RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn(contentArray0).when(requestBody0).content();
      doReturn(string19, string1).when(requestBody0).description();
      doReturn(boolean6).when(requestBody0).required();
      Components components0 = new Components();
      assertNotNull(components0);
      
      HashMap<String, io.swagger.oas.models.parameters.Parameter> hashMap0 = new HashMap<String, io.swagger.oas.models.parameters.Parameter>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Components components1 = components0.parameters(hashMap0);
      assertNotNull(components1);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Encoding encoding0 = new Encoding();
      assertNotNull(encoding0);
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getAllowReserved());
      assertNull(encoding0.getExplode());
      assertNull(encoding0.getStyle());
      
      String string20 = "czeHQ])Shh'RG|";
      Encoding encoding1 = encoding0.style(string20);
      assertNotNull(encoding1);
      assertSame(encoding0, encoding1);
      assertNotSame(string20, string17);
      assertNotSame(string20, string15);
      assertNotSame(string20, string9);
      assertNotSame(string20, string7);
      assertNotSame(string20, string11);
      assertNotSame(string20, string10);
      assertNotSame(string20, string4);
      assertNotSame(string20, string0);
      assertNotSame(string20, string1);
      assertNotSame(string20, string3);
      assertNotSame(string20, string5);
      assertNotSame(string20, string8);
      assertNotSame(string20, string19);
      assertNotSame(string20, string12);
      assertNotSame(string20, string2);
      assertNotSame(string20, string14);
      assertNotSame(string20, string6);
      assertNotSame(string20, string13);
      assertSame(encoding1, encoding0);
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getAllowReserved());
      assertEquals("czeHQ])Shh'RG|", encoding0.getStyle());
      assertNull(encoding0.getExplode());
      assertNull(encoding1.getAllowReserved());
      assertNull(encoding1.getContentType());
      assertEquals("czeHQ])Shh'RG|", encoding1.getStyle());
      assertNull(encoding1.getExplode());
      assertFalse(string20.equals((Object)string17));
      assertFalse(string20.equals((Object)string15));
      assertFalse(string20.equals((Object)string9));
      assertFalse(string20.equals((Object)string7));
      assertFalse(string20.equals((Object)string11));
      assertFalse(string20.equals((Object)string10));
      assertFalse(string20.equals((Object)string4));
      assertFalse(string20.equals((Object)string0));
      assertFalse(string20.equals((Object)string1));
      assertFalse(string20.equals((Object)string3));
      assertFalse(string20.equals((Object)string5));
      assertFalse(string20.equals((Object)string8));
      assertFalse(string20.equals((Object)string19));
      assertFalse(string20.equals((Object)string12));
      assertFalse(string20.equals((Object)string2));
      assertFalse(string20.equals((Object)string14));
      assertFalse(string20.equals((Object)string6));
      assertFalse(string20.equals((Object)string13));
      
      String string21 = components1.toString();
      assertNotNull(string21);
      assertNotSame(string21, string12);
      assertNotSame(string21, string17);
      assertNotSame(string21, string2);
      assertNotSame(string21, string7);
      assertNotSame(string21, string10);
      assertNotSame(string21, string9);
      assertNotSame(string21, string3);
      assertNotSame(string21, string15);
      assertNotSame(string21, string19);
      assertNotSame(string21, string8);
      assertNotSame(string21, string1);
      assertNotSame(string21, string20);
      assertNotSame(string21, string0);
      assertNotSame(string21, string4);
      assertNotSame(string21, string5);
      assertNotSame(string21, string11);
      assertNotSame(string21, string6);
      assertNotSame(string21, string13);
      assertNotSame(string21, string14);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(string21.equals((Object)string12));
      assertFalse(string21.equals((Object)string17));
      assertFalse(string21.equals((Object)string2));
      assertFalse(string21.equals((Object)string7));
      assertFalse(string21.equals((Object)string10));
      assertFalse(string21.equals((Object)string9));
      assertFalse(string21.equals((Object)string3));
      assertFalse(string21.equals((Object)string15));
      assertFalse(string21.equals((Object)string19));
      assertFalse(string21.equals((Object)string8));
      assertFalse(string21.equals((Object)string1));
      assertFalse(string21.equals((Object)string20));
      assertFalse(string21.equals((Object)string0));
      assertFalse(string21.equals((Object)string4));
      assertFalse(string21.equals((Object)string5));
      assertFalse(string21.equals((Object)string11));
      assertFalse(string21.equals((Object)string6));
      assertFalse(string21.equals((Object)string13));
      assertFalse(string21.equals((Object)string14));
      
      Optional<RequestBody> optional3 = OperationParser.getRequestBody(requestBody0, components0);
      assertNotNull(optional3);
      assertEquals(0, contentArray0.length);
      assertNotSame(string1, string4);
      assertNotSame(string1, string5);
      assertNotSame(string1, string11);
      assertNotSame(string1, string17);
      assertNotSame(string1, string15);
      assertNotSame(string1, string8);
      assertNotSame(string1, string9);
      assertNotSame(string1, string19);
      assertNotSame(string1, string21);
      assertNotSame(string1, string0);
      assertNotSame(string1, string20);
      assertNotSame(string1, string3);
      assertNotSame(string1, string12);
      assertNotSame(string1, string2);
      assertNotSame(string1, string7);
      assertNotSame(string1, string10);
      assertNotSame(string1, string14);
      assertNotSame(string1, string6);
      assertNotSame(string1, string13);
      assertNotSame(string19, string14);
      assertNotSame(string19, string0);
      assertNotSame(string19, string1);
      assertNotSame(string19, string17);
      assertNotSame(string19, string20);
      assertNotSame(string19, string2);
      assertNotSame(string19, string7);
      assertNotSame(string19, string11);
      assertNotSame(string19, string4);
      assertNotSame(string19, string6);
      assertNotSame(string19, string13);
      assertNotSame(string19, string3);
      assertNotSame(string19, string5);
      assertNotSame(string19, string15);
      assertNotSame(string19, string8);
      assertNotSame(string19, string21);
      assertNotSame(string19, string9);
      assertNotSame(string19, string12);
      assertNotSame(string19, string10);
      assertSame(components0, components1);
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string11));
      assertFalse(string1.equals((Object)string17));
      assertFalse(string1.equals((Object)string15));
      assertFalse(string1.equals((Object)string8));
      assertFalse(string1.equals((Object)string9));
      assertFalse(string1.equals((Object)string19));
      assertFalse(string1.equals((Object)string21));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string20));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string12));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string7));
      assertFalse(string1.equals((Object)string10));
      assertFalse(string1.equals((Object)string14));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string13));
      assertFalse(string19.equals((Object)string14));
      assertFalse(string19.equals((Object)string0));
      assertFalse(string19.equals((Object)string1));
      assertFalse(string19.equals((Object)string17));
      assertFalse(string19.equals((Object)string20));
      assertFalse(string19.equals((Object)string2));
      assertFalse(string19.equals((Object)string7));
      assertFalse(string19.equals((Object)string11));
      assertFalse(string19.equals((Object)string4));
      assertFalse(string19.equals((Object)string6));
      assertFalse(string19.equals((Object)string13));
      assertFalse(string19.equals((Object)string3));
      assertFalse(string19.equals((Object)string5));
      assertFalse(string19.equals((Object)string15));
      assertFalse(string19.equals((Object)string8));
      assertFalse(string19.equals((Object)string21));
      assertFalse(string19.equals((Object)string9));
      assertFalse(string19.equals((Object)string12));
      assertFalse(string19.equals((Object)string10));
      assertFalse(boolean6 == boolean5);
      assertFalse(boolean6 == boolean7);
      assertFalse(boolean6 == boolean8);
      assertFalse(boolean6 == boolean1);
      assertFalse(boolean6 == boolean3);
      
      LinkParameter[] linkParameterArray0 = new LinkParameter[2];
      String string22 = "";
      linkParameterArray0[1] = linkParameterArray0[0];
      // Undeclared exception!
      try { 
        OperationParser.getLinkParameters(linkParameterArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test007()  throws Throwable  {
      io.swagger.oas.models.media.Schema<Integer> schema0 = new io.swagger.oas.models.media.Schema<Integer>();
      assertNotNull(schema0);
      assertNull(schema0.getMinLength());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getDescription());
      assertNull(schema0.getType());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.get$ref());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getTitle());
      assertNull(schema0.getPattern());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getMinItems());
      assertNull(schema0.getFormat());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getNullable());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getName());
      assertNull(schema0.getExclusiveMinimum());
      
      String string0 = "Gn4P>QrS8;Q1'A]Y+";
      Encoding encoding0 = new Encoding();
      assertNotNull(encoding0);
      assertNull(encoding0.getExplode());
      assertNull(encoding0.getStyle());
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getAllowReserved());
      
      HashMap<String, Encoding> hashMap0 = new HashMap<String, Encoding>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Example example0 = null;
      String string1 = "' has value that is not of type ObjectNode (but ";
      String string2 = "L2,mE}E";
      String string3 = "U\\";
      String string4 = "}<siQs.SR8`lKk X";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[4];
      stringArray0[1] = string1;
      String string5 = "Ky";
      stringArray0[2] = string5;
      String string6 = "Can not pass null JsonSerializer";
      String string7 = "com.fasterxml.jackson.databind.SerializationConfig";
      String string8 = "    url: ";
      String string9 = "";
      String string10 = "";
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      int int0 = (-1617);
      int int1 = 1024;
      String string11 = null;
      boolean boolean0 = true;
      String string12 = "#/components/schemas/";
      boolean boolean1 = false;
      boolean boolean2 = false;
      String string13 = null;
      String string14 = "c";
      ApiResponse[] apiResponseArray0 = null;
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      assertNotNull(components0);
      
      String string15 = "XM'%qFBO-cPT";
      io.swagger.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.oas.models.responses.ApiResponse();
      assertNotNull(apiResponse0);
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      
      Components components1 = components0.addResponses(string15, apiResponse0);
      assertNotNull(components1);
      assertNotSame(string15, string10);
      assertNotSame(string15, string7);
      assertNotSame(string15, string1);
      assertNotSame(string15, string4);
      assertNotSame(string15, string9);
      assertNotSame(string15, string2);
      assertNotSame(string15, string8);
      assertNotSame(string15, string3);
      assertNotSame(string15, string12);
      assertNotSame(string15, string0);
      assertNotSame(string15, string5);
      assertNotSame(string15, string14);
      assertNotSame(string15, string6);
      assertSame(components1, components0);
      assertSame(components0, components1);
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      assertFalse(string15.equals((Object)string10));
      assertFalse(string15.equals((Object)string7));
      assertFalse(string15.equals((Object)string1));
      assertFalse(string15.equals((Object)string4));
      assertFalse(string15.equals((Object)string9));
      assertFalse(string15.equals((Object)string2));
      assertFalse(string15.equals((Object)string8));
      assertFalse(string15.equals((Object)string3));
      assertFalse(string15.equals((Object)string12));
      assertFalse(string15.equals((Object)string0));
      assertFalse(string15.equals((Object)string5));
      assertFalse(string15.equals((Object)string14));
      assertFalse(string15.equals((Object)string6));
      
      Map<String, SecurityScheme> map0 = null;
      Components components2 = components1.securitySchemes(map0);
      assertNotNull(components2);
      assertNotSame(string15, string10);
      assertNotSame(string15, string7);
      assertNotSame(string15, string1);
      assertNotSame(string15, string4);
      assertNotSame(string15, string9);
      assertNotSame(string15, string2);
      assertNotSame(string15, string8);
      assertNotSame(string15, string3);
      assertNotSame(string15, string12);
      assertNotSame(string15, string0);
      assertNotSame(string15, string5);
      assertNotSame(string15, string14);
      assertNotSame(string15, string6);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      assertFalse(string15.equals((Object)string10));
      assertFalse(string15.equals((Object)string7));
      assertFalse(string15.equals((Object)string1));
      assertFalse(string15.equals((Object)string4));
      assertFalse(string15.equals((Object)string9));
      assertFalse(string15.equals((Object)string2));
      assertFalse(string15.equals((Object)string8));
      assertFalse(string15.equals((Object)string3));
      assertFalse(string15.equals((Object)string12));
      assertFalse(string15.equals((Object)string0));
      assertFalse(string15.equals((Object)string5));
      assertFalse(string15.equals((Object)string14));
      assertFalse(string15.equals((Object)string6));
      
      Callback callback0 = new Callback();
      assertNotNull(callback0);
      assertEquals(0, callback0.size());
      assertTrue(callback0.isEmpty());
      
      Optional<ApiResponses> optional0 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components2);
      assertNotNull(optional0);
      assertNotSame(string15, string10);
      assertNotSame(string15, string7);
      assertNotSame(string15, string1);
      assertNotSame(string15, string4);
      assertNotSame(string15, string9);
      assertNotSame(string15, string2);
      assertNotSame(string15, string8);
      assertNotSame(string15, string3);
      assertNotSame(string15, string12);
      assertNotSame(string15, string0);
      assertNotSame(string15, string5);
      assertNotSame(string15, string14);
      assertNotSame(string15, string6);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      assertFalse(string15.equals((Object)string10));
      assertFalse(string15.equals((Object)string7));
      assertFalse(string15.equals((Object)string1));
      assertFalse(string15.equals((Object)string4));
      assertFalse(string15.equals((Object)string9));
      assertFalse(string15.equals((Object)string2));
      assertFalse(string15.equals((Object)string8));
      assertFalse(string15.equals((Object)string3));
      assertFalse(string15.equals((Object)string12));
      assertFalse(string15.equals((Object)string0));
      assertFalse(string15.equals((Object)string5));
      assertFalse(string15.equals((Object)string14));
      assertFalse(string15.equals((Object)string6));
  }

  @Test(timeout = 11000)
  public void test008()  throws Throwable  {
      LinkParameter[] linkParameterArray0 = new LinkParameter[9];
      String string0 = null;
      String string1 = "rHv_4YD";
      String string2 = "IiZp}s]";
      String string3 = "/C<d2ZooMue\\N79";
      LinkParameter linkParameter0 = mock(LinkParameter.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(linkParameter0).expression();
      doReturn(string0, string1, string0, string2, string3).when(linkParameter0).name();
      linkParameterArray0[0] = linkParameter0;
      linkParameterArray0[1] = linkParameterArray0[0];
      linkParameterArray0[2] = linkParameterArray0[1];
      linkParameterArray0[3] = linkParameterArray0[2];
      linkParameterArray0[4] = linkParameterArray0[3];
      linkParameterArray0[5] = linkParameterArray0[4];
      linkParameterArray0[6] = linkParameterArray0[5];
      linkParameterArray0[7] = linkParameterArray0[6];
      linkParameterArray0[8] = linkParameterArray0[7];
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameterArray0);
      assertNotNull(map0);
      assertEquals(9, linkParameterArray0.length);
      assertEquals(2, map0.size());
      assertFalse(map0.isEmpty());
      
      String string4 = "b,]-_di[b";
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn(string4, (String) null).when(contact0).email();
      doReturn(string2, (String) null).when(contact0).name();
      doReturn(string3, (String) null).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional0 = OperationParser.getContact(contact0);
      assertNotNull(optional0);
      assertNotSame(string4, string2);
      assertNotSame(string4, string3);
      assertNotSame(string4, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string4);
      assertNotSame(string3, string4);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      Contact contact1 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn(string4, (String) null).when(contact1).email();
      doReturn(string0).when(contact1).name();
      doReturn(string1, (String) null).when(contact1).url();
      Optional<io.swagger.oas.models.info.Contact> optional1 = OperationParser.getContact(contact1);
      assertNotNull(optional1);
      assertNotSame(string4, string2);
      assertNotSame(string4, string3);
      assertNotSame(string4, string1);
      assertNotSame(string1, string3);
      assertNotSame(string1, string4);
      assertNotSame(string1, string2);
      assertNotSame(optional1, optional0);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string2));
      assertFalse(optional1.equals((Object)optional0));
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = string3;
      stringArray0[1] = string2;
      stringArray0[2] = string1;
      stringArray0[3] = string1;
      stringArray0[4] = string1;
      stringArray0[5] = string4;
      stringArray0[6] = string2;
      stringArray0[7] = string3;
      stringArray0[8] = string2;
      boolean boolean0 = true;
      String string5 = " has mismatch: ";
      String string6 = "#/components/schemas/";
      boolean boolean1 = true;
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      int int0 = 1;
      int int1 = (-1942);
      String string7 = "*/*";
      boolean boolean2 = true;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(stringArray0).when(schema0).allowableValues();
      doReturn(stringArray0[0], (String) null).when(schema0).defaultValue();
      doReturn(boolean0, false).when(schema0).deprecated();
      doReturn(string5, (String) null).when(schema0).description();
      doReturn(string6, stringArray0[1], (String) null).when(schema0).example();
      doReturn(boolean0, false).when(schema0).exclusiveMaximum();
      doReturn(boolean1, false).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema0).externalDocs();
      doReturn(string2, (String) null).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(0).when(schema0).maxProperties();
      doReturn(int1).when(schema0).minProperties();
      doReturn(string7, (String) null).when(schema0).pattern();
      doReturn(boolean2, false).when(schema0).readOnly();
      doReturn(stringArray0[8], (String) null).when(schema0).ref();
      doReturn(string5, (String) null).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional2 = (Optional<io.swagger.oas.models.media.Schema>)OperationParser.getSchemaFromAnnotation(schema0);
      assertNotNull(optional2);
      assertEquals(9, stringArray0.length);
      assertNotSame(string5, string6);
      assertNotSame(string5, string7);
      assertNotSame(string5, string2);
      assertNotSame(string5, string1);
      assertNotSame(string5, string3);
      assertNotSame(string5, string4);
      assertNotSame(string6, string4);
      assertNotSame(string6, string2);
      assertNotSame(string6, string3);
      assertNotSame(string6, string1);
      assertNotSame(string6, string5);
      assertNotSame(string6, string7);
      assertNotSame(string2, string7);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string5);
      assertNotSame(string2, string6);
      assertNotSame(string2, string4);
      assertNotSame(string7, string4);
      assertNotSame(string7, string3);
      assertNotSame(string7, string1);
      assertNotSame(string7, string6);
      assertNotSame(string7, string2);
      assertNotSame(string7, string5);
      assertFalse(string5.equals((Object)string6));
      assertFalse(string5.equals((Object)string7));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string7));
      assertFalse(string2.equals((Object)string7));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string2.equals((Object)string4));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      
      MediaType mediaType0 = new MediaType();
      assertNotNull(mediaType0);
      assertNull(mediaType0.getExample());
      
      Map<String, Encoding> map1 = mediaType0.getEncoding();
      assertNull(map1);
      assertNull(mediaType0.getExample());
      
      MediaType mediaType1 = mediaType0.encoding(map1);
      assertNotNull(mediaType1);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType1, mediaType0);
      assertNull(mediaType0.getExample());
      assertNull(mediaType1.getExample());
      
      HashMap<String, Example> hashMap0 = new HashMap<String, Example>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      MediaType mediaType2 = mediaType1.examples(hashMap0);
      assertNotNull(mediaType2);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType0, mediaType2);
      assertSame(mediaType1, mediaType0);
      assertSame(mediaType1, mediaType2);
      assertSame(mediaType2, mediaType0);
      assertSame(mediaType2, mediaType1);
      assertNull(mediaType0.getExample());
      assertNull(mediaType1.getExample());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(mediaType2.getExample());
      
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exampleObject0).externalValue();
      doReturn(stringArray0[6], (String) null, (String) null).when(exampleObject0).name();
      doReturn((String) null).when(exampleObject0).summary();
      doReturn((String) null).when(exampleObject0).value();
      Optional<MediaType> optional3 = OperationParser.getMediaType(mediaType2, exampleObject0);
      assertNotNull(optional3);
      assertEquals(9, stringArray0.length);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType0, mediaType2);
      assertSame(mediaType1, mediaType0);
      assertSame(mediaType1, mediaType2);
      assertSame(mediaType2, mediaType0);
      assertSame(mediaType2, mediaType1);
      assertNull(mediaType0.getExample());
      assertNull(mediaType1.getExample());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(mediaType2.getExample());
  }

  @Test(timeout = 11000)
  public void test009()  throws Throwable  {
      String string0 = "";
      String string1 = "y";
      String string2 = null;
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn(string2).when(contact0).email();
      doReturn(string1, string0).when(contact0).name();
      doReturn(string0).when(contact0).url();
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(string2).when(license0).name();
      doReturn(string1, string1).when(license0).url();
      String string3 = "io.wagger.util.DeserializationModule";
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn(contact0).when(info0).contact();
      doReturn(string0).when(info0).description();
      doReturn(license0).when(info0).license();
      doReturn(string0).when(info0).termsOfService();
      doReturn(string1, string1).when(info0).title();
      doReturn(string1, string3).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional0 = OperationParser.getInfo(info0);
      assertNotNull(optional0);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = "*/*";
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      String string5 = "Internal error: unknown key type ";
      Header header0 = new Header();
      assertNotNull(header0);
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.get$ref());
      assertNull(header0.getExplode());
      assertNull(header0.getRequired());
      assertNull(header0.getDescription());
      assertNull(header0.getDeprecated());
      assertNull(header0.getExample());
      assertNull(header0.getStyle());
      
      io.swagger.oas.models.media.Schema<io.swagger.oas.models.ExternalDocumentation> schema1 = new io.swagger.oas.models.media.Schema<io.swagger.oas.models.ExternalDocumentation>();
      assertNotNull(schema1);
      assertNull(schema1.getMinProperties());
      assertNull(schema1.getType());
      assertNull(schema1.getWriteOnly());
      assertNull(schema1.getTitle());
      assertNull(schema1.get$ref());
      assertNull(schema1.getMaxLength());
      assertNull(schema1.getMaxItems());
      assertNull(schema1.getExclusiveMinimum());
      assertNull(schema1.getUniqueItems());
      assertNull(schema1.getMinItems());
      assertNull(schema1.getName());
      assertNull(schema1.getExclusiveMaximum());
      assertNull(schema1.getPattern());
      assertNull(schema1.getDescription());
      assertNull(schema1.getNullable());
      assertNull(schema1.getDeprecated());
      assertNull(schema1.getMaxProperties());
      assertNull(schema1.getMinLength());
      assertNull(schema1.getFormat());
      assertNull(schema1.getReadOnly());
      
      String string6 = "io.swagge";
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 11000)
  public void test010()  throws Throwable  {
      String string0 = "default";
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(license0).name();
      doReturn(string0, (String) null).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional0 = OperationParser.getLicense(license0);
      assertNotNull(optional0);
      
      String string1 = "F";
      String string2 = "";
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn((Contact) null).when(info0).contact();
      doReturn(string0, (String) null).when(info0).description();
      doReturn((License) null).when(info0).license();
      doReturn(string1, (String) null).when(info0).termsOfService();
      doReturn(string2).when(info0).title();
      doReturn(string2).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional1 = OperationParser.getInfo(info0);
      assertNotNull(optional1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      MediaType mediaType0 = new MediaType();
      assertNotNull(mediaType0);
      assertNull(mediaType0.getExample());
      
      io.swagger.oas.models.media.Schema<io.swagger.oas.models.info.Contact> schema0 = new io.swagger.oas.models.media.Schema<io.swagger.oas.models.info.Contact>();
      assertNotNull(schema0);
      assertNull(schema0.getMinItems());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getTitle());
      assertNull(schema0.get$ref());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getDescription());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getName());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getType());
      assertNull(schema0.getNullable());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getFormat());
      assertNull(schema0.getPattern());
      
      MediaType mediaType1 = mediaType0.schema(schema0);
      assertNotNull(mediaType1);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType1, mediaType0);
      assertNull(mediaType0.getExample());
      assertNull(schema0.getMinItems());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getTitle());
      assertNull(schema0.get$ref());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getDescription());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getName());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getType());
      assertNull(schema0.getNullable());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getFormat());
      assertNull(schema0.getPattern());
      assertNull(mediaType1.getExample());
      
      String string3 = "";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn(string3).when(exampleObject0).name();
      Optional<MediaType> optional2 = OperationParser.getMediaType(mediaType0, exampleObject0);
      assertNotNull(optional2);
      assertSame(mediaType0, mediaType1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertSame(string3, string2);
      assertNull(mediaType0.getExample());
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = string0;
      String string4 = "Fuq4CZX";
      boolean boolean0 = true;
      String string5 = "";
      String string6 = "";
      boolean boolean1 = true;
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      int int0 = 500;
      String string7 = "";
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(stringArray0).when(schema1).allowableValues();
      doReturn(string4, (String) null).when(schema1).defaultValue();
      doReturn(boolean0, false).when(schema1).deprecated();
      doReturn(string1, (String) null).when(schema1).description();
      doReturn(string5, string6).when(schema1).example();
      doReturn(boolean1, false).when(schema1).exclusiveMaximum();
      doReturn(boolean0, false).when(schema1).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema1).externalDocs();
      doReturn(string3).when(schema1).format();
      doReturn(int0).when(schema1).maxLength();
      doReturn(0).when(schema1).maxProperties();
      doReturn(int0, 0).when(schema1).minProperties();
      doReturn(string7).when(schema1).pattern();
      doReturn(boolean1, false).when(schema1).readOnly();
      doReturn(string2).when(schema1).ref();
      doReturn(string2).when(schema1).type();
      Optional<io.swagger.oas.models.media.Schema> optional3 = (Optional<io.swagger.oas.models.media.Schema>)OperationParser.getSchemaFromAnnotation(schema1);
      assertNotNull(optional3);
      assertEquals(1, stringArray0.length);
      assertSame(string5, string6);
      assertNotSame(string5, string1);
      assertNotSame(string5, string4);
      assertSame(string5, string7);
      assertSame(string5, string2);
      assertSame(string5, string3);
      assertNotSame(string5, string0);
      assertNotSame(string6, string4);
      assertNotSame(string6, string0);
      assertSame(string6, string2);
      assertSame(string6, string3);
      assertSame(string6, string5);
      assertNotSame(string6, string1);
      assertSame(string6, string7);
      assertNotSame(string1, string5);
      assertNotSame(string1, string3);
      assertNotSame(string1, string4);
      assertNotSame(string1, string0);
      assertNotSame(string1, string6);
      assertNotSame(string1, string2);
      assertNotSame(string1, string7);
      assertSame(string2, string5);
      assertNotSame(string2, string1);
      assertSame(string2, string3);
      assertNotSame(string2, string0);
      assertSame(string2, string6);
      assertSame(string2, string7);
      assertNotSame(string2, string4);
      assertSame(string7, string6);
      assertSame(string7, string3);
      assertNotSame(string7, string0);
      assertSame(string7, string5);
      assertNotSame(string7, string4);
      assertSame(string7, string2);
      assertNotSame(string7, string1);
      assertNotSame(string3, string4);
      assertSame(string3, string7);
      assertNotSame(string3, string0);
      assertSame(string3, string6);
      assertNotSame(string3, string1);
      assertSame(string3, string2);
      assertSame(string3, string5);
      assertNotSame(string4, string5);
      assertNotSame(string4, string2);
      assertNotSame(string4, string0);
      assertNotSame(string4, string7);
      assertNotSame(string4, string6);
      assertNotSame(string4, string1);
      assertNotSame(string4, string3);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string7));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string7));
      assertFalse(string4.equals((Object)string6));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      
      Parameter[] parameterArray0 = new Parameter[6];
      boolean boolean2 = false;
      boolean boolean3 = false;
      boolean boolean4 = false;
      Content[] contentArray0 = new Content[1];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((ExampleObject[]) null).when(content0).examples();
      contentArray0[0] = content0;
      boolean boolean5 = false;
      boolean boolean6 = true;
      String string8 = "";
      String string9 = ":'vO3Ymoi`6Vow./~";
      String string10 = "";
      Explode explode0 = Explode.TRUE;
      Explode explode1 = Explode.DEFAULT;
      Explode explode2 = Explode.DEFAULT;
      Explode explode3 = Explode.TRUE;
      String string11 = "Invalid Object Id definition for abstract type %s: can not use `PropertyGenerator` on polymorphic types using property annotation";
      String string12 = "";
      String string13 = ")BeJvEdB J5D<R9";
      String string14 = "];";
      String string15 = null;
      String string16 = "8&b%6QrbO8opY04=[";
      boolean boolean7 = false;
      boolean boolean8 = false;
      Schema schema2 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null, (Class) null).when(schema2).implementation();
      Schema schema3 = mock(Schema.class, new ViolatedAssumptionAnswer());
      String string17 = null;
      String string18 = "sn=7:";
      String string19 = "java.lang";
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0, boolean1).when(parameter0).allowEmptyValue();
      doReturn(boolean3).when(parameter0).allowReserved();
      doReturn(contentArray0).when(parameter0).content();
      doReturn(boolean4).when(parameter0).deprecated();
      doReturn(string8).when(parameter0).description();
      doReturn(explode0, explode1).when(parameter0).explode();
      doReturn(string11, string12).when(parameter0).in();
      doReturn(string13, string15).when(parameter0).name();
      doReturn(boolean7).when(parameter0).required();
      doReturn(schema2, schema2, schema2).when(parameter0).schema();
      doReturn(string17).when(parameter0).style();
      parameterArray0[0] = parameter0;
      parameterArray0[1] = parameterArray0[0];
      parameterArray0[2] = parameterArray0[1];
      parameterArray0[3] = parameterArray0[2];
      parameterArray0[4] = parameterArray0[3];
      parameterArray0[5] = parameterArray0[4];
      Components components0 = new Components();
      assertNotNull(components0);
      
      String string20 = "com.fasterxml.jackson.databind.util.LRUMap";
      SecurityScheme securityScheme0 = new SecurityScheme();
      assertNotNull(securityScheme0);
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getType());
      
      Components components1 = components0.addSecuritySchemes(string20, securityScheme0);
      assertNotNull(components1);
      assertSame(components1, components0);
      assertSame(components0, components1);
      assertNotSame(string20, string16);
      assertNotSame(string20, string13);
      assertNotSame(string20, string8);
      assertNotSame(string20, string5);
      assertNotSame(string20, string1);
      assertNotSame(string20, string3);
      assertNotSame(string20, string19);
      assertNotSame(string20, string4);
      assertNotSame(string20, string0);
      assertNotSame(string20, string11);
      assertNotSame(string20, string7);
      assertNotSame(string20, string12);
      assertNotSame(string20, string10);
      assertNotSame(string20, string18);
      assertNotSame(string20, string2);
      assertNotSame(string20, string9);
      assertNotSame(string20, string6);
      assertNotSame(string20, string14);
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getType());
      assertFalse(string20.equals((Object)string16));
      assertFalse(string20.equals((Object)string13));
      assertFalse(string20.equals((Object)string8));
      assertFalse(string20.equals((Object)string5));
      assertFalse(string20.equals((Object)string1));
      assertFalse(string20.equals((Object)string3));
      assertFalse(string20.equals((Object)string19));
      assertFalse(string20.equals((Object)string4));
      assertFalse(string20.equals((Object)string0));
      assertFalse(string20.equals((Object)string11));
      assertFalse(string20.equals((Object)string7));
      assertFalse(string20.equals((Object)string12));
      assertFalse(string20.equals((Object)string10));
      assertFalse(string20.equals((Object)string18));
      assertFalse(string20.equals((Object)string2));
      assertFalse(string20.equals((Object)string9));
      assertFalse(string20.equals((Object)string6));
      assertFalse(string20.equals((Object)string14));
      
      Operation operation0 = new Operation();
      assertNotNull(operation0);
      assertNull(operation0.getSummary());
      assertNull(operation0.getDescription());
      assertNull(operation0.getOperationId());
      assertNull(operation0.getDeprecated());
      
      Map<String, Callback> map0 = operation0.getCallbacks();
      assertNull(map0);
      assertNull(operation0.getSummary());
      assertNull(operation0.getDescription());
      assertNull(operation0.getOperationId());
      assertNull(operation0.getDeprecated());
      
      Components components2 = components1.callbacks(map0);
      assertNotNull(components2);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertNotSame(string20, string16);
      assertNotSame(string20, string13);
      assertNotSame(string20, string8);
      assertNotSame(string20, string5);
      assertNotSame(string20, string1);
      assertNotSame(string20, string3);
      assertNotSame(string20, string19);
      assertNotSame(string20, string4);
      assertNotSame(string20, string0);
      assertNotSame(string20, string11);
      assertNotSame(string20, string7);
      assertNotSame(string20, string12);
      assertNotSame(string20, string10);
      assertNotSame(string20, string18);
      assertNotSame(string20, string2);
      assertNotSame(string20, string9);
      assertNotSame(string20, string6);
      assertNotSame(string20, string14);
      assertNull(operation0.getSummary());
      assertNull(operation0.getDescription());
      assertNull(operation0.getOperationId());
      assertNull(operation0.getDeprecated());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getType());
      assertFalse(string20.equals((Object)string16));
      assertFalse(string20.equals((Object)string13));
      assertFalse(string20.equals((Object)string8));
      assertFalse(string20.equals((Object)string5));
      assertFalse(string20.equals((Object)string1));
      assertFalse(string20.equals((Object)string3));
      assertFalse(string20.equals((Object)string19));
      assertFalse(string20.equals((Object)string4));
      assertFalse(string20.equals((Object)string0));
      assertFalse(string20.equals((Object)string11));
      assertFalse(string20.equals((Object)string7));
      assertFalse(string20.equals((Object)string12));
      assertFalse(string20.equals((Object)string10));
      assertFalse(string20.equals((Object)string18));
      assertFalse(string20.equals((Object)string2));
      assertFalse(string20.equals((Object)string9));
      assertFalse(string20.equals((Object)string6));
      assertFalse(string20.equals((Object)string14));
      
      Map<String, io.swagger.oas.models.media.Schema> map1 = (Map<String, io.swagger.oas.models.media.Schema>)components2.getSchemas();
      assertNull(map1);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertNotSame(string20, string16);
      assertNotSame(string20, string13);
      assertNotSame(string20, string8);
      assertNotSame(string20, string5);
      assertNotSame(string20, string1);
      assertNotSame(string20, string3);
      assertNotSame(string20, string19);
      assertNotSame(string20, string4);
      assertNotSame(string20, string0);
      assertNotSame(string20, string11);
      assertNotSame(string20, string7);
      assertNotSame(string20, string12);
      assertNotSame(string20, string10);
      assertNotSame(string20, string18);
      assertNotSame(string20, string2);
      assertNotSame(string20, string9);
      assertNotSame(string20, string6);
      assertNotSame(string20, string14);
      assertNull(operation0.getSummary());
      assertNull(operation0.getDescription());
      assertNull(operation0.getOperationId());
      assertNull(operation0.getDeprecated());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getType());
      assertFalse(string20.equals((Object)string16));
      assertFalse(string20.equals((Object)string13));
      assertFalse(string20.equals((Object)string8));
      assertFalse(string20.equals((Object)string5));
      assertFalse(string20.equals((Object)string1));
      assertFalse(string20.equals((Object)string3));
      assertFalse(string20.equals((Object)string19));
      assertFalse(string20.equals((Object)string4));
      assertFalse(string20.equals((Object)string0));
      assertFalse(string20.equals((Object)string11));
      assertFalse(string20.equals((Object)string7));
      assertFalse(string20.equals((Object)string12));
      assertFalse(string20.equals((Object)string10));
      assertFalse(string20.equals((Object)string18));
      assertFalse(string20.equals((Object)string2));
      assertFalse(string20.equals((Object)string9));
      assertFalse(string20.equals((Object)string6));
      assertFalse(string20.equals((Object)string14));
      
      Components components3 = components2.schemas(map1);
      assertNotNull(components3);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertSame(components2, components3);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertSame(components3, components1);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertNotSame(string20, string16);
      assertNotSame(string20, string13);
      assertNotSame(string20, string8);
      assertNotSame(string20, string5);
      assertNotSame(string20, string1);
      assertNotSame(string20, string3);
      assertNotSame(string20, string19);
      assertNotSame(string20, string4);
      assertNotSame(string20, string0);
      assertNotSame(string20, string11);
      assertNotSame(string20, string7);
      assertNotSame(string20, string12);
      assertNotSame(string20, string10);
      assertNotSame(string20, string18);
      assertNotSame(string20, string2);
      assertNotSame(string20, string9);
      assertNotSame(string20, string6);
      assertNotSame(string20, string14);
      assertNull(operation0.getSummary());
      assertNull(operation0.getDescription());
      assertNull(operation0.getOperationId());
      assertNull(operation0.getDeprecated());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getType());
      assertFalse(string20.equals((Object)string16));
      assertFalse(string20.equals((Object)string13));
      assertFalse(string20.equals((Object)string8));
      assertFalse(string20.equals((Object)string5));
      assertFalse(string20.equals((Object)string1));
      assertFalse(string20.equals((Object)string3));
      assertFalse(string20.equals((Object)string19));
      assertFalse(string20.equals((Object)string4));
      assertFalse(string20.equals((Object)string0));
      assertFalse(string20.equals((Object)string11));
      assertFalse(string20.equals((Object)string7));
      assertFalse(string20.equals((Object)string12));
      assertFalse(string20.equals((Object)string10));
      assertFalse(string20.equals((Object)string18));
      assertFalse(string20.equals((Object)string2));
      assertFalse(string20.equals((Object)string9));
      assertFalse(string20.equals((Object)string6));
      assertFalse(string20.equals((Object)string14));
      
      HashMap<String, RequestBody> hashMap0 = new HashMap<String, RequestBody>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Components components4 = components3.requestBodies(hashMap0);
      assertNotNull(components4);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertSame(components1, components4);
      assertSame(components2, components3);
      assertSame(components2, components4);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertSame(components3, components1);
      assertSame(components3, components4);
      assertSame(components4, components2);
      assertSame(components4, components0);
      assertSame(components4, components1);
      assertSame(components4, components3);
      assertSame(components0, components3);
      assertSame(components0, components4);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertNotSame(string20, string16);
      assertNotSame(string20, string13);
      assertNotSame(string20, string8);
      assertNotSame(string20, string5);
      assertNotSame(string20, string1);
      assertNotSame(string20, string3);
      assertNotSame(string20, string19);
      assertNotSame(string20, string4);
      assertNotSame(string20, string0);
      assertNotSame(string20, string11);
      assertNotSame(string20, string7);
      assertNotSame(string20, string12);
      assertNotSame(string20, string10);
      assertNotSame(string20, string18);
      assertNotSame(string20, string2);
      assertNotSame(string20, string9);
      assertNotSame(string20, string6);
      assertNotSame(string20, string14);
      assertNull(operation0.getSummary());
      assertNull(operation0.getDescription());
      assertNull(operation0.getOperationId());
      assertNull(operation0.getDeprecated());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getType());
      assertFalse(string20.equals((Object)string16));
      assertFalse(string20.equals((Object)string13));
      assertFalse(string20.equals((Object)string8));
      assertFalse(string20.equals((Object)string5));
      assertFalse(string20.equals((Object)string1));
      assertFalse(string20.equals((Object)string3));
      assertFalse(string20.equals((Object)string19));
      assertFalse(string20.equals((Object)string4));
      assertFalse(string20.equals((Object)string0));
      assertFalse(string20.equals((Object)string11));
      assertFalse(string20.equals((Object)string7));
      assertFalse(string20.equals((Object)string12));
      assertFalse(string20.equals((Object)string10));
      assertFalse(string20.equals((Object)string18));
      assertFalse(string20.equals((Object)string2));
      assertFalse(string20.equals((Object)string9));
      assertFalse(string20.equals((Object)string6));
      assertFalse(string20.equals((Object)string14));
      
      // Undeclared exception!
      try { 
        OperationParser.getParametersList(parameterArray0, components4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test011()  throws Throwable  {
      String string0 = "(K/+z tU";
      String string1 = "`US'y5VlH )g~']}";
      String string2 = "";
      String string3 = "no description";
      String string4 = "\"nncnw^~YTs=";
      String string5 = null;
      String string6 = "W1T1MvS`AG";
      String string7 = "pUZ3.tA5p4U";
      LinkParameter linkParameter0 = mock(LinkParameter.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = false;
      ExampleObject[] exampleObjectArray0 = new ExampleObject[1];
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      exampleObjectArray0[0] = exampleObject0;
      io.swagger.oas.annotations.parameters.RequestBody requestBody0 = mock(io.swagger.oas.annotations.parameters.RequestBody.class, new ViolatedAssumptionAnswer());
      Header header0 = new Header();
      assertNotNull(header0);
      assertNull(header0.getDeprecated());
      assertNull(header0.getRequired());
      assertNull(header0.getExplode());
      assertNull(header0.get$ref());
      assertNull(header0.getExample());
      assertNull(header0.getStyle());
      assertNull(header0.getDescription());
      assertNull(header0.getAllowEmptyValue());
      
      io.swagger.oas.models.parameters.Parameter parameter0 = null;
      Example example0 = new Example();
      assertNotNull(example0);
      assertNull(example0.getExternalValue());
      assertNull(example0.getSummary());
      assertNull(example0.getDescription());
      assertNull(example0.get$ref());
  }

  @Test(timeout = 11000)
  public void test012()  throws Throwable  {
      String string0 = "(J9(=@\\Hn9E";
      String string1 = "";
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string1).when(license0).name();
      doReturn(string0, string1).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional0 = OperationParser.getLicense(license0);
      assertNotNull(optional0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      String string2 = "#/components/schemas/";
      String string3 = "Xs6xwO/srGI(1t#Z`";
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string3).when(externalDocumentation0).description();
      doReturn(string2, string3).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional1 = OperationParser.getExternalDocumentation(externalDocumentation0);
      assertNotNull(optional1);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = "{N9TF?*iRz.;";
      ServerVariable[] serverVariableArray0 = new ServerVariable[6];
      ServerVariable serverVariable0 = mock(ServerVariable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(serverVariable0).description();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(serverVariable0).name();
      serverVariableArray0[0] = serverVariable0;
      serverVariableArray0[1] = serverVariableArray0[0];
      serverVariableArray0[2] = serverVariableArray0[1];
      serverVariableArray0[3] = serverVariableArray0[2];
      serverVariableArray0[4] = serverVariableArray0[3];
      serverVariableArray0[5] = serverVariableArray0[4];
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string1, (String) null, (String) null).when(server0).description();
      doReturn(string2, string4, (String) null, (String) null).when(server0).url();
      doReturn(serverVariableArray0).when(server0).variables();
      Optional<io.swagger.oas.models.servers.Server> optional2 = OperationParser.getServer(server0);
      assertNotNull(optional2);
      assertEquals(6, serverVariableArray0.length);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string4);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string4);
      assertNotSame(string1, string2);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string4);
      assertNotSame(string2, string1);
      assertNotSame(string4, string3);
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      assertNotSame(string4, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      
      String string5 = "";
      String string6 = "";
      Server server1 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string5, (String) null, (String) null, (String) null, (String) null).when(server1).description();
      doReturn(string6, (String) null, (String) null, (String) null, (String) null).when(server1).url();
      Optional<io.swagger.oas.models.servers.Server> optional3 = OperationParser.getServer(server1);
      assertNotNull(optional3);
      assertNotSame(string5, string0);
      assertSame(string5, string1);
      assertNotSame(string5, string3);
      assertNotSame(string5, string2);
      assertSame(string5, string6);
      assertNotSame(string5, string4);
      assertNotSame(string6, string3);
      assertNotSame(string6, string0);
      assertSame(string6, string1);
      assertNotSame(string6, string4);
      assertSame(string6, string5);
      assertNotSame(string6, string2);
      assertNotSame(optional3, optional2);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(optional3.equals((Object)optional2));
      
      Server[] serverArray0 = new Server[6];
      serverArray0[0] = server0;
      serverArray0[1] = server0;
      serverArray0[2] = server1;
      serverArray0[3] = server1;
      serverArray0[4] = server1;
      serverArray0[5] = serverArray0[4];
      Optional<List<io.swagger.oas.models.servers.Server>> optional4 = OperationParser.getServers(serverArray0);
      assertNotNull(optional4);
      assertEquals(6, serverArray0.length);
  }

  @Test(timeout = 11000)
  public void test013()  throws Throwable  {
      ApiResponse[] apiResponseArray0 = new ApiResponse[5];
      Content[] contentArray0 = null;
      String string0 = "1La ";
      String string1 = "";
      String string2 = "I:9";
      String string3 = "    delete: ";
      io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[8];
      String string4 = "`";
      String string5 = null;
      String string6 = "com.fasterxml.jackson.core.io.CharTypes";
      String string7 = "";
      String string8 = "";
      String string9 = ";(2Zhgl_`G";
      String string10 = "";
      String string11 = "io.swagger.jaxrs2.OperationParser";
      String string12 = "i5M";
      String string13 = null;
      String string14 = "<ov+9MAk!kSi^0,-1/";
      String string15 = "java.langio.swagger.oas.models.headers.Header";
      LinkParameter[] linkParameterArray0 = null;
      io.swagger.oas.annotations.links.Link link0 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      doReturn(string4, string5, string6, string7, string8).when(link0).description();
      doReturn(string14, string15).when(link0).name();
      doReturn(string0, string9, string0, string1, string10).when(link0).operationId();
      doReturn(string11, string12, string7, string13, string13).when(link0).operationRef();
      doReturn((Object) linkParameterArray0, (Object) linkParameterArray0).when(link0).parameters();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      linkArray0[3] = linkArray0[2];
      linkArray0[4] = linkArray0[3];
      linkArray0[6] = linkArray0[5];
      linkArray0[3] = linkArray0[6];
      String string16 = "";
      ApiResponse apiResponse0 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn((Object) contentArray0, (Object) contentArray0).when(apiResponse0).content();
      doReturn(string0, string1, string2, string3).when(apiResponse0).description();
      doReturn(linkArray0).when(apiResponse0).links();
      doReturn(string16).when(apiResponse0).responseCode();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[3] = apiResponseArray0[2];
      apiResponseArray0[4] = apiResponseArray0[3];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      assertNotNull(components0);
      
      Encoding encoding0 = new Encoding();
      assertNotNull(encoding0);
      assertNull(encoding0.getExplode());
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getStyle());
      assertNull(encoding0.getAllowReserved());
      
      Map<String, Header> map0 = encoding0.getHeaders();
      assertNull(map0);
      assertNull(encoding0.getExplode());
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getStyle());
      assertNull(encoding0.getAllowReserved());
      
      Components components1 = components0.headers(map0);
      assertNotNull(components1);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertNull(encoding0.getExplode());
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getStyle());
      assertNull(encoding0.getAllowReserved());
      
      HashMap<String, Callback> hashMap0 = new HashMap<String, Callback>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Components components2 = components1.callbacks(hashMap0);
      assertNotNull(components2);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertNull(encoding0.getExplode());
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getStyle());
      assertNull(encoding0.getAllowReserved());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      io.swagger.oas.annotations.links.Link[] linkArray1 = new io.swagger.oas.annotations.links.Link[10];
      assertFalse(linkArray1.equals((Object)linkArray0));
      
      String string17 = "Zx+k>>+";
      String string18 = "";
      String string19 = "";
      String string20 = "]K<if> !-,yb}";
      String string21 = "J8f`5o+8595|}<60|zM";
      String string22 = null;
      String string23 = "";
      LinkParameter[] linkParameterArray1 = new LinkParameter[4];
      String string24 = "no description";
      String string25 = "";
      String string26 = "Missing generic type information for ";
      String string27 = "g";
      String string28 = "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers$AtomicBooleanSerializer";
      LinkParameter linkParameter0 = mock(LinkParameter.class, new ViolatedAssumptionAnswer());
      doReturn(string4, string15, string21, string27).when(linkParameter0).expression();
      doReturn(string24, string25, string6, string21, string26).when(linkParameter0).name();
      linkParameterArray1[0] = linkParameter0;
      linkParameterArray1[1] = linkParameterArray1[0];
      linkParameterArray1[2] = linkParameterArray1[0];
      linkParameterArray1[3] = linkParameterArray1[2];
      io.swagger.oas.annotations.links.Link link1 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      doReturn(string1).when(link1).description();
      doReturn(string21).when(link1).name();
      doReturn(string18).when(link1).operationId();
      doReturn(string17, string2).when(link1).operationRef();
      doReturn(linkParameterArray1).when(link1).parameters();
      linkArray1[0] = link1;
      linkArray1[3] = linkArray1[2];
      linkArray1[4] = linkArray1[3];
      linkArray1[5] = linkArray1[4];
      linkArray1[6] = linkArray1[5];
      linkArray1[7] = linkArray1[6];
      Map<String, Link> map1 = OperationParser.getLinks(linkArray1);
      assertNotNull(map1);
      assertEquals(10, linkArray1.length);
      assertNotSame(linkArray1, linkArray0);
      assertFalse(map1.isEmpty());
      assertEquals(1, map1.size());
      assertFalse(linkArray1.equals((Object)linkArray0));
      
      Components components3 = components2.links(map1);
      assertNotNull(components3);
      assertEquals(10, linkArray1.length);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertSame(components3, components2);
      assertSame(components1, components3);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components2, components0);
      assertSame(components2, components3);
      assertSame(components2, components1);
      assertNotSame(linkArray1, linkArray0);
      assertFalse(map1.isEmpty());
      assertEquals(1, map1.size());
      assertNull(encoding0.getExplode());
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getStyle());
      assertNull(encoding0.getAllowReserved());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(linkArray1.equals((Object)linkArray0));
      
      io.swagger.oas.models.responses.ApiResponse apiResponse1 = null;
      Components components4 = components3.addResponses(string19, apiResponse1);
      assertNotNull(components4);
      assertEquals(10, linkArray1.length);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components0, components4);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertSame(components3, components2);
      assertSame(components3, components4);
      assertSame(components4, components3);
      assertSame(components4, components1);
      assertSame(components4, components0);
      assertSame(components4, components2);
      assertSame(components1, components3);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components1, components4);
      assertSame(components2, components0);
      assertSame(components2, components4);
      assertSame(components2, components3);
      assertSame(components2, components1);
      assertNotSame(linkArray1, linkArray0);
      assertNotSame(string19, string27);
      assertNotSame(string19, string3);
      assertNotSame(string19, string24);
      assertSame(string19, string1);
      assertSame(string19, string18);
      assertSame(string19, string8);
      assertNotSame(string19, string6);
      assertNotSame(string19, string15);
      assertSame(string19, string7);
      assertNotSame(string19, string9);
      assertNotSame(string19, string26);
      assertSame(string19, string16);
      assertNotSame(string19, string11);
      assertSame(string19, string23);
      assertNotSame(string19, string0);
      assertNotSame(string19, string2);
      assertNotSame(string19, string28);
      assertNotSame(string19, string17);
      assertSame(string19, string10);
      assertNotSame(string19, string4);
      assertNotSame(string19, string12);
      assertNotSame(string19, string21);
      assertSame(string19, string25);
      assertNotSame(string19, string20);
      assertNotSame(string19, string14);
      assertFalse(map1.isEmpty());
      assertEquals(1, map1.size());
      assertNull(encoding0.getExplode());
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getStyle());
      assertNull(encoding0.getAllowReserved());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(linkArray1.equals((Object)linkArray0));
      assertFalse(string19.equals((Object)string27));
      assertFalse(string19.equals((Object)string3));
      assertFalse(string19.equals((Object)string11));
      assertFalse(string19.equals((Object)string0));
      assertFalse(string19.equals((Object)string2));
      assertFalse(string19.equals((Object)string28));
      assertFalse(string19.equals((Object)string17));
      assertFalse(string19.equals((Object)string24));
      assertFalse(string19.equals((Object)string6));
      assertFalse(string19.equals((Object)string4));
      assertFalse(string19.equals((Object)string15));
      assertFalse(string19.equals((Object)string12));
      assertFalse(string19.equals((Object)string21));
      assertFalse(string19.equals((Object)string9));
      assertFalse(string19.equals((Object)string20));
      assertFalse(string19.equals((Object)string14));
      assertFalse(string19.equals((Object)string26));
      
      // Undeclared exception!
      try { 
        OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test014()  throws Throwable  {
      ApiResponse[] apiResponseArray0 = new ApiResponse[6];
      Content[] contentArray0 = new Content[4];
      Class<Integer> class0 = Integer.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertEquals("int", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      
      Class<io.swagger.oas.models.info.License> class1 = io.swagger.oas.models.info.License.class;
      Class<Header> class2 = Header.class;
      Class<String> class3 = String.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(schema0).implementation();
      String string0 = "";
      ExampleObject[] exampleObjectArray0 = new ExampleObject[1];
      String string1 = "nYU$6~5Ft";
      String string2 = "java.langio.swagger.oas.models.servers.Server";
      String string3 = "java.langjava.lang.Object";
      String string4 = null;
      String string5 = "IJ}";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn(string3, (String) null).when(exampleObject0).externalValue();
      doReturn(string1, string2, string3).when(exampleObject0).name();
      doReturn(string5, (String) null).when(exampleObject0).summary();
      doReturn(string3, (String) null).when(exampleObject0).value();
      exampleObjectArray0[0] = exampleObject0;
      String string6 = "HkbDP:EBFnK|T2dHI|s";
      String string7 = "W:A'";
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      Schema schema2 = mock(Schema.class, new ViolatedAssumptionAnswer());
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn(exampleObjectArray0).when(content0).examples();
      doReturn(string0).when(content0).mediaType();
      doReturn(schema0).when(content0).schema();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[0];
      contentArray0[2] = contentArray0[2];
      String string8 = "hS";
      String string9 = "java.langjava.lang.Integer";
      String string10 = "];;=HQ\\3jYzQ2q~&c";
      io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[9];
      io.swagger.oas.annotations.links.Link link0 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      linkArray0[3] = linkArray0[2];
      linkArray0[4] = linkArray0[3];
      linkArray0[5] = linkArray0[4];
      linkArray0[6] = linkArray0[5];
      linkArray0[7] = linkArray0[6];
      linkArray0[8] = linkArray0[7];
      String string11 = "java.langint";
      String string12 = "[ 2$&f%D";
      ApiResponse apiResponse0 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn(contentArray0).when(apiResponse0).content();
      doReturn(string8, string8).when(apiResponse0).description();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      apiResponseArray0[3] = apiResponse0;
      apiResponseArray0[4] = apiResponseArray0[3];
      apiResponseArray0[5] = apiResponseArray0[4];
      String[] stringArray0 = new String[2];
      stringArray0[0] = string8;
      stringArray0[1] = string0;
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      doReturn(stringArray0).when(produces0).value();
      Components components0 = null;
      // Undeclared exception!
      try { 
        OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.JsonFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test015()  throws Throwable  {
      String string0 = "(J9(=@\\Hn9E";
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      String string1 = "Xs6xwO/srGI(1t#Z`";
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string1).when(externalDocumentation0).description();
      doReturn(string0, string1).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional0 = OperationParser.getExternalDocumentation(externalDocumentation0);
      assertNotNull(optional0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      String string2 = "{N9TF?*iRz.;";
      ServerVariable[] serverVariableArray0 = new ServerVariable[6];
      String string3 = "jA%S/}yucP|x";
      String string4 = null;
      String string5 = " does not support schema of type '";
      String string6 = "io.swagger.jaxrs2.OperationParser";
      String string7 = "N\"G95C]YD%&rO";
      String string8 = null;
      ServerVariable serverVariable0 = mock(ServerVariable.class, new ViolatedAssumptionAnswer());
      doReturn(string3, string0, string4).when(serverVariable0).description();
      doReturn(string6, string0).when(serverVariable0).name();
      serverVariableArray0[0] = serverVariable0;
      serverVariableArray0[1] = serverVariableArray0[0];
      serverVariableArray0[1] = serverVariableArray0[1];
      serverVariableArray0[3] = serverVariableArray0[2];
      serverVariableArray0[4] = serverVariableArray0[3];
      serverVariableArray0[5] = serverVariableArray0[4];
      String string9 = "com.fasterxml.jackson.databind.type.ClassKey";
      String string10 = "!7R";
      String string11 = "java.langio.swagger.oas.models.responses.ApiResponses";
      String string12 = "*/*";
      String string13 = ";&jM@A.SD";
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string8).when(server0).description();
      doReturn(string6, string4).when(server0).url();
      doReturn(serverVariableArray0).when(server0).variables();
      // Undeclared exception!
      try { 
        OperationParser.getServer(server0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test016()  throws Throwable  {
      io.swagger.oas.annotations.parameters.RequestBody requestBody0 = null;
      Components components0 = new Components();
      assertNotNull(components0);
      
      String string0 = "V*'";
      io.swagger.oas.models.parameters.Parameter parameter0 = new io.swagger.oas.models.parameters.Parameter();
      assertNotNull(parameter0);
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.getRequired());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getAllowReserved());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getName());
      assertNull(parameter0.getExplode());
      assertNull(parameter0.get$ref());
      assertNull(parameter0.getExample());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getIn());
      
      Components components1 = components0.addParameters(string0, parameter0);
      assertNotNull(components1);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.getRequired());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getAllowReserved());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getName());
      assertNull(parameter0.getExplode());
      assertNull(parameter0.get$ref());
      assertNull(parameter0.getExample());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getIn());
      
      String string1 = null;
      Callback callback0 = new Callback();
      assertNotNull(callback0);
      assertEquals(0, callback0.size());
      assertTrue(callback0.isEmpty());
      
      Components components2 = components1.addCallbacks(string1, callback0);
      assertNotNull(components2);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.getRequired());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getAllowReserved());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getName());
      assertNull(parameter0.getExplode());
      assertNull(parameter0.get$ref());
      assertNull(parameter0.getExample());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getIn());
      assertEquals(0, callback0.size());
      assertTrue(callback0.isEmpty());
      
      Map<String, Header> map0 = components0.getHeaders();
      assertNull(map0);
      assertSame(components0, components2);
      assertSame(components0, components1);
      
      Components components3 = components2.headers(map0);
      assertNotNull(components3);
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components1, components2);
      assertSame(components1, components3);
      assertSame(components1, components0);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(components3, components1);
      assertSame(components3, components2);
      assertSame(components3, components0);
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.getRequired());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getAllowReserved());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getName());
      assertNull(parameter0.getExplode());
      assertNull(parameter0.get$ref());
      assertNull(parameter0.getExample());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getIn());
      assertEquals(0, callback0.size());
      assertTrue(callback0.isEmpty());
      
      SecurityScheme securityScheme0 = new SecurityScheme();
      assertNotNull(securityScheme0);
      assertNull(securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getIn());
      
      Components components4 = components3.addSecuritySchemes(string1, securityScheme0);
      assertNotNull(components4);
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertSame(components0, components4);
      assertSame(components0, components1);
      assertSame(components1, components4);
      assertSame(components1, components2);
      assertSame(components1, components3);
      assertSame(components1, components0);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components2, components4);
      assertSame(components2, components3);
      assertSame(components3, components4);
      assertSame(components3, components1);
      assertSame(components3, components2);
      assertSame(components3, components0);
      assertSame(components4, components1);
      assertSame(components4, components0);
      assertSame(components4, components3);
      assertSame(components4, components2);
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.getRequired());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getAllowReserved());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getName());
      assertNull(parameter0.getExplode());
      assertNull(parameter0.get$ref());
      assertNull(parameter0.getExample());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getIn());
      assertEquals(0, callback0.size());
      assertTrue(callback0.isEmpty());
      assertNull(securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getIn());
      
      Optional<RequestBody> optional0 = OperationParser.getRequestBody(requestBody0, components4);
      assertNotNull(optional0);
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertSame(components0, components4);
      assertSame(components0, components1);
      assertSame(components1, components4);
      assertSame(components1, components2);
      assertSame(components1, components3);
      assertSame(components1, components0);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components2, components4);
      assertSame(components2, components3);
      assertSame(components3, components4);
      assertSame(components3, components1);
      assertSame(components3, components2);
      assertSame(components3, components0);
      assertSame(components4, components1);
      assertSame(components4, components0);
      assertSame(components4, components3);
      assertSame(components4, components2);
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.getRequired());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getAllowReserved());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getName());
      assertNull(parameter0.getExplode());
      assertNull(parameter0.get$ref());
      assertNull(parameter0.getExample());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getIn());
      assertEquals(0, callback0.size());
      assertTrue(callback0.isEmpty());
      assertNull(securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getIn());
      
      Parameter[] parameterArray0 = null;
      Optional<List<io.swagger.oas.models.parameters.Parameter>> optional1 = OperationParser.getParametersList(parameterArray0, components0);
      assertNotNull(optional1);
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertSame(components0, components4);
      assertSame(components0, components1);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      stringArray0[2] = string0;
      boolean boolean0 = false;
      boolean boolean1 = true;
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      String string2 = null;
      int int0 = Integer.MAX_VALUE;
      int int1 = 658;
      String string3 = "";
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(stringArray0).when(schema0).allowableValues();
      doReturn(stringArray0[0], (String) null).when(schema0).defaultValue();
      doReturn(boolean0).when(schema0).deprecated();
      doReturn(stringArray0[2], (String) null).when(schema0).description();
      doReturn(string0, string0, (String) null).when(schema0).example();
      doReturn(boolean0).when(schema0).exclusiveMaximum();
      doReturn(boolean1, false).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema0).externalDocs();
      doReturn(string2).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(0).when(schema0).maxProperties();
      doReturn(int1, 0).when(schema0).minProperties();
      doReturn(string2).when(schema0).pattern();
      doReturn(boolean0).when(schema0).readOnly();
      doReturn(string3).when(schema0).ref();
      doReturn(stringArray0[2], (String) null).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional2 = (Optional<io.swagger.oas.models.media.Schema>)OperationParser.getSchemaFromAnnotation(schema0);
      assertNotNull(optional2);
      assertEquals(3, stringArray0.length);
      assertNotSame(string0, string3);
      assertNotSame(string3, string0);
      assertFalse(string0.equals((Object)string3));
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(string3.equals((Object)string0));
      
      String string4 = "B";
      String string5 = "io.swagge";
      ExternalDocumentation externalDocumentation1 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string4, (String) null).when(externalDocumentation1).description();
      doReturn(string5, (String) null).when(externalDocumentation1).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional3 = OperationParser.getExternalDocumentation(externalDocumentation1);
      assertNotNull(optional3);
      assertNotSame(string4, string5);
      assertNotSame(string4, string0);
      assertNotSame(string4, string3);
      assertNotSame(string5, string3);
      assertNotSame(string5, string0);
      assertNotSame(string5, string4);
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      
      boolean boolean2 = true;
      Content[] contentArray0 = new Content[6];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      contentArray0[3] = contentArray0[2];
      contentArray0[4] = contentArray0[3];
      contentArray0[5] = contentArray0[4];
      Explode explode0 = Explode.TRUE;
      Explode explode1 = Explode.DEFAULT;
      String string6 = "{`t#SCBTP\"1:";
      boolean boolean3 = true;
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      String string7 = "java.langjava.lang.Object";
      Parameter parameter1 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0).when(parameter1).allowEmptyValue();
      doReturn(boolean2, false).when(parameter1).allowReserved();
      doReturn(boolean2, false).when(parameter1).deprecated();
      doReturn(string3).when(parameter1).description();
      doReturn(string6, (String) null).when(parameter1).in();
      doReturn(stringArray0[1], (String) null).when(parameter1).name();
      doReturn(boolean3, false).when(parameter1).required();
      doReturn(string7, (String) null).when(parameter1).style();
      // Undeclared exception!
      try { 
        OperationParser.getParameter(parameter1, components1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.util.ParameterProcessor", e);
      }
  }

  @Test(timeout = 11000)
  public void test017()  throws Throwable  {
      ApiResponse[] apiResponseArray0 = new ApiResponse[6];
      Content[] contentArray0 = new Content[4];
      Class<Object> class0 = Object.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(schema0).implementation();
      String string0 = "_i/#,`>nOI";
      ExampleObject[] exampleObjectArray0 = new ExampleObject[11];
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(exampleObject0).name();
      exampleObjectArray0[0] = exampleObject0;
      exampleObjectArray0[1] = exampleObjectArray0[0];
      exampleObjectArray0[2] = exampleObjectArray0[1];
      String string1 = "";
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn(exampleObjectArray0).when(content0).examples();
      doReturn(string0, string1).when(content0).mediaType();
      doReturn(schema0, (Schema) null).when(content0).schema();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[0];
      contentArray0[2] = contentArray0[2];
      String string2 = "hS";
      ApiResponse apiResponse0 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      apiResponseArray0[3] = apiResponseArray0[2];
      apiResponseArray0[4] = apiResponseArray0[3];
      apiResponseArray0[5] = apiResponseArray0[4];
      String[] stringArray0 = new String[7];
      String string3 = "JSON Creator returned null";
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = null;
      // Undeclared exception!
      try { 
        OperationParser.getContent(contentArray0, produces0, produces0, components0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test018()  throws Throwable  {
      LinkParameter[] linkParameterArray0 = new LinkParameter[3];
      LinkParameter linkParameter0 = mock(LinkParameter.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(linkParameter0).name();
      linkParameterArray0[0] = linkParameter0;
      linkParameterArray0[1] = linkParameterArray0[0];
      linkParameterArray0[2] = linkParameterArray0[1];
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameterArray0);
      assertNotNull(map0);
      assertEquals(3, linkParameterArray0.length);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(contact0).email();
      doReturn((String) null).when(contact0).name();
      doReturn((String) null).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional0 = OperationParser.getContact(contact0);
      assertNotNull(optional0);
      
      io.swagger.oas.annotations.parameters.RequestBody requestBody0 = mock(io.swagger.oas.annotations.parameters.RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(requestBody0).description();
      doReturn(false).when(requestBody0).required();
      Components components0 = new Components();
      assertNotNull(components0);
      
      Map<String, RequestBody> map1 = components0.getRequestBodies();
      assertNull(map1);
      
      Components components1 = components0.requestBodies(map1);
      assertNotNull(components1);
      assertSame(components0, components1);
      assertSame(components1, components0);
      
      Map<String, Example> map2 = null;
      Components components2 = components1.examples(map2);
      assertNotNull(components2);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components2, components1);
      assertSame(components2, components0);
      
      Optional<RequestBody> optional1 = OperationParser.getRequestBody(requestBody0, components2);
      assertNotNull(optional1);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components2, components1);
      assertSame(components2, components0);
      
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(info0).description();
      doReturn((String) null).when(info0).termsOfService();
      doReturn((String) null).when(info0).title();
      doReturn((String) null).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional2 = OperationParser.getInfo(info0);
      assertNotNull(optional2);
      
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(license0).name();
      doReturn((String) null).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional3 = OperationParser.getLicense(license0);
      assertNotNull(optional3);
  }

  @Test(timeout = 11000)
  public void test019()  throws Throwable  {
      MediaType mediaType0 = new MediaType();
      assertNotNull(mediaType0);
      assertNull(mediaType0.getExample());
      
      String string0 = "JsonNode not of type ObjectNode (but ";
      MediaType mediaType1 = mediaType0.example(string0);
      assertNotNull(mediaType1);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType1, mediaType0);
      assertEquals("JsonNode not of type ObjectNode (but ", mediaType0.getExample());
      assertEquals("JsonNode not of type ObjectNode (but ", mediaType1.getExample());
      
      io.swagger.oas.models.parameters.Parameter parameter0 = new io.swagger.oas.models.parameters.Parameter();
      assertNotNull(parameter0);
      assertNull(parameter0.getName());
      assertNull(parameter0.getExplode());
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.get$ref());
      assertNull(parameter0.getIn());
      assertNull(parameter0.getExample());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getRequired());
      assertNull(parameter0.getAllowReserved());
      
      String string1 = "java.langio.swagger.oas.models.responses.ApiResponses";
      io.swagger.oas.models.parameters.Parameter parameter1 = parameter0.in(string1);
      assertNotNull(parameter1);
      assertSame(parameter0, parameter1);
      assertNotSame(string1, string0);
      assertSame(parameter1, parameter0);
      assertNull(parameter0.getName());
      assertNull(parameter0.getExplode());
      assertEquals("java.langio.swagger.oas.models.responses.ApiResponses", parameter0.getIn());
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.get$ref());
      assertNull(parameter0.getExample());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getRequired());
      assertNull(parameter0.getAllowReserved());
      assertEquals("java.langio.swagger.oas.models.responses.ApiResponses", parameter1.getIn());
      assertNull(parameter1.getExample());
      assertNull(parameter1.getName());
      assertNull(parameter1.getStyle());
      assertNull(parameter1.get$ref());
      assertNull(parameter1.getDeprecated());
      assertNull(parameter1.getExplode());
      assertNull(parameter1.getAllowReserved());
      assertNull(parameter1.getAllowEmptyValue());
      assertNull(parameter1.getDescription());
      assertNull(parameter1.getRequired());
      assertFalse(string1.equals((Object)string0));
      
      io.swagger.oas.models.parameters.Parameter parameter2 = parameter1.name(string1);
      assertNotNull(parameter2);
      assertSame(parameter0, parameter1);
      assertSame(parameter0, parameter2);
      assertNotSame(string1, string0);
      assertSame(parameter1, parameter0);
      assertSame(parameter1, parameter2);
      assertSame(parameter2, parameter0);
      assertSame(parameter2, parameter1);
      assertEquals("java.langio.swagger.oas.models.responses.ApiResponses", parameter0.getName());
      assertNull(parameter0.getExplode());
      assertEquals("java.langio.swagger.oas.models.responses.ApiResponses", parameter0.getIn());
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.get$ref());
      assertNull(parameter0.getExample());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getRequired());
      assertNull(parameter0.getAllowReserved());
      assertEquals("java.langio.swagger.oas.models.responses.ApiResponses", parameter1.getIn());
      assertNull(parameter1.getExample());
      assertNull(parameter1.getStyle());
      assertNull(parameter1.get$ref());
      assertNull(parameter1.getDeprecated());
      assertNull(parameter1.getExplode());
      assertNull(parameter1.getAllowReserved());
      assertNull(parameter1.getAllowEmptyValue());
      assertNull(parameter1.getDescription());
      assertEquals("java.langio.swagger.oas.models.responses.ApiResponses", parameter1.getName());
      assertNull(parameter1.getRequired());
      assertNull(parameter2.getDescription());
      assertNull(parameter2.getDeprecated());
      assertNull(parameter2.getAllowEmptyValue());
      assertNull(parameter2.getRequired());
      assertEquals("java.langio.swagger.oas.models.responses.ApiResponses", parameter2.getName());
      assertNull(parameter2.getExplode());
      assertNull(parameter2.get$ref());
      assertEquals("java.langio.swagger.oas.models.responses.ApiResponses", parameter2.getIn());
      assertNull(parameter2.getStyle());
      assertNull(parameter2.getExample());
      assertNull(parameter2.getAllowReserved());
      assertFalse(string1.equals((Object)string0));
      
      Scopes scopes0 = new Scopes();
      assertNotNull(scopes0);
      assertTrue(scopes0.isEmpty());
      assertEquals(0, scopes0.size());
      
      Map<String, Object> map0 = scopes0.getExtensions();
      assertNull(map0);
      assertTrue(scopes0.isEmpty());
      assertEquals(0, scopes0.size());
      
      parameter2.setExtensions(map0);
      assertSame(parameter0, parameter1);
      assertSame(parameter0, parameter2);
      assertNotSame(string1, string0);
      assertSame(parameter1, parameter0);
      assertSame(parameter1, parameter2);
      assertSame(parameter2, parameter0);
      assertSame(parameter2, parameter1);
      assertEquals("java.langio.swagger.oas.models.responses.ApiResponses", parameter0.getName());
      assertNull(parameter0.getExplode());
      assertEquals("java.langio.swagger.oas.models.responses.ApiResponses", parameter0.getIn());
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.get$ref());
      assertNull(parameter0.getExample());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getRequired());
      assertNull(parameter0.getAllowReserved());
      assertEquals("java.langio.swagger.oas.models.responses.ApiResponses", parameter1.getIn());
      assertNull(parameter1.getExample());
      assertNull(parameter1.getStyle());
      assertNull(parameter1.get$ref());
      assertNull(parameter1.getDeprecated());
      assertNull(parameter1.getExplode());
      assertNull(parameter1.getAllowReserved());
      assertNull(parameter1.getAllowEmptyValue());
      assertNull(parameter1.getDescription());
      assertEquals("java.langio.swagger.oas.models.responses.ApiResponses", parameter1.getName());
      assertNull(parameter1.getRequired());
      assertNull(parameter2.getDescription());
      assertNull(parameter2.getDeprecated());
      assertNull(parameter2.getAllowEmptyValue());
      assertNull(parameter2.getRequired());
      assertEquals("java.langio.swagger.oas.models.responses.ApiResponses", parameter2.getName());
      assertNull(parameter2.getExplode());
      assertNull(parameter2.get$ref());
      assertEquals("java.langio.swagger.oas.models.responses.ApiResponses", parameter2.getIn());
      assertNull(parameter2.getStyle());
      assertNull(parameter2.getExample());
      assertNull(parameter2.getAllowReserved());
      assertTrue(scopes0.isEmpty());
      assertEquals(0, scopes0.size());
      assertFalse(string1.equals((Object)string0));
      
      String string2 = "io.swagger.jaxrs2.OperationParser";
      Boolean boolean0 = Boolean.valueOf(string2);
      assertNotNull(boolean0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(boolean0);
      
      io.swagger.oas.models.parameters.Parameter parameter3 = parameter2.allowEmptyValue(boolean0);
      assertNotNull(parameter3);
      assertSame(parameter0, parameter1);
      assertSame(parameter0, parameter3);
      assertSame(parameter0, parameter2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(parameter1, parameter0);
      assertSame(parameter1, parameter2);
      assertSame(parameter1, parameter3);
      assertSame(parameter2, parameter3);
      assertSame(parameter2, parameter0);
      assertSame(parameter2, parameter1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(parameter3, parameter0);
      assertSame(parameter3, parameter1);
      assertSame(parameter3, parameter2);
      assertEquals("java.langio.swagger.oas.models.responses.ApiResponses", parameter0.getName());
      assertNull(parameter0.getExplode());
      assertEquals("java.langio.swagger.oas.models.responses.ApiResponses", parameter0.getIn());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.get$ref());
      assertNull(parameter0.getExample());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getRequired());
      assertNull(parameter0.getAllowReserved());
      assertFalse(parameter0.getAllowEmptyValue());
      assertEquals("java.langio.swagger.oas.models.responses.ApiResponses", parameter1.getIn());
      assertNull(parameter1.getExample());
      assertNull(parameter1.getStyle());
      assertNull(parameter1.get$ref());
      assertNull(parameter1.getDeprecated());
      assertNull(parameter1.getExplode());
      assertNull(parameter1.getAllowReserved());
      assertFalse(parameter1.getAllowEmptyValue());
      assertNull(parameter1.getDescription());
      assertEquals("java.langio.swagger.oas.models.responses.ApiResponses", parameter1.getName());
      assertNull(parameter1.getRequired());
      assertNull(parameter2.getDescription());
      assertNull(parameter2.getDeprecated());
      assertNull(parameter2.getRequired());
      assertEquals("java.langio.swagger.oas.models.responses.ApiResponses", parameter2.getName());
      assertNull(parameter2.getExplode());
      assertNull(parameter2.get$ref());
      assertEquals("java.langio.swagger.oas.models.responses.ApiResponses", parameter2.getIn());
      assertNull(parameter2.getStyle());
      assertNull(parameter2.getExample());
      assertFalse(parameter2.getAllowEmptyValue());
      assertNull(parameter2.getAllowReserved());
      assertNull(parameter3.get$ref());
      assertNull(parameter3.getRequired());
      assertNull(parameter3.getAllowReserved());
      assertFalse(parameter3.getAllowEmptyValue());
      assertNull(parameter3.getExplode());
      assertEquals("java.langio.swagger.oas.models.responses.ApiResponses", parameter3.getName());
      assertNull(parameter3.getDescription());
      assertEquals("java.langio.swagger.oas.models.responses.ApiResponses", parameter3.getIn());
      assertNull(parameter3.getStyle());
      assertNull(parameter3.getDeprecated());
      assertNull(parameter3.getExample());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      io.swagger.oas.models.parameters.Parameter parameter4 = parameter1.deprecated(boolean0);
      assertNotNull(parameter4);
      assertSame(parameter0, parameter1);
      assertSame(parameter0, parameter3);
      assertSame(parameter0, parameter4);
      assertSame(parameter0, parameter2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(parameter1, parameter0);
      assertSame(parameter1, parameter4);
      assertSame(parameter1, parameter2);
      assertSame(parameter1, parameter3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(parameter4, parameter0);
      assertSame(parameter4, parameter3);
      assertSame(parameter4, parameter1);
      assertSame(parameter4, parameter2);
      assertEquals("java.langio.swagger.oas.models.responses.ApiResponses", parameter0.getName());
      assertNull(parameter0.getExplode());
      assertEquals("java.langio.swagger.oas.models.responses.ApiResponses", parameter0.getIn());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.get$ref());
      assertNull(parameter0.getExample());
      assertFalse(parameter0.getDeprecated());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getRequired());
      assertNull(parameter0.getAllowReserved());
      assertFalse(parameter0.getAllowEmptyValue());
      assertEquals("java.langio.swagger.oas.models.responses.ApiResponses", parameter1.getIn());
      assertNull(parameter1.getExample());
      assertNull(parameter1.getStyle());
      assertNull(parameter1.get$ref());
      assertNull(parameter1.getExplode());
      assertNull(parameter1.getAllowReserved());
      assertFalse(parameter1.getAllowEmptyValue());
      assertFalse(parameter1.getDeprecated());
      assertNull(parameter1.getDescription());
      assertEquals("java.langio.swagger.oas.models.responses.ApiResponses", parameter1.getName());
      assertNull(parameter1.getRequired());
      assertEquals("java.langio.swagger.oas.models.responses.ApiResponses", parameter4.getName());
      assertNull(parameter4.getStyle());
      assertEquals("java.langio.swagger.oas.models.responses.ApiResponses", parameter4.getIn());
      assertNull(parameter4.getDescription());
      assertFalse(parameter4.getAllowEmptyValue());
      assertNull(parameter4.getRequired());
      assertFalse(parameter4.getDeprecated());
      assertNull(parameter4.getAllowReserved());
      assertNull(parameter4.get$ref());
      assertNull(parameter4.getExample());
      assertNull(parameter4.getExplode());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      Map<String, Example> map1 = parameter3.getExamples();
      assertNull(map1);
      assertSame(parameter0, parameter1);
      assertSame(parameter0, parameter3);
      assertSame(parameter0, parameter4);
      assertSame(parameter0, parameter2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(parameter1, parameter0);
      assertSame(parameter1, parameter4);
      assertSame(parameter1, parameter2);
      assertSame(parameter1, parameter3);
      assertSame(parameter2, parameter4);
      assertSame(parameter2, parameter3);
      assertSame(parameter2, parameter0);
      assertSame(parameter2, parameter1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(parameter3, parameter4);
      assertSame(parameter3, parameter0);
      assertSame(parameter3, parameter1);
      assertSame(parameter3, parameter2);
      assertEquals("java.langio.swagger.oas.models.responses.ApiResponses", parameter0.getName());
      assertNull(parameter0.getExplode());
      assertEquals("java.langio.swagger.oas.models.responses.ApiResponses", parameter0.getIn());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.get$ref());
      assertNull(parameter0.getExample());
      assertFalse(parameter0.getDeprecated());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getRequired());
      assertNull(parameter0.getAllowReserved());
      assertFalse(parameter0.getAllowEmptyValue());
      assertEquals("java.langio.swagger.oas.models.responses.ApiResponses", parameter1.getIn());
      assertNull(parameter1.getExample());
      assertNull(parameter1.getStyle());
      assertNull(parameter1.get$ref());
      assertNull(parameter1.getExplode());
      assertNull(parameter1.getAllowReserved());
      assertFalse(parameter1.getAllowEmptyValue());
      assertFalse(parameter1.getDeprecated());
      assertNull(parameter1.getDescription());
      assertEquals("java.langio.swagger.oas.models.responses.ApiResponses", parameter1.getName());
      assertNull(parameter1.getRequired());
      assertNull(parameter2.getDescription());
      assertNull(parameter2.getRequired());
      assertFalse(parameter2.getDeprecated());
      assertEquals("java.langio.swagger.oas.models.responses.ApiResponses", parameter2.getName());
      assertNull(parameter2.getExplode());
      assertNull(parameter2.get$ref());
      assertEquals("java.langio.swagger.oas.models.responses.ApiResponses", parameter2.getIn());
      assertNull(parameter2.getStyle());
      assertNull(parameter2.getExample());
      assertFalse(parameter2.getAllowEmptyValue());
      assertNull(parameter2.getAllowReserved());
      assertNull(parameter3.get$ref());
      assertFalse(parameter3.getDeprecated());
      assertNull(parameter3.getRequired());
      assertNull(parameter3.getAllowReserved());
      assertFalse(parameter3.getAllowEmptyValue());
      assertNull(parameter3.getExplode());
      assertEquals("java.langio.swagger.oas.models.responses.ApiResponses", parameter3.getName());
      assertNull(parameter3.getDescription());
      assertEquals("java.langio.swagger.oas.models.responses.ApiResponses", parameter3.getIn());
      assertNull(parameter3.getStyle());
      assertNull(parameter3.getExample());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      mediaType0.setExamples(map1);
      assertSame(mediaType0, mediaType1);
      assertSame(parameter0, parameter1);
      assertSame(parameter0, parameter3);
      assertSame(parameter0, parameter4);
      assertSame(parameter0, parameter2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(parameter1, parameter0);
      assertSame(parameter1, parameter4);
      assertSame(parameter1, parameter2);
      assertSame(parameter1, parameter3);
      assertSame(parameter2, parameter4);
      assertSame(parameter2, parameter3);
      assertSame(parameter2, parameter0);
      assertSame(parameter2, parameter1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(parameter3, parameter4);
      assertSame(parameter3, parameter0);
      assertSame(parameter3, parameter1);
      assertSame(parameter3, parameter2);
      assertEquals("JsonNode not of type ObjectNode (but ", mediaType0.getExample());
      assertEquals("java.langio.swagger.oas.models.responses.ApiResponses", parameter0.getName());
      assertNull(parameter0.getExplode());
      assertEquals("java.langio.swagger.oas.models.responses.ApiResponses", parameter0.getIn());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.get$ref());
      assertNull(parameter0.getExample());
      assertFalse(parameter0.getDeprecated());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getRequired());
      assertNull(parameter0.getAllowReserved());
      assertFalse(parameter0.getAllowEmptyValue());
      assertEquals("java.langio.swagger.oas.models.responses.ApiResponses", parameter1.getIn());
      assertNull(parameter1.getExample());
      assertNull(parameter1.getStyle());
      assertNull(parameter1.get$ref());
      assertNull(parameter1.getExplode());
      assertNull(parameter1.getAllowReserved());
      assertFalse(parameter1.getAllowEmptyValue());
      assertFalse(parameter1.getDeprecated());
      assertNull(parameter1.getDescription());
      assertEquals("java.langio.swagger.oas.models.responses.ApiResponses", parameter1.getName());
      assertNull(parameter1.getRequired());
      assertNull(parameter2.getDescription());
      assertNull(parameter2.getRequired());
      assertFalse(parameter2.getDeprecated());
      assertEquals("java.langio.swagger.oas.models.responses.ApiResponses", parameter2.getName());
      assertNull(parameter2.getExplode());
      assertNull(parameter2.get$ref());
      assertEquals("java.langio.swagger.oas.models.responses.ApiResponses", parameter2.getIn());
      assertNull(parameter2.getStyle());
      assertNull(parameter2.getExample());
      assertFalse(parameter2.getAllowEmptyValue());
      assertNull(parameter2.getAllowReserved());
      assertNull(parameter3.get$ref());
      assertFalse(parameter3.getDeprecated());
      assertNull(parameter3.getRequired());
      assertNull(parameter3.getAllowReserved());
      assertFalse(parameter3.getAllowEmptyValue());
      assertNull(parameter3.getExplode());
      assertEquals("java.langio.swagger.oas.models.responses.ApiResponses", parameter3.getName());
      assertNull(parameter3.getDescription());
      assertEquals("java.langio.swagger.oas.models.responses.ApiResponses", parameter3.getIn());
      assertNull(parameter3.getStyle());
      assertNull(parameter3.getExample());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = "=";
      Encoding encoding0 = new Encoding();
      assertNotNull(encoding0);
      assertNull(encoding0.getAllowReserved());
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getExplode());
      assertNull(encoding0.getStyle());
      
      Components components0 = new Components();
      assertNotNull(components0);
      
      Map<String, Header> map2 = components0.getHeaders();
      assertNull(map2);
      
      Encoding encoding1 = encoding0.headers(map2);
      assertNotNull(encoding1);
      assertSame(encoding0, encoding1);
      assertSame(encoding1, encoding0);
      assertNull(encoding0.getAllowReserved());
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getExplode());
      assertNull(encoding0.getStyle());
      assertNull(encoding1.getStyle());
      assertNull(encoding1.getExplode());
      assertNull(encoding1.getAllowReserved());
      assertNull(encoding1.getContentType());
      
      MediaType mediaType2 = mediaType1.addEncoding(string3, encoding1);
      assertNotNull(mediaType2);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType0, mediaType2);
      assertSame(encoding0, encoding1);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertSame(mediaType1, mediaType0);
      assertSame(mediaType1, mediaType2);
      assertSame(encoding1, encoding0);
      assertSame(mediaType2, mediaType1);
      assertSame(mediaType2, mediaType0);
      assertEquals("JsonNode not of type ObjectNode (but ", mediaType0.getExample());
      assertNull(encoding0.getAllowReserved());
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getExplode());
      assertNull(encoding0.getStyle());
      assertEquals("JsonNode not of type ObjectNode (but ", mediaType1.getExample());
      assertNull(encoding1.getStyle());
      assertNull(encoding1.getExplode());
      assertNull(encoding1.getAllowReserved());
      assertNull(encoding1.getContentType());
      assertEquals("JsonNode not of type ObjectNode (but ", mediaType2.getExample());
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      
      io.swagger.oas.models.media.Schema<io.swagger.oas.models.media.Content> schema0 = new io.swagger.oas.models.media.Schema<io.swagger.oas.models.media.Content>();
      assertNotNull(schema0);
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getNullable());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getTitle());
      assertNull(schema0.get$ref());
      assertNull(schema0.getDescription());
      assertNull(schema0.getType());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getMinItems());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getFormat());
      assertNull(schema0.getPattern());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getName());
      
      MediaType mediaType3 = mediaType2.schema(schema0);
      assertNotNull(mediaType3);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType0, mediaType3);
      assertSame(mediaType0, mediaType2);
      assertSame(encoding0, encoding1);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertSame(mediaType1, mediaType0);
      assertSame(mediaType1, mediaType3);
      assertSame(mediaType1, mediaType2);
      assertSame(encoding1, encoding0);
      assertSame(mediaType2, mediaType1);
      assertSame(mediaType2, mediaType0);
      assertSame(mediaType2, mediaType3);
      assertSame(mediaType3, mediaType1);
      assertSame(mediaType3, mediaType2);
      assertSame(mediaType3, mediaType0);
      assertEquals("JsonNode not of type ObjectNode (but ", mediaType0.getExample());
      assertNull(encoding0.getAllowReserved());
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getExplode());
      assertNull(encoding0.getStyle());
      assertEquals("JsonNode not of type ObjectNode (but ", mediaType1.getExample());
      assertNull(encoding1.getStyle());
      assertNull(encoding1.getExplode());
      assertNull(encoding1.getAllowReserved());
      assertNull(encoding1.getContentType());
      assertEquals("JsonNode not of type ObjectNode (but ", mediaType2.getExample());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getNullable());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getTitle());
      assertNull(schema0.get$ref());
      assertNull(schema0.getDescription());
      assertNull(schema0.getType());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getMinItems());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getFormat());
      assertNull(schema0.getPattern());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getName());
      assertEquals("JsonNode not of type ObjectNode (but ", mediaType3.getExample());
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      
      String string4 = "4RYVj5";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exampleObject0).externalValue();
      doReturn(string4, (String) null, (String) null).when(exampleObject0).name();
      doReturn((String) null).when(exampleObject0).summary();
      doReturn((String) null).when(exampleObject0).value();
      Optional<MediaType> optional0 = OperationParser.getMediaType(mediaType3, exampleObject0);
      assertNotNull(optional0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string4);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType0, mediaType3);
      assertSame(mediaType0, mediaType2);
      assertSame(encoding0, encoding1);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string4);
      assertNotSame(string0, string3);
      assertSame(mediaType1, mediaType0);
      assertSame(mediaType1, mediaType3);
      assertSame(mediaType1, mediaType2);
      assertSame(encoding1, encoding0);
      assertSame(mediaType2, mediaType1);
      assertSame(mediaType2, mediaType0);
      assertSame(mediaType2, mediaType3);
      assertSame(mediaType3, mediaType1);
      assertSame(mediaType3, mediaType2);
      assertSame(mediaType3, mediaType0);
      assertNotSame(string4, string2);
      assertNotSame(string4, string0);
      assertNotSame(string4, string1);
      assertNotSame(string4, string3);
      assertEquals("JsonNode not of type ObjectNode (but ", mediaType0.getExample());
      assertNull(encoding0.getAllowReserved());
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getExplode());
      assertNull(encoding0.getStyle());
      assertEquals("JsonNode not of type ObjectNode (but ", mediaType1.getExample());
      assertNull(encoding1.getStyle());
      assertNull(encoding1.getExplode());
      assertNull(encoding1.getAllowReserved());
      assertNull(encoding1.getContentType());
      assertEquals("JsonNode not of type ObjectNode (but ", mediaType2.getExample());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getNullable());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getTitle());
      assertNull(schema0.get$ref());
      assertNull(schema0.getDescription());
      assertNull(schema0.getType());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getMinItems());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getFormat());
      assertNull(schema0.getPattern());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getName());
      assertEquals("JsonNode not of type ObjectNode (but ", mediaType3.getExample());
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      
      boolean boolean1 = false;
      boolean boolean2 = false;
      Content[] contentArray0 = new Content[4];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      contentArray0[3] = contentArray0[2];
      Explode explode0 = Explode.DEFAULT;
      Explode explode1 = Explode.TRUE;
      String string5 = "java.langio.swagger.oas.models.responses.ApiResponses";
      boolean boolean3 = false;
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema1).implementation();
      String string6 = "";
      Parameter parameter5 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean1).when(parameter5).allowEmptyValue();
      doReturn(boolean2).when(parameter5).allowReserved();
      doReturn(boolean1).when(parameter5).deprecated();
      doReturn(string3, (String) null).when(parameter5).description();
      doReturn(explode0, explode1, explode1).when(parameter5).explode();
      doReturn(string5, (String) null).when(parameter5).in();
      doReturn(string4, (String) null).when(parameter5).name();
      doReturn(boolean3).when(parameter5).required();
      doReturn(schema1, schema1, (Schema) null).when(parameter5).schema();
      doReturn(string6).when(parameter5).style();
      // Undeclared exception!
      try { 
        OperationParser.getParameter(parameter5, components0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test020()  throws Throwable  {
      io.swagger.oas.annotations.links.Link link0 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(link0).description();
      doReturn((String) null).when(link0).operationId();
      doReturn((String) null).when(link0).operationRef();
      Optional<Link> optional0 = OperationParser.getLink(link0);
      assertNotNull(optional0);
      
      Parameter[] parameterArray0 = new Parameter[9];
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false, false).when(parameter0).allowEmptyValue();
      doReturn(false, false, false, false, false).when(parameter0).allowReserved();
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(parameter0).content();
      doReturn(false, false, false, false, false).when(parameter0).deprecated();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(parameter0).description();
      doReturn((Explode) null, (Explode) null, (Explode) null, (Explode) null, (Explode) null).when(parameter0).explode();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(parameter0).in();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(parameter0).name();
      doReturn(false, false, false, false, false).when(parameter0).required();
      doReturn((Schema) null, (Schema) null, (Schema) null, (Schema) null, (Schema) null).when(parameter0).schema();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(parameter0).style();
      parameterArray0[0] = parameter0;
      parameterArray0[1] = parameterArray0[0];
      parameterArray0[2] = parameterArray0[1];
      parameterArray0[3] = parameterArray0[2];
      parameterArray0[4] = parameterArray0[3];
      parameterArray0[5] = parameterArray0[4];
      parameterArray0[6] = parameterArray0[5];
      parameterArray0[7] = parameterArray0[6];
      parameterArray0[8] = parameterArray0[7];
      Components components0 = new Components();
      assertNotNull(components0);
      
      String string0 = "java.lang";
      io.swagger.oas.models.media.Schema<Integer> schema0 = new io.swagger.oas.models.media.Schema<Integer>();
      assertNotNull(schema0);
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getDescription());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getName());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getFormat());
      assertNull(schema0.getPattern());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getNullable());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getTitle());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.get$ref());
      assertNull(schema0.getType());
      assertNull(schema0.getMinItems());
      
      Components components1 = components0.addSchemas(string0, schema0);
      assertNotNull(components1);
      assertSame(components1, components0);
      assertSame(components0, components1);
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getDescription());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getName());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getFormat());
      assertNull(schema0.getPattern());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getNullable());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getTitle());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.get$ref());
      assertNull(schema0.getType());
      assertNull(schema0.getMinItems());
      
      String string1 = "WIEJ2x)G<";
      io.swagger.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.oas.models.responses.ApiResponse();
      assertNotNull(apiResponse0);
      assertNull(apiResponse0.get$ref());
      assertNull(apiResponse0.getDescription());
      
      Link link1 = new Link();
      assertNotNull(link1);
      assertNull(link1.getOperationRef());
      assertNull(link1.get$ref());
      assertNull(link1.getOperationId());
      assertNull(link1.getDescription());
      
      io.swagger.oas.models.responses.ApiResponse apiResponse1 = apiResponse0.link(string0, link1);
      assertNotNull(apiResponse1);
      assertSame(apiResponse0, apiResponse1);
      assertSame(apiResponse1, apiResponse0);
      assertNotSame(string0, string1);
      assertNull(apiResponse0.get$ref());
      assertNull(apiResponse0.getDescription());
      assertNull(link1.getOperationRef());
      assertNull(link1.get$ref());
      assertNull(link1.getOperationId());
      assertNull(link1.getDescription());
      assertNull(apiResponse1.getDescription());
      assertNull(apiResponse1.get$ref());
      assertFalse(string0.equals((Object)string1));
      
      String string2 = "P#yx8{J";
      io.swagger.oas.models.responses.ApiResponse apiResponse2 = apiResponse0.link(string2, link1);
      assertNotNull(apiResponse2);
      assertSame(apiResponse0, apiResponse1);
      assertSame(apiResponse0, apiResponse2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(apiResponse2, apiResponse1);
      assertSame(apiResponse2, apiResponse0);
      assertNull(apiResponse0.get$ref());
      assertNull(apiResponse0.getDescription());
      assertNull(link1.getOperationRef());
      assertNull(link1.get$ref());
      assertNull(link1.getOperationId());
      assertNull(link1.getDescription());
      assertNull(apiResponse2.get$ref());
      assertNull(apiResponse2.getDescription());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      Map<String, Header> map0 = components0.getHeaders();
      assertNull(map0);
      assertSame(components0, components1);
      
      io.swagger.oas.models.responses.ApiResponse apiResponse3 = apiResponse1.headers(map0);
      assertNotNull(apiResponse3);
      assertSame(apiResponse0, apiResponse1);
      assertSame(apiResponse0, apiResponse2);
      assertSame(apiResponse0, apiResponse3);
      assertSame(apiResponse1, apiResponse2);
      assertSame(apiResponse1, apiResponse0);
      assertSame(apiResponse1, apiResponse3);
      assertSame(apiResponse3, apiResponse1);
      assertSame(apiResponse3, apiResponse0);
      assertSame(apiResponse3, apiResponse2);
      assertSame(components0, components1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNull(apiResponse0.get$ref());
      assertNull(apiResponse0.getDescription());
      assertNull(link1.getOperationRef());
      assertNull(link1.get$ref());
      assertNull(link1.getOperationId());
      assertNull(link1.getDescription());
      assertNull(apiResponse1.getDescription());
      assertNull(apiResponse1.get$ref());
      assertNull(apiResponse3.get$ref());
      assertNull(apiResponse3.getDescription());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      
      Components components2 = components1.addResponses(string1, apiResponse3);
      assertNotNull(components2);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(apiResponse0, apiResponse1);
      assertSame(apiResponse0, apiResponse2);
      assertSame(apiResponse0, apiResponse3);
      assertSame(apiResponse1, apiResponse2);
      assertSame(apiResponse1, apiResponse0);
      assertSame(apiResponse1, apiResponse3);
      assertSame(apiResponse3, apiResponse1);
      assertSame(apiResponse3, apiResponse0);
      assertSame(apiResponse3, apiResponse2);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNull(apiResponse0.get$ref());
      assertNull(apiResponse0.getDescription());
      assertNull(link1.getOperationRef());
      assertNull(link1.get$ref());
      assertNull(link1.getOperationId());
      assertNull(link1.getDescription());
      assertNull(apiResponse1.getDescription());
      assertNull(apiResponse1.get$ref());
      assertNull(apiResponse3.get$ref());
      assertNull(apiResponse3.getDescription());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getDescription());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getName());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getFormat());
      assertNull(schema0.getPattern());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getNullable());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getTitle());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.get$ref());
      assertNull(schema0.getType());
      assertNull(schema0.getMinItems());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      
      Optional<List<io.swagger.oas.models.parameters.Parameter>> optional1 = OperationParser.getParametersList(parameterArray0, components2);
      assertNotNull(optional1);
      assertEquals(9, parameterArray0.length);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(apiResponse0, apiResponse1);
      assertSame(apiResponse0, apiResponse2);
      assertSame(apiResponse0, apiResponse3);
      assertSame(apiResponse1, apiResponse2);
      assertSame(apiResponse1, apiResponse0);
      assertSame(apiResponse1, apiResponse3);
      assertSame(apiResponse3, apiResponse1);
      assertSame(apiResponse3, apiResponse0);
      assertSame(apiResponse3, apiResponse2);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNull(apiResponse0.get$ref());
      assertNull(apiResponse0.getDescription());
      assertNull(link1.getOperationRef());
      assertNull(link1.get$ref());
      assertNull(link1.getOperationId());
      assertNull(link1.getDescription());
      assertNull(apiResponse1.getDescription());
      assertNull(apiResponse1.get$ref());
      assertNull(apiResponse3.get$ref());
      assertNull(apiResponse3.getDescription());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getDescription());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getName());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getFormat());
      assertNull(schema0.getPattern());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getNullable());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getTitle());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.get$ref());
      assertNull(schema0.getType());
      assertNull(schema0.getMinItems());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      
      String[] stringArray0 = new String[0];
      Optional<Set<Tag>> optional2 = OperationParser.getTags(stringArray0);
      assertNotNull(optional2);
      assertEquals(0, stringArray0.length);
      
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(license0).name();
      doReturn((String) null).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional3 = OperationParser.getLicense(license0);
      assertNotNull(optional3);
      
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(server0).description();
      doReturn((String) null).when(server0).url();
      Optional<io.swagger.oas.models.servers.Server> optional4 = OperationParser.getServer(server0);
      assertNotNull(optional4);
      
      Content[] contentArray0 = new Content[7];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Schema) null).when(content0).schema();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      contentArray0[3] = contentArray0[2];
      contentArray0[4] = contentArray0[3];
      contentArray0[5] = contentArray0[4];
      contentArray0[6] = contentArray0[5];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        OperationParser.getContent(contentArray0, produces0, produces0, components2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test021()  throws Throwable  {
      Info info0 = null;
      Optional<io.swagger.oas.models.info.Info> optional0 = OperationParser.getInfo(info0);
      assertNotNull(optional0);
      
      Server[] serverArray0 = new Server[0];
      Optional<List<io.swagger.oas.models.servers.Server>> optional1 = OperationParser.getServers(serverArray0);
      assertNotNull(optional1);
      assertEquals(0, serverArray0.length);
      
      MediaType mediaType0 = new MediaType();
      assertNotNull(mediaType0);
      assertNull(mediaType0.getExample());
      
      String string0 = null;
      io.swagger.oas.models.media.Schema<ApiResponses> schema0 = new io.swagger.oas.models.media.Schema<ApiResponses>();
      assertNotNull(schema0);
      assertNull(schema0.getMinLength());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getDescription());
      assertNull(schema0.getNullable());
      assertNull(schema0.getType());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.get$ref());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getTitle());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getPattern());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getMinItems());
      assertNull(schema0.getFormat());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getName());
      assertNull(schema0.getExclusiveMinimum());
      
      String string1 = "localizedMessage";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      Optional<io.swagger.oas.models.info.Info> optional2 = OperationParser.getInfo(info0);
      assertNotNull(optional2);
      assertSame(optional2, optional0);
      
      String string2 = null;
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(string2).when(license0).name();
      doReturn(string2).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional3 = OperationParser.getLicense(license0);
      assertNotNull(optional3);
      
      String[] stringArray0 = null;
      Optional<Set<Tag>> optional4 = OperationParser.getTags(stringArray0);
      assertNotNull(optional4);
      
      Optional<Set<Tag>> optional5 = OperationParser.getTags(stringArray0);
      assertNotNull(optional5);
      assertSame(optional5, optional4);
      
      License license1 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(string2).when(license1).name();
      doReturn(string2).when(license1).url();
      Optional<io.swagger.oas.models.info.License> optional6 = OperationParser.getLicense(license1);
      assertNotNull(optional6);
      assertSame(optional6, optional3);
      
      String string3 = "RB]n1t";
      License license2 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(license2).name();
      doReturn(string3, string2).when(license2).url();
      Optional<io.swagger.oas.models.info.License> optional7 = OperationParser.getLicense(license2);
      assertNotNull(optional7);
      assertNotSame(string3, string1);
      assertNotSame(optional7, optional3);
      assertNotSame(optional7, optional6);
      assertFalse(string3.equals((Object)string1));
      assertFalse(optional7.equals((Object)optional3));
      assertFalse(optional7.equals((Object)optional6));
      
      boolean boolean0 = true;
      boolean boolean1 = false;
      Content[] contentArray0 = new Content[2];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      boolean boolean2 = true;
      Explode explode0 = Explode.DEFAULT;
      Explode explode1 = Explode.TRUE;
      String string4 = "default";
      String string5 = "X9KC3lOz]=L#9ER~!";
      boolean boolean3 = true;
      boolean boolean4 = true;
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      String string6 = "java.langint";
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      io.swagger.oas.models.parameters.Parameter parameter1 = new io.swagger.oas.models.parameters.Parameter();
      assertNotNull(parameter1);
      assertNull(parameter1.getDescription());
      assertNull(parameter1.getRequired());
      assertNull(parameter1.getAllowEmptyValue());
      assertNull(parameter1.getDeprecated());
      assertNull(parameter1.getAllowReserved());
      assertNull(parameter1.getName());
      assertNull(parameter1.getStyle());
      assertNull(parameter1.getExample());
      assertNull(parameter1.getIn());
      assertNull(parameter1.get$ref());
      assertNull(parameter1.getExplode());
      
      io.swagger.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.oas.models.responses.ApiResponse();
      assertNotNull(apiResponse0);
      assertNull(apiResponse0.get$ref());
      assertNull(apiResponse0.getDescription());
  }

  @Test(timeout = 11000)
  public void test022()  throws Throwable  {
      Schema schema0 = null;
      Optional<io.swagger.oas.models.media.Schema> optional0 = (Optional<io.swagger.oas.models.media.Schema>)OperationParser.getSchemaFromAnnotation(schema0);
      assertNotNull(optional0);
  }

  @Test(timeout = 11000)
  public void test023()  throws Throwable  {
      ApiResponse[] apiResponseArray0 = new ApiResponse[6];
      Content[] contentArray0 = new Content[4];
      Class<Integer> class0 = Integer.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(schema0).implementation();
      String string0 = null;
      ExampleObject[] exampleObjectArray0 = new ExampleObject[0];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn(exampleObjectArray0).when(content0).examples();
      doReturn(string0).when(content0).mediaType();
      doReturn(schema0, (Schema) null).when(content0).schema();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[0];
      contentArray0[3] = contentArray0[2];
      String string1 = "hS";
      ApiResponse apiResponse0 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn(contentArray0).when(apiResponse0).content();
      doReturn(string1, string1).when(apiResponse0).description();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      apiResponseArray0[3] = apiResponseArray0[2];
      apiResponseArray0[4] = apiResponseArray0[3];
      apiResponseArray0[5] = apiResponseArray0[4];
      String[] stringArray0 = new String[2];
      stringArray0[0] = string1;
      stringArray0[1] = string0;
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      doReturn(stringArray0).when(produces0).value();
      Components components0 = null;
      // Undeclared exception!
      try { 
        OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test024()  throws Throwable  {
      io.swagger.oas.annotations.parameters.RequestBody requestBody0 = mock(io.swagger.oas.annotations.parameters.RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(requestBody0).description();
      doReturn(false).when(requestBody0).required();
      Components components0 = new Components();
      assertNotNull(components0);
      
      String string0 = "";
      Header header0 = new Header();
      assertNotNull(header0);
      assertNull(header0.getExample());
      assertNull(header0.getStyle());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getDeprecated());
      assertNull(header0.getRequired());
      assertNull(header0.getDescription());
      assertNull(header0.get$ref());
      assertNull(header0.getExplode());
      
      Components components1 = components0.addHeaders(string0, header0);
      assertNotNull(components1);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertNull(header0.getExample());
      assertNull(header0.getStyle());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getDeprecated());
      assertNull(header0.getRequired());
      assertNull(header0.getDescription());
      assertNull(header0.get$ref());
      assertNull(header0.getExplode());
      
      String string1 = "{hon}l-n?!;0=/$u%;";
      SecurityScheme securityScheme0 = new SecurityScheme();
      assertNotNull(securityScheme0);
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getBearerFormat());
      
      Components components2 = components1.addSecuritySchemes(string1, securityScheme0);
      assertNotNull(components2);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertNotSame(string0, string1);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertNotSame(string1, string0);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertNull(header0.getExample());
      assertNull(header0.getStyle());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getDeprecated());
      assertNull(header0.getRequired());
      assertNull(header0.getDescription());
      assertNull(header0.get$ref());
      assertNull(header0.getExplode());
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getBearerFormat());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      HashMap<String, Link> hashMap0 = new HashMap<String, Link>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Components components3 = components2.links(hashMap0);
      assertNotNull(components3);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertNotSame(string0, string1);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertNotSame(string1, string0);
      assertSame(components2, components3);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertSame(components3, components1);
      assertNull(header0.getExample());
      assertNull(header0.getStyle());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getDeprecated());
      assertNull(header0.getRequired());
      assertNull(header0.getDescription());
      assertNull(header0.get$ref());
      assertNull(header0.getExplode());
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getBearerFormat());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      Map<String, Callback> map0 = null;
      Components components4 = components3.callbacks(map0);
      assertNotNull(components4);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertSame(components0, components4);
      assertSame(components0, components2);
      assertNotSame(string0, string1);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertSame(components1, components4);
      assertSame(components1, components0);
      assertNotSame(string1, string0);
      assertSame(components2, components3);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components2, components4);
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertSame(components3, components4);
      assertSame(components3, components1);
      assertSame(components4, components2);
      assertSame(components4, components3);
      assertSame(components4, components0);
      assertSame(components4, components1);
      assertNull(header0.getExample());
      assertNull(header0.getStyle());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getDeprecated());
      assertNull(header0.getRequired());
      assertNull(header0.getDescription());
      assertNull(header0.get$ref());
      assertNull(header0.getExplode());
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getBearerFormat());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      Optional<RequestBody> optional0 = OperationParser.getRequestBody(requestBody0, components4);
      assertNotNull(optional0);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertSame(components0, components4);
      assertSame(components0, components2);
      assertNotSame(string0, string1);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertSame(components1, components4);
      assertSame(components1, components0);
      assertNotSame(string1, string0);
      assertSame(components2, components3);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components2, components4);
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertSame(components3, components4);
      assertSame(components3, components1);
      assertSame(components4, components2);
      assertSame(components4, components3);
      assertSame(components4, components0);
      assertSame(components4, components1);
      assertNull(header0.getExample());
      assertNull(header0.getStyle());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getDeprecated());
      assertNull(header0.getRequired());
      assertNull(header0.getDescription());
      assertNull(header0.get$ref());
      assertNull(header0.getExplode());
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getBearerFormat());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 11000)
  public void test025()  throws Throwable  {
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String[]) null).when(schema0).allowableValues();
      doReturn((String) null).when(schema0).defaultValue();
      doReturn(false).when(schema0).deprecated();
      doReturn((String) null).when(schema0).description();
      doReturn((String) null, (String) null).when(schema0).example();
      doReturn(false).when(schema0).exclusiveMaximum();
      doReturn(false).when(schema0).exclusiveMinimum();
      doReturn((ExternalDocumentation) null).when(schema0).externalDocs();
      doReturn((String) null).when(schema0).format();
      doReturn(0).when(schema0).maxLength();
      doReturn(0).when(schema0).minProperties();
      doReturn((String) null).when(schema0).pattern();
      doReturn(false).when(schema0).readOnly();
      doReturn((String) null).when(schema0).ref();
      doReturn((String) null).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional0 = (Optional<io.swagger.oas.models.media.Schema>)OperationParser.getSchemaFromAnnotation(schema0);
      assertNotNull(optional0);
      
      Content[] contentArray0 = new Content[6];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((ExampleObject[]) null).when(content0).examples();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      contentArray0[3] = contentArray0[2];
      contentArray0[4] = contentArray0[3];
      contentArray0[5] = contentArray0[4];
      Components components0 = null;
      // Undeclared exception!
      try { 
        OperationParser.getContents(contentArray0, components0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test026()  throws Throwable  {
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(info0).description();
      doReturn((String) null).when(info0).termsOfService();
      doReturn((String) null).when(info0).title();
      doReturn((String) null).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional0 = OperationParser.getInfo(info0);
      assertNotNull(optional0);
      
      Contact contact0 = null;
      Optional<io.swagger.oas.models.info.Contact> optional1 = OperationParser.getContact(contact0);
      assertNotNull(optional1);
      
      io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[1];
      io.swagger.oas.annotations.links.Link link0 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(link0).description();
      doReturn((String) null).when(link0).operationId();
      doReturn((String) null).when(link0).operationRef();
      linkArray0[0] = link0;
      Map<String, Link> map0 = OperationParser.getLinks(linkArray0);
      assertNotNull(map0);
      assertEquals(1, linkArray0.length);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 11000)
  public void test027()  throws Throwable  {
      io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[3];
      String string0 = null;
      String string1 = "&qN^\\Tm!E{ri";
      String string2 = "P52Jcj*Hj{||.iYz";
      String string3 = "'i";
      io.swagger.oas.annotations.links.Link link0 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string0, string0).when(link0).description();
      doReturn((String) null, (String) null, (String) null).when(link0).name();
      doReturn(string1, string0, string2, (String) null, (String) null).when(link0).operationId();
      doReturn(string0, string0, string3, (String) null).when(link0).operationRef();
      doReturn((Object) null, (Object) null, (Object) null).when(link0).parameters();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      Map<String, Link> map0 = OperationParser.getLinks(linkArray0);
      assertNotNull(map0);
      assertEquals(3, linkArray0.length);
      assertFalse(map0.isEmpty());
      assertEquals(1, map0.size());
      
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(contact0).email();
      doReturn((String) null).when(contact0).name();
      doReturn((String) null).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional0 = OperationParser.getContact(contact0);
      assertNotNull(optional0);
  }

  @Test(timeout = 11000)
  public void test028()  throws Throwable  {
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(license0).name();
      doReturn((String) null).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional0 = OperationParser.getLicense(license0);
      assertNotNull(optional0);
      
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional1 = OperationParser.getExternalDocumentation(externalDocumentation0);
      assertNotNull(optional1);
      
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(server0).description();
      doReturn((String) null).when(server0).url();
      Optional<io.swagger.oas.models.servers.Server> optional2 = OperationParser.getServer(server0);
      assertNotNull(optional2);
      
      Server server1 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(server1).description();
      doReturn((String) null).when(server1).url();
      Optional<io.swagger.oas.models.servers.Server> optional3 = OperationParser.getServer(server1);
      assertNotNull(optional3);
      assertSame(optional3, optional2);
  }

  @Test(timeout = 11000)
  public void test029()  throws Throwable  {
      ApiResponse[] apiResponseArray0 = new ApiResponse[2];
      ApiResponse apiResponse0 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(apiResponse0).content();
      doReturn((String) null, (String) null).when(apiResponse0).description();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      assertNotNull(components0);
      
      HashMap<String, io.swagger.oas.models.parameters.Parameter> hashMap0 = new HashMap<String, io.swagger.oas.models.parameters.Parameter>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Components components1 = components0.parameters(hashMap0);
      assertNotNull(components1);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      String string0 = null;
      Example example0 = new Example();
      assertNotNull(example0);
      assertNull(example0.getDescription());
      assertNull(example0.getExternalValue());
      assertNull(example0.get$ref());
      assertNull(example0.getSummary());
      
      Example example1 = example0.externalValue(string0);
      assertNotNull(example1);
      assertSame(example0, example1);
      assertSame(example1, example0);
      assertNull(example0.getDescription());
      assertNull(example0.getExternalValue());
      assertNull(example0.get$ref());
      assertNull(example0.getSummary());
      assertNull(example1.getDescription());
      assertNull(example1.getSummary());
      assertNull(example1.getExternalValue());
      assertNull(example1.get$ref());
      
      Components components2 = components1.addExamples(string0, example1);
      assertNotNull(components2);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(example0, example1);
      assertSame(example1, example0);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(example0.getDescription());
      assertNull(example0.getExternalValue());
      assertNull(example0.get$ref());
      assertNull(example0.getSummary());
      assertNull(example1.getDescription());
      assertNull(example1.getSummary());
      assertNull(example1.getExternalValue());
      assertNull(example1.get$ref());
      
      io.swagger.oas.models.parameters.Parameter parameter0 = new io.swagger.oas.models.parameters.Parameter();
      assertNotNull(parameter0);
      assertNull(parameter0.getIn());
      assertNull(parameter0.getExample());
      assertNull(parameter0.getName());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getExplode());
      assertNull(parameter0.getAllowReserved());
      assertNull(parameter0.get$ref());
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getRequired());
      
      Components components3 = components2.addParameters(string0, parameter0);
      assertNotNull(components3);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertSame(components1, components3);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(example0, example1);
      assertSame(example1, example0);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(components3, components1);
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(example0.getDescription());
      assertNull(example0.getExternalValue());
      assertNull(example0.get$ref());
      assertNull(example0.getSummary());
      assertNull(example1.getDescription());
      assertNull(example1.getSummary());
      assertNull(example1.getExternalValue());
      assertNull(example1.get$ref());
      assertNull(parameter0.getIn());
      assertNull(parameter0.getExample());
      assertNull(parameter0.getName());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getExplode());
      assertNull(parameter0.getAllowReserved());
      assertNull(parameter0.get$ref());
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getRequired());
      
      Optional<ApiResponses> optional0 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components3);
      assertNotNull(optional0);
      assertEquals(2, apiResponseArray0.length);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertSame(components1, components3);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(example0, example1);
      assertSame(example1, example0);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(components3, components1);
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(example0.getDescription());
      assertNull(example0.getExternalValue());
      assertNull(example0.get$ref());
      assertNull(example0.getSummary());
      assertNull(example1.getDescription());
      assertNull(example1.getSummary());
      assertNull(example1.getExternalValue());
      assertNull(example1.get$ref());
      assertNull(parameter0.getIn());
      assertNull(parameter0.getExample());
      assertNull(parameter0.getName());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getExplode());
      assertNull(parameter0.getAllowReserved());
      assertNull(parameter0.get$ref());
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getRequired());
  }

  @Test(timeout = 11000)
  public void test030()  throws Throwable  {
      OperationParser operationParser0 = new OperationParser();
      assertNotNull(operationParser0);
      
      io.swagger.oas.annotations.links.Link link0 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(link0).description();
      doReturn((String) null).when(link0).operationId();
      doReturn((String) null).when(link0).operationRef();
      Optional<Link> optional0 = OperationParser.getLink(link0);
      assertNotNull(optional0);
  }

  @Test(timeout = 11000)
  public void test031()  throws Throwable  {
      Parameter[] parameterArray0 = null;
      Components components0 = new Components();
      assertNotNull(components0);
      
      String string0 = "";
      Link link0 = new Link();
      assertNotNull(link0);
      assertNull(link0.getOperationId());
      assertNull(link0.getDescription());
      assertNull(link0.getOperationRef());
      assertNull(link0.get$ref());
      
      Components components1 = components0.addLinks(string0, link0);
      assertNotNull(components1);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertNull(link0.getOperationId());
      assertNull(link0.getDescription());
      assertNull(link0.getOperationRef());
      assertNull(link0.get$ref());
      
      io.swagger.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.oas.models.responses.ApiResponse();
      assertNotNull(apiResponse0);
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      
      Components components2 = components1.addResponses(string0, apiResponse0);
      assertNotNull(components2);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertNull(link0.getOperationId());
      assertNull(link0.getDescription());
      assertNull(link0.getOperationRef());
      assertNull(link0.get$ref());
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      
      io.swagger.oas.models.parameters.Parameter parameter0 = new io.swagger.oas.models.parameters.Parameter();
      assertNotNull(parameter0);
      assertNull(parameter0.getStyle());
      assertNull(parameter0.get$ref());
      assertNull(parameter0.getIn());
      assertNull(parameter0.getExample());
      assertNull(parameter0.getExplode());
      assertNull(parameter0.getRequired());
      assertNull(parameter0.getAllowReserved());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getName());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getAllowEmptyValue());
      
      Map<String, Example> map0 = parameter0.getExamples();
      assertNull(map0);
      assertNull(parameter0.getStyle());
      assertNull(parameter0.get$ref());
      assertNull(parameter0.getIn());
      assertNull(parameter0.getExample());
      assertNull(parameter0.getExplode());
      assertNull(parameter0.getRequired());
      assertNull(parameter0.getAllowReserved());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getName());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getAllowEmptyValue());
      
      Components components3 = components2.examples(map0);
      assertNotNull(components3);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertSame(components2, components3);
      assertSame(components3, components2);
      assertSame(components3, components1);
      assertSame(components3, components0);
      assertNull(link0.getOperationId());
      assertNull(link0.getDescription());
      assertNull(link0.getOperationRef());
      assertNull(link0.get$ref());
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.get$ref());
      assertNull(parameter0.getIn());
      assertNull(parameter0.getExample());
      assertNull(parameter0.getExplode());
      assertNull(parameter0.getRequired());
      assertNull(parameter0.getAllowReserved());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getName());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getAllowEmptyValue());
      
      String string1 = "G8T]|f{f3RP#p";
      io.swagger.oas.models.media.Schema<SecurityScheme> schema0 = null;
      Components components4 = components3.addSchemas(string1, schema0);
      assertNotNull(components4);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components0, components4);
      assertNotSame(string0, string1);
      assertSame(components1, components4);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertSame(components2, components4);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertSame(components2, components3);
      assertSame(components3, components2);
      assertSame(components3, components4);
      assertSame(components3, components1);
      assertSame(components3, components0);
      assertNotSame(string1, string0);
      assertSame(components4, components3);
      assertSame(components4, components0);
      assertSame(components4, components2);
      assertSame(components4, components1);
      assertNull(link0.getOperationId());
      assertNull(link0.getDescription());
      assertNull(link0.getOperationRef());
      assertNull(link0.get$ref());
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.get$ref());
      assertNull(parameter0.getIn());
      assertNull(parameter0.getExample());
      assertNull(parameter0.getExplode());
      assertNull(parameter0.getRequired());
      assertNull(parameter0.getAllowReserved());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getName());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getAllowEmptyValue());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      Optional<List<io.swagger.oas.models.parameters.Parameter>> optional0 = OperationParser.getParametersList(parameterArray0, components4);
      assertNotNull(optional0);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components0, components4);
      assertNotSame(string0, string1);
      assertSame(components1, components4);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertSame(components2, components4);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertSame(components2, components3);
      assertSame(components3, components2);
      assertSame(components3, components4);
      assertSame(components3, components1);
      assertSame(components3, components0);
      assertNotSame(string1, string0);
      assertSame(components4, components3);
      assertSame(components4, components0);
      assertSame(components4, components2);
      assertSame(components4, components1);
      assertNull(link0.getOperationId());
      assertNull(link0.getDescription());
      assertNull(link0.getOperationRef());
      assertNull(link0.get$ref());
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.get$ref());
      assertNull(parameter0.getIn());
      assertNull(parameter0.getExample());
      assertNull(parameter0.getExplode());
      assertNull(parameter0.getRequired());
      assertNull(parameter0.getAllowReserved());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getName());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getAllowEmptyValue());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 11000)
  public void test032()  throws Throwable  {
      Parameter[] parameterArray0 = new Parameter[0];
      Components components0 = new Components();
      assertNotNull(components0);
      
      io.swagger.oas.models.media.Schema<io.swagger.oas.models.ExternalDocumentation> schema0 = new io.swagger.oas.models.media.Schema<io.swagger.oas.models.ExternalDocumentation>();
      assertNotNull(schema0);
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getMinItems());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getPattern());
      assertNull(schema0.getFormat());
      assertNull(schema0.get$ref());
      assertNull(schema0.getName());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getNullable());
      assertNull(schema0.getTitle());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getDescription());
      assertNull(schema0.getType());
      assertNull(schema0.getWriteOnly());
      
      Map<String, io.swagger.oas.models.media.Schema> map0 = (Map<String, io.swagger.oas.models.media.Schema>)schema0.getProperties();
      assertNull(map0);
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getMinItems());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getPattern());
      assertNull(schema0.getFormat());
      assertNull(schema0.get$ref());
      assertNull(schema0.getName());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getNullable());
      assertNull(schema0.getTitle());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getDescription());
      assertNull(schema0.getType());
      assertNull(schema0.getWriteOnly());
      
      Components components1 = components0.schemas(map0);
      assertNotNull(components1);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getMinItems());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getPattern());
      assertNull(schema0.getFormat());
      assertNull(schema0.get$ref());
      assertNull(schema0.getName());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getNullable());
      assertNull(schema0.getTitle());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getDescription());
      assertNull(schema0.getType());
      assertNull(schema0.getWriteOnly());
      
      String string0 = null;
      io.swagger.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.oas.models.responses.ApiResponse();
      assertNotNull(apiResponse0);
      assertNull(apiResponse0.get$ref());
      assertNull(apiResponse0.getDescription());
      
      Components components2 = components1.addResponses(string0, apiResponse0);
      assertNotNull(components2);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getMinItems());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getPattern());
      assertNull(schema0.getFormat());
      assertNull(schema0.get$ref());
      assertNull(schema0.getName());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getNullable());
      assertNull(schema0.getTitle());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getDescription());
      assertNull(schema0.getType());
      assertNull(schema0.getWriteOnly());
      assertNull(apiResponse0.get$ref());
      assertNull(apiResponse0.getDescription());
      
      Link link0 = null;
      Components components3 = components2.addLinks(string0, link0);
      assertNotNull(components3);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(components2, components0);
      assertSame(components3, components1);
      assertSame(components3, components2);
      assertSame(components3, components0);
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getMinItems());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getPattern());
      assertNull(schema0.getFormat());
      assertNull(schema0.get$ref());
      assertNull(schema0.getName());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getNullable());
      assertNull(schema0.getTitle());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getDescription());
      assertNull(schema0.getType());
      assertNull(schema0.getWriteOnly());
      assertNull(apiResponse0.get$ref());
      assertNull(apiResponse0.getDescription());
      
      String string1 = "JSON";
      RequestBody requestBody0 = new RequestBody();
      assertNotNull(requestBody0);
      assertNull(requestBody0.get$ref());
      assertNull(requestBody0.getDescription());
      assertNull(requestBody0.getRequired());
      
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      RequestBody requestBody1 = requestBody0.required(boolean0);
      assertNotNull(requestBody1);
      assertSame(requestBody0, requestBody1);
      assertSame(requestBody1, requestBody0);
      assertNull(requestBody0.get$ref());
      assertTrue(requestBody0.getRequired());
      assertNull(requestBody0.getDescription());
      assertNull(requestBody1.get$ref());
      assertNull(requestBody1.getDescription());
      assertTrue(requestBody1.getRequired());
      
      String string2 = "[method ";
      RequestBody requestBody2 = requestBody1.description(string2);
      assertNotNull(requestBody2);
      assertSame(requestBody0, requestBody2);
      assertSame(requestBody0, requestBody1);
      assertSame(requestBody1, requestBody2);
      assertSame(requestBody1, requestBody0);
      assertNotSame(string2, string1);
      assertSame(requestBody2, requestBody1);
      assertSame(requestBody2, requestBody0);
      assertNull(requestBody0.get$ref());
      assertEquals("[method ", requestBody0.getDescription());
      assertTrue(requestBody0.getRequired());
      assertNull(requestBody1.get$ref());
      assertTrue(requestBody1.getRequired());
      assertEquals("[method ", requestBody1.getDescription());
      assertEquals("[method ", requestBody2.getDescription());
      assertTrue(requestBody2.getRequired());
      assertNull(requestBody2.get$ref());
      assertFalse(string2.equals((Object)string1));
      
      Components components4 = components3.addRequestBodies(string1, requestBody2);
      assertNotNull(components4);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components0, components4);
      assertSame(components1, components2);
      assertSame(components1, components4);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertSame(components2, components1);
      assertSame(components2, components4);
      assertSame(components2, components3);
      assertSame(components2, components0);
      assertSame(components3, components1);
      assertSame(components3, components4);
      assertSame(components3, components2);
      assertSame(components3, components0);
      assertNotSame(string1, string2);
      assertSame(requestBody0, requestBody2);
      assertSame(requestBody0, requestBody1);
      assertSame(requestBody1, requestBody2);
      assertSame(requestBody1, requestBody0);
      assertNotSame(string2, string1);
      assertSame(requestBody2, requestBody1);
      assertSame(requestBody2, requestBody0);
      assertSame(components4, components0);
      assertSame(components4, components3);
      assertSame(components4, components1);
      assertSame(components4, components2);
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getMinItems());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getPattern());
      assertNull(schema0.getFormat());
      assertNull(schema0.get$ref());
      assertNull(schema0.getName());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getNullable());
      assertNull(schema0.getTitle());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getDescription());
      assertNull(schema0.getType());
      assertNull(schema0.getWriteOnly());
      assertNull(apiResponse0.get$ref());
      assertNull(apiResponse0.getDescription());
      assertNull(requestBody0.get$ref());
      assertEquals("[method ", requestBody0.getDescription());
      assertTrue(requestBody0.getRequired());
      assertNull(requestBody1.get$ref());
      assertTrue(requestBody1.getRequired());
      assertEquals("[method ", requestBody1.getDescription());
      assertEquals("[method ", requestBody2.getDescription());
      assertTrue(requestBody2.getRequired());
      assertNull(requestBody2.get$ref());
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      
      Optional<List<io.swagger.oas.models.parameters.Parameter>> optional0 = OperationParser.getParametersList(parameterArray0, components4);
      assertNotNull(optional0);
      assertEquals(0, parameterArray0.length);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components0, components4);
      assertSame(components1, components2);
      assertSame(components1, components4);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertSame(components2, components1);
      assertSame(components2, components4);
      assertSame(components2, components3);
      assertSame(components2, components0);
      assertSame(components3, components1);
      assertSame(components3, components4);
      assertSame(components3, components2);
      assertSame(components3, components0);
      assertNotSame(string1, string2);
      assertSame(requestBody0, requestBody2);
      assertSame(requestBody0, requestBody1);
      assertSame(requestBody1, requestBody2);
      assertSame(requestBody1, requestBody0);
      assertNotSame(string2, string1);
      assertSame(requestBody2, requestBody1);
      assertSame(requestBody2, requestBody0);
      assertSame(components4, components0);
      assertSame(components4, components3);
      assertSame(components4, components1);
      assertSame(components4, components2);
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getMinItems());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getPattern());
      assertNull(schema0.getFormat());
      assertNull(schema0.get$ref());
      assertNull(schema0.getName());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getNullable());
      assertNull(schema0.getTitle());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getDescription());
      assertNull(schema0.getType());
      assertNull(schema0.getWriteOnly());
      assertNull(apiResponse0.get$ref());
      assertNull(apiResponse0.getDescription());
      assertNull(requestBody0.get$ref());
      assertEquals("[method ", requestBody0.getDescription());
      assertTrue(requestBody0.getRequired());
      assertNull(requestBody1.get$ref());
      assertTrue(requestBody1.getRequired());
      assertEquals("[method ", requestBody1.getDescription());
      assertEquals("[method ", requestBody2.getDescription());
      assertTrue(requestBody2.getRequired());
      assertNull(requestBody2.get$ref());
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 11000)
  public void test033()  throws Throwable  {
      Parameter[] parameterArray0 = new Parameter[2];
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(parameter0).allowEmptyValue();
      doReturn(false, false).when(parameter0).allowReserved();
      doReturn((Object) null, (Object) null).when(parameter0).content();
      doReturn(false, false).when(parameter0).deprecated();
      doReturn((String) null, (String) null).when(parameter0).description();
      doReturn((Explode) null, (Explode) null, (Explode) null, (Explode) null, (Explode) null).when(parameter0).explode();
      doReturn((String) null, (String) null).when(parameter0).in();
      doReturn((String) null, (String) null).when(parameter0).name();
      doReturn(false, false).when(parameter0).required();
      doReturn((Schema) null, (Schema) null, (Schema) null, (Schema) null).when(parameter0).schema();
      doReturn((String) null, (String) null).when(parameter0).style();
      parameterArray0[0] = parameter0;
      parameterArray0[1] = parameterArray0[0];
      Components components0 = null;
      Optional<List<io.swagger.oas.models.parameters.Parameter>> optional0 = OperationParser.getParametersList(parameterArray0, components0);
      assertNotNull(optional0);
      assertEquals(2, parameterArray0.length);
  }

  @Test(timeout = 11000)
  public void test034()  throws Throwable  {
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(info0).description();
      doReturn((String) null).when(info0).termsOfService();
      doReturn((String) null).when(info0).title();
      doReturn((String) null).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional0 = OperationParser.getInfo(info0);
      assertNotNull(optional0);
      
      io.swagger.oas.annotations.parameters.RequestBody requestBody0 = mock(io.swagger.oas.annotations.parameters.RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(requestBody0).description();
      doReturn(false).when(requestBody0).required();
      Components components0 = new Components();
      assertNotNull(components0);
      
      HashMap<String, RequestBody> hashMap0 = new HashMap<String, RequestBody>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Components components1 = components0.requestBodies(hashMap0);
      assertNotNull(components1);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      io.swagger.oas.models.media.Schema<io.swagger.oas.models.ExternalDocumentation> schema0 = new io.swagger.oas.models.media.Schema<io.swagger.oas.models.ExternalDocumentation>();
      assertNotNull(schema0);
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getName());
      assertNull(schema0.getMinItems());
      assertNull(schema0.get$ref());
      assertNull(schema0.getType());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getTitle());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getPattern());
      assertNull(schema0.getDescription());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getFormat());
      assertNull(schema0.getNullable());
      assertNull(schema0.getReadOnly());
      
      Map<String, io.swagger.oas.models.media.Schema> map0 = (Map<String, io.swagger.oas.models.media.Schema>)schema0.getProperties();
      assertNull(map0);
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getName());
      assertNull(schema0.getMinItems());
      assertNull(schema0.get$ref());
      assertNull(schema0.getType());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getTitle());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getPattern());
      assertNull(schema0.getDescription());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getFormat());
      assertNull(schema0.getNullable());
      assertNull(schema0.getReadOnly());
      
      Components components2 = components1.schemas(map0);
      assertNotNull(components2);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getName());
      assertNull(schema0.getMinItems());
      assertNull(schema0.get$ref());
      assertNull(schema0.getType());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getTitle());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getPattern());
      assertNull(schema0.getDescription());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getFormat());
      assertNull(schema0.getNullable());
      assertNull(schema0.getReadOnly());
      
      Map<String, Header> map1 = null;
      String string0 = "#/components/schemas/";
      RequestBody requestBody1 = null;
      RequestBody requestBody2 = hashMap0.put(string0, requestBody1);
      assertNull(requestBody2);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      Components components3 = components2.headers(map1);
      assertNotNull(components3);
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components1, components3);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components2, components3);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertSame(components3, components1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getName());
      assertNull(schema0.getMinItems());
      assertNull(schema0.get$ref());
      assertNull(schema0.getType());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getTitle());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getPattern());
      assertNull(schema0.getDescription());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getFormat());
      assertNull(schema0.getNullable());
      assertNull(schema0.getReadOnly());
      
      Optional<RequestBody> optional1 = OperationParser.getRequestBody(requestBody0, components3);
      assertNotNull(optional1);
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components1, components3);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components2, components3);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertSame(components3, components1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getName());
      assertNull(schema0.getMinItems());
      assertNull(schema0.get$ref());
      assertNull(schema0.getType());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getTitle());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getPattern());
      assertNull(schema0.getDescription());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getFormat());
      assertNull(schema0.getNullable());
      assertNull(schema0.getReadOnly());
      
      Content[] contentArray0 = new Content[0];
      Optional<io.swagger.oas.models.media.Content> optional2 = OperationParser.getContents(contentArray0, components2);
      assertNotNull(optional2);
      assertEquals(0, contentArray0.length);
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components1, components3);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components2, components3);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getName());
      assertNull(schema0.getMinItems());
      assertNull(schema0.get$ref());
      assertNull(schema0.getType());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getTitle());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getPattern());
      assertNull(schema0.getDescription());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getFormat());
      assertNull(schema0.getNullable());
      assertNull(schema0.getReadOnly());
      
      io.swagger.oas.annotations.parameters.RequestBody requestBody3 = mock(io.swagger.oas.annotations.parameters.RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(requestBody3).description();
      doReturn(false).when(requestBody3).required();
      Optional<RequestBody> optional3 = OperationParser.getRequestBody(requestBody3, components1);
      assertNotNull(optional3);
      assertSame(optional3, optional1);
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components1, components3);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      io.swagger.oas.annotations.links.Link link0 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(link0).description();
      doReturn((String) null).when(link0).operationId();
      doReturn((String) null).when(link0).operationRef();
      Optional<Link> optional4 = OperationParser.getLink(link0);
      assertNotNull(optional4);
  }

  @Test(timeout = 11000)
  public void test035()  throws Throwable  {
      Content[] contentArray0 = new Content[0];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      assertNotNull(components0);
      
      Map<String, io.swagger.oas.models.media.Schema> map0 = (Map<String, io.swagger.oas.models.media.Schema>)components0.getSchemas();
      assertNull(map0);
      
      Components components1 = components0.schemas(map0);
      assertNotNull(components1);
      assertSame(components0, components1);
      assertSame(components1, components0);
      
      String string0 = "";
      Callback callback0 = new Callback();
      assertNotNull(callback0);
      assertEquals(0, callback0.size());
      assertTrue(callback0.isEmpty());
      
      Components components2 = components1.addCallbacks(string0, callback0);
      assertNotNull(components2);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertEquals(0, callback0.size());
      assertTrue(callback0.isEmpty());
      
      Map<String, io.swagger.oas.models.parameters.Parameter> map1 = components1.getParameters();
      assertNull(map1);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components1, components2);
      assertSame(components1, components0);
      
      Components components3 = components2.parameters(map1);
      assertNotNull(components3);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(components2, components0);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertSame(components3, components2);
      assertEquals(0, callback0.size());
      assertTrue(callback0.isEmpty());
      
      Operation operation0 = new Operation();
      assertNotNull(operation0);
      assertNull(operation0.getDeprecated());
      assertNull(operation0.getSummary());
      assertNull(operation0.getDescription());
      assertNull(operation0.getOperationId());
      
      LinkedList<io.swagger.oas.models.servers.Server> linkedList0 = new LinkedList<io.swagger.oas.models.servers.Server>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Operation operation1 = operation0.servers(linkedList0);
      assertNotNull(operation1);
      assertSame(operation0, operation1);
      assertSame(operation1, operation0);
      assertNull(operation0.getDeprecated());
      assertNull(operation0.getSummary());
      assertNull(operation0.getDescription());
      assertNull(operation0.getOperationId());
      assertEquals(0, linkedList0.size());
      assertNull(operation1.getSummary());
      assertNull(operation1.getDeprecated());
      assertNull(operation1.getOperationId());
      assertNull(operation1.getDescription());
      
      Map<String, Callback> map2 = operation1.getCallbacks();
      assertNull(map2);
      assertSame(operation0, operation1);
      assertSame(operation1, operation0);
      assertNull(operation0.getDeprecated());
      assertNull(operation0.getSummary());
      assertNull(operation0.getDescription());
      assertNull(operation0.getOperationId());
      assertEquals(0, linkedList0.size());
      assertNull(operation1.getSummary());
      assertNull(operation1.getDeprecated());
      assertNull(operation1.getOperationId());
      assertNull(operation1.getDescription());
      
      Components components4 = components3.callbacks(map2);
      assertNotNull(components4);
      assertSame(components0, components1);
      assertSame(components0, components4);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components1, components2);
      assertSame(components1, components4);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(components2, components4);
      assertSame(components2, components0);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertSame(components3, components2);
      assertSame(components3, components4);
      assertSame(operation0, operation1);
      assertSame(operation1, operation0);
      assertSame(components4, components1);
      assertSame(components4, components2);
      assertSame(components4, components3);
      assertSame(components4, components0);
      assertEquals(0, callback0.size());
      assertTrue(callback0.isEmpty());
      assertNull(operation0.getDeprecated());
      assertNull(operation0.getSummary());
      assertNull(operation0.getDescription());
      assertNull(operation0.getOperationId());
      assertEquals(0, linkedList0.size());
      assertNull(operation1.getSummary());
      assertNull(operation1.getDeprecated());
      assertNull(operation1.getOperationId());
      assertNull(operation1.getDescription());
      
      Optional<io.swagger.oas.models.media.Content> optional0 = OperationParser.getContent(contentArray0, produces0, produces0, components4);
      assertNotNull(optional0);
      assertEquals(0, contentArray0.length);
      assertSame(components0, components1);
      assertSame(components0, components4);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components1, components2);
      assertSame(components1, components4);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(components2, components4);
      assertSame(components2, components0);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertSame(components3, components2);
      assertSame(components3, components4);
      assertSame(operation0, operation1);
      assertSame(operation1, operation0);
      assertSame(components4, components1);
      assertSame(components4, components2);
      assertSame(components4, components3);
      assertSame(components4, components0);
      assertEquals(0, callback0.size());
      assertTrue(callback0.isEmpty());
      assertNull(operation0.getDeprecated());
      assertNull(operation0.getSummary());
      assertNull(operation0.getDescription());
      assertNull(operation0.getOperationId());
      assertEquals(0, linkedList0.size());
      assertNull(operation1.getSummary());
      assertNull(operation1.getDeprecated());
      assertNull(operation1.getOperationId());
      assertNull(operation1.getDescription());
  }

  @Test(timeout = 11000)
  public void test036()  throws Throwable  {
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional0 = OperationParser.getExternalDocumentation(externalDocumentation0);
      assertNotNull(optional0);
      
      Content[] contentArray0 = new Content[8];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Schema) null).when(content0).schema();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      contentArray0[3] = contentArray0[2];
      contentArray0[4] = contentArray0[3];
      contentArray0[5] = contentArray0[4];
      contentArray0[6] = contentArray0[5];
      contentArray0[7] = contentArray0[6];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Produces produces1 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      assertNotNull(components0);
      
      HashMap<String, Callback> hashMap0 = new HashMap<String, Callback>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Components components1 = components0.callbacks(hashMap0);
      assertNotNull(components1);
      assertSame(components1, components0);
      assertSame(components0, components1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      // Undeclared exception!
      try { 
        OperationParser.getContent(contentArray0, produces0, produces1, components1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test037()  throws Throwable  {
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(parameter0).allowEmptyValue();
      doReturn(false).when(parameter0).allowReserved();
      doReturn((Content[]) null).when(parameter0).content();
      doReturn(false).when(parameter0).deprecated();
      doReturn((String) null).when(parameter0).description();
      doReturn((Explode) null, (Explode) null, (Explode) null).when(parameter0).explode();
      doReturn((String) null).when(parameter0).in();
      doReturn((String) null).when(parameter0).name();
      doReturn(false).when(parameter0).required();
      doReturn((Schema) null, (Schema) null).when(parameter0).schema();
      doReturn((String) null).when(parameter0).style();
      Components components0 = new Components();
      assertNotNull(components0);
      
      Map<String, io.swagger.oas.models.responses.ApiResponse> map0 = components0.getResponses();
      assertNull(map0);
      
      Components components1 = components0.responses(map0);
      assertNotNull(components1);
      assertSame(components0, components1);
      assertSame(components1, components0);
      
      Optional<io.swagger.oas.models.parameters.Parameter> optional0 = OperationParser.getParameter(parameter0, components1);
      assertNotNull(optional0);
      assertSame(components0, components1);
      assertSame(components1, components0);
      
      io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[9];
      io.swagger.oas.annotations.links.Link link0 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).description();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).operationId();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).operationRef();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      linkArray0[3] = linkArray0[2];
      linkArray0[4] = linkArray0[3];
      linkArray0[5] = linkArray0[4];
      linkArray0[6] = linkArray0[5];
      linkArray0[7] = linkArray0[6];
      linkArray0[8] = linkArray0[7];
      Map<String, Link> map1 = OperationParser.getLinks(linkArray0);
      assertNotNull(map1);
      assertEquals(9, linkArray0.length);
      assertTrue(map1.isEmpty());
      assertEquals(0, map1.size());
      
      Parameter parameter1 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(parameter1).allowEmptyValue();
      doReturn(false).when(parameter1).allowReserved();
      doReturn((Content[]) null).when(parameter1).content();
      doReturn(false).when(parameter1).deprecated();
      doReturn((String) null).when(parameter1).description();
      doReturn((Explode) null, (Explode) null, (Explode) null).when(parameter1).explode();
      doReturn((String) null).when(parameter1).in();
      doReturn((String) null).when(parameter1).name();
      doReturn(false).when(parameter1).required();
      doReturn((Schema) null, (Schema) null).when(parameter1).schema();
      doReturn((String) null).when(parameter1).style();
      Optional<io.swagger.oas.models.parameters.Parameter> optional1 = OperationParser.getParameter(parameter1, components1);
      assertNotNull(optional1);
      assertSame(components0, components1);
      assertNotSame(optional1, optional0);
      assertSame(components1, components0);
      assertTrue(optional1.equals((Object)optional0));
      
      LinkParameter[] linkParameterArray0 = new LinkParameter[4];
      LinkParameter linkParameter0 = mock(LinkParameter.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null).when(linkParameter0).name();
      linkParameterArray0[0] = linkParameter0;
      linkParameterArray0[1] = linkParameterArray0[0];
      linkParameterArray0[2] = linkParameterArray0[1];
      linkParameterArray0[3] = linkParameterArray0[2];
      Map<String, String> map2 = OperationParser.getLinkParameters(linkParameterArray0);
      assertNotNull(map2);
      assertEquals(4, linkParameterArray0.length);
      assertEquals(0, map2.size());
      assertTrue(map2.isEmpty());
      
      io.swagger.oas.annotations.parameters.RequestBody requestBody0 = null;
      Optional<RequestBody> optional2 = OperationParser.getRequestBody(requestBody0, components0);
      assertNotNull(optional2);
      assertSame(components0, components1);
      
      Parameter parameter2 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(parameter2).allowEmptyValue();
      doReturn(false).when(parameter2).allowReserved();
      doReturn((Content[]) null).when(parameter2).content();
      doReturn(false).when(parameter2).deprecated();
      doReturn((String) null).when(parameter2).description();
      doReturn((Explode) null, (Explode) null, (Explode) null).when(parameter2).explode();
      doReturn((String) null).when(parameter2).in();
      doReturn((String) null).when(parameter2).name();
      doReturn(false).when(parameter2).required();
      doReturn((Schema) null, (Schema) null).when(parameter2).schema();
      doReturn((String) null).when(parameter2).style();
      Optional<io.swagger.oas.models.parameters.Parameter> optional3 = OperationParser.getParameter(parameter2, components0);
      assertNotNull(optional3);
      assertSame(components0, components1);
      assertNotSame(optional3, optional1);
      assertNotSame(optional3, optional0);
      assertTrue(optional3.equals((Object)optional0));
      assertTrue(optional3.equals((Object)optional1));
      
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(server0).description();
      doReturn((String) null).when(server0).url();
      Optional<io.swagger.oas.models.servers.Server> optional4 = OperationParser.getServer(server0);
      assertNotNull(optional4);
  }

  @Test(timeout = 11000)
  public void test038()  throws Throwable  {
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(license0).name();
      doReturn((String) null).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional0 = OperationParser.getLicense(license0);
      assertNotNull(optional0);
      
      io.swagger.oas.annotations.parameters.RequestBody requestBody0 = mock(io.swagger.oas.annotations.parameters.RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(requestBody0).description();
      doReturn(false).when(requestBody0).required();
      Components components0 = new Components();
      assertNotNull(components0);
      
      Optional<RequestBody> optional1 = OperationParser.getRequestBody(requestBody0, components0);
      assertNotNull(optional1);
      
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(contact0).email();
      doReturn((String) null).when(contact0).name();
      doReturn((String) null).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional2 = OperationParser.getContact(contact0);
      assertNotNull(optional2);
      
      Content[] contentArray0 = new Content[4];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((ExampleObject[]) null).when(content0).examples();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      contentArray0[3] = contentArray0[2];
      // Undeclared exception!
      try { 
        OperationParser.getContents(contentArray0, components0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test039()  throws Throwable  {
      Content[] contentArray0 = new Content[1];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Schema) null).when(content0).schema();
      contentArray0[0] = content0;
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      assertNotNull(components0);
      
      Map<String, io.swagger.oas.models.media.Schema> map0 = (Map<String, io.swagger.oas.models.media.Schema>)components0.getSchemas();
      assertNull(map0);
      
      Components components1 = components0.schemas(map0);
      assertNotNull(components1);
      assertSame(components0, components1);
      assertSame(components1, components0);
      
      HashMap<String, Header> hashMap0 = new HashMap<String, Header>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Components components2 = components1.headers(hashMap0);
      assertNotNull(components2);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      io.swagger.oas.models.parameters.Parameter parameter0 = new io.swagger.oas.models.parameters.Parameter();
      assertNotNull(parameter0);
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getExample());
      assertNull(parameter0.getIn());
      assertNull(parameter0.getName());
      assertNull(parameter0.get$ref());
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getRequired());
      assertNull(parameter0.getAllowReserved());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getExplode());
      
      Map<String, Example> map1 = parameter0.getExamples();
      assertNull(map1);
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getExample());
      assertNull(parameter0.getIn());
      assertNull(parameter0.getName());
      assertNull(parameter0.get$ref());
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getRequired());
      assertNull(parameter0.getAllowReserved());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getExplode());
      
      Components components3 = components2.examples(map1);
      assertNotNull(components3);
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertSame(components2, components3);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertSame(components3, components2);
      assertSame(components3, components1);
      assertSame(components3, components0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getExample());
      assertNull(parameter0.getIn());
      assertNull(parameter0.getName());
      assertNull(parameter0.get$ref());
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getRequired());
      assertNull(parameter0.getAllowReserved());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getExplode());
      
      String string0 = "";
      RequestBody requestBody0 = new RequestBody();
      assertNotNull(requestBody0);
      assertNull(requestBody0.getDescription());
      assertNull(requestBody0.get$ref());
      assertNull(requestBody0.getRequired());
      
      io.swagger.oas.models.media.Content content1 = new io.swagger.oas.models.media.Content();
      assertNotNull(content1);
      assertTrue(content1.isEmpty());
      assertEquals(0, content1.size());
      
      RequestBody requestBody1 = requestBody0.content(content1);
      assertNotNull(requestBody1);
      assertSame(requestBody0, requestBody1);
      assertSame(requestBody1, requestBody0);
      assertNull(requestBody0.getDescription());
      assertNull(requestBody0.get$ref());
      assertNull(requestBody0.getRequired());
      assertTrue(content1.isEmpty());
      assertEquals(0, content1.size());
      assertNull(requestBody1.getRequired());
      assertNull(requestBody1.getDescription());
      assertNull(requestBody1.get$ref());
      
      RequestBody requestBody2 = requestBody1.description(string0);
      assertNotNull(requestBody2);
      assertSame(requestBody2, requestBody1);
      assertSame(requestBody2, requestBody0);
      assertSame(requestBody0, requestBody1);
      assertSame(requestBody0, requestBody2);
      assertSame(requestBody1, requestBody2);
      assertSame(requestBody1, requestBody0);
      assertNull(requestBody2.get$ref());
      assertEquals("", requestBody2.getDescription());
      assertNull(requestBody2.getRequired());
      assertEquals("", requestBody0.getDescription());
      assertNull(requestBody0.get$ref());
      assertNull(requestBody0.getRequired());
      assertTrue(content1.isEmpty());
      assertEquals(0, content1.size());
      assertNull(requestBody1.getRequired());
      assertEquals("", requestBody1.getDescription());
      assertNull(requestBody1.get$ref());
      
      Components components4 = components3.addRequestBodies(string0, requestBody2);
      assertNotNull(components4);
      assertSame(requestBody2, requestBody1);
      assertSame(requestBody2, requestBody0);
      assertSame(components4, components0);
      assertSame(components4, components1);
      assertSame(components4, components2);
      assertSame(components4, components3);
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components0, components4);
      assertSame(components1, components2);
      assertSame(components1, components4);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertSame(components2, components4);
      assertSame(components2, components3);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertSame(components3, components4);
      assertSame(components3, components2);
      assertSame(components3, components1);
      assertSame(components3, components0);
      assertSame(requestBody0, requestBody1);
      assertSame(requestBody0, requestBody2);
      assertSame(requestBody1, requestBody2);
      assertSame(requestBody1, requestBody0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getExample());
      assertNull(parameter0.getIn());
      assertNull(parameter0.getName());
      assertNull(parameter0.get$ref());
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getRequired());
      assertNull(parameter0.getAllowReserved());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getExplode());
      assertEquals("", requestBody0.getDescription());
      assertNull(requestBody0.get$ref());
      assertNull(requestBody0.getRequired());
      assertTrue(content1.isEmpty());
      assertEquals(0, content1.size());
      assertNull(requestBody1.getRequired());
      assertEquals("", requestBody1.getDescription());
      assertNull(requestBody1.get$ref());
      assertNull(requestBody2.get$ref());
      assertEquals("", requestBody2.getDescription());
      assertNull(requestBody2.getRequired());
      
      // Undeclared exception!
      try { 
        OperationParser.getContent(contentArray0, produces0, produces0, components4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test040()  throws Throwable  {
      Content[] contentArray0 = null;
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      assertNotNull(components0);
      
      String string0 = "io.swagger.jaxrs2.OperationParser";
      Link link0 = new Link();
      assertNotNull(link0);
      assertNull(link0.getOperationRef());
      assertNull(link0.get$ref());
      assertNull(link0.getOperationId());
      assertNull(link0.getDescription());
      
      Components components1 = components0.addLinks(string0, link0);
      assertNotNull(components1);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertNull(link0.getOperationRef());
      assertNull(link0.get$ref());
      assertNull(link0.getOperationId());
      assertNull(link0.getDescription());
      
      io.swagger.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.oas.models.responses.ApiResponse();
      assertNotNull(apiResponse0);
      assertNull(apiResponse0.get$ref());
      assertNull(apiResponse0.getDescription());
      
      Components components2 = components1.addResponses(string0, apiResponse0);
      assertNotNull(components2);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertNull(link0.getOperationRef());
      assertNull(link0.get$ref());
      assertNull(link0.getOperationId());
      assertNull(link0.getDescription());
      assertNull(apiResponse0.get$ref());
      assertNull(apiResponse0.getDescription());
      
      Map<String, io.swagger.oas.models.responses.ApiResponse> map0 = null;
      Components components3 = components2.responses(map0);
      assertNotNull(components3);
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components1, components3);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components2, components3);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components3, components1);
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertNull(link0.getOperationRef());
      assertNull(link0.get$ref());
      assertNull(link0.getOperationId());
      assertNull(link0.getDescription());
      assertNull(apiResponse0.get$ref());
      assertNull(apiResponse0.getDescription());
      
      Map<String, io.swagger.oas.models.media.Schema> map1 = (Map<String, io.swagger.oas.models.media.Schema>)components3.getSchemas();
      assertNull(map1);
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components1, components3);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components2, components3);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components3, components1);
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertNull(link0.getOperationRef());
      assertNull(link0.get$ref());
      assertNull(link0.getOperationId());
      assertNull(link0.getDescription());
      assertNull(apiResponse0.get$ref());
      assertNull(apiResponse0.getDescription());
      
      Components components4 = components3.schemas(map1);
      assertNotNull(components4);
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components0, components4);
      assertSame(components1, components3);
      assertSame(components1, components4);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components2, components3);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components2, components4);
      assertSame(components3, components1);
      assertSame(components3, components0);
      assertSame(components3, components4);
      assertSame(components3, components2);
      assertSame(components4, components3);
      assertSame(components4, components0);
      assertSame(components4, components1);
      assertSame(components4, components2);
      assertNull(link0.getOperationRef());
      assertNull(link0.get$ref());
      assertNull(link0.getOperationId());
      assertNull(link0.getDescription());
      assertNull(apiResponse0.get$ref());
      assertNull(apiResponse0.getDescription());
      
      Optional<io.swagger.oas.models.media.Content> optional0 = OperationParser.getContent(contentArray0, produces0, produces0, components4);
      assertNotNull(optional0);
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components0, components4);
      assertSame(components1, components3);
      assertSame(components1, components4);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components2, components3);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components2, components4);
      assertSame(components3, components1);
      assertSame(components3, components0);
      assertSame(components3, components4);
      assertSame(components3, components2);
      assertSame(components4, components3);
      assertSame(components4, components0);
      assertSame(components4, components1);
      assertSame(components4, components2);
      assertNull(link0.getOperationRef());
      assertNull(link0.get$ref());
      assertNull(link0.getOperationId());
      assertNull(link0.getDescription());
      assertNull(apiResponse0.get$ref());
      assertNull(apiResponse0.getDescription());
      
      Server[] serverArray0 = new Server[2];
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(server0).description();
      doReturn((String) null, (String) null).when(server0).url();
      serverArray0[0] = server0;
      serverArray0[1] = serverArray0[0];
      Optional<List<io.swagger.oas.models.servers.Server>> optional1 = OperationParser.getServers(serverArray0);
      assertNotNull(optional1);
      assertEquals(2, serverArray0.length);
      
      LinkParameter[] linkParameterArray0 = new LinkParameter[5];
      LinkParameter linkParameter0 = mock(LinkParameter.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(linkParameter0).name();
      linkParameterArray0[0] = linkParameter0;
      linkParameterArray0[1] = linkParameterArray0[0];
      linkParameterArray0[2] = linkParameterArray0[1];
      linkParameterArray0[3] = linkParameterArray0[2];
      linkParameterArray0[4] = linkParameterArray0[3];
      Map<String, String> map2 = OperationParser.getLinkParameters(linkParameterArray0);
      assertNotNull(map2);
      assertEquals(5, linkParameterArray0.length);
      assertEquals(0, map2.size());
      assertTrue(map2.isEmpty());
      
      Optional<io.swagger.oas.models.media.Content> optional2 = OperationParser.getContents(contentArray0, components0);
      assertNotNull(optional2);
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components0, components4);
      assertSame(optional2, optional0);
      
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(info0).description();
      doReturn((String) null).when(info0).termsOfService();
      doReturn((String) null).when(info0).title();
      doReturn((String) null).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional3 = OperationParser.getInfo(info0);
      assertNotNull(optional3);
  }

  @Test(timeout = 11000)
  public void test041()  throws Throwable  {
      Parameter parameter0 = null;
      Components components0 = new Components();
      assertNotNull(components0);
      
      Map<String, io.swagger.oas.models.media.Schema> map0 = (Map<String, io.swagger.oas.models.media.Schema>)components0.getSchemas();
      assertNull(map0);
      
      Components components1 = components0.schemas(map0);
      assertNotNull(components1);
      assertSame(components0, components1);
      assertSame(components1, components0);
      
      MediaType mediaType0 = new MediaType();
      assertNotNull(mediaType0);
      assertNull(mediaType0.getExample());
      
      Map<String, Example> map1 = mediaType0.getExamples();
      assertNull(map1);
      assertNull(mediaType0.getExample());
      
      Components components2 = components1.examples(map1);
      assertNotNull(components2);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertNull(mediaType0.getExample());
      
      String string0 = "ko\"\"sl5";
      io.swagger.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.oas.models.responses.ApiResponse();
      assertNotNull(apiResponse0);
      assertNull(apiResponse0.get$ref());
      assertNull(apiResponse0.getDescription());
      
      Map<String, Header> map2 = components2.getHeaders();
      assertNull(map2);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertNull(mediaType0.getExample());
      
      io.swagger.oas.models.responses.ApiResponse apiResponse1 = apiResponse0.headers(map2);
      assertNotNull(apiResponse1);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertSame(apiResponse0, apiResponse1);
      assertSame(apiResponse1, apiResponse0);
      assertNull(mediaType0.getExample());
      assertNull(apiResponse0.get$ref());
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse1.get$ref());
      assertNull(apiResponse1.getDescription());
      
      Components components3 = components2.addResponses(string0, apiResponse1);
      assertNotNull(components3);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components1, components2);
      assertSame(components1, components3);
      assertSame(components1, components0);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(components2, components0);
      assertSame(apiResponse0, apiResponse1);
      assertSame(apiResponse1, apiResponse0);
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertSame(components3, components1);
      assertNull(mediaType0.getExample());
      assertNull(apiResponse0.get$ref());
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse1.get$ref());
      assertNull(apiResponse1.getDescription());
      
      HashMap<String, SecurityScheme> hashMap0 = new HashMap<String, SecurityScheme>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Components components4 = components3.securitySchemes(hashMap0);
      assertNotNull(components4);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components0, components4);
      assertSame(components1, components4);
      assertSame(components1, components2);
      assertSame(components1, components3);
      assertSame(components1, components0);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(components2, components0);
      assertSame(components2, components4);
      assertSame(apiResponse0, apiResponse1);
      assertSame(apiResponse1, apiResponse0);
      assertSame(components3, components4);
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertSame(components3, components1);
      assertSame(components4, components0);
      assertSame(components4, components2);
      assertSame(components4, components1);
      assertSame(components4, components3);
      assertNull(mediaType0.getExample());
      assertNull(apiResponse0.get$ref());
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse1.get$ref());
      assertNull(apiResponse1.getDescription());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Optional<io.swagger.oas.models.parameters.Parameter> optional0 = OperationParser.getParameter(parameter0, components4);
      assertNotNull(optional0);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components0, components4);
      assertSame(components1, components4);
      assertSame(components1, components2);
      assertSame(components1, components3);
      assertSame(components1, components0);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(components2, components0);
      assertSame(components2, components4);
      assertSame(apiResponse0, apiResponse1);
      assertSame(apiResponse1, apiResponse0);
      assertSame(components3, components4);
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertSame(components3, components1);
      assertSame(components4, components0);
      assertSame(components4, components2);
      assertSame(components4, components1);
      assertSame(components4, components3);
      assertNull(mediaType0.getExample());
      assertNull(apiResponse0.get$ref());
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse1.get$ref());
      assertNull(apiResponse1.getDescription());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
  }

  @Test(timeout = 11000)
  public void test042()  throws Throwable  {
      LinkParameter[] linkParameterArray0 = new LinkParameter[0];
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameterArray0);
      assertNotNull(map0);
      assertEquals(0, linkParameterArray0.length);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      MediaType mediaType0 = new MediaType();
      assertNotNull(mediaType0);
      assertNull(mediaType0.getExample());
      
      ExampleObject exampleObject0 = null;
      Optional<MediaType> optional0 = OperationParser.getMediaType(mediaType0, exampleObject0);
      assertNotNull(optional0);
      assertNull(mediaType0.getExample());
  }

  @Test(timeout = 11000)
  public void test043()  throws Throwable  {
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional0 = OperationParser.getExternalDocumentation(externalDocumentation0);
      assertNotNull(optional0);
      
      MediaType mediaType0 = new MediaType();
      assertNotNull(mediaType0);
      assertNull(mediaType0.getExample());
      
      String string0 = "No FormatFeatures defined for parser of type ";
      Encoding encoding0 = new Encoding();
      assertNotNull(encoding0);
      assertNull(encoding0.getAllowReserved());
      assertNull(encoding0.getStyle());
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getExplode());
      
      MediaType mediaType1 = mediaType0.addEncoding(string0, encoding0);
      assertNotNull(mediaType1);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType1, mediaType0);
      assertNull(mediaType0.getExample());
      assertNull(encoding0.getAllowReserved());
      assertNull(encoding0.getStyle());
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getExplode());
      assertNull(mediaType1.getExample());
      
      io.swagger.oas.models.media.Schema<io.swagger.oas.models.info.Contact> schema0 = new io.swagger.oas.models.media.Schema<io.swagger.oas.models.info.Contact>();
      assertNotNull(schema0);
      assertNull(schema0.getName());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getNullable());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getDescription());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getPattern());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getFormat());
      assertNull(schema0.getTitle());
      assertNull(schema0.getType());
      assertNull(schema0.getMinItems());
      assertNull(schema0.get$ref());
      assertNull(schema0.getMaxLength());
      
      MediaType mediaType2 = mediaType1.schema(schema0);
      assertNotNull(mediaType2);
      assertSame(mediaType0, mediaType2);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType1, mediaType2);
      assertSame(mediaType1, mediaType0);
      assertSame(mediaType2, mediaType1);
      assertSame(mediaType2, mediaType0);
      assertNull(mediaType0.getExample());
      assertNull(encoding0.getAllowReserved());
      assertNull(encoding0.getStyle());
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getExplode());
      assertNull(mediaType1.getExample());
      assertNull(schema0.getName());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getNullable());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getDescription());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getPattern());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getFormat());
      assertNull(schema0.getTitle());
      assertNull(schema0.getType());
      assertNull(schema0.getMinItems());
      assertNull(schema0.get$ref());
      assertNull(schema0.getMaxLength());
      assertNull(mediaType2.getExample());
      
      HashMap<String, Encoding> hashMap0 = new HashMap<String, Encoding>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      MediaType mediaType3 = mediaType2.encoding(hashMap0);
      assertNotNull(mediaType3);
      assertSame(mediaType0, mediaType2);
      assertSame(mediaType0, mediaType3);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType1, mediaType2);
      assertSame(mediaType1, mediaType3);
      assertSame(mediaType1, mediaType0);
      assertSame(mediaType2, mediaType3);
      assertSame(mediaType2, mediaType1);
      assertSame(mediaType2, mediaType0);
      assertSame(mediaType3, mediaType0);
      assertSame(mediaType3, mediaType1);
      assertSame(mediaType3, mediaType2);
      assertNull(mediaType0.getExample());
      assertNull(encoding0.getAllowReserved());
      assertNull(encoding0.getStyle());
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getExplode());
      assertNull(mediaType1.getExample());
      assertNull(schema0.getName());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getNullable());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getDescription());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getPattern());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getFormat());
      assertNull(schema0.getTitle());
      assertNull(schema0.getType());
      assertNull(schema0.getMinItems());
      assertNull(schema0.get$ref());
      assertNull(schema0.getMaxLength());
      assertNull(mediaType2.getExample());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(mediaType3.getExample());
      
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exampleObject0).name();
      Optional<MediaType> optional1 = OperationParser.getMediaType(mediaType3, exampleObject0);
      assertNotNull(optional1);
      assertSame(mediaType0, mediaType2);
      assertSame(mediaType0, mediaType3);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType1, mediaType2);
      assertSame(mediaType1, mediaType3);
      assertSame(mediaType1, mediaType0);
      assertSame(mediaType2, mediaType3);
      assertSame(mediaType2, mediaType1);
      assertSame(mediaType2, mediaType0);
      assertSame(mediaType3, mediaType0);
      assertSame(mediaType3, mediaType1);
      assertSame(mediaType3, mediaType2);
      assertNull(mediaType0.getExample());
      assertNull(encoding0.getAllowReserved());
      assertNull(encoding0.getStyle());
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getExplode());
      assertNull(mediaType1.getExample());
      assertNull(schema0.getName());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getNullable());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getDescription());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getPattern());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getFormat());
      assertNull(schema0.getTitle());
      assertNull(schema0.getType());
      assertNull(schema0.getMinItems());
      assertNull(schema0.get$ref());
      assertNull(schema0.getMaxLength());
      assertNull(mediaType2.getExample());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(mediaType3.getExample());
  }

  @Test(timeout = 11000)
  public void test044()  throws Throwable  {
      io.swagger.oas.annotations.links.Link link0 = null;
      Optional<Link> optional0 = OperationParser.getLink(link0);
      assertNotNull(optional0);
      
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(license0).name();
      doReturn((String) null).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional1 = OperationParser.getLicense(license0);
      assertNotNull(optional1);
      
      Server[] serverArray0 = new Server[0];
      Optional<List<io.swagger.oas.models.servers.Server>> optional2 = OperationParser.getServers(serverArray0);
      assertNotNull(optional2);
      assertEquals(0, serverArray0.length);
      
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(info0).description();
      doReturn((String) null).when(info0).termsOfService();
      doReturn((String) null).when(info0).title();
      doReturn((String) null).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional3 = OperationParser.getInfo(info0);
      assertNotNull(optional3);
      
      io.swagger.oas.annotations.parameters.RequestBody requestBody0 = mock(io.swagger.oas.annotations.parameters.RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(requestBody0).description();
      doReturn(false).when(requestBody0).required();
      Components components0 = new Components();
      assertNotNull(components0);
      
      Map<String, io.swagger.oas.models.parameters.Parameter> map0 = null;
      Components components1 = components0.parameters(map0);
      assertNotNull(components1);
      assertSame(components0, components1);
      assertSame(components1, components0);
      
      String string0 = "";
      io.swagger.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.oas.models.responses.ApiResponse();
      assertNotNull(apiResponse0);
      assertNull(apiResponse0.get$ref());
      assertNull(apiResponse0.getDescription());
      
      Components components2 = components1.addResponses(string0, apiResponse0);
      assertNotNull(components2);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertNull(apiResponse0.get$ref());
      assertNull(apiResponse0.getDescription());
      
      io.swagger.oas.models.parameters.Parameter parameter0 = new io.swagger.oas.models.parameters.Parameter();
      assertNotNull(parameter0);
      assertNull(parameter0.getName());
      assertNull(parameter0.getExplode());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getIn());
      assertNull(parameter0.getExample());
      assertNull(parameter0.getAllowReserved());
      assertNull(parameter0.get$ref());
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.getRequired());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getDescription());
      
      Map<String, Example> map1 = parameter0.getExamples();
      assertNull(map1);
      assertNull(parameter0.getName());
      assertNull(parameter0.getExplode());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getIn());
      assertNull(parameter0.getExample());
      assertNull(parameter0.getAllowReserved());
      assertNull(parameter0.get$ref());
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.getRequired());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getDescription());
      
      Components components3 = components2.examples(map1);
      assertNotNull(components3);
      assertSame(components3, components2);
      assertSame(components3, components1);
      assertSame(components3, components0);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components1, components3);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(components2, components0);
      assertNull(apiResponse0.get$ref());
      assertNull(apiResponse0.getDescription());
      assertNull(parameter0.getName());
      assertNull(parameter0.getExplode());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getIn());
      assertNull(parameter0.getExample());
      assertNull(parameter0.getAllowReserved());
      assertNull(parameter0.get$ref());
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.getRequired());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getDescription());
      
      io.swagger.oas.models.media.Schema<Link> schema0 = new io.swagger.oas.models.media.Schema<Link>();
      assertNotNull(schema0);
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getPattern());
      assertNull(schema0.getFormat());
      assertNull(schema0.get$ref());
      assertNull(schema0.getTitle());
      assertNull(schema0.getNullable());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getDescription());
      assertNull(schema0.getType());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getName());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getMinItems());
      
      Components components4 = components3.addSchemas(string0, schema0);
      assertNotNull(components4);
      assertSame(components3, components4);
      assertSame(components3, components2);
      assertSame(components3, components1);
      assertSame(components3, components0);
      assertSame(components4, components3);
      assertSame(components4, components1);
      assertSame(components4, components0);
      assertSame(components4, components2);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components0, components4);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components1, components3);
      assertSame(components1, components4);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(components2, components4);
      assertSame(components2, components0);
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getPattern());
      assertNull(schema0.getFormat());
      assertNull(schema0.get$ref());
      assertNull(schema0.getTitle());
      assertNull(schema0.getNullable());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getDescription());
      assertNull(schema0.getType());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getName());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getMinItems());
      assertNull(apiResponse0.get$ref());
      assertNull(apiResponse0.getDescription());
      assertNull(parameter0.getName());
      assertNull(parameter0.getExplode());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getIn());
      assertNull(parameter0.getExample());
      assertNull(parameter0.getAllowReserved());
      assertNull(parameter0.get$ref());
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.getRequired());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getDescription());
      
      Optional<RequestBody> optional4 = OperationParser.getRequestBody(requestBody0, components4);
      assertNotNull(optional4);
      assertSame(components3, components4);
      assertSame(components3, components2);
      assertSame(components3, components1);
      assertSame(components3, components0);
      assertSame(components4, components3);
      assertSame(components4, components1);
      assertSame(components4, components0);
      assertSame(components4, components2);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components0, components4);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components1, components3);
      assertSame(components1, components4);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(components2, components4);
      assertSame(components2, components0);
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getPattern());
      assertNull(schema0.getFormat());
      assertNull(schema0.get$ref());
      assertNull(schema0.getTitle());
      assertNull(schema0.getNullable());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getDescription());
      assertNull(schema0.getType());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getName());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getMinItems());
      assertNull(apiResponse0.get$ref());
      assertNull(apiResponse0.getDescription());
      assertNull(parameter0.getName());
      assertNull(parameter0.getExplode());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getIn());
      assertNull(parameter0.getExample());
      assertNull(parameter0.getAllowReserved());
      assertNull(parameter0.get$ref());
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.getRequired());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getDescription());
  }

  @Test(timeout = 11000)
  public void test045()  throws Throwable  {
      String string0 = "#/components/schemas/";
      String string1 = "X(QL+?\\";
      String string2 = null;
      String string3 = "<vl#F";
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn((Contact) null).when(info0).contact();
      doReturn(string0, (String) null).when(info0).description();
      doReturn((License) null).when(info0).license();
      doReturn(string1, (String) null).when(info0).termsOfService();
      doReturn(string2).when(info0).title();
      doReturn(string3, (String) null).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional0 = OperationParser.getInfo(info0);
      assertNotNull(optional0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      Parameter[] parameterArray0 = new Parameter[0];
      Components components0 = new Components();
      assertNotNull(components0);
      
      Map<String, io.swagger.oas.models.responses.ApiResponse> map0 = components0.getResponses();
      assertNull(map0);
      
      Components components1 = components0.responses(map0);
      assertNotNull(components1);
      assertSame(components0, components1);
      assertSame(components1, components0);
      
      Map<String, io.swagger.oas.models.parameters.Parameter> map1 = components1.getParameters();
      assertNull(map1);
      assertSame(components0, components1);
      assertSame(components1, components0);
      
      Components components2 = components1.parameters(map1);
      assertNotNull(components2);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components2, components1);
      assertSame(components2, components0);
      
      Map<String, SecurityScheme> map2 = components2.getSecuritySchemes();
      assertNull(map2);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components2, components1);
      assertSame(components2, components0);
      
      Components components3 = components2.securitySchemes(map2);
      assertNotNull(components3);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components1, components3);
      assertSame(components2, components3);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertSame(components3, components1);
      assertSame(components3, components0);
      assertSame(components3, components2);
      
      String string4 = "No Base64Variant with name ";
      io.swagger.oas.models.parameters.Parameter parameter0 = new io.swagger.oas.models.parameters.Parameter();
      assertNotNull(parameter0);
      assertNull(parameter0.getAllowReserved());
      assertNull(parameter0.get$ref());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getExplode());
      assertNull(parameter0.getIn());
      assertNull(parameter0.getExample());
      assertNull(parameter0.getName());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getRequired());
      
      String string5 = "overflow, value can not be represented as 8-bit value";
      Boolean boolean0 = new Boolean(string5);
      assertNotNull(boolean0);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(boolean0);
      
      Components components4 = components2.responses(map0);
      assertNotNull(components4);
      assertSame(components4, components3);
      assertSame(components4, components1);
      assertSame(components4, components0);
      assertSame(components4, components2);
      assertSame(components0, components1);
      assertSame(components0, components4);
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertSame(components1, components0);
      assertSame(components1, components4);
      assertSame(components1, components2);
      assertSame(components1, components3);
      assertSame(components2, components3);
      assertSame(components2, components1);
      assertSame(components2, components4);
      assertSame(components2, components0);
      
      io.swagger.oas.models.parameters.Parameter parameter1 = parameter0.allowEmptyValue(boolean0);
      assertNotNull(parameter1);
      assertNotSame(string5, string1);
      assertNotSame(string5, string0);
      assertNotSame(string5, string3);
      assertNotSame(string5, string4);
      assertSame(parameter1, parameter0);
      assertSame(parameter0, parameter1);
      assertNull(parameter1.getAllowReserved());
      assertNull(parameter1.get$ref());
      assertFalse(parameter1.getAllowEmptyValue());
      assertNull(parameter1.getName());
      assertNull(parameter1.getExplode());
      assertNull(parameter1.getDeprecated());
      assertNull(parameter1.getIn());
      assertNull(parameter1.getExample());
      assertNull(parameter1.getRequired());
      assertNull(parameter1.getStyle());
      assertNull(parameter1.getDescription());
      assertFalse(parameter0.getAllowEmptyValue());
      assertNull(parameter0.getAllowReserved());
      assertNull(parameter0.get$ref());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getExplode());
      assertNull(parameter0.getIn());
      assertNull(parameter0.getExample());
      assertNull(parameter0.getName());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getRequired());
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      
      io.swagger.oas.models.media.Schema<Tag> schema0 = new io.swagger.oas.models.media.Schema<Tag>();
      assertNotNull(schema0);
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getFormat());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getDescription());
      assertNull(schema0.getType());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getPattern());
      assertNull(schema0.getNullable());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getMinItems());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.get$ref());
      assertNull(schema0.getName());
      assertNull(schema0.getTitle());
      assertNull(schema0.getMaxLength());
      
      io.swagger.oas.models.parameters.Parameter parameter2 = parameter1.schema(schema0);
      assertNotNull(parameter2);
      assertNotSame(string5, string1);
      assertNotSame(string5, string0);
      assertNotSame(string5, string3);
      assertNotSame(string5, string4);
      assertSame(parameter1, parameter2);
      assertSame(parameter1, parameter0);
      assertSame(parameter2, parameter0);
      assertSame(parameter2, parameter1);
      assertSame(parameter0, parameter2);
      assertSame(parameter0, parameter1);
      assertNull(parameter1.getAllowReserved());
      assertNull(parameter1.get$ref());
      assertFalse(parameter1.getAllowEmptyValue());
      assertNull(parameter1.getName());
      assertNull(parameter1.getExplode());
      assertNull(parameter1.getDeprecated());
      assertNull(parameter1.getIn());
      assertNull(parameter1.getExample());
      assertNull(parameter1.getRequired());
      assertNull(parameter1.getStyle());
      assertNull(parameter1.getDescription());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getFormat());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getDescription());
      assertNull(schema0.getType());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getPattern());
      assertNull(schema0.getNullable());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getMinItems());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.get$ref());
      assertNull(schema0.getName());
      assertNull(schema0.getTitle());
      assertNull(schema0.getMaxLength());
      assertNull(parameter2.getName());
      assertNull(parameter2.getExplode());
      assertNull(parameter2.getDescription());
      assertNull(parameter2.getStyle());
      assertNull(parameter2.getDeprecated());
      assertNull(parameter2.getIn());
      assertNull(parameter2.getExample());
      assertNull(parameter2.get$ref());
      assertNull(parameter2.getAllowReserved());
      assertNull(parameter2.getRequired());
      assertFalse(parameter2.getAllowEmptyValue());
      assertFalse(parameter0.getAllowEmptyValue());
      assertNull(parameter0.getAllowReserved());
      assertNull(parameter0.get$ref());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getExplode());
      assertNull(parameter0.getIn());
      assertNull(parameter0.getExample());
      assertNull(parameter0.getName());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getRequired());
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      
      Components components5 = components3.addParameters(string4, parameter2);
      assertNotNull(components5);
      assertNotSame(string5, string1);
      assertNotSame(string5, string0);
      assertNotSame(string5, string3);
      assertNotSame(string5, string4);
      assertSame(parameter1, parameter2);
      assertSame(parameter1, parameter0);
      assertSame(parameter2, parameter0);
      assertSame(parameter2, parameter1);
      assertSame(components5, components0);
      assertSame(components5, components4);
      assertSame(components5, components1);
      assertSame(components5, components3);
      assertSame(components5, components2);
      assertSame(components0, components1);
      assertSame(components0, components4);
      assertSame(components0, components5);
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertSame(components1, components0);
      assertSame(components1, components5);
      assertSame(components1, components4);
      assertSame(components1, components2);
      assertSame(components1, components3);
      assertSame(components2, components5);
      assertSame(components2, components3);
      assertSame(components2, components1);
      assertSame(components2, components4);
      assertSame(components2, components0);
      assertSame(components3, components1);
      assertSame(components3, components0);
      assertSame(components3, components4);
      assertSame(components3, components5);
      assertSame(components3, components2);
      assertNotSame(string4, string0);
      assertNotSame(string4, string5);
      assertNotSame(string4, string3);
      assertNotSame(string4, string1);
      assertSame(parameter0, parameter2);
      assertSame(parameter0, parameter1);
      assertNull(parameter1.getAllowReserved());
      assertNull(parameter1.get$ref());
      assertFalse(parameter1.getAllowEmptyValue());
      assertNull(parameter1.getName());
      assertNull(parameter1.getExplode());
      assertNull(parameter1.getDeprecated());
      assertNull(parameter1.getIn());
      assertNull(parameter1.getExample());
      assertNull(parameter1.getRequired());
      assertNull(parameter1.getStyle());
      assertNull(parameter1.getDescription());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getFormat());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getDescription());
      assertNull(schema0.getType());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getPattern());
      assertNull(schema0.getNullable());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getMinItems());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.get$ref());
      assertNull(schema0.getName());
      assertNull(schema0.getTitle());
      assertNull(schema0.getMaxLength());
      assertNull(parameter2.getName());
      assertNull(parameter2.getExplode());
      assertNull(parameter2.getDescription());
      assertNull(parameter2.getStyle());
      assertNull(parameter2.getDeprecated());
      assertNull(parameter2.getIn());
      assertNull(parameter2.getExample());
      assertNull(parameter2.get$ref());
      assertNull(parameter2.getAllowReserved());
      assertNull(parameter2.getRequired());
      assertFalse(parameter2.getAllowEmptyValue());
      assertFalse(parameter0.getAllowEmptyValue());
      assertNull(parameter0.getAllowReserved());
      assertNull(parameter0.get$ref());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getExplode());
      assertNull(parameter0.getIn());
      assertNull(parameter0.getExample());
      assertNull(parameter0.getName());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getRequired());
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      
      Optional<List<io.swagger.oas.models.parameters.Parameter>> optional1 = OperationParser.getParametersList(parameterArray0, components5);
      assertNotNull(optional1);
      assertEquals(0, parameterArray0.length);
      assertSame(components0, components1);
      assertSame(components0, components4);
      assertSame(components0, components5);
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertSame(components1, components0);
      assertSame(components1, components5);
      assertSame(components1, components4);
      assertSame(components1, components2);
      assertSame(components1, components3);
      assertSame(components2, components5);
      assertSame(components2, components3);
      assertSame(components2, components1);
      assertSame(components2, components4);
      assertSame(components2, components0);
      assertSame(components3, components1);
      assertSame(components3, components0);
      assertSame(components3, components4);
      assertSame(components3, components5);
      assertSame(components3, components2);
      assertNotSame(string4, string0);
      assertNotSame(string4, string5);
      assertNotSame(string4, string3);
      assertNotSame(string4, string1);
      assertSame(parameter0, parameter2);
      assertSame(parameter0, parameter1);
      assertNotSame(string5, string1);
      assertNotSame(string5, string0);
      assertNotSame(string5, string3);
      assertNotSame(string5, string4);
      assertSame(parameter1, parameter2);
      assertSame(parameter1, parameter0);
      assertSame(parameter2, parameter0);
      assertSame(parameter2, parameter1);
      assertSame(components5, components0);
      assertSame(components5, components4);
      assertSame(components5, components1);
      assertSame(components5, components3);
      assertSame(components5, components2);
      assertFalse(parameter0.getAllowEmptyValue());
      assertNull(parameter0.getAllowReserved());
      assertNull(parameter0.get$ref());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getExplode());
      assertNull(parameter0.getIn());
      assertNull(parameter0.getExample());
      assertNull(parameter0.getName());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getRequired());
      assertNull(parameter1.getAllowReserved());
      assertNull(parameter1.get$ref());
      assertFalse(parameter1.getAllowEmptyValue());
      assertNull(parameter1.getName());
      assertNull(parameter1.getExplode());
      assertNull(parameter1.getDeprecated());
      assertNull(parameter1.getIn());
      assertNull(parameter1.getExample());
      assertNull(parameter1.getRequired());
      assertNull(parameter1.getStyle());
      assertNull(parameter1.getDescription());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getFormat());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getDescription());
      assertNull(schema0.getType());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getPattern());
      assertNull(schema0.getNullable());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getMinItems());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.get$ref());
      assertNull(schema0.getName());
      assertNull(schema0.getTitle());
      assertNull(schema0.getMaxLength());
      assertNull(parameter2.getName());
      assertNull(parameter2.getExplode());
      assertNull(parameter2.getDescription());
      assertNull(parameter2.getStyle());
      assertNull(parameter2.getDeprecated());
      assertNull(parameter2.getIn());
      assertNull(parameter2.getExample());
      assertNull(parameter2.get$ref());
      assertNull(parameter2.getAllowReserved());
      assertNull(parameter2.getRequired());
      assertFalse(parameter2.getAllowEmptyValue());
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
  }

  @Test(timeout = 11000)
  public void test046()  throws Throwable  {
      License license0 = null;
      Optional<io.swagger.oas.models.info.License> optional0 = OperationParser.getLicense(license0);
      assertNotNull(optional0);
      
      Content[] contentArray0 = new Content[5];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Schema) null).when(content0).schema();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      contentArray0[3] = contentArray0[2];
      contentArray0[4] = contentArray0[3];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      assertNotNull(components0);
      
      // Undeclared exception!
      try { 
        OperationParser.getContent(contentArray0, produces0, produces0, components0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test047()  throws Throwable  {
      LinkParameter[] linkParameterArray0 = null;
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameterArray0);
      assertNotNull(map0);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      OperationParser operationParser0 = new OperationParser();
      assertNotNull(operationParser0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = operationParser0.DEFAULT_DESCRIPTION;
      stringArray0[1] = operationParser0.DEFAULT_DESCRIPTION;
      stringArray0[2] = operationParser0.DEFAULT_DESCRIPTION;
      String string0 = "},;Qi,TsHZ-^w:/Mk";
      stringArray0[3] = string0;
      stringArray0[4] = operationParser0.RESPONSE_DEFAULT;
      stringArray0[5] = operationParser0.COMPONENTS_REF;
      stringArray0[6] = operationParser0.DEFAULT_DESCRIPTION;
      Optional<Set<Tag>> optional0 = OperationParser.getTags(stringArray0);
      assertNotNull(optional0);
      assertEquals(7, stringArray0.length);
      
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional1 = OperationParser.getExternalDocumentation(externalDocumentation0);
      assertNotNull(optional1);
  }

  @Test(timeout = 11000)
  public void test048()  throws Throwable  {
      LinkParameter[] linkParameterArray0 = new LinkParameter[8];
      LinkParameter linkParameter0 = mock(LinkParameter.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(linkParameter0).name();
      linkParameterArray0[0] = linkParameter0;
      linkParameterArray0[1] = linkParameterArray0[0];
      linkParameterArray0[2] = linkParameterArray0[1];
      linkParameterArray0[3] = linkParameterArray0[2];
      linkParameterArray0[4] = linkParameterArray0[3];
      linkParameterArray0[5] = linkParameterArray0[4];
      linkParameterArray0[6] = linkParameterArray0[5];
      linkParameterArray0[7] = linkParameterArray0[6];
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameterArray0);
      assertNotNull(map0);
      assertEquals(8, linkParameterArray0.length);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      io.swagger.oas.annotations.links.Link link0 = null;
      Optional<Link> optional0 = OperationParser.getLink(link0);
      assertNotNull(optional0);
      
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(info0).description();
      doReturn((String) null).when(info0).termsOfService();
      doReturn((String) null).when(info0).title();
      doReturn((String) null).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional1 = OperationParser.getInfo(info0);
      assertNotNull(optional1);
      
      String[] stringArray0 = null;
      Optional<Set<Tag>> optional2 = OperationParser.getTags(stringArray0);
      assertNotNull(optional2);
      
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String[]) null).when(schema0).allowableValues();
      doReturn((String) null).when(schema0).defaultValue();
      doReturn(false).when(schema0).deprecated();
      doReturn((String) null).when(schema0).description();
      doReturn((String) null, (String) null).when(schema0).example();
      doReturn(false).when(schema0).exclusiveMaximum();
      doReturn(false).when(schema0).exclusiveMinimum();
      doReturn((ExternalDocumentation) null).when(schema0).externalDocs();
      doReturn((String) null).when(schema0).format();
      doReturn(0).when(schema0).maxLength();
      doReturn(0).when(schema0).minProperties();
      doReturn((String) null).when(schema0).pattern();
      doReturn(false).when(schema0).readOnly();
      doReturn((String) null).when(schema0).ref();
      doReturn((String) null).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional3 = (Optional<io.swagger.oas.models.media.Schema>)OperationParser.getSchemaFromAnnotation(schema0);
      assertNotNull(optional3);
      
      Info info1 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(info1).description();
      doReturn((String) null).when(info1).termsOfService();
      doReturn((String) null).when(info1).title();
      doReturn((String) null).when(info1).version();
      Optional<io.swagger.oas.models.info.Info> optional4 = OperationParser.getInfo(info1);
      assertNotNull(optional4);
      assertSame(optional4, optional1);
      
      Server[] serverArray0 = new Server[9];
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(server0).description();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(server0).url();
      serverArray0[0] = server0;
      serverArray0[1] = serverArray0[0];
      serverArray0[2] = serverArray0[1];
      serverArray0[3] = serverArray0[2];
      serverArray0[4] = serverArray0[3];
      serverArray0[5] = serverArray0[4];
      serverArray0[6] = serverArray0[5];
      serverArray0[7] = serverArray0[6];
      serverArray0[8] = serverArray0[7];
      Optional<List<io.swagger.oas.models.servers.Server>> optional5 = OperationParser.getServers(serverArray0);
      assertNotNull(optional5);
      assertEquals(9, serverArray0.length);
  }

  @Test(timeout = 11000)
  public void test049()  throws Throwable  {
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(server0).description();
      doReturn((String) null, (String) null).when(server0).url();
      Optional<io.swagger.oas.models.servers.Server> optional0 = OperationParser.getServer(server0);
      assertNotNull(optional0);
      
      Server server1 = null;
      Optional<io.swagger.oas.models.servers.Server> optional1 = OperationParser.getServer(server1);
      assertNotNull(optional1);
      assertSame(optional1, optional0);
      
      Server[] serverArray0 = new Server[5];
      serverArray0[0] = server0;
      serverArray0[1] = server1;
      serverArray0[2] = server1;
      serverArray0[3] = server1;
      serverArray0[4] = server1;
      Optional<List<io.swagger.oas.models.servers.Server>> optional2 = OperationParser.getServers(serverArray0);
      assertNotNull(optional2);
      assertEquals(5, serverArray0.length);
      
      Parameter[] parameterArray0 = new Parameter[4];
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false).when(parameter0).allowEmptyValue();
      doReturn(false, false, false, false).when(parameter0).allowReserved();
      doReturn((Object) null, (Object) null, (Object) null, (Object) null).when(parameter0).content();
      doReturn(false, false, false, false).when(parameter0).deprecated();
      doReturn((String) null, (String) null, (String) null, (String) null).when(parameter0).description();
      doReturn((Explode) null, (Explode) null, (Explode) null, (Explode) null, (Explode) null).when(parameter0).explode();
      doReturn((String) null, (String) null, (String) null, (String) null).when(parameter0).in();
      doReturn((String) null, (String) null, (String) null, (String) null).when(parameter0).name();
      doReturn(false, false, false, false).when(parameter0).required();
      doReturn((Schema) null, (Schema) null, (Schema) null, (Schema) null, (Schema) null).when(parameter0).schema();
      doReturn((String) null, (String) null, (String) null, (String) null).when(parameter0).style();
      parameterArray0[0] = parameter0;
      parameterArray0[1] = parameterArray0[0];
      parameterArray0[2] = parameterArray0[1];
      parameterArray0[3] = parameterArray0[2];
      Components components0 = new Components();
      assertNotNull(components0);
      
      String string0 = "";
      Link link0 = new Link();
      assertNotNull(link0);
      assertNull(link0.getOperationId());
      assertNull(link0.getOperationRef());
      assertNull(link0.get$ref());
      assertNull(link0.getDescription());
      
      Components components1 = components0.addLinks(string0, link0);
      assertNotNull(components1);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertNull(link0.getOperationId());
      assertNull(link0.getOperationRef());
      assertNull(link0.get$ref());
      assertNull(link0.getDescription());
      
      Map<String, Header> map0 = null;
      Components components2 = components1.headers(map0);
      assertNotNull(components2);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertNull(link0.getOperationId());
      assertNull(link0.getOperationRef());
      assertNull(link0.get$ref());
      assertNull(link0.getDescription());
      
      HashMap<String, Callback> hashMap0 = new HashMap<String, Callback>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Components components3 = components2.callbacks(hashMap0);
      assertNotNull(components3);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertSame(components2, components0);
      assertSame(components2, components3);
      assertSame(components2, components1);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertSame(components3, components2);
      assertNull(link0.getOperationId());
      assertNull(link0.getOperationRef());
      assertNull(link0.get$ref());
      assertNull(link0.getDescription());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      io.swagger.oas.models.media.Schema<io.swagger.oas.models.ExternalDocumentation> schema0 = new io.swagger.oas.models.media.Schema<io.swagger.oas.models.ExternalDocumentation>();
      assertNotNull(schema0);
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getType());
      assertNull(schema0.getDescription());
      assertNull(schema0.getFormat());
      assertNull(schema0.getPattern());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getNullable());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getMinItems());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getName());
      assertNull(schema0.getTitle());
      assertNull(schema0.get$ref());
      assertNull(schema0.getMaxLength());
      
      Map<String, io.swagger.oas.models.media.Schema> map1 = (Map<String, io.swagger.oas.models.media.Schema>)schema0.getProperties();
      assertNull(map1);
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getType());
      assertNull(schema0.getDescription());
      assertNull(schema0.getFormat());
      assertNull(schema0.getPattern());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getNullable());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getMinItems());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getName());
      assertNull(schema0.getTitle());
      assertNull(schema0.get$ref());
      assertNull(schema0.getMaxLength());
      
      Components components4 = components3.schemas(map1);
      assertNotNull(components4);
      assertSame(components0, components4);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components1, components0);
      assertSame(components1, components4);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertSame(components2, components0);
      assertSame(components2, components3);
      assertSame(components2, components4);
      assertSame(components2, components1);
      assertSame(components3, components0);
      assertSame(components3, components4);
      assertSame(components3, components1);
      assertSame(components3, components2);
      assertSame(components4, components1);
      assertSame(components4, components3);
      assertSame(components4, components0);
      assertSame(components4, components2);
      assertNull(link0.getOperationId());
      assertNull(link0.getOperationRef());
      assertNull(link0.get$ref());
      assertNull(link0.getDescription());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getType());
      assertNull(schema0.getDescription());
      assertNull(schema0.getFormat());
      assertNull(schema0.getPattern());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getNullable());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getMinItems());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getName());
      assertNull(schema0.getTitle());
      assertNull(schema0.get$ref());
      assertNull(schema0.getMaxLength());
      
      Optional<List<io.swagger.oas.models.parameters.Parameter>> optional3 = OperationParser.getParametersList(parameterArray0, components4);
      assertNotNull(optional3);
      assertEquals(4, parameterArray0.length);
      assertSame(components0, components4);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components1, components0);
      assertSame(components1, components4);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertSame(components2, components0);
      assertSame(components2, components3);
      assertSame(components2, components4);
      assertSame(components2, components1);
      assertSame(components3, components0);
      assertSame(components3, components4);
      assertSame(components3, components1);
      assertSame(components3, components2);
      assertSame(components4, components1);
      assertSame(components4, components3);
      assertSame(components4, components0);
      assertSame(components4, components2);
      assertNull(link0.getOperationId());
      assertNull(link0.getOperationRef());
      assertNull(link0.get$ref());
      assertNull(link0.getDescription());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getType());
      assertNull(schema0.getDescription());
      assertNull(schema0.getFormat());
      assertNull(schema0.getPattern());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getNullable());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getMinItems());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getName());
      assertNull(schema0.getTitle());
      assertNull(schema0.get$ref());
      assertNull(schema0.getMaxLength());
  }

  @Test(timeout = 11000)
  public void test050()  throws Throwable  {
      MediaType mediaType0 = null;
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exampleObject0).name();
      Optional<MediaType> optional0 = OperationParser.getMediaType(mediaType0, exampleObject0);
      assertNotNull(optional0);
      
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(license0).name();
      doReturn((String) null).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional1 = OperationParser.getLicense(license0);
      assertNotNull(optional1);
      
      Server[] serverArray0 = new Server[0];
      Optional<List<io.swagger.oas.models.servers.Server>> optional2 = OperationParser.getServers(serverArray0);
      assertNotNull(optional2);
      assertEquals(0, serverArray0.length);
      
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional3 = OperationParser.getExternalDocumentation(externalDocumentation0);
      assertNotNull(optional3);
      
      ExternalDocumentation externalDocumentation1 = null;
      Optional<io.swagger.oas.models.ExternalDocumentation> optional4 = OperationParser.getExternalDocumentation(externalDocumentation1);
      assertNotNull(optional4);
      assertSame(optional4, optional3);
      
      ApiResponse[] apiResponseArray0 = new ApiResponse[3];
      ApiResponse apiResponse0 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null).when(apiResponse0).content();
      doReturn((String) null, (String) null, (String) null).when(apiResponse0).description();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      assertNotNull(components0);
      
      String string0 = "/?c[zQNB8YP=}*FW\\y";
      io.swagger.oas.models.parameters.Parameter parameter0 = new io.swagger.oas.models.parameters.Parameter();
      assertNotNull(parameter0);
      assertNull(parameter0.getRequired());
      assertNull(parameter0.getAllowReserved());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getExplode());
      assertNull(parameter0.getExample());
      assertNull(parameter0.getIn());
      assertNull(parameter0.get$ref());
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.getName());
      assertNull(parameter0.getStyle());
      
      Components components1 = components0.addParameters(string0, parameter0);
      assertNotNull(components1);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertNull(parameter0.getRequired());
      assertNull(parameter0.getAllowReserved());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getExplode());
      assertNull(parameter0.getExample());
      assertNull(parameter0.getIn());
      assertNull(parameter0.get$ref());
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.getName());
      assertNull(parameter0.getStyle());
      
      Callback callback0 = new Callback();
      assertNotNull(callback0);
      assertTrue(callback0.isEmpty());
      assertEquals(0, callback0.size());
      
      Components components2 = components1.addCallbacks(string0, callback0);
      assertNotNull(components2);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertNull(parameter0.getRequired());
      assertNull(parameter0.getAllowReserved());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getExplode());
      assertNull(parameter0.getExample());
      assertNull(parameter0.getIn());
      assertNull(parameter0.get$ref());
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.getName());
      assertNull(parameter0.getStyle());
      assertTrue(callback0.isEmpty());
      assertEquals(0, callback0.size());
      
      io.swagger.oas.models.media.Schema<io.swagger.oas.models.ExternalDocumentation> schema0 = new io.swagger.oas.models.media.Schema<io.swagger.oas.models.ExternalDocumentation>();
      assertNotNull(schema0);
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getType());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getTitle());
      assertNull(schema0.getPattern());
      assertNull(schema0.getDescription());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getFormat());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getNullable());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getMinItems());
      assertNull(schema0.getName());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.get$ref());
      
      Map<String, io.swagger.oas.models.media.Schema> map0 = (Map<String, io.swagger.oas.models.media.Schema>)schema0.getProperties();
      assertNull(map0);
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getType());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getTitle());
      assertNull(schema0.getPattern());
      assertNull(schema0.getDescription());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getFormat());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getNullable());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getMinItems());
      assertNull(schema0.getName());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.get$ref());
      
      Components components3 = components2.schemas(map0);
      assertNotNull(components3);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertSame(components2, components0);
      assertSame(components2, components3);
      assertSame(components2, components1);
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertSame(components3, components1);
      assertNull(parameter0.getRequired());
      assertNull(parameter0.getAllowReserved());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getExplode());
      assertNull(parameter0.getExample());
      assertNull(parameter0.getIn());
      assertNull(parameter0.get$ref());
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.getName());
      assertNull(parameter0.getStyle());
      assertTrue(callback0.isEmpty());
      assertEquals(0, callback0.size());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getType());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getTitle());
      assertNull(schema0.getPattern());
      assertNull(schema0.getDescription());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getFormat());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getNullable());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getMinItems());
      assertNull(schema0.getName());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.get$ref());
      
      String string1 = " Y{^B}X";
      SecurityScheme securityScheme0 = new SecurityScheme();
      assertNotNull(securityScheme0);
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.getName());
      
      SecurityScheme securityScheme1 = securityScheme0.bearerFormat(string1);
      assertNotNull(securityScheme1);
      assertNotSame(string1, string0);
      assertSame(securityScheme0, securityScheme1);
      assertSame(securityScheme1, securityScheme0);
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertEquals(" Y{^B}X", securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme1.getIn());
      assertNull(securityScheme1.getName());
      assertEquals(" Y{^B}X", securityScheme1.getBearerFormat());
      assertNull(securityScheme1.getType());
      assertNull(securityScheme1.getScheme());
      assertNull(securityScheme1.get$ref());
      assertNull(securityScheme1.getDescription());
      assertNull(securityScheme1.getOpenIdConnectUrl());
      assertFalse(string1.equals((Object)string0));
      
      String string2 = null;
      SecurityScheme securityScheme2 = securityScheme1.$ref(string2);
      assertNotNull(securityScheme2);
      assertNotSame(string1, string0);
      assertSame(securityScheme0, securityScheme1);
      assertSame(securityScheme0, securityScheme2);
      assertSame(securityScheme1, securityScheme0);
      assertSame(securityScheme1, securityScheme2);
      assertSame(securityScheme2, securityScheme0);
      assertSame(securityScheme2, securityScheme1);
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertEquals(" Y{^B}X", securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme1.getIn());
      assertNull(securityScheme1.getName());
      assertEquals(" Y{^B}X", securityScheme1.getBearerFormat());
      assertNull(securityScheme1.getType());
      assertNull(securityScheme1.getScheme());
      assertNull(securityScheme1.get$ref());
      assertNull(securityScheme1.getDescription());
      assertNull(securityScheme1.getOpenIdConnectUrl());
      assertNull(securityScheme2.getOpenIdConnectUrl());
      assertEquals(" Y{^B}X", securityScheme2.getBearerFormat());
      assertNull(securityScheme2.get$ref());
      assertNull(securityScheme2.getDescription());
      assertNull(securityScheme2.getScheme());
      assertNull(securityScheme2.getName());
      assertNull(securityScheme2.getType());
      assertNull(securityScheme2.getIn());
      assertFalse(string1.equals((Object)string0));
      
      Components components4 = components3.addSecuritySchemes(string1, securityScheme2);
      assertNotNull(components4);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components0, components4);
      assertSame(components0, components1);
      assertNotSame(string0, string1);
      assertSame(components1, components4);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertSame(components2, components4);
      assertSame(components2, components0);
      assertSame(components2, components3);
      assertSame(components2, components1);
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertSame(components3, components4);
      assertSame(components3, components1);
      assertNotSame(string1, string0);
      assertSame(securityScheme0, securityScheme1);
      assertSame(securityScheme0, securityScheme2);
      assertSame(securityScheme1, securityScheme0);
      assertSame(securityScheme1, securityScheme2);
      assertSame(securityScheme2, securityScheme0);
      assertSame(securityScheme2, securityScheme1);
      assertSame(components4, components0);
      assertSame(components4, components2);
      assertSame(components4, components1);
      assertSame(components4, components3);
      assertNull(parameter0.getRequired());
      assertNull(parameter0.getAllowReserved());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getExplode());
      assertNull(parameter0.getExample());
      assertNull(parameter0.getIn());
      assertNull(parameter0.get$ref());
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.getName());
      assertNull(parameter0.getStyle());
      assertTrue(callback0.isEmpty());
      assertEquals(0, callback0.size());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getType());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getTitle());
      assertNull(schema0.getPattern());
      assertNull(schema0.getDescription());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getFormat());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getNullable());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getMinItems());
      assertNull(schema0.getName());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.get$ref());
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertEquals(" Y{^B}X", securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme1.getIn());
      assertNull(securityScheme1.getName());
      assertEquals(" Y{^B}X", securityScheme1.getBearerFormat());
      assertNull(securityScheme1.getType());
      assertNull(securityScheme1.getScheme());
      assertNull(securityScheme1.get$ref());
      assertNull(securityScheme1.getDescription());
      assertNull(securityScheme1.getOpenIdConnectUrl());
      assertNull(securityScheme2.getOpenIdConnectUrl());
      assertEquals(" Y{^B}X", securityScheme2.getBearerFormat());
      assertNull(securityScheme2.get$ref());
      assertNull(securityScheme2.getDescription());
      assertNull(securityScheme2.getScheme());
      assertNull(securityScheme2.getName());
      assertNull(securityScheme2.getType());
      assertNull(securityScheme2.getIn());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      Optional<ApiResponses> optional5 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components4);
      assertNotNull(optional5);
      assertEquals(3, apiResponseArray0.length);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components0, components4);
      assertSame(components0, components1);
      assertNotSame(string0, string1);
      assertSame(components1, components4);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertSame(components2, components4);
      assertSame(components2, components0);
      assertSame(components2, components3);
      assertSame(components2, components1);
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertSame(components3, components4);
      assertSame(components3, components1);
      assertNotSame(string1, string0);
      assertSame(securityScheme0, securityScheme1);
      assertSame(securityScheme0, securityScheme2);
      assertSame(securityScheme1, securityScheme0);
      assertSame(securityScheme1, securityScheme2);
      assertSame(securityScheme2, securityScheme0);
      assertSame(securityScheme2, securityScheme1);
      assertSame(components4, components0);
      assertSame(components4, components2);
      assertSame(components4, components1);
      assertSame(components4, components3);
      assertNull(parameter0.getRequired());
      assertNull(parameter0.getAllowReserved());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getExplode());
      assertNull(parameter0.getExample());
      assertNull(parameter0.getIn());
      assertNull(parameter0.get$ref());
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.getName());
      assertNull(parameter0.getStyle());
      assertTrue(callback0.isEmpty());
      assertEquals(0, callback0.size());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getType());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getTitle());
      assertNull(schema0.getPattern());
      assertNull(schema0.getDescription());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getFormat());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getNullable());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getMinItems());
      assertNull(schema0.getName());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.get$ref());
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertEquals(" Y{^B}X", securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme1.getIn());
      assertNull(securityScheme1.getName());
      assertEquals(" Y{^B}X", securityScheme1.getBearerFormat());
      assertNull(securityScheme1.getType());
      assertNull(securityScheme1.getScheme());
      assertNull(securityScheme1.get$ref());
      assertNull(securityScheme1.getDescription());
      assertNull(securityScheme1.getOpenIdConnectUrl());
      assertNull(securityScheme2.getOpenIdConnectUrl());
      assertEquals(" Y{^B}X", securityScheme2.getBearerFormat());
      assertNull(securityScheme2.get$ref());
      assertNull(securityScheme2.getDescription());
      assertNull(securityScheme2.getScheme());
      assertNull(securityScheme2.getName());
      assertNull(securityScheme2.getType());
      assertNull(securityScheme2.getIn());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 11000)
  public void test051()  throws Throwable  {
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(server0).description();
      doReturn((String) null).when(server0).url();
      Optional<io.swagger.oas.models.servers.Server> optional0 = OperationParser.getServer(server0);
      assertNotNull(optional0);
      
      OperationParser operationParser0 = new OperationParser();
      assertNotNull(operationParser0);
      
      ApiResponse[] apiResponseArray0 = null;
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      assertNotNull(components0);
      
      Map<String, Link> map0 = null;
      Components components1 = components0.links(map0);
      assertNotNull(components1);
      assertSame(components0, components1);
      assertSame(components1, components0);
      
      Link link0 = new Link();
      assertNotNull(link0);
      assertNull(link0.getOperationId());
      assertNull(link0.get$ref());
      assertNull(link0.getDescription());
      assertNull(link0.getOperationRef());
      
      Components components2 = components1.addLinks(operationParser0.COMPONENTS_REF, link0);
      assertNotNull(components2);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertNull(link0.getOperationId());
      assertNull(link0.get$ref());
      assertNull(link0.getDescription());
      assertNull(link0.getOperationRef());
      
      Map<String, io.swagger.oas.models.media.Schema> map1 = (Map<String, io.swagger.oas.models.media.Schema>)components2.getSchemas();
      assertNull(map1);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertNull(link0.getOperationId());
      assertNull(link0.get$ref());
      assertNull(link0.getDescription());
      assertNull(link0.getOperationRef());
      
      Components components3 = components2.schemas(map1);
      assertNotNull(components3);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertSame(components1, components2);
      assertSame(components1, components3);
      assertSame(components1, components0);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertSame(components3, components1);
      assertNull(link0.getOperationId());
      assertNull(link0.get$ref());
      assertNull(link0.getDescription());
      assertNull(link0.getOperationRef());
      
      Map<String, io.swagger.oas.models.parameters.Parameter> map2 = null;
      Components components4 = components3.parameters(map2);
      assertNotNull(components4);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertSame(components0, components4);
      assertSame(components1, components2);
      assertSame(components1, components4);
      assertSame(components1, components3);
      assertSame(components1, components0);
      assertSame(components2, components0);
      assertSame(components2, components4);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertSame(components3, components1);
      assertSame(components3, components4);
      assertSame(components4, components2);
      assertSame(components4, components0);
      assertSame(components4, components1);
      assertSame(components4, components3);
      assertNull(link0.getOperationId());
      assertNull(link0.get$ref());
      assertNull(link0.getDescription());
      assertNull(link0.getOperationRef());
      
      Optional<ApiResponses> optional1 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components4);
      assertNotNull(optional1);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertSame(components0, components4);
      assertSame(components1, components2);
      assertSame(components1, components4);
      assertSame(components1, components3);
      assertSame(components1, components0);
      assertSame(components2, components0);
      assertSame(components2, components4);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertSame(components3, components1);
      assertSame(components3, components4);
      assertSame(components4, components2);
      assertSame(components4, components0);
      assertSame(components4, components1);
      assertSame(components4, components3);
      assertNull(link0.getOperationId());
      assertNull(link0.get$ref());
      assertNull(link0.getDescription());
      assertNull(link0.getOperationRef());
  }

  @Test(timeout = 11000)
  public void test052()  throws Throwable  {
      Parameter[] parameterArray0 = new Parameter[4];
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false).when(parameter0).allowEmptyValue();
      doReturn(false, false, false, false).when(parameter0).allowReserved();
      doReturn((Object) null, (Object) null, (Object) null, (Object) null).when(parameter0).content();
      doReturn(false, false, false, false).when(parameter0).deprecated();
      doReturn((String) null, (String) null, (String) null, (String) null).when(parameter0).description();
      doReturn((Explode) null, (Explode) null, (Explode) null, (Explode) null, (Explode) null).when(parameter0).explode();
      doReturn((String) null, (String) null, (String) null, (String) null).when(parameter0).in();
      doReturn((String) null, (String) null, (String) null, (String) null).when(parameter0).name();
      doReturn(false, false, false, false).when(parameter0).required();
      doReturn((Schema) null, (Schema) null, (Schema) null, (Schema) null, (Schema) null).when(parameter0).schema();
      doReturn((String) null, (String) null, (String) null, (String) null).when(parameter0).style();
      parameterArray0[0] = parameter0;
      parameterArray0[1] = parameterArray0[0];
      parameterArray0[2] = parameterArray0[1];
      parameterArray0[3] = parameterArray0[2];
      Components components0 = new Components();
      assertNotNull(components0);
      
      Map<String, io.swagger.oas.models.responses.ApiResponse> map0 = null;
      Components components1 = components0.responses(map0);
      assertNotNull(components1);
      assertSame(components0, components1);
      assertSame(components1, components0);
      
      Map<String, RequestBody> map1 = components1.getRequestBodies();
      assertNull(map1);
      assertSame(components0, components1);
      assertSame(components1, components0);
      
      Components components2 = components1.requestBodies(map1);
      assertNotNull(components2);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components2, components0);
      assertSame(components2, components1);
      
      String string0 = "";
      SecurityScheme securityScheme0 = null;
      Components components3 = components2.addSecuritySchemes(string0, securityScheme0);
      assertNotNull(components3);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertSame(components2, components0);
      assertSame(components2, components3);
      assertSame(components2, components1);
      assertSame(components3, components2);
      assertSame(components3, components1);
      assertSame(components3, components0);
      
      Optional<List<io.swagger.oas.models.parameters.Parameter>> optional0 = OperationParser.getParametersList(parameterArray0, components3);
      assertNotNull(optional0);
      assertEquals(4, parameterArray0.length);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertSame(components2, components0);
      assertSame(components2, components3);
      assertSame(components2, components1);
      assertSame(components3, components2);
      assertSame(components3, components1);
      assertSame(components3, components0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      stringArray0[2] = string0;
      stringArray0[3] = string0;
      stringArray0[4] = string0;
      stringArray0[5] = string0;
      stringArray0[6] = string0;
      stringArray0[7] = string0;
      Optional<Set<Tag>> optional1 = OperationParser.getTags(stringArray0);
      assertNotNull(optional1);
      assertEquals(8, stringArray0.length);
  }

  @Test(timeout = 11000)
  public void test053()  throws Throwable  {
      LinkParameter[] linkParameterArray0 = new LinkParameter[2];
      LinkParameter linkParameter0 = mock(LinkParameter.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(linkParameter0).name();
      linkParameterArray0[0] = linkParameter0;
      linkParameterArray0[1] = linkParameterArray0[0];
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameterArray0);
      assertNotNull(map0);
      assertEquals(2, linkParameterArray0.length);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      ApiResponse[] apiResponseArray0 = new ApiResponse[3];
      ApiResponse apiResponse0 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null).when(apiResponse0).content();
      doReturn((String) null, (String) null, (String) null).when(apiResponse0).description();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Produces produces1 = null;
      Components components0 = new Components();
      assertNotNull(components0);
      
      HashMap<String, SecurityScheme> hashMap0 = new HashMap<String, SecurityScheme>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Components components1 = components0.securitySchemes(hashMap0);
      assertNotNull(components1);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Map<String, RequestBody> map1 = components1.getRequestBodies();
      assertNull(map1);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Components components2 = components0.requestBodies(map1);
      assertNotNull(components2);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      String string0 = "";
      io.swagger.oas.models.responses.ApiResponse apiResponse1 = new io.swagger.oas.models.responses.ApiResponse();
      assertNotNull(apiResponse1);
      assertNull(apiResponse1.getDescription());
      assertNull(apiResponse1.get$ref());
      
      Components components3 = components2.addResponses(string0, apiResponse1);
      assertNotNull(components3);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(components3, components1);
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components1, components3);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertNull(apiResponse1.getDescription());
      assertNull(apiResponse1.get$ref());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      HashMap<String, Callback> hashMap1 = new HashMap<String, Callback>();
      assertNotNull(hashMap1);
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      
      Components components4 = components3.callbacks(hashMap1);
      assertNotNull(components4);
      assertSame(components2, components4);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(components3, components1);
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertSame(components3, components4);
      assertSame(components4, components1);
      assertSame(components4, components0);
      assertSame(components4, components2);
      assertSame(components4, components3);
      assertSame(components0, components3);
      assertSame(components0, components4);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components1, components4);
      assertSame(components1, components3);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertNull(apiResponse1.getDescription());
      assertNull(apiResponse1.get$ref());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      HashMap<String, Example> hashMap2 = new HashMap<String, Example>();
      assertNotNull(hashMap2);
      assertTrue(hashMap2.isEmpty());
      assertEquals(0, hashMap2.size());
      
      Components components5 = components4.examples(hashMap2);
      assertNotNull(components5);
      assertSame(components2, components5);
      assertSame(components2, components4);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(components3, components5);
      assertSame(components3, components1);
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertSame(components3, components4);
      assertSame(components4, components5);
      assertSame(components4, components1);
      assertSame(components4, components0);
      assertSame(components4, components2);
      assertSame(components4, components3);
      assertSame(components5, components0);
      assertSame(components5, components1);
      assertSame(components5, components2);
      assertSame(components5, components4);
      assertSame(components5, components3);
      assertSame(components0, components3);
      assertSame(components0, components5);
      assertSame(components0, components4);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components1, components4);
      assertSame(components1, components5);
      assertSame(components1, components3);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertNull(apiResponse1.getDescription());
      assertNull(apiResponse1.get$ref());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap2.isEmpty());
      assertEquals(0, hashMap2.size());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Optional<ApiResponses> optional0 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces1, components5);
      assertNotNull(optional0);
      assertEquals(3, apiResponseArray0.length);
      assertSame(components0, components3);
      assertSame(components0, components5);
      assertSame(components0, components4);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components1, components4);
      assertSame(components1, components5);
      assertSame(components1, components3);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components2, components5);
      assertSame(components2, components4);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(components3, components5);
      assertSame(components3, components1);
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertSame(components3, components4);
      assertSame(components4, components5);
      assertSame(components4, components1);
      assertSame(components4, components0);
      assertSame(components4, components2);
      assertSame(components4, components3);
      assertSame(components5, components0);
      assertSame(components5, components1);
      assertSame(components5, components2);
      assertSame(components5, components4);
      assertSame(components5, components3);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(apiResponse1.getDescription());
      assertNull(apiResponse1.get$ref());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap2.isEmpty());
      assertEquals(0, hashMap2.size());
  }

  @Test(timeout = 11000)
  public void test054()  throws Throwable  {
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(parameter0).allowEmptyValue();
      doReturn(false).when(parameter0).allowReserved();
      doReturn((Content[]) null).when(parameter0).content();
      doReturn(false).when(parameter0).deprecated();
      doReturn((String) null).when(parameter0).description();
      doReturn((Explode) null, (Explode) null, (Explode) null).when(parameter0).explode();
      doReturn((String) null).when(parameter0).in();
      doReturn((String) null).when(parameter0).name();
      doReturn(false).when(parameter0).required();
      doReturn((Schema) null, (Schema) null).when(parameter0).schema();
      doReturn((String) null).when(parameter0).style();
      Components components0 = null;
      Optional<io.swagger.oas.models.parameters.Parameter> optional0 = OperationParser.getParameter(parameter0, components0);
      assertNotNull(optional0);
      
      io.swagger.oas.annotations.links.Link[] linkArray0 = null;
      Map<String, Link> map0 = OperationParser.getLinks(linkArray0);
      assertNotNull(map0);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      String[] stringArray0 = new String[5];
      String string0 = "6Dfa*z40l JUR]Yb";
      stringArray0[0] = string0;
      String string1 = "io.swagger.jaxrs2.OperationParser";
      stringArray0[1] = string1;
      String string2 = "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers$AtomicIntegerSerializer";
      stringArray0[2] = string2;
      String string3 = "5W:uG]7t";
      stringArray0[3] = string3;
      String string4 = "";
      stringArray0[4] = string4;
      Optional<Set<Tag>> optional1 = OperationParser.getTags(stringArray0);
      assertNotNull(optional1);
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 11000)
  public void test055()  throws Throwable  {
      ApiResponse[] apiResponseArray0 = new ApiResponse[6];
      ApiResponse apiResponse0 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(apiResponse0).content();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(apiResponse0).description();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      apiResponseArray0[3] = apiResponseArray0[2];
      apiResponseArray0[4] = apiResponseArray0[3];
      apiResponseArray0[5] = apiResponseArray0[4];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = null;
      Optional<ApiResponses> optional0 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components0);
      assertNotNull(optional0);
      assertEquals(6, apiResponseArray0.length);
      
      Info info0 = null;
      Optional<io.swagger.oas.models.info.Info> optional1 = OperationParser.getInfo(info0);
      assertNotNull(optional1);
      
      io.swagger.oas.annotations.links.Link link0 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(link0).description();
      doReturn((String) null).when(link0).operationId();
      doReturn((String) null).when(link0).operationRef();
      Optional<Link> optional2 = OperationParser.getLink(link0);
      assertNotNull(optional2);
  }

  @Test(timeout = 11000)
  public void test056()  throws Throwable  {
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String[]) null).when(schema0).allowableValues();
      doReturn((String) null).when(schema0).defaultValue();
      doReturn(false).when(schema0).deprecated();
      doReturn((String) null).when(schema0).description();
      doReturn((String) null, (String) null).when(schema0).example();
      doReturn(false).when(schema0).exclusiveMaximum();
      doReturn(false).when(schema0).exclusiveMinimum();
      doReturn((ExternalDocumentation) null).when(schema0).externalDocs();
      doReturn((String) null).when(schema0).format();
      doReturn(0).when(schema0).maxLength();
      doReturn(0).when(schema0).minProperties();
      doReturn((String) null).when(schema0).pattern();
      doReturn(false).when(schema0).readOnly();
      doReturn((String) null).when(schema0).ref();
      doReturn((String) null).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional0 = (Optional<io.swagger.oas.models.media.Schema>)OperationParser.getSchemaFromAnnotation(schema0);
      assertNotNull(optional0);
      
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String[]) null).when(schema1).allowableValues();
      doReturn((String) null).when(schema1).defaultValue();
      doReturn(false).when(schema1).deprecated();
      doReturn((String) null).when(schema1).description();
      doReturn((String) null, (String) null).when(schema1).example();
      doReturn(false).when(schema1).exclusiveMaximum();
      doReturn(false).when(schema1).exclusiveMinimum();
      doReturn((ExternalDocumentation) null).when(schema1).externalDocs();
      doReturn((String) null).when(schema1).format();
      doReturn(0).when(schema1).maxLength();
      doReturn(0).when(schema1).minProperties();
      doReturn((String) null).when(schema1).pattern();
      doReturn(false).when(schema1).readOnly();
      doReturn((String) null).when(schema1).ref();
      doReturn((String) null).when(schema1).type();
      Optional<io.swagger.oas.models.media.Schema> optional1 = (Optional<io.swagger.oas.models.media.Schema>)OperationParser.getSchemaFromAnnotation(schema1);
      assertNotNull(optional1);
      assertSame(optional1, optional0);
      
      Server[] serverArray0 = null;
      Optional<List<io.swagger.oas.models.servers.Server>> optional2 = OperationParser.getServers(serverArray0);
      assertNotNull(optional2);
      
      Schema schema2 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((String[]) null).when(schema2).allowableValues();
      doReturn((String) null).when(schema2).defaultValue();
      doReturn(false).when(schema2).deprecated();
      doReturn((String) null).when(schema2).description();
      doReturn((String) null, (String) null).when(schema2).example();
      doReturn(false).when(schema2).exclusiveMaximum();
      doReturn(false).when(schema2).exclusiveMinimum();
      doReturn((ExternalDocumentation) null).when(schema2).externalDocs();
      doReturn((String) null).when(schema2).format();
      doReturn(0).when(schema2).maxLength();
      doReturn(0).when(schema2).minProperties();
      doReturn((String) null).when(schema2).pattern();
      doReturn(false).when(schema2).readOnly();
      doReturn((String) null).when(schema2).ref();
      doReturn((String) null).when(schema2).type();
      Optional<io.swagger.oas.models.media.Schema> optional3 = (Optional<io.swagger.oas.models.media.Schema>)OperationParser.getSchemaFromAnnotation(schema2);
      assertNotNull(optional3);
      assertSame(optional3, optional0);
      assertSame(optional3, optional1);
      
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(license0).name();
      doReturn((String) null).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional4 = OperationParser.getLicense(license0);
      assertNotNull(optional4);
      
      io.swagger.oas.annotations.parameters.RequestBody requestBody0 = mock(io.swagger.oas.annotations.parameters.RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(requestBody0).description();
      doReturn(false).when(requestBody0).required();
      Components components0 = new Components();
      assertNotNull(components0);
      
      HashMap<String, io.swagger.oas.models.parameters.Parameter> hashMap0 = new HashMap<String, io.swagger.oas.models.parameters.Parameter>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Components components1 = components0.parameters(hashMap0);
      assertNotNull(components1);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Encoding encoding0 = new Encoding();
      assertNotNull(encoding0);
      assertNull(encoding0.getAllowReserved());
      assertNull(encoding0.getExplode());
      assertNull(encoding0.getStyle());
      assertNull(encoding0.getContentType());
      
      String string0 = "czeHQ])Shh'RG|";
      Encoding encoding1 = encoding0.style(string0);
      assertNotNull(encoding1);
      assertSame(encoding1, encoding0);
      assertSame(encoding0, encoding1);
      assertNull(encoding1.getContentType());
      assertNull(encoding1.getExplode());
      assertNull(encoding1.getAllowReserved());
      assertEquals("czeHQ])Shh'RG|", encoding1.getStyle());
      assertNull(encoding0.getAllowReserved());
      assertEquals("czeHQ])Shh'RG|", encoding0.getStyle());
      assertNull(encoding0.getExplode());
      assertNull(encoding0.getContentType());
      
      Map<String, Header> map0 = encoding1.getHeaders();
      assertNull(map0);
      assertSame(encoding1, encoding0);
      assertSame(encoding0, encoding1);
      assertNull(encoding1.getContentType());
      assertNull(encoding1.getExplode());
      assertNull(encoding1.getAllowReserved());
      assertEquals("czeHQ])Shh'RG|", encoding1.getStyle());
      assertNull(encoding0.getAllowReserved());
      assertEquals("czeHQ])Shh'RG|", encoding0.getStyle());
      assertNull(encoding0.getExplode());
      assertNull(encoding0.getContentType());
      
      Components components2 = components1.headers(map0);
      assertNotNull(components2);
      assertSame(encoding1, encoding0);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(encoding0, encoding1);
      assertNull(encoding1.getContentType());
      assertNull(encoding1.getExplode());
      assertNull(encoding1.getAllowReserved());
      assertEquals("czeHQ])Shh'RG|", encoding1.getStyle());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(encoding0.getAllowReserved());
      assertEquals("czeHQ])Shh'RG|", encoding0.getStyle());
      assertNull(encoding0.getExplode());
      assertNull(encoding0.getContentType());
      
      String string1 = components2.toString();
      assertNotNull(string1);
      assertSame(encoding1, encoding0);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertNotSame(string1, string0);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(encoding0, encoding1);
      assertNotSame(string0, string1);
      assertNull(encoding1.getContentType());
      assertNull(encoding1.getExplode());
      assertNull(encoding1.getAllowReserved());
      assertEquals("czeHQ])Shh'RG|", encoding1.getStyle());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(encoding0.getAllowReserved());
      assertEquals("czeHQ])Shh'RG|", encoding0.getStyle());
      assertNull(encoding0.getExplode());
      assertNull(encoding0.getContentType());
      assertFalse(string1.equals((Object)string0));
      
      Optional<RequestBody> optional5 = OperationParser.getRequestBody(requestBody0, components2);
      assertNotNull(optional5);
      assertSame(encoding1, encoding0);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(encoding0, encoding1);
      assertNotSame(string0, string1);
      assertNull(encoding1.getContentType());
      assertNull(encoding1.getExplode());
      assertNull(encoding1.getAllowReserved());
      assertEquals("czeHQ])Shh'RG|", encoding1.getStyle());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(encoding0.getAllowReserved());
      assertEquals("czeHQ])Shh'RG|", encoding0.getStyle());
      assertNull(encoding0.getExplode());
      assertNull(encoding0.getContentType());
      assertFalse(string0.equals((Object)string1));
      
      LinkParameter[] linkParameterArray0 = new LinkParameter[2];
      LinkParameter linkParameter0 = mock(LinkParameter.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(linkParameter0).name();
      linkParameterArray0[0] = linkParameter0;
      linkParameterArray0[1] = linkParameterArray0[0];
      Map<String, String> map1 = OperationParser.getLinkParameters(linkParameterArray0);
      assertNotNull(map1);
      assertEquals(2, linkParameterArray0.length);
      assertEquals(0, map1.size());
      assertTrue(map1.isEmpty());
  }

  @Test(timeout = 11000)
  public void test057()  throws Throwable  {
      String string0 = "#6m@?HS;vd%}g";
      String string1 = "Set";
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(server0).description();
      doReturn(string1, (String) null).when(server0).url();
      doReturn((ServerVariable[]) null).when(server0).variables();
      // Undeclared exception!
      try { 
        OperationParser.getServer(server0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test058()  throws Throwable  {
      LinkParameter[] linkParameterArray0 = null;
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameterArray0);
      assertNotNull(map0);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      OperationParser operationParser0 = new OperationParser();
      assertNotNull(operationParser0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = operationParser0.DEFAULT_DESCRIPTION;
      stringArray0[1] = operationParser0.DEFAULT_DESCRIPTION;
      stringArray0[2] = operationParser0.DEFAULT_DESCRIPTION;
      String string0 = "},;Qi,TsHZ-^w:/Mk";
      stringArray0[3] = string0;
      stringArray0[4] = operationParser0.RESPONSE_DEFAULT;
      stringArray0[5] = operationParser0.COMPONENTS_REF;
      stringArray0[6] = operationParser0.DEFAULT_DESCRIPTION;
      Optional<Set<Tag>> optional0 = OperationParser.getTags(stringArray0);
      assertNotNull(optional0);
      assertEquals(7, stringArray0.length);
      
      String string1 = "";
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(operationParser0.COMPONENTS_REF, (String) null).when(externalDocumentation0).description();
      doReturn(string1).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional1 = OperationParser.getExternalDocumentation(externalDocumentation0);
      assertNotNull(optional1);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 11000)
  public void test059()  throws Throwable  {
      Server[] serverArray0 = new Server[8];
      String string0 = "java.lang";
      String string1 = "";
      String string2 = "4MUWAZP";
      String string3 = "eQ,z<3&j#HqjCf";
      String string4 = "OA[.\\rOy0/(O\\g1l.";
      String string5 = "class Header {\n";
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string1).when(server0).description();
      doReturn(string4, string0).when(server0).url();
      doReturn((ServerVariable[]) null).when(server0).variables();
      serverArray0[0] = server0;
      serverArray0[1] = serverArray0[0];
      serverArray0[2] = serverArray0[1];
      serverArray0[3] = serverArray0[2];
      serverArray0[4] = serverArray0[3];
      serverArray0[5] = serverArray0[4];
      serverArray0[6] = serverArray0[5];
      serverArray0[7] = serverArray0[6];
      // Undeclared exception!
      try { 
        OperationParser.getServers(serverArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test060()  throws Throwable  {
      OperationParser operationParser0 = new OperationParser();
      assertNotNull(operationParser0);
      
      boolean boolean0 = true;
      Content[] contentArray0 = new Content[7];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      contentArray0[3] = contentArray0[2];
      contentArray0[4] = contentArray0[3];
      contentArray0[5] = contentArray0[4];
      contentArray0[6] = contentArray0[5];
      boolean boolean1 = true;
      Explode explode0 = Explode.DEFAULT;
      Explode explode1 = Explode.DEFAULT;
      String string0 = "!yWKG3S.=wRk";
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      String string1 = "default";
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0, false).when(parameter0).allowEmptyValue();
      doReturn(boolean0, false).when(parameter0).allowReserved();
      doReturn(boolean1, false).when(parameter0).deprecated();
      doReturn(operationParser0.DEFAULT_DESCRIPTION, (String) null).when(parameter0).description();
      doReturn(string0, (String) null).when(parameter0).in();
      doReturn(operationParser0.DEFAULT_DESCRIPTION, (String) null).when(parameter0).name();
      doReturn(boolean0, false).when(parameter0).required();
      doReturn(string1, (String) null).when(parameter0).style();
      Components components0 = new Components();
      assertNotNull(components0);
      
      Map<String, RequestBody> map0 = components0.getRequestBodies();
      assertNull(map0);
      
      Components components1 = components0.requestBodies(map0);
      assertNotNull(components1);
      assertSame(components0, components1);
      assertSame(components1, components0);
      
      io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[3];
      String string2 = "no long/Long-argument constructor/factory method to deserialize from Number value (%s)";
      String string3 = "";
      String string4 = "r49rje%3xn#z*gClY%";
      String string5 = "no description";
      io.swagger.oas.annotations.links.Link link0 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      doReturn(operationParser0.RESPONSE_DEFAULT, operationParser0.DEFAULT_DESCRIPTION, string2, (String) null, (String) null).when(link0).description();
      doReturn((String) null, (String) null).when(link0).name();
      doReturn(string2, string2, string3, (String) null).when(link0).operationId();
      doReturn(string3, string4, string5, (String) null).when(link0).operationRef();
      doReturn((Object) null, (Object) null).when(link0).parameters();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      Map<String, Link> map1 = OperationParser.getLinks(linkArray0);
      assertNotNull(map1);
      assertEquals(3, linkArray0.length);
      assertFalse(map1.isEmpty());
      assertEquals(1, map1.size());
      
      Components components2 = components1.links(map1);
      assertNotNull(components2);
      assertEquals(3, linkArray0.length);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertFalse(map1.isEmpty());
      assertEquals(1, map1.size());
      
      Header header0 = new Header();
      assertNotNull(header0);
      assertNull(header0.getExample());
      assertNull(header0.get$ref());
      assertNull(header0.getDeprecated());
      assertNull(header0.getExplode());
      assertNull(header0.getDescription());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getStyle());
      assertNull(header0.getRequired());
      
      boolean boolean2 = false;
      Boolean boolean3 = Boolean.valueOf(boolean2);
      assertNotNull(boolean3);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean0));
      assertFalse(boolean3);
      
      Header header1 = header0.required(boolean3);
      assertNotNull(header1);
      assertSame(header0, header1);
      assertSame(header1, header0);
      assertNull(header0.getExample());
      assertNull(header0.get$ref());
      assertNull(header0.getDeprecated());
      assertFalse(header0.getRequired());
      assertNull(header0.getExplode());
      assertNull(header0.getDescription());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getStyle());
      assertNull(header1.getDescription());
      assertNull(header1.getExplode());
      assertNull(header1.getStyle());
      assertNull(header1.getAllowEmptyValue());
      assertNull(header1.getDeprecated());
      assertNull(header1.get$ref());
      assertFalse(header1.getRequired());
      assertNull(header1.getExample());
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean0));
      
      Components components3 = components2.addHeaders(operationParser0.RESPONSE_DEFAULT, header1);
      assertNotNull(components3);
      assertEquals(3, linkArray0.length);
      assertSame(header0, header1);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(header1, header0);
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertSame(components3, components1);
      assertSame(components1, components2);
      assertSame(components1, components3);
      assertSame(components1, components0);
      assertSame(components2, components3);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertNull(header0.getExample());
      assertNull(header0.get$ref());
      assertNull(header0.getDeprecated());
      assertFalse(header0.getRequired());
      assertNull(header0.getExplode());
      assertNull(header0.getDescription());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getStyle());
      assertNull(header1.getDescription());
      assertNull(header1.getExplode());
      assertNull(header1.getStyle());
      assertNull(header1.getAllowEmptyValue());
      assertNull(header1.getDeprecated());
      assertNull(header1.get$ref());
      assertFalse(header1.getRequired());
      assertNull(header1.getExample());
      assertFalse(map1.isEmpty());
      assertEquals(1, map1.size());
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean0));
      
      Link link1 = new Link();
      assertNotNull(link1);
      assertNull(link1.getDescription());
      assertNull(link1.getOperationId());
      assertNull(link1.get$ref());
      assertNull(link1.getOperationRef());
      
      String string6 = "o:1(sF";
      Link link2 = link1.addHeaderObject(string6, header0);
      assertNotNull(link2);
      assertSame(header0, header1);
      assertSame(link1, link2);
      assertNotSame(string6, string3);
      assertNotSame(string6, string0);
      assertNotSame(string6, string2);
      assertNotSame(string6, string4);
      assertNotSame(string6, string1);
      assertNotSame(string6, string5);
      assertSame(link2, link1);
      assertNull(header0.getExample());
      assertNull(header0.get$ref());
      assertNull(header0.getDeprecated());
      assertFalse(header0.getRequired());
      assertNull(header0.getExplode());
      assertNull(header0.getDescription());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getStyle());
      assertNull(link1.getDescription());
      assertNull(link1.getOperationId());
      assertNull(link1.get$ref());
      assertNull(link1.getOperationRef());
      assertNull(link2.getOperationRef());
      assertNull(link2.get$ref());
      assertNull(link2.getDescription());
      assertNull(link2.getOperationId());
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      
      io.swagger.oas.models.servers.Server server0 = new io.swagger.oas.models.servers.Server();
      assertNotNull(server0);
      assertNull(server0.getUrl());
      assertNull(server0.getDescription());
      
      Link link3 = link2.server(server0);
      assertNotNull(link3);
      assertSame(header0, header1);
      assertSame(link1, link3);
      assertSame(link1, link2);
      assertNotSame(string6, string3);
      assertNotSame(string6, string0);
      assertNotSame(string6, string2);
      assertNotSame(string6, string4);
      assertNotSame(string6, string1);
      assertNotSame(string6, string5);
      assertSame(link2, link3);
      assertSame(link2, link1);
      assertSame(link3, link2);
      assertSame(link3, link1);
      assertNull(header0.getExample());
      assertNull(header0.get$ref());
      assertNull(header0.getDeprecated());
      assertFalse(header0.getRequired());
      assertNull(header0.getExplode());
      assertNull(header0.getDescription());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getStyle());
      assertNull(link1.getDescription());
      assertNull(link1.getOperationId());
      assertNull(link1.get$ref());
      assertNull(link1.getOperationRef());
      assertNull(link2.getOperationRef());
      assertNull(link2.get$ref());
      assertNull(link2.getDescription());
      assertNull(link2.getOperationId());
      assertNull(server0.getUrl());
      assertNull(server0.getDescription());
      assertNull(link3.get$ref());
      assertNull(link3.getDescription());
      assertNull(link3.getOperationRef());
      assertNull(link3.getOperationId());
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      
      Components components4 = components3.addLinks(operationParser0.COMPONENTS_REF, link3);
      assertNotNull(components4);
      assertEquals(3, linkArray0.length);
      assertSame(header0, header1);
      assertSame(header1, header0);
      assertSame(components3, components0);
      assertSame(components3, components4);
      assertSame(components3, components2);
      assertSame(components3, components1);
      assertSame(link1, link3);
      assertSame(link1, link2);
      assertNotSame(string6, string3);
      assertNotSame(string6, string0);
      assertNotSame(string6, string2);
      assertNotSame(string6, string4);
      assertNotSame(string6, string1);
      assertNotSame(string6, string5);
      assertSame(link2, link3);
      assertSame(link2, link1);
      assertSame(link3, link2);
      assertSame(link3, link1);
      assertSame(components4, components0);
      assertSame(components4, components2);
      assertSame(components4, components3);
      assertSame(components4, components1);
      assertSame(components0, components4);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components1, components2);
      assertSame(components1, components3);
      assertSame(components1, components4);
      assertSame(components1, components0);
      assertSame(components2, components3);
      assertSame(components2, components4);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertNull(header0.getExample());
      assertNull(header0.get$ref());
      assertNull(header0.getDeprecated());
      assertFalse(header0.getRequired());
      assertNull(header0.getExplode());
      assertNull(header0.getDescription());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getStyle());
      assertNull(header1.getDescription());
      assertNull(header1.getExplode());
      assertNull(header1.getStyle());
      assertNull(header1.getAllowEmptyValue());
      assertNull(header1.getDeprecated());
      assertNull(header1.get$ref());
      assertFalse(header1.getRequired());
      assertNull(header1.getExample());
      assertNull(link1.getDescription());
      assertNull(link1.getOperationId());
      assertNull(link1.get$ref());
      assertNull(link1.getOperationRef());
      assertNull(link2.getOperationRef());
      assertNull(link2.get$ref());
      assertNull(link2.getDescription());
      assertNull(link2.getOperationId());
      assertNull(server0.getUrl());
      assertNull(server0.getDescription());
      assertNull(link3.get$ref());
      assertNull(link3.getDescription());
      assertNull(link3.getOperationRef());
      assertNull(link3.getOperationId());
      assertFalse(map1.isEmpty());
      assertEquals(2, map1.size());
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      
      // Undeclared exception!
      try { 
        OperationParser.getParameter(parameter0, components4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.util.ParameterProcessor", e);
      }
  }

  @Test(timeout = 11000)
  public void test061()  throws Throwable  {
      String string0 = "H)g(A&Ve'(;";
      String string1 = "";
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string1).when(server0).description();
      doReturn(string1).when(server0).url();
      doReturn((ServerVariable[]) null).when(server0).variables();
      // Undeclared exception!
      try { 
        OperationParser.getServer(server0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test062()  throws Throwable  {
      OperationParser operationParser0 = new OperationParser();
      assertNotNull(operationParser0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = operationParser0.MEDIA_TYPE;
      stringArray0[1] = operationParser0.RESPONSE_DEFAULT;
      String string0 = "";
      stringArray0[2] = string0;
      stringArray0[3] = operationParser0.MEDIA_TYPE;
      String string1 = "f|yIb5ApSR";
      stringArray0[4] = string1;
      stringArray0[5] = operationParser0.MEDIA_TYPE;
      stringArray0[6] = operationParser0.RESPONSE_DEFAULT;
      boolean boolean0 = true;
      String string2 = "QLBebFYq QBS";
      boolean boolean1 = true;
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(externalDocumentation0).description();
      doReturn((String) null).when(externalDocumentation0).url();
      int int0 = 2271;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(stringArray0).when(schema0).allowableValues();
      doReturn(stringArray0[5], (String) null).when(schema0).defaultValue();
      doReturn(boolean0, false).when(schema0).deprecated();
      doReturn(stringArray0[6], (String) null).when(schema0).description();
      doReturn(stringArray0[3], string2, (String) null).when(schema0).example();
      doReturn(boolean0, false).when(schema0).exclusiveMaximum();
      doReturn(boolean1, false).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema0).externalDocs();
      doReturn(operationParser0.COMPONENTS_REF, (String) null).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(0).when(schema0).maxProperties();
      doReturn(int0, 0).when(schema0).minProperties();
      doReturn(operationParser0.RESPONSE_DEFAULT, (String) null).when(schema0).pattern();
      doReturn(boolean1, false).when(schema0).readOnly();
      doReturn(operationParser0.COMPONENTS_REF, (String) null).when(schema0).ref();
      doReturn(stringArray0[3], (String) null).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional0 = (Optional<io.swagger.oas.models.media.Schema>)OperationParser.getSchemaFromAnnotation(schema0);
      assertNotNull(optional0);
      assertEquals(7, stringArray0.length);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      Content[] contentArray0 = new Content[8];
  }

  @Test(timeout = 11000)
  public void test063()  throws Throwable  {
      String string0 = "clPyq";
      String string1 = "W(l&A]$>+n6";
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(license0).name();
      doReturn(string1, (String) null).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional0 = OperationParser.getLicense(license0);
      assertNotNull(optional0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      LinkParameter[] linkParameterArray0 = new LinkParameter[8];
      String string2 = "=B94,";
      String string3 = "8BVW(00XUH~ZG0c$";
      LinkParameter linkParameter0 = mock(LinkParameter.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(linkParameter0).expression();
      doReturn(string2, string0, string2, string0, string3).when(linkParameter0).name();
      linkParameterArray0[0] = linkParameter0;
      linkParameterArray0[1] = linkParameterArray0[0];
      linkParameterArray0[2] = linkParameterArray0[1];
      linkParameterArray0[3] = linkParameterArray0[2];
      linkParameterArray0[4] = linkParameterArray0[3];
      linkParameterArray0[5] = linkParameterArray0[4];
      linkParameterArray0[6] = linkParameterArray0[5];
      linkParameterArray0[7] = linkParameterArray0[6];
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameterArray0);
      assertNotNull(map0);
      assertEquals(8, linkParameterArray0.length);
      assertFalse(map0.isEmpty());
      assertEquals(2, map0.size());
      
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string2, (String) null).when(server0).description();
      doReturn(string2, (String) null).when(server0).url();
      doReturn((ServerVariable[]) null).when(server0).variables();
      // Undeclared exception!
      try { 
        OperationParser.getServer(server0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test064()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Optional<Set<Tag>> optional0 = OperationParser.getTags(stringArray0);
      assertNotNull(optional0);
      assertEquals(0, stringArray0.length);
      
      String string0 = "v";
      boolean boolean0 = false;
      io.swagger.oas.annotations.parameters.RequestBody requestBody0 = mock(io.swagger.oas.annotations.parameters.RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn((Content[]) null).when(requestBody0).content();
      doReturn(string0, (String) null).when(requestBody0).description();
      doReturn(boolean0).when(requestBody0).required();
      Components components0 = new Components();
      assertNotNull(components0);
      
      String string1 = "";
      io.swagger.oas.models.media.Schema<Object> schema0 = new io.swagger.oas.models.media.Schema<Object>();
      assertNotNull(schema0);
      assertNull(schema0.getType());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getTitle());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getFormat());
      assertNull(schema0.getPattern());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getNullable());
      assertNull(schema0.getDescription());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getName());
      assertNull(schema0.getMinItems());
      assertNull(schema0.get$ref());
      
      Components components1 = components0.addSchemas(string1, schema0);
      assertNotNull(components1);
      assertSame(components0, components1);
      assertNotSame(string1, string0);
      assertSame(components1, components0);
      assertNull(schema0.getType());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getTitle());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getFormat());
      assertNull(schema0.getPattern());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getNullable());
      assertNull(schema0.getDescription());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getName());
      assertNull(schema0.getMinItems());
      assertNull(schema0.get$ref());
      assertFalse(string1.equals((Object)string0));
      
      Map<String, Header> map0 = components1.getHeaders();
      assertNull(map0);
      assertSame(components0, components1);
      assertNotSame(string1, string0);
      assertSame(components1, components0);
      assertNull(schema0.getType());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getTitle());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getFormat());
      assertNull(schema0.getPattern());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getNullable());
      assertNull(schema0.getDescription());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getName());
      assertNull(schema0.getMinItems());
      assertNull(schema0.get$ref());
      assertFalse(string1.equals((Object)string0));
      
      Components components2 = components1.headers(map0);
      assertNotNull(components2);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertNotSame(string1, string0);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertNull(schema0.getType());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getTitle());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getFormat());
      assertNull(schema0.getPattern());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getNullable());
      assertNull(schema0.getDescription());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getName());
      assertNull(schema0.getMinItems());
      assertNull(schema0.get$ref());
      assertFalse(string1.equals((Object)string0));
      
      String string2 = "8n_ZZK26";
      io.swagger.oas.models.info.Info info0 = new io.swagger.oas.models.info.Info();
      assertNotNull(info0);
      assertNull(info0.getTitle());
      assertNull(info0.getVersion());
      assertNull(info0.getDescription());
      assertNull(info0.getTermsOfService());
      
      io.swagger.oas.models.info.License license0 = new io.swagger.oas.models.info.License();
      assertNotNull(license0);
      assertNull(license0.getUrl());
      assertNull(license0.getName());
      
      io.swagger.oas.models.info.Info info1 = info0.license(license0);
      assertNotNull(info1);
      assertSame(info0, info1);
      assertSame(info1, info0);
      assertNull(info0.getTitle());
      assertNull(info0.getVersion());
      assertNull(info0.getDescription());
      assertNull(info0.getTermsOfService());
      assertNull(license0.getUrl());
      assertNull(license0.getName());
      assertNull(info1.getTermsOfService());
      assertNull(info1.getDescription());
      assertNull(info1.getVersion());
      assertNull(info1.getTitle());
      
      io.swagger.oas.models.info.Contact contact0 = new io.swagger.oas.models.info.Contact();
      assertNotNull(contact0);
      assertNull(contact0.getName());
      assertNull(contact0.getUrl());
      assertNull(contact0.getEmail());
      
      io.swagger.oas.models.info.Contact contact1 = contact0.name(string2);
      assertNotNull(contact1);
      assertSame(contact1, contact0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(contact0, contact1);
      assertNull(contact1.getUrl());
      assertEquals("8n_ZZK26", contact1.getName());
      assertNull(contact1.getEmail());
      assertNull(contact0.getUrl());
      assertEquals("8n_ZZK26", contact0.getName());
      assertNull(contact0.getEmail());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      io.swagger.oas.models.info.Info info2 = info1.contact(contact1);
      assertNotNull(info2);
      assertSame(contact1, contact0);
      assertSame(info2, info1);
      assertSame(info2, info0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(info0, info1);
      assertSame(info0, info2);
      assertSame(info1, info2);
      assertSame(info1, info0);
      assertSame(contact0, contact1);
      assertNull(contact1.getUrl());
      assertEquals("8n_ZZK26", contact1.getName());
      assertNull(contact1.getEmail());
      assertNull(info2.getTermsOfService());
      assertNull(info2.getDescription());
      assertNull(info2.getTitle());
      assertNull(info2.getVersion());
      assertNull(info0.getTitle());
      assertNull(info0.getVersion());
      assertNull(info0.getDescription());
      assertNull(info0.getTermsOfService());
      assertNull(license0.getUrl());
      assertNull(license0.getName());
      assertNull(info1.getTermsOfService());
      assertNull(info1.getDescription());
      assertNull(info1.getVersion());
      assertNull(info1.getTitle());
      assertNull(contact0.getUrl());
      assertEquals("8n_ZZK26", contact0.getName());
      assertNull(contact0.getEmail());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = "default";
      io.swagger.oas.models.info.Info info3 = info2.description(string3);
      assertNotNull(info3);
      assertSame(contact1, contact0);
      assertSame(info2, info3);
      assertSame(info2, info1);
      assertSame(info2, info0);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertSame(info3, info2);
      assertSame(info3, info1);
      assertSame(info3, info0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertSame(info0, info3);
      assertSame(info0, info1);
      assertSame(info0, info2);
      assertSame(info1, info2);
      assertSame(info1, info0);
      assertSame(info1, info3);
      assertSame(contact0, contact1);
      assertNull(contact1.getUrl());
      assertEquals("8n_ZZK26", contact1.getName());
      assertNull(contact1.getEmail());
      assertEquals("default", info2.getDescription());
      assertNull(info2.getTermsOfService());
      assertNull(info2.getTitle());
      assertNull(info2.getVersion());
      assertEquals("default", info3.getDescription());
      assertNull(info3.getVersion());
      assertNull(info3.getTermsOfService());
      assertNull(info3.getTitle());
      assertEquals("default", info0.getDescription());
      assertNull(info0.getTitle());
      assertNull(info0.getVersion());
      assertNull(info0.getTermsOfService());
      assertNull(license0.getUrl());
      assertNull(license0.getName());
      assertNull(info1.getTermsOfService());
      assertNull(info1.getVersion());
      assertEquals("default", info1.getDescription());
      assertNull(info1.getTitle());
      assertNull(contact0.getUrl());
      assertEquals("8n_ZZK26", contact0.getName());
      assertNull(contact0.getEmail());
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      
      components0.addExtension(string2, info3);
      assertSame(contact1, contact0);
      assertSame(info2, info3);
      assertSame(info2, info1);
      assertSame(info2, info0);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertSame(info3, info2);
      assertSame(info3, info1);
      assertSame(info3, info0);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertSame(info0, info3);
      assertSame(info0, info1);
      assertSame(info0, info2);
      assertSame(info1, info2);
      assertSame(info1, info0);
      assertSame(info1, info3);
      assertSame(contact0, contact1);
      assertNull(contact1.getUrl());
      assertEquals("8n_ZZK26", contact1.getName());
      assertNull(contact1.getEmail());
      assertEquals("default", info2.getDescription());
      assertNull(info2.getTermsOfService());
      assertNull(info2.getTitle());
      assertNull(info2.getVersion());
      assertEquals("default", info3.getDescription());
      assertNull(info3.getVersion());
      assertNull(info3.getTermsOfService());
      assertNull(info3.getTitle());
      assertEquals("default", info0.getDescription());
      assertNull(info0.getTitle());
      assertNull(info0.getVersion());
      assertNull(info0.getTermsOfService());
      assertNull(license0.getUrl());
      assertNull(license0.getName());
      assertNull(info1.getTermsOfService());
      assertNull(info1.getVersion());
      assertEquals("default", info1.getDescription());
      assertNull(info1.getTitle());
      assertNull(contact0.getUrl());
      assertEquals("8n_ZZK26", contact0.getName());
      assertNull(contact0.getEmail());
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      
      Example example0 = new Example();
      assertNotNull(example0);
      assertNull(example0.get$ref());
      assertNull(example0.getDescription());
      assertNull(example0.getSummary());
      assertNull(example0.getExternalValue());
      
      Example example1 = example0.summary(string1);
      assertNotNull(example1);
      assertSame(example0, example1);
      assertSame(example1, example0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNull(example0.get$ref());
      assertNull(example0.getDescription());
      assertEquals("", example0.getSummary());
      assertNull(example0.getExternalValue());
      assertNull(example1.getDescription());
      assertEquals("", example1.getSummary());
      assertNull(example1.getExternalValue());
      assertNull(example1.get$ref());
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      
      Components components3 = components2.addExamples(string1, example1);
      assertNotNull(components3);
      assertSame(example0, example1);
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(example1, example0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertSame(components3, components1);
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertSame(components1, components2);
      assertSame(components1, components3);
      assertSame(components1, components0);
      assertSame(components2, components0);
      assertSame(components2, components3);
      assertSame(components2, components1);
      assertNull(example0.get$ref());
      assertNull(example0.getDescription());
      assertEquals("", example0.getSummary());
      assertNull(example0.getExternalValue());
      assertNull(example1.getDescription());
      assertEquals("", example1.getSummary());
      assertNull(example1.getExternalValue());
      assertNull(example1.get$ref());
      assertNull(schema0.getType());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getTitle());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getFormat());
      assertNull(schema0.getPattern());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getNullable());
      assertNull(schema0.getDescription());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getName());
      assertNull(schema0.getMinItems());
      assertNull(schema0.get$ref());
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      
      HashMap<String, io.swagger.oas.models.parameters.Parameter> hashMap0 = new HashMap<String, io.swagger.oas.models.parameters.Parameter>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Components components4 = components3.parameters(hashMap0);
      assertNotNull(components4);
      assertSame(example0, example1);
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertSame(components0, components4);
      assertSame(components0, components1);
      assertSame(example1, example0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertSame(components3, components1);
      assertSame(components3, components0);
      assertSame(components3, components4);
      assertSame(components3, components2);
      assertSame(components1, components2);
      assertSame(components1, components3);
      assertSame(components1, components0);
      assertSame(components1, components4);
      assertSame(components4, components1);
      assertSame(components4, components2);
      assertSame(components4, components3);
      assertSame(components4, components0);
      assertSame(components2, components0);
      assertSame(components2, components3);
      assertSame(components2, components4);
      assertSame(components2, components1);
      assertNull(example0.get$ref());
      assertNull(example0.getDescription());
      assertEquals("", example0.getSummary());
      assertNull(example0.getExternalValue());
      assertNull(example1.getDescription());
      assertEquals("", example1.getSummary());
      assertNull(example1.getExternalValue());
      assertNull(example1.get$ref());
      assertNull(schema0.getType());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getTitle());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getFormat());
      assertNull(schema0.getPattern());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getNullable());
      assertNull(schema0.getDescription());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getName());
      assertNull(schema0.getMinItems());
      assertNull(schema0.get$ref());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      
      Optional<RequestBody> optional1 = OperationParser.getRequestBody(requestBody0, components4);
      assertNotNull(optional1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(example0, example1);
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertSame(components0, components4);
      assertSame(components0, components1);
      assertSame(example1, example0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertSame(components3, components1);
      assertSame(components3, components0);
      assertSame(components3, components4);
      assertSame(components3, components2);
      assertSame(components1, components2);
      assertSame(components1, components3);
      assertSame(components1, components0);
      assertSame(components1, components4);
      assertSame(components4, components1);
      assertSame(components4, components2);
      assertSame(components4, components3);
      assertSame(components4, components0);
      assertSame(components2, components0);
      assertSame(components2, components3);
      assertSame(components2, components4);
      assertSame(components2, components1);
      assertNull(example0.get$ref());
      assertNull(example0.getDescription());
      assertEquals("", example0.getSummary());
      assertNull(example0.getExternalValue());
      assertNull(example1.getDescription());
      assertEquals("", example1.getSummary());
      assertNull(example1.getExternalValue());
      assertNull(example1.get$ref());
      assertNull(schema0.getType());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getTitle());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getFormat());
      assertNull(schema0.getPattern());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getNullable());
      assertNull(schema0.getDescription());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getName());
      assertNull(schema0.getMinItems());
      assertNull(schema0.get$ref());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      
      MediaType mediaType0 = new MediaType();
      assertNotNull(mediaType0);
      assertNull(mediaType0.getExample());
      
      String string4 = "WRITE_NUMBERS_AS_STRINGS";
      Example example2 = new Example();
      assertNotNull(example2);
      assertNull(example2.get$ref());
      assertNull(example2.getDescription());
      assertNull(example2.getExternalValue());
      assertNull(example2.getSummary());
      assertFalse(example2.equals((Object)example0));
      assertFalse(example2.equals((Object)example1));
      
      MediaType mediaType1 = mediaType0.addExamples(string4, example2);
      assertNotNull(mediaType1);
      assertSame(mediaType0, mediaType1);
      assertNotSame(string4, string3);
      assertNotSame(string4, string2);
      assertNotSame(string4, string0);
      assertNotSame(string4, string1);
      assertNotSame(example2, example0);
      assertNotSame(example2, example1);
      assertSame(mediaType1, mediaType0);
      assertNull(mediaType0.getExample());
      assertNull(example2.get$ref());
      assertNull(example2.getDescription());
      assertNull(example2.getExternalValue());
      assertNull(example2.getSummary());
      assertNull(mediaType1.getExample());
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(example2.equals((Object)example0));
      assertFalse(example2.equals((Object)example1));
      
      Map<String, Example> map1 = mediaType1.getExamples();
      assertNotNull(map1);
      assertSame(mediaType0, mediaType1);
      assertNotSame(string4, string3);
      assertNotSame(string4, string2);
      assertNotSame(string4, string0);
      assertNotSame(string4, string1);
      assertNotSame(example2, example0);
      assertNotSame(example2, example1);
      assertSame(mediaType1, mediaType0);
      assertNull(mediaType0.getExample());
      assertNull(example2.get$ref());
      assertNull(example2.getDescription());
      assertNull(example2.getExternalValue());
      assertNull(example2.getSummary());
      assertNull(mediaType1.getExample());
      assertEquals(1, map1.size());
      assertFalse(map1.isEmpty());
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(example2.equals((Object)example0));
      assertFalse(example2.equals((Object)example1));
      
      MediaType mediaType2 = mediaType1.examples(map1);
      assertNotNull(mediaType2);
      assertSame(mediaType2, mediaType0);
      assertSame(mediaType2, mediaType1);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType0, mediaType2);
      assertNotSame(string4, string3);
      assertNotSame(string4, string2);
      assertNotSame(string4, string0);
      assertNotSame(string4, string1);
      assertNotSame(example2, example0);
      assertNotSame(example2, example1);
      assertSame(mediaType1, mediaType0);
      assertSame(mediaType1, mediaType2);
      assertNull(mediaType2.getExample());
      assertNull(mediaType0.getExample());
      assertNull(example2.get$ref());
      assertNull(example2.getDescription());
      assertNull(example2.getExternalValue());
      assertNull(example2.getSummary());
      assertNull(mediaType1.getExample());
      assertEquals(1, map1.size());
      assertFalse(map1.isEmpty());
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(example2.equals((Object)example0));
      assertFalse(example2.equals((Object)example1));
      
      String string5 = "default";
      Encoding encoding0 = new Encoding();
      assertNotNull(encoding0);
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getAllowReserved());
      assertNull(encoding0.getExplode());
      assertNull(encoding0.getStyle());
      
      Encoding encoding1 = encoding0.headers(map0);
      assertNotNull(encoding1);
      assertSame(encoding0, encoding1);
      assertSame(encoding1, encoding0);
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertSame(components0, components4);
      assertSame(components0, components1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string5);
      assertNotSame(string1, string4);
      assertSame(components1, components2);
      assertSame(components1, components3);
      assertSame(components1, components0);
      assertSame(components1, components4);
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getAllowReserved());
      assertNull(encoding0.getExplode());
      assertNull(encoding0.getStyle());
      assertNull(encoding1.getAllowReserved());
      assertNull(encoding1.getContentType());
      assertNull(encoding1.getExplode());
      assertNull(encoding1.getStyle());
      assertNull(schema0.getType());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getTitle());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getFormat());
      assertNull(schema0.getPattern());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getNullable());
      assertNull(schema0.getDescription());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getName());
      assertNull(schema0.getMinItems());
      assertNull(schema0.get$ref());
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string4));
      
      MediaType mediaType3 = mediaType2.addEncoding(string5, encoding1);
      assertNotNull(mediaType3);
      assertSame(mediaType2, mediaType3);
      assertSame(mediaType2, mediaType0);
      assertSame(mediaType2, mediaType1);
      assertNotSame(string5, string4);
      assertNotSame(string5, string1);
      assertNotSame(string5, string2);
      assertSame(string5, string3);
      assertNotSame(string5, string0);
      assertSame(encoding0, encoding1);
      assertSame(encoding1, encoding0);
      assertSame(mediaType3, mediaType1);
      assertSame(mediaType3, mediaType2);
      assertSame(mediaType3, mediaType0);
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertSame(components0, components4);
      assertSame(components0, components1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string5);
      assertNotSame(string1, string4);
      assertSame(components1, components2);
      assertSame(components1, components3);
      assertSame(components1, components0);
      assertSame(components1, components4);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType0, mediaType2);
      assertSame(mediaType0, mediaType3);
      assertNotSame(string4, string3);
      assertNotSame(string4, string5);
      assertNotSame(string4, string2);
      assertNotSame(string4, string0);
      assertNotSame(string4, string1);
      assertNotSame(example2, example0);
      assertNotSame(example2, example1);
      assertSame(mediaType1, mediaType3);
      assertSame(mediaType1, mediaType0);
      assertSame(mediaType1, mediaType2);
      assertNull(mediaType2.getExample());
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getAllowReserved());
      assertNull(encoding0.getExplode());
      assertNull(encoding0.getStyle());
      assertNull(encoding1.getAllowReserved());
      assertNull(encoding1.getContentType());
      assertNull(encoding1.getExplode());
      assertNull(encoding1.getStyle());
      assertNull(mediaType3.getExample());
      assertNull(schema0.getType());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getTitle());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getFormat());
      assertNull(schema0.getPattern());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getNullable());
      assertNull(schema0.getDescription());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getName());
      assertNull(schema0.getMinItems());
      assertNull(schema0.get$ref());
      assertNull(mediaType0.getExample());
      assertNull(example2.get$ref());
      assertNull(example2.getDescription());
      assertNull(example2.getExternalValue());
      assertNull(example2.getSummary());
      assertNull(mediaType1.getExample());
      assertEquals(1, map1.size());
      assertFalse(map1.isEmpty());
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(example2.equals((Object)example0));
      assertFalse(example2.equals((Object)example1));
      
      String string6 = "com.fasterxml.jackson.databind.node.ShortNode";
      MediaType mediaType4 = mediaType3.example(string6);
      assertNotNull(mediaType4);
      assertSame(mediaType2, mediaType3);
      assertSame(mediaType2, mediaType4);
      assertSame(mediaType2, mediaType0);
      assertSame(mediaType2, mediaType1);
      assertNotSame(string5, string6);
      assertNotSame(string5, string4);
      assertNotSame(string5, string1);
      assertNotSame(string5, string2);
      assertSame(string5, string3);
      assertNotSame(string5, string0);
      assertSame(encoding0, encoding1);
      assertSame(encoding1, encoding0);
      assertSame(mediaType3, mediaType4);
      assertSame(mediaType3, mediaType1);
      assertSame(mediaType3, mediaType2);
      assertSame(mediaType3, mediaType0);
      assertNotSame(string6, string3);
      assertNotSame(string6, string0);
      assertNotSame(string6, string1);
      assertNotSame(string6, string5);
      assertNotSame(string6, string4);
      assertNotSame(string6, string2);
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertSame(components0, components4);
      assertSame(components0, components1);
      assertSame(mediaType4, mediaType0);
      assertSame(mediaType4, mediaType2);
      assertSame(mediaType4, mediaType3);
      assertSame(mediaType4, mediaType1);
      assertNotSame(string1, string6);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string5);
      assertNotSame(string1, string4);
      assertSame(components1, components2);
      assertSame(components1, components3);
      assertSame(components1, components0);
      assertSame(components1, components4);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType0, mediaType2);
      assertSame(mediaType0, mediaType3);
      assertSame(mediaType0, mediaType4);
      assertNotSame(string4, string3);
      assertNotSame(string4, string5);
      assertNotSame(string4, string2);
      assertNotSame(string4, string0);
      assertNotSame(string4, string6);
      assertNotSame(string4, string1);
      assertNotSame(example2, example0);
      assertNotSame(example2, example1);
      assertSame(mediaType1, mediaType3);
      assertSame(mediaType1, mediaType4);
      assertSame(mediaType1, mediaType0);
      assertSame(mediaType1, mediaType2);
      assertEquals("com.fasterxml.jackson.databind.node.ShortNode", mediaType2.getExample());
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getAllowReserved());
      assertNull(encoding0.getExplode());
      assertNull(encoding0.getStyle());
      assertNull(encoding1.getAllowReserved());
      assertNull(encoding1.getContentType());
      assertNull(encoding1.getExplode());
      assertNull(encoding1.getStyle());
      assertEquals("com.fasterxml.jackson.databind.node.ShortNode", mediaType3.getExample());
      assertEquals("com.fasterxml.jackson.databind.node.ShortNode", mediaType4.getExample());
      assertNull(schema0.getType());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getTitle());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getFormat());
      assertNull(schema0.getPattern());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getNullable());
      assertNull(schema0.getDescription());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getName());
      assertNull(schema0.getMinItems());
      assertNull(schema0.get$ref());
      assertEquals("com.fasterxml.jackson.databind.node.ShortNode", mediaType0.getExample());
      assertNull(example2.get$ref());
      assertNull(example2.getDescription());
      assertNull(example2.getExternalValue());
      assertNull(example2.getSummary());
      assertEquals("com.fasterxml.jackson.databind.node.ShortNode", mediaType1.getExample());
      assertEquals(1, map1.size());
      assertFalse(map1.isEmpty());
      assertFalse(string5.equals((Object)string6));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string6));
      assertFalse(string4.equals((Object)string1));
      assertFalse(example2.equals((Object)example0));
      assertFalse(example2.equals((Object)example1));
      
      String string7 = "(locale: ";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exampleObject0).externalValue();
      doReturn(string7, (String) null, (String) null).when(exampleObject0).name();
      doReturn((String) null).when(exampleObject0).summary();
      doReturn((String) null).when(exampleObject0).value();
      Optional<MediaType> optional2 = OperationParser.getMediaType(mediaType4, exampleObject0);
      assertNotNull(optional2);
      assertSame(mediaType2, mediaType3);
      assertSame(mediaType2, mediaType4);
      assertSame(mediaType2, mediaType0);
      assertSame(mediaType2, mediaType1);
      assertNotSame(string5, string6);
      assertNotSame(string5, string4);
      assertNotSame(string5, string1);
      assertNotSame(string5, string2);
      assertSame(string5, string3);
      assertNotSame(string5, string0);
      assertNotSame(string5, string7);
      assertSame(encoding0, encoding1);
      assertSame(encoding1, encoding0);
      assertSame(mediaType3, mediaType4);
      assertSame(mediaType3, mediaType1);
      assertSame(mediaType3, mediaType2);
      assertSame(mediaType3, mediaType0);
      assertNotSame(string6, string3);
      assertNotSame(string6, string0);
      assertNotSame(string6, string1);
      assertNotSame(string6, string5);
      assertNotSame(string6, string7);
      assertNotSame(string6, string4);
      assertNotSame(string6, string2);
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertSame(components0, components4);
      assertSame(components0, components1);
      assertSame(mediaType4, mediaType0);
      assertSame(mediaType4, mediaType2);
      assertSame(mediaType4, mediaType3);
      assertSame(mediaType4, mediaType1);
      assertNotSame(string1, string7);
      assertNotSame(string1, string6);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string5);
      assertNotSame(string1, string4);
      assertNotSame(string7, string1);
      assertNotSame(string7, string6);
      assertNotSame(string7, string3);
      assertNotSame(string7, string5);
      assertNotSame(string7, string4);
      assertNotSame(string7, string0);
      assertNotSame(string7, string2);
      assertSame(components1, components2);
      assertSame(components1, components3);
      assertSame(components1, components0);
      assertSame(components1, components4);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType0, mediaType2);
      assertSame(mediaType0, mediaType3);
      assertSame(mediaType0, mediaType4);
      assertNotSame(string4, string3);
      assertNotSame(string4, string5);
      assertNotSame(string4, string2);
      assertNotSame(string4, string0);
      assertNotSame(string4, string6);
      assertNotSame(string4, string7);
      assertNotSame(string4, string1);
      assertNotSame(example2, example0);
      assertNotSame(example2, example1);
      assertSame(mediaType1, mediaType3);
      assertSame(mediaType1, mediaType4);
      assertSame(mediaType1, mediaType0);
      assertSame(mediaType1, mediaType2);
      assertEquals("com.fasterxml.jackson.databind.node.ShortNode", mediaType2.getExample());
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getAllowReserved());
      assertNull(encoding0.getExplode());
      assertNull(encoding0.getStyle());
      assertNull(encoding1.getAllowReserved());
      assertNull(encoding1.getContentType());
      assertNull(encoding1.getExplode());
      assertNull(encoding1.getStyle());
      assertEquals("com.fasterxml.jackson.databind.node.ShortNode", mediaType3.getExample());
      assertEquals("com.fasterxml.jackson.databind.node.ShortNode", mediaType4.getExample());
      assertNull(schema0.getType());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getTitle());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getFormat());
      assertNull(schema0.getPattern());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getNullable());
      assertNull(schema0.getDescription());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getName());
      assertNull(schema0.getMinItems());
      assertNull(schema0.get$ref());
      assertEquals("com.fasterxml.jackson.databind.node.ShortNode", mediaType0.getExample());
      assertNull(example2.get$ref());
      assertNull(example2.getDescription());
      assertNull(example2.getExternalValue());
      assertNull(example2.getSummary());
      assertEquals("com.fasterxml.jackson.databind.node.ShortNode", mediaType1.getExample());
      assertFalse(map1.isEmpty());
      assertEquals(2, map1.size());
      assertFalse(string5.equals((Object)string6));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string7));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string7));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string1.equals((Object)string7));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string6));
      assertFalse(string4.equals((Object)string7));
      assertFalse(string4.equals((Object)string1));
      assertFalse(example2.equals((Object)example0));
      assertFalse(example2.equals((Object)example1));
  }

  @Test(timeout = 11000)
  public void test065()  throws Throwable  {
      LinkParameter[] linkParameterArray0 = new LinkParameter[8];
      String string0 = "*9/,Jhp'KXdv_eO[lKn";
      LinkParameter linkParameter0 = mock(LinkParameter.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(linkParameter0).expression();
      doReturn(string0, string0, string0, string0, string0).when(linkParameter0).name();
      linkParameterArray0[0] = linkParameter0;
      linkParameterArray0[1] = linkParameterArray0[0];
      linkParameterArray0[2] = linkParameterArray0[1];
      linkParameterArray0[3] = linkParameterArray0[2];
      linkParameterArray0[4] = linkParameterArray0[3];
      linkParameterArray0[5] = linkParameterArray0[4];
      linkParameterArray0[6] = linkParameterArray0[5];
      linkParameterArray0[7] = linkParameterArray0[6];
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameterArray0);
      assertNotNull(map0);
      assertEquals(8, linkParameterArray0.length);
      assertFalse(map0.isEmpty());
      assertEquals(1, map0.size());
      
      String string1 = "io.swagger.jaxrs2.OperationParser";
      String string2 = "w_|HO(|Gyj8C\"";
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn((Contact) null).when(info0).contact();
      doReturn(string0, (String) null).when(info0).description();
      doReturn((License) null).when(info0).license();
      doReturn(string0, (String) null).when(info0).termsOfService();
      doReturn(string1, (String) null).when(info0).title();
      doReturn(string2, (String) null).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional0 = OperationParser.getInfo(info0);
      assertNotNull(optional0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = null;
      String string4 = "";
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(contact0).email();
      doReturn(string3).when(contact0).name();
      doReturn(string4).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional1 = OperationParser.getContact(contact0);
      assertNotNull(optional1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string2);
      assertNotSame(string4, string1);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = string3;
      stringArray0[1] = string2;
      stringArray0[2] = string0;
      stringArray0[3] = string4;
      stringArray0[4] = string0;
      stringArray0[5] = string1;
      stringArray0[6] = string1;
      Parameter[] parameterArray0 = new Parameter[3];
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(parameter0).allowEmptyValue();
      doReturn(false, false, false).when(parameter0).allowReserved();
      doReturn((Object) null, (Object) null, (Object) null).when(parameter0).content();
      doReturn(false, false, false).when(parameter0).deprecated();
      doReturn((String) null, (String) null, (String) null).when(parameter0).description();
      doReturn((Explode) null, (Explode) null, (Explode) null, (Explode) null, (Explode) null).when(parameter0).explode();
      doReturn((String) null, (String) null, (String) null).when(parameter0).in();
      doReturn((String) null, (String) null, (String) null).when(parameter0).name();
      doReturn(false, false, false).when(parameter0).required();
      doReturn((Schema) null, (Schema) null, (Schema) null, (Schema) null, (Schema) null).when(parameter0).schema();
      doReturn((String) null, (String) null, (String) null).when(parameter0).style();
      parameterArray0[0] = parameter0;
      parameterArray0[1] = parameterArray0[0];
      parameterArray0[2] = parameterArray0[1];
      Components components0 = new Components();
      assertNotNull(components0);
      
      String string5 = "";
      io.swagger.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.oas.models.responses.ApiResponse();
      assertNotNull(apiResponse0);
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      
      Components components1 = components0.addResponses(string5, apiResponse0);
      assertNotNull(components1);
      assertSame(components0, components1);
      assertNotSame(string5, string1);
      assertNotSame(string5, string0);
      assertNotSame(string5, string2);
      assertSame(string5, string4);
      assertSame(components1, components0);
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      
      HashMap<String, RequestBody> hashMap0 = new HashMap<String, RequestBody>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Components components2 = components1.requestBodies(hashMap0);
      assertNotNull(components2);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertNotSame(string5, string1);
      assertNotSame(string5, string0);
      assertNotSame(string5, string2);
      assertSame(string5, string4);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      
      Map<String, Link> map1 = apiResponse0.getLinks();
      assertNull(map1);
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      
      Components components3 = components2.links(map1);
      assertNotNull(components3);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertNotSame(string5, string1);
      assertNotSame(string5, string0);
      assertNotSame(string5, string2);
      assertSame(string5, string4);
      assertSame(components1, components2);
      assertSame(components1, components3);
      assertSame(components1, components0);
      assertSame(components2, components0);
      assertSame(components2, components3);
      assertSame(components2, components1);
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertSame(components3, components1);
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      
      Optional<List<io.swagger.oas.models.parameters.Parameter>> optional2 = OperationParser.getParametersList(parameterArray0, components3);
      assertNotNull(optional2);
      assertEquals(3, parameterArray0.length);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertNotSame(string5, string1);
      assertNotSame(string5, string0);
      assertNotSame(string5, string2);
      assertSame(string5, string4);
      assertSame(components1, components2);
      assertSame(components1, components3);
      assertSame(components1, components0);
      assertSame(components2, components0);
      assertSame(components2, components3);
      assertSame(components2, components1);
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertSame(components3, components1);
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
  }

  @Test(timeout = 11000)
  public void test066()  throws Throwable  {
      LinkParameter[] linkParameterArray0 = new LinkParameter[3];
      String string0 = "QJ";
      String string1 = "osOGz(@9E\\TP";
      LinkParameter linkParameter0 = mock(LinkParameter.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(linkParameter0).expression();
      doReturn(string0, string0, string1, (String) null, (String) null).when(linkParameter0).name();
      linkParameterArray0[0] = linkParameter0;
      linkParameterArray0[1] = linkParameterArray0[0];
      linkParameterArray0[2] = linkParameterArray0[1];
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameterArray0);
      assertNotNull(map0);
      assertEquals(3, linkParameterArray0.length);
      assertFalse(map0.isEmpty());
      assertEquals(2, map0.size());
      
      String string2 = "";
      io.swagger.oas.annotations.links.Link link0 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      doReturn(string2).when(link0).description();
      doReturn(string2).when(link0).operationId();
      doReturn(string0, (String) null).when(link0).operationRef();
      doReturn((LinkParameter[]) null).when(link0).parameters();
      Optional<Link> optional0 = OperationParser.getLink(link0);
      assertNotNull(optional0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = "DateFormat ";
      String string4 = "java.lang";
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn(string1, (String) null).when(contact0).email();
      doReturn(string3, (String) null).when(contact0).name();
      doReturn(string4, (String) null).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional1 = OperationParser.getContact(contact0);
      assertNotNull(optional1);
      assertNotSame(string1, string4);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string4);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string4, string3);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string2);
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      
      String[] stringArray0 = new String[9];
      String string5 = "v1-_hMRhoe";
      stringArray0[0] = string5;
      String string6 = "";
      stringArray0[1] = string6;
      String string7 = "&";
      stringArray0[2] = string7;
      String string8 = "io.swagger.jaxrs2.OperationParser";
      stringArray0[3] = string8;
      String string9 = "L4: ,G1y?wSqbQwAEJ";
      stringArray0[4] = string9;
      String string10 = "";
      stringArray0[5] = string10;
      String string11 = "";
      stringArray0[6] = string11;
      String string12 = "";
      stringArray0[7] = string12;
      String string13 = "no description";
      stringArray0[8] = string13;
      Optional<Set<Tag>> optional2 = OperationParser.getTags(stringArray0);
      assertNotNull(optional2);
      assertEquals(9, stringArray0.length);
      
      MediaType mediaType0 = new MediaType();
      assertNotNull(mediaType0);
      assertNull(mediaType0.getExample());
      
      HashMap<String, Encoding> hashMap0 = new HashMap<String, Encoding>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      MediaType mediaType1 = mediaType0.encoding(hashMap0);
      assertNotNull(mediaType1);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType1, mediaType0);
      assertNull(mediaType0.getExample());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(mediaType1.getExample());
      
      io.swagger.oas.models.media.Schema<io.swagger.oas.models.media.Content> schema0 = new io.swagger.oas.models.media.Schema<io.swagger.oas.models.media.Content>();
      assertNotNull(schema0);
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getNullable());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getDescription());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getType());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getFormat());
      assertNull(schema0.getPattern());
      assertNull(schema0.get$ref());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getTitle());
      assertNull(schema0.getMinItems());
      assertNull(schema0.getName());
      assertNull(schema0.getMaxItems());
      
      MediaType mediaType2 = mediaType1.schema(schema0);
      assertNotNull(mediaType2);
      assertSame(mediaType0, mediaType2);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType1, mediaType0);
      assertSame(mediaType1, mediaType2);
      assertSame(mediaType2, mediaType0);
      assertSame(mediaType2, mediaType1);
      assertNull(mediaType0.getExample());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(mediaType1.getExample());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getNullable());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getDescription());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getType());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getFormat());
      assertNull(schema0.getPattern());
      assertNull(schema0.get$ref());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getTitle());
      assertNull(schema0.getMinItems());
      assertNull(schema0.getName());
      assertNull(schema0.getMaxItems());
      assertNull(mediaType2.getExample());
      
      Components components0 = new Components();
      assertNotNull(components0);
      
      Header header0 = new Header();
      assertNotNull(header0);
      assertNull(header0.getExample());
      assertNull(header0.get$ref());
      assertNull(header0.getDescription());
      assertNull(header0.getRequired());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getDeprecated());
      assertNull(header0.getExplode());
      assertNull(header0.getStyle());
      
      Components components1 = components0.addHeaders(stringArray0[5], header0);
      assertNotNull(components1);
      assertEquals(9, stringArray0.length);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertNull(header0.getExample());
      assertNull(header0.get$ref());
      assertNull(header0.getDescription());
      assertNull(header0.getRequired());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getDeprecated());
      assertNull(header0.getExplode());
      assertNull(header0.getStyle());
      
      Map<String, Example> map1 = components1.getExamples();
      assertNull(map1);
      assertEquals(9, stringArray0.length);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertNull(header0.getExample());
      assertNull(header0.get$ref());
      assertNull(header0.getDescription());
      assertNull(header0.getRequired());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getDeprecated());
      assertNull(header0.getExplode());
      assertNull(header0.getStyle());
      
      MediaType mediaType3 = mediaType2.examples(map1);
      assertNotNull(mediaType3);
      assertEquals(9, stringArray0.length);
      assertSame(mediaType0, mediaType2);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType0, mediaType3);
      assertSame(mediaType1, mediaType0);
      assertSame(mediaType1, mediaType3);
      assertSame(mediaType1, mediaType2);
      assertSame(mediaType2, mediaType0);
      assertSame(mediaType2, mediaType3);
      assertSame(mediaType2, mediaType1);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertSame(mediaType3, mediaType2);
      assertSame(mediaType3, mediaType1);
      assertSame(mediaType3, mediaType0);
      assertNull(mediaType0.getExample());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(mediaType1.getExample());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getNullable());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getDescription());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getType());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getFormat());
      assertNull(schema0.getPattern());
      assertNull(schema0.get$ref());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getTitle());
      assertNull(schema0.getMinItems());
      assertNull(schema0.getName());
      assertNull(schema0.getMaxItems());
      assertNull(mediaType2.getExample());
      assertNull(header0.getExample());
      assertNull(header0.get$ref());
      assertNull(header0.getDescription());
      assertNull(header0.getRequired());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getDeprecated());
      assertNull(header0.getExplode());
      assertNull(header0.getStyle());
      assertNull(mediaType3.getExample());
      
      String string14 = "";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn(string14).when(exampleObject0).name();
      Optional<MediaType> optional3 = OperationParser.getMediaType(mediaType3, exampleObject0);
      assertNotNull(optional3);
      assertEquals(9, stringArray0.length);
      assertSame(mediaType0, mediaType2);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType0, mediaType3);
      assertSame(mediaType1, mediaType0);
      assertSame(mediaType1, mediaType3);
      assertSame(mediaType1, mediaType2);
      assertSame(mediaType2, mediaType0);
      assertSame(mediaType2, mediaType3);
      assertSame(mediaType2, mediaType1);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertSame(mediaType3, mediaType2);
      assertSame(mediaType3, mediaType1);
      assertSame(mediaType3, mediaType0);
      assertNotSame(string14, string7);
      assertNotSame(string14, string0);
      assertSame(string14, string12);
      assertNotSame(string14, string5);
      assertSame(string14, string6);
      assertSame(string14, string10);
      assertNotSame(string14, string1);
      assertSame(string14, string2);
      assertNotSame(string14, string3);
      assertNotSame(string14, string4);
      assertNotSame(string14, string9);
      assertNotSame(string14, string8);
      assertSame(string14, string11);
      assertNotSame(string14, string13);
      assertNull(mediaType0.getExample());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(mediaType1.getExample());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getNullable());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getDescription());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getType());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getFormat());
      assertNull(schema0.getPattern());
      assertNull(schema0.get$ref());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getTitle());
      assertNull(schema0.getMinItems());
      assertNull(schema0.getName());
      assertNull(schema0.getMaxItems());
      assertNull(mediaType2.getExample());
      assertNull(header0.getExample());
      assertNull(header0.get$ref());
      assertNull(header0.getDescription());
      assertNull(header0.getRequired());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getDeprecated());
      assertNull(header0.getExplode());
      assertNull(header0.getStyle());
      assertNull(mediaType3.getExample());
      assertFalse(string14.equals((Object)string9));
      assertFalse(string14.equals((Object)string7));
      assertFalse(string14.equals((Object)string0));
      assertFalse(string14.equals((Object)string8));
      assertFalse(string14.equals((Object)string5));
      assertFalse(string14.equals((Object)string1));
      assertFalse(string14.equals((Object)string3));
      assertFalse(string14.equals((Object)string4));
      assertFalse(string14.equals((Object)string13));
  }

  @Test(timeout = 11000)
  public void test067()  throws Throwable  {
      OperationParser operationParser0 = new OperationParser();
      assertNotNull(operationParser0);
      
      String string0 = "BpEpIf;\"66%O9T%`DV";
      String string1 = "";
      io.swagger.oas.annotations.links.Link link0 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      doReturn(operationParser0.RESPONSE_DEFAULT, (String) null).when(link0).description();
      doReturn(string0, (String) null).when(link0).operationId();
      doReturn(string1).when(link0).operationRef();
      doReturn((LinkParameter[]) null).when(link0).parameters();
      Optional<Link> optional0 = OperationParser.getLink(link0);
      assertNotNull(optional0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      LinkParameter[] linkParameterArray0 = new LinkParameter[6];
      LinkParameter linkParameter0 = mock(LinkParameter.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(linkParameter0).name();
      linkParameterArray0[0] = linkParameter0;
      linkParameterArray0[1] = linkParameterArray0[0];
      linkParameterArray0[2] = linkParameterArray0[1];
      linkParameterArray0[3] = linkParameterArray0[2];
      linkParameterArray0[4] = linkParameterArray0[3];
      linkParameterArray0[5] = linkParameterArray0[4];
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameterArray0);
      assertNotNull(map0);
      assertEquals(6, linkParameterArray0.length);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 11000)
  public void test068()  throws Throwable  {
      Parameter[] parameterArray0 = new Parameter[6];
      boolean boolean0 = true;
      boolean boolean1 = true;
      boolean boolean2 = false;
      boolean boolean3 = false;
      boolean boolean4 = true;
      boolean boolean5 = true;
      boolean boolean6 = false;
      boolean boolean7 = false;
      Content[] contentArray0 = null;
      Content[] contentArray1 = new Content[5];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      contentArray1[0] = content0;
      contentArray1[1] = contentArray1[0];
      contentArray1[2] = contentArray1[1];
      contentArray1[3] = contentArray1[2];
      contentArray1[4] = contentArray1[3];
      Content[] contentArray2 = null;
      boolean boolean8 = false;
      boolean boolean9 = false;
      boolean boolean10 = false;
      String string0 = "@ z+#E>l'_m_";
      String string1 = "";
      String string2 = "8";
      Explode explode0 = Explode.DEFAULT;
      Explode explode1 = Explode.FALSE;
      Explode explode2 = Explode.FALSE;
      String string3 = "4svH$";
      String string4 = "com.fasterxml.jackson.annotation.JsonFormat$Features";
      String string5 = "columnNr";
      String string6 = "";
      boolean boolean11 = true;
      boolean boolean12 = true;
      boolean boolean13 = true;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null, (Class) null).when(schema0).implementation();
      String string7 = "#/components/schemas/";
      String string8 = "y5hCEq";
      String string9 = ".<x4brfc!?nJ";
      String string10 = "com.fasterxml.jackson.databind.ser.BeanPropertyWriter";
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0, boolean1, boolean2).when(parameter0).allowEmptyValue();
      doReturn(boolean4, boolean5, boolean6).when(parameter0).allowReserved();
      doReturn(contentArray0).when(parameter0).content();
      doReturn(boolean3, boolean8).when(parameter0).deprecated();
      doReturn(string0, string0, string0, string1).when(parameter0).description();
      doReturn(explode0, explode1, explode0).when(parameter0).explode();
      doReturn(string3, string1, string4, string3).when(parameter0).in();
      doReturn(string4, string0, string5, string6).when(parameter0).name();
      doReturn(boolean8, boolean11, boolean3).when(parameter0).required();
      doReturn(schema0, schema0, schema0).when(parameter0).schema();
      doReturn(string6, string7, string8).when(parameter0).style();
      parameterArray0[0] = parameter0;
      parameterArray0[1] = parameterArray0[0];
      parameterArray0[2] = parameterArray0[1];
      parameterArray0[3] = parameterArray0[2];
      parameterArray0[4] = parameterArray0[3];
      parameterArray0[5] = parameterArray0[4];
      Components components0 = new Components();
      assertNotNull(components0);
      
      Link link0 = new Link();
      assertNotNull(link0);
      assertNull(link0.getDescription());
      assertNull(link0.getOperationRef());
      assertNull(link0.getOperationId());
      assertNull(link0.get$ref());
      
      Map<String, Header> map0 = link0.getHeaders();
      assertNull(map0);
      assertNull(link0.getDescription());
      assertNull(link0.getOperationRef());
      assertNull(link0.getOperationId());
      assertNull(link0.get$ref());
      
      Components components1 = components0.headers(map0);
      assertNotNull(components1);
      assertSame(components1, components0);
      assertSame(components0, components1);
      assertNull(link0.getDescription());
      assertNull(link0.getOperationRef());
      assertNull(link0.getOperationId());
      assertNull(link0.get$ref());
      
      String string11 = "";
      SecurityScheme securityScheme0 = new SecurityScheme();
      assertNotNull(securityScheme0);
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.getType());
      
      Components components2 = components1.addSecuritySchemes(string11, securityScheme0);
      assertNotNull(components2);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertNotSame(string11, string2);
      assertNotSame(string11, string9);
      assertNotSame(string11, string4);
      assertNotSame(string11, string0);
      assertNotSame(string11, string3);
      assertNotSame(string11, string5);
      assertNotSame(string11, string10);
      assertNotSame(string11, string7);
      assertSame(string11, string6);
      assertNotSame(string11, string8);
      assertSame(string11, string1);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.getType());
      assertNull(link0.getDescription());
      assertNull(link0.getOperationRef());
      assertNull(link0.getOperationId());
      assertNull(link0.get$ref());
      assertFalse(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string9));
      assertFalse(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string5));
      assertFalse(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string7));
      assertFalse(string11.equals((Object)string8));
      
      String string12 = "!-EP?_";
      io.swagger.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.oas.models.responses.ApiResponse();
      assertNotNull(apiResponse0);
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      
      String string13 = "e\"$\"V=|UA&L#@";
      io.swagger.oas.models.responses.ApiResponse apiResponse1 = apiResponse0.link(string13, link0);
      assertNotNull(apiResponse1);
      assertSame(apiResponse0, apiResponse1);
      assertNotSame(string13, string12);
      assertNotSame(string13, string8);
      assertNotSame(string13, string6);
      assertNotSame(string13, string10);
      assertNotSame(string13, string2);
      assertNotSame(string13, string4);
      assertNotSame(string13, string3);
      assertNotSame(string13, string5);
      assertNotSame(string13, string9);
      assertNotSame(string13, string1);
      assertNotSame(string13, string0);
      assertNotSame(string13, string11);
      assertNotSame(string13, string7);
      assertSame(apiResponse1, apiResponse0);
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      assertNull(apiResponse1.getDescription());
      assertNull(apiResponse1.get$ref());
      assertNull(link0.getDescription());
      assertNull(link0.getOperationRef());
      assertNull(link0.getOperationId());
      assertNull(link0.get$ref());
      assertFalse(string13.equals((Object)string12));
      assertFalse(string13.equals((Object)string8));
      assertFalse(string13.equals((Object)string6));
      assertFalse(string13.equals((Object)string10));
      assertFalse(string13.equals((Object)string2));
      assertFalse(string13.equals((Object)string4));
      assertFalse(string13.equals((Object)string3));
      assertFalse(string13.equals((Object)string5));
      assertFalse(string13.equals((Object)string9));
      assertFalse(string13.equals((Object)string1));
      assertFalse(string13.equals((Object)string0));
      assertFalse(string13.equals((Object)string11));
      assertFalse(string13.equals((Object)string7));
      
      Components components3 = components2.addResponses(string12, apiResponse1);
      assertNotNull(components3);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertNotSame(string11, string9);
      assertNotSame(string11, string4);
      assertNotSame(string11, string3);
      assertNotSame(string11, string5);
      assertNotSame(string11, string12);
      assertNotSame(string11, string7);
      assertNotSame(string11, string2);
      assertNotSame(string11, string0);
      assertNotSame(string11, string13);
      assertNotSame(string11, string10);
      assertSame(string11, string6);
      assertSame(string11, string1);
      assertNotSame(string11, string8);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(components2, components0);
      assertNotSame(string12, string8);
      assertNotSame(string12, string6);
      assertNotSame(string12, string13);
      assertNotSame(string12, string2);
      assertNotSame(string12, string10);
      assertNotSame(string12, string3);
      assertNotSame(string12, string4);
      assertNotSame(string12, string7);
      assertNotSame(string12, string0);
      assertNotSame(string12, string1);
      assertNotSame(string12, string5);
      assertNotSame(string12, string11);
      assertNotSame(string12, string9);
      assertSame(apiResponse0, apiResponse1);
      assertNotSame(string13, string12);
      assertNotSame(string13, string8);
      assertNotSame(string13, string6);
      assertNotSame(string13, string10);
      assertNotSame(string13, string2);
      assertNotSame(string13, string4);
      assertNotSame(string13, string3);
      assertNotSame(string13, string5);
      assertNotSame(string13, string9);
      assertNotSame(string13, string1);
      assertNotSame(string13, string0);
      assertNotSame(string13, string11);
      assertNotSame(string13, string7);
      assertSame(apiResponse1, apiResponse0);
      assertSame(components3, components1);
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.getType());
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      assertNull(apiResponse1.getDescription());
      assertNull(apiResponse1.get$ref());
      assertNull(link0.getDescription());
      assertNull(link0.getOperationRef());
      assertNull(link0.getOperationId());
      assertNull(link0.get$ref());
      assertFalse(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string9));
      assertFalse(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string5));
      assertFalse(string11.equals((Object)string13));
      assertFalse(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string7));
      assertFalse(string11.equals((Object)string8));
      assertFalse(string11.equals((Object)string12));
      assertFalse(string12.equals((Object)string8));
      assertFalse(string12.equals((Object)string6));
      assertFalse(string12.equals((Object)string13));
      assertFalse(string12.equals((Object)string2));
      assertFalse(string12.equals((Object)string10));
      assertFalse(string12.equals((Object)string3));
      assertFalse(string12.equals((Object)string4));
      assertFalse(string12.equals((Object)string7));
      assertFalse(string12.equals((Object)string0));
      assertFalse(string12.equals((Object)string1));
      assertFalse(string12.equals((Object)string5));
      assertFalse(string12.equals((Object)string11));
      assertFalse(string12.equals((Object)string9));
      assertFalse(string13.equals((Object)string12));
      assertFalse(string13.equals((Object)string8));
      assertFalse(string13.equals((Object)string6));
      assertFalse(string13.equals((Object)string10));
      assertFalse(string13.equals((Object)string2));
      assertFalse(string13.equals((Object)string4));
      assertFalse(string13.equals((Object)string3));
      assertFalse(string13.equals((Object)string5));
      assertFalse(string13.equals((Object)string9));
      assertFalse(string13.equals((Object)string1));
      assertFalse(string13.equals((Object)string0));
      assertFalse(string13.equals((Object)string11));
      assertFalse(string13.equals((Object)string7));
      
      String string14 = "abstract type (need to add/enable type information?)";
      Components components4 = components2.addLinks(string14, link0);
      assertNotNull(components4);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components1, components4);
      assertSame(components1, components3);
      assertNotSame(string11, string9);
      assertNotSame(string11, string4);
      assertNotSame(string11, string3);
      assertNotSame(string11, string5);
      assertNotSame(string11, string12);
      assertNotSame(string11, string7);
      assertNotSame(string11, string2);
      assertNotSame(string11, string0);
      assertNotSame(string11, string14);
      assertNotSame(string11, string13);
      assertNotSame(string11, string10);
      assertSame(string11, string6);
      assertSame(string11, string1);
      assertNotSame(string11, string8);
      assertSame(components2, components1);
      assertSame(components2, components4);
      assertSame(components2, components3);
      assertSame(components2, components0);
      assertNotSame(string14, string12);
      assertNotSame(string14, string8);
      assertNotSame(string14, string2);
      assertNotSame(string14, string5);
      assertNotSame(string14, string9);
      assertNotSame(string14, string1);
      assertNotSame(string14, string6);
      assertNotSame(string14, string7);
      assertNotSame(string14, string0);
      assertNotSame(string14, string11);
      assertNotSame(string14, string4);
      assertNotSame(string14, string13);
      assertNotSame(string14, string10);
      assertNotSame(string14, string3);
      assertSame(components4, components2);
      assertSame(components4, components3);
      assertSame(components4, components0);
      assertSame(components4, components1);
      assertSame(components0, components1);
      assertSame(components0, components4);
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.getType());
      assertNull(link0.getDescription());
      assertNull(link0.getOperationRef());
      assertNull(link0.getOperationId());
      assertNull(link0.get$ref());
      assertFalse(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string9));
      assertFalse(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string14));
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string5));
      assertFalse(string11.equals((Object)string13));
      assertFalse(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string12));
      assertFalse(string11.equals((Object)string7));
      assertFalse(string11.equals((Object)string8));
      assertFalse(string14.equals((Object)string12));
      assertFalse(string14.equals((Object)string8));
      assertFalse(string14.equals((Object)string2));
      assertFalse(string14.equals((Object)string5));
      assertFalse(string14.equals((Object)string9));
      assertFalse(string14.equals((Object)string1));
      assertFalse(string14.equals((Object)string6));
      assertFalse(string14.equals((Object)string7));
      assertFalse(string14.equals((Object)string0));
      assertFalse(string14.equals((Object)string11));
      assertFalse(string14.equals((Object)string4));
      assertFalse(string14.equals((Object)string13));
      assertFalse(string14.equals((Object)string10));
      assertFalse(string14.equals((Object)string3));
      
      Map<String, io.swagger.oas.models.responses.ApiResponse> map1 = components3.getResponses();
      assertNotNull(map1);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components1, components4);
      assertSame(components1, components3);
      assertNotSame(string11, string9);
      assertNotSame(string11, string4);
      assertNotSame(string11, string3);
      assertNotSame(string11, string5);
      assertNotSame(string11, string12);
      assertNotSame(string11, string7);
      assertNotSame(string11, string2);
      assertNotSame(string11, string0);
      assertNotSame(string11, string14);
      assertNotSame(string11, string13);
      assertNotSame(string11, string10);
      assertSame(string11, string6);
      assertSame(string11, string1);
      assertNotSame(string11, string8);
      assertSame(components2, components1);
      assertSame(components2, components4);
      assertSame(components2, components3);
      assertSame(components2, components0);
      assertNotSame(string12, string8);
      assertNotSame(string12, string6);
      assertNotSame(string12, string13);
      assertNotSame(string12, string2);
      assertNotSame(string12, string10);
      assertNotSame(string12, string3);
      assertNotSame(string12, string4);
      assertNotSame(string12, string7);
      assertNotSame(string12, string0);
      assertNotSame(string12, string14);
      assertNotSame(string12, string1);
      assertNotSame(string12, string5);
      assertNotSame(string12, string11);
      assertNotSame(string12, string9);
      assertSame(apiResponse0, apiResponse1);
      assertNotSame(string13, string12);
      assertNotSame(string13, string8);
      assertNotSame(string13, string6);
      assertNotSame(string13, string10);
      assertNotSame(string13, string2);
      assertNotSame(string13, string4);
      assertNotSame(string13, string3);
      assertNotSame(string13, string5);
      assertNotSame(string13, string9);
      assertNotSame(string13, string1);
      assertNotSame(string13, string14);
      assertNotSame(string13, string0);
      assertNotSame(string13, string11);
      assertNotSame(string13, string7);
      assertSame(apiResponse1, apiResponse0);
      assertSame(components3, components1);
      assertSame(components3, components0);
      assertSame(components3, components4);
      assertSame(components3, components2);
      assertSame(components0, components1);
      assertSame(components0, components4);
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.getType());
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      assertNull(apiResponse1.getDescription());
      assertNull(apiResponse1.get$ref());
      assertEquals(1, map1.size());
      assertFalse(map1.isEmpty());
      assertNull(link0.getDescription());
      assertNull(link0.getOperationRef());
      assertNull(link0.getOperationId());
      assertNull(link0.get$ref());
      assertFalse(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string9));
      assertFalse(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string14));
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string5));
      assertFalse(string11.equals((Object)string13));
      assertFalse(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string12));
      assertFalse(string11.equals((Object)string7));
      assertFalse(string11.equals((Object)string8));
      assertFalse(string12.equals((Object)string8));
      assertFalse(string12.equals((Object)string6));
      assertFalse(string12.equals((Object)string13));
      assertFalse(string12.equals((Object)string2));
      assertFalse(string12.equals((Object)string10));
      assertFalse(string12.equals((Object)string3));
      assertFalse(string12.equals((Object)string4));
      assertFalse(string12.equals((Object)string7));
      assertFalse(string12.equals((Object)string0));
      assertFalse(string12.equals((Object)string14));
      assertFalse(string12.equals((Object)string1));
      assertFalse(string12.equals((Object)string5));
      assertFalse(string12.equals((Object)string11));
      assertFalse(string12.equals((Object)string9));
      assertFalse(string13.equals((Object)string12));
      assertFalse(string13.equals((Object)string8));
      assertFalse(string13.equals((Object)string6));
      assertFalse(string13.equals((Object)string10));
      assertFalse(string13.equals((Object)string2));
      assertFalse(string13.equals((Object)string4));
      assertFalse(string13.equals((Object)string3));
      assertFalse(string13.equals((Object)string5));
      assertFalse(string13.equals((Object)string9));
      assertFalse(string13.equals((Object)string1));
      assertFalse(string13.equals((Object)string14));
      assertFalse(string13.equals((Object)string0));
      assertFalse(string13.equals((Object)string11));
      assertFalse(string13.equals((Object)string7));
      
      Components components5 = components3.responses(map1);
      assertNotNull(components5);
      assertSame(components0, components5);
      assertSame(components0, components1);
      assertSame(components0, components4);
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components1, components5);
      assertSame(components1, components4);
      assertSame(components1, components3);
      assertNotSame(string11, string9);
      assertNotSame(string11, string4);
      assertNotSame(string11, string3);
      assertNotSame(string11, string5);
      assertNotSame(string11, string12);
      assertNotSame(string11, string7);
      assertNotSame(string11, string2);
      assertNotSame(string11, string0);
      assertNotSame(string11, string14);
      assertNotSame(string11, string13);
      assertNotSame(string11, string10);
      assertSame(string11, string6);
      assertSame(string11, string1);
      assertNotSame(string11, string8);
      assertSame(components2, components1);
      assertSame(components2, components4);
      assertSame(components2, components5);
      assertSame(components2, components3);
      assertSame(components2, components0);
      assertNotSame(string12, string8);
      assertNotSame(string12, string6);
      assertNotSame(string12, string13);
      assertNotSame(string12, string2);
      assertNotSame(string12, string10);
      assertNotSame(string12, string3);
      assertNotSame(string12, string4);
      assertNotSame(string12, string7);
      assertNotSame(string12, string0);
      assertNotSame(string12, string14);
      assertNotSame(string12, string1);
      assertNotSame(string12, string5);
      assertNotSame(string12, string11);
      assertNotSame(string12, string9);
      assertSame(apiResponse0, apiResponse1);
      assertNotSame(string13, string12);
      assertNotSame(string13, string8);
      assertNotSame(string13, string6);
      assertNotSame(string13, string10);
      assertNotSame(string13, string2);
      assertNotSame(string13, string4);
      assertNotSame(string13, string3);
      assertNotSame(string13, string5);
      assertNotSame(string13, string9);
      assertNotSame(string13, string1);
      assertNotSame(string13, string14);
      assertNotSame(string13, string0);
      assertNotSame(string13, string11);
      assertNotSame(string13, string7);
      assertSame(apiResponse1, apiResponse0);
      assertSame(components3, components5);
      assertSame(components3, components1);
      assertSame(components3, components0);
      assertSame(components3, components4);
      assertSame(components3, components2);
      assertSame(components5, components3);
      assertSame(components5, components2);
      assertSame(components5, components0);
      assertSame(components5, components4);
      assertSame(components5, components1);
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.getType());
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      assertNull(apiResponse1.getDescription());
      assertNull(apiResponse1.get$ref());
      assertEquals(1, map1.size());
      assertFalse(map1.isEmpty());
      assertNull(link0.getDescription());
      assertNull(link0.getOperationRef());
      assertNull(link0.getOperationId());
      assertNull(link0.get$ref());
      assertFalse(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string9));
      assertFalse(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string14));
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string5));
      assertFalse(string11.equals((Object)string13));
      assertFalse(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string12));
      assertFalse(string11.equals((Object)string7));
      assertFalse(string11.equals((Object)string8));
      assertFalse(string12.equals((Object)string8));
      assertFalse(string12.equals((Object)string6));
      assertFalse(string12.equals((Object)string13));
      assertFalse(string12.equals((Object)string2));
      assertFalse(string12.equals((Object)string10));
      assertFalse(string12.equals((Object)string3));
      assertFalse(string12.equals((Object)string4));
      assertFalse(string12.equals((Object)string7));
      assertFalse(string12.equals((Object)string0));
      assertFalse(string12.equals((Object)string14));
      assertFalse(string12.equals((Object)string1));
      assertFalse(string12.equals((Object)string5));
      assertFalse(string12.equals((Object)string11));
      assertFalse(string12.equals((Object)string9));
      assertFalse(string13.equals((Object)string12));
      assertFalse(string13.equals((Object)string8));
      assertFalse(string13.equals((Object)string6));
      assertFalse(string13.equals((Object)string10));
      assertFalse(string13.equals((Object)string2));
      assertFalse(string13.equals((Object)string4));
      assertFalse(string13.equals((Object)string3));
      assertFalse(string13.equals((Object)string5));
      assertFalse(string13.equals((Object)string9));
      assertFalse(string13.equals((Object)string1));
      assertFalse(string13.equals((Object)string14));
      assertFalse(string13.equals((Object)string0));
      assertFalse(string13.equals((Object)string11));
      assertFalse(string13.equals((Object)string7));
      
      // Undeclared exception!
      try { 
        OperationParser.getParametersList(parameterArray0, components5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant io.swagger.oas.models.parameters.Parameter.StyleEnum.Y5HCEQ
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 11000)
  public void test069()  throws Throwable  {
      Server[] serverArray0 = new Server[1];
      String string0 = "";
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(server0).description();
      doReturn(string0).when(server0).url();
      serverArray0[0] = server0;
      Optional<List<io.swagger.oas.models.servers.Server>> optional0 = OperationParser.getServers(serverArray0);
      assertNotNull(optional0);
      assertEquals(1, serverArray0.length);
      
      Parameter[] parameterArray0 = new Parameter[1];
      boolean boolean0 = true;
      Content[] contentArray0 = new Content[7];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      contentArray0[3] = contentArray0[2];
      contentArray0[4] = contentArray0[3];
      contentArray0[5] = contentArray0[4];
      contentArray0[6] = contentArray0[5];
      String string1 = "";
      Explode explode0 = Explode.FALSE;
      Explode explode1 = Explode.TRUE;
      String string2 = "68z6\"uW^[rPtrp<IP{g";
      boolean boolean1 = false;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema0).implementation();
      String string3 = "";
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0, false).when(parameter0).allowEmptyValue();
      doReturn(boolean0, false).when(parameter0).allowReserved();
      doReturn(boolean0, false).when(parameter0).deprecated();
      doReturn(string1).when(parameter0).description();
      doReturn(explode0, explode0, explode1).when(parameter0).explode();
      doReturn(string0).when(parameter0).in();
      doReturn(string2, (String) null).when(parameter0).name();
      doReturn(boolean1).when(parameter0).required();
      doReturn(schema0, schema0, (Schema) null).when(parameter0).schema();
      doReturn(string3).when(parameter0).style();
      parameterArray0[0] = parameter0;
      Components components0 = null;
      // Undeclared exception!
      try { 
        OperationParser.getParametersList(parameterArray0, components0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test070()  throws Throwable  {
      License license0 = null;
      Optional<io.swagger.oas.models.info.License> optional0 = OperationParser.getLicense(license0);
      assertNotNull(optional0);
      
      Content[] contentArray0 = new Content[5];
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema0).implementation();
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn(schema0).when(content0).schema();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      contentArray0[3] = contentArray0[2];
      contentArray0[4] = contentArray0[3];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      assertNotNull(components0);
      
      // Undeclared exception!
      try { 
        OperationParser.getContent(contentArray0, produces0, produces0, components0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test071()  throws Throwable  {
      ApiResponse[] apiResponseArray0 = new ApiResponse[2];
      Content[] contentArray0 = new Content[9];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Schema) null).when(content0).schema();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      contentArray0[3] = contentArray0[2];
      contentArray0[4] = contentArray0[3];
      contentArray0[5] = contentArray0[4];
      contentArray0[6] = contentArray0[5];
      contentArray0[7] = contentArray0[6];
      contentArray0[8] = contentArray0[7];
      String string0 = null;
      ApiResponse apiResponse0 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn(contentArray0).when(apiResponse0).content();
      doReturn(string0).when(apiResponse0).description();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      assertNotNull(components0);
      
      HashMap<String, io.swagger.oas.models.parameters.Parameter> hashMap0 = new HashMap<String, io.swagger.oas.models.parameters.Parameter>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Components components1 = components0.parameters(hashMap0);
      assertNotNull(components1);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      String string1 = null;
      Example example0 = new Example();
      assertNotNull(example0);
      assertNull(example0.get$ref());
      assertNull(example0.getDescription());
      assertNull(example0.getExternalValue());
      assertNull(example0.getSummary());
      
      Example example1 = example0.externalValue(string1);
      assertNotNull(example1);
      assertSame(example0, example1);
      assertSame(example1, example0);
      assertNull(example0.get$ref());
      assertNull(example0.getDescription());
      assertNull(example0.getExternalValue());
      assertNull(example0.getSummary());
      assertNull(example1.getDescription());
      assertNull(example1.getSummary());
      assertNull(example1.getExternalValue());
      assertNull(example1.get$ref());
      
      Components components2 = components1.addExamples(string1, example1);
      assertNotNull(components2);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(example0, example1);
      assertSame(example1, example0);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(example0.get$ref());
      assertNull(example0.getDescription());
      assertNull(example0.getExternalValue());
      assertNull(example0.getSummary());
      assertNull(example1.getDescription());
      assertNull(example1.getSummary());
      assertNull(example1.getExternalValue());
      assertNull(example1.get$ref());
      
      io.swagger.oas.models.parameters.Parameter parameter0 = new io.swagger.oas.models.parameters.Parameter();
      assertNotNull(parameter0);
      assertNull(parameter0.getRequired());
      assertNull(parameter0.getAllowReserved());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.getName());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.get$ref());
      assertNull(parameter0.getExplode());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getIn());
      assertNull(parameter0.getExample());
      
      Components components3 = components2.addParameters(string1, parameter0);
      assertNotNull(components3);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(example0, example1);
      assertSame(example1, example0);
      assertSame(components2, components3);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertSame(components3, components1);
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(example0.get$ref());
      assertNull(example0.getDescription());
      assertNull(example0.getExternalValue());
      assertNull(example0.getSummary());
      assertNull(example1.getDescription());
      assertNull(example1.getSummary());
      assertNull(example1.getExternalValue());
      assertNull(example1.get$ref());
      assertNull(parameter0.getRequired());
      assertNull(parameter0.getAllowReserved());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.getName());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.get$ref());
      assertNull(parameter0.getExplode());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getIn());
      assertNull(parameter0.getExample());
      
      // Undeclared exception!
      try { 
        OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test072()  throws Throwable  {
      OperationParser operationParser0 = new OperationParser();
      assertNotNull(operationParser0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = operationParser0.COMPONENTS_REF;
      stringArray0[1] = operationParser0.RESPONSE_DEFAULT;
      stringArray0[2] = operationParser0.COMPONENTS_REF;
      stringArray0[3] = operationParser0.DEFAULT_DESCRIPTION;
      stringArray0[4] = operationParser0.DEFAULT_DESCRIPTION;
      stringArray0[5] = operationParser0.COMPONENTS_REF;
      stringArray0[6] = operationParser0.MEDIA_TYPE;
      stringArray0[7] = operationParser0.MEDIA_TYPE;
      stringArray0[8] = operationParser0.MEDIA_TYPE;
      Optional<Set<Tag>> optional0 = OperationParser.getTags(stringArray0);
      assertNotNull(optional0);
      assertEquals(9, stringArray0.length);
      
      Content[] contentArray0 = new Content[1];
      ExampleObject[] exampleObjectArray0 = new ExampleObject[5];
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(exampleObject0).name();
      exampleObjectArray0[0] = exampleObject0;
      exampleObjectArray0[1] = exampleObjectArray0[0];
      exampleObjectArray0[2] = exampleObjectArray0[1];
      exampleObjectArray0[3] = exampleObjectArray0[2];
      exampleObjectArray0[4] = exampleObjectArray0[3];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn(exampleObjectArray0).when(content0).examples();
      contentArray0[0] = content0;
      Components components0 = new Components();
      assertNotNull(components0);
      
      Map<String, Example> map0 = null;
      Components components1 = components0.examples(map0);
      assertNotNull(components1);
      assertSame(components0, components1);
      assertSame(components1, components0);
      
      io.swagger.oas.models.media.Schema<io.swagger.oas.models.ExternalDocumentation> schema0 = new io.swagger.oas.models.media.Schema<io.swagger.oas.models.ExternalDocumentation>();
      assertNotNull(schema0);
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getNullable());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getName());
      assertNull(schema0.getMinItems());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getType());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getTitle());
      assertNull(schema0.getFormat());
      assertNull(schema0.getPattern());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.get$ref());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getDescription());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getWriteOnly());
      
      Map<String, io.swagger.oas.models.media.Schema> map1 = (Map<String, io.swagger.oas.models.media.Schema>)schema0.getProperties();
      assertNull(map1);
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getNullable());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getName());
      assertNull(schema0.getMinItems());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getType());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getTitle());
      assertNull(schema0.getFormat());
      assertNull(schema0.getPattern());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.get$ref());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getDescription());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getWriteOnly());
      
      Components components2 = components1.schemas(map1);
      assertNotNull(components2);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getNullable());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getName());
      assertNull(schema0.getMinItems());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getType());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getTitle());
      assertNull(schema0.getFormat());
      assertNull(schema0.getPattern());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.get$ref());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getDescription());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getWriteOnly());
      
      Map<String, Callback> map2 = components1.getCallbacks();
      assertNull(map2);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components1, components2);
      assertSame(components1, components0);
      
      Components components3 = components2.callbacks(map2);
      assertNotNull(components3);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components2, components0);
      assertSame(components2, components3);
      assertSame(components2, components1);
      assertSame(components3, components1);
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getNullable());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getName());
      assertNull(schema0.getMinItems());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getType());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getTitle());
      assertNull(schema0.getFormat());
      assertNull(schema0.getPattern());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.get$ref());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getDescription());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getWriteOnly());
      
      SecurityScheme securityScheme0 = new SecurityScheme();
      assertNotNull(securityScheme0);
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getType());
      
      String string0 = "@\\2|hCwt}";
      SecurityScheme securityScheme1 = securityScheme0.$ref(string0);
      assertNotNull(securityScheme1);
      assertSame(securityScheme1, securityScheme0);
      assertSame(securityScheme0, securityScheme1);
      assertNull(securityScheme1.getIn());
      assertNull(securityScheme1.getOpenIdConnectUrl());
      assertNull(securityScheme1.getBearerFormat());
      assertNull(securityScheme1.getName());
      assertNull(securityScheme1.getScheme());
      assertEquals("@\\2|hCwt}", securityScheme1.get$ref());
      assertNull(securityScheme1.getDescription());
      assertNull(securityScheme1.getType());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.getBearerFormat());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.getDescription());
      assertEquals("@\\2|hCwt}", securityScheme0.get$ref());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getType());
      
      String string1 = "#fu>U,hGnFzER$Z~y";
      SecurityScheme securityScheme2 = securityScheme1.description(string1);
      assertNotNull(securityScheme2);
      assertSame(securityScheme1, securityScheme2);
      assertSame(securityScheme1, securityScheme0);
      assertNotSame(string1, string0);
      assertSame(securityScheme2, securityScheme1);
      assertSame(securityScheme2, securityScheme0);
      assertSame(securityScheme0, securityScheme1);
      assertSame(securityScheme0, securityScheme2);
      assertNotSame(string0, string1);
      assertNull(securityScheme1.getIn());
      assertEquals("#fu>U,hGnFzER$Z~y", securityScheme1.getDescription());
      assertNull(securityScheme1.getOpenIdConnectUrl());
      assertNull(securityScheme1.getBearerFormat());
      assertNull(securityScheme1.getName());
      assertNull(securityScheme1.getScheme());
      assertEquals("@\\2|hCwt}", securityScheme1.get$ref());
      assertNull(securityScheme1.getType());
      assertNull(securityScheme2.getName());
      assertNull(securityScheme2.getScheme());
      assertNull(securityScheme2.getType());
      assertEquals("#fu>U,hGnFzER$Z~y", securityScheme2.getDescription());
      assertNull(securityScheme2.getIn());
      assertNull(securityScheme2.getBearerFormat());
      assertEquals("@\\2|hCwt}", securityScheme2.get$ref());
      assertNull(securityScheme2.getOpenIdConnectUrl());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.getBearerFormat());
      assertEquals("#fu>U,hGnFzER$Z~y", securityScheme0.getDescription());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.getScheme());
      assertEquals("@\\2|hCwt}", securityScheme0.get$ref());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getType());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      
      Components components4 = components3.addSecuritySchemes(stringArray0[6], securityScheme2);
      assertNotNull(components4);
      assertEquals(9, stringArray0.length);
      assertSame(securityScheme1, securityScheme2);
      assertSame(securityScheme1, securityScheme0);
      assertNotSame(string1, string0);
      assertSame(securityScheme2, securityScheme1);
      assertSame(securityScheme2, securityScheme0);
      assertSame(components4, components3);
      assertSame(components4, components0);
      assertSame(components4, components1);
      assertSame(components4, components2);
      assertSame(components0, components4);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components1, components4);
      assertSame(components2, components4);
      assertSame(components2, components0);
      assertSame(components2, components3);
      assertSame(components2, components1);
      assertSame(components3, components1);
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertSame(components3, components4);
      assertSame(securityScheme0, securityScheme1);
      assertSame(securityScheme0, securityScheme2);
      assertNotSame(string0, string1);
      assertNull(securityScheme1.getIn());
      assertEquals("#fu>U,hGnFzER$Z~y", securityScheme1.getDescription());
      assertNull(securityScheme1.getOpenIdConnectUrl());
      assertNull(securityScheme1.getBearerFormat());
      assertNull(securityScheme1.getName());
      assertNull(securityScheme1.getScheme());
      assertEquals("@\\2|hCwt}", securityScheme1.get$ref());
      assertNull(securityScheme1.getType());
      assertNull(securityScheme2.getName());
      assertNull(securityScheme2.getScheme());
      assertNull(securityScheme2.getType());
      assertEquals("#fu>U,hGnFzER$Z~y", securityScheme2.getDescription());
      assertNull(securityScheme2.getIn());
      assertNull(securityScheme2.getBearerFormat());
      assertEquals("@\\2|hCwt}", securityScheme2.get$ref());
      assertNull(securityScheme2.getOpenIdConnectUrl());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getNullable());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getName());
      assertNull(schema0.getMinItems());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getType());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getTitle());
      assertNull(schema0.getFormat());
      assertNull(schema0.getPattern());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.get$ref());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getDescription());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getWriteOnly());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.getBearerFormat());
      assertEquals("#fu>U,hGnFzER$Z~y", securityScheme0.getDescription());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.getScheme());
      assertEquals("@\\2|hCwt}", securityScheme0.get$ref());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getType());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      
      Optional<io.swagger.oas.models.media.Content> optional1 = OperationParser.getContents(contentArray0, components4);
      assertNotNull(optional1);
      assertEquals(9, stringArray0.length);
      assertEquals(1, contentArray0.length);
      assertSame(securityScheme1, securityScheme2);
      assertSame(securityScheme1, securityScheme0);
      assertNotSame(string1, string0);
      assertSame(securityScheme2, securityScheme1);
      assertSame(securityScheme2, securityScheme0);
      assertSame(components4, components3);
      assertSame(components4, components0);
      assertSame(components4, components1);
      assertSame(components4, components2);
      assertSame(components0, components4);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components1, components4);
      assertSame(components2, components4);
      assertSame(components2, components0);
      assertSame(components2, components3);
      assertSame(components2, components1);
      assertSame(components3, components1);
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertSame(components3, components4);
      assertSame(securityScheme0, securityScheme1);
      assertSame(securityScheme0, securityScheme2);
      assertNotSame(string0, string1);
      assertNull(securityScheme1.getIn());
      assertEquals("#fu>U,hGnFzER$Z~y", securityScheme1.getDescription());
      assertNull(securityScheme1.getOpenIdConnectUrl());
      assertNull(securityScheme1.getBearerFormat());
      assertNull(securityScheme1.getName());
      assertNull(securityScheme1.getScheme());
      assertEquals("@\\2|hCwt}", securityScheme1.get$ref());
      assertNull(securityScheme1.getType());
      assertNull(securityScheme2.getName());
      assertNull(securityScheme2.getScheme());
      assertNull(securityScheme2.getType());
      assertEquals("#fu>U,hGnFzER$Z~y", securityScheme2.getDescription());
      assertNull(securityScheme2.getIn());
      assertNull(securityScheme2.getBearerFormat());
      assertEquals("@\\2|hCwt}", securityScheme2.get$ref());
      assertNull(securityScheme2.getOpenIdConnectUrl());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getNullable());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getName());
      assertNull(schema0.getMinItems());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getType());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getTitle());
      assertNull(schema0.getFormat());
      assertNull(schema0.getPattern());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.get$ref());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getDescription());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getWriteOnly());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.getBearerFormat());
      assertEquals("#fu>U,hGnFzER$Z~y", securityScheme0.getDescription());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.getScheme());
      assertEquals("@\\2|hCwt}", securityScheme0.get$ref());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.getType());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
  }

  @Test(timeout = 11000)
  public void test073()  throws Throwable  {
      ApiResponse[] apiResponseArray0 = new ApiResponse[5];
      Content[] contentArray0 = new Content[3];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Schema) null).when(content0).schema();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      String string0 = "ydp!K%Vn6lQ?2T";
      String string1 = "4IlbO _?~Ki/";
      ApiResponse apiResponse0 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn(contentArray0).when(apiResponse0).content();
      doReturn(string0, string0).when(apiResponse0).description();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      apiResponseArray0[3] = apiResponseArray0[2];
      apiResponseArray0[4] = apiResponseArray0[3];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      assertNotNull(components0);
      
      Encoding encoding0 = new Encoding();
      assertNotNull(encoding0);
      assertNull(encoding0.getStyle());
      assertNull(encoding0.getExplode());
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getAllowReserved());
      
      Map<String, Header> map0 = encoding0.getHeaders();
      assertNull(map0);
      assertNull(encoding0.getStyle());
      assertNull(encoding0.getExplode());
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getAllowReserved());
      
      Components components1 = components0.headers(map0);
      assertNotNull(components1);
      assertSame(components1, components0);
      assertSame(components0, components1);
      assertNull(encoding0.getStyle());
      assertNull(encoding0.getExplode());
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getAllowReserved());
      
      HashMap<String, Callback> hashMap0 = new HashMap<String, Callback>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Components components2 = components1.callbacks(hashMap0);
      assertNotNull(components2);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertNull(encoding0.getStyle());
      assertNull(encoding0.getExplode());
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getAllowReserved());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[9];
      String string2 = "S&d{fF^0nX!F";
      String string3 = "";
      String string4 = "|qt#/";
      String string5 = "&W/v-$R{*N|72WrO1";
      String string6 = "4";
      io.swagger.oas.annotations.links.Link link0 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string2, string2, string2, string0).when(link0).description();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).name();
      doReturn(string3, string0, string0, string3, string4).when(link0).operationId();
      doReturn(string4, string5, string6, string0, string1).when(link0).operationRef();
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(link0).parameters();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      linkArray0[3] = linkArray0[2];
      linkArray0[4] = linkArray0[3];
      linkArray0[5] = linkArray0[4];
      linkArray0[6] = linkArray0[5];
      linkArray0[7] = linkArray0[6];
      linkArray0[8] = linkArray0[7];
      Map<String, Link> map1 = OperationParser.getLinks(linkArray0);
      assertNotNull(map1);
      assertEquals(9, linkArray0.length);
      assertEquals(1, map1.size());
      assertFalse(map1.isEmpty());
      
      Components components3 = components2.links(map1);
      assertNotNull(components3);
      assertEquals(9, linkArray0.length);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components2, components3);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertSame(components3, components1);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertNull(encoding0.getStyle());
      assertNull(encoding0.getExplode());
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getAllowReserved());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(1, map1.size());
      assertFalse(map1.isEmpty());
      
      String string7 = "6A|XArY";
      io.swagger.oas.models.responses.ApiResponse apiResponse1 = null;
      Components components4 = components3.addResponses(string7, apiResponse1);
      assertNotNull(components4);
      assertEquals(9, linkArray0.length);
      assertSame(components1, components4);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components2, components3);
      assertSame(components2, components0);
      assertSame(components2, components4);
      assertSame(components2, components1);
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertSame(components3, components1);
      assertSame(components3, components4);
      assertNotSame(string7, string4);
      assertNotSame(string7, string2);
      assertNotSame(string7, string0);
      assertNotSame(string7, string3);
      assertNotSame(string7, string1);
      assertNotSame(string7, string5);
      assertNotSame(string7, string6);
      assertSame(components4, components2);
      assertSame(components4, components3);
      assertSame(components4, components0);
      assertSame(components4, components1);
      assertSame(components0, components3);
      assertSame(components0, components4);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertNull(encoding0.getStyle());
      assertNull(encoding0.getExplode());
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getAllowReserved());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(1, map1.size());
      assertFalse(map1.isEmpty());
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      
      // Undeclared exception!
      try { 
        OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test074()  throws Throwable  {
      String string0 = null;
      String string1 = "OY|";
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(externalDocumentation0).description();
      doReturn(string1, (String) null).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional0 = OperationParser.getExternalDocumentation(externalDocumentation0);
      assertNotNull(optional0);
      
      MediaType mediaType0 = new MediaType();
      assertNotNull(mediaType0);
      assertNull(mediaType0.getExample());
      
      String string2 = "No FormatFeatures defined for parser of type ";
      io.swagger.oas.models.media.Schema<io.swagger.oas.models.info.Contact> schema0 = new io.swagger.oas.models.media.Schema<io.swagger.oas.models.info.Contact>();
      assertNotNull(schema0);
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getMinItems());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getNullable());
      assertNull(schema0.get$ref());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getTitle());
      assertNull(schema0.getDescription());
      assertNull(schema0.getType());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getFormat());
      assertNull(schema0.getName());
      assertNull(schema0.getPattern());
      
      HashMap<String, Encoding> hashMap0 = new HashMap<String, Encoding>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      io.swagger.oas.annotations.parameters.RequestBody requestBody0 = mock(io.swagger.oas.annotations.parameters.RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(requestBody0).description();
      doReturn(false).when(requestBody0).required();
      Components components0 = new Components();
      assertNotNull(components0);
      
      Map<String, io.swagger.oas.models.media.Schema> map0 = (Map<String, io.swagger.oas.models.media.Schema>)components0.getSchemas();
      assertNull(map0);
      
      String string3 = components0.toString();
      assertNotNull(string3);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("class Components {\n    schemas: null\n    responses: null\n    parameters: null\n    examples: null\n    requestBodies: null\n    headers: null\n    securitySchemes: null\n    links: null\n    callbacks: null\n}", string3);
      
      Components components1 = components0.schemas(map0);
      assertNotNull(components1);
      assertSame(components0, components1);
      assertSame(components1, components0);
      
      io.swagger.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.oas.models.responses.ApiResponse();
      assertNotNull(apiResponse0);
      assertNull(apiResponse0.get$ref());
      assertNull(apiResponse0.getDescription());
      
      Components components2 = components1.addResponses(string2, apiResponse0);
      assertNotNull(components2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertNull(apiResponse0.get$ref());
      assertNull(apiResponse0.getDescription());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      
      Link link0 = new Link();
      assertNotNull(link0);
      assertNull(link0.getOperationId());
      assertNull(link0.getOperationRef());
      assertNull(link0.get$ref());
      assertNull(link0.getDescription());
      
      Map<String, Header> map1 = link0.getHeaders();
      assertNull(map1);
      assertNull(link0.getOperationId());
      assertNull(link0.getOperationRef());
      assertNull(link0.get$ref());
      assertNull(link0.getDescription());
      
      Components components3 = components2.headers(map1);
      assertNotNull(components3);
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertSame(components3, components1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components1, components3);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertNull(link0.getOperationId());
      assertNull(link0.getOperationRef());
      assertNull(link0.get$ref());
      assertNull(link0.getDescription());
      assertNull(apiResponse0.get$ref());
      assertNull(apiResponse0.getDescription());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      
      Map<String, Example> map2 = components0.getExamples();
      assertNull(map2);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertSame(components0, components2);
      
      Components components4 = components3.examples(map2);
      assertNotNull(components4);
      assertSame(components3, components4);
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertSame(components3, components1);
      assertSame(components4, components0);
      assertSame(components4, components2);
      assertSame(components4, components1);
      assertSame(components4, components3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components0, components4);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components1, components3);
      assertSame(components1, components4);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(components2, components4);
      assertNull(link0.getOperationId());
      assertNull(link0.getOperationRef());
      assertNull(link0.get$ref());
      assertNull(link0.getDescription());
      assertNull(apiResponse0.get$ref());
      assertNull(apiResponse0.getDescription());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      
      Optional<RequestBody> optional1 = OperationParser.getRequestBody(requestBody0, components4);
      assertNotNull(optional1);
      assertSame(components3, components4);
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertSame(components3, components1);
      assertSame(components4, components0);
      assertSame(components4, components2);
      assertSame(components4, components1);
      assertSame(components4, components3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components0, components4);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components1, components3);
      assertSame(components1, components4);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(components2, components4);
      assertNull(link0.getOperationId());
      assertNull(link0.getOperationRef());
      assertNull(link0.get$ref());
      assertNull(link0.getDescription());
      assertNull(apiResponse0.get$ref());
      assertNull(apiResponse0.getDescription());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
  }

  @Test(timeout = 11000)
  public void test075()  throws Throwable  {
      io.swagger.oas.annotations.links.Link link0 = null;
      Optional<Link> optional0 = OperationParser.getLink(link0);
      assertNotNull(optional0);
      
      OperationParser operationParser0 = new OperationParser();
      assertNotNull(operationParser0);
      
      MediaType mediaType0 = null;
      String string0 = "[7";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exampleObject0).externalValue();
      doReturn(string0, (String) null, (String) null).when(exampleObject0).name();
      doReturn((String) null).when(exampleObject0).summary();
      doReturn((String) null).when(exampleObject0).value();
      // Undeclared exception!
      try { 
        OperationParser.getMediaType(mediaType0, exampleObject0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test076()  throws Throwable  {
      OperationParser operationParser0 = new OperationParser();
      assertNotNull(operationParser0);
      
      ApiResponse[] apiResponseArray0 = new ApiResponse[1];
      Content[] contentArray0 = null;
      String string0 = "!qbiz_Nqi";
      ApiResponse apiResponse0 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn(contentArray0).when(apiResponse0).content();
      doReturn(string0, (String) null).when(apiResponse0).description();
      apiResponseArray0[0] = apiResponse0;
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      assertNotNull(components0);
      
      MediaType mediaType0 = new MediaType();
      assertNotNull(mediaType0);
      assertNull(mediaType0.getExample());
      
      Map<String, Example> map0 = mediaType0.getExamples();
      assertNull(map0);
      assertNull(mediaType0.getExample());
      
      Components components1 = components0.examples(map0);
      assertNotNull(components1);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertNull(mediaType0.getExample());
      
      MediaType mediaType1 = mediaType0.examples(map0);
      assertNotNull(mediaType1);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType1, mediaType0);
      assertNull(mediaType0.getExample());
      assertNull(mediaType1.getExample());
      
      Map<String, SecurityScheme> map1 = components1.getSecuritySchemes();
      assertNull(map1);
      assertSame(components0, components1);
      assertSame(mediaType0, mediaType1);
      assertSame(components1, components0);
      assertNull(mediaType0.getExample());
      
      Components components2 = new Components();
      assertNotNull(components2);
      assertTrue(components2.equals((Object)components0));
      assertTrue(components2.equals((Object)components1));
      
      Map<String, RequestBody> map2 = components2.getRequestBodies();
      assertNull(map2);
      assertNotSame(components2, components0);
      assertNotSame(components2, components1);
      assertTrue(components2.equals((Object)components0));
      assertTrue(components2.equals((Object)components1));
      
      String string1 = "c;^m8Bu%v,S4<i";
      Example example0 = null;
      MediaType mediaType2 = mediaType0.addExamples(string1, example0);
      assertNotNull(mediaType2);
      assertSame(mediaType2, mediaType0);
      assertSame(mediaType2, mediaType1);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType0, mediaType2);
      assertNotSame(string1, string0);
      assertNull(mediaType2.getExample());
      assertNull(mediaType0.getExample());
      assertFalse(string1.equals((Object)string0));
      
      Components components3 = components1.requestBodies(map2);
      assertNotNull(components3);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertNotSame(components3, components2);
      assertSame(components0, components1);
      assertNotSame(components0, components2);
      assertSame(components0, components3);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType0, mediaType2);
      assertSame(components1, components3);
      assertSame(components1, components0);
      assertNotSame(components1, components2);
      assertNotSame(components2, components0);
      assertNotSame(components2, components1);
      assertNotSame(components2, components3);
      assertNull(mediaType0.getExample());
      assertTrue(components3.equals((Object)components2));
      assertTrue(components0.equals((Object)components2));
      assertTrue(components1.equals((Object)components2));
      assertTrue(components2.equals((Object)components0));
      assertTrue(components2.equals((Object)components1));
      
      Optional<ApiResponses> optional0 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components1);
      assertNotNull(optional0);
      assertEquals(1, apiResponseArray0.length);
      assertSame(components0, components1);
      assertNotSame(components0, components2);
      assertSame(components0, components3);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType0, mediaType2);
      assertSame(components1, components3);
      assertSame(components1, components0);
      assertNotSame(components1, components2);
      assertNull(mediaType0.getExample());
      assertTrue(components0.equals((Object)components2));
      assertTrue(components1.equals((Object)components2));
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = operationParser0.DEFAULT_DESCRIPTION;
      Optional<Set<Tag>> optional1 = OperationParser.getTags(stringArray0);
      assertNotNull(optional1);
      assertEquals(1, stringArray0.length);
      
      Parameter parameter0 = null;
      Optional<io.swagger.oas.models.parameters.Parameter> optional2 = OperationParser.getParameter(parameter0, components0);
      assertNotNull(optional2);
      assertSame(components0, components1);
      assertNotSame(components0, components2);
      assertSame(components0, components3);
      assertTrue(components0.equals((Object)components2));
      
      String string2 = "e^x^;.J_DX$?jSk]";
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string2, (String) null).when(server0).description();
      doReturn(operationParser0.RESPONSE_DEFAULT, (String) null).when(server0).url();
      doReturn((ServerVariable[]) null).when(server0).variables();
      // Undeclared exception!
      try { 
        OperationParser.getServer(server0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test077()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = false;
      io.swagger.oas.annotations.parameters.RequestBody requestBody0 = mock(io.swagger.oas.annotations.parameters.RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(requestBody0).description();
      doReturn(boolean0).when(requestBody0).required();
      Components components0 = new Components();
      assertNotNull(components0);
      
      io.swagger.oas.models.media.Schema<io.swagger.oas.models.ExternalDocumentation> schema0 = new io.swagger.oas.models.media.Schema<io.swagger.oas.models.ExternalDocumentation>();
      assertNotNull(schema0);
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getType());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getDescription());
      assertNull(schema0.get$ref());
      assertNull(schema0.getTitle());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getNullable());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getPattern());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getFormat());
      assertNull(schema0.getName());
      assertNull(schema0.getMinItems());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getExclusiveMinimum());
      
      Map<String, io.swagger.oas.models.media.Schema> map0 = (Map<String, io.swagger.oas.models.media.Schema>)schema0.getProperties();
      assertNull(map0);
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getType());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getDescription());
      assertNull(schema0.get$ref());
      assertNull(schema0.getTitle());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getNullable());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getPattern());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getFormat());
      assertNull(schema0.getName());
      assertNull(schema0.getMinItems());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getExclusiveMinimum());
      
      Components components1 = components0.schemas(map0);
      assertNotNull(components1);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getType());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getDescription());
      assertNull(schema0.get$ref());
      assertNull(schema0.getTitle());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getNullable());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getPattern());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getFormat());
      assertNull(schema0.getName());
      assertNull(schema0.getMinItems());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getExclusiveMinimum());
      
      String string1 = "    summary: ";
      SecurityScheme securityScheme0 = null;
      Components components2 = components1.addSecuritySchemes(string1, securityScheme0);
      assertNotNull(components2);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertNotSame(string1, string0);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getType());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getDescription());
      assertNull(schema0.get$ref());
      assertNull(schema0.getTitle());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getNullable());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getPattern());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getFormat());
      assertNull(schema0.getName());
      assertNull(schema0.getMinItems());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getExclusiveMinimum());
      assertFalse(string1.equals((Object)string0));
      
      Map<String, RequestBody> map1 = components1.getRequestBodies();
      assertNull(map1);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getType());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getDescription());
      assertNull(schema0.get$ref());
      assertNull(schema0.getTitle());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getNullable());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getPattern());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getFormat());
      assertNull(schema0.getName());
      assertNull(schema0.getMinItems());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getExclusiveMinimum());
      
      Components components3 = components2.requestBodies(map1);
      assertNotNull(components3);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertNotSame(string1, string0);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertSame(components3, components2);
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getType());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getDescription());
      assertNull(schema0.get$ref());
      assertNull(schema0.getTitle());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getNullable());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getPattern());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getFormat());
      assertNull(schema0.getName());
      assertNull(schema0.getMinItems());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getExclusiveMinimum());
      assertFalse(string1.equals((Object)string0));
      
      String string2 = "\"";
      io.swagger.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.oas.models.responses.ApiResponse();
      assertNotNull(apiResponse0);
      assertNull(apiResponse0.get$ref());
      assertNull(apiResponse0.getDescription());
      
      String string3 = " (version: ";
      io.swagger.oas.models.info.Info info0 = new io.swagger.oas.models.info.Info();
      assertNotNull(info0);
      assertNull(info0.getDescription());
      assertNull(info0.getTermsOfService());
      assertNull(info0.getTitle());
      assertNull(info0.getVersion());
      
      io.swagger.oas.models.info.Info info1 = info0.description(string2);
      assertNotNull(info1);
      assertSame(info1, info0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertSame(info0, info1);
      assertEquals("\"", info1.getDescription());
      assertNull(info1.getTitle());
      assertNull(info1.getTermsOfService());
      assertNull(info1.getVersion());
      assertEquals("\"", info0.getDescription());
      assertNull(info0.getTermsOfService());
      assertNull(info0.getTitle());
      assertNull(info0.getVersion());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      
      String string4 = "";
      io.swagger.oas.models.info.Info info2 = info1.termsOfService(string4);
      assertNotNull(info2);
      assertSame(info1, info0);
      assertSame(info1, info2);
      assertNotSame(string4, string2);
      assertSame(string4, string0);
      assertNotSame(string4, string1);
      assertNotSame(string4, string3);
      assertSame(info2, info0);
      assertSame(info2, info1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string4);
      assertNotSame(string2, string3);
      assertSame(info0, info1);
      assertSame(info0, info2);
      assertEquals("\"", info1.getDescription());
      assertNull(info1.getTitle());
      assertEquals("", info1.getTermsOfService());
      assertNull(info1.getVersion());
      assertEquals("", info2.getTermsOfService());
      assertNull(info2.getVersion());
      assertEquals("\"", info2.getDescription());
      assertNull(info2.getTitle());
      assertEquals("\"", info0.getDescription());
      assertEquals("", info0.getTermsOfService());
      assertNull(info0.getTitle());
      assertNull(info0.getVersion());
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string3));
      
      io.swagger.oas.models.info.Info info3 = info2.version(string2);
      assertNotNull(info3);
      assertSame(info1, info0);
      assertSame(info1, info3);
      assertSame(info1, info2);
      assertNotSame(string4, string2);
      assertSame(string4, string0);
      assertNotSame(string4, string1);
      assertNotSame(string4, string3);
      assertSame(info2, info3);
      assertSame(info2, info0);
      assertSame(info2, info1);
      assertSame(info3, info1);
      assertSame(info3, info2);
      assertSame(info3, info0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string4);
      assertNotSame(string2, string3);
      assertSame(info0, info1);
      assertSame(info0, info3);
      assertSame(info0, info2);
      assertEquals("\"", info1.getDescription());
      assertNull(info1.getTitle());
      assertEquals("", info1.getTermsOfService());
      assertEquals("\"", info1.getVersion());
      assertEquals("", info2.getTermsOfService());
      assertEquals("\"", info2.getVersion());
      assertEquals("\"", info2.getDescription());
      assertNull(info2.getTitle());
      assertEquals("\"", info3.getDescription());
      assertEquals("\"", info3.getVersion());
      assertEquals("", info3.getTermsOfService());
      assertNull(info3.getTitle());
      assertEquals("\"", info0.getDescription());
      assertEquals("", info0.getTermsOfService());
      assertNull(info0.getTitle());
      assertEquals("\"", info0.getVersion());
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string3));
      
      String string5 = "default";
      io.swagger.oas.models.info.Info info4 = info3.title(string5);
      assertNotNull(info4);
      assertSame(info1, info0);
      assertSame(info1, info3);
      assertSame(info1, info2);
      assertSame(info1, info4);
      assertNotSame(string4, string5);
      assertNotSame(string4, string2);
      assertSame(string4, string0);
      assertNotSame(string4, string1);
      assertNotSame(string4, string3);
      assertSame(info2, info4);
      assertSame(info2, info3);
      assertSame(info2, info0);
      assertSame(info2, info1);
      assertSame(info3, info1);
      assertSame(info3, info4);
      assertSame(info3, info2);
      assertSame(info3, info0);
      assertNotSame(string5, string3);
      assertNotSame(string5, string4);
      assertNotSame(string5, string2);
      assertNotSame(string5, string1);
      assertNotSame(string5, string0);
      assertSame(info4, info0);
      assertSame(info4, info3);
      assertSame(info4, info1);
      assertSame(info4, info2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string4);
      assertNotSame(string2, string3);
      assertNotSame(string2, string5);
      assertSame(info0, info1);
      assertSame(info0, info4);
      assertSame(info0, info3);
      assertSame(info0, info2);
      assertEquals("\"", info1.getDescription());
      assertEquals("", info1.getTermsOfService());
      assertEquals("default", info1.getTitle());
      assertEquals("\"", info1.getVersion());
      assertEquals("", info2.getTermsOfService());
      assertEquals("default", info2.getTitle());
      assertEquals("\"", info2.getVersion());
      assertEquals("\"", info2.getDescription());
      assertEquals("\"", info3.getDescription());
      assertEquals("\"", info3.getVersion());
      assertEquals("", info3.getTermsOfService());
      assertEquals("default", info3.getTitle());
      assertEquals("\"", info4.getVersion());
      assertEquals("\"", info4.getDescription());
      assertEquals("default", info4.getTitle());
      assertEquals("", info4.getTermsOfService());
      assertEquals("\"", info0.getDescription());
      assertEquals("default", info0.getTitle());
      assertEquals("", info0.getTermsOfService());
      assertEquals("\"", info0.getVersion());
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string5));
      
      boolean boolean1 = apiResponse0.equals(info4);
      assertSame(info1, info0);
      assertSame(info1, info3);
      assertSame(info1, info2);
      assertSame(info1, info4);
      assertNotSame(string4, string5);
      assertNotSame(string4, string2);
      assertSame(string4, string0);
      assertNotSame(string4, string1);
      assertNotSame(string4, string3);
      assertSame(info2, info4);
      assertSame(info2, info3);
      assertSame(info2, info0);
      assertSame(info2, info1);
      assertSame(info3, info1);
      assertSame(info3, info4);
      assertSame(info3, info2);
      assertSame(info3, info0);
      assertNotSame(string5, string3);
      assertNotSame(string5, string4);
      assertNotSame(string5, string2);
      assertNotSame(string5, string1);
      assertNotSame(string5, string0);
      assertSame(info4, info0);
      assertSame(info4, info3);
      assertSame(info4, info1);
      assertSame(info4, info2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string4);
      assertNotSame(string2, string3);
      assertNotSame(string2, string5);
      assertSame(info0, info1);
      assertSame(info0, info4);
      assertSame(info0, info3);
      assertSame(info0, info2);
      assertEquals("\"", info1.getDescription());
      assertEquals("", info1.getTermsOfService());
      assertEquals("default", info1.getTitle());
      assertEquals("\"", info1.getVersion());
      assertEquals("", info2.getTermsOfService());
      assertEquals("default", info2.getTitle());
      assertEquals("\"", info2.getVersion());
      assertEquals("\"", info2.getDescription());
      assertEquals("\"", info3.getDescription());
      assertEquals("\"", info3.getVersion());
      assertEquals("", info3.getTermsOfService());
      assertEquals("default", info3.getTitle());
      assertEquals("\"", info4.getVersion());
      assertEquals("\"", info4.getDescription());
      assertEquals("default", info4.getTitle());
      assertEquals("", info4.getTermsOfService());
      assertNull(apiResponse0.get$ref());
      assertNull(apiResponse0.getDescription());
      assertEquals("\"", info0.getDescription());
      assertEquals("default", info0.getTitle());
      assertEquals("", info0.getTermsOfService());
      assertEquals("\"", info0.getVersion());
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertTrue(boolean1 == boolean0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string5));
      assertFalse(boolean1);
      
      io.swagger.oas.models.responses.ApiResponse apiResponse1 = apiResponse0.$ref(string3);
      assertNotNull(apiResponse1);
      assertSame(apiResponse1, apiResponse0);
      assertSame(apiResponse0, apiResponse1);
      assertNotSame(string3, string5);
      assertNotSame(string3, string0);
      assertNotSame(string3, string4);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertEquals(" (version: ", apiResponse1.get$ref());
      assertNull(apiResponse1.getDescription());
      assertEquals(" (version: ", apiResponse0.get$ref());
      assertNull(apiResponse0.getDescription());
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      Encoding encoding0 = new Encoding();
      assertNotNull(encoding0);
      assertNull(encoding0.getStyle());
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getAllowReserved());
      assertNull(encoding0.getExplode());
      
      Map<String, Header> map2 = encoding0.getHeaders();
      assertNull(map2);
      assertNull(encoding0.getStyle());
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getAllowReserved());
      assertNull(encoding0.getExplode());
      
      io.swagger.oas.models.responses.ApiResponse apiResponse2 = apiResponse1.headers(map2);
      assertNotNull(apiResponse2);
      assertSame(apiResponse1, apiResponse0);
      assertSame(apiResponse1, apiResponse2);
      assertSame(apiResponse2, apiResponse1);
      assertSame(apiResponse2, apiResponse0);
      assertSame(apiResponse0, apiResponse1);
      assertSame(apiResponse0, apiResponse2);
      assertNotSame(string3, string5);
      assertNotSame(string3, string0);
      assertNotSame(string3, string4);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertEquals(" (version: ", apiResponse1.get$ref());
      assertNull(apiResponse1.getDescription());
      assertNull(encoding0.getStyle());
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getAllowReserved());
      assertNull(encoding0.getExplode());
      assertNull(apiResponse2.getDescription());
      assertEquals(" (version: ", apiResponse2.get$ref());
      assertEquals(" (version: ", apiResponse0.get$ref());
      assertNull(apiResponse0.getDescription());
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      Components components4 = components3.addResponses(string2, apiResponse2);
      assertNotNull(components4);
      assertSame(components0, components1);
      assertSame(components0, components4);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components1, components4);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertNotSame(string1, string2);
      assertNotSame(string1, string4);
      assertNotSame(string1, string5);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components2, components4);
      assertSame(components2, components3);
      assertSame(components3, components0);
      assertSame(components3, components4);
      assertSame(components3, components1);
      assertSame(components3, components2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string4);
      assertNotSame(string2, string3);
      assertNotSame(string2, string5);
      assertSame(apiResponse0, apiResponse1);
      assertSame(apiResponse0, apiResponse2);
      assertNotSame(string3, string5);
      assertNotSame(string3, string0);
      assertNotSame(string3, string4);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertSame(apiResponse1, apiResponse0);
      assertSame(apiResponse1, apiResponse2);
      assertSame(apiResponse2, apiResponse1);
      assertSame(apiResponse2, apiResponse0);
      assertSame(components4, components2);
      assertSame(components4, components1);
      assertSame(components4, components0);
      assertSame(components4, components3);
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getType());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getDescription());
      assertNull(schema0.get$ref());
      assertNull(schema0.getTitle());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getNullable());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getPattern());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getFormat());
      assertNull(schema0.getName());
      assertNull(schema0.getMinItems());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getExclusiveMinimum());
      assertEquals(" (version: ", apiResponse0.get$ref());
      assertNull(apiResponse0.getDescription());
      assertEquals(" (version: ", apiResponse1.get$ref());
      assertNull(apiResponse1.getDescription());
      assertNull(encoding0.getStyle());
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getAllowReserved());
      assertNull(encoding0.getExplode());
      assertNull(apiResponse2.getDescription());
      assertEquals(" (version: ", apiResponse2.get$ref());
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      Optional<RequestBody> optional0 = OperationParser.getRequestBody(requestBody0, components4);
      assertNotNull(optional0);
      assertNotSame(string0, string1);
      assertSame(string0, string4);
      assertNotSame(string0, string2);
      assertNotSame(string0, string5);
      assertNotSame(string0, string3);
      assertSame(components0, components1);
      assertSame(components0, components4);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components1, components4);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertNotSame(string1, string2);
      assertNotSame(string1, string4);
      assertNotSame(string1, string5);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components2, components4);
      assertSame(components2, components3);
      assertSame(components3, components0);
      assertSame(components3, components4);
      assertSame(components3, components1);
      assertSame(components3, components2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string4);
      assertNotSame(string2, string3);
      assertNotSame(string2, string5);
      assertSame(apiResponse0, apiResponse1);
      assertSame(apiResponse0, apiResponse2);
      assertNotSame(string3, string5);
      assertNotSame(string3, string0);
      assertNotSame(string3, string4);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertSame(apiResponse1, apiResponse0);
      assertSame(apiResponse1, apiResponse2);
      assertSame(apiResponse2, apiResponse1);
      assertSame(apiResponse2, apiResponse0);
      assertSame(components4, components2);
      assertSame(components4, components1);
      assertSame(components4, components0);
      assertSame(components4, components3);
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getType());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getDescription());
      assertNull(schema0.get$ref());
      assertNull(schema0.getTitle());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getNullable());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getPattern());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getFormat());
      assertNull(schema0.getName());
      assertNull(schema0.getMinItems());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getExclusiveMinimum());
      assertEquals(" (version: ", apiResponse0.get$ref());
      assertNull(apiResponse0.getDescription());
      assertEquals(" (version: ", apiResponse1.get$ref());
      assertNull(apiResponse1.getDescription());
      assertNull(encoding0.getStyle());
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getAllowReserved());
      assertNull(encoding0.getExplode());
      assertNull(apiResponse2.getDescription());
      assertEquals(" (version: ", apiResponse2.get$ref());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string3));
      assertTrue(boolean0 == boolean1);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      String string6 = "*/*";
      boolean boolean2 = true;
      io.swagger.oas.annotations.parameters.RequestBody requestBody1 = mock(io.swagger.oas.annotations.parameters.RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn((Content[]) null).when(requestBody1).content();
      doReturn(string6, (String) null).when(requestBody1).description();
      doReturn(boolean2, false).when(requestBody1).required();
      Optional<RequestBody> optional1 = OperationParser.getRequestBody(requestBody1, components1);
      assertNotNull(optional1);
      assertNotSame(optional1, optional0);
      assertSame(components0, components1);
      assertSame(components0, components4);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components1, components4);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertNotSame(string6, string4);
      assertNotSame(string6, string2);
      assertNotSame(string6, string0);
      assertNotSame(string6, string1);
      assertNotSame(string6, string3);
      assertNotSame(string6, string5);
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getType());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getDescription());
      assertNull(schema0.get$ref());
      assertNull(schema0.getTitle());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getNullable());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getPattern());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getFormat());
      assertNull(schema0.getName());
      assertNull(schema0.getMinItems());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getExclusiveMinimum());
      assertFalse(optional1.equals((Object)optional0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      Parameter[] parameterArray0 = new Parameter[0];
      Optional<List<io.swagger.oas.models.parameters.Parameter>> optional2 = OperationParser.getParametersList(parameterArray0, components3);
      assertNotNull(optional2);
      assertEquals(0, parameterArray0.length);
      assertSame(components0, components1);
      assertSame(components0, components4);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components1, components4);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertNotSame(string1, string2);
      assertNotSame(string1, string4);
      assertNotSame(string1, string5);
      assertNotSame(string1, string3);
      assertNotSame(string1, string6);
      assertNotSame(string1, string0);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components2, components4);
      assertSame(components2, components3);
      assertSame(components3, components0);
      assertSame(components3, components4);
      assertSame(components3, components1);
      assertSame(components3, components2);
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getType());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getDescription());
      assertNull(schema0.get$ref());
      assertNull(schema0.getTitle());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getNullable());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getPattern());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getFormat());
      assertNull(schema0.getName());
      assertNull(schema0.getMinItems());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getExclusiveMinimum());
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string0));
      
      String string7 = "io.swagger.jaxrs2.OperationParser";
      String string8 = "";
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string7, (String) null).when(server0).description();
      doReturn(string8).when(server0).url();
      doReturn((ServerVariable[]) null).when(server0).variables();
      // Undeclared exception!
      try { 
        OperationParser.getServer(server0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test078()  throws Throwable  {
      boolean boolean0 = false;
      boolean boolean1 = true;
      Content[] contentArray0 = new Content[2];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      boolean boolean2 = false;
      String string0 = "";
      Explode explode0 = Explode.FALSE;
      Explode explode1 = Explode.FALSE;
      Explode explode2 = Explode.FALSE;
      String string1 = null;
      String string2 = ",ejV";
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema0).implementation();
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0).when(parameter0).allowEmptyValue();
      doReturn(boolean1, false).when(parameter0).allowReserved();
      doReturn(boolean2).when(parameter0).deprecated();
      doReturn(string0).when(parameter0).description();
      doReturn(explode0, explode1, explode2).when(parameter0).explode();
      doReturn(string1).when(parameter0).in();
      doReturn(string2, (String) null).when(parameter0).name();
      doReturn(boolean2).when(parameter0).required();
      doReturn(schema0, schema0, (Schema) null).when(parameter0).schema();
      doReturn(string0).when(parameter0).style();
      Components components0 = null;
      // Undeclared exception!
      try { 
        OperationParser.getParameter(parameter0, components0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test079()  throws Throwable  {
      io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[4];
      String string0 = "Reader returned 0 characters when trying to read ";
      String string1 = "*/*";
      String string2 = "*/*";
      String string3 = null;
      String string4 = "{'zs7UI8X?\"M";
      String string5 = null;
      String string6 = "";
      String string7 = "default";
      String string8 = "no description";
      String string9 = null;
      LinkParameter[] linkParameterArray0 = new LinkParameter[8];
      LinkParameter linkParameter0 = mock(LinkParameter.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(linkParameter0).name();
      linkParameterArray0[0] = linkParameter0;
      linkParameterArray0[1] = linkParameterArray0[0];
      linkParameterArray0[2] = linkParameterArray0[1];
      linkParameterArray0[3] = linkParameterArray0[2];
      linkParameterArray0[4] = linkParameterArray0[3];
      linkParameterArray0[5] = linkParameterArray0[4];
      linkParameterArray0[6] = linkParameterArray0[5];
      linkParameterArray0[7] = linkParameterArray0[6];
      io.swagger.oas.annotations.links.Link link0 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string0, string0, string0, string1).when(link0).description();
      doReturn(string7, string8, string9, string5).when(link0).name();
      doReturn(string0, string2, string1, string3, string4).when(link0).operationId();
      doReturn(string5, string0, string0, string6, string3).when(link0).operationRef();
      doReturn((Object) linkParameterArray0, (Object) linkParameterArray0, (Object) linkParameterArray0, (Object) linkParameterArray0, (Object) linkParameterArray0).when(link0).parameters();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      linkArray0[3] = linkArray0[2];
      Map<String, Link> map0 = OperationParser.getLinks(linkArray0);
      assertNotNull(map0);
      assertEquals(4, linkArray0.length);
      assertFalse(map0.isEmpty());
      assertEquals(3, map0.size());
      
      Optional<Link> optional0 = OperationParser.getLink(linkArray0[3]);
      assertNotNull(optional0);
      assertEquals(4, linkArray0.length);
      
      Content[] contentArray0 = new Content[1];
      ExampleObject[] exampleObjectArray0 = new ExampleObject[3];
      String string10 = null;
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exampleObject0).externalValue();
      doReturn(string6, string7, string10, (String) null, (String) null).when(exampleObject0).name();
      doReturn((String) null).when(exampleObject0).summary();
      doReturn((String) null).when(exampleObject0).value();
      exampleObjectArray0[0] = exampleObject0;
      exampleObjectArray0[1] = exampleObjectArray0[0];
      exampleObjectArray0[2] = exampleObjectArray0[1];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn(exampleObjectArray0).when(content0).examples();
      doReturn((String) null).when(content0).mediaType();
      contentArray0[0] = content0;
      Components components0 = null;
      Optional<io.swagger.oas.models.media.Content> optional1 = OperationParser.getContents(contentArray0, components0);
      assertNotNull(optional1);
      assertEquals(1, contentArray0.length);
      
      String[] stringArray0 = new String[3];
      Optional<Set<Tag>> optional2 = OperationParser.getTags(stringArray0);
      assertNotNull(optional2);
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 11000)
  public void test080()  throws Throwable  {
      String string0 = "#/components/schemas/";
      String string1 = "-a%#%q0!Pxv ?|N95";
      String string2 = "no description";
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(contact0).email();
      doReturn((String) null).when(contact0).name();
      doReturn((String) null).when(contact0).url();
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(license0).name();
      doReturn((String) null).when(license0).url();
      String string3 = ";>s9nUsPnupl(~K";
      Info info0 = mock(Info.class, new ViolatedAssumptionAnswer());
      doReturn(contact0).when(info0).contact();
      doReturn(string0, string2).when(info0).description();
      doReturn(license0).when(info0).license();
      doReturn(string0, string1).when(info0).termsOfService();
      doReturn(string1, string2).when(info0).title();
      doReturn(string2, string3).when(info0).version();
      Optional<io.swagger.oas.models.info.Info> optional0 = OperationParser.getInfo(info0);
      assertNotNull(optional0);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = "ALWAYS";
      boolean boolean0 = true;
      Content[] contentArray0 = new Content[9];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((ExampleObject[]) null).when(content0).examples();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      contentArray0[3] = contentArray0[2];
      contentArray0[4] = contentArray0[3];
      contentArray0[5] = contentArray0[4];
      contentArray0[6] = contentArray0[5];
      contentArray0[7] = contentArray0[6];
      contentArray0[8] = contentArray0[7];
      String string5 = "java.lang";
      io.swagger.oas.annotations.parameters.RequestBody requestBody0 = mock(io.swagger.oas.annotations.parameters.RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn(contentArray0).when(requestBody0).content();
      doReturn(string4, string5).when(requestBody0).description();
      doReturn(boolean0, boolean0).when(requestBody0).required();
      Components components0 = new Components();
      assertNotNull(components0);
      
      HashMap<String, RequestBody> hashMap0 = new HashMap<String, RequestBody>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Components components1 = components0.requestBodies(hashMap0);
      assertNotNull(components1);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      io.swagger.oas.models.media.Schema<io.swagger.oas.models.ExternalDocumentation> schema0 = new io.swagger.oas.models.media.Schema<io.swagger.oas.models.ExternalDocumentation>();
      assertNotNull(schema0);
      assertNull(schema0.getTitle());
      assertNull(schema0.get$ref());
      assertNull(schema0.getType());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getFormat());
      assertNull(schema0.getPattern());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getNullable());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getDescription());
      assertNull(schema0.getName());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getMinItems());
      assertNull(schema0.getMaxItems());
      
      Map<String, io.swagger.oas.models.media.Schema> map0 = (Map<String, io.swagger.oas.models.media.Schema>)schema0.getProperties();
      assertNull(map0);
      assertNull(schema0.getTitle());
      assertNull(schema0.get$ref());
      assertNull(schema0.getType());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getFormat());
      assertNull(schema0.getPattern());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getNullable());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getDescription());
      assertNull(schema0.getName());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getMinItems());
      assertNull(schema0.getMaxItems());
      
      Components components2 = components1.schemas(map0);
      assertNotNull(components2);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(schema0.getTitle());
      assertNull(schema0.get$ref());
      assertNull(schema0.getType());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getFormat());
      assertNull(schema0.getPattern());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getNullable());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getDescription());
      assertNull(schema0.getName());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getMinItems());
      assertNull(schema0.getMaxItems());
      
      Map<String, Header> map1 = null;
      String string6 = "#/components/schemas/";
      String string7 = "io.swagger.jaxrs2.OperationParser";
      Callback callback0 = new Callback();
      assertNotNull(callback0);
      assertTrue(callback0.isEmpty());
      assertEquals(0, callback0.size());
      
      PathItem pathItem0 = null;
      Callback callback1 = callback0.addPathItem(string2, pathItem0);
      assertNotNull(callback1);
      assertSame(callback0, callback1);
      assertSame(callback1, callback0);
      assertNotSame(string2, string5);
      assertNotSame(string2, string3);
      assertNotSame(string2, string4);
      assertNotSame(string2, string7);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string6);
      assertFalse(callback0.isEmpty());
      assertEquals(1, callback0.size());
      assertEquals(1, callback1.size());
      assertFalse(callback1.isEmpty());
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string7));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string6));
      
      Components components3 = components2.addCallbacks(string7, callback1);
      assertNotNull(components3);
      assertSame(callback0, callback1);
      assertSame(callback1, callback0);
      assertNotSame(string2, string5);
      assertNotSame(string2, string3);
      assertNotSame(string2, string4);
      assertNotSame(string2, string7);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string6);
      assertSame(components3, components2);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(components2, components0);
      assertNotSame(string7, string2);
      assertNotSame(string7, string3);
      assertNotSame(string7, string5);
      assertNotSame(string7, string0);
      assertNotSame(string7, string6);
      assertNotSame(string7, string1);
      assertNotSame(string7, string4);
      assertFalse(callback0.isEmpty());
      assertEquals(1, callback0.size());
      assertEquals(1, callback1.size());
      assertFalse(callback1.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(schema0.getTitle());
      assertNull(schema0.get$ref());
      assertNull(schema0.getType());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getFormat());
      assertNull(schema0.getPattern());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getNullable());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getDescription());
      assertNull(schema0.getName());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getMinItems());
      assertNull(schema0.getMaxItems());
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string7));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      
      Map<String, io.swagger.oas.models.media.Schema> map2 = (Map<String, io.swagger.oas.models.media.Schema>)components3.getSchemas();
      assertNull(map2);
      assertSame(callback0, callback1);
      assertSame(callback1, callback0);
      assertNotSame(string2, string5);
      assertNotSame(string2, string3);
      assertNotSame(string2, string4);
      assertNotSame(string2, string7);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string6);
      assertSame(components3, components2);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(components2, components0);
      assertNotSame(string7, string2);
      assertNotSame(string7, string3);
      assertNotSame(string7, string5);
      assertNotSame(string7, string0);
      assertNotSame(string7, string6);
      assertNotSame(string7, string1);
      assertNotSame(string7, string4);
      assertFalse(callback0.isEmpty());
      assertEquals(1, callback0.size());
      assertEquals(1, callback1.size());
      assertFalse(callback1.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(schema0.getTitle());
      assertNull(schema0.get$ref());
      assertNull(schema0.getType());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getFormat());
      assertNull(schema0.getPattern());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getNullable());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getDescription());
      assertNull(schema0.getName());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getMinItems());
      assertNull(schema0.getMaxItems());
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string7));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      
      components1.setSchemas(map2);
      assertSame(callback0, callback1);
      assertSame(callback1, callback0);
      assertNotSame(string2, string5);
      assertNotSame(string2, string3);
      assertNotSame(string2, string4);
      assertNotSame(string2, string7);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string6);
      assertSame(components3, components2);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(components2, components0);
      assertNotSame(string7, string2);
      assertNotSame(string7, string3);
      assertNotSame(string7, string5);
      assertNotSame(string7, string0);
      assertNotSame(string7, string6);
      assertNotSame(string7, string1);
      assertNotSame(string7, string4);
      assertFalse(callback0.isEmpty());
      assertEquals(1, callback0.size());
      assertEquals(1, callback1.size());
      assertFalse(callback1.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(schema0.getTitle());
      assertNull(schema0.get$ref());
      assertNull(schema0.getType());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getFormat());
      assertNull(schema0.getPattern());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getNullable());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getDescription());
      assertNull(schema0.getName());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getMinItems());
      assertNull(schema0.getMaxItems());
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string7));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      
      // Undeclared exception!
      try { 
        OperationParser.getRequestBody(requestBody0, components2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test081()  throws Throwable  {
      OperationParser operationParser0 = new OperationParser();
      assertNotNull(operationParser0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = operationParser0.RESPONSE_DEFAULT;
      String string0 = "' (code 0x";
      stringArray0[2] = operationParser0.DEFAULT_DESCRIPTION;
      String string1 = "com.fasterxml.jackson.databind.node.DoubleNode";
      boolean boolean0 = true;
      String string2 = "";
      String string3 = "Gr s @RJ";
      String string4 = "io.swagger.oas.models.servers.Server";
      String string5 = "hmbw{lBzr/_o+h0A[{";
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string4, (String) null).when(externalDocumentation0).description();
      doReturn(string5, (String) null).when(externalDocumentation0).url();
      int int0 = 400;
      String string6 = "Em>Gs$";
      boolean boolean1 = false;
      String string7 = "Type-wrapped deserializer's deserializeWithType should never get called";
      String string8 = null;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(stringArray0).when(schema0).allowableValues();
      doReturn(string1, string6).when(schema0).defaultValue();
      doReturn(boolean0, boolean1).when(schema0).deprecated();
      doReturn(string2).when(schema0).description();
      doReturn(string3, string0, string7, string0).when(schema0).example();
      doReturn(boolean0, boolean1).when(schema0).exclusiveMaximum();
      doReturn(boolean0, boolean1).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema0).externalDocs();
      doReturn(string2).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(int0, 0).when(schema0).maxProperties();
      doReturn(int0, int0).when(schema0).minProperties();
      doReturn(stringArray0[0], string4).when(schema0).pattern();
      doReturn(boolean0, boolean0).when(schema0).readOnly();
      doReturn(operationParser0.COMPONENTS_REF, string8).when(schema0).ref();
      doReturn(string0, string1).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional0 = (Optional<io.swagger.oas.models.media.Schema>)OperationParser.getSchemaFromAnnotation(schema0);
      assertNotNull(optional0);
      assertEquals(3, stringArray0.length);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertNotSame(string0, string5);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string7);
      assertNotSame(string0, string6);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string4);
      assertNotSame(string1, string2);
      assertNotSame(string1, string5);
      assertNotSame(string1, string7);
      assertNotSame(string1, string6);
      assertNotSame(string2, string5);
      assertNotSame(string2, string1);
      assertNotSame(string2, string7);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertNotSame(string2, string6);
      assertNotSame(string2, string4);
      assertNotSame(string3, string7);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string4);
      assertNotSame(string3, string2);
      assertNotSame(string3, string5);
      assertNotSame(string3, string6);
      assertNotSame(string4, string3);
      assertNotSame(string4, string0);
      assertNotSame(string4, string2);
      assertNotSame(string4, string6);
      assertNotSame(string4, string7);
      assertNotSame(string4, string5);
      assertNotSame(string4, string1);
      assertNotSame(string5, string3);
      assertNotSame(string5, string4);
      assertNotSame(string5, string2);
      assertNotSame(string5, string0);
      assertNotSame(string5, string7);
      assertNotSame(string5, string6);
      assertNotSame(string5, string1);
      assertNotSame(string6, string4);
      assertNotSame(string6, string2);
      assertNotSame(string6, string5);
      assertNotSame(string6, string0);
      assertNotSame(string6, string3);
      assertNotSame(string6, string7);
      assertNotSame(string6, string1);
      assertNotSame(string7, string1);
      assertNotSame(string7, string0);
      assertNotSame(string7, string3);
      assertNotSame(string7, string4);
      assertNotSame(string7, string5);
      assertNotSame(string7, string6);
      assertNotSame(string7, string2);
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string7));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string7));
      assertFalse(string1.equals((Object)string6));
      assertFalse(boolean0 == boolean1);
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string7));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string3.equals((Object)string7));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string6));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string6));
      assertFalse(string4.equals((Object)string7));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string7));
      assertFalse(string5.equals((Object)string6));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string7));
      assertFalse(string6.equals((Object)string1));
      assertFalse(boolean1 == boolean0);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      
      Content[] contentArray0 = new Content[8];
      ExampleObject[] exampleObjectArray0 = new ExampleObject[6];
      String string9 = "";
      String string10 = "localizedMessage";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(exampleObject0).externalValue();
      doReturn(operationParser0.COMPONENTS_REF, string4, string9, operationParser0.DEFAULT_DESCRIPTION, string10).when(exampleObject0).name();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(exampleObject0).summary();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(exampleObject0).value();
      exampleObjectArray0[0] = exampleObject0;
      exampleObjectArray0[1] = exampleObjectArray0[0];
      exampleObjectArray0[2] = exampleObjectArray0[1];
      exampleObjectArray0[3] = exampleObjectArray0[2];
      exampleObjectArray0[4] = exampleObjectArray0[3];
      exampleObjectArray0[5] = exampleObjectArray0[4];
      ExampleObject[] exampleObjectArray1 = new ExampleObject[3];
      assertFalse(exampleObjectArray1.equals((Object)exampleObjectArray0));
      
      exampleObjectArray1[0] = exampleObject0;
      exampleObjectArray1[1] = exampleObject0;
      exampleObjectArray1[2] = exampleObject0;
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Object) exampleObjectArray0, (Object) exampleObjectArray0, (Object) exampleObjectArray1, (Object) exampleObjectArray0, (Object) exampleObjectArray1).when(content0).examples();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(content0).mediaType();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      contentArray0[3] = contentArray0[2];
      contentArray0[4] = contentArray0[3];
      contentArray0[5] = contentArray0[4];
      contentArray0[6] = contentArray0[5];
      contentArray0[7] = contentArray0[6];
      Components components0 = new Components();
      assertNotNull(components0);
      
      HashMap<String, io.swagger.oas.models.responses.ApiResponse> hashMap0 = new HashMap<String, io.swagger.oas.models.responses.ApiResponse>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Components components1 = components0.responses(hashMap0);
      assertNotNull(components1);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Map<String, SecurityScheme> map0 = components1.getSecuritySchemes();
      assertNull(map0);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Components components2 = components0.securitySchemes(map0);
      assertNotNull(components2);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Optional<io.swagger.oas.models.media.Content> optional1 = OperationParser.getContents(contentArray0, components2);
      assertNotNull(optional1);
      assertEquals(8, contentArray0.length);
      assertSame(components0, components1);
      assertSame(components0, components2);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
  }

  @Test(timeout = 11000)
  public void test082()  throws Throwable  {
      boolean boolean0 = false;
      Content[] contentArray0 = new Content[4];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[1];
      contentArray0[3] = contentArray0[2];
      String string0 = "1S2\\fh{$$]Ri$oU";
      Explode explode0 = Explode.DEFAULT;
      Explode explode1 = Explode.DEFAULT;
      String string1 = null;
      String string2 = "";
      boolean boolean1 = false;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(schema0).implementation();
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0).when(parameter0).allowEmptyValue();
      doReturn(boolean0).when(parameter0).allowReserved();
      doReturn(boolean0).when(parameter0).deprecated();
      doReturn(string0, (String) null).when(parameter0).description();
      doReturn(explode0, explode1, explode1).when(parameter0).explode();
      doReturn(string1).when(parameter0).in();
      doReturn(string2).when(parameter0).name();
      doReturn(boolean1).when(parameter0).required();
      doReturn(schema0, schema0, (Schema) null).when(parameter0).schema();
      doReturn(string1).when(parameter0).style();
      Components components0 = null;
      // Undeclared exception!
      try { 
        OperationParser.getParameter(parameter0, components0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test083()  throws Throwable  {
      io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[3];
      String string0 = null;
      String string1 = "&qN^\\Tm!E{ri";
      String string2 = "P52Jcj*Hj{||.iYz";
      String string3 = "'i";
      String string4 = "aO5 @&A\\I5Zb`}a<M2";
      String string5 = "${y[$E&MkDS;J@)Jb'";
      LinkParameter[] linkParameterArray0 = new LinkParameter[16];
      LinkParameter linkParameter0 = mock(LinkParameter.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null).when(linkParameter0).name();
      linkParameterArray0[0] = linkParameter0;
      linkParameterArray0[1] = linkParameterArray0[0];
      linkParameterArray0[2] = linkParameterArray0[1];
      linkParameterArray0[3] = linkParameterArray0[2];
      io.swagger.oas.annotations.links.Link link0 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(link0).description();
      doReturn(string1, string0).when(link0).operationId();
      doReturn(string0).when(link0).operationRef();
      doReturn(linkParameterArray0).when(link0).parameters();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      // Undeclared exception!
      try { 
        OperationParser.getLinks(linkArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test084()  throws Throwable  {
      io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[3];
      String string0 = null;
      String string1 = "&qN^\\Tm!E{ri";
      String string2 = "P52Jcj*Hj{||.iYz";
      String string3 = "'i";
      String string4 = "s";
      String string5 = "org.apache.commons.collections4.functors.InstantiateTransformer";
      LinkParameter[] linkParameterArray0 = new LinkParameter[6];
      String string6 = "class OAuthFlows {\n";
      String string7 = "Unexpected end-of-input within/between ";
      String string8 = "io.swagger.jaxrs2.OperationParser";
      String string9 = " has mismatch: ";
      LinkParameter linkParameter0 = mock(LinkParameter.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(linkParameter0).expression();
      doReturn(string6, string5, string7, string8, string9).when(linkParameter0).name();
      linkParameterArray0[0] = linkParameter0;
      linkParameterArray0[1] = linkParameterArray0[0];
      linkParameterArray0[2] = linkParameterArray0[1];
      linkParameterArray0[3] = linkParameterArray0[2];
      linkParameterArray0[4] = linkParameterArray0[3];
      linkParameterArray0[5] = linkParameterArray0[4];
      LinkParameter[] linkParameterArray1 = new LinkParameter[2];
      assertFalse(linkParameterArray1.equals((Object)linkParameterArray0));
      
      linkParameterArray1[0] = linkParameter0;
      linkParameterArray1[1] = linkParameter0;
      io.swagger.oas.annotations.links.Link link0 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string0, string0).when(link0).description();
      doReturn(string2, string0, string1).when(link0).name();
      doReturn(string1, string0, string2, string3, string4).when(link0).operationId();
      doReturn(string0, string0, string3, string5).when(link0).operationRef();
      doReturn((Object) linkParameterArray0, (Object) linkParameterArray0, (Object) linkParameterArray1).when(link0).parameters();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      Map<String, Link> map0 = OperationParser.getLinks(linkArray0);
      assertNotNull(map0);
      assertEquals(3, linkArray0.length);
      assertFalse(map0.isEmpty());
      assertEquals(3, map0.size());
      
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(contact0).email();
      doReturn(string4, string4).when(contact0).name();
      doReturn(string1, string8).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional0 = OperationParser.getContact(contact0);
      assertNotNull(optional0);
      assertNotSame(string1, string9);
      assertNotSame(string1, string7);
      assertNotSame(string1, string6);
      assertNotSame(string1, string5);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string4);
      assertNotSame(string1, string8);
      assertNotSame(string4, string8);
      assertNotSame(string4, string9);
      assertNotSame(string4, string5);
      assertNotSame(string4, string7);
      assertNotSame(string4, string3);
      assertNotSame(string4, string6);
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      assertNotSame(string8, string1);
      assertNotSame(string8, string4);
      assertNotSame(string8, string2);
      assertNotSame(string8, string3);
      assertNotSame(string8, string5);
      assertNotSame(string8, string7);
      assertNotSame(string8, string9);
      assertNotSame(string8, string6);
      assertFalse(string1.equals((Object)string9));
      assertFalse(string1.equals((Object)string7));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string8));
      assertFalse(string4.equals((Object)string8));
      assertFalse(string4.equals((Object)string9));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string7));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string6));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string9));
      assertFalse(string8.equals((Object)string6));
  }

  @Test(timeout = 11000)
  public void test085()  throws Throwable  {
      MediaType mediaType0 = new MediaType();
      assertNotNull(mediaType0);
      assertNull(mediaType0.getExample());
      
      io.swagger.oas.models.media.Schema<Integer> schema0 = new io.swagger.oas.models.media.Schema<Integer>();
      assertNotNull(schema0);
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.get$ref());
      assertNull(schema0.getFormat());
      assertNull(schema0.getPattern());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getName());
      assertNull(schema0.getMinItems());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getType());
      assertNull(schema0.getNullable());
      assertNull(schema0.getTitle());
      assertNull(schema0.getDescription());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getExclusiveMaximum());
      
      MediaType mediaType1 = mediaType0.schema(schema0);
      assertNotNull(mediaType1);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType1, mediaType0);
      assertNull(mediaType0.getExample());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.get$ref());
      assertNull(schema0.getFormat());
      assertNull(schema0.getPattern());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getName());
      assertNull(schema0.getMinItems());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getType());
      assertNull(schema0.getNullable());
      assertNull(schema0.getTitle());
      assertNull(schema0.getDescription());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(mediaType1.getExample());
      
      String string0 = "Gn4P>QrS8;Q1'A]Y+";
      Encoding encoding0 = new Encoding();
      assertNotNull(encoding0);
      assertNull(encoding0.getStyle());
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getExplode());
      assertNull(encoding0.getAllowReserved());
      
      MediaType mediaType2 = mediaType1.addEncoding(string0, encoding0);
      assertNotNull(mediaType2);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType0, mediaType2);
      assertSame(mediaType1, mediaType2);
      assertSame(mediaType1, mediaType0);
      assertSame(mediaType2, mediaType1);
      assertSame(mediaType2, mediaType0);
      assertNull(mediaType0.getExample());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.get$ref());
      assertNull(schema0.getFormat());
      assertNull(schema0.getPattern());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getName());
      assertNull(schema0.getMinItems());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getType());
      assertNull(schema0.getNullable());
      assertNull(schema0.getTitle());
      assertNull(schema0.getDescription());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(mediaType1.getExample());
      assertNull(encoding0.getStyle());
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getExplode());
      assertNull(encoding0.getAllowReserved());
      assertNull(mediaType2.getExample());
      
      HashMap<String, Encoding> hashMap0 = new HashMap<String, Encoding>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      MediaType mediaType3 = mediaType2.encoding(hashMap0);
      assertNotNull(mediaType3);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType0, mediaType2);
      assertSame(mediaType0, mediaType3);
      assertSame(mediaType1, mediaType3);
      assertSame(mediaType1, mediaType2);
      assertSame(mediaType1, mediaType0);
      assertSame(mediaType2, mediaType3);
      assertSame(mediaType2, mediaType1);
      assertSame(mediaType2, mediaType0);
      assertSame(mediaType3, mediaType2);
      assertSame(mediaType3, mediaType1);
      assertSame(mediaType3, mediaType0);
      assertNull(mediaType0.getExample());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.get$ref());
      assertNull(schema0.getFormat());
      assertNull(schema0.getPattern());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getName());
      assertNull(schema0.getMinItems());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getType());
      assertNull(schema0.getNullable());
      assertNull(schema0.getTitle());
      assertNull(schema0.getDescription());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(mediaType1.getExample());
      assertNull(encoding0.getStyle());
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getExplode());
      assertNull(encoding0.getAllowReserved());
      assertNull(mediaType2.getExample());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(mediaType3.getExample());
      
      Example example0 = null;
      MediaType mediaType4 = mediaType3.addExamples(string0, example0);
      assertNotNull(mediaType4);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType0, mediaType2);
      assertSame(mediaType0, mediaType3);
      assertSame(mediaType0, mediaType4);
      assertSame(mediaType1, mediaType3);
      assertSame(mediaType1, mediaType2);
      assertSame(mediaType1, mediaType4);
      assertSame(mediaType1, mediaType0);
      assertSame(mediaType2, mediaType4);
      assertSame(mediaType2, mediaType3);
      assertSame(mediaType2, mediaType1);
      assertSame(mediaType2, mediaType0);
      assertSame(mediaType3, mediaType2);
      assertSame(mediaType3, mediaType4);
      assertSame(mediaType3, mediaType1);
      assertSame(mediaType3, mediaType0);
      assertSame(mediaType4, mediaType1);
      assertSame(mediaType4, mediaType3);
      assertSame(mediaType4, mediaType2);
      assertSame(mediaType4, mediaType0);
      assertNull(mediaType0.getExample());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.get$ref());
      assertNull(schema0.getFormat());
      assertNull(schema0.getPattern());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getName());
      assertNull(schema0.getMinItems());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getType());
      assertNull(schema0.getNullable());
      assertNull(schema0.getTitle());
      assertNull(schema0.getDescription());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(mediaType1.getExample());
      assertNull(encoding0.getStyle());
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getExplode());
      assertNull(encoding0.getAllowReserved());
      assertNull(mediaType2.getExample());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(mediaType3.getExample());
      assertNull(mediaType4.getExample());
      
      MediaType mediaType5 = mediaType3.encoding(hashMap0);
      assertNotNull(mediaType5);
      assertSame(mediaType0, mediaType5);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType0, mediaType2);
      assertSame(mediaType0, mediaType3);
      assertSame(mediaType0, mediaType4);
      assertSame(mediaType1, mediaType3);
      assertSame(mediaType1, mediaType2);
      assertSame(mediaType1, mediaType4);
      assertSame(mediaType1, mediaType5);
      assertSame(mediaType1, mediaType0);
      assertSame(mediaType2, mediaType4);
      assertSame(mediaType2, mediaType3);
      assertSame(mediaType2, mediaType1);
      assertSame(mediaType2, mediaType0);
      assertSame(mediaType2, mediaType5);
      assertSame(mediaType3, mediaType2);
      assertSame(mediaType3, mediaType4);
      assertSame(mediaType3, mediaType1);
      assertSame(mediaType3, mediaType5);
      assertSame(mediaType3, mediaType0);
      assertSame(mediaType5, mediaType0);
      assertSame(mediaType5, mediaType1);
      assertSame(mediaType5, mediaType3);
      assertSame(mediaType5, mediaType2);
      assertSame(mediaType5, mediaType4);
      assertNull(mediaType0.getExample());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.get$ref());
      assertNull(schema0.getFormat());
      assertNull(schema0.getPattern());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getName());
      assertNull(schema0.getMinItems());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getType());
      assertNull(schema0.getNullable());
      assertNull(schema0.getTitle());
      assertNull(schema0.getDescription());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(mediaType1.getExample());
      assertNull(encoding0.getStyle());
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getExplode());
      assertNull(encoding0.getAllowReserved());
      assertNull(mediaType2.getExample());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(mediaType3.getExample());
      assertNull(mediaType5.getExample());
      
      mediaType1.setSchema(schema0);
      assertSame(mediaType0, mediaType5);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType0, mediaType2);
      assertSame(mediaType0, mediaType3);
      assertSame(mediaType0, mediaType4);
      assertSame(mediaType1, mediaType3);
      assertSame(mediaType1, mediaType2);
      assertSame(mediaType1, mediaType4);
      assertSame(mediaType1, mediaType5);
      assertSame(mediaType1, mediaType0);
      assertNull(mediaType0.getExample());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.get$ref());
      assertNull(schema0.getFormat());
      assertNull(schema0.getPattern());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getName());
      assertNull(schema0.getMinItems());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.getType());
      assertNull(schema0.getNullable());
      assertNull(schema0.getTitle());
      assertNull(schema0.getDescription());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(mediaType1.getExample());
      
      String string1 = "' has value that is not of type ObjectNode (but ";
      String string2 = "L2,mE}E";
      String string3 = "U\\";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(exampleObject0).externalValue();
      doReturn(string1, string2, string0).when(exampleObject0).name();
      doReturn(string3, (String) null).when(exampleObject0).summary();
      doReturn(string0, (String) null).when(exampleObject0).value();
      // Undeclared exception!
      try { 
        OperationParser.getMediaType(mediaType4, exampleObject0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.JsonFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test086()  throws Throwable  {
      Parameter[] parameterArray0 = new Parameter[4];
      boolean boolean0 = false;
      boolean boolean1 = false;
      boolean boolean2 = true;
      boolean boolean3 = true;
      Content[] contentArray0 = null;
      String string0 = "s";
      String string1 = "no description";
      String string2 = null;
      Explode explode0 = Explode.FALSE;
      Explode explode1 = Explode.FALSE;
      Explode explode2 = Explode.TRUE;
      Explode explode3 = Explode.DEFAULT;
      String string3 = "<0fJ!MLI9@LC";
      String string4 = "?!73YxLeA}B(TG";
      String string5 = "*/*";
      boolean boolean4 = false;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      String string6 = "";
      String string7 = "Iw;$";
      String string8 = "";
      Parameter parameter0 = mock(Parameter.class, new ViolatedAssumptionAnswer());
      parameterArray0[0] = parameter0;
      parameterArray0[1] = parameterArray0[0];
      parameterArray0[2] = parameterArray0[1];
      parameterArray0[3] = parameterArray0[2];
      Components components0 = new Components();
      assertNotNull(components0);
      
      String string9 = "";
      io.swagger.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.oas.models.responses.ApiResponse();
      assertNotNull(apiResponse0);
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      
      Components components1 = components0.addResponses(string9, apiResponse0);
      assertNotNull(components1);
      assertSame(components0, components1);
      assertNotSame(string9, string3);
      assertNotSame(string9, string7);
      assertNotSame(string9, string4);
      assertNotSame(string9, string0);
      assertSame(string9, string8);
      assertNotSame(string9, string5);
      assertNotSame(string9, string1);
      assertSame(string9, string6);
      assertSame(components1, components0);
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string1));
      
      SecurityScheme securityScheme0 = new SecurityScheme();
      assertNotNull(securityScheme0);
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.getBearerFormat());
      
      Components components2 = components1.addSecuritySchemes(string9, securityScheme0);
      assertNotNull(components2);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertNotSame(string9, string3);
      assertNotSame(string9, string7);
      assertNotSame(string9, string4);
      assertNotSame(string9, string0);
      assertSame(string9, string8);
      assertNotSame(string9, string5);
      assertNotSame(string9, string1);
      assertSame(string9, string6);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.getBearerFormat());
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string1));
      
      RequestBody requestBody0 = new RequestBody();
      assertNotNull(requestBody0);
      assertNull(requestBody0.getRequired());
      assertNull(requestBody0.get$ref());
      assertNull(requestBody0.getDescription());
      
      Components components3 = components2.addRequestBodies(string9, requestBody0);
      assertNotNull(components3);
      assertSame(components3, components2);
      assertSame(components3, components0);
      assertSame(components3, components1);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertNotSame(string9, string3);
      assertNotSame(string9, string7);
      assertNotSame(string9, string4);
      assertNotSame(string9, string0);
      assertSame(string9, string8);
      assertNotSame(string9, string5);
      assertNotSame(string9, string1);
      assertSame(string9, string6);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertNull(requestBody0.getRequired());
      assertNull(requestBody0.get$ref());
      assertNull(requestBody0.getDescription());
      assertNull(apiResponse0.getDescription());
      assertNull(apiResponse0.get$ref());
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getIn());
      assertNull(securityScheme0.getBearerFormat());
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string1));
      
      String string10 = "";
      securityScheme0.setBearerFormat(string10);
      assertSame(string10, string8);
      assertNotSame(string10, string3);
      assertSame(string10, string9);
      assertNotSame(string10, string5);
      assertNotSame(string10, string4);
      assertNotSame(string10, string0);
      assertSame(string10, string6);
      assertNotSame(string10, string7);
      assertNotSame(string10, string1);
      assertNull(securityScheme0.getType());
      assertNull(securityScheme0.getOpenIdConnectUrl());
      assertNull(securityScheme0.getDescription());
      assertNull(securityScheme0.getScheme());
      assertNull(securityScheme0.getName());
      assertNull(securityScheme0.get$ref());
      assertNull(securityScheme0.getIn());
      assertEquals("", securityScheme0.getBearerFormat());
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string1));
      
      String string11 = "org.apache.commons.collections4.functors.InstantiateTransformer";
      LinkParameter[] linkParameterArray0 = new LinkParameter[7];
      String string12 = "*/*";
      String string13 = "bH\\[";
      LinkParameter linkParameter0 = mock(LinkParameter.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(linkParameter0).expression();
      doReturn(string7, string12, string5, string4, string13).when(linkParameter0).name();
      linkParameterArray0[0] = linkParameter0;
      linkParameterArray0[1] = linkParameterArray0[0];
      linkParameterArray0[2] = linkParameterArray0[1];
      linkParameterArray0[3] = linkParameterArray0[2];
      linkParameterArray0[4] = linkParameterArray0[3];
      linkParameterArray0[6] = linkParameterArray0[5];
      // Undeclared exception!
      try { 
        OperationParser.getLinkParameters(linkParameterArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test087()  throws Throwable  {
      String string0 = "[fBpAjc#`";
      String string1 = "default";
      String string2 = "]G{uY8F]us\\*<J`9PC=";
      String string3 = "00K!d)z";
      LinkParameter[] linkParameterArray0 = new LinkParameter[3];
      LinkParameter linkParameter0 = mock(LinkParameter.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(linkParameter0).name();
      linkParameterArray0[0] = linkParameter0;
      linkParameterArray0[1] = linkParameterArray0[0];
      linkParameterArray0[2] = linkParameterArray0[1];
      io.swagger.oas.annotations.links.Link link0 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string1).when(link0).description();
      doReturn(string0, string2).when(link0).operationId();
      doReturn(string0, string3).when(link0).operationRef();
      doReturn(linkParameterArray0).when(link0).parameters();
      Optional<Link> optional0 = OperationParser.getLink(link0);
      assertNotNull(optional0);
      assertEquals(3, linkParameterArray0.length);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      MediaType mediaType0 = new MediaType();
      assertNotNull(mediaType0);
      assertNull(mediaType0.getExample());
      
      Map<String, Example> map0 = mediaType0.getExamples();
      assertNull(map0);
      assertNull(mediaType0.getExample());
      
      MediaType mediaType1 = mediaType0.examples(map0);
      assertNotNull(mediaType1);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType1, mediaType0);
      assertNull(mediaType0.getExample());
      assertNull(mediaType1.getExample());
      
      String string4 = "^A@=+!7$=v";
      MediaType mediaType2 = mediaType1.example(string4);
      assertNotNull(mediaType2);
      assertSame(mediaType0, mediaType2);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType1, mediaType2);
      assertSame(mediaType1, mediaType0);
      assertNotSame(string4, string3);
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      assertNotSame(string4, string0);
      assertSame(mediaType2, mediaType0);
      assertSame(mediaType2, mediaType1);
      assertEquals("^A@=+!7$=v", mediaType0.getExample());
      assertEquals("^A@=+!7$=v", mediaType1.getExample());
      assertEquals("^A@=+!7$=v", mediaType2.getExample());
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      
      io.swagger.oas.models.media.Schema<String> schema0 = new io.swagger.oas.models.media.Schema<String>();
      assertNotNull(schema0);
      assertNull(schema0.getMinItems());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getPattern());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getNullable());
      assertNull(schema0.getFormat());
      assertNull(schema0.getName());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getDescription());
      assertNull(schema0.getType());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.get$ref());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getTitle());
      
      MediaType mediaType3 = mediaType2.schema(schema0);
      assertNotNull(mediaType3);
      assertSame(mediaType3, mediaType1);
      assertSame(mediaType3, mediaType0);
      assertSame(mediaType3, mediaType2);
      assertSame(mediaType0, mediaType2);
      assertSame(mediaType0, mediaType3);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType1, mediaType3);
      assertSame(mediaType1, mediaType2);
      assertSame(mediaType1, mediaType0);
      assertNotSame(string4, string3);
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      assertNotSame(string4, string0);
      assertSame(mediaType2, mediaType0);
      assertSame(mediaType2, mediaType3);
      assertSame(mediaType2, mediaType1);
      assertNull(schema0.getMinItems());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getPattern());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getNullable());
      assertNull(schema0.getFormat());
      assertNull(schema0.getName());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getDescription());
      assertNull(schema0.getType());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.get$ref());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getTitle());
      assertEquals("^A@=+!7$=v", mediaType3.getExample());
      assertEquals("^A@=+!7$=v", mediaType0.getExample());
      assertEquals("^A@=+!7$=v", mediaType1.getExample());
      assertEquals("^A@=+!7$=v", mediaType2.getExample());
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      
      String string5 = "default";
      mediaType2.addExtension(string5, mediaType3);
      assertSame(mediaType3, mediaType1);
      assertSame(mediaType3, mediaType0);
      assertSame(mediaType3, mediaType2);
      assertNotSame(string5, string3);
      assertNotSame(string5, string2);
      assertNotSame(string5, string4);
      assertNotSame(string5, string0);
      assertSame(string5, string1);
      assertSame(mediaType0, mediaType2);
      assertSame(mediaType0, mediaType3);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType1, mediaType3);
      assertSame(mediaType1, mediaType2);
      assertSame(mediaType1, mediaType0);
      assertNotSame(string4, string3);
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      assertNotSame(string4, string0);
      assertNotSame(string4, string5);
      assertSame(mediaType2, mediaType0);
      assertSame(mediaType2, mediaType3);
      assertSame(mediaType2, mediaType1);
      assertNull(schema0.getMinItems());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getPattern());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getNullable());
      assertNull(schema0.getFormat());
      assertNull(schema0.getName());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getDescription());
      assertNull(schema0.getType());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.get$ref());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getTitle());
      assertEquals("^A@=+!7$=v", mediaType3.getExample());
      assertEquals("^A@=+!7$=v", mediaType0.getExample());
      assertEquals("^A@=+!7$=v", mediaType1.getExample());
      assertEquals("^A@=+!7$=v", mediaType2.getExample());
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string5));
      
      mediaType3.addExtension(string4, mediaType1);
      assertSame(mediaType3, mediaType1);
      assertSame(mediaType3, mediaType0);
      assertSame(mediaType3, mediaType2);
      assertSame(mediaType0, mediaType2);
      assertSame(mediaType0, mediaType3);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType1, mediaType3);
      assertSame(mediaType1, mediaType2);
      assertSame(mediaType1, mediaType0);
      assertNotSame(string4, string3);
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      assertNotSame(string4, string0);
      assertNotSame(string4, string5);
      assertSame(mediaType2, mediaType0);
      assertSame(mediaType2, mediaType3);
      assertSame(mediaType2, mediaType1);
      assertNull(schema0.getMinItems());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getPattern());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getNullable());
      assertNull(schema0.getFormat());
      assertNull(schema0.getName());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getDescription());
      assertNull(schema0.getType());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.get$ref());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getTitle());
      assertEquals("^A@=+!7$=v", mediaType3.getExample());
      assertEquals("^A@=+!7$=v", mediaType0.getExample());
      assertEquals("^A@=+!7$=v", mediaType1.getExample());
      assertEquals("^A@=+!7$=v", mediaType2.getExample());
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string5));
      
      Encoding encoding0 = null;
      MediaType mediaType4 = mediaType3.addEncoding(string4, encoding0);
      assertNotNull(mediaType4);
      assertSame(mediaType3, mediaType4);
      assertSame(mediaType3, mediaType1);
      assertSame(mediaType3, mediaType0);
      assertSame(mediaType3, mediaType2);
      assertSame(mediaType4, mediaType2);
      assertSame(mediaType4, mediaType1);
      assertSame(mediaType4, mediaType0);
      assertSame(mediaType4, mediaType3);
      assertSame(mediaType0, mediaType4);
      assertSame(mediaType0, mediaType2);
      assertSame(mediaType0, mediaType3);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType1, mediaType3);
      assertSame(mediaType1, mediaType2);
      assertSame(mediaType1, mediaType0);
      assertSame(mediaType1, mediaType4);
      assertNotSame(string4, string3);
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      assertNotSame(string4, string0);
      assertNotSame(string4, string5);
      assertSame(mediaType2, mediaType0);
      assertSame(mediaType2, mediaType4);
      assertSame(mediaType2, mediaType3);
      assertSame(mediaType2, mediaType1);
      assertNull(schema0.getMinItems());
      assertNull(schema0.getDeprecated());
      assertNull(schema0.getReadOnly());
      assertNull(schema0.getPattern());
      assertNull(schema0.getMaxItems());
      assertNull(schema0.getUniqueItems());
      assertNull(schema0.getNullable());
      assertNull(schema0.getFormat());
      assertNull(schema0.getName());
      assertNull(schema0.getMinProperties());
      assertNull(schema0.getExclusiveMinimum());
      assertNull(schema0.getMaxProperties());
      assertNull(schema0.getWriteOnly());
      assertNull(schema0.getMinLength());
      assertNull(schema0.getDescription());
      assertNull(schema0.getType());
      assertNull(schema0.getMaxLength());
      assertNull(schema0.get$ref());
      assertNull(schema0.getExclusiveMaximum());
      assertNull(schema0.getTitle());
      assertEquals("^A@=+!7$=v", mediaType3.getExample());
      assertEquals("^A@=+!7$=v", mediaType4.getExample());
      assertEquals("^A@=+!7$=v", mediaType0.getExample());
      assertEquals("^A@=+!7$=v", mediaType1.getExample());
      assertEquals("^A@=+!7$=v", mediaType2.getExample());
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string5));
      
      String string6 = "com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer";
      String string7 = "";
      String string8 = "";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(exampleObject0).externalValue();
      doReturn(string6, string7).when(exampleObject0).name();
      doReturn(string1, (String) null).when(exampleObject0).summary();
      doReturn(string5, (String) null).when(exampleObject0).value();
      // Undeclared exception!
      try { 
        OperationParser.getMediaType(mediaType4, exampleObject0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.JsonFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test088()  throws Throwable  {
      ApiResponse[] apiResponseArray0 = new ApiResponse[5];
      Content[] contentArray0 = null;
      String string0 = "1La ";
      String string1 = "";
      String string2 = "I:9";
      String string3 = "    delete: ";
      io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[8];
      String string4 = "`";
      String string5 = null;
      String string6 = "com.fasterxml.jackson.core.io.CharTypes";
      String string7 = "";
      String string8 = "";
      String string9 = ";(2Zhgl_`G";
      String string10 = "";
      String string11 = "io.swagger.jaxrs2.OperationParser";
      String string12 = "i5M";
      String string13 = null;
      io.swagger.oas.annotations.links.Link link0 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      doReturn(string4, string5, string6, string7, string8).when(link0).description();
      doReturn((String) null, (String) null).when(link0).name();
      doReturn(string0, string9, string0, string1, string10).when(link0).operationId();
      doReturn(string11, string12, string7, string13, string13).when(link0).operationRef();
      doReturn((Object) null, (Object) null).when(link0).parameters();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      linkArray0[3] = linkArray0[2];
      linkArray0[4] = linkArray0[3];
      linkArray0[6] = linkArray0[5];
      linkArray0[7] = linkArray0[6];
      String string14 = "";
      ApiResponse apiResponse0 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn((Object) contentArray0, (Object) contentArray0, (Object) contentArray0, (Object) contentArray0, (Object) contentArray0).when(apiResponse0).content();
      doReturn(string0, string1, string2, string3, string1).when(apiResponse0).description();
      doReturn(linkArray0).when(apiResponse0).links();
      doReturn(string14).when(apiResponse0).responseCode();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      apiResponseArray0[3] = apiResponseArray0[2];
      apiResponseArray0[4] = apiResponseArray0[3];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      assertNotNull(components0);
      
      Encoding encoding0 = new Encoding();
      assertNotNull(encoding0);
      assertNull(encoding0.getStyle());
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getExplode());
      assertNull(encoding0.getAllowReserved());
      
      Map<String, Header> map0 = encoding0.getHeaders();
      assertNull(map0);
      assertNull(encoding0.getStyle());
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getExplode());
      assertNull(encoding0.getAllowReserved());
      
      Components components1 = components0.headers(map0);
      assertNotNull(components1);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertNull(encoding0.getStyle());
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getExplode());
      assertNull(encoding0.getAllowReserved());
      
      HashMap<String, Callback> hashMap0 = new HashMap<String, Callback>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Components components2 = components1.callbacks(hashMap0);
      assertNotNull(components2);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components2, components1);
      assertSame(components2, components0);
      assertNull(encoding0.getStyle());
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getExplode());
      assertNull(encoding0.getAllowReserved());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      io.swagger.oas.annotations.links.Link[] linkArray1 = new io.swagger.oas.annotations.links.Link[10];
      assertFalse(linkArray1.equals((Object)linkArray0));
      
      String string15 = "Zx+k>>+";
      String string16 = "";
      String string17 = "";
      String string18 = "";
      String string19 = "]K<if> !-,yb}";
      String string20 = "J8f`5o+8595|}<60|zM";
      String string21 = null;
      String string22 = "";
      LinkParameter[] linkParameterArray0 = new LinkParameter[4];
      String string23 = "no description";
      String string24 = "";
      String string25 = "Missing generic type information for ";
      LinkParameter linkParameter0 = mock(LinkParameter.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(linkParameter0).expression();
      doReturn(string23, string24, string6, string20, string25).when(linkParameter0).name();
      linkParameterArray0[0] = linkParameter0;
      linkParameterArray0[1] = linkParameterArray0[0];
      linkParameterArray0[2] = linkParameterArray0[0];
      linkParameterArray0[3] = linkParameterArray0[2];
      io.swagger.oas.annotations.links.Link link1 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      doReturn(string1, string0, string2).when(link1).description();
      doReturn(string20, string21).when(link1).name();
      doReturn(string16, string2, string15).when(link1).operationId();
      doReturn(string15, string2, string18).when(link1).operationRef();
      doReturn((Object) linkParameterArray0, (Object) linkParameterArray0).when(link1).parameters();
      linkArray1[0] = link1;
      linkArray1[1] = linkArray1[0];
      linkArray1[3] = linkArray1[2];
      linkArray1[4] = linkArray1[3];
      linkArray1[5] = linkArray1[4];
      linkArray1[6] = linkArray1[5];
      linkArray1[7] = linkArray1[6];
      linkArray1[8] = linkArray1[7];
      Map<String, Link> map1 = OperationParser.getLinks(linkArray1);
      assertNotNull(map1);
      assertEquals(10, linkArray1.length);
      assertNotSame(linkArray1, linkArray0);
      assertEquals(2, map1.size());
      assertFalse(map1.isEmpty());
      assertFalse(linkArray1.equals((Object)linkArray0));
      
      Components components3 = components2.links(map1);
      assertNotNull(components3);
      assertEquals(10, linkArray1.length);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertSame(components3, components2);
      assertSame(components3, components1);
      assertSame(components3, components0);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(components2, components0);
      assertNotSame(linkArray1, linkArray0);
      assertEquals(2, map1.size());
      assertFalse(map1.isEmpty());
      assertNull(encoding0.getStyle());
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getExplode());
      assertNull(encoding0.getAllowReserved());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(linkArray1.equals((Object)linkArray0));
      
      io.swagger.oas.models.responses.ApiResponse apiResponse1 = null;
      Components components4 = components3.addResponses(string17, apiResponse1);
      assertNotNull(components4);
      assertEquals(10, linkArray1.length);
      assertSame(components0, components4);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertSame(components3, components2);
      assertSame(components3, components1);
      assertSame(components3, components4);
      assertSame(components3, components0);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertSame(components1, components4);
      assertSame(components4, components0);
      assertSame(components4, components1);
      assertSame(components4, components2);
      assertSame(components4, components3);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(components2, components4);
      assertSame(components2, components0);
      assertNotSame(linkArray1, linkArray0);
      assertSame(string17, string22);
      assertNotSame(string17, string11);
      assertNotSame(string17, string0);
      assertNotSame(string17, string3);
      assertNotSame(string17, string23);
      assertNotSame(string17, string25);
      assertNotSame(string17, string2);
      assertSame(string17, string10);
      assertSame(string17, string8);
      assertSame(string17, string16);
      assertNotSame(string17, string12);
      assertSame(string17, string1);
      assertSame(string17, string18);
      assertSame(string17, string14);
      assertSame(string17, string7);
      assertNotSame(string17, string20);
      assertNotSame(string17, string6);
      assertNotSame(string17, string15);
      assertNotSame(string17, string9);
      assertSame(string17, string24);
      assertNotSame(string17, string19);
      assertNotSame(string17, string4);
      assertEquals(2, map1.size());
      assertFalse(map1.isEmpty());
      assertNull(encoding0.getStyle());
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getExplode());
      assertNull(encoding0.getAllowReserved());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(linkArray1.equals((Object)linkArray0));
      assertFalse(string17.equals((Object)string11));
      assertFalse(string17.equals((Object)string0));
      assertFalse(string17.equals((Object)string3));
      assertFalse(string17.equals((Object)string23));
      assertFalse(string17.equals((Object)string25));
      assertFalse(string17.equals((Object)string2));
      assertFalse(string17.equals((Object)string12));
      assertFalse(string17.equals((Object)string20));
      assertFalse(string17.equals((Object)string6));
      assertFalse(string17.equals((Object)string15));
      assertFalse(string17.equals((Object)string9));
      assertFalse(string17.equals((Object)string19));
      assertFalse(string17.equals((Object)string4));
      
      Optional<ApiResponses> optional0 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components4);
      assertNotNull(optional0);
      assertEquals(5, apiResponseArray0.length);
      assertEquals(10, linkArray1.length);
      assertSame(components0, components4);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components0, components3);
      assertSame(components3, components2);
      assertSame(components3, components1);
      assertSame(components3, components4);
      assertSame(components3, components0);
      assertSame(components1, components2);
      assertSame(components1, components0);
      assertSame(components1, components3);
      assertSame(components1, components4);
      assertSame(components4, components0);
      assertSame(components4, components1);
      assertSame(components4, components2);
      assertSame(components4, components3);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(components2, components4);
      assertSame(components2, components0);
      assertNotSame(linkArray1, linkArray0);
      assertSame(string17, string22);
      assertNotSame(string17, string11);
      assertNotSame(string17, string0);
      assertNotSame(string17, string3);
      assertNotSame(string17, string23);
      assertNotSame(string17, string25);
      assertNotSame(string17, string2);
      assertSame(string17, string10);
      assertSame(string17, string8);
      assertSame(string17, string16);
      assertNotSame(string17, string12);
      assertSame(string17, string1);
      assertSame(string17, string18);
      assertSame(string17, string14);
      assertSame(string17, string7);
      assertNotSame(string17, string20);
      assertNotSame(string17, string6);
      assertNotSame(string17, string15);
      assertNotSame(string17, string9);
      assertSame(string17, string24);
      assertNotSame(string17, string19);
      assertNotSame(string17, string4);
      assertEquals(2, map1.size());
      assertFalse(map1.isEmpty());
      assertNull(encoding0.getStyle());
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getExplode());
      assertNull(encoding0.getAllowReserved());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(linkArray1.equals((Object)linkArray0));
      assertFalse(string17.equals((Object)string11));
      assertFalse(string17.equals((Object)string0));
      assertFalse(string17.equals((Object)string3));
      assertFalse(string17.equals((Object)string23));
      assertFalse(string17.equals((Object)string25));
      assertFalse(string17.equals((Object)string2));
      assertFalse(string17.equals((Object)string12));
      assertFalse(string17.equals((Object)string20));
      assertFalse(string17.equals((Object)string6));
      assertFalse(string17.equals((Object)string15));
      assertFalse(string17.equals((Object)string9));
      assertFalse(string17.equals((Object)string19));
      assertFalse(string17.equals((Object)string4));
  }

  @Test(timeout = 11000)
  public void test089()  throws Throwable  {
      String string0 = "com.fasterxml.jackson.databind.ext.NioPathDeserializer";
      String string1 = "";
      String string2 = "uN";
      String string3 = "";
      LinkParameter[] linkParameterArray0 = new LinkParameter[2];
      String string4 = "<Z-ntNI81";
      String string5 = "UB|[^:7UK=w";
      String string6 = "aEhh$";
      LinkParameter linkParameter0 = mock(LinkParameter.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(linkParameter0).expression();
      doReturn(string0, string0, string4, string5, string6).when(linkParameter0).name();
      linkParameterArray0[0] = linkParameter0;
      linkParameterArray0[1] = linkParameterArray0[0];
      io.swagger.oas.annotations.links.Link link0 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string3).when(link0).description();
      doReturn(string1).when(link0).operationId();
      doReturn(string2, string2).when(link0).operationRef();
      doReturn(linkParameterArray0).when(link0).parameters();
      Optional<Link> optional0 = OperationParser.getLink(link0);
      assertNotNull(optional0);
      assertEquals(2, linkParameterArray0.length);
      assertNotSame(string0, string6);
      assertNotSame(string0, string5);
      assertNotSame(string0, string3);
      assertNotSame(string0, string4);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string6);
      assertNotSame(string1, string4);
      assertNotSame(string1, string5);
      assertNotSame(string1, string2);
      assertSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string5);
      assertNotSame(string2, string0);
      assertNotSame(string2, string4);
      assertNotSame(string2, string6);
      assertNotSame(string3, string4);
      assertNotSame(string3, string2);
      assertNotSame(string3, string6);
      assertNotSame(string3, string0);
      assertSame(string3, string1);
      assertNotSame(string3, string5);
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string6));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string5));
      
      String string7 = "";
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(string7).when(license0).name();
      doReturn(string7).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional1 = OperationParser.getLicense(license0);
      assertNotNull(optional1);
      assertNotSame(string7, string5);
      assertSame(string7, string1);
      assertNotSame(string7, string6);
      assertNotSame(string7, string2);
      assertSame(string7, string3);
      assertNotSame(string7, string4);
      assertNotSame(string7, string0);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = string0;
      stringArray0[1] = string7;
      stringArray0[2] = string0;
      stringArray0[3] = string2;
      stringArray0[4] = string0;
      stringArray0[5] = string7;
      boolean boolean0 = true;
      boolean boolean1 = true;
      String string8 = "";
      String string9 = "{JhE";
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string8).when(externalDocumentation0).description();
      doReturn(string0, string9).when(externalDocumentation0).url();
      String string10 = "";
      int int0 = 707;
      int int1 = (-3145);
      boolean boolean2 = false;
      String string11 = ".Fi";
      boolean boolean3 = false;
      int int2 = 4376;
      String string12 = "";
      int int3 = 2020;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(stringArray0).when(schema0).allowableValues();
      doReturn(string7).when(schema0).defaultValue();
      doReturn(boolean0, boolean1).when(schema0).deprecated();
      doReturn(stringArray0[0], stringArray0[4]).when(schema0).description();
      doReturn(stringArray0[4], string2, string0, string11).when(schema0).example();
      doReturn(boolean1, boolean3).when(schema0).exclusiveMaximum();
      doReturn(boolean0, boolean2).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema0).externalDocs();
      doReturn(string10).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(int2, int3).when(schema0).maxProperties();
      doReturn(int1).when(schema0).minProperties();
      doReturn(stringArray0[5]).when(schema0).pattern();
      doReturn(boolean2).when(schema0).readOnly();
      doReturn(string1).when(schema0).ref();
      doReturn(stringArray0[0], string12).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional2 = (Optional<io.swagger.oas.models.media.Schema>)OperationParser.getSchemaFromAnnotation(schema0);
      assertNotNull(optional2);
      assertEquals(6, stringArray0.length);
      assertNotSame(string11, string1);
      assertNotSame(string11, string4);
      assertNotSame(string11, string2);
      assertNotSame(string11, string10);
      assertNotSame(string11, string12);
      assertNotSame(string11, string6);
      assertNotSame(string11, string9);
      assertNotSame(string11, string8);
      assertNotSame(string11, string0);
      assertNotSame(string11, string5);
      assertNotSame(string11, string3);
      assertNotSame(string11, string7);
      assertNotSame(string0, string12);
      assertNotSame(string0, string6);
      assertNotSame(string0, string9);
      assertNotSame(string0, string8);
      assertNotSame(string0, string5);
      assertNotSame(string0, string3);
      assertNotSame(string0, string7);
      assertNotSame(string0, string4);
      assertNotSame(string0, string11);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string10);
      assertSame(string1, string10);
      assertNotSame(string1, string6);
      assertNotSame(string1, string9);
      assertSame(string1, string8);
      assertNotSame(string1, string4);
      assertNotSame(string1, string5);
      assertSame(string1, string7);
      assertNotSame(string1, string2);
      assertSame(string1, string3);
      assertNotSame(string1, string0);
      assertSame(string1, string12);
      assertNotSame(string1, string11);
      assertNotSame(string2, string8);
      assertNotSame(string2, string10);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string12);
      assertNotSame(string2, string5);
      assertNotSame(string2, string7);
      assertNotSame(string2, string0);
      assertNotSame(string2, string4);
      assertNotSame(string2, string6);
      assertNotSame(string2, string9);
      assertNotSame(string2, string11);
      assertSame(string12, string1);
      assertNotSame(string12, string9);
      assertNotSame(string12, string6);
      assertSame(string12, string10);
      assertSame(string12, string8);
      assertNotSame(string12, string4);
      assertNotSame(string12, string0);
      assertNotSame(string12, string5);
      assertSame(string12, string3);
      assertSame(string12, string7);
      assertNotSame(string12, string2);
      assertNotSame(string12, string11);
      assertNotSame(string8, string11);
      assertNotSame(string8, string2);
      assertSame(string8, string12);
      assertSame(string8, string3);
      assertSame(string8, string7);
      assertSame(string8, string1);
      assertNotSame(string8, string9);
      assertNotSame(string8, string6);
      assertSame(string8, string10);
      assertNotSame(string8, string5);
      assertNotSame(string8, string4);
      assertNotSame(string8, string0);
      assertNotSame(string9, string4);
      assertNotSame(string9, string11);
      assertNotSame(string9, string2);
      assertNotSame(string9, string10);
      assertNotSame(string9, string1);
      assertNotSame(string9, string8);
      assertNotSame(string9, string5);
      assertNotSame(string9, string7);
      assertNotSame(string9, string0);
      assertNotSame(string9, string3);
      assertNotSame(string9, string12);
      assertNotSame(string9, string6);
      assertSame(string10, string8);
      assertNotSame(string10, string9);
      assertNotSame(string10, string4);
      assertNotSame(string10, string5);
      assertNotSame(string10, string6);
      assertSame(string10, string1);
      assertNotSame(string10, string2);
      assertSame(string10, string3);
      assertSame(string10, string7);
      assertNotSame(string10, string0);
      assertNotSame(string10, string11);
      assertSame(string10, string12);
      assertSame(string7, string8);
      assertNotSame(string7, string5);
      assertSame(string7, string1);
      assertNotSame(string7, string6);
      assertSame(string7, string10);
      assertNotSame(string7, string11);
      assertNotSame(string7, string2);
      assertSame(string7, string3);
      assertSame(string7, string12);
      assertNotSame(string7, string4);
      assertNotSame(string7, string0);
      assertNotSame(string7, string9);
      assertFalse(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string12));
      assertFalse(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string9));
      assertFalse(string11.equals((Object)string8));
      assertFalse(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string5));
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string7));
      assertFalse(string0.equals((Object)string12));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string9));
      assertFalse(string0.equals((Object)string8));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string7));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string11));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string10));
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string9));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string11));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int2 == int3);
      assertFalse(string2.equals((Object)string8));
      assertFalse(string2.equals((Object)string10));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string12));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string7));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string2.equals((Object)string9));
      assertFalse(string2.equals((Object)string11));
      assertFalse(string12.equals((Object)string9));
      assertFalse(string12.equals((Object)string6));
      assertFalse(string12.equals((Object)string4));
      assertFalse(string12.equals((Object)string0));
      assertFalse(string12.equals((Object)string5));
      assertFalse(string12.equals((Object)string2));
      assertFalse(string12.equals((Object)string11));
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string11));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string9));
      assertFalse(boolean0 == boolean3);
      assertFalse(boolean0 == boolean2);
      assertFalse(boolean1 == boolean2);
      assertFalse(boolean1 == boolean3);
      assertFalse(string8.equals((Object)string11));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string9));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string11));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string10));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string12));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string11));
      assertFalse(int0 == int3);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int3);
      assertFalse(int1 == int2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      Content[] contentArray0 = null;
      io.swagger.oas.annotations.parameters.RequestBody requestBody0 = mock(io.swagger.oas.annotations.parameters.RequestBody.class, new ViolatedAssumptionAnswer());
      doReturn(contentArray0).when(requestBody0).content();
      doReturn(stringArray0[3], string7).when(requestBody0).description();
      doReturn(boolean0, boolean1).when(requestBody0).required();
      Components components0 = new Components();
      assertNotNull(components0);
      
      io.swagger.oas.models.parameters.Parameter parameter0 = new io.swagger.oas.models.parameters.Parameter();
      assertNotNull(parameter0);
      assertNull(parameter0.getRequired());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getExample());
      assertNull(parameter0.get$ref());
      assertNull(parameter0.getIn());
      assertNull(parameter0.getName());
      assertNull(parameter0.getExplode());
      assertNull(parameter0.getAllowReserved());
      
      String string13 = "io.swagger.jaxrs2.OperationParser";
      io.swagger.oas.models.parameters.Parameter parameter1 = parameter0.$ref(string13);
      assertNotNull(parameter1);
      assertSame(parameter0, parameter1);
      assertNotSame(string13, string10);
      assertNotSame(string13, string2);
      assertNotSame(string13, string11);
      assertNotSame(string13, string5);
      assertNotSame(string13, string1);
      assertNotSame(string13, string8);
      assertNotSame(string13, string9);
      assertNotSame(string13, string7);
      assertNotSame(string13, string0);
      assertNotSame(string13, string4);
      assertNotSame(string13, string3);
      assertNotSame(string13, string12);
      assertNotSame(string13, string6);
      assertSame(parameter1, parameter0);
      assertNull(parameter0.getRequired());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getExample());
      assertNull(parameter0.getIn());
      assertNull(parameter0.getName());
      assertNull(parameter0.getExplode());
      assertEquals("io.swagger.jaxrs2.OperationParser", parameter0.get$ref());
      assertNull(parameter0.getAllowReserved());
      assertNull(parameter1.getAllowReserved());
      assertNull(parameter1.getDeprecated());
      assertNull(parameter1.getExplode());
      assertNull(parameter1.getIn());
      assertNull(parameter1.getName());
      assertNull(parameter1.getStyle());
      assertNull(parameter1.getExample());
      assertNull(parameter1.getAllowEmptyValue());
      assertEquals("io.swagger.jaxrs2.OperationParser", parameter1.get$ref());
      assertNull(parameter1.getDescription());
      assertNull(parameter1.getRequired());
      assertFalse(string13.equals((Object)string10));
      assertFalse(string13.equals((Object)string2));
      assertFalse(string13.equals((Object)string11));
      assertFalse(string13.equals((Object)string5));
      assertFalse(string13.equals((Object)string1));
      assertFalse(string13.equals((Object)string8));
      assertFalse(string13.equals((Object)string9));
      assertFalse(string13.equals((Object)string7));
      assertFalse(string13.equals((Object)string0));
      assertFalse(string13.equals((Object)string4));
      assertFalse(string13.equals((Object)string3));
      assertFalse(string13.equals((Object)string12));
      assertFalse(string13.equals((Object)string6));
      
      Map<String, Example> map0 = parameter1.getExamples();
      assertNull(map0);
      assertSame(parameter0, parameter1);
      assertNotSame(string13, string10);
      assertNotSame(string13, string2);
      assertNotSame(string13, string11);
      assertNotSame(string13, string5);
      assertNotSame(string13, string1);
      assertNotSame(string13, string8);
      assertNotSame(string13, string9);
      assertNotSame(string13, string7);
      assertNotSame(string13, string0);
      assertNotSame(string13, string4);
      assertNotSame(string13, string3);
      assertNotSame(string13, string12);
      assertNotSame(string13, string6);
      assertSame(parameter1, parameter0);
      assertNull(parameter0.getRequired());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getExample());
      assertNull(parameter0.getIn());
      assertNull(parameter0.getName());
      assertNull(parameter0.getExplode());
      assertEquals("io.swagger.jaxrs2.OperationParser", parameter0.get$ref());
      assertNull(parameter0.getAllowReserved());
      assertNull(parameter1.getAllowReserved());
      assertNull(parameter1.getDeprecated());
      assertNull(parameter1.getExplode());
      assertNull(parameter1.getIn());
      assertNull(parameter1.getName());
      assertNull(parameter1.getStyle());
      assertNull(parameter1.getExample());
      assertNull(parameter1.getAllowEmptyValue());
      assertEquals("io.swagger.jaxrs2.OperationParser", parameter1.get$ref());
      assertNull(parameter1.getDescription());
      assertNull(parameter1.getRequired());
      assertFalse(string13.equals((Object)string10));
      assertFalse(string13.equals((Object)string2));
      assertFalse(string13.equals((Object)string11));
      assertFalse(string13.equals((Object)string5));
      assertFalse(string13.equals((Object)string1));
      assertFalse(string13.equals((Object)string8));
      assertFalse(string13.equals((Object)string9));
      assertFalse(string13.equals((Object)string7));
      assertFalse(string13.equals((Object)string0));
      assertFalse(string13.equals((Object)string4));
      assertFalse(string13.equals((Object)string3));
      assertFalse(string13.equals((Object)string12));
      assertFalse(string13.equals((Object)string6));
      
      Components components1 = components0.examples(map0);
      assertNotNull(components1);
      assertSame(components0, components1);
      assertSame(parameter0, parameter1);
      assertNotSame(string13, string10);
      assertNotSame(string13, string2);
      assertNotSame(string13, string11);
      assertNotSame(string13, string5);
      assertNotSame(string13, string1);
      assertNotSame(string13, string8);
      assertNotSame(string13, string9);
      assertNotSame(string13, string7);
      assertNotSame(string13, string0);
      assertNotSame(string13, string4);
      assertNotSame(string13, string3);
      assertNotSame(string13, string12);
      assertNotSame(string13, string6);
      assertSame(parameter1, parameter0);
      assertSame(components1, components0);
      assertNull(parameter0.getRequired());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getExample());
      assertNull(parameter0.getIn());
      assertNull(parameter0.getName());
      assertNull(parameter0.getExplode());
      assertEquals("io.swagger.jaxrs2.OperationParser", parameter0.get$ref());
      assertNull(parameter0.getAllowReserved());
      assertNull(parameter1.getAllowReserved());
      assertNull(parameter1.getDeprecated());
      assertNull(parameter1.getExplode());
      assertNull(parameter1.getIn());
      assertNull(parameter1.getName());
      assertNull(parameter1.getStyle());
      assertNull(parameter1.getExample());
      assertNull(parameter1.getAllowEmptyValue());
      assertEquals("io.swagger.jaxrs2.OperationParser", parameter1.get$ref());
      assertNull(parameter1.getDescription());
      assertNull(parameter1.getRequired());
      assertFalse(string13.equals((Object)string10));
      assertFalse(string13.equals((Object)string2));
      assertFalse(string13.equals((Object)string11));
      assertFalse(string13.equals((Object)string5));
      assertFalse(string13.equals((Object)string1));
      assertFalse(string13.equals((Object)string8));
      assertFalse(string13.equals((Object)string9));
      assertFalse(string13.equals((Object)string7));
      assertFalse(string13.equals((Object)string0));
      assertFalse(string13.equals((Object)string4));
      assertFalse(string13.equals((Object)string3));
      assertFalse(string13.equals((Object)string12));
      assertFalse(string13.equals((Object)string6));
      
      ApiResponses apiResponses0 = new ApiResponses();
      assertNotNull(apiResponses0);
      assertEquals(0, apiResponses0.size());
      assertTrue(apiResponses0.isEmpty());
      
      String string14 = "g<+Ant,AU!3l2";
      io.swagger.oas.models.responses.ApiResponse apiResponse0 = new io.swagger.oas.models.responses.ApiResponse();
      assertNotNull(apiResponse0);
      assertNull(apiResponse0.get$ref());
      assertNull(apiResponse0.getDescription());
      
      ApiResponses apiResponses1 = apiResponses0.addApiResponse(string14, apiResponse0);
      assertNotNull(apiResponses1);
      assertNotSame(string14, string11);
      assertNotSame(string14, string13);
      assertNotSame(string14, string1);
      assertNotSame(string14, string9);
      assertNotSame(string14, string10);
      assertNotSame(string14, string0);
      assertNotSame(string14, string4);
      assertNotSame(string14, string3);
      assertNotSame(string14, string7);
      assertNotSame(string14, string6);
      assertNotSame(string14, string12);
      assertNotSame(string14, string8);
      assertNotSame(string14, string2);
      assertNotSame(string14, string5);
      assertSame(apiResponses1, apiResponses0);
      assertSame(apiResponses0, apiResponses1);
      assertNull(apiResponse0.get$ref());
      assertNull(apiResponse0.getDescription());
      assertFalse(apiResponses1.isEmpty());
      assertEquals(1, apiResponses1.size());
      assertEquals(1, apiResponses0.size());
      assertFalse(apiResponses0.isEmpty());
      assertFalse(string14.equals((Object)string11));
      assertFalse(string14.equals((Object)string13));
      assertFalse(string14.equals((Object)string1));
      assertFalse(string14.equals((Object)string9));
      assertFalse(string14.equals((Object)string10));
      assertFalse(string14.equals((Object)string0));
      assertFalse(string14.equals((Object)string4));
      assertFalse(string14.equals((Object)string3));
      assertFalse(string14.equals((Object)string7));
      assertFalse(string14.equals((Object)string6));
      assertFalse(string14.equals((Object)string12));
      assertFalse(string14.equals((Object)string8));
      assertFalse(string14.equals((Object)string2));
      assertFalse(string14.equals((Object)string5));
      
      ApiResponses apiResponses2 = apiResponses1.addApiResponse(string13, apiResponse0);
      assertNotNull(apiResponses2);
      assertNotSame(string14, string11);
      assertNotSame(string14, string13);
      assertNotSame(string14, string1);
      assertNotSame(string14, string9);
      assertNotSame(string14, string10);
      assertNotSame(string14, string0);
      assertNotSame(string14, string4);
      assertNotSame(string14, string3);
      assertNotSame(string14, string7);
      assertNotSame(string14, string6);
      assertNotSame(string14, string12);
      assertNotSame(string14, string8);
      assertNotSame(string14, string2);
      assertNotSame(string14, string5);
      assertSame(apiResponses1, apiResponses2);
      assertSame(apiResponses1, apiResponses0);
      assertSame(apiResponses2, apiResponses0);
      assertSame(apiResponses2, apiResponses1);
      assertNotSame(string13, string14);
      assertNotSame(string13, string10);
      assertNotSame(string13, string2);
      assertNotSame(string13, string11);
      assertNotSame(string13, string5);
      assertNotSame(string13, string1);
      assertNotSame(string13, string8);
      assertNotSame(string13, string9);
      assertNotSame(string13, string7);
      assertNotSame(string13, string0);
      assertNotSame(string13, string4);
      assertNotSame(string13, string3);
      assertNotSame(string13, string12);
      assertNotSame(string13, string6);
      assertSame(apiResponses0, apiResponses2);
      assertSame(apiResponses0, apiResponses1);
      assertNull(apiResponse0.get$ref());
      assertNull(apiResponse0.getDescription());
      assertFalse(apiResponses1.isEmpty());
      assertEquals(2, apiResponses1.size());
      assertFalse(apiResponses2.isEmpty());
      assertEquals(2, apiResponses2.size());
      assertEquals(2, apiResponses0.size());
      assertFalse(apiResponses0.isEmpty());
      assertFalse(string14.equals((Object)string11));
      assertFalse(string14.equals((Object)string13));
      assertFalse(string14.equals((Object)string1));
      assertFalse(string14.equals((Object)string9));
      assertFalse(string14.equals((Object)string10));
      assertFalse(string14.equals((Object)string0));
      assertFalse(string14.equals((Object)string4));
      assertFalse(string14.equals((Object)string3));
      assertFalse(string14.equals((Object)string7));
      assertFalse(string14.equals((Object)string6));
      assertFalse(string14.equals((Object)string12));
      assertFalse(string14.equals((Object)string8));
      assertFalse(string14.equals((Object)string2));
      assertFalse(string14.equals((Object)string5));
      assertFalse(string13.equals((Object)string14));
      assertFalse(string13.equals((Object)string10));
      assertFalse(string13.equals((Object)string2));
      assertFalse(string13.equals((Object)string11));
      assertFalse(string13.equals((Object)string5));
      assertFalse(string13.equals((Object)string1));
      assertFalse(string13.equals((Object)string8));
      assertFalse(string13.equals((Object)string9));
      assertFalse(string13.equals((Object)string7));
      assertFalse(string13.equals((Object)string0));
      assertFalse(string13.equals((Object)string4));
      assertFalse(string13.equals((Object)string3));
      assertFalse(string13.equals((Object)string12));
      assertFalse(string13.equals((Object)string6));
      
      String string15 = "jko;jmHJ|E";
      ApiResponses apiResponses3 = apiResponses2.addApiResponse(string15, apiResponse0);
      assertNotNull(apiResponses3);
      assertNotSame(string14, string11);
      assertNotSame(string14, string13);
      assertNotSame(string14, string1);
      assertNotSame(string14, string9);
      assertNotSame(string14, string10);
      assertNotSame(string14, string0);
      assertNotSame(string14, string4);
      assertNotSame(string14, string3);
      assertNotSame(string14, string7);
      assertNotSame(string14, string6);
      assertNotSame(string14, string15);
      assertNotSame(string14, string12);
      assertNotSame(string14, string8);
      assertNotSame(string14, string2);
      assertNotSame(string14, string5);
      assertSame(apiResponses1, apiResponses2);
      assertSame(apiResponses1, apiResponses3);
      assertSame(apiResponses1, apiResponses0);
      assertSame(apiResponses2, apiResponses0);
      assertSame(apiResponses2, apiResponses1);
      assertSame(apiResponses2, apiResponses3);
      assertNotSame(string15, string12);
      assertNotSame(string15, string1);
      assertNotSame(string15, string4);
      assertNotSame(string15, string8);
      assertNotSame(string15, string14);
      assertNotSame(string15, string0);
      assertNotSame(string15, string6);
      assertNotSame(string15, string11);
      assertNotSame(string15, string13);
      assertNotSame(string15, string3);
      assertNotSame(string15, string7);
      assertNotSame(string15, string10);
      assertNotSame(string15, string5);
      assertNotSame(string15, string9);
      assertNotSame(string15, string2);
      assertSame(apiResponses3, apiResponses2);
      assertSame(apiResponses3, apiResponses0);
      assertSame(apiResponses3, apiResponses1);
      assertNotSame(string13, string14);
      assertNotSame(string13, string15);
      assertNotSame(string13, string10);
      assertNotSame(string13, string2);
      assertNotSame(string13, string11);
      assertNotSame(string13, string5);
      assertNotSame(string13, string1);
      assertNotSame(string13, string8);
      assertNotSame(string13, string9);
      assertNotSame(string13, string7);
      assertNotSame(string13, string0);
      assertNotSame(string13, string4);
      assertNotSame(string13, string3);
      assertNotSame(string13, string12);
      assertNotSame(string13, string6);
      assertSame(apiResponses0, apiResponses2);
      assertSame(apiResponses0, apiResponses1);
      assertSame(apiResponses0, apiResponses3);
      assertNull(apiResponse0.get$ref());
      assertNull(apiResponse0.getDescription());
      assertFalse(apiResponses1.isEmpty());
      assertEquals(3, apiResponses1.size());
      assertFalse(apiResponses2.isEmpty());
      assertEquals(3, apiResponses2.size());
      assertFalse(apiResponses3.isEmpty());
      assertEquals(3, apiResponses3.size());
      assertEquals(3, apiResponses0.size());
      assertFalse(apiResponses0.isEmpty());
      assertFalse(string14.equals((Object)string11));
      assertFalse(string14.equals((Object)string13));
      assertFalse(string14.equals((Object)string1));
      assertFalse(string14.equals((Object)string9));
      assertFalse(string14.equals((Object)string10));
      assertFalse(string14.equals((Object)string0));
      assertFalse(string14.equals((Object)string4));
      assertFalse(string14.equals((Object)string3));
      assertFalse(string14.equals((Object)string7));
      assertFalse(string14.equals((Object)string6));
      assertFalse(string14.equals((Object)string15));
      assertFalse(string14.equals((Object)string12));
      assertFalse(string14.equals((Object)string8));
      assertFalse(string14.equals((Object)string2));
      assertFalse(string14.equals((Object)string5));
      assertFalse(string15.equals((Object)string12));
      assertFalse(string15.equals((Object)string1));
      assertFalse(string15.equals((Object)string4));
      assertFalse(string15.equals((Object)string8));
      assertFalse(string15.equals((Object)string14));
      assertFalse(string15.equals((Object)string0));
      assertFalse(string15.equals((Object)string6));
      assertFalse(string15.equals((Object)string11));
      assertFalse(string15.equals((Object)string13));
      assertFalse(string15.equals((Object)string3));
      assertFalse(string15.equals((Object)string7));
      assertFalse(string15.equals((Object)string10));
      assertFalse(string15.equals((Object)string5));
      assertFalse(string15.equals((Object)string9));
      assertFalse(string15.equals((Object)string2));
      assertFalse(string13.equals((Object)string14));
      assertFalse(string13.equals((Object)string15));
      assertFalse(string13.equals((Object)string10));
      assertFalse(string13.equals((Object)string2));
      assertFalse(string13.equals((Object)string11));
      assertFalse(string13.equals((Object)string5));
      assertFalse(string13.equals((Object)string1));
      assertFalse(string13.equals((Object)string8));
      assertFalse(string13.equals((Object)string9));
      assertFalse(string13.equals((Object)string7));
      assertFalse(string13.equals((Object)string0));
      assertFalse(string13.equals((Object)string4));
      assertFalse(string13.equals((Object)string3));
      assertFalse(string13.equals((Object)string12));
      assertFalse(string13.equals((Object)string6));
      
      ApiResponses apiResponses4 = apiResponses3.addApiResponse(apiResponses1.DEFAULT, apiResponse0);
      assertNotNull(apiResponses4);
      assertNotSame(string14, string11);
      assertNotSame(string14, string13);
      assertNotSame(string14, string1);
      assertNotSame(string14, string9);
      assertNotSame(string14, string10);
      assertNotSame(string14, string0);
      assertNotSame(string14, string4);
      assertNotSame(string14, string3);
      assertNotSame(string14, string7);
      assertNotSame(string14, string6);
      assertNotSame(string14, string15);
      assertNotSame(string14, string12);
      assertNotSame(string14, string8);
      assertNotSame(string14, string2);
      assertNotSame(string14, string5);
      assertSame(apiResponses1, apiResponses4);
      assertSame(apiResponses1, apiResponses2);
      assertSame(apiResponses1, apiResponses3);
      assertSame(apiResponses1, apiResponses0);
      assertSame(apiResponses2, apiResponses0);
      assertSame(apiResponses2, apiResponses1);
      assertSame(apiResponses2, apiResponses3);
      assertSame(apiResponses2, apiResponses4);
      assertNotSame(string15, string12);
      assertNotSame(string15, string1);
      assertNotSame(string15, string4);
      assertNotSame(string15, string8);
      assertNotSame(string15, string14);
      assertNotSame(string15, string0);
      assertNotSame(string15, string6);
      assertNotSame(string15, string11);
      assertNotSame(string15, string13);
      assertNotSame(string15, string3);
      assertNotSame(string15, string7);
      assertNotSame(string15, string10);
      assertNotSame(string15, string5);
      assertNotSame(string15, string9);
      assertNotSame(string15, string2);
      assertSame(apiResponses3, apiResponses2);
      assertSame(apiResponses3, apiResponses4);
      assertSame(apiResponses3, apiResponses0);
      assertSame(apiResponses3, apiResponses1);
      assertSame(apiResponses4, apiResponses0);
      assertSame(apiResponses4, apiResponses1);
      assertSame(apiResponses4, apiResponses3);
      assertSame(apiResponses4, apiResponses2);
      assertNotSame(string13, string14);
      assertNotSame(string13, string15);
      assertNotSame(string13, string10);
      assertNotSame(string13, string2);
      assertNotSame(string13, string11);
      assertNotSame(string13, string5);
      assertNotSame(string13, string1);
      assertNotSame(string13, string8);
      assertNotSame(string13, string9);
      assertNotSame(string13, string7);
      assertNotSame(string13, string0);
      assertNotSame(string13, string4);
      assertNotSame(string13, string3);
      assertNotSame(string13, string12);
      assertNotSame(string13, string6);
      assertSame(apiResponses0, apiResponses2);
      assertSame(apiResponses0, apiResponses1);
      assertSame(apiResponses0, apiResponses3);
      assertSame(apiResponses0, apiResponses4);
      assertNull(apiResponse0.get$ref());
      assertNull(apiResponse0.getDescription());
      assertFalse(apiResponses1.isEmpty());
      assertEquals(4, apiResponses1.size());
      assertFalse(apiResponses2.isEmpty());
      assertEquals(4, apiResponses2.size());
      assertFalse(apiResponses3.isEmpty());
      assertEquals(4, apiResponses3.size());
      assertEquals(4, apiResponses4.size());
      assertFalse(apiResponses4.isEmpty());
      assertEquals(4, apiResponses0.size());
      assertFalse(apiResponses0.isEmpty());
      assertFalse(string14.equals((Object)string11));
      assertFalse(string14.equals((Object)string13));
      assertFalse(string14.equals((Object)string1));
      assertFalse(string14.equals((Object)string9));
      assertFalse(string14.equals((Object)string10));
      assertFalse(string14.equals((Object)string0));
      assertFalse(string14.equals((Object)string4));
      assertFalse(string14.equals((Object)string3));
      assertFalse(string14.equals((Object)string7));
      assertFalse(string14.equals((Object)string6));
      assertFalse(string14.equals((Object)string15));
      assertFalse(string14.equals((Object)string12));
      assertFalse(string14.equals((Object)string8));
      assertFalse(string14.equals((Object)string2));
      assertFalse(string14.equals((Object)string5));
      assertFalse(string15.equals((Object)string12));
      assertFalse(string15.equals((Object)string1));
      assertFalse(string15.equals((Object)string4));
      assertFalse(string15.equals((Object)string8));
      assertFalse(string15.equals((Object)string14));
      assertFalse(string15.equals((Object)string0));
      assertFalse(string15.equals((Object)string6));
      assertFalse(string15.equals((Object)string11));
      assertFalse(string15.equals((Object)string13));
      assertFalse(string15.equals((Object)string3));
      assertFalse(string15.equals((Object)string7));
      assertFalse(string15.equals((Object)string10));
      assertFalse(string15.equals((Object)string5));
      assertFalse(string15.equals((Object)string9));
      assertFalse(string15.equals((Object)string2));
      assertFalse(string13.equals((Object)string14));
      assertFalse(string13.equals((Object)string15));
      assertFalse(string13.equals((Object)string10));
      assertFalse(string13.equals((Object)string2));
      assertFalse(string13.equals((Object)string11));
      assertFalse(string13.equals((Object)string5));
      assertFalse(string13.equals((Object)string1));
      assertFalse(string13.equals((Object)string8));
      assertFalse(string13.equals((Object)string9));
      assertFalse(string13.equals((Object)string7));
      assertFalse(string13.equals((Object)string0));
      assertFalse(string13.equals((Object)string4));
      assertFalse(string13.equals((Object)string3));
      assertFalse(string13.equals((Object)string12));
      assertFalse(string13.equals((Object)string6));
      
      ApiResponses apiResponses5 = apiResponses4._default(apiResponse0);
      assertNotNull(apiResponses5);
      assertNotSame(string14, string11);
      assertNotSame(string14, string13);
      assertNotSame(string14, string1);
      assertNotSame(string14, string9);
      assertNotSame(string14, string10);
      assertNotSame(string14, string0);
      assertNotSame(string14, string4);
      assertNotSame(string14, string3);
      assertNotSame(string14, string7);
      assertNotSame(string14, string6);
      assertNotSame(string14, string15);
      assertNotSame(string14, string12);
      assertNotSame(string14, string8);
      assertNotSame(string14, string2);
      assertNotSame(string14, string5);
      assertSame(apiResponses1, apiResponses4);
      assertSame(apiResponses1, apiResponses2);
      assertSame(apiResponses1, apiResponses3);
      assertSame(apiResponses1, apiResponses5);
      assertSame(apiResponses1, apiResponses0);
      assertSame(apiResponses2, apiResponses5);
      assertSame(apiResponses2, apiResponses0);
      assertSame(apiResponses2, apiResponses1);
      assertSame(apiResponses2, apiResponses3);
      assertSame(apiResponses2, apiResponses4);
      assertNotSame(string15, string12);
      assertNotSame(string15, string1);
      assertNotSame(string15, string4);
      assertNotSame(string15, string8);
      assertNotSame(string15, string14);
      assertNotSame(string15, string0);
      assertNotSame(string15, string6);
      assertNotSame(string15, string11);
      assertNotSame(string15, string13);
      assertNotSame(string15, string3);
      assertNotSame(string15, string7);
      assertNotSame(string15, string10);
      assertNotSame(string15, string5);
      assertNotSame(string15, string9);
      assertNotSame(string15, string2);
      assertSame(apiResponses3, apiResponses5);
      assertSame(apiResponses3, apiResponses2);
      assertSame(apiResponses3, apiResponses4);
      assertSame(apiResponses3, apiResponses0);
      assertSame(apiResponses3, apiResponses1);
      assertSame(apiResponses4, apiResponses0);
      assertSame(apiResponses4, apiResponses1);
      assertSame(apiResponses4, apiResponses3);
      assertSame(apiResponses4, apiResponses5);
      assertSame(apiResponses4, apiResponses2);
      assertSame(apiResponses5, apiResponses2);
      assertSame(apiResponses5, apiResponses3);
      assertSame(apiResponses5, apiResponses1);
      assertSame(apiResponses5, apiResponses0);
      assertSame(apiResponses5, apiResponses4);
      assertNotSame(string13, string14);
      assertNotSame(string13, string15);
      assertNotSame(string13, string10);
      assertNotSame(string13, string2);
      assertNotSame(string13, string11);
      assertNotSame(string13, string5);
      assertNotSame(string13, string1);
      assertNotSame(string13, string8);
      assertNotSame(string13, string9);
      assertNotSame(string13, string7);
      assertNotSame(string13, string0);
      assertNotSame(string13, string4);
      assertNotSame(string13, string3);
      assertNotSame(string13, string12);
      assertNotSame(string13, string6);
      assertSame(apiResponses0, apiResponses2);
      assertSame(apiResponses0, apiResponses5);
      assertSame(apiResponses0, apiResponses1);
      assertSame(apiResponses0, apiResponses3);
      assertSame(apiResponses0, apiResponses4);
      assertNull(apiResponse0.get$ref());
      assertNull(apiResponse0.getDescription());
      assertFalse(apiResponses1.isEmpty());
      assertEquals(4, apiResponses1.size());
      assertFalse(apiResponses2.isEmpty());
      assertEquals(4, apiResponses2.size());
      assertFalse(apiResponses3.isEmpty());
      assertEquals(4, apiResponses3.size());
      assertEquals(4, apiResponses4.size());
      assertFalse(apiResponses4.isEmpty());
      assertEquals(4, apiResponses5.size());
      assertFalse(apiResponses5.isEmpty());
      assertEquals(4, apiResponses0.size());
      assertFalse(apiResponses0.isEmpty());
      assertFalse(string14.equals((Object)string11));
      assertFalse(string14.equals((Object)string13));
      assertFalse(string14.equals((Object)string1));
      assertFalse(string14.equals((Object)string9));
      assertFalse(string14.equals((Object)string10));
      assertFalse(string14.equals((Object)string0));
      assertFalse(string14.equals((Object)string4));
      assertFalse(string14.equals((Object)string3));
      assertFalse(string14.equals((Object)string7));
      assertFalse(string14.equals((Object)string6));
      assertFalse(string14.equals((Object)string15));
      assertFalse(string14.equals((Object)string12));
      assertFalse(string14.equals((Object)string8));
      assertFalse(string14.equals((Object)string2));
      assertFalse(string14.equals((Object)string5));
      assertFalse(string15.equals((Object)string12));
      assertFalse(string15.equals((Object)string1));
      assertFalse(string15.equals((Object)string4));
      assertFalse(string15.equals((Object)string8));
      assertFalse(string15.equals((Object)string14));
      assertFalse(string15.equals((Object)string0));
      assertFalse(string15.equals((Object)string6));
      assertFalse(string15.equals((Object)string11));
      assertFalse(string15.equals((Object)string13));
      assertFalse(string15.equals((Object)string3));
      assertFalse(string15.equals((Object)string7));
      assertFalse(string15.equals((Object)string10));
      assertFalse(string15.equals((Object)string5));
      assertFalse(string15.equals((Object)string9));
      assertFalse(string15.equals((Object)string2));
      assertFalse(string13.equals((Object)string14));
      assertFalse(string13.equals((Object)string15));
      assertFalse(string13.equals((Object)string10));
      assertFalse(string13.equals((Object)string2));
      assertFalse(string13.equals((Object)string11));
      assertFalse(string13.equals((Object)string5));
      assertFalse(string13.equals((Object)string1));
      assertFalse(string13.equals((Object)string8));
      assertFalse(string13.equals((Object)string9));
      assertFalse(string13.equals((Object)string7));
      assertFalse(string13.equals((Object)string0));
      assertFalse(string13.equals((Object)string4));
      assertFalse(string13.equals((Object)string3));
      assertFalse(string13.equals((Object)string12));
      assertFalse(string13.equals((Object)string6));
      
      components1.setResponses(apiResponses5);
      assertSame(components0, components1);
      assertSame(parameter0, parameter1);
      assertNotSame(string13, string14);
      assertNotSame(string13, string15);
      assertNotSame(string13, string10);
      assertNotSame(string13, string2);
      assertNotSame(string13, string11);
      assertNotSame(string13, string5);
      assertNotSame(string13, string1);
      assertNotSame(string13, string8);
      assertNotSame(string13, string9);
      assertNotSame(string13, string7);
      assertNotSame(string13, string0);
      assertNotSame(string13, string4);
      assertNotSame(string13, string3);
      assertNotSame(string13, string12);
      assertNotSame(string13, string6);
      assertSame(parameter1, parameter0);
      assertSame(components1, components0);
      assertSame(apiResponses0, apiResponses2);
      assertSame(apiResponses0, apiResponses5);
      assertSame(apiResponses0, apiResponses1);
      assertSame(apiResponses0, apiResponses3);
      assertSame(apiResponses0, apiResponses4);
      assertNotSame(string14, string11);
      assertNotSame(string14, string13);
      assertNotSame(string14, string1);
      assertNotSame(string14, string9);
      assertNotSame(string14, string10);
      assertNotSame(string14, string0);
      assertNotSame(string14, string4);
      assertNotSame(string14, string3);
      assertNotSame(string14, string7);
      assertNotSame(string14, string6);
      assertNotSame(string14, string15);
      assertNotSame(string14, string12);
      assertNotSame(string14, string8);
      assertNotSame(string14, string2);
      assertNotSame(string14, string5);
      assertSame(apiResponses1, apiResponses4);
      assertSame(apiResponses1, apiResponses2);
      assertSame(apiResponses1, apiResponses3);
      assertSame(apiResponses1, apiResponses5);
      assertSame(apiResponses1, apiResponses0);
      assertSame(apiResponses2, apiResponses5);
      assertSame(apiResponses2, apiResponses0);
      assertSame(apiResponses2, apiResponses1);
      assertSame(apiResponses2, apiResponses3);
      assertSame(apiResponses2, apiResponses4);
      assertNotSame(string15, string12);
      assertNotSame(string15, string1);
      assertNotSame(string15, string4);
      assertNotSame(string15, string8);
      assertNotSame(string15, string14);
      assertNotSame(string15, string0);
      assertNotSame(string15, string6);
      assertNotSame(string15, string11);
      assertNotSame(string15, string13);
      assertNotSame(string15, string3);
      assertNotSame(string15, string7);
      assertNotSame(string15, string10);
      assertNotSame(string15, string5);
      assertNotSame(string15, string9);
      assertNotSame(string15, string2);
      assertSame(apiResponses3, apiResponses5);
      assertSame(apiResponses3, apiResponses2);
      assertSame(apiResponses3, apiResponses4);
      assertSame(apiResponses3, apiResponses0);
      assertSame(apiResponses3, apiResponses1);
      assertSame(apiResponses4, apiResponses0);
      assertSame(apiResponses4, apiResponses1);
      assertSame(apiResponses4, apiResponses3);
      assertSame(apiResponses4, apiResponses5);
      assertSame(apiResponses4, apiResponses2);
      assertSame(apiResponses5, apiResponses2);
      assertSame(apiResponses5, apiResponses3);
      assertSame(apiResponses5, apiResponses1);
      assertSame(apiResponses5, apiResponses0);
      assertSame(apiResponses5, apiResponses4);
      assertNull(apiResponse0.get$ref());
      assertNull(apiResponse0.getDescription());
      assertFalse(apiResponses1.isEmpty());
      assertEquals(4, apiResponses1.size());
      assertFalse(apiResponses2.isEmpty());
      assertEquals(4, apiResponses2.size());
      assertFalse(apiResponses3.isEmpty());
      assertEquals(4, apiResponses3.size());
      assertEquals(4, apiResponses4.size());
      assertFalse(apiResponses4.isEmpty());
      assertEquals(4, apiResponses5.size());
      assertFalse(apiResponses5.isEmpty());
      assertNull(parameter0.getRequired());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getExample());
      assertNull(parameter0.getIn());
      assertNull(parameter0.getName());
      assertNull(parameter0.getExplode());
      assertEquals("io.swagger.jaxrs2.OperationParser", parameter0.get$ref());
      assertNull(parameter0.getAllowReserved());
      assertNull(parameter1.getAllowReserved());
      assertNull(parameter1.getDeprecated());
      assertNull(parameter1.getExplode());
      assertNull(parameter1.getIn());
      assertNull(parameter1.getName());
      assertNull(parameter1.getStyle());
      assertNull(parameter1.getExample());
      assertNull(parameter1.getAllowEmptyValue());
      assertEquals("io.swagger.jaxrs2.OperationParser", parameter1.get$ref());
      assertNull(parameter1.getDescription());
      assertNull(parameter1.getRequired());
      assertEquals(4, apiResponses0.size());
      assertFalse(apiResponses0.isEmpty());
      assertFalse(string13.equals((Object)string14));
      assertFalse(string13.equals((Object)string15));
      assertFalse(string13.equals((Object)string10));
      assertFalse(string13.equals((Object)string2));
      assertFalse(string13.equals((Object)string11));
      assertFalse(string13.equals((Object)string5));
      assertFalse(string13.equals((Object)string1));
      assertFalse(string13.equals((Object)string8));
      assertFalse(string13.equals((Object)string9));
      assertFalse(string13.equals((Object)string7));
      assertFalse(string13.equals((Object)string0));
      assertFalse(string13.equals((Object)string4));
      assertFalse(string13.equals((Object)string3));
      assertFalse(string13.equals((Object)string12));
      assertFalse(string13.equals((Object)string6));
      assertFalse(string14.equals((Object)string11));
      assertFalse(string14.equals((Object)string13));
      assertFalse(string14.equals((Object)string1));
      assertFalse(string14.equals((Object)string9));
      assertFalse(string14.equals((Object)string10));
      assertFalse(string14.equals((Object)string0));
      assertFalse(string14.equals((Object)string4));
      assertFalse(string14.equals((Object)string3));
      assertFalse(string14.equals((Object)string7));
      assertFalse(string14.equals((Object)string6));
      assertFalse(string14.equals((Object)string15));
      assertFalse(string14.equals((Object)string12));
      assertFalse(string14.equals((Object)string8));
      assertFalse(string14.equals((Object)string2));
      assertFalse(string14.equals((Object)string5));
      assertFalse(string15.equals((Object)string12));
      assertFalse(string15.equals((Object)string1));
      assertFalse(string15.equals((Object)string4));
      assertFalse(string15.equals((Object)string8));
      assertFalse(string15.equals((Object)string14));
      assertFalse(string15.equals((Object)string0));
      assertFalse(string15.equals((Object)string6));
      assertFalse(string15.equals((Object)string11));
      assertFalse(string15.equals((Object)string13));
      assertFalse(string15.equals((Object)string3));
      assertFalse(string15.equals((Object)string7));
      assertFalse(string15.equals((Object)string10));
      assertFalse(string15.equals((Object)string5));
      assertFalse(string15.equals((Object)string9));
      assertFalse(string15.equals((Object)string2));
      
      Optional<RequestBody> optional3 = OperationParser.getRequestBody(requestBody0, components1);
      assertNotNull(optional3);
      assertEquals(6, stringArray0.length);
      assertSame(components0, components1);
      assertSame(parameter0, parameter1);
      assertNotSame(string13, string14);
      assertNotSame(string13, string15);
      assertNotSame(string13, string10);
      assertNotSame(string13, string2);
      assertNotSame(string13, string11);
      assertNotSame(string13, string5);
      assertNotSame(string13, string1);
      assertNotSame(string13, string8);
      assertNotSame(string13, string9);
      assertNotSame(string13, string7);
      assertNotSame(string13, string0);
      assertNotSame(string13, string4);
      assertNotSame(string13, string3);
      assertNotSame(string13, string12);
      assertNotSame(string13, string6);
      assertSame(parameter1, parameter0);
      assertNotSame(string7, string15);
      assertNotSame(string7, string14);
      assertNotSame(string7, string6);
      assertSame(string7, string10);
      assertNotSame(string7, string2);
      assertNotSame(string7, string4);
      assertNotSame(string7, string0);
      assertNotSame(string7, string9);
      assertNotSame(string7, string13);
      assertSame(string7, string8);
      assertNotSame(string7, string5);
      assertSame(string7, string1);
      assertNotSame(string7, string11);
      assertSame(string7, string3);
      assertSame(string7, string12);
      assertSame(components1, components0);
      assertNull(parameter0.getRequired());
      assertNull(parameter0.getDescription());
      assertNull(parameter0.getDeprecated());
      assertNull(parameter0.getAllowEmptyValue());
      assertNull(parameter0.getStyle());
      assertNull(parameter0.getExample());
      assertNull(parameter0.getIn());
      assertNull(parameter0.getName());
      assertNull(parameter0.getExplode());
      assertEquals("io.swagger.jaxrs2.OperationParser", parameter0.get$ref());
      assertNull(parameter0.getAllowReserved());
      assertNull(parameter1.getAllowReserved());
      assertNull(parameter1.getDeprecated());
      assertNull(parameter1.getExplode());
      assertNull(parameter1.getIn());
      assertNull(parameter1.getName());
      assertNull(parameter1.getStyle());
      assertNull(parameter1.getExample());
      assertNull(parameter1.getAllowEmptyValue());
      assertEquals("io.swagger.jaxrs2.OperationParser", parameter1.get$ref());
      assertNull(parameter1.getDescription());
      assertNull(parameter1.getRequired());
      assertFalse(boolean0 == boolean3);
      assertFalse(boolean0 == boolean2);
      assertFalse(boolean1 == boolean2);
      assertFalse(boolean1 == boolean3);
      assertFalse(string13.equals((Object)string14));
      assertFalse(string13.equals((Object)string15));
      assertFalse(string13.equals((Object)string10));
      assertFalse(string13.equals((Object)string2));
      assertFalse(string13.equals((Object)string11));
      assertFalse(string13.equals((Object)string5));
      assertFalse(string13.equals((Object)string1));
      assertFalse(string13.equals((Object)string8));
      assertFalse(string13.equals((Object)string9));
      assertFalse(string13.equals((Object)string7));
      assertFalse(string13.equals((Object)string0));
      assertFalse(string13.equals((Object)string4));
      assertFalse(string13.equals((Object)string3));
      assertFalse(string13.equals((Object)string12));
      assertFalse(string13.equals((Object)string6));
      assertFalse(string7.equals((Object)string13));
      assertFalse(string7.equals((Object)string15));
      assertFalse(string7.equals((Object)string14));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string11));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string9));
      
      String string16 = "k+:h&^>fvqs=@7";
      io.swagger.oas.annotations.links.Link link1 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      doReturn(string16, string10).when(link1).description();
      doReturn(apiResponses1.DEFAULT, stringArray0[1]).when(link1).operationId();
      doReturn(string10).when(link1).operationRef();
      doReturn(linkParameterArray0).when(link1).parameters();
      Optional<Link> optional4 = OperationParser.getLink(link1);
      assertNotNull(optional4);
      assertEquals(6, stringArray0.length);
      assertEquals(2, linkParameterArray0.length);
      assertNotSame(string14, string16);
      assertNotSame(string14, string11);
      assertNotSame(string14, string13);
      assertNotSame(string14, string1);
      assertNotSame(string14, string9);
      assertNotSame(string14, string10);
      assertNotSame(string14, string0);
      assertNotSame(string14, string4);
      assertNotSame(string14, string3);
      assertNotSame(string14, string7);
      assertNotSame(string14, string6);
      assertNotSame(string14, string15);
      assertNotSame(string14, string12);
      assertNotSame(string14, string8);
      assertNotSame(string14, string2);
      assertNotSame(string14, string5);
      assertSame(apiResponses1, apiResponses4);
      assertSame(apiResponses1, apiResponses2);
      assertSame(apiResponses1, apiResponses3);
      assertSame(apiResponses1, apiResponses5);
      assertSame(apiResponses1, apiResponses0);
      assertNotSame(string16, string12);
      assertNotSame(string16, string6);
      assertNotSame(string16, string8);
      assertNotSame(string16, string14);
      assertNotSame(string16, string15);
      assertNotSame(string16, string0);
      assertNotSame(string16, string4);
      assertNotSame(string16, string5);
      assertNotSame(string16, string2);
      assertNotSame(string16, string3);
      assertNotSame(string16, string13);
      assertNotSame(string16, string9);
      assertNotSame(string16, string10);
      assertNotSame(string16, string7);
      assertNotSame(string16, string11);
      assertNotSame(string16, string1);
      assertNotSame(optional4, optional0);
      assertNotSame(string10, string14);
      assertNotSame(string10, string6);
      assertNotSame(string10, string15);
      assertNotSame(string10, string2);
      assertNotSame(string10, string0);
      assertSame(string10, string8);
      assertNotSame(string10, string9);
      assertNotSame(string10, string16);
      assertNotSame(string10, string4);
      assertNotSame(string10, string5);
      assertSame(string10, string1);
      assertSame(string10, string3);
      assertSame(string10, string7);
      assertNotSame(string10, string11);
      assertNotSame(string10, string13);
      assertSame(string10, string12);
      assertSame(apiResponses0, apiResponses2);
      assertSame(apiResponses0, apiResponses5);
      assertSame(apiResponses0, apiResponses1);
      assertSame(apiResponses0, apiResponses3);
      assertSame(apiResponses0, apiResponses4);
      assertNull(apiResponse0.get$ref());
      assertNull(apiResponse0.getDescription());
      assertFalse(apiResponses1.isEmpty());
      assertEquals(4, apiResponses1.size());
      assertEquals(4, apiResponses0.size());
      assertFalse(apiResponses0.isEmpty());
      assertFalse(string14.equals((Object)string16));
      assertFalse(string14.equals((Object)string11));
      assertFalse(string14.equals((Object)string13));
      assertFalse(string14.equals((Object)string1));
      assertFalse(string14.equals((Object)string9));
      assertFalse(string14.equals((Object)string10));
      assertFalse(string14.equals((Object)string0));
      assertFalse(string14.equals((Object)string4));
      assertFalse(string14.equals((Object)string3));
      assertFalse(string14.equals((Object)string7));
      assertFalse(string14.equals((Object)string6));
      assertFalse(string14.equals((Object)string15));
      assertFalse(string14.equals((Object)string12));
      assertFalse(string14.equals((Object)string8));
      assertFalse(string14.equals((Object)string2));
      assertFalse(string14.equals((Object)string5));
      assertFalse(string16.equals((Object)string12));
      assertFalse(string16.equals((Object)string6));
      assertFalse(string16.equals((Object)string8));
      assertFalse(string16.equals((Object)string14));
      assertFalse(string16.equals((Object)string15));
      assertFalse(string16.equals((Object)string0));
      assertFalse(string16.equals((Object)string4));
      assertFalse(string16.equals((Object)string5));
      assertFalse(string16.equals((Object)string2));
      assertFalse(string16.equals((Object)string3));
      assertFalse(string16.equals((Object)string13));
      assertFalse(string16.equals((Object)string9));
      assertFalse(string16.equals((Object)string10));
      assertFalse(string16.equals((Object)string7));
      assertFalse(string16.equals((Object)string11));
      assertFalse(string16.equals((Object)string1));
      assertFalse(optional4.equals((Object)optional0));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string16));
      assertFalse(string10.equals((Object)string14));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string15));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string11));
      assertFalse(string10.equals((Object)string13));
      
      String string17 = "w\"";
      ExternalDocumentation externalDocumentation1 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string1).when(externalDocumentation1).description();
      doReturn(string17, apiResponses2.DEFAULT).when(externalDocumentation1).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional5 = OperationParser.getExternalDocumentation(externalDocumentation1);
      assertNotNull(optional5);
      assertNotSame(string14, string16);
      assertNotSame(string14, string11);
      assertNotSame(string14, string13);
      assertNotSame(string14, string1);
      assertNotSame(string14, string9);
      assertNotSame(string14, string10);
      assertNotSame(string14, string0);
      assertNotSame(string14, string4);
      assertNotSame(string14, string3);
      assertNotSame(string14, string7);
      assertNotSame(string14, string6);
      assertNotSame(string14, string15);
      assertNotSame(string14, string12);
      assertNotSame(string14, string8);
      assertNotSame(string14, string2);
      assertNotSame(string14, string17);
      assertNotSame(string14, string5);
      assertNotSame(string1, string9);
      assertSame(string1, string8);
      assertNotSame(string1, string16);
      assertNotSame(string1, string4);
      assertNotSame(string1, string5);
      assertSame(string1, string7);
      assertSame(string1, string3);
      assertSame(string1, string12);
      assertNotSame(string1, string11);
      assertNotSame(string1, string13);
      assertNotSame(string1, string14);
      assertSame(string1, string10);
      assertNotSame(string1, string6);
      assertNotSame(string1, string15);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string17);
      assertSame(apiResponses1, apiResponses4);
      assertSame(apiResponses1, apiResponses2);
      assertSame(apiResponses1, apiResponses3);
      assertSame(apiResponses1, apiResponses5);
      assertSame(apiResponses1, apiResponses0);
      assertSame(apiResponses2, apiResponses5);
      assertSame(apiResponses2, apiResponses0);
      assertSame(apiResponses2, apiResponses1);
      assertSame(apiResponses2, apiResponses3);
      assertSame(apiResponses2, apiResponses4);
      assertNotSame(string13, string14);
      assertNotSame(string13, string15);
      assertNotSame(string13, string10);
      assertNotSame(string13, string17);
      assertNotSame(string13, string2);
      assertNotSame(string13, string11);
      assertNotSame(string13, string5);
      assertNotSame(string13, string1);
      assertNotSame(string13, string8);
      assertNotSame(string13, string9);
      assertNotSame(string13, string7);
      assertNotSame(string13, string0);
      assertNotSame(string13, string4);
      assertNotSame(string13, string3);
      assertNotSame(string13, string12);
      assertNotSame(string13, string6);
      assertNotSame(string13, string16);
      assertNotSame(string17, string5);
      assertNotSame(string17, string16);
      assertNotSame(string17, string4);
      assertNotSame(string17, string9);
      assertNotSame(string17, string11);
      assertNotSame(string17, string13);
      assertNotSame(string17, string1);
      assertNotSame(string17, string12);
      assertNotSame(string17, string3);
      assertNotSame(string17, string0);
      assertNotSame(string17, string7);
      assertNotSame(string17, string15);
      assertNotSame(string17, string6);
      assertNotSame(string17, string2);
      assertNotSame(string17, string14);
      assertNotSame(string17, string10);
      assertNotSame(string17, string8);
      assertSame(apiResponses0, apiResponses2);
      assertSame(apiResponses0, apiResponses5);
      assertSame(apiResponses0, apiResponses1);
      assertSame(apiResponses0, apiResponses3);
      assertSame(apiResponses0, apiResponses4);
      assertNull(apiResponse0.get$ref());
      assertNull(apiResponse0.getDescription());
      assertFalse(apiResponses1.isEmpty());
      assertEquals(4, apiResponses1.size());
      assertFalse(apiResponses2.isEmpty());
      assertEquals(4, apiResponses2.size());
      assertEquals(4, apiResponses0.size());
      assertFalse(apiResponses0.isEmpty());
      assertFalse(string14.equals((Object)string16));
      assertFalse(string14.equals((Object)string11));
      assertFalse(string14.equals((Object)string13));
      assertFalse(string14.equals((Object)string1));
      assertFalse(string14.equals((Object)string9));
      assertFalse(string14.equals((Object)string10));
      assertFalse(string14.equals((Object)string0));
      assertFalse(string14.equals((Object)string4));
      assertFalse(string14.equals((Object)string3));
      assertFalse(string14.equals((Object)string7));
      assertFalse(string14.equals((Object)string6));
      assertFalse(string14.equals((Object)string15));
      assertFalse(string14.equals((Object)string12));
      assertFalse(string14.equals((Object)string8));
      assertFalse(string14.equals((Object)string2));
      assertFalse(string14.equals((Object)string17));
      assertFalse(string14.equals((Object)string5));
      assertFalse(string1.equals((Object)string14));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string9));
      assertFalse(string1.equals((Object)string16));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string15));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string17));
      assertFalse(string1.equals((Object)string11));
      assertFalse(string1.equals((Object)string13));
      assertFalse(string13.equals((Object)string14));
      assertFalse(string13.equals((Object)string15));
      assertFalse(string13.equals((Object)string10));
      assertFalse(string13.equals((Object)string17));
      assertFalse(string13.equals((Object)string2));
      assertFalse(string13.equals((Object)string11));
      assertFalse(string13.equals((Object)string5));
      assertFalse(string13.equals((Object)string1));
      assertFalse(string13.equals((Object)string8));
      assertFalse(string13.equals((Object)string9));
      assertFalse(string13.equals((Object)string7));
      assertFalse(string13.equals((Object)string0));
      assertFalse(string13.equals((Object)string4));
      assertFalse(string13.equals((Object)string3));
      assertFalse(string13.equals((Object)string12));
      assertFalse(string13.equals((Object)string6));
      assertFalse(string13.equals((Object)string16));
      assertFalse(string17.equals((Object)string5));
      assertFalse(string17.equals((Object)string16));
      assertFalse(string17.equals((Object)string4));
      assertFalse(string17.equals((Object)string9));
      assertFalse(string17.equals((Object)string11));
      assertFalse(string17.equals((Object)string13));
      assertFalse(string17.equals((Object)string1));
      assertFalse(string17.equals((Object)string12));
      assertFalse(string17.equals((Object)string3));
      assertFalse(string17.equals((Object)string0));
      assertFalse(string17.equals((Object)string7));
      assertFalse(string17.equals((Object)string15));
      assertFalse(string17.equals((Object)string6));
      assertFalse(string17.equals((Object)string2));
      assertFalse(string17.equals((Object)string14));
      assertFalse(string17.equals((Object)string10));
      assertFalse(string17.equals((Object)string8));
      
      String string18 = "1g[^";
      String string19 = "";
      String string20 = "";
      String string21 = "#/components/schemas/";
      io.swagger.oas.annotations.links.Link link2 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      doReturn(string18, string21).when(link2).description();
      doReturn(string19).when(link2).operationId();
      doReturn(string20).when(link2).operationRef();
      doReturn(linkParameterArray0).when(link2).parameters();
      Optional<Link> optional6 = OperationParser.getLink(link2);
      assertNotNull(optional6);
      assertEquals(2, linkParameterArray0.length);
      assertNotSame(string18, string10);
      assertNotSame(string18, string20);
      assertNotSame(string18, string2);
      assertNotSame(string18, string21);
      assertNotSame(string18, string13);
      assertNotSame(string18, string5);
      assertNotSame(string18, string8);
      assertNotSame(string18, string1);
      assertNotSame(string18, string11);
      assertNotSame(string18, string16);
      assertNotSame(string18, string17);
      assertNotSame(string18, string6);
      assertNotSame(string18, string7);
      assertNotSame(string18, string15);
      assertNotSame(string18, string9);
      assertNotSame(string18, string3);
      assertNotSame(string18, string12);
      assertNotSame(string18, string19);
      assertNotSame(string18, string0);
      assertNotSame(string18, string4);
      assertNotSame(string18, string14);
      assertSame(string19, string20);
      assertSame(string19, string10);
      assertNotSame(string19, string2);
      assertSame(string19, string3);
      assertSame(string19, string7);
      assertNotSame(string19, string18);
      assertNotSame(string19, string13);
      assertNotSame(string19, string21);
      assertSame(string19, string1);
      assertNotSame(string19, string5);
      assertNotSame(string19, string11);
      assertSame(string19, string8);
      assertNotSame(string19, string16);
      assertNotSame(string19, string17);
      assertSame(string19, string12);
      assertNotSame(string19, string6);
      assertNotSame(string19, string9);
      assertNotSame(string19, string14);
      assertNotSame(string19, string15);
      assertNotSame(string19, string4);
      assertNotSame(string19, string0);
      assertNotSame(string20, string18);
      assertNotSame(string20, string2);
      assertSame(string20, string3);
      assertSame(string20, string7);
      assertNotSame(string20, string6);
      assertNotSame(string20, string15);
      assertNotSame(string20, string9);
      assertSame(string20, string10);
      assertNotSame(string20, string4);
      assertNotSame(string20, string14);
      assertNotSame(string20, string0);
      assertSame(string20, string12);
      assertSame(string20, string19);
      assertNotSame(string20, string11);
      assertSame(string20, string8);
      assertNotSame(string20, string16);
      assertNotSame(string20, string17);
      assertNotSame(string20, string13);
      assertNotSame(string20, string21);
      assertSame(string20, string1);
      assertNotSame(string20, string5);
      assertNotSame(string21, string12);
      assertNotSame(string21, string19);
      assertNotSame(string21, string15);
      assertNotSame(string21, string6);
      assertNotSame(string21, string17);
      assertNotSame(string21, string11);
      assertNotSame(string21, string5);
      assertNotSame(string21, string8);
      assertNotSame(string21, string1);
      assertNotSame(string21, string3);
      assertNotSame(string21, string18);
      assertNotSame(string21, string20);
      assertNotSame(string21, string13);
      assertNotSame(string21, string7);
      assertNotSame(string21, string16);
      assertNotSame(string21, string2);
      assertNotSame(string21, string4);
      assertNotSame(string21, string9);
      assertNotSame(string21, string14);
      assertNotSame(string21, string0);
      assertNotSame(string21, string10);
      assertNotSame(optional6, optional0);
      assertNotSame(optional6, optional4);
      assertFalse(string18.equals((Object)string10));
      assertFalse(string18.equals((Object)string20));
      assertFalse(string18.equals((Object)string2));
      assertFalse(string18.equals((Object)string21));
      assertFalse(string18.equals((Object)string13));
      assertFalse(string18.equals((Object)string5));
      assertFalse(string18.equals((Object)string8));
      assertFalse(string18.equals((Object)string1));
      assertFalse(string18.equals((Object)string11));
      assertFalse(string18.equals((Object)string16));
      assertFalse(string18.equals((Object)string17));
      assertFalse(string18.equals((Object)string6));
      assertFalse(string18.equals((Object)string7));
      assertFalse(string18.equals((Object)string15));
      assertFalse(string18.equals((Object)string9));
      assertFalse(string18.equals((Object)string3));
      assertFalse(string18.equals((Object)string12));
      assertFalse(string18.equals((Object)string19));
      assertFalse(string18.equals((Object)string0));
      assertFalse(string18.equals((Object)string4));
      assertFalse(string18.equals((Object)string14));
      assertFalse(string19.equals((Object)string2));
      assertFalse(string19.equals((Object)string18));
      assertFalse(string19.equals((Object)string13));
      assertFalse(string19.equals((Object)string21));
      assertFalse(string19.equals((Object)string5));
      assertFalse(string19.equals((Object)string11));
      assertFalse(string19.equals((Object)string16));
      assertFalse(string19.equals((Object)string17));
      assertFalse(string19.equals((Object)string6));
      assertFalse(string19.equals((Object)string9));
      assertFalse(string19.equals((Object)string14));
      assertFalse(string19.equals((Object)string15));
      assertFalse(string19.equals((Object)string4));
      assertFalse(string19.equals((Object)string0));
      assertFalse(string20.equals((Object)string18));
      assertFalse(string20.equals((Object)string2));
      assertFalse(string20.equals((Object)string6));
      assertFalse(string20.equals((Object)string15));
      assertFalse(string20.equals((Object)string9));
      assertFalse(string20.equals((Object)string4));
      assertFalse(string20.equals((Object)string14));
      assertFalse(string20.equals((Object)string0));
      assertFalse(string20.equals((Object)string11));
      assertFalse(string20.equals((Object)string16));
      assertFalse(string20.equals((Object)string17));
      assertFalse(string20.equals((Object)string13));
      assertFalse(string20.equals((Object)string21));
      assertFalse(string20.equals((Object)string5));
      assertFalse(string21.equals((Object)string12));
      assertFalse(string21.equals((Object)string19));
      assertFalse(string21.equals((Object)string15));
      assertFalse(string21.equals((Object)string6));
      assertFalse(string21.equals((Object)string17));
      assertFalse(string21.equals((Object)string11));
      assertFalse(string21.equals((Object)string5));
      assertFalse(string21.equals((Object)string8));
      assertFalse(string21.equals((Object)string1));
      assertFalse(string21.equals((Object)string3));
      assertFalse(string21.equals((Object)string18));
      assertFalse(string21.equals((Object)string20));
      assertFalse(string21.equals((Object)string13));
      assertFalse(string21.equals((Object)string7));
      assertFalse(string21.equals((Object)string16));
      assertFalse(string21.equals((Object)string2));
      assertFalse(string21.equals((Object)string4));
      assertFalse(string21.equals((Object)string9));
      assertFalse(string21.equals((Object)string14));
      assertFalse(string21.equals((Object)string0));
      assertFalse(string21.equals((Object)string10));
      assertFalse(optional6.equals((Object)optional0));
      assertFalse(optional6.equals((Object)optional4));
      
      ApiResponse[] apiResponseArray0 = null;
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Optional<ApiResponses> optional7 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components0);
      assertNotNull(optional7);
      assertSame(components0, components1);
      
      OperationParser operationParser0 = new OperationParser();
      assertNotNull(operationParser0);
      
      String string22 = "";
      String string23 = "!,$.m.y-[%y";
      io.swagger.oas.annotations.links.Link link3 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      doReturn(string17, string3).when(link3).description();
      doReturn(string22).when(link3).operationId();
      doReturn(string18, string23).when(link3).operationRef();
      doReturn(linkParameterArray0).when(link3).parameters();
      Optional<Link> optional8 = OperationParser.getLink(link3);
      assertNotNull(optional8);
      assertEquals(2, linkParameterArray0.length);
      assertNotSame(string18, string10);
      assertNotSame(string18, string20);
      assertNotSame(string18, string2);
      assertNotSame(string18, string21);
      assertNotSame(string18, string13);
      assertNotSame(string18, string5);
      assertNotSame(string18, string8);
      assertNotSame(string18, string22);
      assertNotSame(string18, string1);
      assertNotSame(string18, string11);
      assertNotSame(string18, string23);
      assertNotSame(string18, string16);
      assertNotSame(string18, string17);
      assertNotSame(string18, string6);
      assertNotSame(string18, string7);
      assertNotSame(string18, string15);
      assertNotSame(string18, string9);
      assertNotSame(string18, string3);
      assertNotSame(string18, string12);
      assertNotSame(string18, string19);
      assertNotSame(string18, string0);
      assertNotSame(string18, string4);
      assertNotSame(string18, string14);
      assertNotSame(string3, string4);
      assertNotSame(string3, string11);
      assertNotSame(string3, string17);
      assertSame(string3, string8);
      assertSame(string3, string22);
      assertNotSame(string3, string16);
      assertNotSame(string3, string23);
      assertSame(string3, string12);
      assertSame(string3, string19);
      assertNotSame(string3, string13);
      assertNotSame(string3, string21);
      assertNotSame(string3, string18);
      assertSame(string3, string1);
      assertNotSame(string3, string5);
      assertNotSame(string3, string2);
      assertSame(string3, string7);
      assertSame(string3, string20);
      assertNotSame(string3, string6);
      assertNotSame(string3, string9);
      assertSame(string3, string10);
      assertNotSame(string3, string14);
      assertNotSame(string3, string0);
      assertNotSame(string3, string15);
      assertSame(string22, string1);
      assertNotSame(string22, string9);
      assertNotSame(string22, string13);
      assertNotSame(string22, string5);
      assertNotSame(string22, string4);
      assertNotSame(string22, string21);
      assertNotSame(string22, string2);
      assertNotSame(string22, string18);
      assertNotSame(string22, string17);
      assertSame(string22, string8);
      assertNotSame(string22, string6);
      assertNotSame(string22, string14);
      assertNotSame(string22, string15);
      assertNotSame(string22, string0);
      assertNotSame(string22, string23);
      assertSame(string22, string3);
      assertSame(string22, string7);
      assertNotSame(string22, string11);
      assertSame(string22, string12);
      assertSame(string22, string19);
      assertSame(string22, string20);
      assertNotSame(string22, string16);
      assertSame(string22, string10);
      assertNotSame(string23, string12);
      assertNotSame(string23, string0);
      assertNotSame(string23, string6);
      assertNotSame(string23, string15);
      assertNotSame(string23, string8);
      assertNotSame(string23, string19);
      assertNotSame(string23, string14);
      assertNotSame(string23, string4);
      assertNotSame(string23, string22);
      assertNotSame(string23, string17);
      assertNotSame(string23, string9);
      assertNotSame(string23, string2);
      assertNotSame(string23, string21);
      assertNotSame(string23, string10);
      assertNotSame(string23, string18);
      assertNotSame(string23, string20);
      assertNotSame(string23, string5);
      assertNotSame(string23, string3);
      assertNotSame(string23, string7);
      assertNotSame(string23, string16);
      assertNotSame(string23, string1);
      assertNotSame(string23, string11);
      assertNotSame(string23, string13);
      assertNotSame(optional8, optional0);
      assertNotSame(optional8, optional6);
      assertNotSame(optional8, optional4);
      assertNotSame(string17, string5);
      assertNotSame(string17, string16);
      assertNotSame(string17, string4);
      assertNotSame(string17, string23);
      assertNotSame(string17, string9);
      assertNotSame(string17, string11);
      assertNotSame(string17, string13);
      assertNotSame(string17, string1);
      assertNotSame(string17, string21);
      assertNotSame(string17, string12);
      assertNotSame(string17, string3);
      assertNotSame(string17, string0);
      assertNotSame(string17, string22);
      assertNotSame(string17, string7);
      assertNotSame(string17, string15);
      assertNotSame(string17, string19);
      assertNotSame(string17, string20);
      assertNotSame(string17, string6);
      assertNotSame(string17, string2);
      assertNotSame(string17, string14);
      assertNotSame(string17, string10);
      assertNotSame(string17, string8);
      assertNotSame(string17, string18);
      assertFalse(string18.equals((Object)string10));
      assertFalse(string18.equals((Object)string20));
      assertFalse(string18.equals((Object)string2));
      assertFalse(string18.equals((Object)string21));
      assertFalse(string18.equals((Object)string13));
      assertFalse(string18.equals((Object)string5));
      assertFalse(string18.equals((Object)string8));
      assertFalse(string18.equals((Object)string22));
      assertFalse(string18.equals((Object)string1));
      assertFalse(string18.equals((Object)string11));
      assertFalse(string18.equals((Object)string23));
      assertFalse(string18.equals((Object)string16));
      assertFalse(string18.equals((Object)string17));
      assertFalse(string18.equals((Object)string6));
      assertFalse(string18.equals((Object)string7));
      assertFalse(string18.equals((Object)string15));
      assertFalse(string18.equals((Object)string9));
      assertFalse(string18.equals((Object)string3));
      assertFalse(string18.equals((Object)string12));
      assertFalse(string18.equals((Object)string19));
      assertFalse(string18.equals((Object)string0));
      assertFalse(string18.equals((Object)string4));
      assertFalse(string18.equals((Object)string14));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string11));
      assertFalse(string3.equals((Object)string17));
      assertFalse(string3.equals((Object)string16));
      assertFalse(string3.equals((Object)string23));
      assertFalse(string3.equals((Object)string13));
      assertFalse(string3.equals((Object)string21));
      assertFalse(string3.equals((Object)string18));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string6));
      assertFalse(string3.equals((Object)string9));
      assertFalse(string3.equals((Object)string14));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string15));
      assertFalse(string22.equals((Object)string9));
      assertFalse(string22.equals((Object)string13));
      assertFalse(string22.equals((Object)string5));
      assertFalse(string22.equals((Object)string4));
      assertFalse(string22.equals((Object)string21));
      assertFalse(string22.equals((Object)string2));
      assertFalse(string22.equals((Object)string18));
      assertFalse(string22.equals((Object)string17));
      assertFalse(string22.equals((Object)string6));
      assertFalse(string22.equals((Object)string14));
      assertFalse(string22.equals((Object)string15));
      assertFalse(string22.equals((Object)string0));
      assertFalse(string22.equals((Object)string23));
      assertFalse(string22.equals((Object)string11));
      assertFalse(string22.equals((Object)string16));
      assertFalse(string23.equals((Object)string12));
      assertFalse(string23.equals((Object)string0));
      assertFalse(string23.equals((Object)string6));
      assertFalse(string23.equals((Object)string15));
      assertFalse(string23.equals((Object)string8));
      assertFalse(string23.equals((Object)string19));
      assertFalse(string23.equals((Object)string14));
      assertFalse(string23.equals((Object)string4));
      assertFalse(string23.equals((Object)string22));
      assertFalse(string23.equals((Object)string17));
      assertFalse(string23.equals((Object)string9));
      assertFalse(string23.equals((Object)string2));
      assertFalse(string23.equals((Object)string21));
      assertFalse(string23.equals((Object)string10));
      assertFalse(string23.equals((Object)string18));
      assertFalse(string23.equals((Object)string20));
      assertFalse(string23.equals((Object)string5));
      assertFalse(string23.equals((Object)string3));
      assertFalse(string23.equals((Object)string7));
      assertFalse(string23.equals((Object)string16));
      assertFalse(string23.equals((Object)string1));
      assertFalse(string23.equals((Object)string11));
      assertFalse(string23.equals((Object)string13));
      assertFalse(optional8.equals((Object)optional0));
      assertFalse(optional8.equals((Object)optional6));
      assertFalse(optional8.equals((Object)optional4));
      assertFalse(string17.equals((Object)string5));
      assertFalse(string17.equals((Object)string16));
      assertFalse(string17.equals((Object)string4));
      assertFalse(string17.equals((Object)string23));
      assertFalse(string17.equals((Object)string9));
      assertFalse(string17.equals((Object)string11));
      assertFalse(string17.equals((Object)string13));
      assertFalse(string17.equals((Object)string1));
      assertFalse(string17.equals((Object)string21));
      assertFalse(string17.equals((Object)string12));
      assertFalse(string17.equals((Object)string3));
      assertFalse(string17.equals((Object)string0));
      assertFalse(string17.equals((Object)string22));
      assertFalse(string17.equals((Object)string7));
      assertFalse(string17.equals((Object)string15));
      assertFalse(string17.equals((Object)string19));
      assertFalse(string17.equals((Object)string20));
      assertFalse(string17.equals((Object)string6));
      assertFalse(string17.equals((Object)string2));
      assertFalse(string17.equals((Object)string14));
      assertFalse(string17.equals((Object)string10));
      assertFalse(string17.equals((Object)string8));
      assertFalse(string17.equals((Object)string18));
  }

  @Test(timeout = 11000)
  public void test090()  throws Throwable  {
      ApiResponse[] apiResponseArray0 = new ApiResponse[5];
      Content[] contentArray0 = null;
      String string0 = "'null', 'true', 'false' or NaN";
      String string1 = null;
      String string2 = "(WD]C?^_<";
      io.swagger.oas.annotations.links.Link[] linkArray0 = new io.swagger.oas.annotations.links.Link[9];
      io.swagger.oas.annotations.links.Link link0 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).description();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).operationId();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(link0).operationRef();
      linkArray0[0] = link0;
      linkArray0[1] = linkArray0[0];
      linkArray0[2] = linkArray0[1];
      linkArray0[3] = linkArray0[2];
      linkArray0[4] = linkArray0[3];
      linkArray0[5] = linkArray0[4];
      linkArray0[6] = linkArray0[5];
      linkArray0[7] = linkArray0[6];
      linkArray0[8] = linkArray0[7];
      String string3 = null;
      ApiResponse apiResponse0 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn((Object) contentArray0, (Object) contentArray0, (Object) contentArray0, (Object) contentArray0, (Object) contentArray0).when(apiResponse0).content();
      doReturn(string0, string1, string1, string1, string2).when(apiResponse0).description();
      doReturn((Object) linkArray0, (Object) linkArray0).when(apiResponse0).links();
      doReturn(string3, string0, (String) null).when(apiResponse0).responseCode();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      apiResponseArray0[3] = apiResponseArray0[2];
      apiResponseArray0[4] = apiResponseArray0[3];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      assertNotNull(components0);
      
      Encoding encoding0 = new Encoding();
      assertNotNull(encoding0);
      assertNull(encoding0.getAllowReserved());
      assertNull(encoding0.getExplode());
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getStyle());
      
      Map<String, Header> map0 = encoding0.getHeaders();
      assertNull(map0);
      assertNull(encoding0.getAllowReserved());
      assertNull(encoding0.getExplode());
      assertNull(encoding0.getContentType());
      assertNull(encoding0.getStyle());
      
      Components components1 = new Components();
      assertNotNull(components1);
      assertTrue(components1.equals((Object)components0));
      
      HashMap<String, Callback> hashMap0 = new HashMap<String, Callback>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Components components2 = components1.callbacks(hashMap0);
      assertNotNull(components2);
      assertNotSame(components1, components0);
      assertSame(components1, components2);
      assertNotSame(components2, components0);
      assertSame(components2, components1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(components1.equals((Object)components0));
      assertFalse(components2.equals((Object)components0));
      
      io.swagger.oas.annotations.links.Link[] linkArray1 = new io.swagger.oas.annotations.links.Link[9];
      assertFalse(linkArray1.equals((Object)linkArray0));
      
      String string4 = "";
      String string5 = "GEabL!";
      String string6 = "e5U2V4jAvUoyh%>Re";
      String string7 = "J";
      String string8 = "Z\\2j";
      String string9 = ".#p9";
      io.swagger.oas.annotations.links.Link link1 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      linkArray1[1] = link1;
      linkArray1[1] = linkArray1[0];
      linkArray1[2] = linkArray1[1];
      linkArray1[3] = linkArray1[2];
      linkArray1[4] = linkArray1[3];
      linkArray1[5] = linkArray1[4];
      linkArray1[6] = linkArray1[5];
      linkArray1[7] = linkArray1[6];
      linkArray1[8] = linkArray1[7];
      Map<String, Link> map1 = OperationParser.getLinks(linkArray1);
      assertNotNull(map1);
      assertEquals(9, linkArray1.length);
      assertNotSame(linkArray1, linkArray0);
      assertTrue(map1.isEmpty());
      assertEquals(0, map1.size());
      assertFalse(linkArray1.equals((Object)linkArray0));
      
      Components components3 = components2.links(map1);
      assertNotNull(components3);
      assertEquals(9, linkArray1.length);
      assertSame(components3, components1);
      assertNotSame(components3, components0);
      assertSame(components3, components2);
      assertNotSame(components1, components0);
      assertSame(components1, components3);
      assertSame(components1, components2);
      assertNotSame(components2, components0);
      assertSame(components2, components3);
      assertSame(components2, components1);
      assertNotSame(linkArray1, linkArray0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(map1.isEmpty());
      assertEquals(0, map1.size());
      assertFalse(components3.equals((Object)components0));
      assertFalse(components1.equals((Object)components0));
      assertFalse(components2.equals((Object)components0));
      assertFalse(linkArray1.equals((Object)linkArray0));
      
      String string10 = "6A|XArY";
      io.swagger.oas.models.responses.ApiResponse apiResponse1 = null;
      Components components4 = components3.addResponses(string10, apiResponse1);
      assertNotNull(components4);
      assertEquals(9, linkArray1.length);
      assertSame(components3, components1);
      assertSame(components3, components4);
      assertNotSame(components3, components0);
      assertSame(components3, components2);
      assertNotSame(string10, string2);
      assertNotSame(string10, string5);
      assertNotSame(string10, string8);
      assertNotSame(string10, string4);
      assertNotSame(string10, string7);
      assertNotSame(string10, string6);
      assertNotSame(string10, string9);
      assertNotSame(string10, string0);
      assertSame(components4, components1);
      assertSame(components4, components2);
      assertNotSame(components4, components0);
      assertSame(components4, components3);
      assertNotSame(components1, components0);
      assertSame(components1, components3);
      assertSame(components1, components4);
      assertSame(components1, components2);
      assertNotSame(components2, components0);
      assertSame(components2, components3);
      assertSame(components2, components1);
      assertSame(components2, components4);
      assertNotSame(linkArray1, linkArray0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(map1.isEmpty());
      assertEquals(0, map1.size());
      assertFalse(components3.equals((Object)components0));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string0));
      assertFalse(components4.equals((Object)components0));
      assertFalse(components1.equals((Object)components0));
      assertFalse(components2.equals((Object)components0));
      assertFalse(linkArray1.equals((Object)linkArray0));
      
      Optional<ApiResponses> optional0 = OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components4);
      assertNotNull(optional0);
      assertEquals(5, apiResponseArray0.length);
      assertEquals(9, linkArray1.length);
      assertSame(components3, components1);
      assertSame(components3, components4);
      assertNotSame(components3, components0);
      assertSame(components3, components2);
      assertNotSame(string10, string2);
      assertNotSame(string10, string5);
      assertNotSame(string10, string8);
      assertNotSame(string10, string4);
      assertNotSame(string10, string7);
      assertNotSame(string10, string6);
      assertNotSame(string10, string9);
      assertNotSame(string10, string0);
      assertSame(components4, components1);
      assertSame(components4, components2);
      assertNotSame(components4, components0);
      assertSame(components4, components3);
      assertNotSame(components1, components0);
      assertSame(components1, components3);
      assertSame(components1, components4);
      assertSame(components1, components2);
      assertNotSame(components2, components0);
      assertSame(components2, components3);
      assertSame(components2, components1);
      assertSame(components2, components4);
      assertNotSame(linkArray1, linkArray0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(map1.isEmpty());
      assertEquals(0, map1.size());
      assertFalse(components3.equals((Object)components0));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string0));
      assertFalse(components4.equals((Object)components0));
      assertFalse(components1.equals((Object)components0));
      assertFalse(components2.equals((Object)components0));
      assertFalse(linkArray1.equals((Object)linkArray0));
  }

  @Test(timeout = 11000)
  public void test091()  throws Throwable  {
      String string0 = "(J9(=@\\Hn9E";
      String string1 = "";
      License license0 = mock(License.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string1).when(license0).name();
      doReturn(string0, string1).when(license0).url();
      Optional<io.swagger.oas.models.info.License> optional0 = OperationParser.getLicense(license0);
      assertNotNull(optional0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      String string2 = "#/components/schemas/";
      String string3 = "Xs6xwO/srGI(1t#Z`";
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string3).when(externalDocumentation0).description();
      doReturn(string2, string3).when(externalDocumentation0).url();
      Optional<io.swagger.oas.models.ExternalDocumentation> optional1 = OperationParser.getExternalDocumentation(externalDocumentation0);
      assertNotNull(optional1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = "{N9TF?*iRz.;";
      ServerVariable[] serverVariableArray0 = new ServerVariable[6];
      String string5 = "com.fasterxml.jackson.databind.ser.std.ClassSerializer";
      String string6 = "t'i8u`8ib";
      String string7 = "";
      String string8 = "+IyU";
      String string9 = "1B";
      String string10 = "'r$aPMPS/qiZ[{t7#";
      String string11 = "(+O9*wJ";
      ServerVariable serverVariable0 = mock(ServerVariable.class, new ViolatedAssumptionAnswer());
      doReturn(string4, string5, string6, string2, string7).when(serverVariable0).description();
      doReturn(string8, string9, string9, string10, string11).when(serverVariable0).name();
      serverVariableArray0[0] = serverVariable0;
      serverVariableArray0[1] = serverVariableArray0[0];
      serverVariableArray0[2] = serverVariableArray0[1];
      serverVariableArray0[3] = serverVariableArray0[2];
      serverVariableArray0[4] = serverVariableArray0[3];
      serverVariableArray0[5] = serverVariableArray0[4];
      String string12 = "";
      String string13 = "B5w[jh'^%?S|s!Z";
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string1, string8, string1, (String) null).when(server0).description();
      doReturn(string2, string4, string12, string2, string13).when(server0).url();
      doReturn((Object) serverVariableArray0, (Object) serverVariableArray0, (Object) serverVariableArray0).when(server0).variables();
      Optional<io.swagger.oas.models.servers.Server> optional2 = OperationParser.getServer(server0);
      assertNotNull(optional2);
      assertEquals(6, serverVariableArray0.length);
      assertNotSame(string0, string8);
      assertNotSame(string0, string7);
      assertNotSame(string0, string2);
      assertNotSame(string0, string9);
      assertNotSame(string0, string5);
      assertNotSame(string0, string13);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string10);
      assertNotSame(string0, string6);
      assertNotSame(string0, string12);
      assertNotSame(string0, string11);
      assertNotSame(string0, string4);
      assertNotSame(string1, string6);
      assertNotSame(string1, string3);
      assertNotSame(string1, string10);
      assertNotSame(string1, string13);
      assertSame(string1, string7);
      assertNotSame(string1, string4);
      assertNotSame(string1, string5);
      assertNotSame(string1, string11);
      assertNotSame(string1, string8);
      assertNotSame(string1, string0);
      assertSame(string1, string12);
      assertNotSame(string1, string9);
      assertNotSame(string1, string2);
      assertNotSame(string2, string12);
      assertNotSame(string2, string5);
      assertNotSame(string2, string3);
      assertNotSame(string2, string11);
      assertNotSame(string2, string7);
      assertNotSame(string2, string9);
      assertNotSame(string2, string4);
      assertNotSame(string2, string0);
      assertNotSame(string2, string8);
      assertNotSame(string2, string10);
      assertNotSame(string2, string13);
      assertNotSame(string2, string6);
      assertNotSame(string2, string1);
      assertNotSame(string12, string6);
      assertSame(string12, string1);
      assertNotSame(string12, string2);
      assertNotSame(string12, string4);
      assertNotSame(string12, string0);
      assertNotSame(string12, string11);
      assertNotSame(string12, string8);
      assertNotSame(string12, string5);
      assertNotSame(string12, string13);
      assertSame(string12, string7);
      assertNotSame(string12, string10);
      assertNotSame(string12, string9);
      assertNotSame(string12, string3);
      assertNotSame(string4, string3);
      assertNotSame(string4, string9);
      assertNotSame(string4, string10);
      assertNotSame(string4, string13);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string6);
      assertNotSame(string4, string2);
      assertNotSame(string4, string8);
      assertNotSame(string4, string11);
      assertNotSame(string4, string5);
      assertNotSame(string4, string12);
      assertNotSame(string4, string7);
      assertNotSame(string13, string2);
      assertNotSame(string13, string0);
      assertNotSame(string13, string5);
      assertNotSame(string13, string9);
      assertNotSame(string13, string1);
      assertNotSame(string13, string6);
      assertNotSame(string13, string8);
      assertNotSame(string13, string10);
      assertNotSame(string13, string3);
      assertNotSame(string13, string12);
      assertNotSame(string13, string4);
      assertNotSame(string13, string7);
      assertNotSame(string13, string11);
      assertNotSame(string8, string9);
      assertNotSame(string8, string1);
      assertNotSame(string8, string4);
      assertNotSame(string8, string7);
      assertNotSame(string8, string0);
      assertNotSame(string8, string10);
      assertNotSame(string8, string13);
      assertNotSame(string8, string6);
      assertNotSame(string8, string12);
      assertNotSame(string8, string2);
      assertNotSame(string8, string5);
      assertNotSame(string8, string3);
      assertNotSame(string8, string11);
      assertFalse(string0.equals((Object)string8));
      assertFalse(string0.equals((Object)string7));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string9));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string13));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string10));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string12));
      assertFalse(string0.equals((Object)string11));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string8));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string9));
      assertFalse(string1.equals((Object)string10));
      assertFalse(string1.equals((Object)string13));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string11));
      assertFalse(string2.equals((Object)string12));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string11));
      assertFalse(string2.equals((Object)string7));
      assertFalse(string2.equals((Object)string9));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string8));
      assertFalse(string2.equals((Object)string10));
      assertFalse(string2.equals((Object)string13));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string12.equals((Object)string6));
      assertFalse(string12.equals((Object)string0));
      assertFalse(string12.equals((Object)string11));
      assertFalse(string12.equals((Object)string8));
      assertFalse(string12.equals((Object)string2));
      assertFalse(string12.equals((Object)string5));
      assertFalse(string12.equals((Object)string13));
      assertFalse(string12.equals((Object)string4));
      assertFalse(string12.equals((Object)string10));
      assertFalse(string12.equals((Object)string9));
      assertFalse(string12.equals((Object)string3));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string9));
      assertFalse(string4.equals((Object)string10));
      assertFalse(string4.equals((Object)string13));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string6));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string8));
      assertFalse(string4.equals((Object)string11));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string12));
      assertFalse(string4.equals((Object)string7));
      assertFalse(string13.equals((Object)string2));
      assertFalse(string13.equals((Object)string0));
      assertFalse(string13.equals((Object)string5));
      assertFalse(string13.equals((Object)string9));
      assertFalse(string13.equals((Object)string1));
      assertFalse(string13.equals((Object)string6));
      assertFalse(string13.equals((Object)string8));
      assertFalse(string13.equals((Object)string10));
      assertFalse(string13.equals((Object)string3));
      assertFalse(string13.equals((Object)string12));
      assertFalse(string13.equals((Object)string4));
      assertFalse(string13.equals((Object)string7));
      assertFalse(string13.equals((Object)string11));
      assertFalse(string8.equals((Object)string9));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string10));
      assertFalse(string8.equals((Object)string13));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string12));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string11));
      
      String string14 = "";
      String string15 = "";
      String string16 = ",]:`Lj1a*.Pa01'";
      Server server1 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn(string14, string14).when(server1).description();
      doReturn(string15, string16, string9).when(server1).url();
      doReturn((ServerVariable[]) null).when(server1).variables();
      Optional<io.swagger.oas.models.servers.Server> optional3 = OperationParser.getServer(server1);
      assertNotNull(optional3);
      assertNotSame(optional3, optional2);
      assertNotSame(string11, string14);
      assertNotSame(string11, string13);
      assertNotSame(string11, string4);
      assertNotSame(string11, string7);
      assertNotSame(string11, string10);
      assertNotSame(string11, string9);
      assertNotSame(string11, string3);
      assertNotSame(string11, string15);
      assertNotSame(string11, string2);
      assertNotSame(string11, string16);
      assertNotSame(string11, string12);
      assertNotSame(string11, string5);
      assertNotSame(string11, string6);
      assertNotSame(string11, string0);
      assertNotSame(string11, string1);
      assertNotSame(string11, string8);
      assertNotSame(string2, string12);
      assertNotSame(string2, string5);
      assertNotSame(string2, string16);
      assertNotSame(string2, string3);
      assertNotSame(string2, string14);
      assertNotSame(string2, string11);
      assertNotSame(string2, string7);
      assertNotSame(string2, string9);
      assertNotSame(string2, string4);
      assertNotSame(string2, string0);
      assertNotSame(string2, string15);
      assertNotSame(string2, string8);
      assertNotSame(string2, string10);
      assertNotSame(string2, string13);
      assertNotSame(string2, string6);
      assertNotSame(string2, string1);
      assertSame(string12, string15);
      assertNotSame(string12, string6);
      assertSame(string12, string14);
      assertSame(string12, string1);
      assertNotSame(string12, string2);
      assertNotSame(string12, string16);
      assertNotSame(string12, string4);
      assertNotSame(string12, string0);
      assertNotSame(string12, string11);
      assertNotSame(string12, string8);
      assertNotSame(string12, string5);
      assertNotSame(string12, string13);
      assertSame(string12, string7);
      assertNotSame(string12, string10);
      assertNotSame(string12, string9);
      assertNotSame(string12, string3);
      assertNotSame(string6, string5);
      assertNotSame(string6, string2);
      assertNotSame(string6, string16);
      assertNotSame(string6, string8);
      assertNotSame(string6, string11);
      assertNotSame(string6, string1);
      assertNotSame(string6, string7);
      assertNotSame(string6, string9);
      assertNotSame(string6, string3);
      assertNotSame(string6, string12);
      assertNotSame(string6, string14);
      assertNotSame(string6, string15);
      assertNotSame(string6, string4);
      assertNotSame(string6, string10);
      assertNotSame(string6, string13);
      assertNotSame(string6, string0);
      assertNotSame(string14, string5);
      assertSame(string14, string12);
      assertNotSame(string14, string11);
      assertNotSame(string14, string2);
      assertNotSame(string14, string16);
      assertSame(string14, string15);
      assertNotSame(string14, string3);
      assertNotSame(string14, string13);
      assertSame(string14, string1);
      assertNotSame(string14, string4);
      assertNotSame(string14, string9);
      assertNotSame(string14, string10);
      assertSame(string14, string7);
      assertNotSame(string14, string6);
      assertNotSame(string14, string0);
      assertNotSame(string14, string8);
      assertNotSame(string15, string2);
      assertNotSame(string15, string16);
      assertSame(string15, string12);
      assertNotSame(string15, string6);
      assertNotSame(string15, string8);
      assertNotSame(string15, string11);
      assertNotSame(string15, string3);
      assertNotSame(string15, string10);
      assertSame(string15, string14);
      assertSame(string15, string7);
      assertNotSame(string15, string5);
      assertNotSame(string15, string4);
      assertNotSame(string15, string9);
      assertNotSame(string15, string13);
      assertSame(string15, string1);
      assertNotSame(string15, string0);
      assertNotSame(string16, string12);
      assertNotSame(string16, string2);
      assertNotSame(string16, string5);
      assertNotSame(string16, string14);
      assertNotSame(string16, string3);
      assertNotSame(string16, string11);
      assertNotSame(string16, string9);
      assertNotSame(string16, string1);
      assertNotSame(string16, string0);
      assertNotSame(string16, string4);
      assertNotSame(string16, string7);
      assertNotSame(string16, string15);
      assertNotSame(string16, string10);
      assertNotSame(string16, string13);
      assertNotSame(string16, string6);
      assertNotSame(string16, string8);
      assertNotSame(string9, string6);
      assertNotSame(string9, string12);
      assertNotSame(string9, string3);
      assertNotSame(string9, string10);
      assertNotSame(string9, string15);
      assertNotSame(string9, string13);
      assertNotSame(string9, string5);
      assertNotSame(string9, string4);
      assertNotSame(string9, string11);
      assertNotSame(string9, string14);
      assertNotSame(string9, string7);
      assertNotSame(string9, string1);
      assertNotSame(string9, string0);
      assertNotSame(string9, string2);
      assertNotSame(string9, string16);
      assertNotSame(string9, string8);
      assertFalse(optional3.equals((Object)optional2));
      assertFalse(string11.equals((Object)string14));
      assertFalse(string11.equals((Object)string13));
      assertFalse(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string7));
      assertFalse(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string9));
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string15));
      assertFalse(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string16));
      assertFalse(string11.equals((Object)string12));
      assertFalse(string11.equals((Object)string5));
      assertFalse(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string8));
      assertFalse(string2.equals((Object)string12));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string16));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string14));
      assertFalse(string2.equals((Object)string11));
      assertFalse(string2.equals((Object)string7));
      assertFalse(string2.equals((Object)string9));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string15));
      assertFalse(string2.equals((Object)string8));
      assertFalse(string2.equals((Object)string10));
      assertFalse(string2.equals((Object)string13));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string12.equals((Object)string6));
      assertFalse(string12.equals((Object)string0));
      assertFalse(string12.equals((Object)string11));
      assertFalse(string12.equals((Object)string8));
      assertFalse(string12.equals((Object)string5));
      assertFalse(string12.equals((Object)string2));
      assertFalse(string12.equals((Object)string16));
      assertFalse(string12.equals((Object)string13));
      assertFalse(string12.equals((Object)string4));
      assertFalse(string12.equals((Object)string10));
      assertFalse(string12.equals((Object)string9));
      assertFalse(string12.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string16));
      assertFalse(string6.equals((Object)string8));
      assertFalse(string6.equals((Object)string11));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string7));
      assertFalse(string6.equals((Object)string9));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string12));
      assertFalse(string6.equals((Object)string14));
      assertFalse(string6.equals((Object)string15));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string10));
      assertFalse(string6.equals((Object)string13));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string14.equals((Object)string5));
      assertFalse(string14.equals((Object)string13));
      assertFalse(string14.equals((Object)string4));
      assertFalse(string14.equals((Object)string11));
      assertFalse(string14.equals((Object)string2));
      assertFalse(string14.equals((Object)string16));
      assertFalse(string14.equals((Object)string9));
      assertFalse(string14.equals((Object)string10));
      assertFalse(string14.equals((Object)string6));
      assertFalse(string14.equals((Object)string3));
      assertFalse(string14.equals((Object)string0));
      assertFalse(string14.equals((Object)string8));
      assertFalse(string15.equals((Object)string4));
      assertFalse(string15.equals((Object)string2));
      assertFalse(string15.equals((Object)string16));
      assertFalse(string15.equals((Object)string9));
      assertFalse(string15.equals((Object)string13));
      assertFalse(string15.equals((Object)string6));
      assertFalse(string15.equals((Object)string8));
      assertFalse(string15.equals((Object)string11));
      assertFalse(string15.equals((Object)string3));
      assertFalse(string15.equals((Object)string10));
      assertFalse(string15.equals((Object)string0));
      assertFalse(string15.equals((Object)string5));
      assertFalse(string16.equals((Object)string12));
      assertFalse(string16.equals((Object)string2));
      assertFalse(string16.equals((Object)string5));
      assertFalse(string16.equals((Object)string14));
      assertFalse(string16.equals((Object)string3));
      assertFalse(string16.equals((Object)string11));
      assertFalse(string16.equals((Object)string9));
      assertFalse(string16.equals((Object)string1));
      assertFalse(string16.equals((Object)string0));
      assertFalse(string16.equals((Object)string4));
      assertFalse(string16.equals((Object)string7));
      assertFalse(string16.equals((Object)string15));
      assertFalse(string16.equals((Object)string10));
      assertFalse(string16.equals((Object)string13));
      assertFalse(string16.equals((Object)string6));
      assertFalse(string16.equals((Object)string8));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string12));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string10));
      assertFalse(string9.equals((Object)string15));
      assertFalse(string9.equals((Object)string13));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string11));
      assertFalse(string9.equals((Object)string14));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string16));
      assertFalse(string9.equals((Object)string8));
      
      Server[] serverArray0 = new Server[6];
      serverArray0[0] = server0;
      serverArray0[1] = server0;
      serverArray0[2] = server1;
      serverArray0[3] = server1;
      serverArray0[4] = server1;
      serverArray0[5] = serverArray0[4];
      // Undeclared exception!
      try { 
        OperationParser.getServers(serverArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test092()  throws Throwable  {
      ApiResponse[] apiResponseArray0 = new ApiResponse[6];
      Content[] contentArray0 = new Content[4];
      Class<ApiResponses> class0 = ApiResponses.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(schema0).implementation();
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn(schema0).when(content0).schema();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[0];
      contentArray0[3] = contentArray0[2];
      String string0 = "hS";
      ApiResponse apiResponse0 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn(contentArray0).when(apiResponse0).content();
      doReturn(string0, string0).when(apiResponse0).description();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      apiResponseArray0[3] = apiResponseArray0[2];
      apiResponseArray0[4] = apiResponseArray0[3];
      apiResponseArray0[5] = apiResponseArray0[4];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = null;
      // Undeclared exception!
      try { 
        OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test093()  throws Throwable  {
      ApiResponse[] apiResponseArray0 = new ApiResponse[6];
      Content[] contentArray0 = new Content[4];
      Class<Object> class0 = Object.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(schema0).implementation();
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(content0).mediaType();
      doReturn(schema0).when(content0).schema();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[0];
      contentArray0[2] = contentArray0[2];
      String string0 = "hS";
      ApiResponse apiResponse0 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn(contentArray0).when(apiResponse0).content();
      doReturn(string0, string0).when(apiResponse0).description();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      apiResponseArray0[3] = apiResponseArray0[2];
      apiResponseArray0[4] = apiResponseArray0[3];
      apiResponseArray0[5] = apiResponseArray0[4];
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      doReturn((String[]) null).when(produces0).value();
      Components components0 = null;
      // Undeclared exception!
      try { 
        OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test094()  throws Throwable  {
      ApiResponse[] apiResponseArray0 = new ApiResponse[6];
      Content[] contentArray0 = new Content[4];
      Class<Object> class0 = Object.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(schema0).implementation();
      String string0 = "B";
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((ExampleObject[]) null).when(content0).examples();
      doReturn(string0, (String) null).when(content0).mediaType();
      doReturn(schema0).when(content0).schema();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[0];
      contentArray0[2] = contentArray0[2];
      String string1 = "hS";
      ApiResponse apiResponse0 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn(contentArray0).when(apiResponse0).content();
      doReturn(string1, string1).when(apiResponse0).description();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      apiResponseArray0[3] = apiResponseArray0[2];
      apiResponseArray0[4] = apiResponseArray0[3];
      apiResponseArray0[5] = apiResponseArray0[4];
      String[] stringArray0 = new String[1];
      stringArray0[0] = string0;
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = null;
      // Undeclared exception!
      try { 
        OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test095()  throws Throwable  {
      ApiResponse[] apiResponseArray0 = new ApiResponse[6];
      Content[] contentArray0 = new Content[4];
      Class<Integer> class0 = Integer.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(schema0).implementation();
      String string0 = null;
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((ExampleObject[]) null).when(content0).examples();
      doReturn(string0).when(content0).mediaType();
      doReturn(schema0).when(content0).schema();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[0];
      contentArray0[3] = contentArray0[2];
      String string1 = "hS";
      ApiResponse apiResponse0 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn(contentArray0).when(apiResponse0).content();
      doReturn(string1, string1).when(apiResponse0).description();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      apiResponseArray0[3] = apiResponseArray0[2];
      apiResponseArray0[4] = apiResponseArray0[3];
      apiResponseArray0[5] = apiResponseArray0[4];
      String[] stringArray0 = new String[5];
      stringArray0[0] = string0;
      stringArray0[1] = string1;
      stringArray0[2] = string0;
      stringArray0[3] = string1;
      stringArray0[4] = string0;
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      doReturn(stringArray0).when(produces0).value();
      Components components0 = null;
      // Undeclared exception!
      try { 
        OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test096()  throws Throwable  {
      String string0 = "com.fasterxml.jackson.databind.ext.NioPathDeserializer";
      String string1 = "";
      String string2 = "uN";
      String string3 = "com.fasterxml.jackson.databind.ser.std.SqlTimeSerializer";
      LinkParameter[] linkParameterArray0 = new LinkParameter[1];
      io.swagger.oas.annotations.links.Link link0 = mock(io.swagger.oas.annotations.links.Link.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string1).when(link0).description();
      doReturn(string1).when(link0).operationId();
      doReturn(string2, string3).when(link0).operationRef();
      doReturn(linkParameterArray0).when(link0).parameters();
      // Undeclared exception!
      try { 
        OperationParser.getLink(link0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test097()  throws Throwable  {
      ApiResponse[] apiResponseArray0 = new ApiResponse[6];
      Content[] contentArray0 = new Content[4];
      Class<Integer> class0 = Integer.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isAnnotation());
      assertEquals("int", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(schema0).implementation();
      String string0 = null;
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((ExampleObject[]) null).when(content0).examples();
      doReturn(string0).when(content0).mediaType();
      doReturn(schema0).when(content0).schema();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[0];
      contentArray0[3] = contentArray0[2];
      String string1 = "hS";
      ApiResponse apiResponse0 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn(contentArray0).when(apiResponse0).content();
      doReturn(string1, string1).when(apiResponse0).description();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      apiResponseArray0[3] = apiResponseArray0[2];
      apiResponseArray0[4] = apiResponseArray0[3];
      apiResponseArray0[5] = apiResponseArray0[4];
      String[] stringArray0 = new String[3];
      stringArray0[0] = string0;
      Server server0 = mock(Server.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(server0).description();
      doReturn((String) null).when(server0).url();
      Optional<io.swagger.oas.models.servers.Server> optional0 = OperationParser.getServer(server0);
      assertNotNull(optional0);
      
      stringArray0[1] = string0;
      stringArray0[2] = string1;
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      doReturn(stringArray0).when(produces0).value();
      Components components0 = null;
      // Undeclared exception!
      try { 
        OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test098()  throws Throwable  {
      ApiResponse[] apiResponseArray0 = new ApiResponse[6];
      Content[] contentArray0 = new Content[4];
      Class<Object> class0 = Object.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(schema0).implementation();
      String string0 = "java.lang";
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((ExampleObject[]) null).when(content0).examples();
      doReturn(string0, (String) null).when(content0).mediaType();
      doReturn(schema0).when(content0).schema();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[0];
      contentArray0[2] = contentArray0[2];
      String string1 = "hS";
      ApiResponse apiResponse0 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      apiResponseArray0[3] = apiResponseArray0[2];
      apiResponseArray0[4] = apiResponseArray0[3];
      apiResponseArray0[5] = apiResponseArray0[4];
      String[] stringArray0 = new String[7];
      stringArray0[0] = string0;
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = new Components();
      assertNotNull(components0);
      
      String string2 = "";
      Callback callback0 = new Callback();
      assertNotNull(callback0);
      assertTrue(callback0.isEmpty());
      assertEquals(0, callback0.size());
      
      Components components1 = components0.addCallbacks(string2, callback0);
      assertNotNull(components1);
      assertSame(components0, components1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(components1, components0);
      assertTrue(callback0.isEmpty());
      assertEquals(0, callback0.size());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = "    xml: ";
      RequestBody requestBody0 = null;
      Components components2 = components1.addRequestBodies(string3, requestBody0);
      assertNotNull(components2);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertTrue(callback0.isEmpty());
      assertEquals(0, callback0.size());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      Map<String, Header> map0 = components2.getHeaders();
      assertNull(map0);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertTrue(callback0.isEmpty());
      assertEquals(0, callback0.size());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      Components components3 = components1.headers(map0);
      assertNotNull(components3);
      assertSame(components0, components3);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertSame(components1, components3);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertSame(components2, components3);
      assertSame(components2, components0);
      assertSame(components2, components1);
      assertSame(components3, components1);
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertTrue(callback0.isEmpty());
      assertEquals(0, callback0.size());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      // Undeclared exception!
      try { 
        OperationParser.getContent(contentArray0, produces0, produces0, components3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test099()  throws Throwable  {
      ApiResponse[] apiResponseArray0 = new ApiResponse[6];
      Content[] contentArray0 = new Content[4];
      Class<Integer> class0 = Integer.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(schema0).implementation();
      String string0 = "";
      ExampleObject[] exampleObjectArray0 = new ExampleObject[0];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn(exampleObjectArray0).when(content0).examples();
      doReturn(string0).when(content0).mediaType();
      doReturn(schema0, (Schema) null).when(content0).schema();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[0];
      contentArray0[3] = contentArray0[2];
      String string1 = "hS";
      ApiResponse apiResponse0 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn(contentArray0).when(apiResponse0).content();
      doReturn(string1, string1).when(apiResponse0).description();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      apiResponseArray0[3] = apiResponse0;
      apiResponseArray0[4] = apiResponseArray0[3];
      apiResponseArray0[5] = apiResponseArray0[4];
      String[] stringArray0 = new String[2];
      stringArray0[0] = string1;
      stringArray0[1] = string0;
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      doReturn(stringArray0).when(produces0).value();
      Components components0 = null;
      // Undeclared exception!
      try { 
        OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test100()  throws Throwable  {
      ApiResponse[] apiResponseArray0 = new ApiResponse[6];
      Content[] contentArray0 = new Content[4];
      Class<Integer> class0 = Integer.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(schema0).implementation();
      String string0 = "";
      ExampleObject[] exampleObjectArray0 = new ExampleObject[1];
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(exampleObject0).name();
      exampleObjectArray0[0] = exampleObject0;
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn(exampleObjectArray0).when(content0).examples();
      doReturn(string0).when(content0).mediaType();
      doReturn(schema0, (Schema) null).when(content0).schema();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[0];
      contentArray0[3] = contentArray0[2];
      String string1 = "hS";
      ApiResponse apiResponse0 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      doReturn(contentArray0).when(apiResponse0).content();
      doReturn(string1, string1).when(apiResponse0).description();
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      apiResponseArray0[3] = apiResponse0;
      apiResponseArray0[4] = apiResponseArray0[3];
      apiResponseArray0[5] = apiResponseArray0[4];
      String[] stringArray0 = new String[2];
      stringArray0[0] = string1;
      stringArray0[1] = string0;
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      doReturn(stringArray0).when(produces0).value();
      Components components0 = null;
      // Undeclared exception!
      try { 
        OperationParser.getApiResponses(apiResponseArray0, produces0, produces0, components0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test101()  throws Throwable  {
      ApiResponse[] apiResponseArray0 = new ApiResponse[6];
      Content[] contentArray0 = new Content[4];
      Class<Object> class0 = Object.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(schema0).implementation();
      String string0 = "_i/#,`>nOI";
      ExampleObject[] exampleObjectArray0 = new ExampleObject[8];
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(exampleObject0).name();
      exampleObjectArray0[0] = exampleObject0;
      exampleObjectArray0[1] = exampleObjectArray0[0];
      exampleObjectArray0[2] = exampleObjectArray0[1];
      exampleObjectArray0[3] = exampleObjectArray0[2];
      exampleObjectArray0[4] = exampleObjectArray0[3];
      exampleObjectArray0[5] = exampleObjectArray0[4];
      exampleObjectArray0[6] = exampleObjectArray0[5];
      exampleObjectArray0[7] = exampleObjectArray0[6];
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn(exampleObjectArray0).when(content0).examples();
      doReturn(string0, string0).when(content0).mediaType();
      doReturn(schema0, (Schema) null).when(content0).schema();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[0];
      contentArray0[2] = contentArray0[2];
      String string1 = "hS";
      ApiResponse apiResponse0 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      apiResponseArray0[3] = apiResponseArray0[2];
      apiResponseArray0[4] = apiResponseArray0[3];
      apiResponseArray0[5] = apiResponseArray0[4];
      String[] stringArray0 = new String[7];
      String string2 = "JSON Creator returned null";
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = null;
      // Undeclared exception!
      try { 
        OperationParser.getContent(contentArray0, produces0, produces0, components0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test102()  throws Throwable  {
      ApiResponse[] apiResponseArray0 = new ApiResponse[6];
      Content[] contentArray0 = new Content[3];
      Class<Object> class0 = Object.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      String string0 = "_i/#,`>nOI";
      ExampleObject[] exampleObjectArray0 = new ExampleObject[9];
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(exampleObject0).name();
      exampleObjectArray0[0] = exampleObject0;
      exampleObjectArray0[1] = exampleObjectArray0[0];
      exampleObjectArray0[2] = exampleObjectArray0[1];
      exampleObjectArray0[3] = exampleObjectArray0[2];
      exampleObjectArray0[4] = exampleObjectArray0[3];
      exampleObjectArray0[5] = exampleObjectArray0[4];
      exampleObjectArray0[6] = exampleObjectArray0[5];
      exampleObjectArray0[7] = exampleObjectArray0[6];
      exampleObjectArray0[8] = exampleObjectArray0[7];
      String string1 = "java.langio.swagger.oas.models.headers.Header";
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn((Object) exampleObjectArray0, (Object) null).when(content0).examples();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[0];
      contentArray0[2] = contentArray0[2];
      String string2 = "hS";
      Components components0 = new Components();
      assertNotNull(components0);
      
      String string3 = null;
      Link link0 = null;
      Components components1 = components0.addLinks(string3, link0);
      assertNotNull(components1);
      assertSame(components0, components1);
      assertSame(components1, components0);
      
      Map<String, io.swagger.oas.models.parameters.Parameter> map0 = components1.getParameters();
      assertNull(map0);
      assertSame(components0, components1);
      assertSame(components1, components0);
      
      Components components2 = components1.parameters(map0);
      assertNotNull(components2);
      assertSame(components0, components2);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components2, components1);
      assertSame(components2, components0);
      
      HashMap<String, Link> hashMap0 = new HashMap<String, Link>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Components components3 = components2.links(hashMap0);
      assertNotNull(components3);
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components1, components3);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(components2, components0);
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertSame(components3, components1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      String string4 = "y-*";
      Header header0 = new Header();
      assertNotNull(header0);
      assertNull(header0.getDeprecated());
      assertNull(header0.getStyle());
      assertNull(header0.getExample());
      assertNull(header0.get$ref());
      assertNull(header0.getDescription());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getRequired());
      assertNull(header0.getExplode());
      
      io.swagger.oas.models.media.Content content1 = new io.swagger.oas.models.media.Content();
      assertNotNull(content1);
      assertEquals(0, content1.size());
      assertTrue(content1.isEmpty());
      
      Header header1 = header0.content(content1);
      assertNotNull(header1);
      assertSame(header0, header1);
      assertSame(header1, header0);
      assertNull(header0.getDeprecated());
      assertNull(header0.getStyle());
      assertNull(header0.getExample());
      assertNull(header0.get$ref());
      assertNull(header0.getDescription());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getRequired());
      assertNull(header0.getExplode());
      assertEquals(0, content1.size());
      assertTrue(content1.isEmpty());
      assertNull(header1.getExplode());
      assertNull(header1.getDeprecated());
      assertNull(header1.get$ref());
      assertNull(header1.getStyle());
      assertNull(header1.getAllowEmptyValue());
      assertNull(header1.getExample());
      assertNull(header1.getDescription());
      assertNull(header1.getRequired());
      
      List<Example> list0 = header1.getExamples();
      assertNull(list0);
      assertSame(header0, header1);
      assertSame(header1, header0);
      assertNull(header0.getDeprecated());
      assertNull(header0.getStyle());
      assertNull(header0.getExample());
      assertNull(header0.get$ref());
      assertNull(header0.getDescription());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getRequired());
      assertNull(header0.getExplode());
      assertEquals(0, content1.size());
      assertTrue(content1.isEmpty());
      assertNull(header1.getExplode());
      assertNull(header1.getDeprecated());
      assertNull(header1.get$ref());
      assertNull(header1.getStyle());
      assertNull(header1.getAllowEmptyValue());
      assertNull(header1.getExample());
      assertNull(header1.getDescription());
      assertNull(header1.getRequired());
      
      Header header2 = header1.examples(list0);
      assertNotNull(header2);
      assertSame(header0, header2);
      assertSame(header0, header1);
      assertSame(header1, header2);
      assertSame(header1, header0);
      assertSame(header2, header0);
      assertSame(header2, header1);
      assertNull(header0.getDeprecated());
      assertNull(header0.getStyle());
      assertNull(header0.getExample());
      assertNull(header0.get$ref());
      assertNull(header0.getDescription());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getRequired());
      assertNull(header0.getExplode());
      assertEquals(0, content1.size());
      assertTrue(content1.isEmpty());
      assertNull(header1.getExplode());
      assertNull(header1.getDeprecated());
      assertNull(header1.get$ref());
      assertNull(header1.getStyle());
      assertNull(header1.getAllowEmptyValue());
      assertNull(header1.getExample());
      assertNull(header1.getDescription());
      assertNull(header1.getRequired());
      assertNull(header2.getStyle());
      assertNull(header2.getExample());
      assertNull(header2.get$ref());
      assertNull(header2.getDescription());
      assertNull(header2.getAllowEmptyValue());
      assertNull(header2.getDeprecated());
      assertNull(header2.getRequired());
      assertNull(header2.getExplode());
      
      Components components4 = components3.addHeaders(string4, header2);
      assertNotNull(components4);
      assertSame(header0, header2);
      assertSame(header0, header1);
      assertSame(header1, header2);
      assertSame(header1, header0);
      assertSame(header2, header0);
      assertSame(header2, header1);
      assertSame(components4, components1);
      assertSame(components4, components2);
      assertSame(components4, components0);
      assertSame(components4, components3);
      assertSame(components0, components2);
      assertSame(components0, components3);
      assertSame(components0, components1);
      assertSame(components0, components4);
      assertSame(components1, components0);
      assertSame(components1, components2);
      assertSame(components1, components4);
      assertSame(components1, components3);
      assertSame(components2, components1);
      assertSame(components2, components3);
      assertSame(components2, components0);
      assertSame(components2, components4);
      assertSame(components3, components0);
      assertSame(components3, components2);
      assertSame(components3, components1);
      assertSame(components3, components4);
      assertNotSame(string4, string0);
      assertNotSame(string4, string2);
      assertNotSame(string4, string1);
      assertNull(header0.getDeprecated());
      assertNull(header0.getStyle());
      assertNull(header0.getExample());
      assertNull(header0.get$ref());
      assertNull(header0.getDescription());
      assertNull(header0.getAllowEmptyValue());
      assertNull(header0.getRequired());
      assertNull(header0.getExplode());
      assertEquals(0, content1.size());
      assertTrue(content1.isEmpty());
      assertNull(header1.getExplode());
      assertNull(header1.getDeprecated());
      assertNull(header1.get$ref());
      assertNull(header1.getStyle());
      assertNull(header1.getAllowEmptyValue());
      assertNull(header1.getExample());
      assertNull(header1.getDescription());
      assertNull(header1.getRequired());
      assertNull(header2.getStyle());
      assertNull(header2.getExample());
      assertNull(header2.get$ref());
      assertNull(header2.getDescription());
      assertNull(header2.getAllowEmptyValue());
      assertNull(header2.getDeprecated());
      assertNull(header2.getRequired());
      assertNull(header2.getExplode());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      
      // Undeclared exception!
      try { 
        OperationParser.getContents(contentArray0, components4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test103()  throws Throwable  {
      ApiResponse[] apiResponseArray0 = new ApiResponse[6];
      Content[] contentArray0 = new Content[4];
      Class<Object> class0 = Object.class;
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(schema0).implementation();
      String string0 = "_i/#,`>nOI";
      ExampleObject[] exampleObjectArray0 = new ExampleObject[11];
      String string1 = "G+fE=1";
      String string2 = "java.langjava.lang.Integer";
      String string3 = "required";
      String string4 = "default";
      String string5 = null;
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn(string3, string1, string4, (String) null, (String) null).when(exampleObject0).externalValue();
      doReturn(string0, string1, string2, string4, string4).when(exampleObject0).name();
      doReturn(string3, string5, string2, (String) null, (String) null).when(exampleObject0).summary();
      doReturn(string3, string2, string2, (String) null, (String) null).when(exampleObject0).value();
      exampleObjectArray0[0] = exampleObject0;
      exampleObjectArray0[1] = exampleObjectArray0[0];
      exampleObjectArray0[2] = exampleObjectArray0[1];
      String string6 = "";
      Class<io.swagger.oas.models.servers.Server> class1 = io.swagger.oas.models.servers.Server.class;
      Schema schema1 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(class1).when(schema1).implementation();
      String string7 = "APIKEY";
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      doReturn(exampleObjectArray0).when(content0).examples();
      doReturn(string0, string6, string2, string1, string7).when(content0).mediaType();
      doReturn(schema0, schema1).when(content0).schema();
      contentArray0[0] = content0;
      contentArray0[1] = contentArray0[0];
      contentArray0[2] = contentArray0[0];
      contentArray0[2] = contentArray0[2];
      String string8 = "hS";
      ApiResponse apiResponse0 = mock(ApiResponse.class, new ViolatedAssumptionAnswer());
      apiResponseArray0[0] = apiResponse0;
      apiResponseArray0[1] = apiResponseArray0[0];
      apiResponseArray0[2] = apiResponseArray0[1];
      apiResponseArray0[3] = apiResponseArray0[2];
      apiResponseArray0[4] = apiResponseArray0[3];
      apiResponseArray0[5] = apiResponseArray0[4];
      String[] stringArray0 = new String[7];
      String string9 = "JSON Creator returned null";
      Produces produces0 = mock(Produces.class, new ViolatedAssumptionAnswer());
      Components components0 = null;
      // Undeclared exception!
      try { 
        OperationParser.getContent(contentArray0, produces0, produces0, components0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.swagger.jaxrs2.OperationParser", e);
      }
  }

  @Test(timeout = 11000)
  public void test104()  throws Throwable  {
      LinkParameter[] linkParameterArray0 = new LinkParameter[9];
      String string0 = null;
      String string1 = "rHv_4YD";
      String string2 = "IiZp}s]";
      String string3 = "/C<d2ZooMue\\N79";
      String string4 = "[)=R";
      String string5 = "java.langio.swagger.oas.models.info.Contact";
      String string6 = "O2v% >";
      LinkParameter linkParameter0 = mock(LinkParameter.class, new ViolatedAssumptionAnswer());
      doReturn(string4, string5, string1, string6, string2).when(linkParameter0).expression();
      doReturn(string0, string1, string0, string2, string3).when(linkParameter0).name();
      linkParameterArray0[0] = linkParameter0;
      linkParameterArray0[1] = linkParameterArray0[0];
      linkParameterArray0[2] = linkParameterArray0[1];
      linkParameterArray0[3] = linkParameterArray0[2];
      linkParameterArray0[4] = linkParameterArray0[3];
      linkParameterArray0[5] = linkParameterArray0[4];
      linkParameterArray0[6] = linkParameterArray0[5];
      linkParameterArray0[7] = linkParameterArray0[6];
      linkParameterArray0[8] = linkParameterArray0[7];
      Map<String, String> map0 = OperationParser.getLinkParameters(linkParameterArray0);
      assertNotNull(map0);
      assertEquals(9, linkParameterArray0.length);
      assertFalse(map0.isEmpty());
      assertEquals(2, map0.size());
      
      String string7 = "b,]-_di[b";
      String string8 = null;
      Contact contact0 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn(string7, string8).when(contact0).email();
      doReturn(string2, string1).when(contact0).name();
      doReturn(string3, string2).when(contact0).url();
      Optional<io.swagger.oas.models.info.Contact> optional0 = OperationParser.getContact(contact0);
      assertNotNull(optional0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string5);
      assertNotSame(string1, string7);
      assertNotSame(string1, string4);
      assertNotSame(string1, string6);
      assertNotSame(string1, string3);
      assertNotSame(string7, string2);
      assertNotSame(string7, string5);
      assertNotSame(string7, string3);
      assertNotSame(string7, string1);
      assertNotSame(string7, string6);
      assertNotSame(string7, string4);
      assertNotSame(string2, string6);
      assertNotSame(string2, string5);
      assertNotSame(string2, string4);
      assertNotSame(string2, string7);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string3, string4);
      assertNotSame(string3, string7);
      assertNotSame(string3, string5);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string6);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string7));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string7));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string7));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string6));
      
      String string9 = "it*my^";
      Contact contact1 = mock(Contact.class, new ViolatedAssumptionAnswer());
      doReturn(string7, string9).when(contact1).email();
      doReturn(string0).when(contact1).name();
      doReturn(string1, string4).when(contact1).url();
      Optional<io.swagger.oas.models.info.Contact> optional1 = OperationParser.getContact(contact1);
      assertNotNull(optional1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string5);
      assertNotSame(string1, string9);
      assertNotSame(string1, string7);
      assertNotSame(string1, string4);
      assertNotSame(string1, string6);
      assertNotSame(string1, string3);
      assertNotSame(string7, string2);
      assertNotSame(string7, string5);
      assertNotSame(string7, string3);
      assertNotSame(string7, string1);
      assertNotSame(string7, string6);
      assertNotSame(string7, string4);
      assertNotSame(string7, string9);
      assertNotSame(string4, string5);
      assertNotSame(string4, string2);
      assertNotSame(string4, string9);
      assertNotSame(string4, string7);
      assertNotSame(string4, string3);
      assertNotSame(string4, string6);
      assertNotSame(string4, string1);
      assertNotSame(string9, string6);
      assertNotSame(string9, string3);
      assertNotSame(string9, string4);
      assertNotSame(string9, string1);
      assertNotSame(string9, string7);
      assertNotSame(string9, string5);
      assertNotSame(string9, string2);
      assertNotSame(optional1, optional0);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string9));
      assertFalse(string1.equals((Object)string7));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string9));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string9));
      assertFalse(string4.equals((Object)string7));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string6));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string2));
      assertFalse(optional1.equals((Object)optional0));
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = string3;
      stringArray0[1] = string2;
      stringArray0[2] = string1;
      stringArray0[3] = string1;
      stringArray0[4] = string1;
      stringArray0[5] = string7;
      stringArray0[6] = string2;
      stringArray0[7] = string3;
      stringArray0[8] = string2;
      boolean boolean0 = true;
      String string10 = " has mismatch: ";
      String string11 = "#/components/schemas/";
      boolean boolean1 = true;
      String string12 = "no description";
      String string13 = null;
      ExternalDocumentation externalDocumentation0 = mock(ExternalDocumentation.class, new ViolatedAssumptionAnswer());
      doReturn(string12, (String) null).when(externalDocumentation0).description();
      doReturn(string13).when(externalDocumentation0).url();
      int int0 = 1;
      int int1 = (-1942);
      String string14 = "*/*";
      boolean boolean2 = true;
      String string15 = "java.lang";
      String string16 = "]|v*z2|8Iu?\\S";
      String string17 = "java.langio.swagger.oas.models.media.Content";
      boolean boolean3 = true;
      int int2 = 9;
      String string18 = "java.langio.swagger.oas.models.responses.ApiResponses";
      Schema schema0 = mock(Schema.class, new ViolatedAssumptionAnswer());
      doReturn(stringArray0).when(schema0).allowableValues();
      doReturn(stringArray0[0], stringArray0[7]).when(schema0).defaultValue();
      doReturn(boolean0, boolean2).when(schema0).deprecated();
      doReturn(string10, string15).when(schema0).description();
      doReturn(string11, stringArray0[1], string16, string17).when(schema0).example();
      doReturn(boolean0, boolean0).when(schema0).exclusiveMaximum();
      doReturn(boolean1, boolean3).when(schema0).exclusiveMinimum();
      doReturn(externalDocumentation0).when(schema0).externalDocs();
      doReturn(string2, string11).when(schema0).format();
      doReturn(int0).when(schema0).maxLength();
      doReturn(int2, 0).when(schema0).maxProperties();
      doReturn(int1).when(schema0).minProperties();
      doReturn(string14, stringArray0[6]).when(schema0).pattern();
      doReturn(boolean2, boolean2).when(schema0).readOnly();
      doReturn(stringArray0[8], stringArray0[2]).when(schema0).ref();
      doReturn(string10, string18).when(schema0).type();
      Optional<io.swagger.oas.models.media.Schema> optional2 = (Optional<io.swagger.oas.models.media.Schema>)OperationParser.getSchemaFromAnnotation(schema0);
      assertNotNull(optional2);
      assertEquals(9, stringArray0.length);
      assertNotSame(string16, string4);
      assertNotSame(string16, string3);
      assertNotSame(string16, string5);
      assertNotSame(string16, string14);
      assertNotSame(string16, string10);
      assertNotSame(string16, string12);
      assertNotSame(string16, string18);
      assertNotSame(string16, string11);
      assertNotSame(string16, string7);
      assertNotSame(string16, string1);
      assertNotSame(string16, string9);
      assertNotSame(string16, string15);
      assertNotSame(string16, string17);
      assertNotSame(string16, string6);
      assertNotSame(string16, string2);
      assertNotSame(string17, string11);
      assertNotSame(string17, string1);
      assertNotSame(string17, string16);
      assertNotSame(string17, string18);
      assertNotSame(string17, string14);
      assertNotSame(string17, string5);
      assertNotSame(string17, string10);
      assertNotSame(string17, string12);
      assertNotSame(string17, string15);
      assertNotSame(string17, string3);
      assertNotSame(string17, string4);
      assertNotSame(string17, string9);
      assertNotSame(string17, string7);
      assertNotSame(string17, string6);
      assertNotSame(string17, string2);
      assertNotSame(string2, string9);
      assertNotSame(string2, string14);
      assertNotSame(string2, string4);
      assertNotSame(string2, string7);
      assertNotSame(string2, string11);
      assertNotSame(string2, string12);
      assertNotSame(string2, string3);
      assertNotSame(string2, string10);
      assertNotSame(string2, string6);
      assertNotSame(string2, string5);
      assertNotSame(string2, string15);
      assertNotSame(string2, string17);
      assertNotSame(string2, string18);
      assertNotSame(string2, string16);
      assertNotSame(string2, string1);
      assertNotSame(string18, string10);
      assertNotSame(string18, string5);
      assertNotSame(string18, string16);
      assertNotSame(string18, string4);
      assertNotSame(string18, string2);
      assertNotSame(string18, string6);
      assertNotSame(string18, string11);
      assertNotSame(string18, string15);
      assertNotSame(string18, string17);
      assertNotSame(string18, string14);
      assertNotSame(string18, string9);
      assertNotSame(string18, string7);
      assertNotSame(string18, string1);
      assertNotSame(string18, string3);
      assertNotSame(string18, string12);
      assertNotSame(string10, string16);
      assertNotSame(string10, string6);
      assertNotSame(string10, string18);
      assertNotSame(string10, string1);
      assertNotSame(string10, string9);
      assertNotSame(string10, string2);
      assertNotSame(string10, string11);
      assertNotSame(string10, string4);
      assertNotSame(string10, string7);
      assertNotSame(string10, string15);
      assertNotSame(string10, string17);
      assertNotSame(string10, string12);
      assertNotSame(string10, string3);
      assertNotSame(string10, string14);
      assertNotSame(string10, string5);
      assertNotSame(string11, string4);
      assertNotSame(string11, string7);
      assertNotSame(string11, string15);
      assertNotSame(string11, string17);
      assertNotSame(string11, string9);
      assertNotSame(string11, string12);
      assertNotSame(string11, string5);
      assertNotSame(string11, string14);
      assertNotSame(string11, string3);
      assertNotSame(string11, string6);
      assertNotSame(string11, string10);
      assertNotSame(string11, string1);
      assertNotSame(string11, string2);
      assertNotSame(string11, string16);
      assertNotSame(string11, string18);
      assertNotSame(string12, string7);
      assertNotSame(string12, string14);
      assertNotSame(string12, string11);
      assertNotSame(string12, string9);
      assertNotSame(string12, string2);
      assertNotSame(string12, string3);
      assertNotSame(string12, string4);
      assertNotSame(string12, string5);
      assertNotSame(string12, string6);
      assertNotSame(string12, string15);
      assertNotSame(string12, string17);
      assertNotSame(string12, string10);
      assertNotSame(string12, string1);
      assertNotSame(string12, string18);
      assertNotSame(string12, string16);
      assertNotSame(string14, string3);
      assertNotSame(string14, string4);
      assertNotSame(string14, string12);
      assertNotSame(string14, string15);
      assertNotSame(string14, string17);
      assertNotSame(string14, string5);
      assertNotSame(string14, string9);
      assertNotSame(string14, string7);
      assertNotSame(string14, string2);
      assertNotSame(string14, string6);
      assertNotSame(string14, string11);
      assertNotSame(string14, string10);
      assertNotSame(string14, string1);
      assertNotSame(string14, string18);
      assertNotSame(string14, string16);
      assertNotSame(string15, string4);
      assertNotSame(string15, string14);
      assertNotSame(string15, string7);
      assertNotSame(string15, string9);
      assertNotSame(string15, string2);
      assertNotSame(string15, string17);
      assertNotSame(string15, string1);
      assertNotSame(string15, string16);
      assertNotSame(string15, string18);
      assertNotSame(string15, string6);
      assertNotSame(string15, string5);
      assertNotSame(string15, string10);
      assertNotSame(string15, string12);
      assertNotSame(string15, string11);
      assertNotSame(string15, string3);
      assertFalse(string2.equals((Object)string9));
      assertFalse(string2.equals((Object)string14));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string7));
      assertFalse(string2.equals((Object)string11));
      assertFalse(string2.equals((Object)string12));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string10));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string15));
      assertFalse(string2.equals((Object)string17));
      assertFalse(string2.equals((Object)string18));
      assertFalse(string2.equals((Object)string16));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string10.equals((Object)string16));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string18));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string11));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string15));
      assertFalse(string10.equals((Object)string17));
      assertFalse(string10.equals((Object)string12));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string14));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string7));
      assertFalse(string11.equals((Object)string15));
      assertFalse(string11.equals((Object)string17));
      assertFalse(string11.equals((Object)string9));
      assertFalse(string11.equals((Object)string12));
      assertFalse(string11.equals((Object)string5));
      assertFalse(string11.equals((Object)string14));
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string16));
      assertFalse(string11.equals((Object)string18));
      assertFalse(string12.equals((Object)string7));
      assertFalse(string12.equals((Object)string14));
      assertFalse(string12.equals((Object)string11));
      assertFalse(string12.equals((Object)string9));
      assertFalse(string12.equals((Object)string2));
      assertFalse(string12.equals((Object)string3));
      assertFalse(string12.equals((Object)string4));
      assertFalse(string12.equals((Object)string5));
      assertFalse(string12.equals((Object)string6));
      assertFalse(string12.equals((Object)string15));
      assertFalse(string12.equals((Object)string17));
      assertFalse(string12.equals((Object)string10));
      assertFalse(string12.equals((Object)string1));
      assertFalse(string12.equals((Object)string18));
      assertFalse(string12.equals((Object)string16));
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(string14.equals((Object)string3));
      assertFalse(string14.equals((Object)string4));
      assertFalse(string14.equals((Object)string12));
      assertFalse(string14.equals((Object)string15));
      assertFalse(string14.equals((Object)string17));
      assertFalse(string14.equals((Object)string5));
      assertFalse(string14.equals((Object)string9));
      assertFalse(string14.equals((Object)string7));
      assertFalse(string14.equals((Object)string2));
      assertFalse(string14.equals((Object)string6));
      assertFalse(string14.equals((Object)string11));
      assertFalse(string14.equals((Object)string10));
      assertFalse(string14.equals((Object)string1));
      assertFalse(string14.equals((Object)string18));
      assertFalse(string14.equals((Object)string16));
      assertFalse(string15.equals((Object)string4));
      assertFalse(string15.equals((Object)string14));
      assertFalse(string15.equals((Object)string7));
      assertFalse(string15.equals((Object)string9));
      assertFalse(string15.equals((Object)string2));
      assertFalse(string15.equals((Object)string17));
      assertFalse(string15.equals((Object)string1));
      assertFalse(string15.equals((Object)string16));
      assertFalse(string15.equals((Object)string18));
      assertFalse(string15.equals((Object)string6));
      assertFalse(string15.equals((Object)string5));
      assertFalse(string15.equals((Object)string10));
      assertFalse(string15.equals((Object)string12));
      assertFalse(string15.equals((Object)string11));
      assertFalse(string15.equals((Object)string3));
      assertFalse(string16.equals((Object)string4));
      assertFalse(string16.equals((Object)string3));
      assertFalse(string16.equals((Object)string5));
      assertFalse(string16.equals((Object)string14));
      assertFalse(string16.equals((Object)string10));
      assertFalse(string16.equals((Object)string12));
      assertFalse(string16.equals((Object)string18));
      assertFalse(string16.equals((Object)string11));
      assertFalse(string16.equals((Object)string7));
      assertFalse(string16.equals((Object)string1));
      assertFalse(string16.equals((Object)string9));
      assertFalse(string16.equals((Object)string15));
      assertFalse(string16.equals((Object)string17));
      assertFalse(string16.equals((Object)string6));
      assertFalse(string16.equals((Object)string2));
      assertFalse(string17.equals((Object)string11));
      assertFalse(string17.equals((Object)string1));
      assertFalse(string17.equals((Object)string16));
      assertFalse(string17.equals((Object)string18));
      assertFalse(string17.equals((Object)string14));
      assertFalse(string17.equals((Object)string5));
      assertFalse(string17.equals((Object)string10));
      assertFalse(string17.equals((Object)string12));
      assertFalse(string17.equals((Object)string15));
      assertFalse(string17.equals((Object)string3));
      assertFalse(string17.equals((Object)string4));
      assertFalse(string17.equals((Object)string9));
      assertFalse(string17.equals((Object)string7));
      assertFalse(string17.equals((Object)string6));
      assertFalse(string17.equals((Object)string2));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(string18.equals((Object)string10));
      assertFalse(string18.equals((Object)string5));
      assertFalse(string18.equals((Object)string16));
      assertFalse(string18.equals((Object)string4));
      assertFalse(string18.equals((Object)string2));
      assertFalse(string18.equals((Object)string6));
      assertFalse(string18.equals((Object)string11));
      assertFalse(string18.equals((Object)string15));
      assertFalse(string18.equals((Object)string17));
      assertFalse(string18.equals((Object)string14));
      assertFalse(string18.equals((Object)string9));
      assertFalse(string18.equals((Object)string7));
      assertFalse(string18.equals((Object)string1));
      assertFalse(string18.equals((Object)string3));
      assertFalse(string18.equals((Object)string12));
      
      MediaType mediaType0 = new MediaType();
      assertNotNull(mediaType0);
      assertNull(mediaType0.getExample());
      
      Map<String, Encoding> map1 = mediaType0.getEncoding();
      assertNull(map1);
      assertNull(mediaType0.getExample());
      
      MediaType mediaType1 = mediaType0.encoding(map1);
      assertNotNull(mediaType1);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType1, mediaType0);
      assertNull(mediaType0.getExample());
      assertNull(mediaType1.getExample());
      
      HashMap<String, Example> hashMap0 = new HashMap<String, Example>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      MediaType mediaType2 = mediaType1.examples(hashMap0);
      assertNotNull(mediaType2);
      assertSame(mediaType0, mediaType2);
      assertSame(mediaType0, mediaType1);
      assertSame(mediaType1, mediaType2);
      assertSame(mediaType1, mediaType0);
      assertSame(mediaType2, mediaType0);
      assertSame(mediaType2, mediaType1);
      assertNull(mediaType0.getExample());
      assertNull(mediaType1.getExample());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(mediaType2.getExample());
      
      String string19 = "java.langio.swagger.oas.models.media.MediaType";
      String string20 = "no description";
      String string21 = "java.langio.swagger.oas.models.responses.ApiResponses";
      String string22 = "0";
      ExampleObject exampleObject0 = mock(ExampleObject.class, new ViolatedAssumptionAnswer());
      doReturn(string19, (String) null).when(exampleObject0).externalValue();
      doReturn(stringArray0[6], string20, stringArray0[6]).when(exampleObject0).name();
      doReturn(string21, (String) null).when(exampleObject0).summary();
      doReturn(string22, (String) null).when(exampleObject0).value();
      // Undeclared exception!
      try { 
        OperationParser.getMediaType(mediaType2, exampleObject0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.JsonFactory", e);
      }
  }
}
